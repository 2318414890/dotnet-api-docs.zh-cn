<Type Name="Type" FullName="System.Type">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cfbb89f918f9b835f4ce991805da7b50f1738352" /><Meta Name="ms.sourcegitcommit" Value="0d09f5af167c53ca4797424c362e6c2616a36009" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="02/05/2019" /><Meta Name="ms.locfileid" Value="55739828" /></Metadata><TypeSignature Language="C#" Value="public abstract class Type : System.Reflection.MemberInfo, System.Reflection.IReflect, System.Runtime.InteropServices._Type" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Type extends System.Reflection.MemberInfo implements class System.Reflection.IReflect, class System.Runtime.InteropServices._Type" />
  <TypeSignature Language="DocId" Value="T:System.Type" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Type&#xA;Inherits MemberInfo&#xA;Implements _Type, IReflect" />
  <TypeSignature Language="C++ CLI" Value="public ref class Type abstract : System::Reflection::MemberInfo, System::Reflection::IReflect, System::Runtime::InteropServices::_Type" />
  <TypeSignature Language="F#" Value="type Type = class&#xA;    inherit MemberInfo&#xA;    interface _Type&#xA;    interface IReflect" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.Reflection.MemberInfo</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Reflection.IReflect</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._Type</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Type))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="6240b-101">表示类型声明：类类型、接口类型、数组类型、值类型、枚举类型、类型参数、泛型类型定义，以及开放或封闭构造的泛型类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-101">Represents type declarations: class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-102">`Type` 是的根<xref:System.Reflection>功能是主要的方法来访问元数据。</span><span class="sxs-lookup"><span data-stu-id="6240b-102">`Type` is the root of the <xref:System.Reflection> functionality and is the primary way to access metadata.</span></span> <span data-ttu-id="6240b-103">使用的成员<xref:System.Type>以及模块和在其中部署此类的程序集获取类型声明，成员的类型 （如构造函数、 方法、 字段、 属性和事件的类），有关信息。</span><span class="sxs-lookup"><span data-stu-id="6240b-103">Use the members of <xref:System.Type> to get information about a type declaration, about the members of a type (such as the constructors, methods, fields, properties, and events of a class), as well as the module and the assembly in which the class is deployed.</span></span>  
  
 <span data-ttu-id="6240b-104">所需的代码使用反射来获取信息类型和成员，而不考虑其访问级别没有权限。</span><span class="sxs-lookup"><span data-stu-id="6240b-104">No permissions are required for code to use reflection to get information about types and their members, regardless of their access levels.</span></span> <span data-ttu-id="6240b-105">所需的代码使用反射来访问公共成员或其访问级别会使其可见在普通的编译过程的其他成员没有权限。</span><span class="sxs-lookup"><span data-stu-id="6240b-105">No permissions are required for code to use reflection to access public members, or other members whose access levels would make them visible during normal compilation.</span></span> <span data-ttu-id="6240b-106">但是，为了使代码以使用反射来访问成员，通常情况下无法访问，例如私有或内部的方法，或受保护的字段类型的类不会继承，你的代码必须具有<xref:System.Security.Permissions.ReflectionPermission>。</span><span class="sxs-lookup"><span data-stu-id="6240b-106">However, in order for your code to use reflection to access members that would normally be inaccessible, such as private or internal methods, or protected fields of a type your class does not inherit, your code must have <xref:System.Security.Permissions.ReflectionPermission>.</span></span> <span data-ttu-id="6240b-107">请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。</span><span class="sxs-lookup"><span data-stu-id="6240b-107">See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span>  
  
 <span data-ttu-id="6240b-108">`Type` 是允许多个实现的抽象基类。</span><span class="sxs-lookup"><span data-stu-id="6240b-108">`Type` is an abstract base class that allows multiple implementations.</span></span> <span data-ttu-id="6240b-109">系统将始终提供派生的类`RuntimeType`。</span><span class="sxs-lookup"><span data-stu-id="6240b-109">The system will always provide the derived class `RuntimeType`.</span></span> <span data-ttu-id="6240b-110">在反射中，从 word 的运行时的所有类都只都创建一次每个系统和支持的比较操作中的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-110">In reflection, all classes beginning with the word Runtime are created only once per object in the system and support comparison operations.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-111">在多线程方案中，不要锁定<xref:System.Type>为了同步访问对象`static`数据。</span><span class="sxs-lookup"><span data-stu-id="6240b-111">In multithreading scenarios, do not lock <xref:System.Type> objects in order to synchronize access to `static` data.</span></span> <span data-ttu-id="6240b-112">其他代码，您可以不控制，还可能会锁定您的类类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-112">Other code, over which you have no control, might also lock your class type.</span></span> <span data-ttu-id="6240b-113">这可能会导致死锁。</span><span class="sxs-lookup"><span data-stu-id="6240b-113">This might result in a deadlock.</span></span> <span data-ttu-id="6240b-114">相反，将对静态数据的访问同步通过锁定私有`static`对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-114">Instead, synchronize access to static data by locking a private `static` object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-115">在派生的类可以访问受保护的成员调用代码的基类。</span><span class="sxs-lookup"><span data-stu-id="6240b-115">A derived class can access protected members of the calling code's base classes.</span></span> <span data-ttu-id="6240b-116">此外，调用代码的程序集的程序集成员被允许访问。</span><span class="sxs-lookup"><span data-stu-id="6240b-116">Also, access is allowed to assembly members of the calling code's assembly.</span></span> <span data-ttu-id="6240b-117">一般来说，如果允许访问在早期绑定代码中，然后还允许您访问后期绑定代码中。</span><span class="sxs-lookup"><span data-stu-id="6240b-117">As a rule, if you are allowed access in early-bound code, then you are also allowed access in late-bound code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-118">扩展其他接口的接口不会继承在扩展接口中定义的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-118">Interfaces that extend other interfaces do not inherit the methods defined in the extended interfaces.</span></span>  
  
 <span data-ttu-id="6240b-119">本节内容：</span><span class="sxs-lookup"><span data-stu-id="6240b-119">In this section:</span></span>  
  
 <span data-ttu-id="6240b-120">[一个类型对象表示哪些类型？](#WhatTypes) </span><span class="sxs-lookup"><span data-stu-id="6240b-120">[What types does a Type object represent?](#WhatTypes) </span></span>  
 <span data-ttu-id="6240b-121">[检索类型对象](#Retrieve) </span><span class="sxs-lookup"><span data-stu-id="6240b-121">[Retrieving a Type object](#Retrieve) </span></span>  
 [<span data-ttu-id="6240b-122">比较类型对象相等</span><span class="sxs-lookup"><span data-stu-id="6240b-122">Comparing type objects for equality</span></span>](#Equality)  
  
<a name="WhatTypes"></a>   
## <a name="what-types-does-a-type-object-represent"></a><span data-ttu-id="6240b-123">一个类型对象表示哪些类型？</span><span class="sxs-lookup"><span data-stu-id="6240b-123">What types does a Type object represent?</span></span>  
 <span data-ttu-id="6240b-124">此类是线程安全;多个线程可以同时从这种类型的实例读取。</span><span class="sxs-lookup"><span data-stu-id="6240b-124">This class is thread safe; multiple threads can concurrently read from an instance of this type.</span></span> <span data-ttu-id="6240b-125">实例<xref:System.Type>类可以表示任何以下类型：</span><span class="sxs-lookup"><span data-stu-id="6240b-125">An instance of the <xref:System.Type> class can represent any of the following types:</span></span>  
  
-   <span data-ttu-id="6240b-126">类</span><span class="sxs-lookup"><span data-stu-id="6240b-126">Classes</span></span>  
  
-   <span data-ttu-id="6240b-127">值类型</span><span class="sxs-lookup"><span data-stu-id="6240b-127">Value types</span></span>  
  
-   <span data-ttu-id="6240b-128">数组</span><span class="sxs-lookup"><span data-stu-id="6240b-128">Arrays</span></span>  
  
-   <span data-ttu-id="6240b-129">接口</span><span class="sxs-lookup"><span data-stu-id="6240b-129">Interfaces</span></span>  
  
-   <span data-ttu-id="6240b-130">枚举</span><span class="sxs-lookup"><span data-stu-id="6240b-130">Enumerations</span></span>  
  
-   <span data-ttu-id="6240b-131">委托</span><span class="sxs-lookup"><span data-stu-id="6240b-131">Delegates</span></span>  
  
-   <span data-ttu-id="6240b-132">构造的泛型类型和泛型类型定义</span><span class="sxs-lookup"><span data-stu-id="6240b-132">Constructed generic types and generic type definitions</span></span>  
  
-   <span data-ttu-id="6240b-133">类型实参和类型参数的构造的泛型类型、 泛型类型定义和泛型方法定义</span><span class="sxs-lookup"><span data-stu-id="6240b-133">Type arguments and type parameters of constructed generic types, generic type definitions, and generic method definitions</span></span>  
  
<a name="Retrieve"></a>   
## <a name="retrieving-a-type-object"></a><span data-ttu-id="6240b-134">检索类型对象</span><span class="sxs-lookup"><span data-stu-id="6240b-134">Retrieving a Type object</span></span>  
 <span data-ttu-id="6240b-135"><xref:System.Type>可以按以下方式获取与特定类型关联的对象：</span><span class="sxs-lookup"><span data-stu-id="6240b-135">The <xref:System.Type> object associated with a particular type can be obtained in the following ways:</span></span>  
  
-   <span data-ttu-id="6240b-136">实例<xref:System.Object.GetType%2A?displayProperty=nameWithType>方法将返回<xref:System.Type>对象，表示实例的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-136">The instance <xref:System.Object.GetType%2A?displayProperty=nameWithType> method returns a <xref:System.Type> object that represents the type of an instance.</span></span> <span data-ttu-id="6240b-137">由于所有托管的类型派生<xref:System.Object>，则<xref:System.Object.GetType%2A>可以在任何类型的实例上调用方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-137">Because all managed types derive from <xref:System.Object>, the <xref:System.Object.GetType%2A> method can be called on an instance of any type.</span></span>  
  
     <span data-ttu-id="6240b-138">下面的示例调用<xref:System.Object.GetType%2A?displayProperty=nameWithType>方法，以确定一个对象数组中每个对象的运行时类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-138">The following example calls the <xref:System.Object.GetType%2A?displayProperty=nameWithType> method to determine the runtime type of each object in an object array.</span></span>  
  
     [!code-cpp[System.Type#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type/cpp/GetType1.cpp#2)]
     [!code-csharp[System.Type#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type/cs/GetType1.cs#2)]
     [!code-vb[System.Type#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type/vb/GetType1.vb#2)]  
  
-   <span data-ttu-id="6240b-139">静态<xref:System.Type.GetType%2A?displayProperty=nameWithType>方法返回<xref:System.Type>对象，表示由其完全限定名称指定的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-139">The static <xref:System.Type.GetType%2A?displayProperty=nameWithType> methods return a <xref:System.Type> object that represents a type specified by its fully qualified name.</span></span>  
  
-   <span data-ttu-id="6240b-140"><xref:System.Reflection.Module.GetTypes%2A?displayProperty=nameWithType>， <xref:System.Reflection.Module.GetType%2A?displayProperty=nameWithType>，并<xref:System.Reflection.Module.FindTypes%2A?displayProperty=nameWithType>方法返回`Type`代表模块中定义的类型的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-140">The <xref:System.Reflection.Module.GetTypes%2A?displayProperty=nameWithType>, <xref:System.Reflection.Module.GetType%2A?displayProperty=nameWithType>, and <xref:System.Reflection.Module.FindTypes%2A?displayProperty=nameWithType> methods return `Type` objects that represent the types defined in a module.</span></span> <span data-ttu-id="6240b-141">第一种方法可以用于获取一个数组<xref:System.Type>模块中定义的所有公共和专用类型的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-141">The first method can be used to obtain an array of <xref:System.Type> objects for all the public and private types defined in a module.</span></span> <span data-ttu-id="6240b-142">(你可以获取的实例`Module`通过<xref:System.Reflection.Assembly.GetModule%2A?displayProperty=nameWithType>或<xref:System.Reflection.Assembly.GetModules%2A?displayProperty=nameWithType>方法，或通过<xref:System.Type.Module%2A?displayProperty=nameWithType>属性。)</span><span class="sxs-lookup"><span data-stu-id="6240b-142">(You can obtain an instance of `Module` through the <xref:System.Reflection.Assembly.GetModule%2A?displayProperty=nameWithType> or <xref:System.Reflection.Assembly.GetModules%2A?displayProperty=nameWithType> method, or through the <xref:System.Type.Module%2A?displayProperty=nameWithType> property.)</span></span>  
  
-   <span data-ttu-id="6240b-143"><xref:System.Reflection.Assembly?displayProperty=nameWithType>对象包含的方法来检索中包括程序集定义的类数<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>， <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>，和<xref:System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-143">The <xref:System.Reflection.Assembly?displayProperty=nameWithType> object contains a number of methods to retrieve the classes defined in an assembly, including <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>, <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>, and <xref:System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="6240b-144"><xref:System.Type.FindInterfaces%2A>方法返回类型支持的接口类型的筛选的列表。</span><span class="sxs-lookup"><span data-stu-id="6240b-144">The <xref:System.Type.FindInterfaces%2A> method returns a filtered list of interface types supported by a type.</span></span>  
  
-   <span data-ttu-id="6240b-145"><xref:System.Type.GetElementType%2A>方法将返回`Type`表示的元素的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-145">The <xref:System.Type.GetElementType%2A> method returns a `Type` object that represents the element.</span></span>  
  
-   <span data-ttu-id="6240b-146"><xref:System.Type.GetInterfaces%2A>并<xref:System.Type.GetInterface%2A>方法返回<xref:System.Type>表示支持一种类型的接口类型的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-146">The <xref:System.Type.GetInterfaces%2A> and <xref:System.Type.GetInterface%2A> methods return <xref:System.Type> objects representing the interface types supported by a type.</span></span>  
  
-   <span data-ttu-id="6240b-147"><xref:System.Type.GetTypeArray%2A>方法返回的数组<xref:System.Type>表示指定的一组任意对象类型的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-147">The <xref:System.Type.GetTypeArray%2A> method returns an array of <xref:System.Type> objects representing the types specified by an arbitrary set of objects.</span></span> <span data-ttu-id="6240b-148">类型的数组与指定的对象<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="6240b-148">The objects are specified with an array of type <xref:System.Object>.</span></span>  
  
-   <span data-ttu-id="6240b-149"><xref:System.Type.GetTypeFromProgID%2A>和<xref:System.Type.GetTypeFromCLSID%2A>方法提供的 COM 互操作性。</span><span class="sxs-lookup"><span data-stu-id="6240b-149">The <xref:System.Type.GetTypeFromProgID%2A> and <xref:System.Type.GetTypeFromCLSID%2A> methods are provided for COM interoperability.</span></span> <span data-ttu-id="6240b-150">它们将返回<xref:System.Type>对象，表示由指定的类型`ProgID`或`CLSID`。</span><span class="sxs-lookup"><span data-stu-id="6240b-150">They return a <xref:System.Type> object that represents the type specified by a `ProgID` or `CLSID`.</span></span>  
  
-   <span data-ttu-id="6240b-151"><xref:System.Type.GetTypeFromHandle%2A>方法提供的互操作性。</span><span class="sxs-lookup"><span data-stu-id="6240b-151">The <xref:System.Type.GetTypeFromHandle%2A> method is provided for interoperability.</span></span> <span data-ttu-id="6240b-152">它将返回`Type`对象，表示指定类句柄的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-152">It returns a `Type` object that represents the type specified by a class handle.</span></span>  
  
-   <span data-ttu-id="6240b-153">C#`typeof`运算符，c + +`typeid`运算符和 Visual Basic`GetType`运算符获取`Type`类型对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-153">The C# `typeof` operator, the C++ `typeid` operator, and the Visual Basic `GetType` operator obtain the `Type` object for a type.</span></span>  
  
-   <span data-ttu-id="6240b-154"><xref:System.Type.MakeGenericType%2A>方法将返回<xref:System.Type>对象，表示构造泛型类型，这是开放式构造的类型，如果其<xref:System.Type.ContainsGenericParameters%2A>属性返回`true`，和封闭式构造类型否则。</span><span class="sxs-lookup"><span data-stu-id="6240b-154">The <xref:System.Type.MakeGenericType%2A> method returns a <xref:System.Type> object representing a constructed generic type, which is an open constructed type if its <xref:System.Type.ContainsGenericParameters%2A> property returns `true`, and a closed constructed type otherwise.</span></span> <span data-ttu-id="6240b-155">可以实例化泛型类型，仅当已关闭。</span><span class="sxs-lookup"><span data-stu-id="6240b-155">A generic type can be instantiated only if it is closed.</span></span>  
  
-   <span data-ttu-id="6240b-156"><xref:System.Type.MakeArrayType%2A>， <xref:System.Type.MakePointerType%2A>，并<xref:System.Type.MakeByRefType%2A>方法返回<xref:System.Type>分别表示数组的指定的类型的指针、 指定的类型和引用参数的类型的对象 (`ref` C# 中`ByRef`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="6240b-156">The <xref:System.Type.MakeArrayType%2A>, <xref:System.Type.MakePointerType%2A>, and <xref:System.Type.MakeByRefType%2A> methods return <xref:System.Type> objects that represent, respectively, an array of a specified type, a pointer to a specified type, and the type of a reference parameter (`ref` in C#, `ByRef` in Visual Basic).</span></span>  
  
<a name="Equality"></a>   
## <a name="comparing-type-objects-for-equality"></a><span data-ttu-id="6240b-157">比较类型对象相等</span><span class="sxs-lookup"><span data-stu-id="6240b-157">Comparing type objects for equality</span></span>  
 <span data-ttu-id="6240b-158">一个<xref:System.Type>，表示一种类型是唯一的对象; 即，两个<xref:System.Type>对象引用是否引用同一对象当且仅当它们表示相同的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-158">A <xref:System.Type> object that represents a type is unique; that is, two <xref:System.Type> object references refer to the same object if and only if they represent the same type.</span></span> <span data-ttu-id="6240b-159">这样的比较<xref:System.Type>对象使用引用相等性。</span><span class="sxs-lookup"><span data-stu-id="6240b-159">This allows for comparison of <xref:System.Type> objects using reference equality.</span></span> <span data-ttu-id="6240b-160">下面的示例比较<xref:System.Type>对象表示的整数值，以确定它们是否相同类型的数。</span><span class="sxs-lookup"><span data-stu-id="6240b-160">The following example compares the <xref:System.Type> objects that represent a number of integer values to determine whether they are of the same type.</span></span>  
  
 [!code-cpp[System.Type#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type/cpp/Equals1.cpp#3)]
 [!code-csharp[System.Type#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type/cs/Equals1.cs#3)]
 [!code-vb[System.Type#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type/vb/Equals1.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="6240b-161">下面的示例显示了一些具有代表性的功能的<xref:System.Type>。</span><span class="sxs-lookup"><span data-stu-id="6240b-161">The following  example shows a few representative features of <xref:System.Type>.</span></span> <span data-ttu-id="6240b-162">C#`typeof`运算符 (`GetType`在 Visual Basic 中的运算符`typeid`Visual c + + 中的运算符) 用于获取<xref:System.Type>对象，表示<xref:System.String>。</span><span class="sxs-lookup"><span data-stu-id="6240b-162">The C# `typeof` operator (`GetType` operator in Visual Basic, `typeid` operator in Visual C++) is used to get a <xref:System.Type> object representing <xref:System.String>.</span></span> <span data-ttu-id="6240b-163">从此<xref:System.Type>对象，<xref:System.Type.GetMethod%2A>方法用于获取<xref:System.Reflection.MethodInfo>表示<xref:System.String.Substring%2A>重载的起始位置和长度。</span><span class="sxs-lookup"><span data-stu-id="6240b-163">From this <xref:System.Type> object, the <xref:System.Type.GetMethod%2A> method is used to get a <xref:System.Reflection.MethodInfo> representing the <xref:System.String.Substring%2A> overload that takes a starting location and a length.</span></span>  
  
 <span data-ttu-id="6240b-164">若要标识重载签名，该代码示例创建一个临时数组，包含两个<xref:System.Type>对象表示`int`(`Integer`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="6240b-164">To identify the overload signature, the code example creates a temporary array containing two <xref:System.Type> objects representing `int` (`Integer` in Visual Basic).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-165">若要确切地说，该数组包含两个引用的实例<xref:System.Type>，它表示`int`当前应用程序域中。</span><span class="sxs-lookup"><span data-stu-id="6240b-165">To be precise, the array contains two references to the instance of <xref:System.Type> that represents `int` in the current application domain.</span></span> <span data-ttu-id="6240b-166">对于任何类型，是的一个实例<xref:System.Type>每个应用程序域。</span><span class="sxs-lookup"><span data-stu-id="6240b-166">For any type, there is only one instance of <xref:System.Type> per application domain.</span></span>  
  
 <span data-ttu-id="6240b-167">代码示例使用<xref:System.Reflection.MethodInfo>来调用<xref:System.String.Substring%2A>方法对字符串"Hello，World ！"，并显示结果。</span><span class="sxs-lookup"><span data-stu-id="6240b-167">The code example uses the <xref:System.Reflection.MethodInfo> to invoke the <xref:System.String.Substring%2A> method on the string "Hello, World!", and displays the result.</span></span>  
  
 [!code-cpp[System.Type#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type/cpp/source.cpp#1)]
 [!code-csharp[System.Type#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type/cs/source.cs#1)]
 [!code-vb[System.Type#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="6240b-168">此类型是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="6240b-168">This type is thread safe.</span></span></threadsafe>
    <block subset="none" type="overrides"><para><span data-ttu-id="6240b-169">继承自<see langword="Type" />，必须重写以下成员：</span><span class="sxs-lookup"><span data-stu-id="6240b-169">When you inherit from <see langword="Type" />, you must override the following members:</span></span> 
-   <see cref="P:System.Type.Assembly" />  
  
-   <see cref="P:System.Type.AssemblyQualifiedName" />  
  
-   <see cref="P:System.Type.BaseType" />  
  
-   <see cref="P:System.Type.FullName" />  
  
-   <see cref="M:System.Type.GetAttributeFlagsImpl" />  
  
-   <see cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />  
  
-   <see cref="M:System.Type.GetConstructors(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetElementType" />  
  
-   <see cref="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetEvents(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetFields(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetInterface(System.String,System.Boolean)" />  
  
-   <see cref="M:System.Type.GetInterfaces" />  
  
-   <see cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />  
  
-   <see cref="M:System.Type.GetMethods(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />  
  
-   <see cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />  
  
-   <see cref="P:System.Type.GUID" />  
  
-   <see cref="M:System.Type.HasElementTypeImpl" />  
  
-   <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />  
  
-   <see cref="M:System.Type.IsArrayImpl" />  
  
-   <see cref="M:System.Type.IsByRefImpl" />  
  
-   <see cref="M:System.Type.IsCOMObjectImpl" />  
  
-   <see cref="M:System.Type.IsPointerImpl" />  
  
-   <see cref="M:System.Type.IsPrimitiveImpl" />  
  
-   <see cref="P:System.Type.Module" />  
  
-   <see cref="P:System.Type.Namespace" />  
  
-   <see cref="P:System.Type.TypeHandle" />  
  
-   <see cref="P:System.Type.UnderlyingSystemType" />  
  
-   <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />  
  
-   <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" />  
  
-   <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />  
  
-   <see cref="P:System.Reflection.MemberInfo.Name" /></para></block>
    <altmember cref="T:System.Object" />
    <altmember cref="N:System.Reflection" />
    <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
    <related type="Article" href="~/docs/framework/reflection-and-codedom/viewing-type-information.md"><span data-ttu-id="6240b-170">查看类型信息</span><span class="sxs-lookup"><span data-stu-id="6240b-170">Viewing Type Information</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Type ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Type();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-171">初始化 <see cref="T:System.Type" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="6240b-171">Initializes a new instance of the <see cref="T:System.Type" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-172">此构造函数由派生类调用在类型对象的构建过程。</span><span class="sxs-lookup"><span data-stu-id="6240b-172">This constructor is invoked by derived classes during the construction of type objects.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Assembly">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.Assembly Assembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly Assembly" />
      <MemberSignature Language="DocId" Value="P:System.Type.Assembly" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Assembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::Assembly ^ Assembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Assembly : System.Reflection.Assembly" Usage="System.Type.Assembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Assembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-173">获取在其中声明该类型的 <see cref="T:System.Reflection.Assembly" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-173">Gets the <see cref="T:System.Reflection.Assembly" /> in which the type is declared.</span></span> <span data-ttu-id="6240b-174">对于泛型类型，则获取在其中定义该泛型类型的 <see cref="T:System.Reflection.Assembly" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-174">For generic types, gets the <see cref="T:System.Reflection.Assembly" /> in which the generic type is defined.</span></span></summary>
        <value><span data-ttu-id="6240b-175">描述包含当前类型的程序集的 <see cref="T:System.Reflection.Assembly" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="6240b-175">An <see cref="T:System.Reflection.Assembly" /> instance that describes the assembly containing the current type.</span></span> <span data-ttu-id="6240b-176">对于泛型类型，该实例描述包含泛型类型定义的程序集，而不是创建和使用特定构造类型的程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-176">For generic types, the instance describes the assembly that contains the generic type definition, not the assembly that creates and uses a particular constructed type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-177">如果当前<xref:System.Type>对象表示构造泛型类型，此属性返回包含泛型类型定义的程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-177">If the current <xref:System.Type> object represents a constructed generic type, this property returns the assembly that contains the generic type definition.</span></span> <span data-ttu-id="6240b-178">例如，假设创建名为包含泛型类型定义的 MyGenerics.dll `MyGenericStack<T>` (`MyGenericStack(Of T)`在 Visual Basic 中`generic<T> ref class MyGenericStack`c + + 中)。</span><span class="sxs-lookup"><span data-stu-id="6240b-178">For example, suppose you create an assembly named MyGenerics.dll that contains the generic type definition `MyGenericStack<T>` (`MyGenericStack(Of T)` in Visual Basic, `generic<T> ref class MyGenericStack` in C++).</span></span> <span data-ttu-id="6240b-179">如果创建的实例`MyGenericStack<int>`(`MyGenericStack(Of Integer)`在 Visual Basic 中) 在另一个程序集中<xref:System.Type.Assembly%2A>构造类型的属性将返回<xref:System.Reflection.Assembly>一个程序。</span><span class="sxs-lookup"><span data-stu-id="6240b-179">If you create an instance of `MyGenericStack<int>` (`MyGenericStack(Of Integer)` in Visual Basic) in another assembly, the <xref:System.Type.Assembly%2A> property for the constructed type returns an <xref:System.Reflection.Assembly> object that represents MyGenerics.dll.</span></span>  
  
 <span data-ttu-id="6240b-180">同样，如果当前<xref:System.Type>对象表示未赋值的泛型参数`T`，此属性返回包含定义泛型类型的程序集`T`。</span><span class="sxs-lookup"><span data-stu-id="6240b-180">Similarly, if the current <xref:System.Type> object represents an unassigned generic parameter `T`, this property returns the assembly that contains the generic type that defines `T`.</span></span>  
  
 <span data-ttu-id="6240b-181">如果<xref:System.Type.Assembly%2A?displayProperty=nameWithType>属性不是特定的.NET 实现，如.NET Core 或通用 Windows 平台上可用，请使用<xref:System.Reflection.TypeInfo.Assembly?displayProperty=nameWithType>属性改为。</span><span class="sxs-lookup"><span data-stu-id="6240b-181">If the <xref:System.Type.Assembly%2A?displayProperty=nameWithType> property is not available on a particular .NET implementation, such as .NET Core or the Universal Windows Platform, use the <xref:System.Reflection.TypeInfo.Assembly?displayProperty=nameWithType> property instead.</span></span>      
  
 <span data-ttu-id="6240b-182">此属性是只读的。</span><span class="sxs-lookup"><span data-stu-id="6240b-182">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-183">下面的示例显示与类相关联的程序集名称和类型的完全限定的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-183">The following example displays the assembly name associated with the class and the fully qualified name of the type.</span></span>  
  
 [!code-cpp[Type_Assembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_Assembly/CPP/type_assembly.cpp#1)]
 [!code-csharp[Type_Assembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_Assembly/CS/type_assembly.cs#1)]
 [!code-vb[Type_Assembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_Assembly/VB/type_assembly.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyQualifiedName">
      <MemberSignature Language="C#" Value="public abstract string AssemblyQualifiedName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyQualifiedName" />
      <MemberSignature Language="DocId" Value="P:System.Type.AssemblyQualifiedName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property AssemblyQualifiedName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ AssemblyQualifiedName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyQualifiedName : string" Usage="System.Type.AssemblyQualifiedName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.AssemblyQualifiedName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-184">获取类型的程序集限定名，其中包括从中加载 <see cref="T:System.Type" /> 的程序集的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-184">Gets the assembly-qualified name of the type, which includes the name of the assembly from which this <see cref="T:System.Type" /> object was loaded.</span></span></summary>
        <value><span data-ttu-id="6240b-185"><see cref="T:System.Type" /> 的程序集限定名，其中包括从中加载 <see cref="T:System.Type" /> 的程序集的名称；或者为 <see langword="null" />（如果当前实例表示泛型类型参数）。</span><span class="sxs-lookup"><span data-stu-id="6240b-185">The assembly-qualified name of the <see cref="T:System.Type" />, which includes the name of the assembly from which the <see cref="T:System.Type" /> was loaded, or <see langword="null" /> if the current instance represents a generic type parameter.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-186">一种类型的程序集限定名称包含的类型名称，包括其命名空间后, 跟一个逗号后, 跟程序集的显示名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-186">The assembly-qualified name of a type consists of the type name, including its namespace, followed by a comma, followed by the display name of the assembly.</span></span> <span data-ttu-id="6240b-187">使用获取程序集的显示名称<xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-187">The display name of an assembly is obtained using the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-188">在.NET Framework 2.0 版中，处理器体系结构添加到程序集标识，并可以指定为程序集名称字符串的一部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-188">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="6240b-189">例如，"ProcessorArchitecture = msil"。</span><span class="sxs-lookup"><span data-stu-id="6240b-189">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="6240b-190">但是，不包括在返回的字符串<xref:System.Type.AssemblyQualifiedName%2A>属性，出于兼容性原因。</span><span class="sxs-lookup"><span data-stu-id="6240b-190">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="6240b-191">请参阅 <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-191">See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="6240b-192">支持公共语言运行时的所有编译器将都发出嵌套类的简单名称和反射构造查询时，根据以下约定的重整的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-192">All compilers that support the common language runtime emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
|<span data-ttu-id="6240b-193">分隔符</span><span class="sxs-lookup"><span data-stu-id="6240b-193">Delimiter</span></span>|<span data-ttu-id="6240b-194">含义</span><span class="sxs-lookup"><span data-stu-id="6240b-194">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="6240b-195">反斜杠 (\\)</span><span class="sxs-lookup"><span data-stu-id="6240b-195">Backslash (\\)</span></span>|<span data-ttu-id="6240b-196">转义符。</span><span class="sxs-lookup"><span data-stu-id="6240b-196">Escape character.</span></span>|  
|<span data-ttu-id="6240b-197">逗号 （，）</span><span class="sxs-lookup"><span data-stu-id="6240b-197">Comma (,)</span></span>|<span data-ttu-id="6240b-198">程序集名称前面。</span><span class="sxs-lookup"><span data-stu-id="6240b-198">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="6240b-199">加号 （+）</span><span class="sxs-lookup"><span data-stu-id="6240b-199">Plus sign (+)</span></span>|<span data-ttu-id="6240b-200">位于嵌套的类。</span><span class="sxs-lookup"><span data-stu-id="6240b-200">Precedes a nested class.</span></span>|  
|<span data-ttu-id="6240b-201">句点 （.）</span><span class="sxs-lookup"><span data-stu-id="6240b-201">Period (.)</span></span>|<span data-ttu-id="6240b-202">表示命名空间标识符。</span><span class="sxs-lookup"><span data-stu-id="6240b-202">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="6240b-203">方括号 ([])</span><span class="sxs-lookup"><span data-stu-id="6240b-203">Brackets ([])</span></span>|<span data-ttu-id="6240b-204">后一个类型名称，表示该类型的数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-204">After a type name, denotes an array of that type.</span></span><br /><br /> <span data-ttu-id="6240b-205">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-205">-or-</span></span><br /><br /> <span data-ttu-id="6240b-206">对于泛型类型，包含泛型类型参数列表。</span><span class="sxs-lookup"><span data-stu-id="6240b-206">For a generic type, encloses the generic type argument list.</span></span><br /><br /> <span data-ttu-id="6240b-207">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-207">-or-</span></span><br /><br /> <span data-ttu-id="6240b-208">类型参数列表中包含的程序集限定类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-208">Within a type argument list, encloses an assembly-qualified type.</span></span>|  
  
 <span data-ttu-id="6240b-209">例如，一个类的程序集限定名称可能如下所示：</span><span class="sxs-lookup"><span data-stu-id="6240b-209">For example, the assembly-qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass, MyAssembly, Version=1.3.0.0, Culture=neutral, PublicKeyToken=b17a5c561934e089  
```  
  
 <span data-ttu-id="6240b-210">如果命名空间包含正号，例如 TopNamespace.Sub+Namespace，则会在加号 （+） 加转义符 (\\) 以防止它被解释为嵌套分隔符。</span><span class="sxs-lookup"><span data-stu-id="6240b-210">If the namespace contained a plus sign, for example TopNamespace.Sub+Namespace, then the plus sign (+) would be preceded by an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="6240b-211">反射会发出此字符串，如下所示：</span><span class="sxs-lookup"><span data-stu-id="6240b-211">Reflection would emit this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass, MyAssembly, Version=1.3.0.0, Culture=neutral, PublicKeyToken=b17a5c561934e089   
```  
  
 <span data-ttu-id="6240b-212">一个"+ +"变为"\\+\\+"，和一个"\\"变为"\\\\"。</span><span class="sxs-lookup"><span data-stu-id="6240b-212">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="6240b-213">可以保持此限定的名，并在以后使用它来加载<xref:System.Type>。</span><span class="sxs-lookup"><span data-stu-id="6240b-213">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="6240b-214">若要搜索并加载<xref:System.Type>，使用<xref:System.Type.GetType%2A>使用类型名称只或用程序集限定的类型名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-214">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="6240b-215"><xref:System.Type.GetType%2A> 使用类型名称只会查找<xref:System.Type>中调用方的程序集，然后在系统程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-215"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="6240b-216"><xref:System.Type.GetType%2A> 使用程序集限定的类型名称将寻找<xref:System.Type>在任何程序集中。</span><span class="sxs-lookup"><span data-stu-id="6240b-216"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="6240b-217">类型名称可能包含尾随字符表示的类型，如类型是引用类型、 指针类型或数组类型有关的其他信息。</span><span class="sxs-lookup"><span data-stu-id="6240b-217">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="6240b-218">若要检索的类型名称而无需这些尾随字符，请使用`t.GetElementType().ToString()`，其中`t`的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-218">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="6240b-219">空格都是相关程序集名称之外的所有类型的名称组件中。</span><span class="sxs-lookup"><span data-stu-id="6240b-219">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="6240b-220">在程序集名称，分隔符前的空格相关，但是、 分隔符之后的空格将被忽略。</span><span class="sxs-lookup"><span data-stu-id="6240b-220">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="6240b-221">泛型类型的泛型参数是本身由程序集名称限定。</span><span class="sxs-lookup"><span data-stu-id="6240b-221">Generic arguments of generic types are themselves qualified by assembly name.</span></span> <span data-ttu-id="6240b-222">例如，在的程序集限定类型名称`MyGenericClass<int>`(`MyGenericClass(Of Integer)`在 Visual Basic 中)，`int`扩展的程序集限定类型名称为<xref:System.Int32>。</span><span class="sxs-lookup"><span data-stu-id="6240b-222">For example, in the assembly-qualified type name for `MyGenericClass<int>` (`MyGenericClass(Of Integer)` in Visual Basic), `int` is expanded to the assembly-qualified type name for <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="6240b-223">如果当前<xref:System.Type>对象表示泛型参数，则此属性返回`null`。</span><span class="sxs-lookup"><span data-stu-id="6240b-223">If the current <xref:System.Type> object represents a generic parameter, this property returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-224">下面的示例显示与类相关联的程序集名称和类型的完全限定的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-224">The following example displays the assembly name associated with the class and the fully qualified name of the type.</span></span>  
  
 [!code-cpp[type_assembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_Assembly/CPP/type_assembly.cpp#1)]
 [!code-csharp[type_assembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_Assembly/CS/type_assembly.cs#1)]
 [!code-vb[type_assembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_Assembly/VB/type_assembly.vb#1)]  
  
 <span data-ttu-id="6240b-225">下面的示例将返回的字符串进行比较<xref:System.Type.ToString%2A>方法和`Name`， <xref:System.Type.FullName%2A>，和<xref:System.Type.AssemblyQualifiedName%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-225">The following example compares the strings returned by the <xref:System.Type.ToString%2A> method and the `Name`, <xref:System.Type.FullName%2A>, and <xref:System.Type.AssemblyQualifiedName%2A> properties.</span></span>  
  
 [!code-csharp[System.Type.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.tostring/cs/fullname1.cs#1)]
 [!code-vb[System.Type.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.tostring/vb/fullname1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Type.GetType" />
        <altmember cref="P:System.Type.FullName" />
        <altmember cref="P:System.Type.Namespace" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md"><span data-ttu-id="6240b-226">指定完全限定的类型名称</span><span class="sxs-lookup"><span data-stu-id="6240b-226">Specifying Fully Qualified Type Names</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Reflection.TypeAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.TypeAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Type.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Attributes As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::TypeAttributes Attributes { System::Reflection::TypeAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.TypeAttributes" Usage="System.Type.Attributes" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Attributes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-227">获取与 <see cref="T:System.Type" /> 关联的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-227">Gets the attributes associated with the <see cref="T:System.Type" />.</span></span></summary>
        <value><span data-ttu-id="6240b-228">表示 <see cref="T:System.Reflection.TypeAttributes" /> 的属性集的 <see cref="T:System.Type" /> 对象，除非 <see cref="T:System.Type" /> 表示泛型类型形参，在此情况下该值未指定。</span><span class="sxs-lookup"><span data-stu-id="6240b-228">A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />, unless the <see cref="T:System.Type" /> represents a generic type parameter, in which case the value is unspecified.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-229">某些成员<xref:System.Reflection.TypeAttributes>枚举是表示一组值的掩码。</span><span class="sxs-lookup"><span data-stu-id="6240b-229">Some members of the <xref:System.Reflection.TypeAttributes> enumeration are masks that represent a group of values.</span></span> <span data-ttu-id="6240b-230">每个组包含一个成员，其基础值为零。</span><span class="sxs-lookup"><span data-stu-id="6240b-230">Each group includes one member whose underlying value is zero.</span></span> <span data-ttu-id="6240b-231">例如，基础值的<xref:System.Reflection.TypeAttributes.NotPublic?displayProperty=nameWithType>中的成员<xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType>组为零，因为<xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>中的成员<xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType>组。</span><span class="sxs-lookup"><span data-stu-id="6240b-231">For example, the underlying value of the <xref:System.Reflection.TypeAttributes.NotPublic?displayProperty=nameWithType> member in the <xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> group is zero, as is the <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> member in the <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> group.</span></span> <span data-ttu-id="6240b-232">因此，您必须对这些值进行测试之前使用掩码。</span><span class="sxs-lookup"><span data-stu-id="6240b-232">Because of this, you must use the mask before testing for those values.</span></span> <span data-ttu-id="6240b-233">说明如示例所示。</span><span class="sxs-lookup"><span data-stu-id="6240b-233">The example provides an illustration.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="6240b-234">对于大多数情况下，属性，例如<xref:System.Type.IsClass%2A>，<xref:System.Type.IsAutoLayout%2A>，和<xref:System.Type.IsSpecialName%2A>更轻松地使用比类型属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-234">For most purposes, properties like <xref:System.Type.IsClass%2A>,<xref:System.Type.IsAutoLayout%2A>, and <xref:System.Type.IsSpecialName%2A> are easier to use than type attributes.</span></span>  
  
 <span data-ttu-id="6240b-235">如果当前<xref:System.Type>表示构造泛型类型，此属性返回的泛型类型定义的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-235">If the current <xref:System.Type> represents a constructed generic type, this property returns the attributes of the generic type definition.</span></span> <span data-ttu-id="6240b-236">例如，返回的属性`MyGenericClass<int>`(`MyGenericClass(Of Integer)`在 Visual Basic 中) 的属性`MyGenericClass<T>`(`MyGenericClass(Of T)`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="6240b-236">For example, the attributes returned for `MyGenericClass<int>` (`MyGenericClass(Of Integer)` in Visual Basic) are the attributes of `MyGenericClass<T>` (`MyGenericClass(Of T)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="6240b-237">如果当前<xref:System.Type>表示泛型类型参数-也就是说，如果<xref:System.Type.IsGenericParameter%2A>属性将返回`true`-<xref:System.Reflection.TypeAttributes>未指定此属性返回的值。</span><span class="sxs-lookup"><span data-stu-id="6240b-237">If the current <xref:System.Type> represents a generic type parameter - that is, if the <xref:System.Type.IsGenericParameter%2A> property returns `true` - the <xref:System.Reflection.TypeAttributes> value returned by this property is unspecified.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-238">以下示例使用该域<xref:System.Type.Attributes%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-238">The following example usesthe <xref:System.Type.Attributes%2A> property.</span></span>  
  
 [!code-csharp[System.Type.Attributes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.attributes/cs/attributes1.cs#1)]
 [!code-vb[System.Type.Attributes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.attributes/vb/attributes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.GetAttributeFlagsImpl" />
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public abstract Type BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type BaseType" />
      <MemberSignature Language="DocId" Value="P:System.Type.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property BaseType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ BaseType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseType : Type" Usage="System.Type.BaseType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.BaseType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-239">获取当前 <see cref="T:System.Type" /> 直接从中继承的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-239">Gets the type from which the current <see cref="T:System.Type" /> directly inherits.</span></span></summary>
        <value><span data-ttu-id="6240b-240">当前 <see cref="T:System.Type" /> 直接从中继承的 <see cref="T:System.Type" />；或者如果当前 <see langword="null" /> 表示 <see langword="Type" /> 类或一个接口，则为 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-240">The <see cref="T:System.Type" /> from which the current <see cref="T:System.Type" /> directly inherits, or <see langword="null" /> if the current <see langword="Type" /> represents the <see cref="T:System.Object" /> class or an interface.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-241">基类型是从其当前类型直接继承的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-241">The base type is the type from which the current type directly inherits.</span></span> <span data-ttu-id="6240b-242"><xref:System.Object> 是唯一的类型不具有基类型，因此`null`的基类型作为返回<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="6240b-242"><xref:System.Object> is the only type that does not have a base type, therefore `null` is returned as the base type of <xref:System.Object>.</span></span>  
  
 <span data-ttu-id="6240b-243">接口继承自零个或多个基接口;因此，此属性返回`null`如果`Type`对象表示的接口。</span><span class="sxs-lookup"><span data-stu-id="6240b-243">Interfaces inherit from zero or more base interfaces; therefore, this property returns `null` if the `Type` object represents an interface.</span></span> <span data-ttu-id="6240b-244">基接口可确定与<xref:System.Type.GetInterfaces%2A>或<xref:System.Type.FindInterfaces%2A>。</span><span class="sxs-lookup"><span data-stu-id="6240b-244">The base interfaces can be determined with <xref:System.Type.GetInterfaces%2A> or <xref:System.Type.FindInterfaces%2A>.</span></span>  
  
 <span data-ttu-id="6240b-245">如果当前<xref:System.Type>表示构造的泛型类型，基类型反映了泛型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-245">If the current <xref:System.Type> represents a constructed generic type, the base type reflects the generic arguments.</span></span> <span data-ttu-id="6240b-246">以下面的声明为例：</span><span class="sxs-lookup"><span data-stu-id="6240b-246">For example, consider the following declarations:</span></span>  
  
 [!code-cpp[System.Type.BaseType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.basetype/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.BaseType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.basetype/cs/remarks.cs#1)]
 [!code-vb[System.Type.BaseType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.basetype/vb/remarks.vb#1)]  
  
 <span data-ttu-id="6240b-247">构造类型`C<int>`(`C(Of Integer)`在 Visual Basic 中)，则<xref:System.Type.BaseType%2A>属性返回`B<int>`。</span><span class="sxs-lookup"><span data-stu-id="6240b-247">For the constructed type `C<int>` (`C(Of Integer)` in Visual Basic), the <xref:System.Type.BaseType%2A> property returns `B<int>`.</span></span>  
  
 <span data-ttu-id="6240b-248">如果当前<xref:System.Type>表示泛型类型定义的类型参数<xref:System.Type.BaseType%2A>返回类的约束，即，类型参数必须继承的类。</span><span class="sxs-lookup"><span data-stu-id="6240b-248">If the current <xref:System.Type> represents a type parameter of a generic type definition, <xref:System.Type.BaseType%2A> returns the class constraint, that is, the class the type parameter must inherit.</span></span> <span data-ttu-id="6240b-249">如果没有类约束，<xref:System.Type.BaseType%2A>返回<xref:System.Object?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-249">If there is no class constraint, <xref:System.Type.BaseType%2A> returns <xref:System.Object?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="6240b-250">此属性是只读的。</span><span class="sxs-lookup"><span data-stu-id="6240b-250">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-251">下面的示例演示了如何使用<xref:System.Type.BaseType%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-251">The following example demonstrates using the <xref:System.Type.BaseType%2A> property.</span></span>  
  
 [!code-cpp[TestBaseType#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestBaseType/CPP/testbasetype.cpp#1)]
 [!code-csharp[TestBaseType#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestBaseType/CS/testbasetype.cs#1)]
 [!code-vb[TestBaseType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestBaseType/VB/testbasetype.vb#1)]  
  
 <span data-ttu-id="6240b-252">下面的示例使用递归来列出的程序集中找到的每个类的完整的继承层次结构。</span><span class="sxs-lookup"><span data-stu-id="6240b-252">The following example uses recursion to list the complete inheritance hierarchy of each class found in an assembly.</span></span> <span data-ttu-id="6240b-253">该示例定义一个名为类`C`派生一个名为类`B`，而后者又派生自类名为`A`。</span><span class="sxs-lookup"><span data-stu-id="6240b-253">The example defines a class named `C` that derives from a class named `B`, which, in turn, derives from a class named `A`.</span></span>  
  
 [!code-csharp[System.Type.BaseType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.basetype/cs/basetype3.cs#2)]
 [!code-vb[System.Type.BaseType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.basetype/vb/basetype3.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="M:System.Type.GetInterfaces" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
        <altmember cref="P:System.Type.UnderlyingSystemType" />
        <altmember cref="M:System.Type.IsSubclassOf(System.Type)" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="6240b-254">反射类型和泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-254">Reflection and Generic Types</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContainsGenericParameters">
      <MemberSignature Language="C#" Value="public virtual bool ContainsGenericParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContainsGenericParameters" />
      <MemberSignature Language="DocId" Value="P:System.Type.ContainsGenericParameters" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ContainsGenericParameters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ContainsGenericParameters { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ContainsGenericParameters : bool" Usage="System.Type.ContainsGenericParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-255">获取一个值，该值指示当前 <see cref="T:System.Type" /> 对象是否具有尚未被特定类型替代的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-255">Gets a value indicating whether the current <see cref="T:System.Type" /> object has type parameters that have not been replaced by specific types.</span></span></summary>
        <value><span data-ttu-id="6240b-256">如果 <see langword="true" /> 对象本身是泛型类型形参或者具有尚未提供特定类型的类型形参，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-256"><see langword="true" /> if the <see cref="T:System.Type" /> object is itself a generic type parameter or has type parameters for which specific types have not been supplied; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-257">若要创建类型的实例，必须有任何泛型类型定义或类型本身，在任何封闭泛型类型中，或在任何元素中的类型中的类型参数的开放式构造的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-257">In order to create an instance of a type, there must be no generic type definitions or open constructed types in the type arguments of the type itself, in any enclosing generic types, or in any elements of the type.</span></span> <span data-ttu-id="6240b-258">另一种方法，换句话说就是，当递归地进行检查，该类型必须包含任何泛型类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-258">Another way of saying this is that when examined recursively, the type must contain no generic type parameters.</span></span>  
  
 <span data-ttu-id="6240b-259">类型可以是任意复杂，在进行此决定是困难的。</span><span class="sxs-lookup"><span data-stu-id="6240b-259">Since types can be arbitrarily complex, making this determination is difficult.</span></span> <span data-ttu-id="6240b-260">为方便起见，并降低错误的可能性<xref:System.Type.ContainsGenericParameters%2A>属性提供的标准方式来区分封闭式构造类型，可以实例化和开放构造类型，不能。</span><span class="sxs-lookup"><span data-stu-id="6240b-260">For convenience and to reduce the chance of error, the <xref:System.Type.ContainsGenericParameters%2A> property provides a standard way to distinguish between closed constructed types, which can be instantiated, and open constructed types, which cannot.</span></span> <span data-ttu-id="6240b-261">如果<xref:System.Type.ContainsGenericParameters%2A>属性返回`true`，不能实例化类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-261">If the <xref:System.Type.ContainsGenericParameters%2A> property returns `true`, the type cannot be instantiated.</span></span>  
  
 <span data-ttu-id="6240b-262"><xref:System.Type.ContainsGenericParameters%2A>属性类型参数以递归方式搜索。</span><span class="sxs-lookup"><span data-stu-id="6240b-262">The <xref:System.Type.ContainsGenericParameters%2A> property searches recursively for type parameters.</span></span> <span data-ttu-id="6240b-263">例如，它将返回`true`的一个数组，其元素是类型`A<T>`(`A(Of T)`在 Visual Basic 中)，即使数组本身不是泛型。</span><span class="sxs-lookup"><span data-stu-id="6240b-263">For example, it returns `true` for an array whose elements are type `A<T>` (`A(Of T)` in Visual Basic), even though the array is not itself generic.</span></span> <span data-ttu-id="6240b-264">与此相反的行为<xref:System.Type.IsGenericType%2A>属性，它返回`false`的数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-264">Contrast this with the behavior of the <xref:System.Type.IsGenericType%2A> property, which returns `false` for arrays.</span></span>  
  
 <span data-ttu-id="6240b-265">示例类和显示的值的表的一组<xref:System.Type.ContainsGenericParameters%2A>属性，请参阅<xref:System.Type.IsGenericType%2A>。</span><span class="sxs-lookup"><span data-stu-id="6240b-265">For a set of example classes and a table showing the values of the <xref:System.Type.ContainsGenericParameters%2A> property, see <xref:System.Type.IsGenericType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-266">下面的示例定义两个类型参数的泛型类，然后定义第二个泛型类从第一个类派生的。</span><span class="sxs-lookup"><span data-stu-id="6240b-266">The following example defines a generic class with two type parameters and then defines a second generic class that derives from the first class.</span></span> <span data-ttu-id="6240b-267">派生的类的基类具有两个类型参数： 第一个是<xref:System.Int32>，第二个是派生类型的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-267">The derived class's base class has two type arguments: the first is <xref:System.Int32> and the second is a type parameter of the derived type.</span></span> <span data-ttu-id="6240b-268">该示例显示有关这些泛型类的信息，包括位置报告的<xref:System.Type.GenericParameterPosition%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-268">The example displays information about these generic classes, including the positions reported by the <xref:System.Type.GenericParameterPosition%2A> property.</span></span>  
  
 [!code-cpp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CPP/source.cpp#1)]
 [!code-csharp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CS/source.cs#1)]
 [!code-vb[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <altmember cref="M:System.Type.MakeGenericType(System.Type[])" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="6240b-269">反射类型和泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-269">Reflection and Generic Types</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="6240b-270">如何：使用反射检查和实例化泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-270">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DeclaringMethod">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MethodBase DeclaringMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MethodBase DeclaringMethod" />
      <MemberSignature Language="DocId" Value="P:System.Type.DeclaringMethod" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DeclaringMethod As MethodBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MethodBase ^ DeclaringMethod { System::Reflection::MethodBase ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringMethod : System.Reflection.MethodBase" Usage="System.Type.DeclaringMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-271">获取一个表示声明方法的 <see cref="T:System.Reflection.MethodBase" />（如果当前 <see cref="T:System.Type" /> 表示泛型方法的一个类型参数）。</span><span class="sxs-lookup"><span data-stu-id="6240b-271">Gets a <see cref="T:System.Reflection.MethodBase" /> that represents the declaring method, if the current <see cref="T:System.Type" /> represents a type parameter of a generic method.</span></span></summary>
        <value><span data-ttu-id="6240b-272">如果当前 <see cref="T:System.Type" /> 表示泛型方法的一个类型参数，则为一个表示声明方法的 <see cref="T:System.Reflection.MethodBase" />；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-272">If the current <see cref="T:System.Type" /> represents a type parameter of a generic method, a <see cref="T:System.Reflection.MethodBase" /> that represents declaring method; otherwise, <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-273">声明的方法是泛型方法定义。</span><span class="sxs-lookup"><span data-stu-id="6240b-273">The declaring method is a generic method definition.</span></span> <span data-ttu-id="6240b-274">也就是说，如果<xref:System.Type.DeclaringMethod%2A>不会返回`null`，然后`DeclaringMethod.IsGenericMethodDefinition`返回`true`。</span><span class="sxs-lookup"><span data-stu-id="6240b-274">That is, if <xref:System.Type.DeclaringMethod%2A> does not return `null`, then `DeclaringMethod.IsGenericMethodDefinition` returns `true`.</span></span>  
  
 <span data-ttu-id="6240b-275"><xref:System.Type.DeclaringType%2A>和<xref:System.Type.DeclaringMethod%2A>属性标识的泛型类型定义或泛型方法定义最初在其中定义泛型类型参数：</span><span class="sxs-lookup"><span data-stu-id="6240b-275">The <xref:System.Type.DeclaringType%2A> and <xref:System.Type.DeclaringMethod%2A> properties identify the generic type definition or generic method definition in which the generic type parameter was originally defined:</span></span>  
  
-   <span data-ttu-id="6240b-276">如果<xref:System.Type.DeclaringMethod%2A>属性返回<xref:System.Reflection.MethodInfo>，则该<xref:System.Reflection.MethodInfo>表示泛型方法定义，并且当前<xref:System.Type>对象表示该泛型方法定义的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-276">If the <xref:System.Type.DeclaringMethod%2A> property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.</span></span>  
  
-   <span data-ttu-id="6240b-277">如果<xref:System.Type.DeclaringMethod%2A>属性返回`null`，然后<xref:System.Type.DeclaringType%2A>属性始终返回<xref:System.Type>对象，表示泛型类型定义，并且当前<xref:System.Type>对象都表示该泛型类型的类型参数定义。</span><span class="sxs-lookup"><span data-stu-id="6240b-277">If the <xref:System.Type.DeclaringMethod%2A> property returns `null`, then the <xref:System.Type.DeclaringType%2A> property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.</span></span>  
  
-   <span data-ttu-id="6240b-278">获取<xref:System.Type.DeclaringMethod%2A>类型上的属性，其<xref:System.Type.IsGenericParameter%2A>属性是`false`引发<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="6240b-278">Getting the <xref:System.Type.DeclaringMethod%2A> property on a type whose <xref:System.Type.IsGenericParameter%2A> property is `false` throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="6240b-279"><xref:System.Reflection.MethodBase>返回的<xref:System.Type.DeclaringMethod%2A>属性是<xref:System.Reflection.MethodInfo>对于泛型方法，或<xref:System.Reflection.ConstructorInfo>泛型构造函数。</span><span class="sxs-lookup"><span data-stu-id="6240b-279">The <xref:System.Reflection.MethodBase> that is returned by the <xref:System.Type.DeclaringMethod%2A> property is either a <xref:System.Reflection.MethodInfo> in the case of a generic method, or a <xref:System.Reflection.ConstructorInfo> in the case of a generic constructor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-280">在.NET Framework 2.0 版中，不支持泛型构造函数。</span><span class="sxs-lookup"><span data-stu-id="6240b-280">In the .NET Framework version 2.0, generic constructors are not supported.</span></span>  
  
 <span data-ttu-id="6240b-281">有关泛型反射中使用的术语的固定条件列表，请参阅 <xref:System.Type.IsGenericType%2A> 属性注解。</span><span class="sxs-lookup"><span data-stu-id="6240b-281">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-282">下面的代码示例定义有一个泛型方法，并为类型参数分配给该方法，调用生成的构造泛型方法的类。</span><span class="sxs-lookup"><span data-stu-id="6240b-282">The following code example defines a class that has a generic method, assigns a type argument to the method, and invokes the resulting constructed generic method.</span></span> <span data-ttu-id="6240b-283">它还显示有关泛型方法定义和构造的方法的信息。</span><span class="sxs-lookup"><span data-stu-id="6240b-283">It also displays information about the generic method definition and the constructed method.</span></span> <span data-ttu-id="6240b-284">在显示的类型参数的泛型方法定义中，信息时`DisplayGenericMethodInfo`方法中，示例代码演示的值<xref:System.Type.DeclaringMethod%2A>方法的泛型类型参数的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-284">When displaying information about the type parameters of the generic method definition, in the `DisplayGenericMethodInfo` method, the example code shows the value of the <xref:System.Type.DeclaringMethod%2A> property for the method's generic type parameter.</span></span>  
  
 [!code-cpp[MethodInfo.Generics#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodInfo.Generics/cpp/source.cpp#1)]
 [!code-csharp[MethodInfo.Generics#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodInfo.Generics/CS/source.cs#1)]
 [!code-vb[MethodInfo.Generics#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodInfo.Generics/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsGenericParameter" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="6240b-285">反射类型和泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-285">Reflection and Generic Types</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="6240b-286">如何：使用反射检查和实例化泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-286">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public override Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Type.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : Type" Usage="System.Type.DeclaringType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.DeclaringType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-287">获取用来声明当前的嵌套类型或泛型类型参数的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-287">Gets the type that declares the current nested type or generic type parameter.</span></span></summary>
        <value><span data-ttu-id="6240b-288">如果当前的类型是嵌套类型，则为表示封闭类型的 <see cref="T:System.Type" /> 对象；如果当前的类型是泛型类型的类型参数，则为泛型类型的定义；如果当前的类型是泛型方法的类型参数，则为用来声明泛型方法的类型；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-288">A <see cref="T:System.Type" /> object representing the enclosing type, if the current type is a nested type; or the generic type definition, if the current type is a type parameter of a generic type; or the type that declares the generic method, if the current type is a type parameter of a generic method; otherwise, <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-289">如果当前<xref:System.Type>对象表示泛型类型的类型参数，则此属性返回的泛型类型定义。</span><span class="sxs-lookup"><span data-stu-id="6240b-289">If the current <xref:System.Type> object represents a type parameter of a generic type, this property returns the generic type definition.</span></span>  
  
 <span data-ttu-id="6240b-290">如果当前<xref:System.Type>对象表示泛型方法类型参数，则此属性返回包含泛型方法定义的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-290">If the current <xref:System.Type> object represents a type parameter of a generic method, this property returns the type that contains the generic method definition.</span></span> <span data-ttu-id="6240b-291">如果类型是泛型，则返回的泛型类型定义。</span><span class="sxs-lookup"><span data-stu-id="6240b-291">If the type is generic, the generic type definition is returned.</span></span> <span data-ttu-id="6240b-292">下面的代码，即返回的泛型类型定义<xref:System.Collections.Generic.List%601>泛型类，该类包含<xref:System.Collections.Generic.List%601.ConvertAll%2A>泛型方法：</span><span class="sxs-lookup"><span data-stu-id="6240b-292">That is, the following code returns the generic type definition of the <xref:System.Collections.Generic.List%601> generic class, which contains the <xref:System.Collections.Generic.List%601.ConvertAll%2A> generic method:</span></span>  
  
 [!code-cpp[System.Type.DeclaringType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.declaringtype/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.DeclaringType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.declaringtype/cs/remarks.cs#1)]
 [!code-vb[System.Type.DeclaringType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.declaringtype/vb/remarks.vb#1)]  
  
 <span data-ttu-id="6240b-293">如果当前<xref:System.Type>表示泛型类型或泛型方法定义中的类型参数<xref:System.Type.DeclaringType%2A>和<xref:System.Type.DeclaringMethod%2A>属性标识其中泛型类型参数的泛型类型定义或泛型方法定义最初定义：</span><span class="sxs-lookup"><span data-stu-id="6240b-293">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, the <xref:System.Type.DeclaringType%2A> and <xref:System.Type.DeclaringMethod%2A> properties identify the generic type definition or generic method definition where the generic type parameter was originally defined:</span></span>  
  
-   <span data-ttu-id="6240b-294">如果<xref:System.Type.DeclaringMethod%2A>属性返回<xref:System.Reflection.MethodInfo>，则该<xref:System.Reflection.MethodInfo>表示泛型方法定义，并且当前<xref:System.Type>对象表示该泛型方法定义的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-294">If the <xref:System.Type.DeclaringMethod%2A> property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.</span></span>  
  
-   <span data-ttu-id="6240b-295">如果<xref:System.Type.DeclaringMethod%2A>属性返回`null`，然后<xref:System.Type.DeclaringType%2A>属性始终返回<xref:System.Type>对象，表示泛型类型定义，并且当前<xref:System.Type>对象都表示该泛型类型的类型参数定义。</span><span class="sxs-lookup"><span data-stu-id="6240b-295">If the <xref:System.Type.DeclaringMethod%2A> property returns `null`, then the <xref:System.Type.DeclaringType%2A> property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.</span></span>  
  
-   <span data-ttu-id="6240b-296">获取<xref:System.Type.DeclaringType%2A>类型上的属性，其<xref:System.Type.IsGenericParameter%2A>属性是`false`引发<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="6240b-296">Getting the <xref:System.Type.DeclaringType%2A> property on a type whose <xref:System.Type.IsGenericParameter%2A> property is `false` throws an <xref:System.InvalidOperationException>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-297">此示例显示派生类中的一种方法的声明类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-297">This example displays the declaring type of a method in a derived class.</span></span>  
  
 [!code-cpp[Classic Type.DeclaringType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.DeclaringType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.DeclaringType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.DeclaringType Example/CS/source.cs#1)]
 [!code-vb[Classic Type.DeclaringType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.DeclaringType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="P:System.Type.ReflectedType" />
      </Docs>
    </Member>
    <Member MemberName="DefaultBinder">
      <MemberSignature Language="C#" Value="public static System.Reflection.Binder DefaultBinder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Reflection.Binder DefaultBinder" />
      <MemberSignature Language="DocId" Value="P:System.Type.DefaultBinder" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultBinder As Binder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Reflection::Binder ^ DefaultBinder { System::Reflection::Binder ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultBinder : System.Reflection.Binder" Usage="System.Type.DefaultBinder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Binder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-298">获取默认联编程序的引用，该程序实现的内部规则用于选择由 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 调用的合适成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-298">Gets a reference to the default binder, which implements internal rules for selecting the appropriate members to be called by <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />.</span></span></summary>
        <value><span data-ttu-id="6240b-299">系统使用的默认联编程序的引用。</span><span class="sxs-lookup"><span data-stu-id="6240b-299">A reference to the default binder used by the system.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-300">提供与公共语言运行时的默认联编程序是在极个别的情况下，所有适用。</span><span class="sxs-lookup"><span data-stu-id="6240b-300">The default binder provided with the common language runtime is applicable in all but the most specialized circumstances.</span></span> <span data-ttu-id="6240b-301">如果需要不同于所提供的默认联编程序，如下所示规则定义的联编程序类型派生自<xref:System.Reflection.Binder>类，并使用该类型的实例传递`binder`参数之一的<xref:System.Type.InvokeMember%2A>重载。</span><span class="sxs-lookup"><span data-stu-id="6240b-301">If you need a binder that follows rules that differ from those of the supplied default binder, define a type derived from the <xref:System.Reflection.Binder> class and pass an instance of that type using the `binder` parameter of one of the <xref:System.Type.InvokeMember%2A> overloads.</span></span>  
  
 <span data-ttu-id="6240b-302">反射建模的通用类型系统的可访问性规则。</span><span class="sxs-lookup"><span data-stu-id="6240b-302">Reflection models the accessibility rules of the common type system.</span></span> <span data-ttu-id="6240b-303">例如，如果调用方是在同一程序集中，调用方不需要特殊权限的内部成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-303">For example, if the caller is in the same assembly, the caller does not need special permissions for internal members.</span></span> <span data-ttu-id="6240b-304">否则，调用方需要<xref:System.Security.Permissions.ReflectionPermission>。</span><span class="sxs-lookup"><span data-stu-id="6240b-304">Otherwise, the caller needs <xref:System.Security.Permissions.ReflectionPermission>.</span></span> <span data-ttu-id="6240b-305">这是与受保护的成员的查找一致、 专用和等。</span><span class="sxs-lookup"><span data-stu-id="6240b-305">This is consistent with lookup of members that are protected, private, and so on.</span></span>  
  
 <span data-ttu-id="6240b-306">一般原则是，<xref:System.Reflection.Binder.ChangeType%2A>应执行仅扩大转换，永远不会丢失数据。</span><span class="sxs-lookup"><span data-stu-id="6240b-306">The general principle is that <xref:System.Reflection.Binder.ChangeType%2A> should perform only widening conversions, which never lose data.</span></span> <span data-ttu-id="6240b-307">扩大转换的示例将转换为 64 位有符号的整数的值将 32 位有符号的整数的值。</span><span class="sxs-lookup"><span data-stu-id="6240b-307">An example of a widening conversion is converting a value that is a 32-bit signed integer to a value that is a 64-bit signed integer.</span></span> <span data-ttu-id="6240b-308">这被有别于收缩转换可能会丢失数据。</span><span class="sxs-lookup"><span data-stu-id="6240b-308">This is distinguished from a narrowing conversion, which may lose data.</span></span> <span data-ttu-id="6240b-309">收缩转换的示例将 64 位有符号的整数转换为 32 位有符号整数。</span><span class="sxs-lookup"><span data-stu-id="6240b-309">An example of a narrowing conversion is converting a 64-bit signed integer to a 32-bit signed integer.</span></span>  
  
 <span data-ttu-id="6240b-310">下表列出了受默认联编程序的转换。</span><span class="sxs-lookup"><span data-stu-id="6240b-310">The following table lists the conversions supported by the default binder.</span></span>  
  
|<span data-ttu-id="6240b-311">源类型</span><span class="sxs-lookup"><span data-stu-id="6240b-311">Source Type</span></span>|<span data-ttu-id="6240b-312">目标类型</span><span class="sxs-lookup"><span data-stu-id="6240b-312">Target Type</span></span>|  
|-----------------|-----------------|  
|<span data-ttu-id="6240b-313">任何类型</span><span class="sxs-lookup"><span data-stu-id="6240b-313">Any type</span></span>|<span data-ttu-id="6240b-314">其基类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-314">Its base type.</span></span>|  
|<span data-ttu-id="6240b-315">任何类型</span><span class="sxs-lookup"><span data-stu-id="6240b-315">Any type</span></span>|<span data-ttu-id="6240b-316">它实现的接口。</span><span class="sxs-lookup"><span data-stu-id="6240b-316">The interface it implements.</span></span>|  
|<span data-ttu-id="6240b-317">Char</span><span class="sxs-lookup"><span data-stu-id="6240b-317">Char</span></span>|<span data-ttu-id="6240b-318">Unt16、 UInt32、 Int32、 UInt64、 Int64、 Single、 Double</span><span class="sxs-lookup"><span data-stu-id="6240b-318">Unt16, UInt32, Int32, UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="6240b-319">Byte</span><span class="sxs-lookup"><span data-stu-id="6240b-319">Byte</span></span>|<span data-ttu-id="6240b-320">Char、 Unt16、 Int16、 UInt32、 Int32、 UInt64、 Int64、 Single、 Double</span><span class="sxs-lookup"><span data-stu-id="6240b-320">Char, Unt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="6240b-321">SByte</span><span class="sxs-lookup"><span data-stu-id="6240b-321">SByte</span></span>|<span data-ttu-id="6240b-322">Int16、Int32、Int64、Single、Double</span><span class="sxs-lookup"><span data-stu-id="6240b-322">Int16, Int32, Int64, Single, Double</span></span>|  
|<span data-ttu-id="6240b-323">UInt16</span><span class="sxs-lookup"><span data-stu-id="6240b-323">UInt16</span></span>|<span data-ttu-id="6240b-324">UInt32、Int32、UInt64、Int64、Single、Double</span><span class="sxs-lookup"><span data-stu-id="6240b-324">UInt32, Int32, UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="6240b-325">Int16</span><span class="sxs-lookup"><span data-stu-id="6240b-325">Int16</span></span>|<span data-ttu-id="6240b-326">Int32、Int64、Single、Double</span><span class="sxs-lookup"><span data-stu-id="6240b-326">Int32, Int64, Single, Double</span></span>|  
|<span data-ttu-id="6240b-327">UInt32</span><span class="sxs-lookup"><span data-stu-id="6240b-327">UInt32</span></span>|<span data-ttu-id="6240b-328">UInt64、Int64、Single、Double</span><span class="sxs-lookup"><span data-stu-id="6240b-328">UInt64, Int64, Single, Double</span></span>|  
|<span data-ttu-id="6240b-329">Int32</span><span class="sxs-lookup"><span data-stu-id="6240b-329">Int32</span></span>|<span data-ttu-id="6240b-330">Int64、Single、Double</span><span class="sxs-lookup"><span data-stu-id="6240b-330">Int64, Single, Double</span></span>|  
|<span data-ttu-id="6240b-331">UInt64</span><span class="sxs-lookup"><span data-stu-id="6240b-331">UInt64</span></span>|<span data-ttu-id="6240b-332">Single、Double</span><span class="sxs-lookup"><span data-stu-id="6240b-332">Single, Double</span></span>|  
|<span data-ttu-id="6240b-333">Int64</span><span class="sxs-lookup"><span data-stu-id="6240b-333">Int64</span></span>|<span data-ttu-id="6240b-334">Single、Double</span><span class="sxs-lookup"><span data-stu-id="6240b-334">Single, Double</span></span>|  
|<span data-ttu-id="6240b-335">Single</span><span class="sxs-lookup"><span data-stu-id="6240b-335">Single</span></span>|<span data-ttu-id="6240b-336">Double</span><span class="sxs-lookup"><span data-stu-id="6240b-336">Double</span></span>|  
|<span data-ttu-id="6240b-337">非引用</span><span class="sxs-lookup"><span data-stu-id="6240b-337">Non-reference</span></span>|<span data-ttu-id="6240b-338">按引用。</span><span class="sxs-lookup"><span data-stu-id="6240b-338">By-reference.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6240b-339">下面的示例获取默认联编程序从`DefaultBinder`属性，并表示通过调用成员 MyClass`DefaultBinder`作为参数的值<xref:System.Type.InvokeMember%2A>。</span><span class="sxs-lookup"><span data-stu-id="6240b-339">The following example gets the default binder from the `DefaultBinder` property, and invokes a member of MyClass by passing the `DefaultBinder` value as a parameter to <xref:System.Type.InvokeMember%2A>.</span></span>  
  
 [!code-cpp[Type_DefaultBinder#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_DefaultBinder/CPP/type_defaultbinder.cpp#1)]
 [!code-csharp[Type_DefaultBinder#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_DefaultBinder/CS/type_defaultbinder.cs#1)]
 [!code-vb[Type_DefaultBinder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_DefaultBinder/VB/type_defaultbinder.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.Binder" />
      </Docs>
    </Member>
    <Member MemberName="Delimiter">
      <MemberSignature Language="C#" Value="public static readonly char Delimiter;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char Delimiter" />
      <MemberSignature Language="DocId" Value="F:System.Type.Delimiter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Delimiter As Char " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly char Delimiter;" />
      <MemberSignature Language="F#" Value=" staticval mutable Delimiter : char" Usage="System.Type.Delimiter" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-340">分隔 <see cref="T:System.Type" /> 的命名空间中的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-340">Separates names in the namespace of the <see cref="T:System.Type" />.</span></span> <span data-ttu-id="6240b-341">此字段为只读。</span><span class="sxs-lookup"><span data-stu-id="6240b-341">This field is read-only.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptyTypes">
      <MemberSignature Language="C#" Value="public static readonly Type[] EmptyTypes;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Type[] EmptyTypes" />
      <MemberSignature Language="DocId" Value="F:System.Type.EmptyTypes" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly EmptyTypes As Type() " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly cli::array &lt;Type ^&gt; ^ EmptyTypes;" />
      <MemberSignature Language="F#" Value=" staticval mutable EmptyTypes : Type[]" Usage="System.Type.EmptyTypes" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-342">表示 <see cref="T:System.Type" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-342">Represents an empty array of type <see cref="T:System.Type" />.</span></span> <span data-ttu-id="6240b-343">此字段为只读。</span><span class="sxs-lookup"><span data-stu-id="6240b-343">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6240b-344">下面的代码示例演示`EmptyTypes`字段中的一个使用`GetConstructor`方法来获取不带参数的构造函数。</span><span class="sxs-lookup"><span data-stu-id="6240b-344">The following code example shows the `EmptyTypes` field used in one of the `GetConstructor` methods to get a constructor that takes no parameters.</span></span>  
  
 [!code-cpp[Classic Type.EmptyTypes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.EmptyTypes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.EmptyTypes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.EmptyTypes Example/CS/source.cs#1)]
 [!code-vb[Classic Type.EmptyTypes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.EmptyTypes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6240b-345">确定当前 <see cref="T:System.Type" /> 的基础系统类型是否与指定 <see cref="T:System.Object" /> 或 <see cref="T:System.Type" /> 的基础系统类型相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-345">Determines if the underlying system type of the current <see cref="T:System.Type" /> is the same as the underlying system type of the specified <see cref="T:System.Object" /> or <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="type.Equals o" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.Equals(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="6240b-346">该对象，其基础系统类型将与当前 <see cref="T:System.Type" /> 的基础系统类型相比较。</span><span class="sxs-lookup"><span data-stu-id="6240b-346">The object whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</span></span> <span data-ttu-id="6240b-347">为了使比较成功，<paramref name="o" /> 必须能够被强制转换或转换为类型 <see cref="T:System.Type" /> 的一个对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-347">For the comparison to succeed, <paramref name="o" /> must be able to be cast or converted to an object of type   <see cref="T:System.Type" />.</span></span></param>
        <summary><span data-ttu-id="6240b-348">确定当前 <see cref="T:System.Type" /> 的基础系统类型是否与指定 <see cref="T:System.Object" /> 的基础系统类型相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-348">Determines if the underlying system type of the current <see cref="T:System.Type" /> object is the same as the underlying system type of the specified <see cref="T:System.Object" />.</span></span></summary>
        <returns><span data-ttu-id="6240b-349">如果 <see langword="true" /> 的基础系统类型与当前 <paramref name="o" /> 的基础系统类型相同，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-349"><see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6240b-350">如果 ：此方法也会返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-350">This method also returns <see langword="false" /> if: .</span></span>  
  <span data-ttu-id="6240b-351">
-   <paramref name="o" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-351">
-   <paramref name="o" /> is <see langword="null" />.</span></span>  
  <span data-ttu-id="6240b-352">
-   <paramref name="o" /> 不能强制转换或转换为 <see cref="T:System.Type" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-352">
-   <paramref name="o" /> cannot be cast or converted to a <see cref="T:System.Type" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-353">此方法重写 <xref:System.Object.Equals%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-353">This method overrides <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6240b-354">它将强制转换`o`对象的类型<xref:System.Type>，并调用<xref:System.Type.Equals%28System.Type%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-354">It casts `o` to an object of type <xref:System.Type> and calls the <xref:System.Type.Equals%28System.Type%29?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-355">下面的示例使用<xref:System.Type.Equals%28System.Object%29>进行比较各种<xref:System.Type>对象的各种实例<xref:System.Object>实例。</span><span class="sxs-lookup"><span data-stu-id="6240b-355">The following example uses <xref:System.Type.Equals%28System.Object%29> to compare various <xref:System.Type> object instances with various <xref:System.Object> instances.</span></span>  
  
 [!code-csharp[System.Type.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.Equals/cs/EqualsEx1.cs#1)]
 [!code-vb[System.Type.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.Equals/vb/EqualsEx1.vb#1)]  
  
 <span data-ttu-id="6240b-356">两件事是特别值得注意的示例：</span><span class="sxs-lookup"><span data-stu-id="6240b-356">Two things are particularly worth noting about the example:</span></span>  
  
-   <span data-ttu-id="6240b-357">比较<xref:System.Type>对象，表示一个整数，其<xref:System.Reflection.TypeInfo>对象，表示返回的整数`true`因为<xref:System.Reflection.TypeInfo>派生自<xref:System.Type>。</span><span class="sxs-lookup"><span data-stu-id="6240b-357">The comparison of a <xref:System.Type> object that represents an integer with a <xref:System.Reflection.TypeInfo> object that represents an integer return `true` because <xref:System.Reflection.TypeInfo> is derived from <xref:System.Type>.</span></span>  
  
-   <span data-ttu-id="6240b-358">比较<xref:System.Type>对象，表示<xref:System.Collections.Generic.IList%601>对象 （开放式泛型类型） 与`List(Of String)`对象 （封闭式泛型类型） 返回`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-358">The comparison of a  <xref:System.Type> object that represents a <xref:System.Collections.Generic.IList%601> object (an open generic type) with a `List(Of String)` object (a closed generic type) returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.UnderlyingSystemType" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public virtual bool Equals (Type o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Type o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.Equals(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Equals (o As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(Type ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : Type -&gt; bool" Usage="type.Equals o" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.Equals(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="6240b-359">该对象，其基础系统类型将与当前 <see cref="T:System.Type" /> 的基础系统类型相比较。</span><span class="sxs-lookup"><span data-stu-id="6240b-359">The object whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</span></span></param>
        <summary><span data-ttu-id="6240b-360">确定当前 <see cref="T:System.Type" /> 的基础系统类型是否与指定 <see cref="T:System.Type" /> 的基础系统类型相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-360">Determines if the underlying system type of the current <see cref="T:System.Type" /> is the same as the underlying system type of the specified <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="6240b-361">如果 <see langword="true" /> 的基础系统类型与当前 <paramref name="o" /> 的基础系统类型相同，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-361"><see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6240b-362">下面的示例使用`Equals`比较两个类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-362">The following example uses `Equals` to compare two types.</span></span>  
  
 [!code-csharp[Classic Type.Equals1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.Equals1 Example/CS/source.cs#1)]
 [!code-vb[Classic Type.Equals1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.Equals1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.UnderlyingSystemType" />
      </Docs>
    </Member>
    <Member MemberName="FilterAttribute">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MemberFilter FilterAttribute;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MemberFilter FilterAttribute" />
      <MemberSignature Language="DocId" Value="F:System.Type.FilterAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FilterAttribute As MemberFilter " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::MemberFilter ^ FilterAttribute;" />
      <MemberSignature Language="F#" Value=" staticval mutable FilterAttribute : System.Reflection.MemberFilter" Usage="System.Type.FilterAttribute" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-363">表示用在特性上的成员筛选器。</span><span class="sxs-lookup"><span data-stu-id="6240b-363">Represents the member filter used on attributes.</span></span> <span data-ttu-id="6240b-364">此字段为只读。</span><span class="sxs-lookup"><span data-stu-id="6240b-364">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-365">此字段将包含对使用的委托的引用<xref:System.Type.FindMembers%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-365">This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method.</span></span> <span data-ttu-id="6240b-366">通过此委托封装的方法采用两个参数： 第一个是<xref:System.Reflection.MemberInfo>对象，并且第二个`Object`。</span><span class="sxs-lookup"><span data-stu-id="6240b-366">The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`.</span></span> <span data-ttu-id="6240b-367">该方法确定是否`MemberInfo`对象与指定的条件相匹配`Object`。</span><span class="sxs-lookup"><span data-stu-id="6240b-367">The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`.</span></span> <span data-ttu-id="6240b-368">`Object`可能分配的类字段中的任何一个的值<xref:System.Reflection.FieldAttributes>， <xref:System.Reflection.MethodAttributes>，或<xref:System.Reflection.MethodImplAttributes>。</span><span class="sxs-lookup"><span data-stu-id="6240b-368">The `Object` may be assigned the value of any one of the fields on the classes <xref:System.Reflection.FieldAttributes>, <xref:System.Reflection.MethodAttributes>, or <xref:System.Reflection.MethodImplAttributes>.</span></span>  
  
 <span data-ttu-id="6240b-369">例如，`Object`可以分配的字段值`FieldAttributes`如公共。</span><span class="sxs-lookup"><span data-stu-id="6240b-369">For example, the `Object` can be assigned the value of a field from `FieldAttributes` such as Public.</span></span> <span data-ttu-id="6240b-370">在这种情况下，当`FilterAttribute`调用委托时，它将返回`true`仅当该方法由`MemberInfo`使用元数据中的公共字段属性修饰对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-370">In that case, when the `FilterAttribute` delegate is invoked, it will return `true` only if the method represented by the `MemberInfo` object is decorated with the public field attribute in metadata.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-371">下面的示例获取`FilterAttribute`委托中，将其作为参数传递<xref:System.Type.FindMembers%2A>方法，并显示指定的成员及其属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-371">The following example gets the `FilterAttribute` delegate, passes it as a parameter to the <xref:System.Type.FindMembers%2A> method, and displays the specified members and their attributes.</span></span>  
  
 [!code-cpp[Type_FilterAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FilterAttribute/CPP/type_filterattribute.cpp#1)]
 [!code-csharp[Type_FilterAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FilterAttribute/CS/type_filterattribute.cs#1)]
 [!code-vb[Type_FilterAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FilterAttribute/VB/type_filterattribute.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
        <altmember cref="T:System.Reflection.MemberFilter" />
      </Docs>
    </Member>
    <Member MemberName="FilterName">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MemberFilter FilterName;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MemberFilter FilterName" />
      <MemberSignature Language="DocId" Value="F:System.Type.FilterName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FilterName As MemberFilter " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::MemberFilter ^ FilterName;" />
      <MemberSignature Language="F#" Value=" staticval mutable FilterName : System.Reflection.MemberFilter" Usage="System.Type.FilterName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-372">表示用于名称的区分大小写的成员筛选器。</span><span class="sxs-lookup"><span data-stu-id="6240b-372">Represents the case-sensitive member filter used on names.</span></span> <span data-ttu-id="6240b-373">此字段为只读。</span><span class="sxs-lookup"><span data-stu-id="6240b-373">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-374">此字段将包含对使用的委托的引用<xref:System.Type.FindMembers%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-374">This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method.</span></span> <span data-ttu-id="6240b-375">通过此委托封装的方法采用两个参数： 第一个是<xref:System.Reflection.MemberInfo>对象，并且第二个`Object`。</span><span class="sxs-lookup"><span data-stu-id="6240b-375">The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`.</span></span> <span data-ttu-id="6240b-376">该方法确定是否`MemberInfo`对象与指定的条件相匹配`Object`。</span><span class="sxs-lookup"><span data-stu-id="6240b-376">The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`.</span></span> <span data-ttu-id="6240b-377">`Object`分配一个字符串值，该值可能包含一个尾部"\*"通配符字符。</span><span class="sxs-lookup"><span data-stu-id="6240b-377">The `Object` is assigned a string value, which may include a trailing "\*" wildcard character.</span></span> <span data-ttu-id="6240b-378">支持唯一通配符最终字符串匹配。</span><span class="sxs-lookup"><span data-stu-id="6240b-378">Only wildcard end string matching is supported.</span></span>  
  
 <span data-ttu-id="6240b-379">例如，`Object`可能分配值"字节 \*"。</span><span class="sxs-lookup"><span data-stu-id="6240b-379">For example, the `Object` may be assigned the value "Byte\*".</span></span> <span data-ttu-id="6240b-380">在这种情况下，当`FilterName`调用委托时，它将返回`true`仅当该方法由`MemberInfo`对象具有以"字节"开头的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-380">In that case, when the `FilterName` delegate is invoked, it will return `true` only if the method represented by the `MemberInfo` object has a name that begins with "Byte".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-381">下面的代码示例获取与用户定义关联的方法`Application`类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-381">The following code example gets the methods associated with the user-defined `Application` type.</span></span>  
  
 [!code-cpp[Classic Type.FilterName Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.FilterName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.FilterName Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.FilterName Example/CS/source.cs#1)]
 [!code-vb[Classic Type.FilterName Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.FilterName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
        <altmember cref="T:System.Reflection.MemberFilter" />
      </Docs>
    </Member>
    <Member MemberName="FilterNameIgnoreCase">
      <MemberSignature Language="C#" Value="public static readonly System.Reflection.MemberFilter FilterNameIgnoreCase;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Reflection.MemberFilter FilterNameIgnoreCase" />
      <MemberSignature Language="DocId" Value="F:System.Type.FilterNameIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FilterNameIgnoreCase As MemberFilter " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Reflection::MemberFilter ^ FilterNameIgnoreCase;" />
      <MemberSignature Language="F#" Value=" staticval mutable FilterNameIgnoreCase : System.Reflection.MemberFilter" Usage="System.Type.FilterNameIgnoreCase" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-382">表示用于名称的不区分大小写的成员筛选器。</span><span class="sxs-lookup"><span data-stu-id="6240b-382">Represents the case-insensitive member filter used on names.</span></span> <span data-ttu-id="6240b-383">此字段为只读。</span><span class="sxs-lookup"><span data-stu-id="6240b-383">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-384">此字段将包含对使用的委托的引用<xref:System.Type.FindMembers%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-384">This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method.</span></span> <span data-ttu-id="6240b-385">通过此委托封装的方法采用两个参数： 第一个是<xref:System.Reflection.MemberInfo>对象，并且第二个`Object`。</span><span class="sxs-lookup"><span data-stu-id="6240b-385">The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`.</span></span> <span data-ttu-id="6240b-386">该方法确定是否`MemberInfo`对象与指定的条件相匹配`Object`。</span><span class="sxs-lookup"><span data-stu-id="6240b-386">The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`.</span></span> <span data-ttu-id="6240b-387">`Object`分配一个字符串值，该值可能包含一个尾部"\*"通配符字符。</span><span class="sxs-lookup"><span data-stu-id="6240b-387">The `Object` is assigned a string value, which may include a trailing "\*" wildcard character.</span></span> <span data-ttu-id="6240b-388">支持唯一通配符最终字符串匹配。</span><span class="sxs-lookup"><span data-stu-id="6240b-388">Only wildcard end string matching is supported.</span></span>  
  
 <span data-ttu-id="6240b-389">例如，`Object`可能分配值"字节 \*"。</span><span class="sxs-lookup"><span data-stu-id="6240b-389">For example, the `Object` may be assigned the value "ByTe\*".</span></span> <span data-ttu-id="6240b-390">在这种情况下，当`FilterName`调用委托时，它将返回 true 仅表示的方法如果`MemberInfo`对象具有一个名称以"字节"，忽略大小写。</span><span class="sxs-lookup"><span data-stu-id="6240b-390">In that case, when the `FilterName` delegate is invoked, it will return true only if the method represented by the `MemberInfo` object has a name that begins with "byte", ignoring case.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-391">下面的示例获取`MemberFilter`委托中，将其作为参数传递<xref:System.Type.FindMembers%2A>方法，并显示方法和其属性`String`忽略大小写字母"c"开头的类。</span><span class="sxs-lookup"><span data-stu-id="6240b-391">The following example gets the `MemberFilter` delegate, passes it as a parameter to the <xref:System.Type.FindMembers%2A> method, and displays the methods and their attributes of the `String` class that begin with the letter "c", disregarding the case.</span></span>  
  
 [!code-cpp[Type_FilterNameIgnoreCase#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FilterNameIgnoreCase/CPP/type_filternameignorecase.cpp#1)]
 [!code-csharp[Type_FilterNameIgnoreCase#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FilterNameIgnoreCase/CS/type_filternameignorecase.cs#1)]
 [!code-vb[Type_FilterNameIgnoreCase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FilterNameIgnoreCase/VB/type_filternameignorecase.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
        <altmember cref="T:System.Reflection.MemberFilter" />
      </Docs>
    </Member>
    <Member MemberName="FindInterfaces">
      <MemberSignature Language="C#" Value="public virtual Type[] FindInterfaces (System.Reflection.TypeFilter filter, object filterCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] FindInterfaces(class System.Reflection.TypeFilter filter, object filterCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindInterfaces (filter As TypeFilter, filterCriteria As Object) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ FindInterfaces(System::Reflection::TypeFilter ^ filter, System::Object ^ filterCriteria);" />
      <MemberSignature Language="F#" Value="abstract member FindInterfaces : System.Reflection.TypeFilter * obj -&gt; Type[]&#xA;override this.FindInterfaces : System.Reflection.TypeFilter * obj -&gt; Type[]" Usage="type.FindInterfaces (filter, filterCriteria)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Reflection.TypeFilter" />
        <Parameter Name="filterCriteria" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="filter"><span data-ttu-id="6240b-392">对照 <paramref name="filterCriteria" /> 比较接口的委托。</span><span class="sxs-lookup"><span data-stu-id="6240b-392">The delegate that compares the interfaces against <paramref name="filterCriteria" />.</span></span></param>
        <param name="filterCriteria"><span data-ttu-id="6240b-393">确定接口是否应包括在返回数组中的搜索判据。</span><span class="sxs-lookup"><span data-stu-id="6240b-393">The search criteria that determines whether an interface should be included in the returned array.</span></span></param>
        <summary><span data-ttu-id="6240b-394">返回表示接口（由当前 <see cref="T:System.Type" /> 所实现或继承）的筛选列表的 <see cref="T:System.Type" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-394">Returns an array of <see cref="T:System.Type" /> objects representing a filtered list of interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="6240b-395">一个表示当前 <see cref="T:System.Type" /> 实现或继承的接口的筛选列表的 <see cref="T:System.Type" /> 对象数组，或者类型 <see cref="T:System.Type" /> 的空数组（如果当前 <see cref="T:System.Type" /> 没有实现或继承匹配筛选器的接口）。</span><span class="sxs-lookup"><span data-stu-id="6240b-395">An array of <see cref="T:System.Type" /> objects representing a filtered list of the interfaces implemented or inherited by the current <see cref="T:System.Type" />, or an empty array of type <see cref="T:System.Type" /> if no interfaces matching the filter are implemented or inherited by the current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-396">此方法由派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="6240b-396">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="6240b-397"><xref:System.Reflection.Module.FilterTypeName?displayProperty=nameWithType>并<xref:System.Reflection.Module.FilterTypeNameIgnoreCase?displayProperty=nameWithType>委托提供<xref:System.Reflection.Module?displayProperty=nameWithType>还可以使用类，以替代<xref:System.Reflection.TypeFilter?displayProperty=nameWithType>委托。</span><span class="sxs-lookup"><span data-stu-id="6240b-397">The <xref:System.Reflection.Module.FilterTypeName?displayProperty=nameWithType> and <xref:System.Reflection.Module.FilterTypeNameIgnoreCase?displayProperty=nameWithType> delegates supplied by the <xref:System.Reflection.Module?displayProperty=nameWithType> class may also be used, in lieu of the <xref:System.Reflection.TypeFilter?displayProperty=nameWithType> delegate.</span></span>  
  
 <span data-ttu-id="6240b-398">所有此类实现的接口属于在搜索过程是否由基类或该类本身声明的。</span><span class="sxs-lookup"><span data-stu-id="6240b-398">All of the interfaces implemented by this class are considered during the search, whether declared by a base class or this class itself.</span></span>  
  
 <span data-ttu-id="6240b-399">此方法搜索的基的类层次结构，返回每个匹配的接口以及所有匹配的每个类实现这些接口实现的每个接口 （即，返回匹配的接口的传递闭包）。</span><span class="sxs-lookup"><span data-stu-id="6240b-399">This method searches the base class hierarchy, returning each of the matching interfaces each class implements as well as all the matching interfaces each of those interfaces implements (that is, the transitive closure of the matching interfaces is returned).</span></span> <span data-ttu-id="6240b-400">返回无重复的接口。</span><span class="sxs-lookup"><span data-stu-id="6240b-400">No duplicate interfaces are returned.</span></span>  
  
 <span data-ttu-id="6240b-401">如果当前<xref:System.Type>表示泛型类型或泛型方法定义中的类型参数<xref:System.Type.FindInterfaces%2A>搜索所有接口声明中的约束类型参数，并通过接口继承的所有接口约束中声明。</span><span class="sxs-lookup"><span data-stu-id="6240b-401">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, <xref:System.Type.FindInterfaces%2A> searches all the interfaces declared in the constraints on the type parameter, and all interfaces inherited through the interfaces declared in the constraints.</span></span> <span data-ttu-id="6240b-402">如果当前<xref:System.Type>表示泛型类型的类型参数<xref:System.Type.FindInterfaces%2A>是否它们符合约束搜索实现的类型的所有接口。</span><span class="sxs-lookup"><span data-stu-id="6240b-402">If the current <xref:System.Type> represents a type argument of a generic type, <xref:System.Type.FindInterfaces%2A> searches all the interfaces implemented by the type, whether or not they match constraints.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-403"><xref:System.Type.FindInterfaces%2A> 可以返回泛型接口，甚至在不是泛型方法的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-403"><xref:System.Type.FindInterfaces%2A> can return generic interfaces, even on types that are not generic.</span></span> <span data-ttu-id="6240b-404">例如，可以实现非泛型类型`IEnumerable<int>`(`IEnumerable(Of Integer)`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="6240b-404">For example, a nongeneric type might implement `IEnumerable<int>` (`IEnumerable(Of Integer)` in Visual Basic).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-405">下面的示例查找指定的接口实现或继承的指定类型，然后显示接口名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-405">The following example finds the specified interface implemented or inherited by the specified type, and then displays the interface names.</span></span>  
  
 [!code-cpp[Type_FindInterfaces#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FindInterfaces/CPP/type_findinterfaces.cpp#1)]
 [!code-csharp[Type_FindInterfaces#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FindInterfaces/CS/type_findinterfaces.cs#1)]
 [!code-vb[Type_FindInterfaces#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FindInterfaces/VB/type_findinterfaces.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-406"><paramref name="filter" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-406"><paramref name="filter" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="6240b-407">调用静态初始值设定项时引发了异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-407">A static initializer is invoked and throws an exception.</span></span></exception>
        <altmember cref="T:System.Reflection.Module" />
        <altmember cref="T:System.Reflection.TypeFilter" />
        <altmember cref="M:System.Type.GetInterface(System.String)" />
        <altmember cref="M:System.Type.GetInterfaces" />
      </Docs>
    </Member>
    <Member MemberName="FindMembers">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] FindMembers (System.Reflection.MemberTypes memberType, System.Reflection.BindingFlags bindingAttr, System.Reflection.MemberFilter filter, object filterCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] FindMembers(valuetype System.Reflection.MemberTypes memberType, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.MemberFilter filter, object filterCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function FindMembers (memberType As MemberTypes, bindingAttr As BindingFlags, filter As MemberFilter, filterCriteria As Object) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ FindMembers(System::Reflection::MemberTypes memberType, System::Reflection::BindingFlags bindingAttr, System::Reflection::MemberFilter ^ filter, System::Object ^ filterCriteria);" />
      <MemberSignature Language="F#" Value="abstract member FindMembers : System.Reflection.MemberTypes * System.Reflection.BindingFlags * System.Reflection.MemberFilter * obj -&gt; System.Reflection.MemberInfo[]&#xA;override this.FindMembers : System.Reflection.MemberTypes * System.Reflection.BindingFlags * System.Reflection.MemberFilter * obj -&gt; System.Reflection.MemberInfo[]" Usage="type.FindMembers (memberType, bindingAttr, filter, filterCriteria)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberType" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="filter" Type="System.Reflection.MemberFilter" />
        <Parameter Name="filterCriteria" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="memberType"><span data-ttu-id="6240b-408">指示要搜索的成员类型的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-408">An object that indicates the type of member to search for.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="6240b-409">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="6240b-409">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="6240b-410">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-410">-or-</span></span> 
<span data-ttu-id="6240b-411">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-411">Zero, to return <see langword="null" />.</span></span></param>
        <param name="filter"><span data-ttu-id="6240b-412">执行比较的委托，如果当前被检查的成员匹配 <see langword="true" />，则返回 <paramref name="filterCriteria" />；否则返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-412">The delegate that does the comparisons, returning <see langword="true" /> if the member currently being inspected matches the <paramref name="filterCriteria" /> and <see langword="false" /> otherwise.</span></span> <span data-ttu-id="6240b-413">可以使用该类提供的 <see langword="FilterAttribute" />、<see langword="FilterName" /> 和 <see langword="FilterNameIgnoreCase" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="6240b-413">You can use the <see langword="FilterAttribute" />, <see langword="FilterName" />, and <see langword="FilterNameIgnoreCase" /> delegates supplied by this class.</span></span> <span data-ttu-id="6240b-414">第一个委托使用 <see langword="FieldAttributes" />、<see langword="MethodAttributes" /> 和 <see langword="MethodImplAttributes" /> 的字段作为搜索判据，另两个委托使用 <see langword="String" /> 对象作为搜索判据。</span><span class="sxs-lookup"><span data-stu-id="6240b-414">The first uses the fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> as search criteria, and the other two delegates use <see langword="String" /> objects as the search criteria.</span></span></param>
        <param name="filterCriteria"><span data-ttu-id="6240b-415">确定成员是否在 <see langword="MemberInfo" /> 对象数组中返回的搜索判据。</span><span class="sxs-lookup"><span data-stu-id="6240b-415">The search criteria that determines whether a member is returned in the array of <see langword="MemberInfo" /> objects.</span></span>  
  
<span data-ttu-id="6240b-416"><see langword="FieldAttributes" />、<see langword="MethodAttributes" /> 和 <see langword="MethodImplAttributes" /> 的字段可以和该类提供的 <see langword="FilterAttribute" /> 委托一起使用。</span><span class="sxs-lookup"><span data-stu-id="6240b-416">The fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> can be used in conjunction with the <see langword="FilterAttribute" /> delegate supplied by this class.</span></span></param>
        <summary><span data-ttu-id="6240b-417">返回指定成员类型的 <see cref="T:System.Reflection.MemberInfo" /> 对象的筛选数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-417">Returns a filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</span></span></summary>
        <returns><span data-ttu-id="6240b-418">指定成员类型的 <see cref="T:System.Reflection.MemberInfo" /> 对象的筛选数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-418">A filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</span></span>  
  
<span data-ttu-id="6240b-419">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-419">-or-</span></span> 
<span data-ttu-id="6240b-420">如果当前 <see cref="T:System.Reflection.MemberInfo" /> 没有匹配筛选判据的 <see cref="T:System.Type" /> 类型成员，则为 <paramref name="memberType" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-420">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have members of type <paramref name="memberType" /> that match the filter criteria.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-421">此方法由派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="6240b-421">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="6240b-422">成员包括属性、 方法、 字段、 事件和等等。</span><span class="sxs-lookup"><span data-stu-id="6240b-422">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="6240b-423">以下<xref:System.Reflection.BindingFlags>的筛选器标志可以用于定义要在搜索中包括的成员：</span><span class="sxs-lookup"><span data-stu-id="6240b-423">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="6240b-424">您必须指定这两`BindingFlags.Instance`或`BindingFlags.Static`为了获取返回。</span><span class="sxs-lookup"><span data-stu-id="6240b-424">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6240b-425">指定`BindingFlags.Instance`若要在搜索中包括实例成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-425">Specify `BindingFlags.Instance` to include instance members in the search.</span></span>  
  
-   <span data-ttu-id="6240b-426">指定`BindingFlags.Static`若要在搜索中包括静态成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-426">Specify `BindingFlags.Static` to include static members in the search.</span></span>  
  
-   <span data-ttu-id="6240b-427">指定`BindingFlags.Public`若要在搜索中包括公共成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-427">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="6240b-428">指定`BindingFlags.NonPublic`若要在搜索中包括非公共成员 （即私有、 内部和受保护成员）。</span><span class="sxs-lookup"><span data-stu-id="6240b-428">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
 <span data-ttu-id="6240b-429">以下<xref:System.Reflection.BindingFlags>修饰符标志可以用于更改搜索的工作原理：</span><span class="sxs-lookup"><span data-stu-id="6240b-429">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6240b-430">`BindingFlags.DeclaredOnly` 若要搜索仅在声明的成员<xref:System.Type>，不只是继承的成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-430">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="6240b-431">有关更多信息，请参见<xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-431">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6240b-432">有效值<xref:System.Type.MemberType%2A>中定义<xref:System.Reflection.MemberInfo>。</span><span class="sxs-lookup"><span data-stu-id="6240b-432">Valid values for <xref:System.Type.MemberType%2A> are defined in <xref:System.Reflection.MemberInfo>.</span></span> <span data-ttu-id="6240b-433">如果没有找到任何此类成员，则返回空数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-433">If no such members are found, an empty array is returned.</span></span>  
  
 <span data-ttu-id="6240b-434">若要获取类初始值设定项 (.cctor) 使用此方法，必须指定<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="6240b-434">To get the class initializer (.cctor) using this method, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="6240b-435">此外可以获取类初始值设定项使用<xref:System.Type.TypeInitializer%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-435">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="6240b-436">如果当前<xref:System.Type>表示泛型类型或泛型方法的类型参数<xref:System.Type.FindMembers%2A>处理声明的类约束和接口约束类型参数的任何成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-436">If the current <xref:System.Type> represents a type parameter of a generic type or generic method, <xref:System.Type.FindMembers%2A> processes any members declared by the class constraint and the interface constraints of the type parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-437">下面的示例查找与指定的搜索条件匹配的类中的所有成员，然后显示匹配的成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-437">The following example finds all the members in a class that match the specified search criteria, and then displays the matched members.</span></span>  
  
 [!code-cpp[Type_FindMembers#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FindMembers/CPP/type_findmembers.cpp#1)]
 [!code-csharp[Type_FindMembers#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FindMembers/CS/type_findmembers.cs#1)]
 [!code-vb[Type_FindMembers#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FindMembers/VB/type_findmembers.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-438"><paramref name="filter" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-438"><paramref name="filter" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public abstract string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Type.FullName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ FullName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullName : string" Usage="System.Type.FullName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.FullName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-439">获取该类型的完全限定名称，包括其命名空间，但不包括程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-439">Gets the fully qualified name of the type, including its namespace but not its assembly.</span></span></summary>
        <value><span data-ttu-id="6240b-440">该类型的完全限定名，包括其命名空间，但不包括程序集；如果当前实例表示泛型类型参数、数组类型、指针类型或基于类型参数的 <see langword="null" /> 类型，或表示不属于泛型类型定义但包含无法解析的类型参数的泛型类型，则为 <see langword="byref" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-440">The fully qualified name of the type, including its namespace but not its assembly; or <see langword="null" /> if the current instance represents a generic type parameter, an array type, pointer type, or <see langword="byref" /> type based on a type parameter, or a generic type that is not a generic type definition but contains unresolved type parameters.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-441">例如，完全限定的名称<xref:System.String>类型是`System.String`。</span><span class="sxs-lookup"><span data-stu-id="6240b-441">For example, the fully qualified name of the <xref:System.String> type is `System.String`.</span></span> <span data-ttu-id="6240b-442">返回的程序集限定名称与之相比，<xref:System.Type.AssemblyQualifiedName%2A>属性，它的完整名称和完整的程序集名称组成。</span><span class="sxs-lookup"><span data-stu-id="6240b-442">Contrast this with the assembly-qualified name returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, which consists of the full name plus the full assembly name.</span></span>  
  
 <span data-ttu-id="6240b-443">如果当前类型表示封闭式泛型类型，返回字符串中的类型参数<xref:System.Type.FullName%2A>属性由其完整的程序集名称限定，即使本身的泛型类型的字符串表示形式不受其完全限定程序集名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-443">If the current type represents a closed generic type, the type arguments in the string returned by the <xref:System.Type.FullName%2A> property are qualified by their full assembly name, even though the string representation of the generic type itself is not qualified by its full assembly name.</span></span> <span data-ttu-id="6240b-444">下面的示例说明了用于表示泛型类型定义的类型，它表示已关闭的泛型类型的另一个的 FullName 属性中的差异。</span><span class="sxs-lookup"><span data-stu-id="6240b-444">The following example illustrates the difference in the FullName property for a type that represents generic type definition and one that represents a closed generic type.</span></span>  
  
 [!code-csharp[System.Type.FullName#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/fullnameex1.cs#2)]
 [!code-vb[System.Type.FullName#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/fullnameex1.vb#2)]  
  
 <span data-ttu-id="6240b-445">此属性返回`null`如果：</span><span class="sxs-lookup"><span data-stu-id="6240b-445">This property returns `null` if:</span></span>  
  
-   <span data-ttu-id="6240b-446">当前<xref:System.Type>对象表示泛型类型的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-446">The current <xref:System.Type> object represents a type parameter of a generic type.</span></span>  
  
     <span data-ttu-id="6240b-447">下面的示例检索的类型参数<xref:System.Nullable%601>类型，并尝试显示其<xref:System.Type.FullName%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-447">The following example retrieves the type parameter of the <xref:System.Nullable%601> type and attempts to display its <xref:System.Type.FullName%2A> property.</span></span>  
  
     [!code-csharp[System.Type.FullName#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/Fullname3.cs#3)]
     [!code-vb[System.Type.FullName#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/Fullname3.vb#3)]  
  
-   <span data-ttu-id="6240b-448">当前<xref:System.Type>对象表示数组类型、 指针类型，或`byref`基于泛型类型参数的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-448">The current <xref:System.Type> object represents an array type, a pointer  type, or a `byref` type that is based on a generic type parameter.</span></span>  
  
     <span data-ttu-id="6240b-449">下面的示例定义一个泛型类型`Generictype1<T>`，使用三种方法： `Display(T[])`，它会传递一个数组类型 T;`HandleT(T)`，它会传递 T 的对象; 和`ChangeValue(ref T)`，后者按引用传递的 T 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-449">The following example defines a generic type, `Generictype1<T>`, with three methods: `Display(T[])`, which is passed an array of type T; `HandleT(T)`, which is passed a T object; and `ChangeValue(ref T)`, which is passed a T object by reference.</span></span> <span data-ttu-id="6240b-450">由于 C# 和 Visual Basic 不允许我们中的指针作为定义 T`HandleT`方法中，我们必须调用<xref:System.Type.MakePointerType%2A>方法<xref:System.Type>对象，表示方法的参数类型来创建对泛型类型的指针。</span><span class="sxs-lookup"><span data-stu-id="6240b-450">Because C# and Visual Basic do not allow us to define T as a pointer in the `HandleT` method, we have to call the <xref:System.Type.MakePointerType%2A> method on the <xref:System.Type> object that represents the method's parameter type to create a pointer to a generic type.</span></span> <span data-ttu-id="6240b-451">该示例的输出显示在所有三种情况下，<xref:System.Type.FullName%2A>属性是`null`。</span><span class="sxs-lookup"><span data-stu-id="6240b-451">The output from the example shows that in all three cases, the <xref:System.Type.FullName%2A> property is `null`.</span></span>  
  
     [!code-csharp[System.Type.FullName#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/Fullname4.cs#4)]
     [!code-vb[System.Type.FullName#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/FullName4.vb#4)]  
  
-   <span data-ttu-id="6240b-452">当前类型包含尚未被特定类型替代的泛型类型参数 (即<xref:System.Type.ContainsGenericParameters%2A>属性返回`true`)，但类型不是泛型类型定义 (即<xref:System.Type.IsGenericTypeDefinition%2A>属性将返回 `false`</span><span class="sxs-lookup"><span data-stu-id="6240b-452">The current type contains generic type parameters that have not been replaced by specific types (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `true`), but the type is not a generic type definition (that is, the <xref:System.Type.IsGenericTypeDefinition%2A> property returns `false`</span></span>  
  
     <span data-ttu-id="6240b-453">在以下示例中，`Derived<T>`继承`Base<T>`。</span><span class="sxs-lookup"><span data-stu-id="6240b-453">In the following example, `Derived<T>` inherits from `Base<T>`.</span></span> <span data-ttu-id="6240b-454"><xref:System.Type.BaseType%2A>属性获取<xref:System.Type>表示的基类型的对象`Derived<T>`，并将其<xref:System.Type.FullName%2A>属性返回`null`。</span><span class="sxs-lookup"><span data-stu-id="6240b-454">The <xref:System.Type.BaseType%2A> property obtains the  <xref:System.Type> object that represents the base type of `Derived<T>`, and its <xref:System.Type.FullName%2A> property returns `null`.</span></span>  
  
     [!code-csharp[System.Type.FullName#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/Fullname5.cs#5)]
     [!code-vb[System.Type.FullName#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/FullName5.vb#5)]  
  
     <span data-ttu-id="6240b-455">若要获取<xref:System.Type.FullName%2A>不是`null`，可以使用<xref:System.Type.GetGenericTypeDefinition%2A>方法来获取泛型类型定义，如示例所示。</span><span class="sxs-lookup"><span data-stu-id="6240b-455">To get a <xref:System.Type.FullName%2A> that is not `null`, you can use the <xref:System.Type.GetGenericTypeDefinition%2A> method to get the generic type definition, as the example illustrates.</span></span>  
  
 <span data-ttu-id="6240b-456">此属性是只读的。</span><span class="sxs-lookup"><span data-stu-id="6240b-456">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-457">以下示例显示的指定类型的完整名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-457">The following example displays the full name of the specified type.</span></span>  
  
 [!code-cpp[TestFullName#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestFullName/CPP/TestFullName.cpp#1)]
 [!code-csharp[TestFullName#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestFullName/CS/testfullname.cs#1)]
 [!code-vb[TestFullName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestFullName/VB/testfullname.vb#1)]  
  
 <span data-ttu-id="6240b-458">下面的示例将返回的字符串进行比较<xref:System.Type.ToString%2A>方法和`Name`， <xref:System.Type.FullName%2A>，和<xref:System.Type.AssemblyQualifiedName%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-458">The following example compares the strings returned by the <xref:System.Type.ToString%2A> method and the `Name`, <xref:System.Type.FullName%2A>, and <xref:System.Type.AssemblyQualifiedName%2A> properties.</span></span>  
  
 [!code-csharp[System.Type.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.tostring/cs/fullname1.cs#1)]
 [!code-vb[System.Type.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.tostring/vb/fullname1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.Namespace" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md"><span data-ttu-id="6240b-459">指定完全限定的类型名称</span><span class="sxs-lookup"><span data-stu-id="6240b-459">Specifying Fully Qualified Type Names</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GenericParameterAttributes">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.GenericParameterAttributes GenericParameterAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.GenericParameterAttributes GenericParameterAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Type.GenericParameterAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GenericParameterAttributes As GenericParameterAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::GenericParameterAttributes GenericParameterAttributes { System::Reflection::GenericParameterAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.GenericParameterAttributes : System.Reflection.GenericParameterAttributes" Usage="System.Type.GenericParameterAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.GenericParameterAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-460">获取描述当前泛型类型参数的协变和特殊约束的 <see cref="T:System.Reflection.GenericParameterAttributes" /> 标志。</span><span class="sxs-lookup"><span data-stu-id="6240b-460">Gets a combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> flags that describe the covariance and special constraints of the current generic type parameter.</span></span></summary>
        <value><span data-ttu-id="6240b-461"><see cref="T:System.Reflection.GenericParameterAttributes" /> 值的按位组合，用于描述当前泛型类型参数的协变和特殊约束。</span><span class="sxs-lookup"><span data-stu-id="6240b-461">A bitwise combination of <see cref="T:System.Reflection.GenericParameterAttributes" /> values that describes the covariance and special constraints of the current generic type parameter.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-462">此属性的值包含描述当前泛型类型参数是协变的标志和描述任何特殊约束标志。</span><span class="sxs-lookup"><span data-stu-id="6240b-462">The value of this property contains flags that describe whether the current generic type parameter is covariant, and flags that describe any special constraints.</span></span> <span data-ttu-id="6240b-463">使用<xref:System.Reflection.GenericParameterAttributes.VarianceMask?displayProperty=nameWithType>要选择的协方差标志的值并使用<xref:System.Reflection.GenericParameterAttributes.SpecialConstraintMask?displayProperty=nameWithType>值来选择约束标志。</span><span class="sxs-lookup"><span data-stu-id="6240b-463">Use the <xref:System.Reflection.GenericParameterAttributes.VarianceMask?displayProperty=nameWithType> value to select the covariance flags, and use the <xref:System.Reflection.GenericParameterAttributes.SpecialConstraintMask?displayProperty=nameWithType> value to select the constraint flags.</span></span>  
  
 <span data-ttu-id="6240b-464">有关泛型反射中使用的术语的固定条件列表，请参阅 <xref:System.Type.IsGenericType%2A> 属性注解。</span><span class="sxs-lookup"><span data-stu-id="6240b-464">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-465">下面的代码示例定义一个泛型类型`Test`使用两个具有不同的约束的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-465">The following code example defines a generic type `Test` with two type parameters that have different constraints.</span></span> <span data-ttu-id="6240b-466">当程序执行时，使用检查约束<xref:System.Type.GenericParameterAttributes%2A>属性和<xref:System.Type.GetGenericParameterConstraints%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-466">When the program executes, the constraints are examined using the <xref:System.Type.GenericParameterAttributes%2A> property and the <xref:System.Type.GetGenericParameterConstraints%2A> method.</span></span>  
  
 [!code-cpp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CPP/source.cpp#1)]
 [!code-csharp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CS/source.cs#1)]
 [!code-vb[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6240b-467">当前 <see cref="T:System.Type" /> 对象不是泛型类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-467">The current <see cref="T:System.Type" /> object is not a generic type parameter.</span></span> <span data-ttu-id="6240b-468">也就是说，<see cref="P:System.Type.IsGenericParameter" /> 属性将返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-468">That is, the <see cref="P:System.Type.IsGenericParameter" /> property returns <see langword="false" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6240b-469">基类不支持调用的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-469">The invoked method is not supported in the base class.</span></span></exception>
        <altmember cref="M:System.Type.GetGenericParameterConstraints" />
        <altmember cref="P:System.Type.IsGenericParameter" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="6240b-470">反射类型和泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-470">Reflection and Generic Types</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="6240b-471">如何：使用反射检查和实例化泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-471">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GenericParameterPosition">
      <MemberSignature Language="C#" Value="public virtual int GenericParameterPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GenericParameterPosition" />
      <MemberSignature Language="DocId" Value="P:System.Type.GenericParameterPosition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GenericParameterPosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int GenericParameterPosition { int get(); };" />
      <MemberSignature Language="F#" Value="member this.GenericParameterPosition : int" Usage="System.Type.GenericParameterPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-472">当 <see cref="T:System.Type" /> 对象表示泛型类型或泛型方法的类型参数时，获取类型参数在声明它的泛型类型或方法的类型参数列表中的位置。</span><span class="sxs-lookup"><span data-stu-id="6240b-472">Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter, when the <see cref="T:System.Type" /> object represents a type parameter of a generic type or a generic method.</span></span></summary>
        <value><span data-ttu-id="6240b-473">类型参数在定义它的泛型类型或方法的类型参数列表中的位置。</span><span class="sxs-lookup"><span data-stu-id="6240b-473">The position of a type parameter in the type parameter list of the generic type or method that defines the parameter.</span></span> <span data-ttu-id="6240b-474">位置编号从 0 开始。</span><span class="sxs-lookup"><span data-stu-id="6240b-474">Position numbers begin at 0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-475"><xref:System.Type.GenericParameterPosition%2A>属性返回的类型参数的位置的泛型类型定义或泛型方法定义的参数列表中最初定义类型参数的位置。</span><span class="sxs-lookup"><span data-stu-id="6240b-475">The <xref:System.Type.GenericParameterPosition%2A> property returns the position of a type parameter in the parameter list of the generic type definition or generic method definition where the type parameter was originally defined.</span></span> <span data-ttu-id="6240b-476"><xref:System.Type.DeclaringType%2A>和<xref:System.Type.DeclaringMethod%2A>属性标识的泛型类型或方法定义：</span><span class="sxs-lookup"><span data-stu-id="6240b-476">The <xref:System.Type.DeclaringType%2A> and <xref:System.Type.DeclaringMethod%2A> properties identify the generic type or method definition:</span></span>  
  
-   <span data-ttu-id="6240b-477">如果<xref:System.Type.DeclaringMethod%2A>属性返回<xref:System.Reflection.MethodInfo>，则该<xref:System.Reflection.MethodInfo>表示泛型方法定义，并且当前<xref:System.Type>对象表示该泛型方法定义的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-477">If the <xref:System.Type.DeclaringMethod%2A> property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.</span></span>  
  
-   <span data-ttu-id="6240b-478">如果<xref:System.Type.DeclaringMethod%2A>属性返回`null`，然后<xref:System.Type.DeclaringType%2A>属性始终返回<xref:System.Type>对象，表示泛型类型定义，并且当前<xref:System.Type>对象都表示该泛型类型的类型参数定义。</span><span class="sxs-lookup"><span data-stu-id="6240b-478">If the <xref:System.Type.DeclaringMethod%2A> property returns `null`, then the <xref:System.Type.DeclaringType%2A> property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.</span></span>  
  
 <span data-ttu-id="6240b-479">若要提供正确的上下文的值的<xref:System.Type.GenericParameterPosition%2A>属性，它是必需的识别泛型类型或类型参数所属的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-479">To provide the correct context for the value of the <xref:System.Type.GenericParameterPosition%2A> property, it is necessary to identify the generic type or method a type parameter belongs to.</span></span> <span data-ttu-id="6240b-480">例如，考虑泛型方法的返回值`GetSomething`在下面的代码：</span><span class="sxs-lookup"><span data-stu-id="6240b-480">For example, consider the return value of the generic method `GetSomething` in the following code:</span></span>  
  
 [!code-cpp[System.Type.GenericParameterPosition#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.genericparameterposition/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.GenericParameterPosition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.genericparameterposition/cs/remarks.cs#1)]
 [!code-vb[System.Type.GenericParameterPosition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.genericparameterposition/vb/remarks.vb#1)]  
  
 <span data-ttu-id="6240b-481">返回的类型`GetSomething`取决于提供给类的类型实参`A`和`GetSomething`本身。</span><span class="sxs-lookup"><span data-stu-id="6240b-481">The type returned by `GetSomething` depends on the type arguments supplied to class `A` and to `GetSomething` itself.</span></span> <span data-ttu-id="6240b-482">你可以获取<xref:System.Reflection.MethodInfo>为`GetSomething`，并可以从中获取的返回类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-482">You can obtain a <xref:System.Reflection.MethodInfo> for `GetSomething`, and from that you can obtain the return type.</span></span> <span data-ttu-id="6240b-483">检查返回类型的类型参数时<xref:System.Type.GenericParameterPosition%2A>同时返回 0。</span><span class="sxs-lookup"><span data-stu-id="6240b-483">When you examine the type parameters of the return type, <xref:System.Type.GenericParameterPosition%2A> returns 0 for both.</span></span> <span data-ttu-id="6240b-484">位置`V`为 0，因为`V`是类的类型形参列表中的第一个类型参数`A`。</span><span class="sxs-lookup"><span data-stu-id="6240b-484">The position of `V` is 0 because `V` is the first type parameter in the type parameter list for class `A`.</span></span> <span data-ttu-id="6240b-485">位置`X`为 0，因为`X`是为的类型参数列表中的第一个类型参数`GetSomething`。</span><span class="sxs-lookup"><span data-stu-id="6240b-485">The position of `X` is 0 because `X` is the first type parameter in the type parameter list for `GetSomething`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-486">调用<xref:System.Type.GenericParameterPosition%2A>属性会导致异常，如果当前<xref:System.Type>不表示类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-486">Calling the <xref:System.Type.GenericParameterPosition%2A> property causes an exception if the current <xref:System.Type> does not represent a type parameter.</span></span> <span data-ttu-id="6240b-487">检查开放式构造类型的类型参数时，使用<xref:System.Type.IsGenericParameter%2A>告知类型参数以及该类型的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-487">When you examine the type arguments of an open constructed type, use the <xref:System.Type.IsGenericParameter%2A> property to tell which are type parameters and which are types.</span></span> <span data-ttu-id="6240b-488"><xref:System.Type.IsGenericParameter%2A>属性返回`true`为类型参数; 然后可以使用<xref:System.Type.GenericParameterPosition%2A>方法来获取其位置使用<xref:System.Type.DeclaringMethod%2A>和<xref:System.Type.DeclaringType%2A>属性以确定泛型方法或类型定义它的定义.</span><span class="sxs-lookup"><span data-stu-id="6240b-488">The <xref:System.Type.IsGenericParameter%2A> property returns `true` for a type parameter; you can then use the <xref:System.Type.GenericParameterPosition%2A> method to obtain its position and use the <xref:System.Type.DeclaringMethod%2A> and <xref:System.Type.DeclaringType%2A> properties to determine the generic method or type definition that defines it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-489">下面的示例定义两个类型参数的泛型类以及从第一个类派生的第二个泛型类。</span><span class="sxs-lookup"><span data-stu-id="6240b-489">The following example defines a generic class with two type parameters and defines a second generic class that derives from the first class.</span></span> <span data-ttu-id="6240b-490">派生的类的基类具有两个类型参数： 第一个是<xref:System.Int32>，第二项是派生类型的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-490">The derived class's base class has two type arguments: the first is <xref:System.Int32>, and the second is a type parameter of the derived type.</span></span> <span data-ttu-id="6240b-491">该示例显示有关这些泛型类的信息，包括位置报告的<xref:System.Type.GenericParameterPosition%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-491">The example displays information about these generic classes, including the positions reported by the <xref:System.Type.GenericParameterPosition%2A> property.</span></span>  
  
 [!code-cpp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CPP/source.cpp#1)]
 [!code-csharp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CS/source.cs#1)]
 [!code-vb[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6240b-492">当前的类型不表示类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-492">The current type does not represent a type parameter.</span></span> <span data-ttu-id="6240b-493">也就是说，<see cref="P:System.Type.IsGenericParameter" /> 返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-493">That is, <see cref="P:System.Type.IsGenericParameter" /> returns <see langword="false" />.</span></span></exception>
        <altmember cref="M:System.Type.MakeGenericType(System.Type[])" />
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericParameter" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="6240b-494">反射类型和泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-494">Reflection and Generic Types</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="6240b-495">如何：使用反射检查和实例化泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-495">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GenericTypeArguments">
      <MemberSignature Language="C#" Value="public virtual Type[] GenericTypeArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type[] GenericTypeArguments" />
      <MemberSignature Language="DocId" Value="P:System.Type.GenericTypeArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property GenericTypeArguments As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;Type ^&gt; ^ GenericTypeArguments { cli::array &lt;Type ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GenericTypeArguments : Type[]" Usage="System.Type.GenericTypeArguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-496">获取此类型泛型类型参数的数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-496">Gets an array of the generic type arguments for this type.</span></span></summary>
        <value><span data-ttu-id="6240b-497">此类型的泛型类型参数的数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-497">An array of the generic type arguments for this type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-498">此属性获取仅的泛型类型参数;也就是说，已为当前类型的泛型类型参数指定的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-498">This property gets only the generic type arguments; that is, the types that have been specified for the generic type parameters of the current type.</span></span> <span data-ttu-id="6240b-499">如果当前类型是泛型类型定义，此属性将返回空数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-499">If the current type is a generic type definition, this property returns an empty array.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-500">如果泛型方法中或在另一个泛型类型中使用泛型类型，则其泛型类型参数的一些可能的封闭方法或类型的泛型类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-500">If a generic type is used in a generic method or in another generic type, some of its generic type arguments might be generic type parameters of the enclosing method or type.</span></span>  
  
 <span data-ttu-id="6240b-501">若要获取表示泛型类型定义的类型的泛型类型参数，请使用<xref:System.Reflection.TypeInfo.GenericTypeParameters%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-501">To get the generic type parameters of a type that represents a generic type definition, use the <xref:System.Reflection.TypeInfo.GenericTypeParameters%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="6240b-502">若要获取<xref:System.Reflection.TypeInfo>对象的当前<xref:System.Type>对象，请使用<xref:System.Reflection.IntrospectionExtensions.GetTypeInfo%2A?displayProperty=nameWithType>扩展方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-502">To get a <xref:System.Reflection.TypeInfo> object for the current <xref:System.Type> object, use the <xref:System.Reflection.IntrospectionExtensions.GetTypeInfo%2A?displayProperty=nameWithType> extension method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArrayRank">
      <MemberSignature Language="C#" Value="public virtual int GetArrayRank ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetArrayRank() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetArrayRank" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetArrayRank () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetArrayRank();" />
      <MemberSignature Language="F#" Value="abstract member GetArrayRank : unit -&gt; int&#xA;override this.GetArrayRank : unit -&gt; int" Usage="type.GetArrayRank " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetArrayRank</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-503">获取数组中的维数。</span><span class="sxs-lookup"><span data-stu-id="6240b-503">Gets the number of dimensions in an array.</span></span></summary>
        <returns><span data-ttu-id="6240b-504">包含当前类型中维数的整数。</span><span class="sxs-lookup"><span data-stu-id="6240b-504">An integer that contains the number of dimensions in the current type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6240b-505">下面的示例显示在一个数组的维数。</span><span class="sxs-lookup"><span data-stu-id="6240b-505">The following example displays the number of dimensions in an array.</span></span>  
  
 [!code-cpp[Type_GetArrayRank#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetArrayRank/CPP/type_getarrayrank.cpp#1)]
 [!code-csharp[Type_GetArrayRank#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetArrayRank/CS/type_getarrayrank.cs#1)]
 [!code-vb[Type_GetArrayRank#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetArrayRank/VB/type_getarrayrank.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6240b-506">此方法的功能在基类中不受支持，并且必须改为在派生类中实现。</span><span class="sxs-lookup"><span data-stu-id="6240b-506">The functionality of this method is unsupported in the base class and must be implemented in a derived class instead.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-507">当前类型不是数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-507">The current type is not an array.</span></span></exception>
        <altmember cref="T:System.Array" />
        <altmember cref="P:System.Array.Rank" />
      </Docs>
    </Member>
    <Member MemberName="GetAttributeFlagsImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.TypeAttributes GetAttributeFlagsImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Reflection.TypeAttributes GetAttributeFlagsImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetAttributeFlagsImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetAttributeFlagsImpl () As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::TypeAttributes GetAttributeFlagsImpl();" />
      <MemberSignature Language="F#" Value="abstract member GetAttributeFlagsImpl : unit -&gt; System.Reflection.TypeAttributes" Usage="type.GetAttributeFlagsImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-508">当在派生类中重写时，实现 <see cref="P:System.Type.Attributes" /> 属性 (Property)，并获取指示与 <see cref="T:System.Type" /> 关联的属性 (Attribute) 的位屏蔽。</span><span class="sxs-lookup"><span data-stu-id="6240b-508">When overridden in a derived class, implements the <see cref="P:System.Type.Attributes" /> property and gets a bitmask indicating the attributes associated with the <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="6240b-509">表示 <see cref="T:System.Reflection.TypeAttributes" /> 的属性集的 <see cref="T:System.Type" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-509">A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.Attributes" />
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetConstructor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6240b-510">获取当前 <see cref="T:System.Type" /> 的特定构造函数。</span><span class="sxs-lookup"><span data-stu-id="6240b-510">Gets a specific constructor of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructor(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructor (types As Type()) As ConstructorInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::ConstructorInfo ^ GetConstructor(cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : Type[] -&gt; System.Reflection.ConstructorInfo&#xA;override this.GetConstructor : Type[] -&gt; System.Reflection.ConstructorInfo" Usage="type.GetConstructor types" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructor(System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="types"><span data-ttu-id="6240b-511">表示需要的构造函数的参数个数、顺序和类型的 <see cref="T:System.Type" /> 对象的数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-511">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the desired constructor.</span></span>  
  
<span data-ttu-id="6240b-512">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-512">-or-</span></span> 
<span data-ttu-id="6240b-513"><see cref="T:System.Type" /> 对象的空数组，用于获取不带参数的构造函数。</span><span class="sxs-lookup"><span data-stu-id="6240b-513">An empty array of <see cref="T:System.Type" /> objects, to get a constructor that takes no parameters.</span></span> <span data-ttu-id="6240b-514">这样的空数组由 <see langword="static" /> 字段 <see cref="F:System.Type.EmptyTypes" /> 提供。</span><span class="sxs-lookup"><span data-stu-id="6240b-514">Such an empty array is provided by the <see langword="static" /> field <see cref="F:System.Type.EmptyTypes" />.</span></span></param>
        <summary><span data-ttu-id="6240b-515">搜索其参数与指定数组中的类型匹配的公共实例构造函数。</span><span class="sxs-lookup"><span data-stu-id="6240b-515">Searches for a public instance constructor whose parameters match the types in the specified array.</span></span></summary>
        <returns><span data-ttu-id="6240b-516">为表示某个公共实例构造函数（该构造函数的参数与参数类型数组中的类型匹配）的对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-516">An object representing the public instance constructor whose parameters match the types in the parameter type array, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-517">此方法的重载查找公共实例构造函数并不能用于获取类初始值设定项 (.cctor)。</span><span class="sxs-lookup"><span data-stu-id="6240b-517">This method overload looks for public instance constructors and cannot be used to obtain a class initializer (.cctor).</span></span> <span data-ttu-id="6240b-518">若要获取类初始值设定项，请使用采用重载<xref:System.Reflection.BindingFlags>，并指定<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="6240b-518">To get a class initializer, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="6240b-519">此外可以获取类初始值设定项使用<xref:System.Type.TypeInitializer%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-519">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="6240b-520">如果请求的构造函数为非公共，此方法返回`null`。</span><span class="sxs-lookup"><span data-stu-id="6240b-520">If the requested constructor is non-public, this method returns `null`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-521">查找构造函数和方法时，不能省略参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-521">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="6240b-522">调用时，仅可以省略参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-522">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="6240b-523">如果当前<xref:System.Type>表示构造泛型类型，此方法返回<xref:System.Reflection.ConstructorInfo>具有类型参数替换为适当的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-523">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="6240b-524">如果当前<xref:System.Type>表示泛型类型或泛型方法定义中的类型参数，此方法始终返回`null`。</span><span class="sxs-lookup"><span data-stu-id="6240b-524">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-525">以下示例获取的类型`MyClass`，获取<xref:System.Reflection.ConstructorInfo>对象，并显示构造函数签名。</span><span class="sxs-lookup"><span data-stu-id="6240b-525">The following example obtains the type of `MyClass`, gets the <xref:System.Reflection.ConstructorInfo> object, and displays the constructor signature.</span></span>  
  
 [!code-cpp[Type_GetConstructor#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetConstructor/CPP/type_getconstructor.cpp#1)]
 [!code-csharp[Type_GetConstructor#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor/CS/type_getconstructor.cs#1)]
 [!code-vb[Type_GetConstructor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetConstructor/VB/type_getconstructor.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-526"><paramref name="types" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-526"><paramref name="types" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="6240b-527">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-527">-or-</span></span> 
<span data-ttu-id="6240b-528"><paramref name="types" /> 的其中一个元素为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-528">One of the elements in <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-529"><paramref name="types" /> 是多维的。</span><span class="sxs-lookup"><span data-stu-id="6240b-529"><paramref name="types" /> is multidimensional.</span></span></exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::ConstructorInfo ^ GetConstructor(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo&#xA;override this.GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="type.GetConstructor (bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="6240b-530">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="6240b-530">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="6240b-531">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-531">-or-</span></span> 
<span data-ttu-id="6240b-532">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-532">Zero, to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="6240b-533">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-533">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="6240b-534">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-534">-or-</span></span> 
<span data-ttu-id="6240b-535">要使用 <see langword="Nothing" /> 的空引用（在 Visual Basic 中为 <see cref="P:System.Type.DefaultBinder" />）。</span><span class="sxs-lookup"><span data-stu-id="6240b-535">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="types"><span data-ttu-id="6240b-536"><see cref="T:System.Type" /> 对象的数组，表示构造函数要获取的参数的个数、顺序和类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-536">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span></span>  
  
<span data-ttu-id="6240b-537">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-537">-or-</span></span> 
<span data-ttu-id="6240b-538">获取不使用参数的构造函数的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。</span><span class="sxs-lookup"><span data-stu-id="6240b-538">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span></span>  
  
<span data-ttu-id="6240b-539">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-539">-or-</span></span> 
 <span data-ttu-id="6240b-540"><see cref="F:System.Type.EmptyTypes" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-540"><see cref="F:System.Type.EmptyTypes" />.</span></span></param>
        <param name="modifiers"><span data-ttu-id="6240b-541"><see cref="T:System.Reflection.ParameterModifier" /> 对象的数组，表示与参数类型数组中的相应元素关联的特性。</span><span class="sxs-lookup"><span data-stu-id="6240b-541">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the parameter type array.</span></span> <span data-ttu-id="6240b-542">默认的联编程序不处理此参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-542">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="6240b-543">使用指定绑定约束搜索其参数与指定自变量类型和修饰符匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="6240b-543">Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="6240b-544">表示符合指定需求的构造函数的 <see cref="T:System.Reflection.ConstructorInfo" /> 对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-544">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-545">完全匹配项不存在，如果`binder`将尝试强制转换中指定的参数类型`types`才能选择匹配项的数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-545">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="6240b-546">如果`binder`无法选择匹配项，然后`null`返回。</span><span class="sxs-lookup"><span data-stu-id="6240b-546">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="6240b-547">以下<xref:System.Reflection.BindingFlags>的筛选器标志可用于定义要包括在搜索中的构造函数：</span><span class="sxs-lookup"><span data-stu-id="6240b-547">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="6240b-548">您必须指定这两`BindingFlags.Instance`或`BindingFlags.Static`为了获取返回。</span><span class="sxs-lookup"><span data-stu-id="6240b-548">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6240b-549">指定`BindingFlags.Public`若要在搜索中包括公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="6240b-549">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="6240b-550">指定`BindingFlags.NonPublic`若要在搜索中包括非公共构造函数 （即私有、 内部和受保护的构造函数）。</span><span class="sxs-lookup"><span data-stu-id="6240b-550">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span>  
  
 <span data-ttu-id="6240b-551">有关更多信息，请参见<xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-551">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6240b-552">若要获取类初始值设定项 (.cctor) 使用此方法的重载，必须指定<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="6240b-552">To get the class initializer (.cctor) using this method overload, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="6240b-553">此外可以获取类初始值设定项使用<xref:System.Type.TypeInitializer%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-553">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-554">查找构造函数和方法时，不能省略参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-554">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="6240b-555">调用时，仅可以省略参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-555">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="6240b-556">如果当前<xref:System.Type>表示构造泛型类型，此方法返回<xref:System.Reflection.ConstructorInfo>具有类型参数替换为适当的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-556">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="6240b-557">如果当前<xref:System.Type>表示泛型类型或泛型方法定义中的类型参数，此方法始终返回`null`。</span><span class="sxs-lookup"><span data-stu-id="6240b-557">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-558">以下程序获得的类型`MyClass1`类，获取<xref:System.Reflection.ConstructorInfo>对象匹配指定的绑定标志，并显示构造函数的签名。</span><span class="sxs-lookup"><span data-stu-id="6240b-558">The following program obtains the type of `MyClass1` class, gets the <xref:System.Reflection.ConstructorInfo> object matching the specified binding flags, and displays the signature of the constructor.</span></span>  
  
 [!code-cpp[Type_GetConstructor2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetConstructor2/CPP/type_getconstructor2.cpp#1)]
 [!code-csharp[Type_GetConstructor2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor2/CS/type_getconstructor2.cs#1)]
 [!code-vb[Type_GetConstructor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetConstructor2/VB/type_getconstructor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-559"><paramref name="types" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-559"><paramref name="types" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="6240b-560">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-560">-or-</span></span> 
<span data-ttu-id="6240b-561"><paramref name="types" /> 的其中一个元素为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-561">One of the elements in <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-562"><paramref name="types" /> 是多维的。</span><span class="sxs-lookup"><span data-stu-id="6240b-562"><paramref name="types" /> is multidimensional.</span></span>  
  
<span data-ttu-id="6240b-563">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-563">-or-</span></span> 
 <span data-ttu-id="6240b-564"><paramref name="modifiers" /> 是多维的。</span><span class="sxs-lookup"><span data-stu-id="6240b-564"><paramref name="modifiers" /> is multidimensional.</span></span>  
  
<span data-ttu-id="6240b-565">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-565">-or-</span></span> 
 <span data-ttu-id="6240b-566"><paramref name="types" /> 和 <paramref name="modifiers" /> 的长度不相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-566"><paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span></span></exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::ConstructorInfo ^ GetConstructor(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo&#xA;override this.GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="type.GetConstructor (bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="6240b-567">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="6240b-567">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="6240b-568">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-568">-or-</span></span> 
<span data-ttu-id="6240b-569">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-569">Zero, to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="6240b-570">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-570">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="6240b-571">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-571">-or-</span></span> 
<span data-ttu-id="6240b-572">要使用 <see langword="Nothing" /> 的空引用（在 Visual Basic 中为 <see cref="P:System.Type.DefaultBinder" />）。</span><span class="sxs-lookup"><span data-stu-id="6240b-572">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="callConvention"><span data-ttu-id="6240b-573">对象，用于指定要使用的一套规则，这些规则涉及自变量的顺序和布局、传递返回值的方式、用于自变量的寄存器和清理堆栈的方式。</span><span class="sxs-lookup"><span data-stu-id="6240b-573">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</span></span></param>
        <param name="types"><span data-ttu-id="6240b-574"><see cref="T:System.Type" /> 对象的数组，表示构造函数要获取的参数的个数、顺序和类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-574">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span></span>  
  
<span data-ttu-id="6240b-575">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-575">-or-</span></span> 
<span data-ttu-id="6240b-576">获取不使用参数的构造函数的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。</span><span class="sxs-lookup"><span data-stu-id="6240b-576">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span></span></param>
        <param name="modifiers"><span data-ttu-id="6240b-577"><see cref="T:System.Reflection.ParameterModifier" /> 对象的数组，表示与 <paramref name="types" /> 数组中的相应元素关联的特性。</span><span class="sxs-lookup"><span data-stu-id="6240b-577">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="6240b-578">默认的联编程序不处理此参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-578">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="6240b-579">用指定绑定约束和指定调用约定，搜索其参数与指定自变量类型及修饰符匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="6240b-579">Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span></span></summary>
        <returns><span data-ttu-id="6240b-580">表示符合指定需求的构造函数的对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-580">An object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-581">尽管默认联编程序不会处理<xref:System.Reflection.ParameterModifier>(`modifiers`参数)，您可以使用抽象<xref:System.Reflection.Binder?displayProperty=nameWithType>类以编写的自定义联编程序`modifiers`。</span><span class="sxs-lookup"><span data-stu-id="6240b-581">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="6240b-582">`ParameterModifier` 通过 COM 互操作调用时，才使用和处理由引用传递的参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-582">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="6240b-583">完全匹配项不存在，如果`binder`将尝试强制转换中指定的参数类型`types`才能选择匹配项的数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-583">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="6240b-584">如果`binder`无法选择匹配项，然后`null`返回。</span><span class="sxs-lookup"><span data-stu-id="6240b-584">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="6240b-585">以下<xref:System.Reflection.BindingFlags>的筛选器标志可用于定义要包括在搜索中的构造函数：</span><span class="sxs-lookup"><span data-stu-id="6240b-585">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="6240b-586">您必须指定这两`BindingFlags.Instance`或`BindingFlags.Static`为了获取返回。</span><span class="sxs-lookup"><span data-stu-id="6240b-586">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6240b-587">指定`BindingFlags.Public`若要在搜索中包括公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="6240b-587">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="6240b-588">指定`BindingFlags.NonPublic`若要在搜索中包括非公共构造函数 （即私有、 内部和受保护的构造函数）。</span><span class="sxs-lookup"><span data-stu-id="6240b-588">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span>  
  
 <span data-ttu-id="6240b-589">有关更多信息，请参见<xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-589">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6240b-590">若要获取类初始值设定项 (.cctor) 使用此方法，必须指定<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="6240b-590">To get the class initializer (.cctor) using this method, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="6240b-591">此外可以获取类初始值设定项使用<xref:System.Type.TypeInitializer%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-591">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="6240b-592">下表显示了返回通过基类的成员`Get`方法反射的类型上时。</span><span class="sxs-lookup"><span data-stu-id="6240b-592">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6240b-593">成员类型</span><span class="sxs-lookup"><span data-stu-id="6240b-593">Member Type</span></span>|<span data-ttu-id="6240b-594">Static</span><span class="sxs-lookup"><span data-stu-id="6240b-594">Static</span></span>|<span data-ttu-id="6240b-595">非静态</span><span class="sxs-lookup"><span data-stu-id="6240b-595">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6240b-596">构造函数</span><span class="sxs-lookup"><span data-stu-id="6240b-596">Constructor</span></span>|<span data-ttu-id="6240b-597">No</span><span class="sxs-lookup"><span data-stu-id="6240b-597">No</span></span>|<span data-ttu-id="6240b-598">No</span><span class="sxs-lookup"><span data-stu-id="6240b-598">No</span></span>|  
|<span data-ttu-id="6240b-599">字段</span><span class="sxs-lookup"><span data-stu-id="6240b-599">Field</span></span>|<span data-ttu-id="6240b-600">No</span><span class="sxs-lookup"><span data-stu-id="6240b-600">No</span></span>|<span data-ttu-id="6240b-601">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-601">Yes.</span></span> <span data-ttu-id="6240b-602">字段始终是按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-602">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-603">事件</span><span class="sxs-lookup"><span data-stu-id="6240b-603">Event</span></span>|<span data-ttu-id="6240b-604">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-604">Not applicable</span></span>|<span data-ttu-id="6240b-605">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-605">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-606">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-606">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-607">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-607">See note 2 below.</span></span>|  
|<span data-ttu-id="6240b-608">方法</span><span class="sxs-lookup"><span data-stu-id="6240b-608">Method</span></span>|<span data-ttu-id="6240b-609">No</span><span class="sxs-lookup"><span data-stu-id="6240b-609">No</span></span>|<span data-ttu-id="6240b-610">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-610">Yes.</span></span> <span data-ttu-id="6240b-611">方法 （包括虚拟和非虚拟） 可以隐藏通过名称或按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-611">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-612">嵌套的类型</span><span class="sxs-lookup"><span data-stu-id="6240b-612">Nested Type</span></span>|<span data-ttu-id="6240b-613">No</span><span class="sxs-lookup"><span data-stu-id="6240b-613">No</span></span>|<span data-ttu-id="6240b-614">No</span><span class="sxs-lookup"><span data-stu-id="6240b-614">No</span></span>|  
|<span data-ttu-id="6240b-615">Property</span><span class="sxs-lookup"><span data-stu-id="6240b-615">Property</span></span>|<span data-ttu-id="6240b-616">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-616">Not applicable</span></span>|<span data-ttu-id="6240b-617">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-617">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-618">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-618">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-619">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-619">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6240b-620">按名称和签名隐藏会考虑所有的签名，包括自定义修饰符，部分返回类型、 参数类型、 标记和非托管调用约定。</span><span class="sxs-lookup"><span data-stu-id="6240b-620">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6240b-621">这是二进制比较。</span><span class="sxs-lookup"><span data-stu-id="6240b-621">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6240b-622">为反射，属性和事件均由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-622">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-623">如果具有 get 和 set 访问器的属性中的基类，但派生的类具有一个 get 访问器，派生的类属性隐藏基类属性，并且你将无法再访问基类上的资源库。</span><span class="sxs-lookup"><span data-stu-id="6240b-623">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6240b-624">自定义特性不是通用类型系统的一部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-624">Custom attributes are not part of the common type system.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-625">查找构造函数和方法时，不能省略参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-625">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="6240b-626">调用时，仅可以省略参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-626">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="6240b-627">如果当前<xref:System.Type>表示构造泛型类型，此方法返回<xref:System.Reflection.ConstructorInfo>具有类型参数替换为适当的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-627">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="6240b-628">如果当前<xref:System.Type>表示泛型类型或泛型方法定义中的类型参数，此方法始终返回`null`。</span><span class="sxs-lookup"><span data-stu-id="6240b-628">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-629">以下示例获取的类型`MyClass1`，获取<xref:System.Reflection.ConstructorInfo>匹配指定的绑定标志，并显示构造函数签名的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-629">The following example obtains the type of `MyClass1`, gets the <xref:System.Reflection.ConstructorInfo> object that matches the specified binding flags, and displays the constructor signature.</span></span>  
  
 [!code-cpp[Type_GetConstructor3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetConstructor3/CPP/type_getconstructor3.cpp#1)]
 [!code-csharp[Type_GetConstructor3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor3/CS/type_getconstructor3.cs#1)]
 [!code-vb[Type_GetConstructor3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetConstructor3/VB/type_getconstructor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-630"><paramref name="types" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-630"><paramref name="types" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="6240b-631">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-631">-or-</span></span> 
<span data-ttu-id="6240b-632"><paramref name="types" /> 的其中一个元素为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-632">One of the elements in <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-633"><paramref name="types" /> 是多维的。</span><span class="sxs-lookup"><span data-stu-id="6240b-633"><paramref name="types" /> is multidimensional.</span></span>  
  
<span data-ttu-id="6240b-634">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-634">-or-</span></span> 
 <span data-ttu-id="6240b-635"><paramref name="modifiers" /> 是多维的。</span><span class="sxs-lookup"><span data-stu-id="6240b-635"><paramref name="modifiers" /> is multidimensional.</span></span>  
  
<span data-ttu-id="6240b-636">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-636">-or-</span></span> 
 <span data-ttu-id="6240b-637"><paramref name="types" /> 和 <paramref name="modifiers" /> 的长度不相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-637"><paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span></span></exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructorImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructorImpl(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::ConstructorInfo ^ GetConstructorImpl(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructorImpl : System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="type.GetConstructorImpl (bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="6240b-638">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="6240b-638">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="6240b-639">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-639">-or-</span></span> 
<span data-ttu-id="6240b-640">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-640">Zero, to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="6240b-641">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-641">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="6240b-642">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-642">-or-</span></span> 
<span data-ttu-id="6240b-643">要使用 <see langword="Nothing" /> 的空引用（在 Visual Basic 中为 <see cref="P:System.Type.DefaultBinder" />）。</span><span class="sxs-lookup"><span data-stu-id="6240b-643">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="callConvention"><span data-ttu-id="6240b-644">对象，用于指定要使用的一套规则，这些规则涉及自变量的顺序和布局、传递返回值的方式、用于自变量的寄存器和清理堆栈的方式。</span><span class="sxs-lookup"><span data-stu-id="6240b-644">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</span></span></param>
        <param name="types"><span data-ttu-id="6240b-645"><see cref="T:System.Type" /> 对象的数组，表示构造函数要获取的参数的个数、顺序和类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-645">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span></span>  
  
<span data-ttu-id="6240b-646">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-646">-or-</span></span> 
<span data-ttu-id="6240b-647">获取不使用参数的构造函数的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。</span><span class="sxs-lookup"><span data-stu-id="6240b-647">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span></span></param>
        <param name="modifiers"><span data-ttu-id="6240b-648"><see cref="T:System.Reflection.ParameterModifier" /> 对象的数组，表示与 <paramref name="types" /> 数组中的相应元素关联的特性。</span><span class="sxs-lookup"><span data-stu-id="6240b-648">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="6240b-649">默认的联编程序不处理此参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-649">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="6240b-650">当在派生类中重写时，使用指定的绑定约束和指定的调用约定搜索其参数与指定的自变量类型和修饰符匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="6240b-650">When overridden in a derived class, searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span></span></summary>
        <returns><span data-ttu-id="6240b-651">表示符合指定需求的构造函数的 <see cref="T:System.Reflection.ConstructorInfo" /> 对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-651">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-652">尽管默认联编程序不会处理<xref:System.Reflection.ParameterModifier>(`modifiers`参数)，您可以使用抽象<xref:System.Reflection.Binder?displayProperty=nameWithType>类以编写的自定义联编程序`modifiers`。</span><span class="sxs-lookup"><span data-stu-id="6240b-652">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="6240b-653">`ParameterModifier` 通过 COM 互操作调用时，才使用和处理由引用传递的参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-653">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="6240b-654">完全匹配项不存在，如果`binder`将尝试强制转换中指定的参数类型`types`才能选择匹配项的数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-654">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="6240b-655">如果`binder`无法选择匹配项，然后`null`返回。</span><span class="sxs-lookup"><span data-stu-id="6240b-655">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="6240b-656">以下<xref:System.Reflection.BindingFlags>的筛选器标志可用于定义要包括在搜索中的构造函数：</span><span class="sxs-lookup"><span data-stu-id="6240b-656">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="6240b-657">您必须指定这两`BindingFlags.Instance`或`BindingFlags.Static`为了获取返回。</span><span class="sxs-lookup"><span data-stu-id="6240b-657">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6240b-658">指定`BindingFlags.Public`若要在搜索中包括公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="6240b-658">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="6240b-659">指定`BindingFlags.NonPublic`若要在搜索中包括非公共构造函数 （即私有、 内部和受保护的构造函数）。</span><span class="sxs-lookup"><span data-stu-id="6240b-659">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span>  
  
 <span data-ttu-id="6240b-660">有关更多信息，请参见<xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-660">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6240b-661">此方法实现 <xref:System.Type.GetConstructor%2A>。</span><span class="sxs-lookup"><span data-stu-id="6240b-661">This method implements <xref:System.Type.GetConstructor%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-662"><paramref name="types" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-662"><paramref name="types" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="6240b-663">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-663">-or-</span></span> 
<span data-ttu-id="6240b-664"><paramref name="types" /> 的其中一个元素为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-664">One of the elements in <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-665"><paramref name="types" /> 是多维的。</span><span class="sxs-lookup"><span data-stu-id="6240b-665"><paramref name="types" /> is multidimensional.</span></span>  
  
<span data-ttu-id="6240b-666">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-666">-or-</span></span> 
 <span data-ttu-id="6240b-667"><paramref name="modifiers" /> 是多维的。</span><span class="sxs-lookup"><span data-stu-id="6240b-667"><paramref name="modifiers" /> is multidimensional.</span></span>  
  
<span data-ttu-id="6240b-668">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-668">-or-</span></span> 
 <span data-ttu-id="6240b-669"><paramref name="types" /> 和 <paramref name="modifiers" /> 的长度不相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-669"><paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6240b-670">当前的类型是 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 或 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-670">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span></span></exception>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetConstructors" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetConstructors">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6240b-671">获取当前 <see cref="T:System.Type" /> 的构造函数。</span><span class="sxs-lookup"><span data-stu-id="6240b-671">Gets the constructors of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo[] GetConstructors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo[] GetConstructors() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructors" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructors () As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors();" />
      <MemberSignature Language="F#" Value="abstract member GetConstructors : unit -&gt; System.Reflection.ConstructorInfo[]&#xA;override this.GetConstructors : unit -&gt; System.Reflection.ConstructorInfo[]" Usage="type.GetConstructors " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructors</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-672">返回为当前 <see cref="T:System.Type" /> 定义的所有公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="6240b-672">Returns all the public constructors defined for the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="6240b-673"><see cref="T:System.Reflection.ConstructorInfo" /> 对象的数组，表示当前 <see cref="T:System.Type" /> 定义的所有公共实例构造函数，但不包括类型初始值设定项（静态构造函数）。</span><span class="sxs-lookup"><span data-stu-id="6240b-673">An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all the public instance constructors defined for the current <see cref="T:System.Type" />, but not including the type initializer (static constructor).</span></span> <span data-ttu-id="6240b-674">如果没有为当前 <see cref="T:System.Type" /> 定义公共实例构造函数，或者当前 <see cref="T:System.Type" /> 表示泛型类型或泛型方法的定义中的类型参数，则返回 <see cref="T:System.Reflection.ConstructorInfo" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-674">If no public instance constructors are defined for the current <see cref="T:System.Type" />, or if the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or generic method, an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-675"><xref:System.Type.GetConstructors%2A>方法不按特定顺序，如按声明顺序返回构造函数。</span><span class="sxs-lookup"><span data-stu-id="6240b-675">The <xref:System.Type.GetConstructors%2A> method does not return constructors in a particular order, such as declaration order.</span></span> <span data-ttu-id="6240b-676">你的代码一定不能依赖于构造函数的返回的顺序因为顺序而变化。</span><span class="sxs-lookup"><span data-stu-id="6240b-676">Your code must not depend on the order in which constructors are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6240b-677">下表显示了返回通过基类的成员`Get`方法反射的类型上时。</span><span class="sxs-lookup"><span data-stu-id="6240b-677">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6240b-678">成员类型</span><span class="sxs-lookup"><span data-stu-id="6240b-678">Member Type</span></span>|<span data-ttu-id="6240b-679">Static</span><span class="sxs-lookup"><span data-stu-id="6240b-679">Static</span></span>|<span data-ttu-id="6240b-680">非静态</span><span class="sxs-lookup"><span data-stu-id="6240b-680">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6240b-681">构造函数</span><span class="sxs-lookup"><span data-stu-id="6240b-681">Constructor</span></span>|<span data-ttu-id="6240b-682">No</span><span class="sxs-lookup"><span data-stu-id="6240b-682">No</span></span>|<span data-ttu-id="6240b-683">No</span><span class="sxs-lookup"><span data-stu-id="6240b-683">No</span></span>|  
|<span data-ttu-id="6240b-684">字段</span><span class="sxs-lookup"><span data-stu-id="6240b-684">Field</span></span>|<span data-ttu-id="6240b-685">No</span><span class="sxs-lookup"><span data-stu-id="6240b-685">No</span></span>|<span data-ttu-id="6240b-686">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-686">Yes.</span></span> <span data-ttu-id="6240b-687">字段始终是按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-687">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-688">事件</span><span class="sxs-lookup"><span data-stu-id="6240b-688">Event</span></span>|<span data-ttu-id="6240b-689">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-689">Not applicable</span></span>|<span data-ttu-id="6240b-690">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-690">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-691">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-691">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-692">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-692">See note 2 below.</span></span>|  
|<span data-ttu-id="6240b-693">方法</span><span class="sxs-lookup"><span data-stu-id="6240b-693">Method</span></span>|<span data-ttu-id="6240b-694">No</span><span class="sxs-lookup"><span data-stu-id="6240b-694">No</span></span>|<span data-ttu-id="6240b-695">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-695">Yes.</span></span> <span data-ttu-id="6240b-696">方法 （包括虚拟和非虚拟） 可以隐藏通过名称或按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-696">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-697">嵌套的类型</span><span class="sxs-lookup"><span data-stu-id="6240b-697">Nested Type</span></span>|<span data-ttu-id="6240b-698">No</span><span class="sxs-lookup"><span data-stu-id="6240b-698">No</span></span>|<span data-ttu-id="6240b-699">No</span><span class="sxs-lookup"><span data-stu-id="6240b-699">No</span></span>|  
|<span data-ttu-id="6240b-700">Property</span><span class="sxs-lookup"><span data-stu-id="6240b-700">Property</span></span>|<span data-ttu-id="6240b-701">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-701">Not applicable</span></span>|<span data-ttu-id="6240b-702">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-702">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-703">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-703">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-704">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-704">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6240b-705">按名称和签名隐藏会考虑所有的签名，包括自定义修饰符，部分返回类型、 参数类型、 标记和非托管调用约定。</span><span class="sxs-lookup"><span data-stu-id="6240b-705">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6240b-706">这是二进制比较。</span><span class="sxs-lookup"><span data-stu-id="6240b-706">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6240b-707">为反射，属性和事件均由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-707">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-708">如果具有 get 和 set 访问器的属性中的基类，但派生的类具有一个 get 访问器，派生的类属性隐藏基类属性，并且你将无法再访问基类上的资源库。</span><span class="sxs-lookup"><span data-stu-id="6240b-708">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6240b-709">自定义特性不是通用类型系统的一部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-709">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="6240b-710">调用此方法的重载<xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29>方法重载中，使用<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="6240b-710">This method overload calls the <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> method overload, with <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="6240b-711">它将找不到类初始值设定项 (.cctor)。</span><span class="sxs-lookup"><span data-stu-id="6240b-711">It will not find class initializers (.cctor).</span></span> <span data-ttu-id="6240b-712">若要查找类初始值设定项，请使用采用重载<xref:System.Reflection.BindingFlags>，并指定<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="6240b-712">To find class initializers, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="6240b-713">此外可以获取类初始值设定项使用<xref:System.Type.TypeInitializer%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-713">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="6240b-714">如果当前<xref:System.Type>表示构造泛型类型，此方法返回<xref:System.Reflection.ConstructorInfo>替换为适当的类型参数的类型参数的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-714">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="6240b-715">例如，如果类`C<T>`具有一个构造函数`C(T t1)`(`Sub New(ByVal t1 As T)`在 Visual Basic 中)，则调用<xref:System.Type.GetConstructors%2A>上`C<int>`返回<xref:System.Reflection.ConstructorInfo>表示`C(int t1)`C# 中 (`Sub New(ByVal t1 As Integer)`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="6240b-715">For example, if class `C<T>` has a constructor `C(T t1)` (`Sub New(ByVal t1 As T)` in Visual Basic), calling <xref:System.Type.GetConstructors%2A> on `C<int>` returns a <xref:System.Reflection.ConstructorInfo> that represents `C(int t1)` in C# (`Sub New(ByVal t1 As Integer)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="6240b-716">如果当前<xref:System.Type>表示泛型类型参数，<xref:System.Type.GetConstructors%2A>方法返回一个空数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-716">If the current <xref:System.Type> represents a generic type parameter, the <xref:System.Type.GetConstructors%2A> method returns an empty array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-717">此示例中显示的输出<xref:System.Type.GetConstructors%2A>从类具有两个实例构造函数和一个静态构造函数重载。</span><span class="sxs-lookup"><span data-stu-id="6240b-717">This example shows the output of the <xref:System.Type.GetConstructors%2A> overload from a class that has two instance constructors and one static constructor.</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source1.cpp#1)]
 [!code-csharp[Classic Type.GetConstructors Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source1.cs#1)]
 [!code-vb[Classic Type.GetConstructors Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source1.vb#1)]  
  
 <span data-ttu-id="6240b-718">此代码的输出为：</span><span class="sxs-lookup"><span data-stu-id="6240b-718">The output of this code is:</span></span>  
  
 <span data-ttu-id="6240b-719">2</span><span class="sxs-lookup"><span data-stu-id="6240b-719">2</span></span>  
  
 <span data-ttu-id="6240b-720">False</span><span class="sxs-lookup"><span data-stu-id="6240b-720">False</span></span>  
  
 <span data-ttu-id="6240b-721">False</span><span class="sxs-lookup"><span data-stu-id="6240b-721">False</span></span>  
  
 <span data-ttu-id="6240b-722">因为<xref:System.Type.GetConstructors>重载仅使用<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>并<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>，静态构造函数都不计入`for`表达式的计算，也不`IsStatic`。</span><span class="sxs-lookup"><span data-stu-id="6240b-722">Because the <xref:System.Type.GetConstructors> overload uses only <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, the static constructor is neither counted by the `for` expression nor evaluated by `IsStatic`.</span></span>  
  
 <span data-ttu-id="6240b-723">若要查找静态构造函数，请使用<xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29>重载，并将传递组合 (逻辑`OR`) 的<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>， <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>， <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>， <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>，下面的代码示例中所示：</span><span class="sxs-lookup"><span data-stu-id="6240b-723">To find static constructors, use the <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> overload, and pass the combination (logical `OR`) of <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, as shown in the following code example:</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Type.GetConstructors Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source2.cs#2)]
 [!code-vb[Classic Type.GetConstructors Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="6240b-724">现在的输出为：</span><span class="sxs-lookup"><span data-stu-id="6240b-724">Now the output is:</span></span>  
  
 <span data-ttu-id="6240b-725">3</span><span class="sxs-lookup"><span data-stu-id="6240b-725">3</span></span>  
  
 <span data-ttu-id="6240b-726">False</span><span class="sxs-lookup"><span data-stu-id="6240b-726">False</span></span>  
  
 <span data-ttu-id="6240b-727">True</span><span class="sxs-lookup"><span data-stu-id="6240b-727">True</span></span>  
  
 <span data-ttu-id="6240b-728">False</span><span class="sxs-lookup"><span data-stu-id="6240b-728">False</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo[] GetConstructors(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetConstructors(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetConstructors (bindingAttr As BindingFlags) As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructors : System.Reflection.BindingFlags -&gt; System.Reflection.ConstructorInfo[]" Usage="type.GetConstructors bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetConstructors(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="6240b-729">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="6240b-729">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="6240b-730">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-730">-or-</span></span> 
<span data-ttu-id="6240b-731">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-731">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="6240b-732">当在派生类中重写时，使用指定 <see cref="T:System.Type" /> 搜索为当前 <see langword="BindingFlags" /> 定义的构造函数。</span><span class="sxs-lookup"><span data-stu-id="6240b-732">When overridden in a derived class, searches for the constructors defined for the current <see cref="T:System.Type" />, using the specified <see langword="BindingFlags" />.</span></span></summary>
        <returns><span data-ttu-id="6240b-733">表示为当前 <see cref="T:System.Reflection.ConstructorInfo" /> 定义的匹配指定绑定约束的所有构造函数的 <see cref="T:System.Type" /> 对象数组，包括类型初始值设定项（如果定义的话）。</span><span class="sxs-lookup"><span data-stu-id="6240b-733">An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all constructors defined for the current <see cref="T:System.Type" /> that match the specified binding constraints, including the type initializer if it is defined.</span></span> <span data-ttu-id="6240b-734">如果当前 <see cref="T:System.Reflection.ConstructorInfo" /> 没有定义构造函数，或者定义的构造函数都不符合绑定约束，或者当前 <see cref="T:System.Type" /> 表示泛型类型或泛型方法定义的类型参数，则返回 <see cref="T:System.Type" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-734">Returns an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> if no constructors are defined for the current <see cref="T:System.Type" />, if none of the defined constructors match the binding constraints, or if the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or generic method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-735"><xref:System.Type.GetConstructors%2A>方法不按特定顺序，如按声明顺序返回构造函数。</span><span class="sxs-lookup"><span data-stu-id="6240b-735">The <xref:System.Type.GetConstructors%2A> method does not return constructors in a particular order, such as declaration order.</span></span> <span data-ttu-id="6240b-736">你的代码一定不能依赖于构造函数的返回的顺序因为顺序而变化。</span><span class="sxs-lookup"><span data-stu-id="6240b-736">Your code must not depend on the order in which constructors are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6240b-737">`bindingAttr` 可用于指定是否只返回公共构造函数或公共和非公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="6240b-737">`bindingAttr` can be used to specify whether to return only public constructors or both public and non-public constructors.</span></span>  
  
 <span data-ttu-id="6240b-738">完全匹配项不存在，如果`binder`将尝试强制转换中指定的参数类型`types`才能选择匹配项的数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-738">If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match.</span></span> <span data-ttu-id="6240b-739">如果`binder`无法选择匹配项，然后`null`返回。</span><span class="sxs-lookup"><span data-stu-id="6240b-739">If the `binder` is unable to select a match, then `null` is returned.</span></span>  
  
 <span data-ttu-id="6240b-740">以下<xref:System.Reflection.BindingFlags>的筛选器标志可用于定义要包括在搜索中的构造函数：</span><span class="sxs-lookup"><span data-stu-id="6240b-740">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:</span></span>  
  
-   <span data-ttu-id="6240b-741">您必须指定这两`BindingFlags.Instance`或`BindingFlags.Static`为了获取返回。</span><span class="sxs-lookup"><span data-stu-id="6240b-741">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6240b-742">指定`BindingFlags.Public`若要在搜索中包括公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="6240b-742">Specify `BindingFlags.Public` to include public constructors in the search.</span></span>  
  
-   <span data-ttu-id="6240b-743">指定`BindingFlags.NonPublic`若要在搜索中包括非公共构造函数 （即私有、 内部和受保护的构造函数）。</span><span class="sxs-lookup"><span data-stu-id="6240b-743">Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.</span></span> <span data-ttu-id="6240b-744">基类的构造函数不会返回。</span><span class="sxs-lookup"><span data-stu-id="6240b-744">Constructors of base classes are not returned.</span></span>  
  
 <span data-ttu-id="6240b-745">有关更多信息，请参见<xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-745">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6240b-746">若要获取类初始值设定项 (.cctor) 使用此方法的重载，必须指定<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="6240b-746">To get the class initializer (.cctor) using this method overload, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="6240b-747">此外可以获取类初始值设定项使用<xref:System.Type.TypeInitializer%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-747">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="6240b-748">如果当前<xref:System.Type>表示构造泛型类型，此方法返回<xref:System.Reflection.ConstructorInfo>替换为适当的类型参数的类型参数的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-748">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="6240b-749">例如，如果类`C<T>`具有一个构造函数`C(T t1)`(`Sub New(ByVal t1 As T)`在 Visual Basic 中)，则调用<xref:System.Type.GetConstructors%2A>上`C<int>`返回<xref:System.Reflection.ConstructorInfo>表示`C(int t1)`C# 中 (`Sub New(ByVal t1 As Integer)`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="6240b-749">For example, if class `C<T>` has a constructor `C(T t1)` (`Sub New(ByVal t1 As T)` in Visual Basic), calling <xref:System.Type.GetConstructors%2A> on `C<int>` returns a <xref:System.Reflection.ConstructorInfo> that represents `C(int t1)` in C# (`Sub New(ByVal t1 As Integer)` in Visual Basic).</span></span>  
  
 <span data-ttu-id="6240b-750">如果当前<xref:System.Type>表示泛型类型参数，<xref:System.Type.GetConstructors%2A>方法返回一个空数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-750">If the current <xref:System.Type> represents a generic type parameter, the <xref:System.Type.GetConstructors%2A> method returns an empty array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-751">此示例中显示的输出<xref:System.Type.GetConstructors>从类具有两个实例构造函数和一个静态构造函数重载。</span><span class="sxs-lookup"><span data-stu-id="6240b-751">This example shows the output of the <xref:System.Type.GetConstructors> overload from a class that has two instance constructors and one static constructor.</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source1.cpp#1)]
 [!code-csharp[Classic Type.GetConstructors Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source1.cs#1)]
 [!code-vb[Classic Type.GetConstructors Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source1.vb#1)]  
  
 <span data-ttu-id="6240b-752">此代码的输出为：</span><span class="sxs-lookup"><span data-stu-id="6240b-752">The output of this code is:</span></span>  
  
 <span data-ttu-id="6240b-753">2</span><span class="sxs-lookup"><span data-stu-id="6240b-753">2</span></span>  
  
 <span data-ttu-id="6240b-754">False</span><span class="sxs-lookup"><span data-stu-id="6240b-754">False</span></span>  
  
 <span data-ttu-id="6240b-755">False</span><span class="sxs-lookup"><span data-stu-id="6240b-755">False</span></span>  
  
 <span data-ttu-id="6240b-756">因为<xref:System.Type.GetConstructors%2A>重载仅使用<xref:System.Reflection.BindingFlags.Public>并<xref:System.Reflection.BindingFlags.Instance>，静态构造函数都不计入`for`表达式的计算，也不`IsStatic`。</span><span class="sxs-lookup"><span data-stu-id="6240b-756">Because the <xref:System.Type.GetConstructors%2A> overload uses only <xref:System.Reflection.BindingFlags.Public> and <xref:System.Reflection.BindingFlags.Instance>, the static constructor is neither counted by the `for` expression nor evaluated by `IsStatic`.</span></span>  
  
 <span data-ttu-id="6240b-757">若要查找静态构造函数，请使用<xref:System.Type.GetConstructors%2A>重载，并将其传递的 （逻辑或） 组合<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>， <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>， <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>， <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>，下面的代码示例中所示：</span><span class="sxs-lookup"><span data-stu-id="6240b-757">To find static constructors, use the <xref:System.Type.GetConstructors%2A> overload, and pass it the combination (logical OR) of <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>, <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>, as shown in the following code example:</span></span>  
  
 [!code-cpp[Classic Type.GetConstructors Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic Type.GetConstructors Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source2.cs#2)]
 [!code-vb[Classic Type.GetConstructors Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source2.vb#2)]  
  
 <span data-ttu-id="6240b-758">现在的输出为：</span><span class="sxs-lookup"><span data-stu-id="6240b-758">Now the output is:</span></span>  
  
 <span data-ttu-id="6240b-759">3</span><span class="sxs-lookup"><span data-stu-id="6240b-759">3</span></span>  
  
 <span data-ttu-id="6240b-760">False</span><span class="sxs-lookup"><span data-stu-id="6240b-760">False</span></span>  
  
 <span data-ttu-id="6240b-761">True</span><span class="sxs-lookup"><span data-stu-id="6240b-761">True</span></span>  
  
 <span data-ttu-id="6240b-762">False</span><span class="sxs-lookup"><span data-stu-id="6240b-762">False</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetDefaultMembers">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] GetDefaultMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetDefaultMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetDefaultMembers" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDefaultMembers () As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetDefaultMembers();" />
      <MemberSignature Language="F#" Value="abstract member GetDefaultMembers : unit -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetDefaultMembers : unit -&gt; System.Reflection.MemberInfo[]" Usage="type.GetDefaultMembers " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetDefaultMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-763">搜索为设置了 <see cref="T:System.Type" /> 的当前 <see cref="T:System.Reflection.DefaultMemberAttribute" /> 定义的成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-763">Searches for the members defined for the current <see cref="T:System.Type" /> whose <see cref="T:System.Reflection.DefaultMemberAttribute" /> is set.</span></span></summary>
        <returns><span data-ttu-id="6240b-764">表示当前 <see cref="T:System.Reflection.MemberInfo" /> 的所有默认成员的 <see cref="T:System.Type" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-764">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all default members of the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="6240b-765">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-765">-or-</span></span> 
<span data-ttu-id="6240b-766">如果当前 <see cref="T:System.Reflection.MemberInfo" /> 没有默认成员，则为 <see cref="T:System.Type" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-766">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have default members.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-767"><xref:System.Type.GetDefaultMembers%2A>方法不返回成员在特定的顺序，如按字母顺序或按声明顺序。</span><span class="sxs-lookup"><span data-stu-id="6240b-767">The <xref:System.Type.GetDefaultMembers%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6240b-768">你的代码一定不能依赖于成员的返回的顺序因为顺序而变化。</span><span class="sxs-lookup"><span data-stu-id="6240b-768">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6240b-769">此方法由派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="6240b-769">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="6240b-770">成员包括属性、 方法、 字段、 事件和等等。</span><span class="sxs-lookup"><span data-stu-id="6240b-770">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="6240b-771">下表显示了返回通过基类的成员`Get`方法反射的类型上时。</span><span class="sxs-lookup"><span data-stu-id="6240b-771">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6240b-772">成员类型</span><span class="sxs-lookup"><span data-stu-id="6240b-772">Member Type</span></span>|<span data-ttu-id="6240b-773">Static</span><span class="sxs-lookup"><span data-stu-id="6240b-773">Static</span></span>|<span data-ttu-id="6240b-774">非静态</span><span class="sxs-lookup"><span data-stu-id="6240b-774">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6240b-775">构造函数</span><span class="sxs-lookup"><span data-stu-id="6240b-775">Constructor</span></span>|<span data-ttu-id="6240b-776">No</span><span class="sxs-lookup"><span data-stu-id="6240b-776">No</span></span>|<span data-ttu-id="6240b-777">No</span><span class="sxs-lookup"><span data-stu-id="6240b-777">No</span></span>|  
|<span data-ttu-id="6240b-778">字段</span><span class="sxs-lookup"><span data-stu-id="6240b-778">Field</span></span>|<span data-ttu-id="6240b-779">No</span><span class="sxs-lookup"><span data-stu-id="6240b-779">No</span></span>|<span data-ttu-id="6240b-780">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-780">Yes.</span></span> <span data-ttu-id="6240b-781">字段始终是按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-781">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-782">事件</span><span class="sxs-lookup"><span data-stu-id="6240b-782">Event</span></span>|<span data-ttu-id="6240b-783">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-783">Not applicable</span></span>|<span data-ttu-id="6240b-784">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-784">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-785">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-785">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-786">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-786">See note 2 below.</span></span>|  
|<span data-ttu-id="6240b-787">方法</span><span class="sxs-lookup"><span data-stu-id="6240b-787">Method</span></span>|<span data-ttu-id="6240b-788">No</span><span class="sxs-lookup"><span data-stu-id="6240b-788">No</span></span>|<span data-ttu-id="6240b-789">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-789">Yes.</span></span> <span data-ttu-id="6240b-790">方法 （包括虚拟和非虚拟） 可以隐藏通过名称或按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-790">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-791">嵌套的类型</span><span class="sxs-lookup"><span data-stu-id="6240b-791">Nested Type</span></span>|<span data-ttu-id="6240b-792">No</span><span class="sxs-lookup"><span data-stu-id="6240b-792">No</span></span>|<span data-ttu-id="6240b-793">No</span><span class="sxs-lookup"><span data-stu-id="6240b-793">No</span></span>|  
|<span data-ttu-id="6240b-794">Property</span><span class="sxs-lookup"><span data-stu-id="6240b-794">Property</span></span>|<span data-ttu-id="6240b-795">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-795">Not applicable</span></span>|<span data-ttu-id="6240b-796">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-796">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-797">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-797">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-798">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-798">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6240b-799">按名称和签名隐藏会考虑所有的签名，包括自定义修饰符，部分返回类型、 参数类型、 标记和非托管调用约定。</span><span class="sxs-lookup"><span data-stu-id="6240b-799">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6240b-800">这是二进制比较。</span><span class="sxs-lookup"><span data-stu-id="6240b-800">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6240b-801">为反射，属性和事件均由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-801">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-802">如果具有 get 和 set 访问器的属性中的基类，但派生的类具有一个 get 访问器，派生的类属性隐藏基类属性，并且你将无法再访问基类上的资源库。</span><span class="sxs-lookup"><span data-stu-id="6240b-802">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6240b-803">自定义特性不是通用类型系统的一部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-803">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="6240b-804">如果当前<xref:System.Type>表示构造泛型类型，此方法返回<xref:System.Reflection.MemberInfo>替换为适当的类型参数的类型参数的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-804">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span> <span data-ttu-id="6240b-805">例如，如果类`C<T>`有一个属性`P`，它返回`T`，则调用<xref:System.Type.GetDefaultMembers%2A>上`C<int>`返回`int P`C# 中 (`Property P As Integer`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="6240b-805">For example, if class `C<T>` has a property `P` that returns `T`, calling <xref:System.Type.GetDefaultMembers%2A> on `C<int>` returns `int P` in C# (`Property P As Integer` in Visual Basic).</span></span>  
  
 <span data-ttu-id="6240b-806">如果当前<xref:System.Type>表示泛型类型或泛型方法，则此方法的定义中的类型参数搜索类约束的成员或成员的<xref:System.Object>如果没有类约束。</span><span class="sxs-lookup"><span data-stu-id="6240b-806">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-807">以下示例获取的默认成员信息`MyClass`和显示的默认成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-807">The following example obtains the default member information of `MyClass` and displays the default members.</span></span>  
  
 [!code-cpp[Type_GetDefaultMembers#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetDefaultMembers/CPP/type_getdefaultmembers.cpp#1)]
 [!code-csharp[Type_GetDefaultMembers#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetDefaultMembers/CS/type_getdefaultmembers.cs#1)]
 [!code-vb[Type_GetDefaultMembers#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetDefaultMembers/VB/type_getdefaultmembers.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.Reflection.DefaultMemberAttribute" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetElementType">
      <MemberSignature Language="C#" Value="public abstract Type GetElementType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetElementType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetElementType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetElementType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Type ^ GetElementType();" />
      <MemberSignature Language="F#" Value="abstract member GetElementType : unit -&gt; Type" Usage="type.GetElementType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetElementType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-808">当在派生类中重写时，返回当前数组、指针或引用类型包含的或引用的对象的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-808">When overridden in a derived class, returns the <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or reference type.</span></span></summary>
        <returns><span data-ttu-id="6240b-809">当前数组、指针或引用类型包含或引用的对象的 <see cref="T:System.Type" />；如果当前 <see langword="null" /> 不是数组或指针，不是按引用传递，或者表示泛型类型或泛型方法的定义中的泛型类型或类型参数，则为 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-809">The <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer, or reference type, or <see langword="null" /> if the current <see cref="T:System.Type" /> is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter in the definition of a generic type or generic method.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-810">此方法返回`null`为<xref:System.Array>类。</span><span class="sxs-lookup"><span data-stu-id="6240b-810">This method returns `null` for the <xref:System.Array> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-811">下面的示例演示了如何使用`GetElementType`方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-811">The following example demonstrates using the `GetElementType` method.</span></span>  
  
 [!code-cpp[TestGetElementType#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestGetElementType/CPP/TestGetElementType.cpp#1)]
 [!code-csharp[TestGetElementType#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestGetElementType/CS/testgetelementtype.cs#1)]
 [!code-vb[TestGetElementType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestGetElementType/VB/testgetelementtype.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.HasElementType" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumName">
      <MemberSignature Language="C#" Value="public virtual string GetEnumName (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetEnumName(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumName(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumName (value As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetEnumName(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member GetEnumName : obj -&gt; string&#xA;override this.GetEnumName : obj -&gt; string" Usage="type.GetEnumName value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="6240b-812">要检索其名称的值。</span><span class="sxs-lookup"><span data-stu-id="6240b-812">The value whose name is to be retrieved.</span></span></param>
        <summary><span data-ttu-id="6240b-813">返回当前枚举类型中具有指定值的常数的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-813">Returns the name of the constant that has the specified value, for the current enumeration type.</span></span></summary>
        <returns><span data-ttu-id="6240b-814">当前枚举类型中具有指定值的成员的名称；如果未找到这样的常数，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-814">The name of the member of the current enumeration type that has the specified value, or <see langword="null" /> if no such constant is found.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-815">当前类型不是一个枚举。</span><span class="sxs-lookup"><span data-stu-id="6240b-815">The current type is not an enumeration.</span></span>  
  
<span data-ttu-id="6240b-816">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-816">-or-</span></span> 
 <span data-ttu-id="6240b-817"><paramref name="value" /> 既不是当前类型，也不具有与当前类型相同的基础类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-817"><paramref name="value" /> is neither of the current type nor does it have the same underlying type as the current type.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-818"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-818"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumNames">
      <MemberSignature Language="C#" Value="public virtual string[] GetEnumNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetEnumNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumNames" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumNames () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::String ^&gt; ^ GetEnumNames();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumNames : unit -&gt; string[]&#xA;override this.GetEnumNames : unit -&gt; string[]" Usage="type.GetEnumNames " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-819">返回当前枚举类型中各个成员的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-819">Returns the names of the members of the current enumeration type.</span></span></summary>
        <returns><span data-ttu-id="6240b-820">一个数组，其中包含枚举中各个成员的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-820">An array that contains the names of the members of the enumeration.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-821">返回值数组的元素按枚举常量的二进制值 （即，无符号值）。</span><span class="sxs-lookup"><span data-stu-id="6240b-821">The elements of the return value array are sorted by the binary values (that is, the unsigned values) of the enumerated constants.</span></span> <span data-ttu-id="6240b-822">如果数组包含具有相同值的枚举的常数，则不指定其相应名称的顺序。</span><span class="sxs-lookup"><span data-stu-id="6240b-822">If the array contains enumerated constants with the same value, the order of their corresponding names is unspecified.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-823">当前类型不是一个枚举。</span><span class="sxs-lookup"><span data-stu-id="6240b-823">The current type is not an enumeration.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumUnderlyingType">
      <MemberSignature Language="C#" Value="public virtual Type GetEnumUnderlyingType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetEnumUnderlyingType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumUnderlyingType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumUnderlyingType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetEnumUnderlyingType();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumUnderlyingType : unit -&gt; Type&#xA;override this.GetEnumUnderlyingType : unit -&gt; Type" Usage="type.GetEnumUnderlyingType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-824">返回当前枚举类型的基础类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-824">Returns the underlying type of the current enumeration type.</span></span></summary>
        <returns><span data-ttu-id="6240b-825">当前枚举的基础类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-825">The underlying type of the current enumeration.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-826">默认情况下，C# 和 Visual Basic 中枚举的基础类型是<xref:System.Int32>。</span><span class="sxs-lookup"><span data-stu-id="6240b-826">By default, the underlying type of an enumeration in C# and Visual Basic is <xref:System.Int32>.</span></span> <span data-ttu-id="6240b-827">可以指定其他整数类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-827">Other integer types can be specified.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-828">当前类型不是一个枚举。</span><span class="sxs-lookup"><span data-stu-id="6240b-828">The current type is not an enumeration.</span></span>  
  
<span data-ttu-id="6240b-829">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-829">-or-</span></span> 
<span data-ttu-id="6240b-830">枚举类型无效，因为它包含多个实例字段。</span><span class="sxs-lookup"><span data-stu-id="6240b-830">The enumeration type is not valid, because it contains more than one instance field.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumValues">
      <MemberSignature Language="C#" Value="public virtual Array GetEnumValues ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Array GetEnumValues() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEnumValues" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumValues () As Array" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Array ^ GetEnumValues();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumValues : unit -&gt; Array&#xA;override this.GetEnumValues : unit -&gt; Array" Usage="type.GetEnumValues " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-831">返回当前枚举类型中各个常数的值组成的数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-831">Returns an array of the values of the constants in the current enumeration type.</span></span></summary>
        <returns><span data-ttu-id="6240b-832">包含值的数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-832">An array that contains the values.</span></span> <span data-ttu-id="6240b-833">该数组的元素按枚举常量的二进制值（无符号值）排序。</span><span class="sxs-lookup"><span data-stu-id="6240b-833">The elements of the array are sorted by the binary values (that is, the unsigned values) of the enumeration constants.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-834">当前类型不是一个枚举。</span><span class="sxs-lookup"><span data-stu-id="6240b-834">The current type is not an enumeration.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvent">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6240b-835">获取由当前 <see cref="T:System.Type" /> 声明或继承的特定事件。</span><span class="sxs-lookup"><span data-stu-id="6240b-835">Gets a specific event declared or inherited by the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo GetEvent (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo GetEvent(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEvent (name As String) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::EventInfo ^ GetEvent(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetEvent : string -&gt; System.Reflection.EventInfo&#xA;override this.GetEvent : string -&gt; System.Reflection.EventInfo" Usage="type.GetEvent name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvent(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6240b-836">该字符串包含事件名称，该事件是由当前 <see cref="T:System.Type" /> 声明或继承的。</span><span class="sxs-lookup"><span data-stu-id="6240b-836">The string containing the name of an event that is declared or inherited by the current <see cref="T:System.Type" />.</span></span></param>
        <summary><span data-ttu-id="6240b-837">返回表示指定的公共事件的 <see cref="T:System.Reflection.EventInfo" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-837">Returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified public event.</span></span></summary>
        <returns><span data-ttu-id="6240b-838">如找到，则为表示由当前 <see cref="T:System.Type" /> 声明或继承的指定公共事件的对象；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-838">The object representing the specified public event that is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-839">如果它具有至少一个方法或访问器，它是公共的事件被视为公共反射。</span><span class="sxs-lookup"><span data-stu-id="6240b-839">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="6240b-840">否则，该事件被视为私有的并且必须使用<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (在 Visual Basic 中，将使用的值合并`Or`) 来获取它。</span><span class="sxs-lookup"><span data-stu-id="6240b-840">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="6240b-841">搜索`name`区分大小写。</span><span class="sxs-lookup"><span data-stu-id="6240b-841">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="6240b-842">搜索中包括公共 static 和 public 实例事件。</span><span class="sxs-lookup"><span data-stu-id="6240b-842">The search includes public static and public instance events.</span></span>  
  
 <span data-ttu-id="6240b-843">下表显示了返回通过基类的成员`Get`方法反射的类型上时。</span><span class="sxs-lookup"><span data-stu-id="6240b-843">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6240b-844">成员类型</span><span class="sxs-lookup"><span data-stu-id="6240b-844">Member Type</span></span>|<span data-ttu-id="6240b-845">Static</span><span class="sxs-lookup"><span data-stu-id="6240b-845">Static</span></span>|<span data-ttu-id="6240b-846">非静态</span><span class="sxs-lookup"><span data-stu-id="6240b-846">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6240b-847">构造函数</span><span class="sxs-lookup"><span data-stu-id="6240b-847">Constructor</span></span>|<span data-ttu-id="6240b-848">No</span><span class="sxs-lookup"><span data-stu-id="6240b-848">No</span></span>|<span data-ttu-id="6240b-849">No</span><span class="sxs-lookup"><span data-stu-id="6240b-849">No</span></span>|  
|<span data-ttu-id="6240b-850">字段</span><span class="sxs-lookup"><span data-stu-id="6240b-850">Field</span></span>|<span data-ttu-id="6240b-851">No</span><span class="sxs-lookup"><span data-stu-id="6240b-851">No</span></span>|<span data-ttu-id="6240b-852">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-852">Yes.</span></span> <span data-ttu-id="6240b-853">字段始终是按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-853">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-854">事件</span><span class="sxs-lookup"><span data-stu-id="6240b-854">Event</span></span>|<span data-ttu-id="6240b-855">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-855">Not applicable</span></span>|<span data-ttu-id="6240b-856">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-856">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-857">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-857">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-858">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-858">See note 2 below.</span></span>|  
|<span data-ttu-id="6240b-859">方法</span><span class="sxs-lookup"><span data-stu-id="6240b-859">Method</span></span>|<span data-ttu-id="6240b-860">No</span><span class="sxs-lookup"><span data-stu-id="6240b-860">No</span></span>|<span data-ttu-id="6240b-861">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-861">Yes.</span></span> <span data-ttu-id="6240b-862">方法 （包括虚拟和非虚拟） 可以隐藏通过名称或按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-862">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-863">嵌套的类型</span><span class="sxs-lookup"><span data-stu-id="6240b-863">Nested Type</span></span>|<span data-ttu-id="6240b-864">No</span><span class="sxs-lookup"><span data-stu-id="6240b-864">No</span></span>|<span data-ttu-id="6240b-865">No</span><span class="sxs-lookup"><span data-stu-id="6240b-865">No</span></span>|  
|<span data-ttu-id="6240b-866">Property</span><span class="sxs-lookup"><span data-stu-id="6240b-866">Property</span></span>|<span data-ttu-id="6240b-867">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-867">Not applicable</span></span>|<span data-ttu-id="6240b-868">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-868">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-869">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-869">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-870">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-870">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6240b-871">按名称和签名隐藏会考虑所有的签名，包括自定义修饰符，部分返回类型、 参数类型、 标记和非托管调用约定。</span><span class="sxs-lookup"><span data-stu-id="6240b-871">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6240b-872">这是二进制比较。</span><span class="sxs-lookup"><span data-stu-id="6240b-872">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6240b-873">为反射，属性和事件均由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-873">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-874">如果具有 get 和 set 访问器的属性中的基类，但派生的类具有一个 get 访问器，派生的类属性隐藏基类属性，并且你将无法再访问基类上的资源库。</span><span class="sxs-lookup"><span data-stu-id="6240b-874">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6240b-875">自定义特性不是通用类型系统的一部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-875">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="6240b-876">如果当前<xref:System.Type>表示构造泛型类型，此方法返回<xref:System.Reflection.EventInfo>具有类型参数替换为适当的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-876">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-877">如果当前<xref:System.Type>表示的类型参数的泛型类型或泛型方法定义中，在此方法搜索类约束的事件。</span><span class="sxs-lookup"><span data-stu-id="6240b-877">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-878">下面的示例创建<xref:System.Reflection.EventInfo>对象，并获取 button 类为指定的事件的事件。</span><span class="sxs-lookup"><span data-stu-id="6240b-878">The following example creates an <xref:System.Reflection.EventInfo> object and gets the event for a button class for the specified event.</span></span>  
  
 [!code-cpp[Type_GetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetEvent/CPP/type_getevent.cpp#1)]
 [!code-csharp[Type_GetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetEvent/CS/type_getevent.cs#1)]
 [!code-vb[Type_GetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetEvent/VB/type_getevent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-879"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-879"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetEvents" />
      </Docs>
    </Member>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo GetEvent(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEvent (name As String, bindingAttr As BindingFlags) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::EventInfo ^ GetEvent(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetEvent : string * System.Reflection.BindingFlags -&gt; System.Reflection.EventInfo" Usage="type.GetEvent (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvent(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6240b-880">字符串包含由当前的 <see cref="T:System.Type" /> 声明或继承的事件的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-880">The string containing the name of an event which is declared or inherited by the current <see cref="T:System.Type" />.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="6240b-881">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="6240b-881">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="6240b-882">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-882">-or-</span></span> 
<span data-ttu-id="6240b-883">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-883">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="6240b-884">当在派生类中重写时，使用指定绑定约束，返回表示指定事件的 <see cref="T:System.Reflection.EventInfo" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-884">When overridden in a derived class, returns the <see cref="T:System.Reflection.EventInfo" /> object representing the specified event, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="6240b-885">如找到，则为表示由当前 <see cref="T:System.Type" /> 声明或继承的指定公共事件的对象；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-885">The object representing the specified event that is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-886">以下<xref:System.Reflection.BindingFlags>的筛选器标志可以用于定义要在搜索中包括的事件：</span><span class="sxs-lookup"><span data-stu-id="6240b-886">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which events to include in the search:</span></span>  
  
-   <span data-ttu-id="6240b-887">您必须指定这两`BindingFlags.Instance`或`BindingFlags.Static`为了获取返回。</span><span class="sxs-lookup"><span data-stu-id="6240b-887">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6240b-888">指定`BindingFlags.Public`若要在搜索中包括公共事件。</span><span class="sxs-lookup"><span data-stu-id="6240b-888">Specify `BindingFlags.Public` to include public events in the search.</span></span>  
  
-   <span data-ttu-id="6240b-889">指定`BindingFlags.NonPublic`若要在搜索中包括非公共事件 （即私有、 内部和受保护事件）。</span><span class="sxs-lookup"><span data-stu-id="6240b-889">Specify `BindingFlags.NonPublic` to include non-public events (that is, private, internal, and protected events) in the search.</span></span>  
  
-   <span data-ttu-id="6240b-890">指定`BindingFlags.FlattenHierarchy`用以`public`和`protected`层次结构; 上的静态成员`private`中继承的类的静态成员不包括。</span><span class="sxs-lookup"><span data-stu-id="6240b-890">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="6240b-891">以下<xref:System.Reflection.BindingFlags>修饰符标志可以用于更改搜索的工作原理：</span><span class="sxs-lookup"><span data-stu-id="6240b-891">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6240b-892">`BindingFlags.IgnoreCase` 若要忽略大小写的`name`。</span><span class="sxs-lookup"><span data-stu-id="6240b-892">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="6240b-893">`BindingFlags.DeclaredOnly` 若要搜索上声明事件<xref:System.Type>，不只是继承的事件。</span><span class="sxs-lookup"><span data-stu-id="6240b-893">`BindingFlags.DeclaredOnly` to search only the events declared on the <xref:System.Type>, not events that were simply inherited.</span></span>  
  
 <span data-ttu-id="6240b-894">有关更多信息，请参见<xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-894">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6240b-895">如果它具有至少一个方法或访问器，它是公共的事件被视为公共反射。</span><span class="sxs-lookup"><span data-stu-id="6240b-895">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="6240b-896">否则，该事件被视为私有的并且必须使用<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (在 Visual Basic 中，将使用的值合并`Or`) 来获取它。</span><span class="sxs-lookup"><span data-stu-id="6240b-896">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="6240b-897">如果当前<xref:System.Type>表示构造泛型类型，此方法返回<xref:System.Reflection.EventInfo>具有类型参数替换为适当的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-897">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-898">如果当前<xref:System.Type>表示的类型参数的泛型类型或泛型方法定义中，在此方法搜索类约束的事件。</span><span class="sxs-lookup"><span data-stu-id="6240b-898">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-899">下面的代码示例使用<xref:System.Type.GetEvent%28System.String%2CSystem.Reflection.BindingFlags%29>方法搜索的类型的公共或非公共事件名为"单击"不是`static`(`Shared`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="6240b-899">The following code example uses the <xref:System.Type.GetEvent%28System.String%2CSystem.Reflection.BindingFlags%29> method to search a type for a public or non-public event named "Click" that is not `static` (`Shared` in Visual Basic).</span></span>  
  
 [!code-cpp[Type_GetEvent1#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevent1/CPP/type_getevent1.cpp#1)]
 [!code-csharp[Type_GetEvent1#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevent1/CS/type_getevent1.cs#1)]
 [!code-vb[Type_GetEvent1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevent1/VB/type_getevent1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-900"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-900"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetEvents" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvents">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6240b-901">获取由当前 <see cref="T:System.Type" /> 声明或继承的事件。</span><span class="sxs-lookup"><span data-stu-id="6240b-901">Gets the events that are declared or inherited by the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.EventInfo[] GetEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo[] GetEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvents" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEvents () As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents();" />
      <MemberSignature Language="F#" Value="abstract member GetEvents : unit -&gt; System.Reflection.EventInfo[]&#xA;override this.GetEvents : unit -&gt; System.Reflection.EventInfo[]" Usage="type.GetEvents " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvents</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-902">返回由当前 <see cref="T:System.Type" /> 声明或继承的所有公共事件。</span><span class="sxs-lookup"><span data-stu-id="6240b-902">Returns all the public events that are declared or inherited by the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="6240b-903">表示由当前 <see cref="T:System.Reflection.EventInfo" /> 声明或继承的所有公共事件的 <see cref="T:System.Type" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-903">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public events which are declared or inherited by the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="6240b-904">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-904">-or-</span></span> 
<span data-ttu-id="6240b-905">如果当前 <see cref="T:System.Reflection.EventInfo" /> 没有默认成员，则为 <see cref="T:System.Type" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-905">An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have public events.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-906">如果它具有至少一个方法或访问器，它是公共的事件被视为公共反射。</span><span class="sxs-lookup"><span data-stu-id="6240b-906">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="6240b-907">否则，该事件被视为私有的并且必须使用<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (在 Visual Basic 中，将使用的值合并`Or`) 来获取它。</span><span class="sxs-lookup"><span data-stu-id="6240b-907">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="6240b-908"><xref:System.Type.GetEvents%2A>方法不返回事件按特定顺序，如按字母顺序或按声明顺序。</span><span class="sxs-lookup"><span data-stu-id="6240b-908">The <xref:System.Type.GetEvents%2A> method does not return events in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6240b-909">你的代码一定不能依赖于事件的返回的顺序因为顺序而变化。</span><span class="sxs-lookup"><span data-stu-id="6240b-909">Your code must not depend on the order in which events are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6240b-910">此方法由派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="6240b-910">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="6240b-911">下表显示了返回通过基类的成员`Get`方法反射的类型上时。</span><span class="sxs-lookup"><span data-stu-id="6240b-911">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6240b-912">成员类型</span><span class="sxs-lookup"><span data-stu-id="6240b-912">Member Type</span></span>|<span data-ttu-id="6240b-913">Static</span><span class="sxs-lookup"><span data-stu-id="6240b-913">Static</span></span>|<span data-ttu-id="6240b-914">非静态</span><span class="sxs-lookup"><span data-stu-id="6240b-914">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6240b-915">构造函数</span><span class="sxs-lookup"><span data-stu-id="6240b-915">Constructor</span></span>|<span data-ttu-id="6240b-916">No</span><span class="sxs-lookup"><span data-stu-id="6240b-916">No</span></span>|<span data-ttu-id="6240b-917">No</span><span class="sxs-lookup"><span data-stu-id="6240b-917">No</span></span>|  
|<span data-ttu-id="6240b-918">字段</span><span class="sxs-lookup"><span data-stu-id="6240b-918">Field</span></span>|<span data-ttu-id="6240b-919">No</span><span class="sxs-lookup"><span data-stu-id="6240b-919">No</span></span>|<span data-ttu-id="6240b-920">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-920">Yes.</span></span> <span data-ttu-id="6240b-921">字段始终是按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-921">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-922">事件</span><span class="sxs-lookup"><span data-stu-id="6240b-922">Event</span></span>|<span data-ttu-id="6240b-923">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-923">Not applicable</span></span>|<span data-ttu-id="6240b-924">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-924">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-925">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-925">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-926">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-926">See note 2 below.</span></span>|  
|<span data-ttu-id="6240b-927">方法</span><span class="sxs-lookup"><span data-stu-id="6240b-927">Method</span></span>|<span data-ttu-id="6240b-928">No</span><span class="sxs-lookup"><span data-stu-id="6240b-928">No</span></span>|<span data-ttu-id="6240b-929">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-929">Yes.</span></span> <span data-ttu-id="6240b-930">方法 （包括虚拟和非虚拟） 可以隐藏通过名称或按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-930">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-931">嵌套的类型</span><span class="sxs-lookup"><span data-stu-id="6240b-931">Nested Type</span></span>|<span data-ttu-id="6240b-932">No</span><span class="sxs-lookup"><span data-stu-id="6240b-932">No</span></span>|<span data-ttu-id="6240b-933">No</span><span class="sxs-lookup"><span data-stu-id="6240b-933">No</span></span>|  
|<span data-ttu-id="6240b-934">Property</span><span class="sxs-lookup"><span data-stu-id="6240b-934">Property</span></span>|<span data-ttu-id="6240b-935">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-935">Not applicable</span></span>|<span data-ttu-id="6240b-936">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-936">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-937">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-937">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-938">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-938">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6240b-939">按名称和签名隐藏会考虑所有的签名，包括自定义修饰符，部分返回类型、 参数类型、 标记和非托管调用约定。</span><span class="sxs-lookup"><span data-stu-id="6240b-939">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6240b-940">这是二进制比较。</span><span class="sxs-lookup"><span data-stu-id="6240b-940">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6240b-941">为反射，属性和事件均由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-941">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-942">如果具有 get 和 set 访问器的属性中的基类，但派生的类具有一个 get 访问器，派生的类属性隐藏基类属性，并且你将无法再访问基类上的资源库。</span><span class="sxs-lookup"><span data-stu-id="6240b-942">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6240b-943">自定义特性不是通用类型系统的一部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-943">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="6240b-944">如果当前<xref:System.Type>表示构造泛型类型，此方法返回<xref:System.Reflection.EventInfo>替换为适当的类型参数的类型参数的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-944">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-945">如果当前<xref:System.Type>表示的类型参数的泛型类型或泛型方法定义中，在此方法搜索类约束的事件。</span><span class="sxs-lookup"><span data-stu-id="6240b-945">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-946">以下示例获取数组<xref:System.Reflection.EventInfo>对象，获取所有事件`Button`类，并显示事件名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-946">The following example obtains an array of <xref:System.Reflection.EventInfo> objects, gets all the events for a `Button` class, and displays the event names.</span></span> <span data-ttu-id="6240b-947">若要编译 Visual Basic 示例，请使用以下命令行：</span><span class="sxs-lookup"><span data-stu-id="6240b-947">To compile the Visual Basic example, use the following command line:</span></span>  
  
 `vbc type_getevents1.vb /r:System.Windows.Forms.dll /r:System.dll`  
  
 [!code-cpp[Type_GetEvents1#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevents1/CPP/type_getevents1.cpp#1)]
 [!code-csharp[Type_GetEvents1#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevents1/CS/type_getevents1.cs#1)]
 [!code-vb[Type_GetEvents1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevents1/VB/type_getevents1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="M:System.Type.GetEvent(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo[] GetEvents(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetEvents(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEvents (bindingAttr As BindingFlags) As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetEvents : System.Reflection.BindingFlags -&gt; System.Reflection.EventInfo[]" Usage="type.GetEvents bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetEvents(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="6240b-948">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="6240b-948">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="6240b-949">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-949">-or-</span></span> 
<span data-ttu-id="6240b-950">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-950">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="6240b-951">当在派生类中重写时，使用指定绑定约束，搜索由当前 <see cref="T:System.Type" /> 声明或继承的事件。</span><span class="sxs-lookup"><span data-stu-id="6240b-951">When overridden in a derived class, searches for events that are declared or inherited by the current <see cref="T:System.Type" />, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="6240b-952"><see cref="T:System.Reflection.EventInfo" /> 对象的数组，表示当前 <see cref="T:System.Type" /> 所声明或继承的与指定绑定约束匹配的所有事件。</span><span class="sxs-lookup"><span data-stu-id="6240b-952">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all events that are declared or inherited by the current <see cref="T:System.Type" /> that match the specified binding constraints.</span></span>  
  
<span data-ttu-id="6240b-953">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-953">-or-</span></span> 
<span data-ttu-id="6240b-954">如果当前 <see cref="T:System.Reflection.EventInfo" /> 没有事件，或者如果没有一个事件匹配绑定约束，则为 <see cref="T:System.Type" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-954">An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have events, or if none of the events match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-955"><xref:System.Type.GetEvents%2A>方法不返回事件按特定顺序，如按字母顺序或按声明顺序。</span><span class="sxs-lookup"><span data-stu-id="6240b-955">The <xref:System.Type.GetEvents%2A> method does not return events in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6240b-956">你的代码一定不能依赖于事件的返回的顺序因为顺序而变化。</span><span class="sxs-lookup"><span data-stu-id="6240b-956">Your code must not depend on the order in which events are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6240b-957">以下<xref:System.Reflection.BindingFlags>的筛选器标志可以用于定义要在搜索中包括的事件：</span><span class="sxs-lookup"><span data-stu-id="6240b-957">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which events to include in the search:</span></span>  
  
-   <span data-ttu-id="6240b-958">您必须指定这两`BindingFlags.Instance`或`BindingFlags.Static`为了获取返回。</span><span class="sxs-lookup"><span data-stu-id="6240b-958">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6240b-959">指定`BindingFlags.Public`若要在搜索中包括公共事件。</span><span class="sxs-lookup"><span data-stu-id="6240b-959">Specify `BindingFlags.Public` to include public events in the search.</span></span>  
  
-   <span data-ttu-id="6240b-960">指定`BindingFlags.NonPublic`若要在搜索中包括非公共事件 （即私有、 内部和受保护事件）。</span><span class="sxs-lookup"><span data-stu-id="6240b-960">Specify `BindingFlags.NonPublic` to include non-public events (that is, private, internal, and protected events) in the search.</span></span> <span data-ttu-id="6240b-961">仅保护和基类上的内部事件; 不返回不返回私有基类上的事件。</span><span class="sxs-lookup"><span data-stu-id="6240b-961">Only protected and internal events on base classes are returned; private events on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="6240b-962">指定`BindingFlags.FlattenHierarchy`用以`public`和`protected`层次结构; 上的静态成员`private`中继承的类的静态成员不包括。</span><span class="sxs-lookup"><span data-stu-id="6240b-962">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="6240b-963">以下<xref:System.Reflection.BindingFlags>修饰符标志可以用于更改搜索的工作原理：</span><span class="sxs-lookup"><span data-stu-id="6240b-963">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6240b-964">`BindingFlags.DeclaredOnly` 若要搜索上声明事件<xref:System.Type>，不只是继承的事件。</span><span class="sxs-lookup"><span data-stu-id="6240b-964">`BindingFlags.DeclaredOnly` to search only the events declared on the <xref:System.Type>, not events that were simply inherited.</span></span>  
  
 <span data-ttu-id="6240b-965">有关更多信息，请参见<xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-965">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6240b-966">如果它具有至少一个方法或访问器，它是公共的事件被视为公共反射。</span><span class="sxs-lookup"><span data-stu-id="6240b-966">An event is considered public to reflection if it has at least one method or accessor that is public.</span></span> <span data-ttu-id="6240b-967">否则，该事件被视为私有的并且必须使用<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (在 Visual Basic 中，将使用的值合并`Or`) 来获取它。</span><span class="sxs-lookup"><span data-stu-id="6240b-967">Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="6240b-968">如果当前<xref:System.Type>表示构造泛型类型，此方法返回<xref:System.Reflection.EventInfo>替换为适当的类型参数的类型参数的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-968">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-969">如果当前<xref:System.Type>表示的类型参数的泛型类型或泛型方法定义中，在此方法搜索类约束的事件。</span><span class="sxs-lookup"><span data-stu-id="6240b-969">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-970">以下示例获取数组<xref:System.Reflection.EventInfo>与指定的绑定标志匹配的对象获取所有事件`Button`类，并显示事件名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-970">The following example obtains an array of <xref:System.Reflection.EventInfo> objects that match the specified binding flags, gets all the events for a `Button` class, and displays the event names.</span></span> <span data-ttu-id="6240b-971">若要编译 Visual Basic 示例，请使用以下命令行：</span><span class="sxs-lookup"><span data-stu-id="6240b-971">To compile the Visual Basic example, use the following command line:</span></span>  
  
 `vbc type_getevents2.vb /r:System.Windows.Forms.dll /r:System.dll`  
  
 [!code-cpp[Type_GetEvents2#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevents2/CPP/type_getevents2.cpp#1)]
 [!code-csharp[Type_GetEvents2#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevents2/CS/type_getevents2.cs#1)]
 [!code-vb[Type_GetEvents2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevents2/VB/type_getevents2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.EventInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetEvent(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetField">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6240b-972">获取当前 <see cref="T:System.Type" /> 的特定字段。</span><span class="sxs-lookup"><span data-stu-id="6240b-972">Gets a specific field of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo GetField (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetField(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetField (name As String) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::FieldInfo ^ GetField(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetField : string -&gt; System.Reflection.FieldInfo&#xA;override this.GetField : string -&gt; System.Reflection.FieldInfo" Usage="type.GetField name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetField(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6240b-973">包含要获取的数据字段的名称的字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-973">The string containing the name of the data field to get.</span></span></param>
        <summary><span data-ttu-id="6240b-974">搜索具有指定名称的公共字段。</span><span class="sxs-lookup"><span data-stu-id="6240b-974">Searches for the public field with the specified name.</span></span></summary>
        <returns><span data-ttu-id="6240b-975">如找到，则为表示具有指定名称的公共字段的对象；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-975">An object representing the public field with the specified name, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-976">搜索`name`区分大小写。</span><span class="sxs-lookup"><span data-stu-id="6240b-976">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="6240b-977">搜索中包括公共静态和公共实例字段。</span><span class="sxs-lookup"><span data-stu-id="6240b-977">The search includes public static and public instance fields.</span></span>  
  
 <span data-ttu-id="6240b-978">如果当前<xref:System.Type>表示构造泛型类型，此方法返回<xref:System.Reflection.FieldInfo>具有类型参数替换为适当的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-978">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-979">如果当前<xref:System.Type>表示的类型参数的泛型类型或泛型方法定义中，在此方法搜索类约束的字段。</span><span class="sxs-lookup"><span data-stu-id="6240b-979">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-980">下面的示例获取`Type`指定的类对象，获取<xref:System.Reflection.FieldInfo>对象的字段，并显示字段的值。</span><span class="sxs-lookup"><span data-stu-id="6240b-980">The following example gets the `Type` object for the specified class, obtains the <xref:System.Reflection.FieldInfo> object for the field, and displays the value of the field.</span></span>  
  
 [!code-cpp[Type_GetField#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetField/CPP/type_getfield.cpp#1)]
 [!code-csharp[Type_GetField#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetField/CS/type_getfield.cs#1)]
 [!code-vb[Type_GetField#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetField/VB/type_getfield.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-981"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-981"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6240b-982">此 <see cref="T:System.Type" /> 对象是尚未调用其 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 方法的 <see cref="T:System.Reflection.Emit.TypeBuilder" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-982">This <see cref="T:System.Type" /> object is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> whose <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> method has not yet been called.</span></span></exception>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetFields" />
      </Docs>
    </Member>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetField (name As String, bindingAttr As BindingFlags) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::FieldInfo ^ GetField(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetField : string * System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo" Usage="type.GetField (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetField(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6240b-983">包含要获取的数据字段的名称的字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-983">The string containing the name of the data field to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="6240b-984">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="6240b-984">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="6240b-985">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-985">-or-</span></span> 
<span data-ttu-id="6240b-986">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-986">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="6240b-987">使用指定绑定约束搜索指定字段。</span><span class="sxs-lookup"><span data-stu-id="6240b-987">Searches for the specified field, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="6240b-988">表示符合指定需求的字段的对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-988">An object representing the field that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-989">下表显示了返回通过基类的成员`Get`方法反射的类型上时。</span><span class="sxs-lookup"><span data-stu-id="6240b-989">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6240b-990">成员类型</span><span class="sxs-lookup"><span data-stu-id="6240b-990">Member Type</span></span>|<span data-ttu-id="6240b-991">Static</span><span class="sxs-lookup"><span data-stu-id="6240b-991">Static</span></span>|<span data-ttu-id="6240b-992">非静态</span><span class="sxs-lookup"><span data-stu-id="6240b-992">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6240b-993">构造函数</span><span class="sxs-lookup"><span data-stu-id="6240b-993">Constructor</span></span>|<span data-ttu-id="6240b-994">No</span><span class="sxs-lookup"><span data-stu-id="6240b-994">No</span></span>|<span data-ttu-id="6240b-995">No</span><span class="sxs-lookup"><span data-stu-id="6240b-995">No</span></span>|  
|<span data-ttu-id="6240b-996">字段</span><span class="sxs-lookup"><span data-stu-id="6240b-996">Field</span></span>|<span data-ttu-id="6240b-997">No</span><span class="sxs-lookup"><span data-stu-id="6240b-997">No</span></span>|<span data-ttu-id="6240b-998">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-998">Yes.</span></span> <span data-ttu-id="6240b-999">字段始终是按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-999">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-1000">事件</span><span class="sxs-lookup"><span data-stu-id="6240b-1000">Event</span></span>|<span data-ttu-id="6240b-1001">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-1001">Not applicable</span></span>|<span data-ttu-id="6240b-1002">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-1002">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-1003">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1003">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-1004">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-1004">See note 2 below.</span></span>|  
|<span data-ttu-id="6240b-1005">方法</span><span class="sxs-lookup"><span data-stu-id="6240b-1005">Method</span></span>|<span data-ttu-id="6240b-1006">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1006">No</span></span>|<span data-ttu-id="6240b-1007">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-1007">Yes.</span></span> <span data-ttu-id="6240b-1008">方法 （包括虚拟和非虚拟） 可以隐藏通过名称或按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1008">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-1009">嵌套的类型</span><span class="sxs-lookup"><span data-stu-id="6240b-1009">Nested Type</span></span>|<span data-ttu-id="6240b-1010">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1010">No</span></span>|<span data-ttu-id="6240b-1011">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1011">No</span></span>|  
|<span data-ttu-id="6240b-1012">Property</span><span class="sxs-lookup"><span data-stu-id="6240b-1012">Property</span></span>|<span data-ttu-id="6240b-1013">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-1013">Not applicable</span></span>|<span data-ttu-id="6240b-1014">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-1014">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-1015">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1015">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-1016">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-1016">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6240b-1017">按名称和签名隐藏会考虑所有的签名，包括自定义修饰符，部分返回类型、 参数类型、 标记和非托管调用约定。</span><span class="sxs-lookup"><span data-stu-id="6240b-1017">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6240b-1018">这是二进制比较。</span><span class="sxs-lookup"><span data-stu-id="6240b-1018">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6240b-1019">为反射，属性和事件均由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1019">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-1020">如果具有 get 和 set 访问器的属性中的基类，但派生的类具有一个 get 访问器，派生的类属性隐藏基类属性，并且你将无法再访问基类上的资源库。</span><span class="sxs-lookup"><span data-stu-id="6240b-1020">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6240b-1021">自定义特性不是通用类型系统的一部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-1021">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="6240b-1022">以下<xref:System.Reflection.BindingFlags>的筛选器标志可以用于定义要在搜索中包括哪些字段：</span><span class="sxs-lookup"><span data-stu-id="6240b-1022">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which fields to include in the search:</span></span>  
  
-   <span data-ttu-id="6240b-1023">您必须指定这两`BindingFlags.Instance`或`BindingFlags.Static`为了获取返回。</span><span class="sxs-lookup"><span data-stu-id="6240b-1023">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6240b-1024">指定`BindingFlags.Public`若要在搜索中包括公共字段。</span><span class="sxs-lookup"><span data-stu-id="6240b-1024">Specify `BindingFlags.Public` to include public fields in the search.</span></span>  
  
-   <span data-ttu-id="6240b-1025">指定`BindingFlags.NonPublic`若要在搜索中包括非公共字段 （即私有、 内部和受保护字段）。</span><span class="sxs-lookup"><span data-stu-id="6240b-1025">Specify `BindingFlags.NonPublic` to include non-public fields (that is, private, internal, and protected fields) in the search.</span></span>  
  
-   <span data-ttu-id="6240b-1026">指定`BindingFlags.FlattenHierarchy`用以`public`和`protected`层次结构; 上的静态成员`private`中继承的类的静态成员不包括。</span><span class="sxs-lookup"><span data-stu-id="6240b-1026">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="6240b-1027">以下<xref:System.Reflection.BindingFlags>修饰符标志可以用于更改搜索的工作原理：</span><span class="sxs-lookup"><span data-stu-id="6240b-1027">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6240b-1028">`BindingFlags.IgnoreCase` 若要忽略大小写的`name`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1028">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="6240b-1029">`BindingFlags.DeclaredOnly` 若要搜索仅上声明的字段<xref:System.Type>，不只是继承的字段。</span><span class="sxs-lookup"><span data-stu-id="6240b-1029">`BindingFlags.DeclaredOnly` to search only the fields declared on the <xref:System.Type>, not fields that were simply inherited.</span></span>  
  
 <span data-ttu-id="6240b-1030">有关更多信息，请参见<xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-1030">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6240b-1031">如果当前<xref:System.Type>表示构造泛型类型，此方法返回<xref:System.Reflection.FieldInfo>具有类型参数替换为适当的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1031">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-1032">如果当前<xref:System.Type>表示的类型参数的泛型类型或泛型方法定义中，在此方法搜索类约束的字段。</span><span class="sxs-lookup"><span data-stu-id="6240b-1032">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-1033">下面的示例获取`Type`指定的类对象，获取<xref:System.Reflection.FieldInfo>匹配指定的绑定标志，并显示字段的值的字段的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-1033">The following example gets the `Type` object for the specified class, obtains the <xref:System.Reflection.FieldInfo> object for the field that matches the specified binding flags, and displays the value of the field.</span></span>  
  
 [!code-cpp[Type_GetField#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetField/CPP/type_getfield.cpp#2)]
 [!code-csharp[Type_GetField#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetField/CS/type_getfield.cs#2)]
 [!code-vb[Type_GetField#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetField/VB/type_getfield.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-1034"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1034"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetFields" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFields">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6240b-1035">获取当前 <see cref="T:System.Type" /> 的字段。</span><span class="sxs-lookup"><span data-stu-id="6240b-1035">Gets the fields of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo[] GetFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetFields" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFields () As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields();" />
      <MemberSignature Language="F#" Value="abstract member GetFields : unit -&gt; System.Reflection.FieldInfo[]&#xA;override this.GetFields : unit -&gt; System.Reflection.FieldInfo[]" Usage="type.GetFields " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetFields</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-1036">返回当前 <see cref="T:System.Type" /> 的所有公共字段。</span><span class="sxs-lookup"><span data-stu-id="6240b-1036">Returns all the public fields of the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="6240b-1037">表示为当前 <see cref="T:System.Reflection.FieldInfo" /> 定义的所有公共字段的 <see cref="T:System.Type" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1037">An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all the public fields defined for the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="6240b-1038">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1038">-or-</span></span> 
<span data-ttu-id="6240b-1039">如果没有为当前 <see cref="T:System.Reflection.FieldInfo" /> 定义的公共字段，则为 <see cref="T:System.Type" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1039">An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no public fields are defined for the current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-1040"><xref:System.Type.GetFields%2A>方法不返回字段按特定顺序，如按字母顺序或按声明顺序。</span><span class="sxs-lookup"><span data-stu-id="6240b-1040">The <xref:System.Type.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6240b-1041">你的代码一定不能依赖于字段的返回的顺序因为顺序而变化。</span><span class="sxs-lookup"><span data-stu-id="6240b-1041">Your code must not depend on the order in which fields are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6240b-1042">下表显示了返回通过基类的成员`Get`方法反射的类型上时。</span><span class="sxs-lookup"><span data-stu-id="6240b-1042">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6240b-1043">成员类型</span><span class="sxs-lookup"><span data-stu-id="6240b-1043">Member Type</span></span>|<span data-ttu-id="6240b-1044">Static</span><span class="sxs-lookup"><span data-stu-id="6240b-1044">Static</span></span>|<span data-ttu-id="6240b-1045">非静态</span><span class="sxs-lookup"><span data-stu-id="6240b-1045">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6240b-1046">构造函数</span><span class="sxs-lookup"><span data-stu-id="6240b-1046">Constructor</span></span>|<span data-ttu-id="6240b-1047">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1047">No</span></span>|<span data-ttu-id="6240b-1048">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1048">No</span></span>|  
|<span data-ttu-id="6240b-1049">字段</span><span class="sxs-lookup"><span data-stu-id="6240b-1049">Field</span></span>|<span data-ttu-id="6240b-1050">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1050">No</span></span>|<span data-ttu-id="6240b-1051">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-1051">Yes.</span></span> <span data-ttu-id="6240b-1052">字段始终是按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1052">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-1053">事件</span><span class="sxs-lookup"><span data-stu-id="6240b-1053">Event</span></span>|<span data-ttu-id="6240b-1054">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-1054">Not applicable</span></span>|<span data-ttu-id="6240b-1055">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-1055">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-1056">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1056">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-1057">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-1057">See note 2 below.</span></span>|  
|<span data-ttu-id="6240b-1058">方法</span><span class="sxs-lookup"><span data-stu-id="6240b-1058">Method</span></span>|<span data-ttu-id="6240b-1059">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1059">No</span></span>|<span data-ttu-id="6240b-1060">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-1060">Yes.</span></span> <span data-ttu-id="6240b-1061">方法 （包括虚拟和非虚拟） 可以隐藏通过名称或按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1061">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-1062">嵌套的类型</span><span class="sxs-lookup"><span data-stu-id="6240b-1062">Nested Type</span></span>|<span data-ttu-id="6240b-1063">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1063">No</span></span>|<span data-ttu-id="6240b-1064">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1064">No</span></span>|  
|<span data-ttu-id="6240b-1065">Property</span><span class="sxs-lookup"><span data-stu-id="6240b-1065">Property</span></span>|<span data-ttu-id="6240b-1066">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-1066">Not applicable</span></span>|<span data-ttu-id="6240b-1067">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-1067">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-1068">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1068">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-1069">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-1069">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6240b-1070">按名称和签名隐藏会考虑所有的签名，包括自定义修饰符，部分返回类型、 参数类型、 标记和非托管调用约定。</span><span class="sxs-lookup"><span data-stu-id="6240b-1070">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6240b-1071">这是二进制比较。</span><span class="sxs-lookup"><span data-stu-id="6240b-1071">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6240b-1072">为反射，属性和事件均由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1072">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-1073">如果具有 get 和 set 访问器的属性中的基类，但派生的类具有一个 get 访问器，派生的类属性隐藏基类属性，并且你将无法再访问基类上的资源库。</span><span class="sxs-lookup"><span data-stu-id="6240b-1073">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6240b-1074">自定义特性不是通用类型系统的一部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-1074">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="6240b-1075">如果当前<xref:System.Type>表示构造泛型类型，此方法返回<xref:System.Reflection.FieldInfo>替换为适当的类型参数的类型参数的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-1075">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-1076">如果当前<xref:System.Type>表示的类型参数的泛型类型或泛型方法定义中，在此方法搜索类约束的公共字段。</span><span class="sxs-lookup"><span data-stu-id="6240b-1076">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the public fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-1077">下面的示例演示使用的`GetFields()`方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1077">The following example shows a use of the `GetFields()` method.</span></span>  
  
 [!code-cpp[FieldInfo_IsSpecialName#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_IsSpecialName/CPP/fieldinfo_isspecialname.cpp#1)]
 [!code-csharp[FieldInfo_IsSpecialName#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsSpecialName/CS/fieldinfo_isspecialname.cs#1)]
 [!code-vb[FieldInfo_IsSpecialName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_IsSpecialName/VB/fieldinfo_isspecialname.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetFields(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetFields (bindingAttr As BindingFlags) As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetFields : System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo[]" Usage="type.GetFields bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetFields(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="6240b-1078">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="6240b-1078">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="6240b-1079">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1079">-or-</span></span> 
<span data-ttu-id="6240b-1080">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1080">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="6240b-1081">当在派生类中重写时，使用指定绑定约束，搜索为当前 <see cref="T:System.Type" /> 定义的字段。</span><span class="sxs-lookup"><span data-stu-id="6240b-1081">When overridden in a derived class, searches for the fields defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="6240b-1082">表示为当前 <see cref="T:System.Reflection.FieldInfo" /> 定义的匹配指定绑定约束的所有字段的 <see cref="T:System.Type" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1082">An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all fields defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span></span>  
  
<span data-ttu-id="6240b-1083">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1083">-or-</span></span> 
<span data-ttu-id="6240b-1084">如果没有为当前 <see cref="T:System.Reflection.FieldInfo" /> 定义的字段，或者如果没有一个定义的字段匹配绑定约束，则为 <see cref="T:System.Type" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1084">An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no fields are defined for the current <see cref="T:System.Type" />, or if none of the defined fields match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-1085"><xref:System.Type.GetFields%2A>方法不返回字段按特定顺序，如按字母顺序或按声明顺序。</span><span class="sxs-lookup"><span data-stu-id="6240b-1085">The <xref:System.Type.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6240b-1086">你的代码一定不能依赖于字段的返回的顺序因为顺序而变化。</span><span class="sxs-lookup"><span data-stu-id="6240b-1086">Your code must not depend on the order in which fields are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6240b-1087">以下<xref:System.Reflection.BindingFlags>的筛选器标志可以用于定义要在搜索中包括哪些字段：</span><span class="sxs-lookup"><span data-stu-id="6240b-1087">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which fields to include in the search:</span></span>  
  
-   <span data-ttu-id="6240b-1088">您必须指定这两`BindingFlags.Instance`或`BindingFlags.Static`为了获取返回。</span><span class="sxs-lookup"><span data-stu-id="6240b-1088">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6240b-1089">指定`BindingFlags.Public`若要在搜索中包括公共字段。</span><span class="sxs-lookup"><span data-stu-id="6240b-1089">Specify `BindingFlags.Public` to include public fields in the search.</span></span>  
  
-   <span data-ttu-id="6240b-1090">指定`BindingFlags.NonPublic`若要在搜索中包括非公共字段 （即私有、 内部和受保护字段）。</span><span class="sxs-lookup"><span data-stu-id="6240b-1090">Specify `BindingFlags.NonPublic` to include non-public fields (that is, private, internal, and protected fields) in the search.</span></span> <span data-ttu-id="6240b-1091">仅保护，以及返回基类上的内部字段;不会返回基类上的私有字段。</span><span class="sxs-lookup"><span data-stu-id="6240b-1091">Only protected and internal fields on base classes are returned; private fields on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="6240b-1092">指定`BindingFlags.FlattenHierarchy`用以`public`和`protected`层次结构; 上的静态成员`private`中继承的类的静态成员不包括。</span><span class="sxs-lookup"><span data-stu-id="6240b-1092">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="6240b-1093">以下<xref:System.Reflection.BindingFlags>修饰符标志可以用于更改搜索的工作原理：</span><span class="sxs-lookup"><span data-stu-id="6240b-1093">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6240b-1094">`BindingFlags.DeclaredOnly` 若要搜索仅上声明的字段<xref:System.Type>，不只是继承的字段。</span><span class="sxs-lookup"><span data-stu-id="6240b-1094">`BindingFlags.DeclaredOnly` to search only the fields declared on the <xref:System.Type>, not fields that were simply inherited.</span></span>  
  
 <span data-ttu-id="6240b-1095">有关更多信息，请参见<xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-1095">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6240b-1096">如果当前<xref:System.Type>表示构造泛型类型，此方法返回<xref:System.Reflection.FieldInfo>替换为适当的类型参数的类型参数的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-1096">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-1097">如果当前<xref:System.Type>表示的类型参数的泛型类型或泛型方法定义中，在此方法搜索类约束的公共字段。</span><span class="sxs-lookup"><span data-stu-id="6240b-1097">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the public fields of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-1098">下面的示例演示使用的`GetFields(BindingFlags)`方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1098">The following example shows a use of the `GetFields(BindingFlags)` method.</span></span>  
  
 [!code-cpp[Classic MethodBase.Attributes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MethodBase.Attributes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/CS/source.cs#1)]
 [!code-vb[Classic MethodBase.Attributes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.FieldInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetGenericArguments">
      <MemberSignature Language="C#" Value="public virtual Type[] GetGenericArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetGenericArguments() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetGenericArguments" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGenericArguments () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetGenericArguments();" />
      <MemberSignature Language="F#" Value="abstract member GetGenericArguments : unit -&gt; Type[]&#xA;override this.GetGenericArguments : unit -&gt; Type[]" Usage="type.GetGenericArguments " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-1099">返回表示封闭式泛型类型的类型自变量或泛型类型定义的类型参数的 <see cref="T:System.Type" /> 对象的数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1099">Returns an array of <see cref="T:System.Type" /> objects that represent the type arguments of a closed generic type or the type parameters of a generic type definition.</span></span></summary>
        <returns><span data-ttu-id="6240b-1100">表示泛型类型的类型实参的 <see cref="T:System.Type" /> 对象的数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1100">An array of <see cref="T:System.Type" /> objects that represent the type arguments of a generic type.</span></span> <span data-ttu-id="6240b-1101">如果当前类型不是泛型类型，则返回一个空数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1101">Returns an empty array if the current type is not a generic type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-1102">在泛型类型的类型参数列表中出现的顺序返回数组元素。</span><span class="sxs-lookup"><span data-stu-id="6240b-1102">The array elements are returned in the order in which they appear in the list of type arguments for the generic type.</span></span>  
  
-   <span data-ttu-id="6240b-1103">如果当前类型为封闭式构造的类型 (即<xref:System.Type.ContainsGenericParameters%2A>属性返回`false`)，返回的数组<xref:System.Type.GetGenericArguments%2A>方法包含已分配给泛型类型定义的泛型类型参数的类型.</span><span class="sxs-lookup"><span data-stu-id="6240b-1103">If the current type is a closed constructed type (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `false`), the array returned by the <xref:System.Type.GetGenericArguments%2A> method contains the types that have been assigned to the generic type parameters of the generic type definition.</span></span>  
  
-   <span data-ttu-id="6240b-1104">如果当前类型是泛型类型定义，该数组包含类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1104">If the current type is a generic type definition, the array contains the type parameters.</span></span>  
  
-   <span data-ttu-id="6240b-1105">如果当前类型是开放式构造的类型 (即<xref:System.Type.ContainsGenericParameters%2A>属性返回`true`) 中的特定类型尚未分配到的所有类型参数和类型参数的封闭式泛型类型或方法，该数组包含类型和类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1105">If the current type is an open constructed type (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `true`) in which specific types have not been assigned to all of the type parameters and type parameters of enclosing generic types or methods, the array contains both types and type parameters.</span></span> <span data-ttu-id="6240b-1106">使用<xref:System.Type.IsGenericParameter%2A>属性来区分它们。</span><span class="sxs-lookup"><span data-stu-id="6240b-1106">Use the <xref:System.Type.IsGenericParameter%2A> property to tell them apart.</span></span> <span data-ttu-id="6240b-1107">此方案的演示，请参阅的代码示例<xref:System.Type.ContainsGenericParameters%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1107">For a demonstration of this scenario, see the code example for the <xref:System.Type.ContainsGenericParameters%2A> property.</span></span>  
  
 <span data-ttu-id="6240b-1108">有关泛型反射中使用的术语的固定条件列表，请参阅 <xref:System.Type.IsGenericType%2A> 属性注解。</span><span class="sxs-lookup"><span data-stu-id="6240b-1108">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-1109">下面的代码示例使用<xref:System.Type.GetGenericArguments%2A>方法来显示构造的类型的类型参数和其泛型类型定义的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1109">The following code example uses the <xref:System.Type.GetGenericArguments%2A> method to display the type arguments of a constructed type and the type parameters of its generic type definition.</span></span>  
  
 <span data-ttu-id="6240b-1110">此代码示例是为提供一个更大示例的一部分<xref:System.Type.IsGenericTypeDefinition%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1110">This code example is part of a larger example provided for the <xref:System.Type.IsGenericTypeDefinition%2A> property.</span></span> <span data-ttu-id="6240b-1111">请参阅示例输出的较大示例。</span><span class="sxs-lookup"><span data-stu-id="6240b-1111">See the larger example for sample output.</span></span>  
  
 [!code-cpp[System.Type.IsGenericTypeDefinition#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CPP/source.cpp#2)]
 [!code-csharp[System.Type.IsGenericTypeDefinition#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CS/source.cs#2)]
 [!code-vb[System.Type.IsGenericTypeDefinition#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6240b-1112">基类不支持调用的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1112">The invoked method is not supported in the base class.</span></span> <span data-ttu-id="6240b-1113">派生类必须提供一个实现。</span><span class="sxs-lookup"><span data-stu-id="6240b-1113">Derived classes must provide an implementation.</span></span></exception>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="6240b-1114">反射类型和泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-1114">Reflection and Generic Types</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="6240b-1115">如何：使用反射检查和实例化泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-1115">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetGenericParameterConstraints">
      <MemberSignature Language="C#" Value="public virtual Type[] GetGenericParameterConstraints ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetGenericParameterConstraints() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetGenericParameterConstraints" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGenericParameterConstraints () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetGenericParameterConstraints();" />
      <MemberSignature Language="F#" Value="abstract member GetGenericParameterConstraints : unit -&gt; Type[]&#xA;override this.GetGenericParameterConstraints : unit -&gt; Type[]" Usage="type.GetGenericParameterConstraints " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-1116">返回表示当前泛型类型参数约束的 <see cref="T:System.Type" /> 对象的数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1116">Returns an array of <see cref="T:System.Type" /> objects that represent the constraints on the current generic type parameter.</span></span></summary>
        <returns><span data-ttu-id="6240b-1117">表示当前泛型类型参数上的约束的 <see cref="T:System.Type" /> 对象的数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1117">An array of <see cref="T:System.Type" /> objects that represent the constraints on the current generic type parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-1118">泛型类型参数的每个约束表示为<xref:System.Type>对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-1118">Each constraint on a generic type parameter is expressed as a <xref:System.Type> object.</span></span> <span data-ttu-id="6240b-1119">使用<xref:System.Type.IsClass%2A>属性来确定约束是否是基类约束; 如果该属性返回`false`，约束为接口约束。</span><span class="sxs-lookup"><span data-stu-id="6240b-1119">Use the <xref:System.Type.IsClass%2A> property to determine whether a constraint is the base class constraint; if the property returns `false`, the constraint is an interface constraint.</span></span> <span data-ttu-id="6240b-1120">如果类型参数有没有类约束和接口约束，则返回空数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1120">If a type parameter has no class constraint and no interface constraints, an empty array is returned.</span></span>  
  
 <span data-ttu-id="6240b-1121">有关泛型反射中使用的术语的固定条件列表，请参阅 <xref:System.Type.IsGenericType%2A> 属性注解。</span><span class="sxs-lookup"><span data-stu-id="6240b-1121">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-1122">下面的代码示例定义一个泛型类型`Test`使用两个具有不同的约束的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1122">The following code example defines a generic type `Test` with two type parameters that have different constraints.</span></span> <span data-ttu-id="6240b-1123">当程序执行时，使用检查约束<xref:System.Type.GenericParameterAttributes%2A>属性和<xref:System.Type.GetGenericParameterConstraints%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1123">When the program executes, the constraints are examined using the <xref:System.Type.GenericParameterAttributes%2A> property and the <xref:System.Type.GetGenericParameterConstraints%2A> method.</span></span>  
  
 [!code-cpp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CPP/source.cpp#1)]
 [!code-csharp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CS/source.cs#1)]
 [!code-vb[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6240b-1124">当前 <see cref="T:System.Type" /> 对象不是泛型类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1124">The current <see cref="T:System.Type" /> object is not a generic type parameter.</span></span> <span data-ttu-id="6240b-1125">也就是说，<see cref="P:System.Type.IsGenericParameter" /> 属性将返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1125">That is, the <see cref="P:System.Type.IsGenericParameter" /> property returns <see langword="false" />.</span></span></exception>
        <altmember cref="P:System.Type.GenericParameterAttributes" />
        <altmember cref="P:System.Type.IsGenericParameter" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="6240b-1126">如何：使用反射检查和实例化泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-1126">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public virtual Type GetGenericTypeDefinition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetGenericTypeDefinition() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetGenericTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGenericTypeDefinition () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetGenericTypeDefinition();" />
      <MemberSignature Language="F#" Value="abstract member GetGenericTypeDefinition : unit -&gt; Type&#xA;override this.GetGenericTypeDefinition : unit -&gt; Type" Usage="type.GetGenericTypeDefinition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-1127">返回一个表示可用于构造当前泛型类型的泛型类型定义的 <see cref="T:System.Type" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-1127">Returns a <see cref="T:System.Type" /> object that represents a generic type definition from which the current generic type can be constructed.</span></span></summary>
        <returns><span data-ttu-id="6240b-1128">表示可用于构造当前类型的泛型类型的 <see cref="T:System.Type" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-1128">A <see cref="T:System.Type" /> object representing a generic type from which the current type can be constructed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-1129">泛型类型定义是可从其构造其他类型的模板。</span><span class="sxs-lookup"><span data-stu-id="6240b-1129">A generic type definition is a template from which other types can be constructed.</span></span> <span data-ttu-id="6240b-1130">例如，从泛型类型定义`G<T>`（以 C# 语法;`G(Of T)`在 Visual Basic 中或`generic <typename T> ref class G`c + + 中) 可以构造并实例化类型`G<int>`(`G(Of Integer)`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="6240b-1130">For example, from the generic type definition `G<T>` (expressed in C# syntax; `G(Of T)` in Visual Basic or `generic <typename T> ref class G` in C++) you can construct and instantiate the type `G<int>` (`G(Of Integer)` in Visual Basic).</span></span> <span data-ttu-id="6240b-1131">给定<xref:System.Type>对象表示此构造类型，<xref:System.Type.GetGenericTypeDefinition%2A>方法返回的泛型类型定义。</span><span class="sxs-lookup"><span data-stu-id="6240b-1131">Given a <xref:System.Type> object representing this constructed type, the <xref:System.Type.GetGenericTypeDefinition%2A> method returns the generic type definition.</span></span>  
  
 <span data-ttu-id="6240b-1132">如果同一泛型类型定义中创建了两个构造的类型，使用相同的类型实参<xref:System.Type.GetGenericTypeDefinition%2A>方法将返回相同<xref:System.Type>这两种类型的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-1132">If two constructed types are created from the same generic type definition, using the same type arguments, the <xref:System.Type.GetGenericTypeDefinition%2A> method returns the same <xref:System.Type> object for both types.</span></span>  
  
 <span data-ttu-id="6240b-1133">如果您调用<xref:System.Type.GetGenericTypeDefinition%2A>方法<xref:System.Type>对象，它已表示泛型类型定义，它将返回当前<xref:System.Type>。</span><span class="sxs-lookup"><span data-stu-id="6240b-1133">If you call the <xref:System.Type.GetGenericTypeDefinition%2A> method on a <xref:System.Type> object that already represents a generic type definition, it returns the current <xref:System.Type>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6240b-1134">泛型类型的数组不是泛型本身。</span><span class="sxs-lookup"><span data-stu-id="6240b-1134">An array of generic types is not itself generic.</span></span> <span data-ttu-id="6240b-1135">在 C# 代码`A<int>[] v;`或 Visual Basic 代码`Dim v() As A(Of Integer)`，变量的类型`v`不是泛型方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1135">In the C# code `A<int>[] v;` or the Visual Basic code `Dim v() As A(Of Integer)`, the type of variable `v` is not generic.</span></span> <span data-ttu-id="6240b-1136">使用<xref:System.Type.IsGenericType%2A>来确定类型是否为泛型之前调用<xref:System.Type.GetGenericTypeDefinition%2A>。</span><span class="sxs-lookup"><span data-stu-id="6240b-1136">Use <xref:System.Type.IsGenericType%2A> to determine whether a type is generic before calling <xref:System.Type.GetGenericTypeDefinition%2A>.</span></span>  
  
 <span data-ttu-id="6240b-1137">有关泛型反射中使用的术语的固定条件列表，请参阅 <xref:System.Type.IsGenericType%2A> 属性注解。</span><span class="sxs-lookup"><span data-stu-id="6240b-1137">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-1138">下面的代码示例通过使用普通的实例创建创建构造类型的实例，然后使用<xref:System.Type.GetType%2A>和<xref:System.Type.GetGenericTypeDefinition%2A>方法检索构造的类型和泛型类型定义。</span><span class="sxs-lookup"><span data-stu-id="6240b-1138">The following code example creates an instance of a constructed type by using ordinary instance creation and then uses the <xref:System.Type.GetType%2A> and <xref:System.Type.GetGenericTypeDefinition%2A> methods to retrieve the constructed type and the generic type definition.</span></span> <span data-ttu-id="6240b-1139">此示例使用泛型<xref:System.Collections.Generic.Dictionary%602>类型; 构造的类型表示<xref:System.Collections.Generic.Dictionary%602>的`Test`具有字符串键的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-1139">This example uses the generic <xref:System.Collections.Generic.Dictionary%602> type; the constructed type represents a <xref:System.Collections.Generic.Dictionary%602> of `Test` objects with string keys.</span></span>  
  
 [!code-cpp[System.Type.GetGenericTypeDefinition#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.GetGenericTypeDefinition/CPP/source.cpp#1)]
 [!code-csharp[System.Type.GetGenericTypeDefinition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.GetGenericTypeDefinition/CS/source.cs#1)]
 [!code-vb[System.Type.GetGenericTypeDefinition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.GetGenericTypeDefinition/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6240b-1140">当前类型不是泛型类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-1140">The current type is not a generic type.</span></span>  <span data-ttu-id="6240b-1141">也就是说，<see cref="P:System.Type.IsGenericType" /> 返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1141">That is, <see cref="P:System.Type.IsGenericType" /> returns <see langword="false" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6240b-1142">基类不支持调用的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1142">The invoked method is not supported in the base class.</span></span> <span data-ttu-id="6240b-1143">派生类必须提供一个实现。</span><span class="sxs-lookup"><span data-stu-id="6240b-1143">Derived classes must provide an implementation.</span></span></exception>
        <altmember cref="M:System.Type.MakeGenericType(System.Type[])" />
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="6240b-1144">反射类型和泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-1144">Reflection and Generic Types</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="6240b-1145">如何：使用反射检查和实例化泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-1145">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="type.GetHashCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetHashCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-1146">返回此实例的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="6240b-1146">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="6240b-1147">此实例的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="6240b-1147">The hash code for this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-1148">此方法重写 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-1148">This method overrides <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-1149">下面的示例显示的哈希代码`System.Windows.Forms.Button`类。</span><span class="sxs-lookup"><span data-stu-id="6240b-1149">The following example displays the hash code of the `System.Windows.Forms.Button` class.</span></span>  
  
 [!code-cpp[Type_GetHashCode_GetFields#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetHashCode_GetFields/CPP/type_gethashcode_getfields.cpp#1)]
 [!code-csharp[Type_GetHashCode_GetFields#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetHashCode_GetFields/CS/type_gethashcode_getfields.cs#1)]
 [!code-vb[Type_GetHashCode_GetFields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetHashCode_GetFields/VB/type_gethashcode_getfields.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInterface">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6240b-1150">获取由当前 <see cref="T:System.Type" /> 实现或继承的特定接口。</span><span class="sxs-lookup"><span data-stu-id="6240b-1150">Gets a specific interface implemented or inherited by the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public Type GetInterface (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetInterface(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterface(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInterface (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetInterface(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetInterface : string -&gt; Type&#xA;override this.GetInterface : string -&gt; Type" Usage="type.GetInterface name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterface(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6240b-1151">包含要获取的接口名称的字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-1151">The string containing the name of the interface to get.</span></span> <span data-ttu-id="6240b-1152">对于泛型接口，这是重整名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-1152">For generic interfaces, this is the mangled name.</span></span></param>
        <summary><span data-ttu-id="6240b-1153">搜索具有指定名称的接口。</span><span class="sxs-lookup"><span data-stu-id="6240b-1153">Searches for the interface with the specified name.</span></span></summary>
        <returns><span data-ttu-id="6240b-1154">表示具有指定名称且由当前的 <see cref="T:System.Type" /> 实现或继承的接口的对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1154">An object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-1155">搜索`name`区分大小写。</span><span class="sxs-lookup"><span data-stu-id="6240b-1155">The search for `name` is case-sensitive.</span></span>  
  
 <span data-ttu-id="6240b-1156">如果当前<xref:System.Type>表示构造泛型类型，此方法返回<xref:System.Type>具有类型参数替换为适当的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1156">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-1157">如果当前<xref:System.Type>表示类型参数的泛型类型或泛型方法，则此方法定义中搜索接口约束和继承的类或接口约束的所有接口。</span><span class="sxs-lookup"><span data-stu-id="6240b-1157">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-1158">对于泛型接口，`name`参数是重整的名称，结尾的重读符号 (\`) 和类型参数的数目。</span><span class="sxs-lookup"><span data-stu-id="6240b-1158">For generic interfaces, the `name` parameter is the mangled name, ending with a grave accent (\`) and the number of type parameters.</span></span> <span data-ttu-id="6240b-1159">这适用于泛型接口定义和构造的泛型接口。</span><span class="sxs-lookup"><span data-stu-id="6240b-1159">This is true for both generic interface definitions and constructed generic interfaces.</span></span> <span data-ttu-id="6240b-1160">例如，若要查找`IExample<T>`(`IExample(Of T)`在 Visual Basic 中) 或`IExample<string>`(`IExample(Of String)`在 Visual Basic 中)，搜索``"IExample`1"``。</span><span class="sxs-lookup"><span data-stu-id="6240b-1160">For example, to find `IExample<T>` (`IExample(Of T)` in Visual Basic) or `IExample<string>` (`IExample(Of String)` in Visual Basic), search for ``"IExample`1"``.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-1161">下面的代码示例使用<xref:System.Type.GetInterface%28System.String%29>方法搜索<xref:System.Collections.Hashtable>类<xref:System.Runtime.Serialization.IDeserializationCallback>接口，并列出了接口的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1161">The following code example uses the <xref:System.Type.GetInterface%28System.String%29> method to search the <xref:System.Collections.Hashtable> class for the <xref:System.Runtime.Serialization.IDeserializationCallback> interface, and lists the methods of the interface.</span></span>  
  
 <span data-ttu-id="6240b-1162">代码示例还演示<xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29>方法重载和<xref:System.Type.GetInterfaceMap%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1162">The code example also demonstrates the <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> method overload and the <xref:System.Type.GetInterfaceMap%2A> method.</span></span>  
  
 [!code-cpp[Type_GetInterface#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetInterface/CPP/type_getinterface.cpp#1)]
 [!code-csharp[Type_GetInterface#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetInterface/CS/type_getinterface.cs#1)]
 [!code-vb[Type_GetInterface#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetInterface/VB/type_getinterface.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-1163"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1163"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="6240b-1164">当前 <see cref="T:System.Type" /> 表示实现具有不同类型参数的相同泛型接口的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-1164">The current <see cref="T:System.Type" /> represents a type that implements the same generic interface with different type arguments.</span></span></exception>
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Type.GetInterfaces" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public abstract Type GetInterface (string name, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetInterface(string name, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterface(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetInterface (name As String, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Type ^ GetInterface(System::String ^ name, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="abstract member GetInterface : string * bool -&gt; Type" Usage="type.GetInterface (name, ignoreCase)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterface(System.String,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6240b-1165">包含要获取的接口名称的字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-1165">The string containing the name of the interface to get.</span></span> <span data-ttu-id="6240b-1166">对于泛型接口，这是重整名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-1166">For generic interfaces, this is the mangled name.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="6240b-1167"><see langword="true" /> 表示对于用来指定简单接口名称的 <paramref name="name" /> 部分（该部分指定命名空间大小写必须正确）忽略其大小写。</span><span class="sxs-lookup"><span data-stu-id="6240b-1167"><see langword="true" /> to ignore the case of that part of <paramref name="name" /> that specifies the simple interface name (the part that specifies the namespace must be correctly cased).</span></span>  
  
<span data-ttu-id="6240b-1168">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1168">-or-</span></span> 
 <span data-ttu-id="6240b-1169"><see langword="false" /> 表示对 <paramref name="name" /> 的所有部分执行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="6240b-1169"><see langword="false" /> to perform a case-sensitive search for all parts of <paramref name="name" />.</span></span></param>
        <summary><span data-ttu-id="6240b-1170">当在派生类中重写时，搜索指定的接口，指定是否要对接口名称执行不区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="6240b-1170">When overridden in a derived class, searches for the specified interface, specifying whether to do a case-insensitive search for the interface name.</span></span></summary>
        <returns><span data-ttu-id="6240b-1171">表示具有指定名称且由当前的 <see cref="T:System.Type" /> 实现或继承的接口的对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1171">An object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-1172">`ignoreCase`参数仅适用于简单接口名称，不到命名空间。</span><span class="sxs-lookup"><span data-stu-id="6240b-1172">The `ignoreCase` parameter applies only to the simple interface name, not to the namespace.</span></span> <span data-ttu-id="6240b-1173">部分`name`指定命名空间必须具有正确的大小写，或将找不到该接口。</span><span class="sxs-lookup"><span data-stu-id="6240b-1173">The portion of `name` that specifies the namespace must have the correct case, or the interface will not be found.</span></span> <span data-ttu-id="6240b-1174">例如，"System.icomparable"找到该字符串<xref:System.IComparable>接口，而字符串"system.icomparable"不工作。</span><span class="sxs-lookup"><span data-stu-id="6240b-1174">For example, the string "System.icomparable" finds the <xref:System.IComparable> interface, but the string "system.icomparable" does not.</span></span>  
  
 <span data-ttu-id="6240b-1175">如果当前<xref:System.Type>表示构造泛型类型，此方法返回<xref:System.Type>具有类型参数替换为适当的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1175">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-1176">如果当前<xref:System.Type>表示类型参数的泛型类型或泛型方法，则此方法定义中搜索接口约束和继承的类或接口约束的所有接口。</span><span class="sxs-lookup"><span data-stu-id="6240b-1176">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-1177">对于泛型接口，`name`参数是重整的名称，结尾的重读符号 (\`) 和类型参数的数目。</span><span class="sxs-lookup"><span data-stu-id="6240b-1177">For generic interfaces, the `name` parameter is the mangled name, ending with a grave accent (\`) and the number of type parameters.</span></span> <span data-ttu-id="6240b-1178">这适用于泛型接口定义和构造的泛型接口。</span><span class="sxs-lookup"><span data-stu-id="6240b-1178">This is true for both generic interface definitions and constructed generic interfaces.</span></span> <span data-ttu-id="6240b-1179">例如，若要查找`IExample<T>`(`IExample(Of T)`在 Visual Basic 中) 或`IExample<string>`(`IExample(Of String)`在 Visual Basic 中)，搜索`"IExample`1"。</span><span class="sxs-lookup"><span data-stu-id="6240b-1179">For example, to find `IExample<T>` (`IExample(Of T)` in Visual Basic) or `IExample<string>` (`IExample(Of String)` in Visual Basic), search for `"IExample`1"\`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-1180">下面的代码示例使用<xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29>方法来执行不区分大小写的搜索<xref:System.Collections.Hashtable>类<xref:System.Collections.IEnumerable>接口。</span><span class="sxs-lookup"><span data-stu-id="6240b-1180">The following code example uses the <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> method to perform a case-insensitive search of the <xref:System.Collections.Hashtable> class for the <xref:System.Collections.IEnumerable> interface.</span></span>  
  
 <span data-ttu-id="6240b-1181">代码示例还演示<xref:System.Type.GetInterface%28System.String%29>方法重载和<xref:System.Type.GetInterfaceMap%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1181">The code example also demonstrates the <xref:System.Type.GetInterface%28System.String%29> method overload and the <xref:System.Type.GetInterfaceMap%2A> method.</span></span>  
  
 [!code-cpp[Type_GetInterface#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetInterface/CPP/type_getinterface.cpp#2)]
 [!code-csharp[Type_GetInterface#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetInterface/CS/type_getinterface.cs#2)]
 [!code-vb[Type_GetInterface#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetInterface/VB/type_getinterface.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-1182"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1182"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="6240b-1183">当前 <see cref="T:System.Type" /> 表示实现具有不同类型参数的相同泛型接口的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-1183">The current <see cref="T:System.Type" /> represents a type that implements the same generic interface with different type arguments.</span></span></exception>
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Type.GetInterfaces" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetInterfaceMap">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Reflection.InterfaceMapping GetInterfaceMap(class System.Type interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterfaceMap(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetInterfaceMap (interfaceType As Type) As InterfaceMapping" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::InterfaceMapping GetInterfaceMap(Type ^ interfaceType);" />
      <MemberSignature Language="F#" Value="abstract member GetInterfaceMap : Type -&gt; System.Reflection.InterfaceMapping&#xA;override this.GetInterfaceMap : Type -&gt; System.Reflection.InterfaceMapping" Usage="type.GetInterfaceMap interfaceType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterfaceMap(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.InterfaceMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="interfaceType"><span data-ttu-id="6240b-1184">要检索其映射的接口类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-1184">The interface type to retrieve a mapping for.</span></span></param>
        <summary><span data-ttu-id="6240b-1185">返回指定接口类型的接口映射。</span><span class="sxs-lookup"><span data-stu-id="6240b-1185">Returns an interface mapping for the specified interface type.</span></span></summary>
        <returns><span data-ttu-id="6240b-1186">表示 <paramref name="interfaceType" /> 的接口映射的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-1186">An object that represents the interface mapping for <paramref name="interfaceType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-1187">接口映射表示如何将接口映射到实现该接口的类上的实际成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-1187">The interface map denotes how an interface is mapped into the actual members on a class that implements that interface.</span></span>  
  
 <span data-ttu-id="6240b-1188">如果当前<xref:System.Type>表示构造泛型类型，类型参数替换为适当的类型参数中的元素<xref:System.Reflection.InterfaceMapping>此方法返回。</span><span class="sxs-lookup"><span data-stu-id="6240b-1188">If the current <xref:System.Type> represents a constructed generic type, type parameters are replaced by the appropriate type arguments in the elements of the <xref:System.Reflection.InterfaceMapping> returned by this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-1189">下面的示例调用<xref:System.Type.GetInterfaceMap%2A>方法，以确定如何<xref:System.IFormatProvider>接口映射到<xref:System.Globalization.CultureInfo>方法，以及如何<xref:System.IAppDomainSetup>接口映射到<xref:System.AppDomainSetup>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1189">The following example calls the <xref:System.Type.GetInterfaceMap%2A> method to determine how the <xref:System.IFormatProvider> interface maps to <xref:System.Globalization.CultureInfo> methods, and how the <xref:System.IAppDomainSetup> interface maps to <xref:System.AppDomainSetup> properties.</span></span> <span data-ttu-id="6240b-1190">注意，因为<xref:System.IAppDomainSetup>接口定义一组属性，返回<xref:System.Reflection.InterfaceMapping>对象包含单独<xref:System.Reflection.MethodInfo>对象的属性的 get 和 set 访问器。</span><span class="sxs-lookup"><span data-stu-id="6240b-1190">Note that, because the <xref:System.IAppDomainSetup> interface defines a set of properties, the returned <xref:System.Reflection.InterfaceMapping> object includes separate <xref:System.Reflection.MethodInfo> objects for a property's get and set accessors.</span></span>  
  
 [!code-csharp[System.Type.GetInterfaceMap#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.getinterfacemap/cs/interfacemapping1.cs#1)]
 [!code-vb[System.Type.GetInterfaceMap#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.getinterfacemap/vb/interfacemapping1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-1191">当前类型未实现 <paramref name="interfaceType" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1191"><paramref name="interfaceType" /> is not implemented by the current type.</span></span>  
  
<span data-ttu-id="6240b-1192">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1192">-or-</span></span> 
<span data-ttu-id="6240b-1193"><paramref name="interfaceType" /> 参数未引用接口。</span><span class="sxs-lookup"><span data-stu-id="6240b-1193">The <paramref name="interfaceType" /> argument does not refer to an interface.</span></span>  
  
<span data-ttu-id="6240b-1194">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1194">-or-</span></span>

<span data-ttu-id="6240b-1195">当前实例或 <paramref name="interfaceType" /> 参数是开放式泛型类型；即，<see cref="P:System.Type.ContainsGenericParameters" /> 属性将返回 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1195">The current instance or <paramref name="interfaceType" /> argument is an open generic type; that is, the <see cref="P:System.Type.ContainsGenericParameters" /> property returns <see langword="true" />.</span></span>

<span data-ttu-id="6240b-1196">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1196">-or-</span></span>


 <span data-ttu-id="6240b-1197"><paramref name="interfaceType" /> 是一个泛型接口，而当前类型是一个数组类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-1197"><paramref name="interfaceType" /> is a generic interface, and the current type is an array type.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-1198"><paramref name="interfaceType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1198"><paramref name="interfaceType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6240b-1199">当前 <see cref="T:System.Type" /> 表示泛型类型参数；即，<see cref="P:System.Type.IsGenericParameter" /> 为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1199">The current <see cref="T:System.Type" /> represents a generic type parameter; that is, <see cref="P:System.Type.IsGenericParameter" /> is <see langword="true" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6240b-1200">基类不支持调用的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1200">The invoked method is not supported in the base class.</span></span> <span data-ttu-id="6240b-1201">派生类必须提供一个实现。</span><span class="sxs-lookup"><span data-stu-id="6240b-1201">Derived classes must provide an implementation.</span></span></exception>
        <altmember cref="T:System.Reflection.InterfaceMapping" />
      </Docs>
    </Member>
    <Member MemberName="GetInterfaces">
      <MemberSignature Language="C#" Value="public abstract Type[] GetInterfaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetInterfaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetInterfaces" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetInterfaces () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;Type ^&gt; ^ GetInterfaces();" />
      <MemberSignature Language="F#" Value="abstract member GetInterfaces : unit -&gt; Type[]" Usage="type.GetInterfaces " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetInterfaces</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-1202">当在派生类中重写时，获取由当前 <see cref="T:System.Type" /> 实现或继承的所有接口。</span><span class="sxs-lookup"><span data-stu-id="6240b-1202">When overridden in a derived class, gets all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="6240b-1203">表示由当前 <see cref="T:System.Type" /> 实现或继承的所有接口的 <see cref="T:System.Type" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1203">An array of <see cref="T:System.Type" /> objects representing all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="6240b-1204">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1204">-or-</span></span> 
<span data-ttu-id="6240b-1205">如果没有由当前 <see cref="T:System.Type" /> 实现或继承的接口，则为 <see cref="T:System.Type" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1205">An empty array of type <see cref="T:System.Type" />, if no interfaces are implemented or inherited by the current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-1206"><xref:System.Type.GetInterfaces%2A>方法不返回接口中特定的顺序，如按字母顺序或按声明顺序。</span><span class="sxs-lookup"><span data-stu-id="6240b-1206">The <xref:System.Type.GetInterfaces%2A> method does not return interfaces in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6240b-1207">你的代码一定不能依赖于接口的返回的顺序因为顺序而变化。</span><span class="sxs-lookup"><span data-stu-id="6240b-1207">Your code must not depend on the order in which interfaces are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6240b-1208">如果当前<xref:System.Type>表示构造泛型类型，此方法返回<xref:System.Type>替换为适当的类型参数的类型参数的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-1208">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-1209">如果当前<xref:System.Type>表示类型参数的泛型类型或泛型方法，则此方法定义中搜索接口约束和继承的类或接口约束的所有接口。</span><span class="sxs-lookup"><span data-stu-id="6240b-1209">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-1210">下面的示例获取指定类的类型，并显示该类型实现或继承的所有接口。</span><span class="sxs-lookup"><span data-stu-id="6240b-1210">The following example gets the type of the specified class and displays all the interfaces that the type implements or inherits.</span></span> <span data-ttu-id="6240b-1211">若要编译 Visual Basic 示例，请使用以下编译器命令：</span><span class="sxs-lookup"><span data-stu-id="6240b-1211">To compile the Visual Basic example, use the following compiler commands:</span></span>  
  
 `vbc type_getinterfaces1.vb /r:System.Web.dll /r:System.dll`  
  
 [!code-cpp[Type_GetInterfaces1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetInterfaces1/CPP/type_getinterfaces1.cpp#1)]
 [!code-csharp[Type_GetInterfaces1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetInterfaces1/CS/type_getinterfaces1.cs#1)]
 [!code-vb[Type_GetInterfaces1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetInterfaces1/VB/type_getinterfaces1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="6240b-1212">调用静态初始值设定项时引发了异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-1212">A static initializer is invoked and throws an exception.</span></span></exception>
        <altmember cref="M:System.Type.GetInterface(System.String)" />
        <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMember">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6240b-1213">获取当前 <see cref="T:System.Type" /> 的指定成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-1213">Gets the specified members of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMember (name As String) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetMember : string -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMember name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMember(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6240b-1214">包含要获取的公共成员名称的字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-1214">The string containing the name of the public members to get.</span></span></param>
        <summary><span data-ttu-id="6240b-1215">搜索具有指定名称的公共成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-1215">Searches for the public members with the specified name.</span></span></summary>
        <returns><span data-ttu-id="6240b-1216">一个表示具有指定名称的公共成员的 <see cref="T:System.Reflection.MemberInfo" /> 对象数组（如果找到的话）；否则为空数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1216">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-1217">搜索`name`区分大小写。</span><span class="sxs-lookup"><span data-stu-id="6240b-1217">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="6240b-1218">搜索中包括公共 static 和 public 实例成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-1218">The search includes public static and public instance members.</span></span>  
  
 <span data-ttu-id="6240b-1219">成员包括属性、 方法、 字段、 事件和等等。</span><span class="sxs-lookup"><span data-stu-id="6240b-1219">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="6240b-1220"><xref:System.Type.GetMember%2A>方法不返回成员在特定的顺序，如按字母顺序或按声明顺序。</span><span class="sxs-lookup"><span data-stu-id="6240b-1220">The <xref:System.Type.GetMember%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6240b-1221">你的代码一定不能依赖于成员的返回的顺序因为顺序而变化。</span><span class="sxs-lookup"><span data-stu-id="6240b-1221">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6240b-1222">此方法的重载将找不到类初始值设定项 (.cctor)。</span><span class="sxs-lookup"><span data-stu-id="6240b-1222">This method overload will not find class initializers (.cctor).</span></span> <span data-ttu-id="6240b-1223">若要查找类初始值设定项，请使用采用重载<xref:System.Reflection.BindingFlags>，并指定<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="6240b-1223">To find class initializers, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="6240b-1224">此外可以获取类初始值设定项使用<xref:System.Type.TypeInitializer%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1224">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="6240b-1225">下表显示了返回通过基类的成员`Get`方法反射的类型上时。</span><span class="sxs-lookup"><span data-stu-id="6240b-1225">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6240b-1226">成员类型</span><span class="sxs-lookup"><span data-stu-id="6240b-1226">Member Type</span></span>|<span data-ttu-id="6240b-1227">Static</span><span class="sxs-lookup"><span data-stu-id="6240b-1227">Static</span></span>|<span data-ttu-id="6240b-1228">非静态</span><span class="sxs-lookup"><span data-stu-id="6240b-1228">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6240b-1229">构造函数</span><span class="sxs-lookup"><span data-stu-id="6240b-1229">Constructor</span></span>|<span data-ttu-id="6240b-1230">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1230">No</span></span>|<span data-ttu-id="6240b-1231">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1231">No</span></span>|  
|<span data-ttu-id="6240b-1232">字段</span><span class="sxs-lookup"><span data-stu-id="6240b-1232">Field</span></span>|<span data-ttu-id="6240b-1233">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1233">No</span></span>|<span data-ttu-id="6240b-1234">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-1234">Yes.</span></span> <span data-ttu-id="6240b-1235">字段始终是按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1235">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-1236">事件</span><span class="sxs-lookup"><span data-stu-id="6240b-1236">Event</span></span>|<span data-ttu-id="6240b-1237">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-1237">Not applicable</span></span>|<span data-ttu-id="6240b-1238">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-1238">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-1239">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1239">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-1240">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-1240">See note 2 below.</span></span>|  
|<span data-ttu-id="6240b-1241">方法</span><span class="sxs-lookup"><span data-stu-id="6240b-1241">Method</span></span>|<span data-ttu-id="6240b-1242">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1242">No</span></span>|<span data-ttu-id="6240b-1243">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-1243">Yes.</span></span> <span data-ttu-id="6240b-1244">方法 （包括虚拟和非虚拟） 可以隐藏通过名称或按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1244">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-1245">嵌套的类型</span><span class="sxs-lookup"><span data-stu-id="6240b-1245">Nested Type</span></span>|<span data-ttu-id="6240b-1246">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1246">No</span></span>|<span data-ttu-id="6240b-1247">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1247">No</span></span>|  
|<span data-ttu-id="6240b-1248">Property</span><span class="sxs-lookup"><span data-stu-id="6240b-1248">Property</span></span>|<span data-ttu-id="6240b-1249">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-1249">Not applicable</span></span>|<span data-ttu-id="6240b-1250">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-1250">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-1251">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1251">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-1252">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-1252">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6240b-1253">按名称和签名隐藏会考虑所有的签名，包括自定义修饰符，部分返回类型、 参数类型、 标记和非托管调用约定。</span><span class="sxs-lookup"><span data-stu-id="6240b-1253">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6240b-1254">这是二进制比较。</span><span class="sxs-lookup"><span data-stu-id="6240b-1254">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6240b-1255">为反射，属性和事件均由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1255">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-1256">如果具有 get 和 set 访问器的属性中的基类，但派生的类具有一个 get 访问器，派生的类属性隐藏基类属性，并且你将无法再访问基类上的资源库。</span><span class="sxs-lookup"><span data-stu-id="6240b-1256">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6240b-1257">自定义特性不是通用类型系统的一部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-1257">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="6240b-1258">如果当前<xref:System.Type>表示构造泛型类型，此方法返回<xref:System.Reflection.MemberInfo>具有类型参数替换为适当的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1258">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-1259">如果当前<xref:System.Type>表示泛型类型或泛型方法，则此方法的定义中的类型参数搜索类约束的成员或成员的<xref:System.Object>如果没有类约束。</span><span class="sxs-lookup"><span data-stu-id="6240b-1259">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-1260">为泛型方法，不包括中的类型参数`name`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1260">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="6240b-1261">例如，C# 代码`GetMember("MyMethod<int>")`搜索的文本名称的成员"`MyMethod<int>`"，而不是针对一个名为方法`MyMethod`具有一个类型的泛型参数`int`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1261">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-1262">下面的示例显示的所有成员`String`以字母 C 开头的类</span><span class="sxs-lookup"><span data-stu-id="6240b-1262">The following example displays all the members of the `String` class that start with the letter C.</span></span>  
  
 [!code-cpp[Type_GetMember#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMember/CPP/type_getmember.cpp#1)]
 [!code-csharp[Type_GetMember#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMember/CS/type_getmember.cs#1)]
 [!code-vb[Type_GetMember#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMember/VB/type_getmember.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-1263"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1263"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMember (name As String, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetMember : string * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMember (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMember(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6240b-1264">包含要获取的成员的名称的字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-1264">The string containing the name of the members to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="6240b-1265">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="6240b-1265">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="6240b-1266">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1266">-or-</span></span> 
<span data-ttu-id="6240b-1267">零，返回空数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1267">Zero, to return an empty array.</span></span></param>
        <summary><span data-ttu-id="6240b-1268">使用指定绑定约束搜索指定成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-1268">Searches for the specified members, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="6240b-1269">一个表示具有指定名称的公共成员的 <see cref="T:System.Reflection.MemberInfo" /> 对象数组（如果找到的话）；否则为空数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1269">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-1270">此方法由派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="6240b-1270">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="6240b-1271">成员包括属性、 方法、 字段、 事件和等等。</span><span class="sxs-lookup"><span data-stu-id="6240b-1271">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="6240b-1272"><xref:System.Type.GetMember%2A>方法不返回成员在特定的顺序，如按字母顺序或按声明顺序。</span><span class="sxs-lookup"><span data-stu-id="6240b-1272">The <xref:System.Type.GetMember%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6240b-1273">你的代码一定不能依赖于成员的返回的顺序因为顺序而变化。</span><span class="sxs-lookup"><span data-stu-id="6240b-1273">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6240b-1274">以下<xref:System.Reflection.BindingFlags>的筛选器标志可以用于定义要在搜索中包括的成员：</span><span class="sxs-lookup"><span data-stu-id="6240b-1274">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="6240b-1275">您必须指定这两`BindingFlags.Instance`或`BindingFlags.Static`为了获取返回。</span><span class="sxs-lookup"><span data-stu-id="6240b-1275">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6240b-1276">指定`BindingFlags.Public`若要在搜索中包括公共成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-1276">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="6240b-1277">指定`BindingFlags.NonPublic`若要在搜索中包括非公共成员 （即私有、 内部和受保护成员）。</span><span class="sxs-lookup"><span data-stu-id="6240b-1277">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="6240b-1278">指定`BindingFlags.FlattenHierarchy`用以`public`和`protected`层次结构; 上的静态成员`private`中继承的类的静态成员不包括。</span><span class="sxs-lookup"><span data-stu-id="6240b-1278">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="6240b-1279">以下<xref:System.Reflection.BindingFlags>修饰符标志可以用于更改搜索的工作原理：</span><span class="sxs-lookup"><span data-stu-id="6240b-1279">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6240b-1280">`BindingFlags.IgnoreCase` 若要忽略大小写的`name`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1280">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="6240b-1281">`BindingFlags.DeclaredOnly` 若要搜索仅在声明的成员<xref:System.Type>，不只是继承的成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-1281">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="6240b-1282">有关更多信息，请参见<xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-1282">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6240b-1283">若要获取类初始值设定项 (.cctor) 使用此方法的重载，必须指定".cctor"对于`name`，并<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>在 Visual Basic 中) 为`bindingAttr`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1283">To get the class initializer (.cctor) using this method overload, you must specify ".cctor" for `name`, and <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic) for `bindingAttr`.</span></span> <span data-ttu-id="6240b-1284">此外可以获取类初始值设定项使用<xref:System.Type.TypeInitializer%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1284">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="6240b-1285">如果当前<xref:System.Type>表示构造泛型类型，此方法返回<xref:System.Reflection.MemberInfo>具有类型参数替换为适当的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1285">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-1286">如果当前<xref:System.Type>表示泛型类型或泛型方法，则此方法的定义中的类型参数搜索类约束的成员或成员的<xref:System.Object>如果没有类约束。</span><span class="sxs-lookup"><span data-stu-id="6240b-1286">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-1287">为泛型方法，不包括中的类型参数`name`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1287">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="6240b-1288">例如，C# 代码`GetMember("MyMethod<int>")`搜索的文本名称的成员"`MyMethod<int>`"，而不是针对一个名为方法`MyMethod`具有一个类型的泛型参数`int`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1288">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-1289">下面的示例显示所有的公共静态成员的`myString`以字母 C 开头的类</span><span class="sxs-lookup"><span data-stu-id="6240b-1289">The following example displays all the public static members of the `myString` class that start with the letter C.</span></span>  
  
 [!code-cpp[Type_GetMember#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMember/CPP/type_getmember.cpp#2)]
 [!code-csharp[Type_GetMember#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMember/CS/type_getmember.cs#2)]
 [!code-vb[Type_GetMember#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMember/VB/type_getmember.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-1290"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1290"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.MemberTypes type, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetMember (name As String, type As MemberTypes, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string * System.Reflection.MemberTypes * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetMember : string * System.Reflection.MemberTypes * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMember (name, type, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6240b-1291">包含要获取的成员的名称的字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-1291">The string containing the name of the members to get.</span></span></param>
        <param name="type"><span data-ttu-id="6240b-1292">要搜索的值。</span><span class="sxs-lookup"><span data-stu-id="6240b-1292">The value to search for.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="6240b-1293">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="6240b-1293">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="6240b-1294">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1294">-or-</span></span> 
<span data-ttu-id="6240b-1295">零，返回空数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1295">Zero, to return an empty array.</span></span></param>
        <summary><span data-ttu-id="6240b-1296">使用指定绑定约束搜索指定成员类型的指定成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-1296">Searches for the specified members of the specified member type, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="6240b-1297">一个表示具有指定名称的公共成员的 <see cref="T:System.Reflection.MemberInfo" /> 对象数组（如果找到的话）；否则为空数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1297">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-1298">成员包括属性、 方法、 字段、 事件和等等。</span><span class="sxs-lookup"><span data-stu-id="6240b-1298">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="6240b-1299"><xref:System.Type.GetMember%2A>方法不返回成员在特定的顺序，如按字母顺序或按声明顺序。</span><span class="sxs-lookup"><span data-stu-id="6240b-1299">The <xref:System.Type.GetMember%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6240b-1300">你的代码一定不能依赖于成员的返回的顺序因为顺序而变化。</span><span class="sxs-lookup"><span data-stu-id="6240b-1300">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6240b-1301">以下<xref:System.Reflection.BindingFlags>的筛选器标志可以用于定义要在搜索中包括的成员：</span><span class="sxs-lookup"><span data-stu-id="6240b-1301">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="6240b-1302">您必须指定这两`BindingFlags.Instance`或`BindingFlags.Static`为了获取返回。</span><span class="sxs-lookup"><span data-stu-id="6240b-1302">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6240b-1303">指定`BindingFlags.Public`若要在搜索中包括公共成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-1303">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="6240b-1304">指定`BindingFlags.NonPublic`若要在搜索中包括非公共成员 （即私有、 内部和受保护成员）。</span><span class="sxs-lookup"><span data-stu-id="6240b-1304">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="6240b-1305">指定`BindingFlags.FlattenHierarchy`用以`public`和`protected`层次结构; 上的静态成员`private`中继承的类的静态成员不包括。</span><span class="sxs-lookup"><span data-stu-id="6240b-1305">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="6240b-1306">以下<xref:System.Reflection.BindingFlags>修饰符标志可以用于更改搜索的工作原理：</span><span class="sxs-lookup"><span data-stu-id="6240b-1306">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6240b-1307">`BindingFlags.IgnoreCase` 若要忽略大小写的`name`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1307">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="6240b-1308">`BindingFlags.DeclaredOnly` 若要搜索仅在声明的成员<xref:System.Type>，不只是继承的成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-1308">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="6240b-1309">有关更多信息，请参见<xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-1309">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6240b-1310">若要获取类初始值设定项 (.cctor) 使用此方法的重载，必须指定".cctor"对于`name`，<xref:System.Reflection.MemberTypes.Constructor?displayProperty=nameWithType>有关`type`，和<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>中Visual Basic) 为`bindingAttr`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1310">To get the class initializer (.cctor) using this method overload, you must specify ".cctor" for `name`, <xref:System.Reflection.MemberTypes.Constructor?displayProperty=nameWithType> for `type`, and  <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic) for `bindingAttr`.</span></span> <span data-ttu-id="6240b-1311">此外可以获取类初始值设定项使用<xref:System.Type.TypeInitializer%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1311">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="6240b-1312">如果当前<xref:System.Type>表示构造泛型类型，此方法返回<xref:System.Reflection.MemberInfo>具有类型参数替换为适当的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1312">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-1313">如果当前<xref:System.Type>表示泛型类型或泛型方法，则此方法的定义中的类型参数搜索类约束的成员或成员的<xref:System.Object>如果没有类约束。</span><span class="sxs-lookup"><span data-stu-id="6240b-1313">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-1314">为泛型方法，不包括中的类型参数`name`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1314">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="6240b-1315">例如，C# 代码`GetMember("MyMethod<int>")`搜索的文本名称的成员"`MyMethod<int>`"，而不是针对一个名为方法`MyMethod`具有一个类型的泛型参数`int`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1315">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-1316">下面的示例显示的所有方法`myString`以字母 C 开头的类</span><span class="sxs-lookup"><span data-stu-id="6240b-1316">The following example displays all the methods of the `myString` class that start with the letter C.</span></span>  
  
 [!code-cpp[Type_GetMember#3](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMember/CPP/type_getmember.cpp#3)]
 [!code-csharp[Type_GetMember#3](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMember/CS/type_getmember.cs#3)]
 [!code-vb[Type_GetMember#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMember/VB/type_getmember.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-1317"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1317"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6240b-1318">派生类必须提供一个实现。</span><span class="sxs-lookup"><span data-stu-id="6240b-1318">A derived class must provide an implementation.</span></span></exception>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMembers" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMembers">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6240b-1319">获取当前 <see cref="T:System.Type" /> 的成员（包括属性、方法、字段、事件等）。</span><span class="sxs-lookup"><span data-stu-id="6240b-1319">Gets the members (properties, methods, fields, events, and so on) of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMembers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMembers () As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers();" />
      <MemberSignature Language="F#" Value="abstract member GetMembers : unit -&gt; System.Reflection.MemberInfo[]&#xA;override this.GetMembers : unit -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMembers " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMembers</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-1320">返回为当前 <see cref="T:System.Type" /> 的所有公共成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-1320">Returns all the public members of the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="6240b-1321">表示当前 <see cref="T:System.Reflection.MemberInfo" /> 的所有公共成员的 <see cref="T:System.Type" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1321">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all the public members of the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="6240b-1322">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1322">-or-</span></span> 
<span data-ttu-id="6240b-1323">如果当前 <see cref="T:System.Reflection.MemberInfo" /> 没有公共成员，则为 <see cref="T:System.Type" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1323">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have public members.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-1324">成员包括属性、 方法、 字段、 事件和等等。</span><span class="sxs-lookup"><span data-stu-id="6240b-1324">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="6240b-1325"><xref:System.Type.GetMembers%2A>方法不返回成员在特定的顺序，如按字母顺序或按声明顺序。</span><span class="sxs-lookup"><span data-stu-id="6240b-1325">The <xref:System.Type.GetMembers%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6240b-1326">你的代码一定不能依赖于成员的返回的顺序因为顺序而变化。</span><span class="sxs-lookup"><span data-stu-id="6240b-1326">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6240b-1327">调用此方法的重载<xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29>方法重载中，使用<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="6240b-1327">This method overload calls the <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> method overload, with <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="6240b-1328">它将找不到类初始值设定项 (.cctor)。</span><span class="sxs-lookup"><span data-stu-id="6240b-1328">It will not find class initializers (.cctor).</span></span> <span data-ttu-id="6240b-1329">若要查找类初始值设定项，请使用采用重载<xref:System.Reflection.BindingFlags>，并指定<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="6240b-1329">To find class initializers, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="6240b-1330">此外可以获取类初始值设定项使用<xref:System.Type.TypeInitializer%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1330">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="6240b-1331">下表显示了返回通过基类的成员`Get`方法反射的类型上时。</span><span class="sxs-lookup"><span data-stu-id="6240b-1331">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6240b-1332">成员类型</span><span class="sxs-lookup"><span data-stu-id="6240b-1332">Member Type</span></span>|<span data-ttu-id="6240b-1333">Static</span><span class="sxs-lookup"><span data-stu-id="6240b-1333">Static</span></span>|<span data-ttu-id="6240b-1334">非静态</span><span class="sxs-lookup"><span data-stu-id="6240b-1334">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6240b-1335">构造函数</span><span class="sxs-lookup"><span data-stu-id="6240b-1335">Constructor</span></span>|<span data-ttu-id="6240b-1336">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1336">No</span></span>|<span data-ttu-id="6240b-1337">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1337">No</span></span>|  
|<span data-ttu-id="6240b-1338">字段</span><span class="sxs-lookup"><span data-stu-id="6240b-1338">Field</span></span>|<span data-ttu-id="6240b-1339">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1339">No</span></span>|<span data-ttu-id="6240b-1340">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-1340">Yes.</span></span> <span data-ttu-id="6240b-1341">字段始终是按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1341">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-1342">事件</span><span class="sxs-lookup"><span data-stu-id="6240b-1342">Event</span></span>|<span data-ttu-id="6240b-1343">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-1343">Not applicable</span></span>|<span data-ttu-id="6240b-1344">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-1344">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-1345">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1345">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-1346">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-1346">See note 2 below.</span></span>|  
|<span data-ttu-id="6240b-1347">方法</span><span class="sxs-lookup"><span data-stu-id="6240b-1347">Method</span></span>|<span data-ttu-id="6240b-1348">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1348">No</span></span>|<span data-ttu-id="6240b-1349">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-1349">Yes.</span></span> <span data-ttu-id="6240b-1350">方法 （包括虚拟和非虚拟） 可以隐藏通过名称或按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1350">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-1351">嵌套的类型</span><span class="sxs-lookup"><span data-stu-id="6240b-1351">Nested Type</span></span>|<span data-ttu-id="6240b-1352">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1352">No</span></span>|<span data-ttu-id="6240b-1353">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1353">No</span></span>|  
|<span data-ttu-id="6240b-1354">Property</span><span class="sxs-lookup"><span data-stu-id="6240b-1354">Property</span></span>|<span data-ttu-id="6240b-1355">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-1355">Not applicable</span></span>|<span data-ttu-id="6240b-1356">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-1356">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-1357">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1357">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-1358">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-1358">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6240b-1359">按名称和签名隐藏会考虑所有的签名，包括自定义修饰符，部分返回类型、 参数类型、 标记和非托管调用约定。</span><span class="sxs-lookup"><span data-stu-id="6240b-1359">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6240b-1360">这是二进制比较。</span><span class="sxs-lookup"><span data-stu-id="6240b-1360">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6240b-1361">为反射，属性和事件均由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1361">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-1362">如果具有 get 和 set 访问器的属性中的基类，但派生的类具有一个 get 访问器，派生的类属性隐藏基类属性，并且你将无法再访问基类上的资源库。</span><span class="sxs-lookup"><span data-stu-id="6240b-1362">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6240b-1363">自定义特性不是通用类型系统的一部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-1363">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="6240b-1364">如果当前<xref:System.Type>表示构造泛型类型，此方法返回<xref:System.Reflection.MemberInfo>替换为适当的类型参数的类型参数的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-1364">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-1365">如果当前<xref:System.Type>表示泛型类型或泛型方法，则此方法的定义中的类型参数搜索类约束的成员或成员的<xref:System.Object>如果没有类约束。</span><span class="sxs-lookup"><span data-stu-id="6240b-1365">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-1366">下面的代码示例演示如何使用<xref:System.Type.GetMembers>方法重载来收集有关指定类的所有公共成员的信息。</span><span class="sxs-lookup"><span data-stu-id="6240b-1366">The following code example demonstrates how to use the <xref:System.Type.GetMembers> method overload to collect information about all public members of a specified class.</span></span>  
  
 [!code-cpp[Type_GetMembers1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMembers1/CPP/type_getmembers1.cpp#1)]
 [!code-csharp[Type_GetMembers1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMembers1/CS/type_getmembers1.cs#1)]
 [!code-vb[Type_GetMembers1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMembers1/VB/type_getmembers1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMembers(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMembers (bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMembers : System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="type.GetMembers bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMembers(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="6240b-1367">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="6240b-1367">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="6240b-1368">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1368">-or-</span></span> 
<span data-ttu-id="6240b-1369">如果为零 (<see cref="F:System.Reflection.BindingFlags.Default" />)，则返回空数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1369">Zero (<see cref="F:System.Reflection.BindingFlags.Default" />), to return an empty array.</span></span></param>
        <summary><span data-ttu-id="6240b-1370">当在派生类中重写时，使用指定绑定约束，搜索为当前 <see cref="T:System.Type" /> 定义的成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-1370">When overridden in a derived class, searches for the members defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="6240b-1371">表示为当前 <see cref="T:System.Reflection.MemberInfo" /> 定义的匹配指定绑定约束的所有成员的 <see cref="T:System.Type" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1371">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all members defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span></span>  
  
<span data-ttu-id="6240b-1372">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1372">-or-</span></span> 
<span data-ttu-id="6240b-1373">如果没有为当前 <see cref="T:System.Reflection.MemberInfo" /> 定义的成员，或者如果没有一个定义的成员匹配绑定约束，则为 <see cref="T:System.Type" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1373">An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if no members are defined for the current <see cref="T:System.Type" />, or if none of the defined members match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-1374">成员包括属性、 方法、 字段、 事件和等等。</span><span class="sxs-lookup"><span data-stu-id="6240b-1374">Members include properties, methods, fields, events, and so on.</span></span>  
  
 <span data-ttu-id="6240b-1375"><xref:System.Type.GetMembers%2A>方法不返回成员在特定的顺序，如按字母顺序或按声明顺序。</span><span class="sxs-lookup"><span data-stu-id="6240b-1375">The <xref:System.Type.GetMembers%2A> method does not return members in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6240b-1376">你的代码一定不能依赖于成员的返回的顺序因为顺序而变化。</span><span class="sxs-lookup"><span data-stu-id="6240b-1376">Your code must not depend on the order in which members are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6240b-1377">以下<xref:System.Reflection.BindingFlags>的筛选器标志可以用于定义要在搜索中包括的成员：</span><span class="sxs-lookup"><span data-stu-id="6240b-1377">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="6240b-1378">您必须指定这两`BindingFlags.Instance`或`BindingFlags.Static`为了获取返回。</span><span class="sxs-lookup"><span data-stu-id="6240b-1378">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6240b-1379">指定`BindingFlags.Public`若要在搜索中包括公共成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-1379">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="6240b-1380">指定`BindingFlags.NonPublic`若要在搜索中包括非公共成员 （即私有、 内部和受保护成员）。</span><span class="sxs-lookup"><span data-stu-id="6240b-1380">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span> <span data-ttu-id="6240b-1381">仅保护和基类上的内部成员; 不返回在基类上的私有成员不会返回。</span><span class="sxs-lookup"><span data-stu-id="6240b-1381">Only protected and internal members on base classes are returned; private members on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="6240b-1382">指定`BindingFlags.FlattenHierarchy`用以`public`和`protected`层次结构; 上的静态成员`private`中继承的类的静态成员不包括。</span><span class="sxs-lookup"><span data-stu-id="6240b-1382">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="6240b-1383">以下<xref:System.Reflection.BindingFlags>修饰符标志可以用于更改搜索的工作原理：</span><span class="sxs-lookup"><span data-stu-id="6240b-1383">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6240b-1384">`BindingFlags.DeclaredOnly` 若要搜索仅在声明的成员<xref:System.Type>，不只是继承的成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-1384">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="6240b-1385">调用此方法仅含`Public`标志或仅`NonPublic`标志将返回指定的成员，并且不需要任何其他标志。</span><span class="sxs-lookup"><span data-stu-id="6240b-1385">Calling this method with only the `Public` flag or only the `NonPublic` flag will return the specified members and does not require any other flags.</span></span>  
  
 <span data-ttu-id="6240b-1386">有关更多信息，请参见<xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-1386">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6240b-1387">若要获取类初始值设定项 (.cctor) 使用此方法的重载，必须指定<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="6240b-1387">To get the class initializer (.cctor) using this method overload, you must specify <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> (<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> in Visual Basic).</span></span> <span data-ttu-id="6240b-1388">此外可以获取类初始值设定项使用<xref:System.Type.TypeInitializer%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1388">You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.</span></span>  
  
 <span data-ttu-id="6240b-1389">如果当前表示构造泛型类型，此方法返回<xref:System.Reflection.MemberInfo>替换为适当的类型参数的类型参数的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-1389">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-1390">如果当前<xref:System.Type>表示泛型类型或泛型方法，则此方法的定义中的类型参数搜索类约束的成员或成员的<xref:System.Object>如果没有类约束。</span><span class="sxs-lookup"><span data-stu-id="6240b-1390">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-1391">下面的代码示例演示如何使用<xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29>方法重载来收集有关指定类的所有公共实例成员的信息。</span><span class="sxs-lookup"><span data-stu-id="6240b-1391">The following code example demonstrates how to use the <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> method overload to collect information about all public instance members of a specified class.</span></span>  
  
 [!code-cpp[Type_GetMembers2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMembers2/CPP/type_getmembers2.cpp#1)]
 [!code-csharp[Type_GetMembers2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMembers2/CS/type_getmembers2.cs#1)]
 [!code-vb[Type_GetMembers2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMembers2/VB/type_getmembers2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMember(System.String)" />
        <altmember cref="M:System.Type.GetDefaultMembers" />
        <altmember cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMethod">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6240b-1392">获取当前 <see cref="T:System.Type" /> 的特定方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1392">Gets a specific method of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6240b-1393">包含要获取的公共方法的名称的字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-1393">The string containing the name of the public method to get.</span></span></param>
        <summary><span data-ttu-id="6240b-1394">搜索具有指定名称的公共方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1394">Searches for the public method with the specified name.</span></span></summary>
        <returns><span data-ttu-id="6240b-1395">表示具有指定名称的公共方法的对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1395">An object that represents the public method with the specified name, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-1396">搜索`name`区分大小写。</span><span class="sxs-lookup"><span data-stu-id="6240b-1396">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="6240b-1397">搜索中包括的公共静态和公共实例方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1397">The search includes public static and public instance methods.</span></span>  
  
 <span data-ttu-id="6240b-1398">如果一种方法重载方法，有多个公共方法<xref:System.Type.GetMethod%28System.String%29>方法会抛出<xref:System.Reflection.AmbiguousMatchException>异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-1398">If a method is overloaded and has more than one public method, the <xref:System.Type.GetMethod%28System.String%29> method throws an <xref:System.Reflection.AmbiguousMatchException> exception.</span></span> <span data-ttu-id="6240b-1399">在以下示例中，将引发异常的多个公共重载是<xref:System.Int32.ToString%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1399">In the following example, an exception is thrown because there is more than one public overload of the <xref:System.Int32.ToString%2A?displayProperty=nameWithType> method.</span></span>  <span data-ttu-id="6240b-1400">但是，由于`Person.ToString`方法重写<xref:System.Object.ToString%2A?displayProperty=nameWithType>，因此未重载，则<xref:System.Type.GetMethod%28System.String%29>方法是可以检索<xref:System.Reflection.MethodInfo>对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-1400">On the other hand, because the `Person.ToString` method overrides  <xref:System.Object.ToString%2A?displayProperty=nameWithType> and therefore is not overloaded, the <xref:System.Type.GetMethod%28System.String%29> method is able to retrieve the <xref:System.Reflection.MethodInfo> object.</span></span>  
  
 [!code-csharp[System.Type.GetMethod#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.GetMethod/cs/GetMethodWithOverloads2.cs#3)]
 [!code-vb[System.Type.GetMethod#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.GetMethod/vb/GetMethodWithOverloads2.vb#3)]  
  
 <span data-ttu-id="6240b-1401">可以执行以下操作以检索特定的方法之一：</span><span class="sxs-lookup"><span data-stu-id="6240b-1401">You can do one of the following to retrieve a specific method:</span></span>  
  
-   <span data-ttu-id="6240b-1402">调用<xref:System.Type.GetMethod%28System.String%2CSystem.Reflection.BindingFlags%29>方法并指定`bindingAttr`唯一标识该方法的参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1402">Call the <xref:System.Type.GetMethod%28System.String%2CSystem.Reflection.BindingFlags%29> method and specify a `bindingAttr` argument that uniquely identifies the method.</span></span> <span data-ttu-id="6240b-1403">例如，如果将引发异常，因为类型具有一个静态和实例重载，则可以指定`bindingAttr`的参数<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> `Or` <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-1403">For example, if the exception is thrown because a type has a static and an instance overload, you can specify a  `bindingAttr` argument  of <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>`Or`<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="6240b-1404">调用重载<xref:System.Type.GetMethod%2A>方法，包括`types`定义的方法的参数类型的参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1404">Call an overload of the <xref:System.Type.GetMethod%2A> method that includes a `types` parameter which defines the types of the method's parameters.</span></span>  
  
-   <span data-ttu-id="6240b-1405">调用<xref:System.Type.GetMethods>方法来检索包含所有属于一种类型的公共方法的数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1405">Call the <xref:System.Type.GetMethods> method to retrieve an array containing all of the public methods belonging to a type.</span></span> <span data-ttu-id="6240b-1406">然后可以循环访问来识别重复的方法名为`name`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1406">You can then iterate it to identify the duplicate methods named `name`.</span></span>  
  
 <span data-ttu-id="6240b-1407">如果当前表示构造泛型类型，此方法返回<xref:System.Reflection.MethodInfo>具有类型参数替换为适当的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1407">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-1408">如果当前<xref:System.Type>表示泛型类型或泛型方法，则此方法的定义中的类型参数搜索类约束的方法或方法的<xref:System.Object>如果没有类约束。</span><span class="sxs-lookup"><span data-stu-id="6240b-1408">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-1409">为泛型方法，不包括中的类型参数`name`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1409">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="6240b-1410">例如，C# 代码`GetMember("MyMethod<int>")`搜索的文本名称的成员"`MyMethod<int>`"，而不是针对一个名为方法`MyMethod`具有一个类型的泛型参数`int`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1410">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-1411">下面的示例获取名为的方法`MethodA`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1411">The following example gets a method named `MethodA`.</span></span>  
  
 [!code-cpp[Type_GetMethod1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod1/CPP/type_getmethod1.cpp#1)]
 [!code-csharp[Type_GetMethod1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod1/CS/type_getmethod1.cs#1)]
 [!code-vb[Type_GetMethod1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod1/VB/type_getmethod1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="6240b-1412">找到了多个具有指定名称的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1412">More than one method is found with the specified name.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-1413"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1413"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, bindingAttr As BindingFlags) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6240b-1414">包含要获取的方法名称的字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-1414">The string containing the name of the method to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="6240b-1415">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="6240b-1415">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="6240b-1416">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1416">-or-</span></span> 
<span data-ttu-id="6240b-1417">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1417">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="6240b-1418">使用指定绑定约束搜索指定方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1418">Searches for the specified method, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="6240b-1419">表示符合指定要求的方法的对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1419">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-1420">以下<xref:System.Reflection.BindingFlags>的筛选器标志可以用于定义要在搜索中包括的方法：</span><span class="sxs-lookup"><span data-stu-id="6240b-1420">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="6240b-1421">您必须指定这两<xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType>或<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>为了获取返回。</span><span class="sxs-lookup"><span data-stu-id="6240b-1421">You must specify either <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> or <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> in order to get a return.</span></span>  
  
-   <span data-ttu-id="6240b-1422">指定<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>若要在搜索中包括公共方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1422">Specify <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="6240b-1423">指定<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>若要在搜索中包括非公共方法 （即私有、 内部和受保护方法）。</span><span class="sxs-lookup"><span data-stu-id="6240b-1423">Specify <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to include non-public methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="6240b-1424">指定<xref:System.Reflection.BindingFlags.FlattenHierarchy?displayProperty=nameWithType>用以`public`和`protected`层次结构; 上的静态成员`private`中继承的类的静态成员不包括。</span><span class="sxs-lookup"><span data-stu-id="6240b-1424">Specify <xref:System.Reflection.BindingFlags.FlattenHierarchy?displayProperty=nameWithType> to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="6240b-1425">以下<xref:System.Reflection.BindingFlags>修饰符标志可以用于更改搜索的工作原理：</span><span class="sxs-lookup"><span data-stu-id="6240b-1425">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6240b-1426"><xref:System.Reflection.BindingFlags.IgnoreCase?displayProperty=nameWithType> 若要忽略大小写的`name`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1426"><xref:System.Reflection.BindingFlags.IgnoreCase?displayProperty=nameWithType> to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="6240b-1427"><xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> 若要搜索仅上声明的方法<xref:System.Type>，不只是继承的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1427"><xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="6240b-1428">有关更多信息，请参见<xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-1428">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6240b-1429">如果一种方法重载方法，多个重载满足指定的约束`bindingAttr`参数，该方法将引发<xref:System.Reflection.AmbiguousMatchException>异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-1429">If a method is overloaded and more than one overload meets the constraints specified by the `bindingAttr` argument, the method throws an <xref:System.Reflection.AmbiguousMatchException> exception.</span></span> <span data-ttu-id="6240b-1430">在以下示例中，因为引发异常：</span><span class="sxs-lookup"><span data-stu-id="6240b-1430">In the following example, an exception is thrown because:</span></span>  
  
-   <span data-ttu-id="6240b-1431">`TestClass`类型具有两个公共实例重载`DisplayValue`方法，`DisplayValue(String)`和`DisplayValue(String, Object[])`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1431">The `TestClass` type has two public instance overloads of the `DisplayValue` method, `DisplayValue(String)` and `DisplayValue(String, Object[])`.</span></span>  
  
-   <span data-ttu-id="6240b-1432">`TestClass`类型具有两个公共实例重载`Equals`方法，其中之一继承自<xref:System.Object>:`Equals(TestClass)`和`Equals(Object)`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1432">The `TestClass` type has two public instance overloads of the `Equals` method,  one of which is inherited from <xref:System.Object>: `Equals(TestClass)` and `Equals(Object)`.</span></span>  
  
 [!code-csharp[System.Type.GetMethod#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.GetMethod/cs/GetMethodWithOverloads1.cs#2)]
 [!code-vb[System.Type.GetMethod#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.GetMethod/vb/GetMethodWithOverloads1.vb#2)]  
  
 <span data-ttu-id="6240b-1433">可以执行以下操作以检索特定的方法之一：</span><span class="sxs-lookup"><span data-stu-id="6240b-1433">You can do one of the following to retrieve a specific method:</span></span>  
  
-   <span data-ttu-id="6240b-1434">更改的绑定约束。</span><span class="sxs-lookup"><span data-stu-id="6240b-1434">Change the binding constraints.</span></span> <span data-ttu-id="6240b-1435">在上一示例中，尝试检索公共实例`Equals`方法，它是由类型声明并不继承已成功检索`Equals(TestClass)`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1435">In the previous example, attempting to retrieve a public instance `Equals` method that is declared by the type and not inherited successfully retrieves `Equals(TestClass)`.</span></span>  
  
-   <span data-ttu-id="6240b-1436">调用重载<xref:System.Type.GetMethod%2A>方法，包括`types`定义的方法的参数类型的参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1436">Call an overload of the <xref:System.Type.GetMethod%2A> method that includes a `types` parameter which defines the types of the method's parameters.</span></span>  
  
-   <span data-ttu-id="6240b-1437">调用<xref:System.Type.GetMethods%28System.Reflection.BindingFlags%29>方法来检索包含所有具有指定的绑定属性的方法属于一种类型的数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1437">Call the <xref:System.Type.GetMethods%28System.Reflection.BindingFlags%29> method to retrieve an array containing all of the methods belonging to a type that have the specified binding attributes.</span></span> <span data-ttu-id="6240b-1438">然后可以循环访问来识别重复的方法名为`name`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1438">You can then iterate it to identify the duplicate methods named `name`.</span></span> <span data-ttu-id="6240b-1439">这种方法上一示例的处理程序中所示<xref:System.Reflection.AmbiguousMatchException>异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-1439">This approach is illustrated in the previous example's handler for the <xref:System.Reflection.AmbiguousMatchException> exception.</span></span>  
  
 <span data-ttu-id="6240b-1440">如果当前<xref:System.Type>表示构造泛型类型，此方法返回<xref:System.Reflection.MethodInfo>具有类型参数替换为适当的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1440">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-1441">如果当前<xref:System.Type>表示泛型类型或泛型方法，则此方法的定义中的类型参数搜索类约束的方法或方法的<xref:System.Object>如果没有类约束。</span><span class="sxs-lookup"><span data-stu-id="6240b-1441">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-1442">为泛型方法，不包括中的类型参数`name`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1442">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="6240b-1443">例如，C# 代码`GetMember("MyMethod<int>")`搜索的文本名称的成员"`MyMethod<int>`"，而不是针对一个名为方法`MyMethod`具有一个类型的泛型参数`int`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1443">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-1444">下面的示例获取与指定的绑定标志匹配的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1444">The following example gets the method that matches the specified binding flags.</span></span>  
  
 [!code-cpp[Type_GetMethod2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod2/CPP/type_getmethod2.cpp#1)]
 [!code-csharp[Type_GetMethod2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod2/CS/type_getmethod2.cs#1)]
 [!code-vb[Type_GetMethod2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod2/VB/type_getmethod2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="6240b-1445">找到多个具有指定名称且与指定绑定约束匹配的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1445">More than one method is found with the specified name and matching the specified binding constraints.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-1446"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1446"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, types As Type()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * Type[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * Type[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, types)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6240b-1447">包含要获取的公共方法的名称的字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-1447">The string containing the name of the public method to get.</span></span></param>
        <param name="types"><span data-ttu-id="6240b-1448">表示此方法要获取的参数的个数、顺序和类型的 <see cref="T:System.Type" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1448">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span></span>  
  
<span data-ttu-id="6240b-1449">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1449">-or-</span></span> 
<span data-ttu-id="6240b-1450">空的 <see cref="T:System.Type" /> 对象数组（由 <see cref="F:System.Type.EmptyTypes" /> 字段提供），用来获取不采用参数的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1450">An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span></span></param>
        <summary><span data-ttu-id="6240b-1451">搜索其参数与指定参数类型匹配的指定公共方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1451">Searches for the specified public method whose parameters match the specified argument types.</span></span></summary>
        <returns><span data-ttu-id="6240b-1452">表示其参数与指定参数类型匹配的公共方法的对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1452">An object representing the public method whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-1453">搜索`name`区分大小写。</span><span class="sxs-lookup"><span data-stu-id="6240b-1453">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="6240b-1454">搜索中包括的公共静态和公共实例方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1454">The search includes public static and public instance methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-1455">查找构造函数和方法时，不能省略参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1455">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="6240b-1456">调用时，仅可以省略参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1456">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="6240b-1457">如果当前<xref:System.Type>表示构造泛型类型，此方法返回<xref:System.Reflection.MethodInfo>具有类型参数替换为适当的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1457">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-1458">如果当前<xref:System.Type>表示泛型类型或泛型方法，则此方法的定义中的类型参数搜索类约束的方法或方法的<xref:System.Object>如果没有类约束。</span><span class="sxs-lookup"><span data-stu-id="6240b-1458">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-1459">`name`参数不能包含类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1459">The `name` parameter cannot include type arguments.</span></span> <span data-ttu-id="6240b-1460">例如，C# 代码`GetMethod("MyGenericMethod<int>")`搜索的文本名称与方法"`MyGenericMethod<int>`"，而不是针对一个名为方法`MyGenericMethod`具有一个类型的泛型参数`int`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1460">For example, the C# code `GetMethod("MyGenericMethod<int>")` searches for a method with the text name "`MyGenericMethod<int>`", rather than for a method named `MyGenericMethod` that has one generic argument of type `int`.</span></span> <span data-ttu-id="6240b-1461">请改用`GetMethod("MyGenericMethod")`中的相应参数与`types`数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1461">Instead, use `GetMethod("MyGenericMethod")` with the appropriate parameter in the `types` array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-1462">下面的示例查找的特定重载`MethodA`，指定不同的参数类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-1462">The following example finds specific overloads of `MethodA`, specifying a variety of argument types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-1463">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)]示例需要`/unsafe`编译器选项。</span><span class="sxs-lookup"><span data-stu-id="6240b-1463">The [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.</span></span>  
  
 [!code-cpp[Type_GetMethod4#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod4/CPP/type_getmethod4.cpp#1)]
 [!code-csharp[Type_GetMethod4#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod4/CS/type_getmethod4.cs#1)]
 [!code-vb[Type_GetMethod4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod4/VB/type_getmethod4.vb#1)]  
  
 <span data-ttu-id="6240b-1464">下面的示例检索<xref:System.Reflection.MethodInfo>这些对象表示`Add`非泛型类型的方法 (<xref:System.Collections.ArrayList>类)，开放式泛型类型 (<xref:System.Collections.Generic.List%601>类)，并已关闭的泛型类型 (`List(Of String)`类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-1464">The following example retrieves <xref:System.Reflection.MethodInfo> objects that represent the `Add` methods  of a non-generic type (the <xref:System.Collections.ArrayList> class), an open generic type (the <xref:System.Collections.Generic.List%601> class), and a closed generic type (the `List(Of String)` type.</span></span>  
  
 [!code-csharp[System.Type.GetMethod#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.GetMethod/cs/GetMethod1.cs#1)]
 [!code-vb[System.Type.GetMethod#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.GetMethod/vb/GetMethod1.vb#1)]  
  
 <span data-ttu-id="6240b-1465">该示例定义了`GetAddMethod`检索相应的方法<xref:System.Reflection.MethodInfo>对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-1465">The example defines a `GetAddMethod` method that retrieves the appropriate <xref:System.Reflection.MethodInfo> object.</span></span> <span data-ttu-id="6240b-1466">若要提供`types`开放式泛型类型参数，它将调用<xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1466">To provide the `types` argument for an open generic type, it calls the <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="6240b-1467">若要提供`types`封闭式泛型类型参数，它检索的值<xref:System.Type.GenericTypeArguments%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1467">To provide the `types` argument for a closed generic type, it retrieves the value of the <xref:System.Type.GenericTypeArguments%2A?displayProperty=nameWithType> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="6240b-1468">找到了多个具有指定名称和指定参数的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1468">More than one method is found with the specified name and specified parameters.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-1469"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1469"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="6240b-1470">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1470">-or-</span></span> 
 <span data-ttu-id="6240b-1471"><paramref name="types" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1471"><paramref name="types" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="6240b-1472">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1472">-or-</span></span> 
<span data-ttu-id="6240b-1473"><paramref name="types" /> 的其中一个元素为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1473">One of the elements in <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-1474"><paramref name="types" /> 是多维的。</span><span class="sxs-lookup"><span data-stu-id="6240b-1474"><paramref name="types" /> is multidimensional.</span></span></exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, genericParameterCount As Integer, types As Type()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="member this.GetMethod : string * int * Type[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, genericParameterCount, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="types">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, types As Type(), modifiers As ParameterModifier()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6240b-1475">包含要获取的公共方法的名称的字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-1475">The string containing the name of the public method to get.</span></span></param>
        <param name="types"><span data-ttu-id="6240b-1476">表示此方法要获取的参数的个数、顺序和类型的 <see cref="T:System.Type" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1476">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span></span>  
  
<span data-ttu-id="6240b-1477">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1477">-or-</span></span> 
<span data-ttu-id="6240b-1478">空的 <see cref="T:System.Type" /> 对象数组（由 <see cref="F:System.Type.EmptyTypes" /> 字段提供），用来获取不采用参数的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1478">An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span></span></param>
        <param name="modifiers"><span data-ttu-id="6240b-1479"><see cref="T:System.Reflection.ParameterModifier" /> 对象的数组，表示与 <paramref name="types" /> 数组中的相应元素关联的特性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1479">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="6240b-1480">仅当通过 COM 互操作进行调用时才使用，而且仅处理通过引用传递的参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1480">To be only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span> <span data-ttu-id="6240b-1481">默认的联编程序不处理此参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1481">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="6240b-1482">搜索其参数与指定自变量类型及修饰符匹配的指定公共方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1482">Searches for the specified public method whose parameters match the specified argument types and modifiers.</span></span></summary>
        <returns><span data-ttu-id="6240b-1483">表示符合指定需求的公共方法的对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1483">An object representing the public method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-1484">尽管默认联编程序不会处理<xref:System.Reflection.ParameterModifier>(`modifiers`参数)，您可以使用抽象<xref:System.Reflection.Binder?displayProperty=nameWithType>类以编写的自定义联编程序`modifiers`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1484">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="6240b-1485">`ParameterModifier` 通过 COM 互操作调用时，才使用和处理由引用传递的参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1485">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="6240b-1486">搜索`name`区分大小写。</span><span class="sxs-lookup"><span data-stu-id="6240b-1486">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="6240b-1487">搜索中包括的公共静态和公共实例方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1487">The search includes public static and public instance methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-1488">查找构造函数和方法时，不能省略参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1488">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="6240b-1489">调用时，仅可以省略参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1489">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="6240b-1490">如果当前表示构造泛型类型，此方法返回<xref:System.Reflection.MethodInfo>具有类型参数替换为适当的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1490">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-1491">如果当前<xref:System.Type>表示泛型类型或泛型方法，则此方法的定义中的类型参数搜索类约束的方法或方法的<xref:System.Object>如果没有类约束。</span><span class="sxs-lookup"><span data-stu-id="6240b-1491">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-1492">为泛型方法，不包括中的类型参数`name`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1492">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="6240b-1493">例如，C# 代码`GetMethod("MyMethod<int>")`搜索的文本名称的成员"`MyMethod<int>`"，而不是针对一个名为方法`MyMethod`具有一个类型的泛型参数`int`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1493">For example, the C# code `GetMethod("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span> <span data-ttu-id="6240b-1494">请改用`GetMethod("MyMethod")`中的相应参数与`types`数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1494">Instead, use `GetMethod("MyMethod")` with the appropriate parameter in the `types` array.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="6240b-1495">找到了多个具有指定名称和指定参数的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1495">More than one method is found with the specified name and specified parameters.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-1496"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1496"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="6240b-1497">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1497">-or-</span></span> 
 <span data-ttu-id="6240b-1498"><paramref name="types" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1498"><paramref name="types" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="6240b-1499">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1499">-or-</span></span> 
<span data-ttu-id="6240b-1500"><paramref name="types" /> 的其中一个元素为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1500">One of the elements in <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-1501"><paramref name="types" /> 是多维的。</span><span class="sxs-lookup"><span data-stu-id="6240b-1501"><paramref name="types" /> is multidimensional.</span></span>  
  
<span data-ttu-id="6240b-1502">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1502">-or-</span></span> 
 <span data-ttu-id="6240b-1503"><paramref name="modifiers" /> 是多维的。</span><span class="sxs-lookup"><span data-stu-id="6240b-1503"><paramref name="modifiers" /> is multidimensional.</span></span></exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, genericParameterCount As Integer, types As Type(), modifiers As ParameterModifier()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="member this.GetMethod : string * int * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, genericParameterCount, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6240b-1504">包含要获取的方法名称的字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-1504">The string containing the name of the method to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="6240b-1505">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="6240b-1505">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="6240b-1506">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1506">-or-</span></span> 
<span data-ttu-id="6240b-1507">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1507">Zero, to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="6240b-1508">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-1508">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="6240b-1509">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1509">-or-</span></span> 
<span data-ttu-id="6240b-1510">要使用 <see langword="Nothing" /> 的空引用（在 Visual Basic 中为 <see cref="P:System.Type.DefaultBinder" />）。</span><span class="sxs-lookup"><span data-stu-id="6240b-1510">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="types"><span data-ttu-id="6240b-1511">表示此方法要获取的参数的个数、顺序和类型的 <see cref="T:System.Type" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1511">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span></span>  
  
<span data-ttu-id="6240b-1512">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1512">-or-</span></span> 
<span data-ttu-id="6240b-1513">空的 <see cref="T:System.Type" /> 对象数组（由 <see cref="F:System.Type.EmptyTypes" /> 字段提供），用来获取不采用参数的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1513">An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span></span></param>
        <param name="modifiers"><span data-ttu-id="6240b-1514"><see cref="T:System.Reflection.ParameterModifier" /> 对象的数组，表示与 <paramref name="types" /> 数组中的相应元素关联的特性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1514">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="6240b-1515">仅当通过 COM 互操作进行调用时才使用，而且仅处理通过引用传递的参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1515">To be only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span> <span data-ttu-id="6240b-1516">默认的联编程序不处理此参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1516">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="6240b-1517">使用指定绑定约束，搜索其参数与指定自变量类型及修饰符匹配的指定方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1517">Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="6240b-1518">表示符合指定要求的方法的对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1518">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-1519">尽管默认联编程序不会处理<xref:System.Reflection.ParameterModifier>(`modifiers`参数)，您可以使用抽象<xref:System.Reflection.Binder?displayProperty=nameWithType>类以编写的自定义联编程序`modifiers`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1519">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="6240b-1520">`ParameterModifier` 通过 COM 互操作调用时，才使用和处理由引用传递的参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1520">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="6240b-1521">以下<xref:System.Reflection.BindingFlags>的筛选器标志可以用于定义要在搜索中包括的方法：</span><span class="sxs-lookup"><span data-stu-id="6240b-1521">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="6240b-1522">您必须指定这两`BindingFlags.Instance`或`BindingFlags.Static`为了获取返回。</span><span class="sxs-lookup"><span data-stu-id="6240b-1522">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6240b-1523">指定`BindingFlags.Public`若要在搜索中包括公共方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1523">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="6240b-1524">指定`BindingFlags.NonPublic`若要在搜索中包括非公共方法 （即私有、 内部和受保护方法）。</span><span class="sxs-lookup"><span data-stu-id="6240b-1524">Specify `BindingFlags.NonPublic` to include nonpublic methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="6240b-1525">指定`BindingFlags.FlattenHierarchy`用以`public`和`protected`层次结构; 上的静态成员`private`中继承的类的静态成员不包括。</span><span class="sxs-lookup"><span data-stu-id="6240b-1525">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="6240b-1526">以下<xref:System.Reflection.BindingFlags>修饰符标志可以用于更改搜索的工作原理：</span><span class="sxs-lookup"><span data-stu-id="6240b-1526">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6240b-1527">`BindingFlags.IgnoreCase` 若要忽略大小写的`name`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1527">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="6240b-1528">`BindingFlags.DeclaredOnly` 若要搜索仅上声明的方法<xref:System.Type>，不只是继承的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1528">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="6240b-1529">有关更多信息，请参见<xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-1529">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-1530">查找构造函数和方法时，不能省略参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1530">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="6240b-1531">调用时，仅可以省略参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1531">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="6240b-1532">如果当前表示构造泛型类型，此方法返回<xref:System.Reflection.MethodInfo>具有类型参数替换为适当的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1532">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-1533">如果当前<xref:System.Type>表示泛型类型或泛型方法，则此方法的定义中的类型参数搜索类约束的方法或方法的<xref:System.Object>如果没有类约束。</span><span class="sxs-lookup"><span data-stu-id="6240b-1533">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-1534">为泛型方法，不包括中的类型参数`name`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1534">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="6240b-1535">例如，C# 代码`GetMember("MyMethod<int>")`搜索的文本名称的成员"`MyMethod<int>`"，而不是针对一个名为方法`MyMethod`具有一个类型的泛型参数`int`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1535">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-1536">下面的示例查找的特定重载`MethodA`，指定绑定约束和不同的参数类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-1536">The following example finds specific overloads of `MethodA`, specifying binding constraints and a variety of argument types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-1537">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)]示例需要`/unsafe`编译器选项。</span><span class="sxs-lookup"><span data-stu-id="6240b-1537">The [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.</span></span>  
  
 [!code-cpp[Type_GetMethod5#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod5/CPP/type_getmethod5.cpp#1)]
 [!code-csharp[Type_GetMethod5#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod5/CS/type_getmethod5.cs#1)]
 [!code-vb[Type_GetMethod5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod5/VB/type_getmethod5.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="6240b-1538">找到多个具有指定名称且与指定绑定约束匹配的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1538">More than one method is found with the specified name and matching the specified binding constraints.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-1539"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1539"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="6240b-1540">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1540">-or-</span></span> 
 <span data-ttu-id="6240b-1541"><paramref name="types" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1541"><paramref name="types" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="6240b-1542">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1542">-or-</span></span> 
<span data-ttu-id="6240b-1543"><paramref name="types" /> 的其中一个元素为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1543">One of the elements in <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-1544"><paramref name="types" /> 是多维的。</span><span class="sxs-lookup"><span data-stu-id="6240b-1544"><paramref name="types" /> is multidimensional.</span></span>  
  
<span data-ttu-id="6240b-1545">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1545">-or-</span></span> 
 <span data-ttu-id="6240b-1546"><paramref name="modifiers" /> 是多维的。</span><span class="sxs-lookup"><span data-stu-id="6240b-1546"><paramref name="modifiers" /> is multidimensional.</span></span></exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="member this.GetMethod : string * int * System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, genericParameterCount, bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6240b-1547">包含要获取的方法名称的字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-1547">The string containing the name of the method to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="6240b-1548">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="6240b-1548">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="6240b-1549">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1549">-or-</span></span> 
<span data-ttu-id="6240b-1550">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1550">Zero, to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="6240b-1551">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-1551">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="6240b-1552">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1552">-or-</span></span> 
<span data-ttu-id="6240b-1553">要使用 <see langword="Nothing" /> 的空引用（在 Visual Basic 中为 <see cref="P:System.Type.DefaultBinder" />）。</span><span class="sxs-lookup"><span data-stu-id="6240b-1553">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="callConvention"><span data-ttu-id="6240b-1554">该对象用于指定要使用的一套规则，这些规则涉及自变量的顺序和布局、传递返回值的方式、用于自变量的寄存器和清理堆栈的方式。</span><span class="sxs-lookup"><span data-stu-id="6240b-1554">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and how the stack is cleaned up.</span></span></param>
        <param name="types"><span data-ttu-id="6240b-1555">表示此方法要获取的参数的个数、顺序和类型的 <see cref="T:System.Type" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1555">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span></span>  
  
<span data-ttu-id="6240b-1556">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1556">-or-</span></span> 
<span data-ttu-id="6240b-1557">空的 <see cref="T:System.Type" /> 对象数组（由 <see cref="F:System.Type.EmptyTypes" /> 字段提供），用来获取不采用参数的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1557">An empty array of <see cref="T:System.Type" /> objects (as provided by the <see cref="F:System.Type.EmptyTypes" /> field) to get a method that takes no parameters.</span></span></param>
        <param name="modifiers"><span data-ttu-id="6240b-1558"><see cref="T:System.Reflection.ParameterModifier" /> 对象的数组，表示与 <paramref name="types" /> 数组中的相应元素关联的特性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1558">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="6240b-1559">仅当通过 COM 互操作进行调用时才使用，而且仅处理通过引用传递的参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1559">To be only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span> <span data-ttu-id="6240b-1560">默认的联编程序不处理此参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1560">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="6240b-1561">用指定的绑定约束和指定的调用约定，搜索参数与指定的自变量类型及修饰符相匹配的指定方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1561">Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span></span></summary>
        <returns><span data-ttu-id="6240b-1562">表示符合指定要求的方法的对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1562">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-1563">尽管默认联编程序不会处理<xref:System.Reflection.ParameterModifier>(`modifiers`参数)，您可以使用抽象<xref:System.Reflection.Binder?displayProperty=nameWithType>类以编写的自定义联编程序`modifiers`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1563">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="6240b-1564">`ParameterModifier` 通过 COM 互操作调用时，才使用和处理由引用传递的参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1564">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="6240b-1565">下表显示了返回通过基类的成员`GetXXX`方法反射的类型上时。</span><span class="sxs-lookup"><span data-stu-id="6240b-1565">The following table shows what members of a base class are returned by the `GetXXX` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6240b-1566">成员类型</span><span class="sxs-lookup"><span data-stu-id="6240b-1566">Member Type</span></span>|<span data-ttu-id="6240b-1567">Static</span><span class="sxs-lookup"><span data-stu-id="6240b-1567">Static</span></span>|<span data-ttu-id="6240b-1568">非静态</span><span class="sxs-lookup"><span data-stu-id="6240b-1568">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6240b-1569">构造函数</span><span class="sxs-lookup"><span data-stu-id="6240b-1569">Constructor</span></span>|<span data-ttu-id="6240b-1570">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1570">No</span></span>|<span data-ttu-id="6240b-1571">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1571">No</span></span>|  
|<span data-ttu-id="6240b-1572">字段</span><span class="sxs-lookup"><span data-stu-id="6240b-1572">Field</span></span>|<span data-ttu-id="6240b-1573">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1573">No</span></span>|<span data-ttu-id="6240b-1574">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-1574">Yes.</span></span> <span data-ttu-id="6240b-1575">字段始终是按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1575">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-1576">事件</span><span class="sxs-lookup"><span data-stu-id="6240b-1576">Event</span></span>|<span data-ttu-id="6240b-1577">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-1577">Not applicable</span></span>|<span data-ttu-id="6240b-1578">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-1578">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-1579">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1579">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-1580">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-1580">See note 2 below.</span></span>|  
|<span data-ttu-id="6240b-1581">方法</span><span class="sxs-lookup"><span data-stu-id="6240b-1581">Method</span></span>|<span data-ttu-id="6240b-1582">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1582">No</span></span>|<span data-ttu-id="6240b-1583">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-1583">Yes.</span></span> <span data-ttu-id="6240b-1584">方法 （包括虚拟和非虚拟） 可以隐藏通过名称或按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1584">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-1585">嵌套的类型</span><span class="sxs-lookup"><span data-stu-id="6240b-1585">Nested Type</span></span>|<span data-ttu-id="6240b-1586">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1586">No</span></span>|<span data-ttu-id="6240b-1587">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1587">No</span></span>|  
|<span data-ttu-id="6240b-1588">Property</span><span class="sxs-lookup"><span data-stu-id="6240b-1588">Property</span></span>|<span data-ttu-id="6240b-1589">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-1589">Not applicable</span></span>|<span data-ttu-id="6240b-1590">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-1590">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-1591">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1591">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-1592">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-1592">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6240b-1593">按名称和签名隐藏会考虑所有的签名，包括自定义修饰符，部分返回类型、 参数类型、 标记和非托管调用约定。</span><span class="sxs-lookup"><span data-stu-id="6240b-1593">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6240b-1594">这是二进制比较。</span><span class="sxs-lookup"><span data-stu-id="6240b-1594">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6240b-1595">为反射，属性和事件均由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1595">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-1596">如果具有 get 和 set 访问器的属性中的基类，但派生的类具有一个 get 访问器，派生的类属性隐藏基类属性，并且你将无法再访问基类上的资源库。</span><span class="sxs-lookup"><span data-stu-id="6240b-1596">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6240b-1597">自定义特性不是通用类型系统的一部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-1597">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="6240b-1598">以下<xref:System.Reflection.BindingFlags>的筛选器标志可以用于定义要在搜索中包括的方法：</span><span class="sxs-lookup"><span data-stu-id="6240b-1598">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="6240b-1599">您必须指定这两`BindingFlags.Instance`或`BindingFlags.Static`为了获取返回。</span><span class="sxs-lookup"><span data-stu-id="6240b-1599">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6240b-1600">指定`BindingFlags.Public`若要在搜索中包括公共方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1600">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="6240b-1601">指定`BindingFlags.NonPublic`若要在搜索中包括非公共方法 （即私有、 内部和受保护方法）。</span><span class="sxs-lookup"><span data-stu-id="6240b-1601">Specify `BindingFlags.NonPublic` to include nonpublic methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="6240b-1602">指定`BindingFlags.FlattenHierarchy`用以`public`和`protected`层次结构; 上的静态成员`private`中继承的类的静态成员不包括。</span><span class="sxs-lookup"><span data-stu-id="6240b-1602">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="6240b-1603">以下<xref:System.Reflection.BindingFlags>修饰符标志可以用于更改搜索的工作原理：</span><span class="sxs-lookup"><span data-stu-id="6240b-1603">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6240b-1604">`BindingFlags.IgnoreCase` 若要忽略大小写的`name`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1604">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="6240b-1605">`BindingFlags.DeclaredOnly` 若要搜索仅上声明的方法<xref:System.Type>，不只是继承的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1605">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="6240b-1606">有关更多信息，请参见<xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-1606">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-1607">查找构造函数和方法时，不能省略参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1607">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="6240b-1608">调用时，仅可以省略参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1608">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="6240b-1609">如果当前表示构造泛型类型，此方法返回<xref:System.Reflection.MethodInfo>具有类型参数替换为适当的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1609">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-1610">如果当前<xref:System.Type>表示泛型类型或泛型方法，则此方法的定义中的类型参数搜索类约束的方法或方法的<xref:System.Object>如果没有类约束。</span><span class="sxs-lookup"><span data-stu-id="6240b-1610">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-1611">为泛型方法，不包括中的类型参数`name`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1611">For generic methods, do not include the type arguments in `name`.</span></span> <span data-ttu-id="6240b-1612">例如，C# 代码`GetMember("MyMethod<int>")`搜索的文本名称的成员"`MyMethod<int>`"，而不是针对一个名为方法`MyMethod`具有一个类型的泛型参数`int`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1612">For example, the C# code `GetMember("MyMethod<int>")` searches for a member with the text name "`MyMethod<int>`", rather than for a method named `MyMethod` that has one generic argument of type `int`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-1613">下面的示例查找的特定重载`MethodA`，指定绑定约束，调用约定和不同的参数类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-1613">The following example finds specific overloads of `MethodA`, specifying binding constraints, calling conventions, and a variety of argument types.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-1614">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)]示例需要`/unsafe`编译器选项。</span><span class="sxs-lookup"><span data-stu-id="6240b-1614">The [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.</span></span>  
  
 [!code-cpp[Type_GetMethod3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod3/CPP/type_getmethod3.cpp#1)]
 [!code-csharp[Type_GetMethod3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod3/CS/type_getmethod3.cs#1)]
 [!code-vb[Type_GetMethod3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod3/VB/type_getmethod3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="6240b-1615">找到多个具有指定名称且与指定绑定约束匹配的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1615">More than one method is found with the specified name and matching the specified binding constraints.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-1616"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1616"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="6240b-1617">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1617">-or-</span></span> 
 <span data-ttu-id="6240b-1618"><paramref name="types" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1618"><paramref name="types" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="6240b-1619">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1619">-or-</span></span> 
<span data-ttu-id="6240b-1620"><paramref name="types" /> 的其中一个元素为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1620">One of the elements in <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-1621"><paramref name="types" /> 是多维的。</span><span class="sxs-lookup"><span data-stu-id="6240b-1621"><paramref name="types" /> is multidimensional.</span></span>  
  
<span data-ttu-id="6240b-1622">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1622">-or-</span></span> 
 <span data-ttu-id="6240b-1623"><paramref name="modifiers" /> 是多维的。</span><span class="sxs-lookup"><span data-stu-id="6240b-1623"><paramref name="modifiers" /> is multidimensional.</span></span></exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.MethodInfo GetMethod(string name, int32 genericParameterCount, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethod(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, int genericParameterCount, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="member this.GetMethod : string * int * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethod (name, genericParameterCount, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="callConvention">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethodImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::MethodInfo ^ GetMethodImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethodImpl : string * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethodImpl (name, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6240b-1624">包含要获取的方法名称的字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-1624">The string containing the name of the method to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="6240b-1625">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="6240b-1625">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="6240b-1626">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1626">-or-</span></span> 
<span data-ttu-id="6240b-1627">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1627">Zero, to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="6240b-1628">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-1628">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="6240b-1629">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1629">-or-</span></span> 
<span data-ttu-id="6240b-1630">要使用 <see langword="Nothing" /> 的空引用（在 Visual Basic 中为 <see cref="P:System.Type.DefaultBinder" />）。</span><span class="sxs-lookup"><span data-stu-id="6240b-1630">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="callConvention"><span data-ttu-id="6240b-1631">该对象，用于指定要使用的一套规则，这些规则涉及自变量的顺序和布局、传递返回值的方式、用于自变量的寄存器以及哪个进程清理堆栈。</span><span class="sxs-lookup"><span data-stu-id="6240b-1631">The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and what process cleans up the stack.</span></span></param>
        <param name="types"><span data-ttu-id="6240b-1632">表示此方法要获取的参数的个数、顺序和类型的 <see cref="T:System.Type" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1632">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span></span>  
  
<span data-ttu-id="6240b-1633">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1633">-or-</span></span> 
<span data-ttu-id="6240b-1634">一个类型为 <see cref="T:System.Type" />（即 Type[] types = new Type[0]）的空数组，用于获取一个不带参数的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1634">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</span></span>  
  
<span data-ttu-id="6240b-1635">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1635">-or-</span></span> 
 <span data-ttu-id="6240b-1636"><see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1636"><see langword="null" />.</span></span> <span data-ttu-id="6240b-1637">如果 <paramref name="types" /> 为 <see langword="null" />，则参数不匹配。</span><span class="sxs-lookup"><span data-stu-id="6240b-1637">If <paramref name="types" /> is <see langword="null" />, arguments are not matched.</span></span></param>
        <param name="modifiers"><span data-ttu-id="6240b-1638"><see cref="T:System.Reflection.ParameterModifier" /> 对象的数组，表示与 <paramref name="types" /> 数组中的相应元素关联的特性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1638">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="6240b-1639">默认的联编程序不处理此参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1639">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="6240b-1640">当在派生类中重写时，使用指定的绑定约束和指定的调用约定搜索其参数与指定的自变量类型和修饰符匹配的指定方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1640">When overridden in a derived class, searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span></span></summary>
        <returns><span data-ttu-id="6240b-1641">表示符合指定要求的方法的对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1641">An object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-1642">尽管默认联编程序不会处理<xref:System.Reflection.ParameterModifier>(`modifiers`参数)，您可以使用抽象<xref:System.Reflection.Binder?displayProperty=nameWithType>类以编写的自定义联编程序`modifiers`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1642">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="6240b-1643">`ParameterModifier` 通过 COM 互操作调用时，才使用和处理由引用传递的参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1643">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="6240b-1644">如果 `types` 为 `null`，则自变量不匹配。</span><span class="sxs-lookup"><span data-stu-id="6240b-1644">If `types` is `null`, arguments are not matched.</span></span>  
  
 <span data-ttu-id="6240b-1645">以下<xref:System.Reflection.BindingFlags>的筛选器标志可以用于定义要在搜索中包括的方法：</span><span class="sxs-lookup"><span data-stu-id="6240b-1645">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="6240b-1646">您必须指定这两`BindingFlags.Instance`或`BindingFlags.Static`为了获取返回。</span><span class="sxs-lookup"><span data-stu-id="6240b-1646">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6240b-1647">指定`BindingFlags.Public`若要在搜索中包括公共方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1647">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="6240b-1648">指定`BindingFlags.NonPublic`若要在搜索中包括非公共方法 （即私有、 内部和受保护方法）。</span><span class="sxs-lookup"><span data-stu-id="6240b-1648">Specify `BindingFlags.NonPublic` to include non-public methods (that is, private, internal, and protected methods) in the search.</span></span>  
  
-   <span data-ttu-id="6240b-1649">指定`BindingFlags.FlattenHierarchy`用以`public`和`protected`层次结构; 上的静态成员`private`中继承的类的静态成员不包括。</span><span class="sxs-lookup"><span data-stu-id="6240b-1649">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="6240b-1650">以下<xref:System.Reflection.BindingFlags>修饰符标志可以用于更改搜索的工作原理：</span><span class="sxs-lookup"><span data-stu-id="6240b-1650">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6240b-1651">`BindingFlags.IgnoreCase` 若要忽略大小写的`name`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1651">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="6240b-1652">`BindingFlags.DeclaredOnly` 若要搜索仅上声明的方法<xref:System.Type>，不只是继承的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1652">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="6240b-1653">有关更多信息，请参见<xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-1653">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="6240b-1654">找到多个具有指定名称且与指定绑定约束匹配的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1654">More than one method is found with the specified name and matching the specified binding constraints.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-1655"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1655"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-1656"><paramref name="types" /> 是多维的。</span><span class="sxs-lookup"><span data-stu-id="6240b-1656"><paramref name="types" /> is multidimensional.</span></span>  
  
<span data-ttu-id="6240b-1657">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1657">-or-</span></span> 
 <span data-ttu-id="6240b-1658"><paramref name="modifiers" /> 是多维的。</span><span class="sxs-lookup"><span data-stu-id="6240b-1658"><paramref name="modifiers" /> is multidimensional.</span></span>  
  
<span data-ttu-id="6240b-1659">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1659">-or-</span></span> 
 <span data-ttu-id="6240b-1660"><paramref name="types" /> 和 <paramref name="modifiers" /> 的长度不相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-1660"><paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6240b-1661">当前的类型是 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 或 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1661">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" /> or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span></span></exception>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.CallingConventions" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetMethods" />
      </Docs>
    </Member>
    <Member MemberName="GetMethodImpl">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MethodInfo GetMethodImpl (string name, int genericParameterCount, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethodImpl(string name, int32 genericParameterCount, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethodImpl(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MethodInfo ^ GetMethodImpl(System::String ^ name, int genericParameterCount, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethodImpl : string * int * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo&#xA;override this.GetMethodImpl : string * int * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="type.GetMethodImpl (name, genericParameterCount, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="genericParameterCount" Type="System.Int32" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="genericParameterCount">To be added.</param>
        <param name="bindingAttr">To be added.</param>
        <param name="binder">To be added.</param>
        <param name="callConvention">To be added.</param>
        <param name="types">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMethods">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6240b-1662">获取当前 <see cref="T:System.Type" /> 的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1662">Gets the methods of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetMethods ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethods" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethods () As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods();" />
      <MemberSignature Language="F#" Value="abstract member GetMethods : unit -&gt; System.Reflection.MethodInfo[]&#xA;override this.GetMethods : unit -&gt; System.Reflection.MethodInfo[]" Usage="type.GetMethods " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethods</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-1663">返回为当前 <see cref="T:System.Type" /> 的所有公共方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1663">Returns all the public methods of the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="6240b-1664">表示为当前 <see cref="T:System.Reflection.MethodInfo" /> 定义的所有公共方法的 <see cref="T:System.Type" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1664">An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all the public methods defined for the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="6240b-1665">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1665">-or-</span></span> 
<span data-ttu-id="6240b-1666">如果没有为当前 <see cref="T:System.Reflection.MethodInfo" /> 定义的公共方法，则为 <see cref="T:System.Type" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1666">An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no public methods are defined for the current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-1667"><xref:System.Type.GetMethods%2A>方法不返回方法按特定顺序，如按字母顺序或按声明顺序。</span><span class="sxs-lookup"><span data-stu-id="6240b-1667">The <xref:System.Type.GetMethods%2A> method does not return methods in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6240b-1668">你的代码一定不能依赖于方法的返回的顺序因为顺序而变化。</span><span class="sxs-lookup"><span data-stu-id="6240b-1668">Your code must not depend on the order in which methods are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6240b-1669">此调用所返回的方法的数组中不包括构造函数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1669">Constructors are not included in the array of methods returned by this call.</span></span> <span data-ttu-id="6240b-1670">单独调用`GetConstructors()`获取构造函数方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1670">Make a separate call to `GetConstructors()` to get the constructor methods.</span></span>  
  
 <span data-ttu-id="6240b-1671">下表显示了返回通过基类的成员`Get`方法反射的类型上时。</span><span class="sxs-lookup"><span data-stu-id="6240b-1671">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6240b-1672">成员类型</span><span class="sxs-lookup"><span data-stu-id="6240b-1672">Member Type</span></span>|<span data-ttu-id="6240b-1673">Static</span><span class="sxs-lookup"><span data-stu-id="6240b-1673">Static</span></span>|<span data-ttu-id="6240b-1674">非静态</span><span class="sxs-lookup"><span data-stu-id="6240b-1674">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6240b-1675">构造函数</span><span class="sxs-lookup"><span data-stu-id="6240b-1675">Constructor</span></span>|<span data-ttu-id="6240b-1676">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1676">No</span></span>|<span data-ttu-id="6240b-1677">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1677">No</span></span>|  
|<span data-ttu-id="6240b-1678">字段</span><span class="sxs-lookup"><span data-stu-id="6240b-1678">Field</span></span>|<span data-ttu-id="6240b-1679">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1679">No</span></span>|<span data-ttu-id="6240b-1680">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-1680">Yes.</span></span> <span data-ttu-id="6240b-1681">字段始终是按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1681">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-1682">事件</span><span class="sxs-lookup"><span data-stu-id="6240b-1682">Event</span></span>|<span data-ttu-id="6240b-1683">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-1683">Not applicable</span></span>|<span data-ttu-id="6240b-1684">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-1684">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-1685">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1685">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-1686">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-1686">See note 2 below.</span></span>|  
|<span data-ttu-id="6240b-1687">方法</span><span class="sxs-lookup"><span data-stu-id="6240b-1687">Method</span></span>|<span data-ttu-id="6240b-1688">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1688">No</span></span>|<span data-ttu-id="6240b-1689">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-1689">Yes.</span></span> <span data-ttu-id="6240b-1690">方法 （包括虚拟和非虚拟） 可以隐藏通过名称或按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1690">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-1691">嵌套的类型</span><span class="sxs-lookup"><span data-stu-id="6240b-1691">Nested Type</span></span>|<span data-ttu-id="6240b-1692">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1692">No</span></span>|<span data-ttu-id="6240b-1693">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1693">No</span></span>|  
|<span data-ttu-id="6240b-1694">Property</span><span class="sxs-lookup"><span data-stu-id="6240b-1694">Property</span></span>|<span data-ttu-id="6240b-1695">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-1695">Not applicable</span></span>|<span data-ttu-id="6240b-1696">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-1696">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-1697">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1697">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-1698">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-1698">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6240b-1699">按名称和签名隐藏会考虑所有的签名，包括自定义修饰符，部分返回类型、 参数类型、 标记和非托管调用约定。</span><span class="sxs-lookup"><span data-stu-id="6240b-1699">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6240b-1700">这是二进制比较。</span><span class="sxs-lookup"><span data-stu-id="6240b-1700">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6240b-1701">为反射，属性和事件均由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1701">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-1702">如果具有 get 和 set 访问器的属性中的基类，但派生的类具有一个 get 访问器，派生的类属性隐藏基类属性，并且你将无法再访问基类上的资源库。</span><span class="sxs-lookup"><span data-stu-id="6240b-1702">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6240b-1703">自定义特性不是通用类型系统的一部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-1703">Custom attributes are not part of the common type system.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-1704">查找构造函数和方法时，不能省略参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1704">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="6240b-1705">调用时，仅可以省略参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1705">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="6240b-1706">如果当前表示构造泛型类型，此方法返回<xref:System.Reflection.MethodInfo>替换为适当的类型参数的类型参数的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-1706">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-1707">如果当前<xref:System.Type>表示泛型类型或泛型方法，则此方法的定义中的类型参数搜索类约束的方法或方法的<xref:System.Object>如果没有类约束。</span><span class="sxs-lookup"><span data-stu-id="6240b-1707">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetMethods(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMethods (bindingAttr As BindingFlags) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMethods : System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo[]" Usage="type.GetMethods bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetMethods(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="6240b-1708">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="6240b-1708">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="6240b-1709">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1709">-or-</span></span> 
<span data-ttu-id="6240b-1710">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1710">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="6240b-1711">当在派生类中重写时，使用指定绑定约束，搜索为当前 <see cref="T:System.Type" /> 定义的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1711">When overridden in a derived class, searches for the methods defined for the current <see cref="T:System.Type" />, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="6240b-1712">表示为当前 <see cref="T:System.Reflection.MethodInfo" /> 定义的匹配指定绑定约束的所有方法的 <see cref="T:System.Type" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1712">An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all methods defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span></span>  
  
<span data-ttu-id="6240b-1713">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1713">-or-</span></span> 
<span data-ttu-id="6240b-1714">如果没有为当前 <see cref="T:System.Reflection.MethodInfo" /> 定义的方法，或者如果没有一个定义的方法匹配绑定约束，则为 <see cref="T:System.Type" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1714">An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no methods are defined for the current <see cref="T:System.Type" />, or if none of the defined methods match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-1715"><xref:System.Type.GetMethods%2A>方法不返回方法按特定顺序，如按字母顺序或按声明顺序。</span><span class="sxs-lookup"><span data-stu-id="6240b-1715">The <xref:System.Type.GetMethods%2A> method does not return methods in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6240b-1716">你的代码一定不能依赖于方法的返回的顺序因为顺序而变化。</span><span class="sxs-lookup"><span data-stu-id="6240b-1716">Your code must not depend on the order in which methods are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6240b-1717">以下<xref:System.Reflection.BindingFlags>的筛选器标志可以用于定义要在搜索中包括的方法：</span><span class="sxs-lookup"><span data-stu-id="6240b-1717">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:</span></span>  
  
-   <span data-ttu-id="6240b-1718">您必须指定这两`BindingFlags.Instance`或`BindingFlags.Static`为了获取返回。</span><span class="sxs-lookup"><span data-stu-id="6240b-1718">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6240b-1719">指定`BindingFlags.Public`若要在搜索中包括公共方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1719">Specify `BindingFlags.Public` to include public methods in the search.</span></span>  
  
-   <span data-ttu-id="6240b-1720">指定`BindingFlags.NonPublic`若要在搜索中包括非公共方法 （即私有、 内部和受保护方法）。</span><span class="sxs-lookup"><span data-stu-id="6240b-1720">Specify `BindingFlags.NonPublic` to include non-public methods (that is, private, internal, and protected methods) in the search.</span></span> <span data-ttu-id="6240b-1721">仅保护并返回基的类上的内部方法;在基类上的私有方法不会返回。</span><span class="sxs-lookup"><span data-stu-id="6240b-1721">Only protected and internal methods on base classes are returned; private methods on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="6240b-1722">指定`BindingFlags.FlattenHierarchy`用以`public`和`protected`层次结构; 上的静态成员`private`中继承的类的静态成员不包括。</span><span class="sxs-lookup"><span data-stu-id="6240b-1722">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="6240b-1723">以下<xref:System.Reflection.BindingFlags>修饰符标志可以用于更改搜索的工作原理：</span><span class="sxs-lookup"><span data-stu-id="6240b-1723">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6240b-1724">`BindingFlags.DeclaredOnly` 若要搜索仅上声明的方法<xref:System.Type>，不只是继承的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1724">`BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.</span></span>  
  
 <span data-ttu-id="6240b-1725">有关更多信息，请参见<xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-1725">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-1726">查找构造函数和方法时，不能省略参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1726">You cannot omit parameters when looking up constructors and methods.</span></span> <span data-ttu-id="6240b-1727">调用时，仅可以省略参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1727">You can only omit parameters when invoking.</span></span>  
  
 <span data-ttu-id="6240b-1728">如果当前表示构造泛型类型，此方法返回<xref:System.Reflection.MethodInfo>替换为适当的类型参数的类型参数的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-1728">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-1729">如果当前<xref:System.Type>表示泛型类型或泛型方法，则此方法的定义中的类型参数搜索类约束的方法或方法的<xref:System.Object>如果没有类约束。</span><span class="sxs-lookup"><span data-stu-id="6240b-1729">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-1730">下面的示例使用两个公共方法和一个受保护的方法创建一个类，创建`Type`对象对应于`MyTypeClass`，获取所有公共和非公共方法，并显示它们的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-1730">The following example creates a class with two public methods and one protected method, creates a `Type` object corresponding to `MyTypeClass`, gets all public and non-public methods, and displays their names.</span></span>  
  
 [!code-cpp[Type_GetMethods2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethods2/CPP/type_getmethods2.cpp#1)]
 [!code-csharp[Type_GetMethods2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethods2/CS/type_getmethods2.cs#1)]
 [!code-vb[Type_GetMethods2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethods2/VB/type_getmethods2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MethodInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNestedType">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6240b-1731">获取嵌套在当前 <see cref="T:System.Type" /> 中的特定类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-1731">Gets a specific type nested within the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public Type GetNestedType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNestedType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedType (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetNestedType(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedType : string -&gt; Type&#xA;override this.GetNestedType : string -&gt; Type" Usage="type.GetNestedType name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedType(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6240b-1732">包含要获取的嵌套类型的名称的字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-1732">The string containing the name of the nested type to get.</span></span></param>
        <summary><span data-ttu-id="6240b-1733">搜索具有指定名称的公共嵌套类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-1733">Searches for the public nested type with the specified name.</span></span></summary>
        <returns><span data-ttu-id="6240b-1734">如找到，则为表示具有指定名称的公共嵌套类型的对象；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1734">An object representing the public nested type with the specified name, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-1735">搜索`name`区分大小写。</span><span class="sxs-lookup"><span data-stu-id="6240b-1735">The search for `name` is case-sensitive.</span></span>  
  
 <span data-ttu-id="6240b-1736">使用的嵌套类的简单名称`name`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1736">Use the simple name of the nested class for `name`.</span></span> <span data-ttu-id="6240b-1737">不符合其外部类的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-1737">Do not qualify it with the name of the outer class.</span></span> <span data-ttu-id="6240b-1738">为泛型的嵌套类，即使用重整的名称的、 追加抑音符和泛型参数的数目。</span><span class="sxs-lookup"><span data-stu-id="6240b-1738">For a generic nested class, use the mangled name - that is, append a grave accent and the number of generic arguments.</span></span> <span data-ttu-id="6240b-1739">例如，使用字符串"内部\`1"来获取泛型嵌套类`Inner<T>`(`Inner(Of T)`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="6240b-1739">For example, use the string "Inner\`1" to get the generic nested class `Inner<T>` (`Inner(Of T)` in Visual Basic).</span></span> <span data-ttu-id="6240b-1740">不包括类型参数的特定于语言的语法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1740">Do not include language-specific syntax for type parameters.</span></span>  
  
 <span data-ttu-id="6240b-1741">下表显示了返回通过基类的成员`Get`方法反射的类型上时。</span><span class="sxs-lookup"><span data-stu-id="6240b-1741">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6240b-1742">成员类型</span><span class="sxs-lookup"><span data-stu-id="6240b-1742">Member Type</span></span>|<span data-ttu-id="6240b-1743">Static</span><span class="sxs-lookup"><span data-stu-id="6240b-1743">Static</span></span>|<span data-ttu-id="6240b-1744">非静态</span><span class="sxs-lookup"><span data-stu-id="6240b-1744">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6240b-1745">构造函数</span><span class="sxs-lookup"><span data-stu-id="6240b-1745">Constructor</span></span>|<span data-ttu-id="6240b-1746">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1746">No</span></span>|<span data-ttu-id="6240b-1747">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1747">No</span></span>|  
|<span data-ttu-id="6240b-1748">字段</span><span class="sxs-lookup"><span data-stu-id="6240b-1748">Field</span></span>|<span data-ttu-id="6240b-1749">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1749">No</span></span>|<span data-ttu-id="6240b-1750">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-1750">Yes.</span></span> <span data-ttu-id="6240b-1751">字段始终是按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1751">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-1752">事件</span><span class="sxs-lookup"><span data-stu-id="6240b-1752">Event</span></span>|<span data-ttu-id="6240b-1753">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-1753">Not applicable</span></span>|<span data-ttu-id="6240b-1754">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-1754">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-1755">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1755">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-1756">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-1756">See note 2 below.</span></span>|  
|<span data-ttu-id="6240b-1757">方法</span><span class="sxs-lookup"><span data-stu-id="6240b-1757">Method</span></span>|<span data-ttu-id="6240b-1758">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1758">No</span></span>|<span data-ttu-id="6240b-1759">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-1759">Yes.</span></span> <span data-ttu-id="6240b-1760">方法 （包括虚拟和非虚拟） 可以隐藏通过名称或按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1760">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-1761">嵌套的类型</span><span class="sxs-lookup"><span data-stu-id="6240b-1761">Nested Type</span></span>|<span data-ttu-id="6240b-1762">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1762">No</span></span>|<span data-ttu-id="6240b-1763">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1763">No</span></span>|  
|<span data-ttu-id="6240b-1764">Property</span><span class="sxs-lookup"><span data-stu-id="6240b-1764">Property</span></span>|<span data-ttu-id="6240b-1765">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-1765">Not applicable</span></span>|<span data-ttu-id="6240b-1766">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-1766">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-1767">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1767">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-1768">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-1768">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6240b-1769">按名称和签名隐藏会考虑所有的签名，包括自定义修饰符，部分返回类型、 参数类型、 标记和非托管调用约定。</span><span class="sxs-lookup"><span data-stu-id="6240b-1769">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6240b-1770">这是二进制比较。</span><span class="sxs-lookup"><span data-stu-id="6240b-1770">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6240b-1771">为反射，属性和事件均由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1771">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-1772">如果具有 get 和 set 访问器的属性中的基类，但派生的类具有一个 get 访问器，派生的类属性隐藏基类属性，并且你将无法再访问基类上的资源库。</span><span class="sxs-lookup"><span data-stu-id="6240b-1772">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6240b-1773">自定义特性不是通用类型系统的一部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-1773">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="6240b-1774">如果当前<xref:System.Type>表示的类型参数的泛型类型或泛型方法定义中，在此方法搜索类约束的嵌套的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-1774">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="6240b-1775">如果嵌套的类型是泛型，则此方法返回其泛型类型定义。</span><span class="sxs-lookup"><span data-stu-id="6240b-1775">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="6240b-1776">即使封闭泛型类型是封闭式构造的类型，这是如此。</span><span class="sxs-lookup"><span data-stu-id="6240b-1776">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-1777">如果当前<xref:System.Type>表示 C#、 Visual Basic 或 c + + 中定义的泛型类型及其嵌套的类型是所有泛型的即使它们具有其自己的任何泛型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1777">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="6240b-1778">这不一定是真正的动态程序集中定义的或使用编译的嵌套类型[Ilasm.exe （IL 汇编程序）](~/docs/framework/tools/ilasm-exe-il-assembler.md)。</span><span class="sxs-lookup"><span data-stu-id="6240b-1778">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="6240b-1779">在嵌套的泛型类型和构造从各自的泛型类型定义的嵌套泛型类型信息，请参阅<xref:System.Type.MakeGenericType%2A>。</span><span class="sxs-lookup"><span data-stu-id="6240b-1779">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-1780"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1780"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetNestedTypes" />
      </Docs>
    </Member>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public abstract Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNestedType(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetNestedType (name As String, bindingAttr As BindingFlags) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract Type ^ GetNestedType(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedType : string * System.Reflection.BindingFlags -&gt; Type" Usage="type.GetNestedType (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedType(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6240b-1781">包含要获取的嵌套类型的名称的字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-1781">The string containing the name of the nested type to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="6240b-1782">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="6240b-1782">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="6240b-1783">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1783">-or-</span></span> 
<span data-ttu-id="6240b-1784">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1784">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="6240b-1785">当在派生类中重写时，使用指定绑定约束搜索指定嵌套类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-1785">When overridden in a derived class, searches for the specified nested type, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="6240b-1786">表示符合指定要求的嵌套类型的对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1786">An object representing the nested type that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-1787">使用的嵌套类的简单名称`name`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1787">Use the simple name of the nested class for `name`.</span></span> <span data-ttu-id="6240b-1788">不符合其外部类的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-1788">Do not qualify it with the name of the outer class.</span></span> <span data-ttu-id="6240b-1789">为泛型的嵌套类，即使用重整的名称的、 追加抑音符和泛型参数的数目。</span><span class="sxs-lookup"><span data-stu-id="6240b-1789">For a generic nested class, use the mangled name - that is, append a grave accent and the number of generic parameters.</span></span> <span data-ttu-id="6240b-1790">例如，使用字符串"内部\`1"来获取泛型嵌套类`Inner<T>`(`Inner(Of T)`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="6240b-1790">For example, use the string "Inner\`1" to get the generic nested class `Inner<T>` (`Inner(Of T)` in Visual Basic).</span></span> <span data-ttu-id="6240b-1791">不包括类型参数的特定于语言的语法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1791">Do not include language-specific syntax for type parameters.</span></span>  
  
 <span data-ttu-id="6240b-1792">以下<xref:System.Reflection.BindingFlags>标志可以用于定义其嵌套的筛选器类型要在搜索中包括：</span><span class="sxs-lookup"><span data-stu-id="6240b-1792">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which nested types to include in the search:</span></span>  
  
-   <span data-ttu-id="6240b-1793">您必须指定这两<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>或<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>以获取返回。</span><span class="sxs-lookup"><span data-stu-id="6240b-1793">You must specify either <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> or <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to get a return.</span></span>  
  
-   <span data-ttu-id="6240b-1794">指定<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>若要在搜索中包括公共嵌套的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-1794">Specify <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> to include public nested types in the search.</span></span>  
  
-   <span data-ttu-id="6240b-1795">指定<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>若要在搜索中包括非公共嵌套的类型 （即私有、 内部和受保护嵌套类型）。</span><span class="sxs-lookup"><span data-stu-id="6240b-1795">Specify <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to include non-public nested types (that is, private, internal, and protected nested types) in the search.</span></span>  
  
 <span data-ttu-id="6240b-1796">此方法返回仅当前类型的嵌套的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-1796">This method returns only the nested types of the current type.</span></span> <span data-ttu-id="6240b-1797">它不会搜索当前类型的基类。</span><span class="sxs-lookup"><span data-stu-id="6240b-1797">It does not search the base classes of the current type.</span></span> <span data-ttu-id="6240b-1798">若要查找在基类中嵌套的类型，您必须遍历继承层次结构，调用<xref:System.Type.GetNestedType%2A>每个级别。</span><span class="sxs-lookup"><span data-stu-id="6240b-1798">To find types that are nested in base classes, you must walk the inheritance hierarchy, calling <xref:System.Type.GetNestedType%2A> at each level.</span></span>  
  
 <span data-ttu-id="6240b-1799"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> 和<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>将被忽略。</span><span class="sxs-lookup"><span data-stu-id="6240b-1799"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> are ignored.</span></span>  
  
 <span data-ttu-id="6240b-1800">调用此方法仅含<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>标志或仅<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>标志将返回指定的嵌套类型，并不需要任何其他标志。</span><span class="sxs-lookup"><span data-stu-id="6240b-1800">Calling this method with only the <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> flag or only the <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> flag will return the specified nested types and does not require any other flags.</span></span>  
  
 <span data-ttu-id="6240b-1801">有关更多信息，请参见<xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-1801">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6240b-1802">如果当前<xref:System.Type>表示的类型参数的泛型类型或泛型方法定义中，在此方法搜索类约束的嵌套的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-1802">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="6240b-1803">如果嵌套的类型是泛型，则此方法返回其泛型类型定义。</span><span class="sxs-lookup"><span data-stu-id="6240b-1803">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="6240b-1804">即使封闭泛型类型是封闭式构造的类型，这是如此。</span><span class="sxs-lookup"><span data-stu-id="6240b-1804">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-1805">如果当前<xref:System.Type>表示 C#、 Visual Basic 或 c + + 中定义的泛型类型及其嵌套的类型是所有泛型的即使它们具有其自己的任何泛型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1805">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="6240b-1806">这不一定是真正的动态程序集中定义的或使用编译的嵌套类型[Ilasm.exe （IL 汇编程序）](~/docs/framework/tools/ilasm-exe-il-assembler.md)。</span><span class="sxs-lookup"><span data-stu-id="6240b-1806">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="6240b-1807">在嵌套的泛型类型和构造从各自的泛型类型定义的嵌套泛型类型信息，请参阅<xref:System.Type.MakeGenericType%2A>。</span><span class="sxs-lookup"><span data-stu-id="6240b-1807">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-1808"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1808"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetNestedTypes" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNestedTypes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6240b-1809">获取嵌套在当前 <see cref="T:System.Type" /> 中的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-1809">Gets the types nested within the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public Type[] GetNestedTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetNestedTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedTypes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedTypes () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;Type ^&gt; ^ GetNestedTypes();" />
      <MemberSignature Language="F#" Value="abstract member GetNestedTypes : unit -&gt; Type[]&#xA;override this.GetNestedTypes : unit -&gt; Type[]" Usage="type.GetNestedTypes " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedTypes</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-1810">返回嵌套在当前的 <see cref="T:System.Type" /> 中的公共类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-1810">Returns the public types nested in the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="6240b-1811"><see cref="T:System.Type" /> 对象的数组，这些对象表示嵌套在当前 <see cref="T:System.Type" /> 中的公共类型（搜索是非递归的）；如果当前的 <see cref="T:System.Type" /> 中没有嵌套公共类型，则为 <see cref="T:System.Type" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1811">An array of <see cref="T:System.Type" /> objects representing the public types nested in the current <see cref="T:System.Type" /> (the search is not recursive), or an empty array of type <see cref="T:System.Type" /> if no public types are nested in the current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-1812"><xref:System.Type.GetNestedTypes%2A>方法不返回类型按特定顺序，如按字母顺序或按声明顺序。</span><span class="sxs-lookup"><span data-stu-id="6240b-1812">The <xref:System.Type.GetNestedTypes%2A> method does not return types in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6240b-1813">你的代码一定不能依赖于类型的返回的顺序因为顺序而变化。</span><span class="sxs-lookup"><span data-stu-id="6240b-1813">Your code must not depend on the order in which types are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6240b-1814">返回仅立即嵌套在当前类型的公共类型;搜索是非递归。</span><span class="sxs-lookup"><span data-stu-id="6240b-1814">Only the public types immediately nested in the current type are returned; the search is not recursive.</span></span>  
  
 <span data-ttu-id="6240b-1815">下表显示了返回通过基类的成员`Get`方法反射的类型上时。</span><span class="sxs-lookup"><span data-stu-id="6240b-1815">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6240b-1816">成员类型</span><span class="sxs-lookup"><span data-stu-id="6240b-1816">Member Type</span></span>|<span data-ttu-id="6240b-1817">Static</span><span class="sxs-lookup"><span data-stu-id="6240b-1817">Static</span></span>|<span data-ttu-id="6240b-1818">非静态</span><span class="sxs-lookup"><span data-stu-id="6240b-1818">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6240b-1819">构造函数</span><span class="sxs-lookup"><span data-stu-id="6240b-1819">Constructor</span></span>|<span data-ttu-id="6240b-1820">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1820">No</span></span>|<span data-ttu-id="6240b-1821">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1821">No</span></span>|  
|<span data-ttu-id="6240b-1822">字段</span><span class="sxs-lookup"><span data-stu-id="6240b-1822">Field</span></span>|<span data-ttu-id="6240b-1823">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1823">No</span></span>|<span data-ttu-id="6240b-1824">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-1824">Yes.</span></span> <span data-ttu-id="6240b-1825">字段始终是按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1825">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-1826">事件</span><span class="sxs-lookup"><span data-stu-id="6240b-1826">Event</span></span>|<span data-ttu-id="6240b-1827">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-1827">Not applicable</span></span>|<span data-ttu-id="6240b-1828">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-1828">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-1829">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1829">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-1830">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-1830">See note 2 below.</span></span>|  
|<span data-ttu-id="6240b-1831">方法</span><span class="sxs-lookup"><span data-stu-id="6240b-1831">Method</span></span>|<span data-ttu-id="6240b-1832">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1832">No</span></span>|<span data-ttu-id="6240b-1833">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-1833">Yes.</span></span> <span data-ttu-id="6240b-1834">方法 （包括虚拟和非虚拟） 可以隐藏通过名称或按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1834">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-1835">嵌套的类型</span><span class="sxs-lookup"><span data-stu-id="6240b-1835">Nested Type</span></span>|<span data-ttu-id="6240b-1836">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1836">No</span></span>|<span data-ttu-id="6240b-1837">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1837">No</span></span>|  
|<span data-ttu-id="6240b-1838">Property</span><span class="sxs-lookup"><span data-stu-id="6240b-1838">Property</span></span>|<span data-ttu-id="6240b-1839">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-1839">Not applicable</span></span>|<span data-ttu-id="6240b-1840">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-1840">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-1841">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1841">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-1842">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-1842">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6240b-1843">按名称和签名隐藏会考虑所有的签名，包括自定义修饰符，部分返回类型、 参数类型、 标记和非托管调用约定。</span><span class="sxs-lookup"><span data-stu-id="6240b-1843">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6240b-1844">这是二进制比较。</span><span class="sxs-lookup"><span data-stu-id="6240b-1844">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6240b-1845">为反射，属性和事件均由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1845">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-1846">如果具有 get 和 set 访问器的属性中的基类，但派生的类具有一个 get 访问器，派生的类属性隐藏基类属性，并且你将无法再访问基类上的资源库。</span><span class="sxs-lookup"><span data-stu-id="6240b-1846">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6240b-1847">自定义特性不是通用类型系统的一部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-1847">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="6240b-1848">如果当前<xref:System.Type>表示的类型参数的泛型类型或泛型方法定义中，在此方法搜索类约束的嵌套的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-1848">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="6240b-1849">如果嵌套的类型是泛型，则此方法返回其泛型类型定义。</span><span class="sxs-lookup"><span data-stu-id="6240b-1849">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="6240b-1850">即使封闭泛型类型是封闭式构造的类型，这是如此。</span><span class="sxs-lookup"><span data-stu-id="6240b-1850">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-1851">如果当前<xref:System.Type>表示 C#、 Visual Basic 或 c + + 中定义的泛型类型及其嵌套的类型是所有泛型的即使它们具有其自己的任何泛型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1851">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="6240b-1852">这不一定是真正的动态程序集中定义的或使用编译的嵌套类型[Ilasm.exe （IL 汇编程序）](~/docs/framework/tools/ilasm-exe-il-assembler.md)。</span><span class="sxs-lookup"><span data-stu-id="6240b-1852">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="6240b-1853">在嵌套的泛型类型和构造从各自的泛型类型定义的嵌套泛型类型信息，请参阅<xref:System.Type.MakeGenericType%2A>。</span><span class="sxs-lookup"><span data-stu-id="6240b-1853">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-1854">下面的示例定义了一个嵌套的类和一个`struct`中`MyClass`，然后获取嵌套的类型使用的类型的对象和`MyClass`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1854">The following example defines a nested class and a `struct` in `MyClass`, and then obtains objects of the nested types using the type of `MyClass`.</span></span>  
  
 [!code-cpp[Type_GetNestedTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetNestedTypes/CPP/type_getnestedtypes.cpp#1)]
 [!code-csharp[Type_GetNestedTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetNestedTypes/CS/type_getnestedtypes.cs#1)]
 [!code-vb[Type_GetNestedTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetNestedTypes/VB/type_getnestedtypes.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.GetNestedType(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public abstract Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetNestedTypes(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetNestedTypes (bindingAttr As BindingFlags) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;Type ^&gt; ^ GetNestedTypes(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedTypes : System.Reflection.BindingFlags -&gt; Type[]" Usage="type.GetNestedTypes bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetNestedTypes(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="6240b-1855">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="6240b-1855">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="6240b-1856">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1856">-or-</span></span> 
<span data-ttu-id="6240b-1857">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1857">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="6240b-1858">当在派生类中重写时，使用指定绑定约束搜索嵌套在当前 <see cref="T:System.Type" /> 中的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-1858">When overridden in a derived class, searches for the types nested in the current <see cref="T:System.Type" />, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="6240b-1859"><see cref="T:System.Type" /> 对象数组，这些对象表示嵌套在当前 <see cref="T:System.Type" /> 中的所有与指定的绑定约束匹配的类型（搜索是非递归的）；如果没有找到与绑定约束匹配的嵌套类型，则为 <see cref="T:System.Type" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1859">An array of <see cref="T:System.Type" /> objects representing all the types nested in the current <see cref="T:System.Type" /> that match the specified binding constraints (the search is not recursive), or an empty array of type <see cref="T:System.Type" />, if no nested types are found that match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-1860">对嵌套类型搜索是非递归。</span><span class="sxs-lookup"><span data-stu-id="6240b-1860">The search for nested types is not recursive.</span></span>  
  
 <span data-ttu-id="6240b-1861"><xref:System.Type.GetNestedTypes%2A>方法不返回类型按特定顺序，如按字母顺序或按声明顺序。</span><span class="sxs-lookup"><span data-stu-id="6240b-1861">The <xref:System.Type.GetNestedTypes%2A> method does not return types in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6240b-1862">你的代码一定不能依赖于类型的返回的顺序因为顺序而变化。</span><span class="sxs-lookup"><span data-stu-id="6240b-1862">Your code must not depend on the order in which types are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6240b-1863">以下<xref:System.Reflection.BindingFlags>标志可以用于定义其嵌套的筛选器类型要在搜索中包括：</span><span class="sxs-lookup"><span data-stu-id="6240b-1863">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which nested types to include in the search:</span></span>  
  
-   <span data-ttu-id="6240b-1864">您必须指定这两<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>或<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>以获取返回。</span><span class="sxs-lookup"><span data-stu-id="6240b-1864">You must specify either <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> or <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to get a return.</span></span>  
  
-   <span data-ttu-id="6240b-1865">指定<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>若要在搜索中包括公共嵌套的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-1865">Specify <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> to include public nested types in the search.</span></span>  
  
-   <span data-ttu-id="6240b-1866">指定<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>若要在搜索中包括非公共嵌套的类型 （即私有、 内部和受保护嵌套类型）。</span><span class="sxs-lookup"><span data-stu-id="6240b-1866">Specify <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> to include non-public nested types (that is, private, internal, and protected nested types) in the search.</span></span>  
  
 <span data-ttu-id="6240b-1867">此方法返回仅当前类型的嵌套的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-1867">This method returns only the nested types of the current type.</span></span> <span data-ttu-id="6240b-1868">它不会搜索当前类型的基类。</span><span class="sxs-lookup"><span data-stu-id="6240b-1868">It does not search the base classes of the current type.</span></span> <span data-ttu-id="6240b-1869">若要查找在基类中嵌套的类型，您必须遍历继承层次结构，调用<xref:System.Type.GetNestedTypes%2A>每个级别。</span><span class="sxs-lookup"><span data-stu-id="6240b-1869">To find types that are nested in base classes, you must walk the inheritance hierarchy, calling <xref:System.Type.GetNestedTypes%2A> at each level.</span></span>  
  
 <span data-ttu-id="6240b-1870"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> 和<xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType>将被忽略。</span><span class="sxs-lookup"><span data-stu-id="6240b-1870"><xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> and <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> are ignored.</span></span>  
  
 <span data-ttu-id="6240b-1871">调用此方法仅含<xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType>标志或仅<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType>标志将返回指定的嵌套类型，并不需要任何其他标志。</span><span class="sxs-lookup"><span data-stu-id="6240b-1871">Calling this method with only the <xref:System.Reflection.BindingFlags.Public?displayProperty=nameWithType> flag or only the <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> flag will return the specified nested types and does not require any other flags.</span></span>  
  
 <span data-ttu-id="6240b-1872">有关更多信息，请参见<xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-1872">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6240b-1873">如果当前<xref:System.Type>表示的类型参数的泛型类型或泛型方法定义中，在此方法搜索类约束的嵌套的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-1873">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.</span></span>  
  
 <span data-ttu-id="6240b-1874">如果嵌套的类型是泛型，则此方法返回其泛型类型定义。</span><span class="sxs-lookup"><span data-stu-id="6240b-1874">If a nested type is generic, this method returns its generic type definition.</span></span> <span data-ttu-id="6240b-1875">即使封闭泛型类型是封闭式构造的类型，这是如此。</span><span class="sxs-lookup"><span data-stu-id="6240b-1875">This is true even if the enclosing generic type is a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-1876">如果当前<xref:System.Type>表示 C#、 Visual Basic 或 c + + 中定义的泛型类型及其嵌套的类型是所有泛型的即使它们具有其自己的任何泛型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1876">If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own.</span></span> <span data-ttu-id="6240b-1877">这不一定是真正的动态程序集中定义的或使用编译的嵌套类型[Ilasm.exe （IL 汇编程序）](~/docs/framework/tools/ilasm-exe-il-assembler.md)。</span><span class="sxs-lookup"><span data-stu-id="6240b-1877">This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span>  
  
 <span data-ttu-id="6240b-1878">在嵌套的泛型类型和构造从各自的泛型类型定义的嵌套泛型类型信息，请参阅<xref:System.Type.MakeGenericType%2A>。</span><span class="sxs-lookup"><span data-stu-id="6240b-1878">For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-1879">下面的示例创建两个嵌套公共类和两个嵌套的受保护的类，并显示与指定的绑定约束匹配的类的信息。</span><span class="sxs-lookup"><span data-stu-id="6240b-1879">The following example creates two nested public classes and two nested protected classes, and displays information for classes that match the specified binding constraints.</span></span>  
  
 [!code-cpp[Type_GetNestedClassesAbs#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetNestedClassesAbs/CPP/type_getnestedclassesabs.cpp#1)]
 [!code-csharp[Type_GetNestedClassesAbs#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetNestedClassesAbs/CS/type_getnestedclassesabs.cs#1)]
 [!code-vb[Type_GetNestedClassesAbs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetNestedClassesAbs/VB/type_getnestedclassesabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetNestedType(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProperties">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6240b-1880">获取当前 <see cref="T:System.Type" /> 的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1880">Gets the properties of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo[] GetProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperties" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperties () As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties();" />
      <MemberSignature Language="F#" Value="abstract member GetProperties : unit -&gt; System.Reflection.PropertyInfo[]&#xA;override this.GetProperties : unit -&gt; System.Reflection.PropertyInfo[]" Usage="type.GetProperties " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperties</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-1881">返回为当前 <see cref="T:System.Type" /> 的所有公共属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1881">Returns all the public properties of the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="6240b-1882">表示当前 <see cref="T:System.Reflection.PropertyInfo" /> 的所有公共属性的 <see cref="T:System.Type" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1882">An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all public properties of the current <see cref="T:System.Type" />.</span></span>  
  
<span data-ttu-id="6240b-1883">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1883">-or-</span></span> 
<span data-ttu-id="6240b-1884">如果当前 <see cref="T:System.Reflection.PropertyInfo" /> 没有公共属性，则为 <see cref="T:System.Type" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1884">An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have public properties.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-1885">调用此重载是等效于调用<xref:System.Type.GetProperties%28System.Reflection.BindingFlags%29>重载，并`bindingAttr`参数等于`BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public`在 C# 和`BindingFlags.Instance Or BindingFlags.Static Or BindingFlags.Public`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="6240b-1885">Calling this overload is equivalent to calling the <xref:System.Type.GetProperties%28System.Reflection.BindingFlags%29> overload with a `bindingAttr` argument equal to `BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public` in C# and  `BindingFlags.Instance Or BindingFlags.Static Or BindingFlags.Public` in Visual Basic.</span></span> <span data-ttu-id="6240b-1886">它将返回所有公共实例和静态属性，表示由当前的类型由定义这两个那些<xref:System.Type>对象，以及它们继承自其基类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-1886">It returns all public instance and static properties, both those defined by the type represented by the current <xref:System.Type> object as well as those inherited from its base types.</span></span>  
  
 <span data-ttu-id="6240b-1887">如果它具有至少一个访问器，它是公共的属性被视为公共反射。</span><span class="sxs-lookup"><span data-stu-id="6240b-1887">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="6240b-1888">否则，该属性被视为私有的并且必须使用<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (在 Visual Basic 中，将使用的值合并`Or`) 来获取它。</span><span class="sxs-lookup"><span data-stu-id="6240b-1888">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="6240b-1889"><xref:System.Type.GetProperties%2A>方法不返回属性按特定顺序，如按字母顺序或按声明顺序。</span><span class="sxs-lookup"><span data-stu-id="6240b-1889">The <xref:System.Type.GetProperties%2A> method does not return properties in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6240b-1890">你的代码一定不能依赖于属性的返回的顺序因为顺序而变化。</span><span class="sxs-lookup"><span data-stu-id="6240b-1890">Your code must not depend on the order in which properties are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6240b-1891">下表显示了返回通过基类的成员`Get`方法反射的类型上时。</span><span class="sxs-lookup"><span data-stu-id="6240b-1891">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6240b-1892">成员类型</span><span class="sxs-lookup"><span data-stu-id="6240b-1892">Member Type</span></span>|<span data-ttu-id="6240b-1893">Static</span><span class="sxs-lookup"><span data-stu-id="6240b-1893">Static</span></span>|<span data-ttu-id="6240b-1894">非静态</span><span class="sxs-lookup"><span data-stu-id="6240b-1894">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6240b-1895">构造函数</span><span class="sxs-lookup"><span data-stu-id="6240b-1895">Constructor</span></span>|<span data-ttu-id="6240b-1896">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1896">No</span></span>|<span data-ttu-id="6240b-1897">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1897">No</span></span>|  
|<span data-ttu-id="6240b-1898">字段</span><span class="sxs-lookup"><span data-stu-id="6240b-1898">Field</span></span>|<span data-ttu-id="6240b-1899">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1899">No</span></span>|<span data-ttu-id="6240b-1900">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-1900">Yes.</span></span> <span data-ttu-id="6240b-1901">字段始终是按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1901">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-1902">事件</span><span class="sxs-lookup"><span data-stu-id="6240b-1902">Event</span></span>|<span data-ttu-id="6240b-1903">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-1903">Not applicable</span></span>|<span data-ttu-id="6240b-1904">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-1904">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-1905">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1905">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-1906">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-1906">See note 2 below.</span></span>|  
|<span data-ttu-id="6240b-1907">方法</span><span class="sxs-lookup"><span data-stu-id="6240b-1907">Method</span></span>|<span data-ttu-id="6240b-1908">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1908">No</span></span>|<span data-ttu-id="6240b-1909">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-1909">Yes.</span></span> <span data-ttu-id="6240b-1910">方法 （包括虚拟和非虚拟） 可以隐藏通过名称或按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1910">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-1911">嵌套的类型</span><span class="sxs-lookup"><span data-stu-id="6240b-1911">Nested Type</span></span>|<span data-ttu-id="6240b-1912">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1912">No</span></span>|<span data-ttu-id="6240b-1913">No</span><span class="sxs-lookup"><span data-stu-id="6240b-1913">No</span></span>|  
|<span data-ttu-id="6240b-1914">Property</span><span class="sxs-lookup"><span data-stu-id="6240b-1914">Property</span></span>|<span data-ttu-id="6240b-1915">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-1915">Not applicable</span></span>|<span data-ttu-id="6240b-1916">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-1916">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-1917">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1917">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-1918">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-1918">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6240b-1919">按名称和签名隐藏会考虑所有的签名，包括自定义修饰符，部分返回类型、 参数类型、 标记和非托管调用约定。</span><span class="sxs-lookup"><span data-stu-id="6240b-1919">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6240b-1920">这是二进制比较。</span><span class="sxs-lookup"><span data-stu-id="6240b-1920">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6240b-1921">为反射，属性和事件均由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-1921">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-1922">如果具有 get 和 set 访问器的属性中的基类，但派生的类具有一个 get 访问器，派生的类属性隐藏基类属性，并且你将无法再访问基类上的资源库。</span><span class="sxs-lookup"><span data-stu-id="6240b-1922">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6240b-1923">自定义特性不是通用类型系统的一部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-1923">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="6240b-1924">如果当前表示构造泛型类型，此方法返回<xref:System.Reflection.PropertyInfo>替换为适当的类型参数的类型参数的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-1924">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-1925">如果当前<xref:System.Type>表示的类型参数的泛型类型或泛型方法定义中，在此方法搜索类约束的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1925">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-1926">下面的示例演示 `GetProperties` 方法的用法。</span><span class="sxs-lookup"><span data-stu-id="6240b-1926">The following example demonstrates the use of the `GetProperties` method.</span></span>  
  
 [!code-cpp[Type_GetTypeCode#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeCode/CPP/type_gettypecode.cpp#2)]
 [!code-csharp[Type_GetTypeCode#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeCode/CS/type_gettypecode.cs#2)]
 [!code-vb[Type_GetTypeCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeCode/VB/type_gettypecode.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetProperties (bindingAttr As BindingFlags) As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetProperties : System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo[]" Usage="type.GetProperties bindingAttr" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperties(System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr"><span data-ttu-id="6240b-1927">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="6240b-1927">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="6240b-1928">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1928">-or-</span></span> 
<span data-ttu-id="6240b-1929">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1929">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="6240b-1930">当在派生类中重写时，使用指定绑定约束，搜索当前 <see cref="T:System.Type" /> 的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1930">When overridden in a derived class, searches for the properties of the current <see cref="T:System.Type" />, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="6240b-1931">表示当前 <see cref="T:System.Reflection.PropertyInfo" /> 的匹配指定绑定约束的所有属性的 <see cref="T:System.Type" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1931">An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all properties of the current <see cref="T:System.Type" /> that match the specified binding constraints.</span></span>  
  
<span data-ttu-id="6240b-1932">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1932">-or-</span></span> 
<span data-ttu-id="6240b-1933">如果当前 <see cref="T:System.Reflection.PropertyInfo" /> 没有属性，或者如果没有一个属性匹配绑定约束，则为 <see cref="T:System.Type" /> 类型的空数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-1933">An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have properties, or if none of the properties match the binding constraints.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-1934">如果它具有至少一个访问器，它是公共的属性被视为公共反射。</span><span class="sxs-lookup"><span data-stu-id="6240b-1934">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="6240b-1935">否则，该属性被视为私有的并且必须使用<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (在 Visual Basic 中，将使用的值合并`Or`) 来获取它。</span><span class="sxs-lookup"><span data-stu-id="6240b-1935">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="6240b-1936"><xref:System.Type.GetProperties%2A>方法不返回属性按特定顺序，如按字母顺序或按声明顺序。</span><span class="sxs-lookup"><span data-stu-id="6240b-1936">The <xref:System.Type.GetProperties%2A> method does not return properties in a particular order, such as alphabetical or declaration order.</span></span> <span data-ttu-id="6240b-1937">你的代码一定不能依赖于属性的返回的顺序因为顺序而变化。</span><span class="sxs-lookup"><span data-stu-id="6240b-1937">Your code must not depend on the order in which properties are returned, because that order varies.</span></span>  
  
 <span data-ttu-id="6240b-1938">以下<xref:System.Reflection.BindingFlags>标志可以用于定义其嵌套的筛选器类型要在搜索中包括：</span><span class="sxs-lookup"><span data-stu-id="6240b-1938">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which nested types to include in the search:</span></span>  
  
-   <span data-ttu-id="6240b-1939">您必须指定这两`BindingFlags.Instance`或`BindingFlags.Static`为了获取返回。</span><span class="sxs-lookup"><span data-stu-id="6240b-1939">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6240b-1940">指定`BindingFlags.Public`若要在搜索中包括的公共属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1940">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="6240b-1941">指定`BindingFlags.NonPublic`若要在搜索中包括非公共属性 （即私有、 内部和受保护属性）。</span><span class="sxs-lookup"><span data-stu-id="6240b-1941">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span> <span data-ttu-id="6240b-1942">仅保护并返回基的类上的内部属性;不返回私有基类上的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1942">Only protected and internal properties on base classes are returned; private properties on base classes are not returned.</span></span>  
  
-   <span data-ttu-id="6240b-1943">指定`BindingFlags.FlattenHierarchy`用以`public`和`protected`层次结构; 上的静态成员`private`中继承的类的静态成员不包括。</span><span class="sxs-lookup"><span data-stu-id="6240b-1943">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="6240b-1944">以下<xref:System.Reflection.BindingFlags>修饰符标志可以用于更改搜索的工作原理：</span><span class="sxs-lookup"><span data-stu-id="6240b-1944">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6240b-1945">`BindingFlags.DeclaredOnly` 若要搜索上声明属性<xref:System.Type>，不只是继承的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1945">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="6240b-1946">有关更多信息，请参见<xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-1946">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6240b-1947">如果它具有至少一个访问器，它是公共的属性被视为公共反射。</span><span class="sxs-lookup"><span data-stu-id="6240b-1947">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="6240b-1948">否则，该属性被视为私有的并且必须使用<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (在 Visual Basic 中，将使用的值合并`Or`) 来获取它。</span><span class="sxs-lookup"><span data-stu-id="6240b-1948">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="6240b-1949">如果当前表示构造泛型类型，此方法返回<xref:System.Reflection.PropertyInfo>替换为适当的类型参数的类型参数的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-1949">If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> objects with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-1950">如果当前<xref:System.Type>表示的类型参数的泛型类型或泛型方法定义中，在此方法搜索类约束的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1950">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-1951">下面的示例定义一个名为`PropertyClass`包括 6 个属性： 两个都是公共，一个是私有、 受保护的一个有内部 (`Friend`在 Visual Basic 中)，和一个受保护的内部 (`Protected Friend`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="6240b-1951">The following example defines a class named `PropertyClass` that includes six properties: two are public, one is private, one is protected, one is internal (`Friend` in Visual Basic), and one is protected internal (`Protected Friend` in Visual Basic).</span></span> <span data-ttu-id="6240b-1952">然后，它显示一些基本属性信息 (属性名称和类型，无论是读/写和可见性及其`get`和`set`访问器) 与指定的绑定约束匹配的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1952">It then displays some basic property information (the property name and type, whether it is read/write, and the visibility of its `get` and `set` accessors) for the properties that match the specified binding constraints.</span></span>  
  
 [!code-cpp[Type_GetProperties2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperties2/CPP/type_getproperties2.cpp#1)]
 [!code-csharp[Type_GetProperties2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperties2/CS/type_getproperties2.cs#1)]
 [!code-vb[Type_GetProperties2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperties2/VB/type_getproperties2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProperty">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6240b-1953">获取当前 <see cref="T:System.Type" /> 的特定属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1953">Gets a specific property of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6240b-1954">包含要获取的公共属性名的字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-1954">The string containing the name of the public property to get.</span></span></param>
        <summary><span data-ttu-id="6240b-1955">搜索具有指定名称的公共属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1955">Searches for the public property with the specified name.</span></span></summary>
        <returns><span data-ttu-id="6240b-1956">表示具有指定名称的公共属性的对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1956">An object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-1957">搜索`name`区分大小写。</span><span class="sxs-lookup"><span data-stu-id="6240b-1957">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="6240b-1958">搜索中包括公共 static 和 public 实例属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1958">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="6240b-1959">如果它具有至少一个访问器，它是公共的属性被视为公共反射。</span><span class="sxs-lookup"><span data-stu-id="6240b-1959">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="6240b-1960">否则，该属性被视为私有的并且必须使用<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (在 Visual Basic 中，将使用的值合并`Or`) 来获取它。</span><span class="sxs-lookup"><span data-stu-id="6240b-1960">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="6240b-1961">如果当前<xref:System.Type>表示构造泛型类型，此方法返回<xref:System.Reflection.PropertyInfo>具有类型参数替换为适当的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1961">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-1962">如果当前<xref:System.Type>表示的类型参数的泛型类型或泛型方法定义中，在此方法搜索类约束的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1962">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
 <span data-ttu-id="6240b-1963">在其中的情况下<xref:System.Reflection.AmbiguousMatchException>发生如下：</span><span class="sxs-lookup"><span data-stu-id="6240b-1963">Situations in which <xref:System.Reflection.AmbiguousMatchException> occurs include the following:</span></span>  
  
-   <span data-ttu-id="6240b-1964">一种类型包含两个索引的属性具有相同名称但具有不同数量的参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-1964">A type contains two indexed properties that have the same name but different numbers of parameters.</span></span> <span data-ttu-id="6240b-1965">若要解决多义性问题，请使用的重载<xref:System.Type.GetProperty%2A>方法，它指定参数类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-1965">To resolve the ambiguity, use an overload of the <xref:System.Type.GetProperty%2A> method that specifies parameter types.</span></span>  
  
-   <span data-ttu-id="6240b-1966">派生的类型声明了通过使用隐藏继承的属性具有相同名称的属性`new`修饰符 (`Shadows`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="6240b-1966">A derived type declares a property that hides an inherited property with the same name, by using the `new` modifier (`Shadows` in Visual Basic).</span></span> <span data-ttu-id="6240b-1967">若要解决多义性问题，请使用<xref:System.Type.GetProperty%28System.String%2CSystem.Reflection.BindingFlags%29>方法重载，并添加<xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType>标志，用于搜索限制为不会继承的成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-1967">To resolve the ambiguity, use the <xref:System.Type.GetProperty%28System.String%2CSystem.Reflection.BindingFlags%29> method overload and add the <xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> flag to restrict the search to members that are not inherited.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="6240b-1968">索引器属性和默认属性</span><span class="sxs-lookup"><span data-stu-id="6240b-1968">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="6240b-1969">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)]，和[!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)]简化了用于访问索引的属性的语法，并允许一个索引的属性是其类型的默认值。</span><span class="sxs-lookup"><span data-stu-id="6240b-1969">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="6240b-1970">例如，如果变量`myList`是指<xref:System.Collections.ArrayList>，语法`myList[3]`(`myList(3)`在 Visual Basic 中) 检索索引为 3 的元素。</span><span class="sxs-lookup"><span data-stu-id="6240b-1970">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="6240b-1971">可以重载该属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1971">You can overload the property.</span></span>  
  
 <span data-ttu-id="6240b-1972">在 C# 中，此功能称为索引器，不能按名称引用。</span><span class="sxs-lookup"><span data-stu-id="6240b-1972">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="6240b-1973">默认情况下，C# 索引器将显示在元数据中作为名为"Item"索引属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1973">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="6240b-1974">但是，类库开发人员可以使用<xref:System.Runtime.CompilerServices.IndexerNameAttribute>特性来更改元数据中的索引器的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-1974">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="6240b-1975">例如，<xref:System.String>类具有名为一个索引器<xref:System.String.Chars%2A>。</span><span class="sxs-lookup"><span data-stu-id="6240b-1975">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="6240b-1976">使用 C# 以外的语言创建的索引的属性可以具有项以外的名称以及。</span><span class="sxs-lookup"><span data-stu-id="6240b-1976">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="6240b-1977">若要确定类型是否具有默认属性，请使用<xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29>方法来测试<xref:System.Reflection.DefaultMemberAttribute>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1977">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="6240b-1978">如果该类型具有<xref:System.Reflection.DefaultMemberAttribute>，则<xref:System.Reflection.DefaultMemberAttribute.MemberName%2A>属性返回的默认属性的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-1978">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-1979">下面的示例检索`Type`的用户定义的类的对象检索该类的属性，并显示属性名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-1979">The following example retrieves the `Type` object of a user-defined class, retrieves a property of that class, and displays the property name.</span></span>  
  
 [!code-cpp[Type_GetProperty1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty1/CPP/type_getproperty1.cpp#1)]
 [!code-csharp[Type_GetProperty1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty1/CS/type_getproperty1.cs#1)]
 [!code-vb[Type_GetProperty1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty1/VB/type_getproperty1.vb#1)]  
  
 <span data-ttu-id="6240b-1980">在内部，此属性所引用的元数据中的名称"项。</span><span class="sxs-lookup"><span data-stu-id="6240b-1980">Internally, this property is referred to in the metadata by the name "Item."</span></span> <span data-ttu-id="6240b-1981">若要获取的任何尝试`PropertyInfo`使用反射必须指定此内部名称才能正确返回`PropertyInfo`属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1981">Any attempt to get `PropertyInfo` using reflection must specify this internal name in order to correctly return the `PropertyInfo` property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="6240b-1982">找到了多个具有指定名称的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1982">More than one property is found with the specified name.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-1983"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1983"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, bindingAttr As BindingFlags) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Reflection.BindingFlags)</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6240b-1984">包含要获取的属性名的字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-1984">The string containing the name of the property to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="6240b-1985">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="6240b-1985">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="6240b-1986">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-1986">-or-</span></span> 
<span data-ttu-id="6240b-1987">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1987">Zero, to return <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="6240b-1988">使用指定的绑定约束搜索指定属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1988">Searches for the specified property, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="6240b-1989">表示符合指定需求的属性的对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-1989">An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-1990">如果它具有至少一个访问器，它是公共的属性被视为公共反射。</span><span class="sxs-lookup"><span data-stu-id="6240b-1990">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="6240b-1991">否则，该属性被视为私有的并且必须使用<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (在 Visual Basic 中，将使用的值合并`Or`) 来获取它。</span><span class="sxs-lookup"><span data-stu-id="6240b-1991">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="6240b-1992">以下<xref:System.Reflection.BindingFlags>的筛选器标志可以用于定义要在搜索中包括的属性：</span><span class="sxs-lookup"><span data-stu-id="6240b-1992">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:</span></span>  
  
-   <span data-ttu-id="6240b-1993">您必须指定这两`BindingFlags.Instance`或`BindingFlags.Static`为了获取返回。</span><span class="sxs-lookup"><span data-stu-id="6240b-1993">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6240b-1994">指定`BindingFlags.Public`若要在搜索中包括的公共属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1994">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="6240b-1995">指定`BindingFlags.NonPublic`若要在搜索中包括非公共属性 （即私有、 内部和受保护属性）。</span><span class="sxs-lookup"><span data-stu-id="6240b-1995">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span>  
  
-   <span data-ttu-id="6240b-1996">指定`BindingFlags.FlattenHierarchy`用以`public`和`protected`层次结构; 上的静态成员`private`中继承的类的静态成员不包括。</span><span class="sxs-lookup"><span data-stu-id="6240b-1996">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="6240b-1997">以下<xref:System.Reflection.BindingFlags>修饰符标志可以用于更改搜索的工作原理：</span><span class="sxs-lookup"><span data-stu-id="6240b-1997">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6240b-1998">`BindingFlags.IgnoreCase` 若要忽略大小写的`name`。</span><span class="sxs-lookup"><span data-stu-id="6240b-1998">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="6240b-1999">`BindingFlags.DeclaredOnly` 若要搜索上声明属性<xref:System.Type>，不只是继承的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-1999">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="6240b-2000">有关更多信息，请参见<xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-2000">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6240b-2001">如果当前<xref:System.Type>表示构造泛型类型，此方法返回<xref:System.Reflection.PropertyInfo>具有类型参数替换为适当的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2001">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-2002">如果当前<xref:System.Type>表示的类型参数的泛型类型或泛型方法定义中，在此方法搜索类约束的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2002">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
 <span data-ttu-id="6240b-2003">在其中的情况下<xref:System.Reflection.AmbiguousMatchException>发生如下：</span><span class="sxs-lookup"><span data-stu-id="6240b-2003">Situations in which <xref:System.Reflection.AmbiguousMatchException> occurs include the following:</span></span>  
  
-   <span data-ttu-id="6240b-2004">一种类型包含两个索引的属性具有相同名称但具有不同数量的参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2004">A type contains two indexed properties that have the same name but different numbers of parameters.</span></span> <span data-ttu-id="6240b-2005">若要解决多义性问题，请使用的重载<xref:System.Type.GetProperty%2A>方法，它指定参数类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2005">To resolve the ambiguity, use an overload of the <xref:System.Type.GetProperty%2A> method that specifies parameter types.</span></span>  
  
-   <span data-ttu-id="6240b-2006">派生的类型声明一个属性，它会隐藏继承的属性具有相同的名称，使用`new`修饰符 (`Shadows`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="6240b-2006">A derived type declares a property that hides an inherited property with the same name, using the `new` modifier (`Shadows` in Visual Basic).</span></span> <span data-ttu-id="6240b-2007">若要解决多义性问题，包括<xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType>来搜索限制为不会继承的成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-2007">To resolve the ambiguity, include <xref:System.Reflection.BindingFlags.DeclaredOnly?displayProperty=nameWithType> to restrict the search to members that are not inherited.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="6240b-2008">索引器属性和默认属性</span><span class="sxs-lookup"><span data-stu-id="6240b-2008">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="6240b-2009">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)]，和[!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)]简化了用于访问索引的属性的语法，并允许一个索引的属性是其类型的默认值。</span><span class="sxs-lookup"><span data-stu-id="6240b-2009">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="6240b-2010">例如，如果变量`myList`是指<xref:System.Collections.ArrayList>，语法`myList[3]`(`myList(3)`在 Visual Basic 中) 检索索引为 3 的元素。</span><span class="sxs-lookup"><span data-stu-id="6240b-2010">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="6240b-2011">可以重载该属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2011">You can overload the property.</span></span>  
  
 <span data-ttu-id="6240b-2012">在 C# 中，此功能称为索引器，不能按名称引用。</span><span class="sxs-lookup"><span data-stu-id="6240b-2012">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="6240b-2013">默认情况下，C# 索引器将显示在元数据中作为名为"Item"索引属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2013">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="6240b-2014">但是，类库开发人员可以使用<xref:System.Runtime.CompilerServices.IndexerNameAttribute>特性来更改元数据中的索引器的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2014">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="6240b-2015">例如，<xref:System.String>类具有名为一个索引器<xref:System.String.Chars%2A>。</span><span class="sxs-lookup"><span data-stu-id="6240b-2015">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="6240b-2016">使用 C# 以外的语言创建的索引的属性可以具有项以外的名称以及。</span><span class="sxs-lookup"><span data-stu-id="6240b-2016">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="6240b-2017">若要确定类型是否具有默认属性，请使用<xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29>方法来测试<xref:System.Reflection.DefaultMemberAttribute>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2017">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="6240b-2018">如果该类型具有<xref:System.Reflection.DefaultMemberAttribute>，则<xref:System.Reflection.DefaultMemberAttribute.MemberName%2A>属性返回的默认属性的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2018">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-2019">下面的示例检索用户定义的类的类型、 检索该类的属性并显示根据指定的绑定约束的属性名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2019">The following example retrieves the type of a user-defined class, retrieves a property of that class and displays the property name in accordance with the specified binding constraints.</span></span>  
  
 [!code-cpp[Type_GetProperty2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty2/CPP/type_getproperty2.cpp#1)]
 [!code-csharp[Type_GetProperty2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty2/CS/type_getproperty2.cs#1)]
 [!code-vb[Type_GetProperty2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty2/VB/type_getproperty2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="6240b-2020">找到多个具有指定名称的属性且属性与指定绑定约束匹配。</span><span class="sxs-lookup"><span data-stu-id="6240b-2020">More than one property is found with the specified name and matching the specified binding constraints.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-2021"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2021"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * Type -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, returnType)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6240b-2022">包含要获取的公共属性名的字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-2022">The string containing the name of the public property to get.</span></span></param>
        <param name="returnType"><span data-ttu-id="6240b-2023">属性的返回类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2023">The return type of the property.</span></span></param>
        <summary><span data-ttu-id="6240b-2024">搜索具有指定名称和返回类型的公共属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2024">Searches for the public property with the specified name and return type.</span></span></summary>
        <returns><span data-ttu-id="6240b-2025">表示具有指定名称的公共属性的对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2025">An object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-2026">如果它具有至少一个访问器，它是公共的属性被视为公共反射。</span><span class="sxs-lookup"><span data-stu-id="6240b-2026">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="6240b-2027">否则，该属性被视为私有的并且必须使用<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (在 Visual Basic 中，将使用的值合并`Or`) 来获取它。</span><span class="sxs-lookup"><span data-stu-id="6240b-2027">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="6240b-2028">搜索`name`区分大小写。</span><span class="sxs-lookup"><span data-stu-id="6240b-2028">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="6240b-2029">搜索中包括公共 static 和 public 实例属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2029">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="6240b-2030">如果当前<xref:System.Type>表示构造泛型类型，此方法返回<xref:System.Reflection.PropertyInfo>具有类型参数替换为适当的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2030">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-2031">如果当前<xref:System.Type>表示的类型参数的泛型类型或泛型方法定义中，在此方法搜索类约束的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2031">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="6240b-2032">索引器属性和默认属性</span><span class="sxs-lookup"><span data-stu-id="6240b-2032">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="6240b-2033">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)]，和[!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)]简化了用于访问索引的属性的语法，并允许一个索引的属性是其类型的默认值。</span><span class="sxs-lookup"><span data-stu-id="6240b-2033">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="6240b-2034">例如，如果变量`myList`是指<xref:System.Collections.ArrayList>，语法`myList[3]`(`myList(3)`在 Visual Basic 中) 检索索引为 3 的元素。</span><span class="sxs-lookup"><span data-stu-id="6240b-2034">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="6240b-2035">可以重载该属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2035">You can overload the property.</span></span>  
  
 <span data-ttu-id="6240b-2036">在 C# 中，此功能称为索引器，不能按名称引用。</span><span class="sxs-lookup"><span data-stu-id="6240b-2036">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="6240b-2037">默认情况下，C# 索引器将显示在元数据中作为名为"Item"索引属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2037">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="6240b-2038">但是，类库开发人员可以使用<xref:System.Runtime.CompilerServices.IndexerNameAttribute>特性来更改元数据中的索引器的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2038">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="6240b-2039">例如，<xref:System.String>类具有名为一个索引器<xref:System.String.Chars%2A>。</span><span class="sxs-lookup"><span data-stu-id="6240b-2039">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="6240b-2040">使用 C# 以外的语言创建的索引的属性可以具有项以外的名称以及。</span><span class="sxs-lookup"><span data-stu-id="6240b-2040">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="6240b-2041">若要确定类型是否具有默认属性，请使用<xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29>方法来测试<xref:System.Reflection.DefaultMemberAttribute>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2041">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="6240b-2042">如果该类型具有<xref:System.Reflection.DefaultMemberAttribute>，则<xref:System.Reflection.DefaultMemberAttribute.MemberName%2A>属性返回的默认属性的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2042">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-2043">下面的示例定义具有一个属性的类，并检索名称和属性的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2043">The following example defines a class with one property and retrieves the name and type of the property.</span></span>  
  
 [!code-cpp[Type_GetProperty_Types#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty_Types/CPP/type_getproperty_types.cpp#1)]
 [!code-csharp[Type_GetProperty_Types#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty_Types/CS/type_getproperty_types.cs#1)]
 [!code-vb[Type_GetProperty_Types#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty_Types/VB/type_getproperty_types.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="6240b-2044">找到了多个具有指定名称的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2044">More than one property is found with the specified name.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-2045"><paramref name="name" /> 是 <see langword="null" />，或 <paramref name="returnType" /> 是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2045"><paramref name="name" /> is <see langword="null" />, or <paramref name="returnType" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, types As Type()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type[] -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * Type[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, types)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6240b-2046">包含要获取的公共属性名的字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-2046">The string containing the name of the public property to get.</span></span></param>
        <param name="types"><span data-ttu-id="6240b-2047">一个 <see cref="T:System.Type" /> 对象数组，表示要获取的索引属性的参数的数目、顺序和类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2047">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span></span>  
  
<span data-ttu-id="6240b-2048">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2048">-or-</span></span> 
<span data-ttu-id="6240b-2049">获取未被索引的属性的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。</span><span class="sxs-lookup"><span data-stu-id="6240b-2049">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span></span></param>
        <summary><span data-ttu-id="6240b-2050">搜索其参数与指定自变量类型匹配的指定公共属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2050">Searches for the specified public property whose parameters match the specified argument types.</span></span></summary>
        <returns><span data-ttu-id="6240b-2051">表示其参数与指定参数类型匹配的公共属性的对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2051">An object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-2052">如果它具有至少一个访问器，它是公共的属性被视为公共反射。</span><span class="sxs-lookup"><span data-stu-id="6240b-2052">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="6240b-2053">否则，该属性被视为私有的并且必须使用<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (在 Visual Basic 中，将使用的值合并`Or`) 来获取它。</span><span class="sxs-lookup"><span data-stu-id="6240b-2053">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="6240b-2054">搜索`name`区分大小写。</span><span class="sxs-lookup"><span data-stu-id="6240b-2054">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="6240b-2055">搜索中包括公共 static 和 public 实例属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2055">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="6240b-2056">如果当前<xref:System.Type>表示构造泛型类型，此方法返回<xref:System.Reflection.PropertyInfo>具有类型参数替换为适当的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2056">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-2057">如果当前<xref:System.Type>表示的类型参数的泛型类型或泛型方法定义中，在此方法搜索类约束的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2057">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="6240b-2058">索引器属性和默认属性</span><span class="sxs-lookup"><span data-stu-id="6240b-2058">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="6240b-2059">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)]，和[!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)]简化了用于访问索引的属性的语法，并允许一个索引的属性是其类型的默认值。</span><span class="sxs-lookup"><span data-stu-id="6240b-2059">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="6240b-2060">例如，如果变量`myList`是指<xref:System.Collections.ArrayList>，语法`myList[3]`(`myList(3)`在 Visual Basic 中) 检索索引为 3 的元素。</span><span class="sxs-lookup"><span data-stu-id="6240b-2060">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="6240b-2061">可以重载该属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2061">You can overload the property.</span></span>  
  
 <span data-ttu-id="6240b-2062">在 C# 中，此功能称为索引器，不能按名称引用。</span><span class="sxs-lookup"><span data-stu-id="6240b-2062">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="6240b-2063">默认情况下，C# 索引器将显示在元数据中作为名为"Item"索引属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2063">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="6240b-2064">但是，类库开发人员可以使用<xref:System.Runtime.CompilerServices.IndexerNameAttribute>特性来更改元数据中的索引器的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2064">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="6240b-2065">例如，<xref:System.String>类具有名为一个索引器<xref:System.String.Chars%2A>。</span><span class="sxs-lookup"><span data-stu-id="6240b-2065">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="6240b-2066">使用 C# 以外的语言创建的索引的属性可以具有项以外的名称以及。</span><span class="sxs-lookup"><span data-stu-id="6240b-2066">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="6240b-2067">若要确定类型是否具有默认属性，请使用<xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29>方法来测试<xref:System.Reflection.DefaultMemberAttribute>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2067">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="6240b-2068">如果该类型具有<xref:System.Reflection.DefaultMemberAttribute>，则<xref:System.Reflection.DefaultMemberAttribute.MemberName%2A>属性返回的默认属性的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2068">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-2069">下面的示例检索`Type`用户定义的类的对象检索该类的属性，并显示属性名称和属性的类型作为参数传递给指定的`GetProperty`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2069">The following example retrieves the `Type` object of a user-defined class, retrieves the property of that class, and displays the property name and type of the property as specified by the arguments passed to `GetProperty`.</span></span>  
  
 [!code-cpp[Type_GetProperty3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty3/CPP/type_getproperty3.cpp#1)]
 [!code-csharp[Type_GetProperty3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty3/CS/type_getproperty3.cs#1)]
 [!code-vb[Type_GetProperty3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty3/VB/type_getproperty3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="6240b-2070">找到多个具有指定名称且与指定自变量类型匹配的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2070">More than one property is found with the specified name and matching the specified argument types.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-2071"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2071"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="6240b-2072">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2072">-or-</span></span> 
 <span data-ttu-id="6240b-2073"><paramref name="types" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2073"><paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-2074"><paramref name="types" /> 是多维的。</span><span class="sxs-lookup"><span data-stu-id="6240b-2074"><paramref name="types" /> is multidimensional.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="6240b-2075"><paramref name="types" /> 的元素为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2075">An element of <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type, types As Type()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type * Type[] -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * Type * Type[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, returnType, types)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type,System.Type[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6240b-2076">包含要获取的公共属性名的字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-2076">The string containing the name of the public property to get.</span></span></param>
        <param name="returnType"><span data-ttu-id="6240b-2077">属性的返回类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2077">The return type of the property.</span></span></param>
        <param name="types"><span data-ttu-id="6240b-2078">一个 <see cref="T:System.Type" /> 对象数组，表示要获取的索引属性的参数的数目、顺序和类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2078">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span></span>  
  
<span data-ttu-id="6240b-2079">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2079">-or-</span></span> 
<span data-ttu-id="6240b-2080">获取未被索引的属性的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。</span><span class="sxs-lookup"><span data-stu-id="6240b-2080">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span></span></param>
        <summary><span data-ttu-id="6240b-2081">搜索其参数与指定自变量类型匹配的指定公共属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2081">Searches for the specified public property whose parameters match the specified argument types.</span></span></summary>
        <returns><span data-ttu-id="6240b-2082">表示其参数与指定参数类型匹配的公共属性的对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2082">An object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-2083">如果它具有至少一个访问器，它是公共的属性被视为公共反射。</span><span class="sxs-lookup"><span data-stu-id="6240b-2083">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="6240b-2084">否则，该属性被视为私有的并且必须使用<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (在 Visual Basic 中，将使用的值合并`Or`) 来获取它。</span><span class="sxs-lookup"><span data-stu-id="6240b-2084">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="6240b-2085">搜索`name`区分大小写。</span><span class="sxs-lookup"><span data-stu-id="6240b-2085">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="6240b-2086">搜索中包括公共 static 和 public 实例属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2086">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="6240b-2087">如果当前<xref:System.Type>表示构造泛型类型，此方法返回<xref:System.Reflection.PropertyInfo>具有类型参数替换为适当的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2087">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-2088">如果当前<xref:System.Type>表示的类型参数的泛型类型或泛型方法定义中，在此方法搜索类约束的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2088">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="6240b-2089">索引器属性和默认属性</span><span class="sxs-lookup"><span data-stu-id="6240b-2089">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="6240b-2090">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)]，和[!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)]简化了用于访问索引的属性的语法，并允许一个索引的属性是其类型的默认值。</span><span class="sxs-lookup"><span data-stu-id="6240b-2090">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="6240b-2091">例如，如果变量`myList`是指<xref:System.Collections.ArrayList>，语法`myList[3]`(`myList(3)`在 Visual Basic 中) 检索索引为 3 的元素。</span><span class="sxs-lookup"><span data-stu-id="6240b-2091">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="6240b-2092">可以重载该属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2092">You can overload the property.</span></span>  
  
 <span data-ttu-id="6240b-2093">在 C# 中，此功能称为索引器，不能按名称引用。</span><span class="sxs-lookup"><span data-stu-id="6240b-2093">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="6240b-2094">默认情况下，C# 索引器将显示在元数据中作为名为"Item"索引属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2094">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="6240b-2095">但是，类库开发人员可以使用<xref:System.Runtime.CompilerServices.IndexerNameAttribute>特性来更改元数据中的索引器的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2095">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="6240b-2096">例如，<xref:System.String>类具有名为一个索引器<xref:System.String.Chars%2A>。</span><span class="sxs-lookup"><span data-stu-id="6240b-2096">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="6240b-2097">使用 C# 以外的语言创建的索引的属性可以具有项以外的名称以及。</span><span class="sxs-lookup"><span data-stu-id="6240b-2097">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="6240b-2098">若要确定类型是否具有默认属性，请使用<xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29>方法来测试<xref:System.Reflection.DefaultMemberAttribute>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2098">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="6240b-2099">如果该类型具有<xref:System.Reflection.DefaultMemberAttribute>，则<xref:System.Reflection.DefaultMemberAttribute.MemberName%2A>属性返回的默认属性的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2099">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="6240b-2100">找到多个具有指定名称且与指定自变量类型匹配的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2100">More than one property is found with the specified name and matching the specified argument types.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-2101"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2101"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="6240b-2102">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2102">-or-</span></span> 
 <span data-ttu-id="6240b-2103"><paramref name="types" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2103"><paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-2104"><paramref name="types" /> 是多维的。</span><span class="sxs-lookup"><span data-stu-id="6240b-2104"><paramref name="types" /> is multidimensional.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="6240b-2105"><paramref name="types" /> 的元素为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2105">An element of <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type, types As Type(), modifiers As ParameterModifier()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6240b-2106">包含要获取的公共属性名的字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-2106">The string containing the name of the public property to get.</span></span></param>
        <param name="returnType"><span data-ttu-id="6240b-2107">属性的返回类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2107">The return type of the property.</span></span></param>
        <param name="types"><span data-ttu-id="6240b-2108">一个 <see cref="T:System.Type" /> 对象数组，表示要获取的索引属性的参数的数目、顺序和类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2108">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span></span>  
  
<span data-ttu-id="6240b-2109">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2109">-or-</span></span> 
<span data-ttu-id="6240b-2110">获取未被索引的属性的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。</span><span class="sxs-lookup"><span data-stu-id="6240b-2110">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span></span></param>
        <param name="modifiers"><span data-ttu-id="6240b-2111"><see cref="T:System.Reflection.ParameterModifier" /> 对象的数组，表示与 <paramref name="types" /> 数组中的相应元素关联的特性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2111">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="6240b-2112">默认的联编程序不处理此参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2112">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="6240b-2113">搜索其参数与指定自变量类型及修饰符匹配的指定公共属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2113">Searches for the specified public property whose parameters match the specified argument types and modifiers.</span></span></summary>
        <returns><span data-ttu-id="6240b-2114">表示符合指定需求的公共属性的对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2114">An object representing the public property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-2115">如果它具有至少一个访问器，它是公共的属性被视为公共反射。</span><span class="sxs-lookup"><span data-stu-id="6240b-2115">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="6240b-2116">否则，该属性被视为私有的并且必须使用<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (在 Visual Basic 中，将使用的值合并`Or`) 来获取它。</span><span class="sxs-lookup"><span data-stu-id="6240b-2116">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="6240b-2117">尽管默认联编程序不会处理<xref:System.Reflection.ParameterModifier>(`modifiers`参数)，您可以使用抽象<xref:System.Reflection.Binder?displayProperty=nameWithType>类以编写的自定义联编程序`modifiers`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2117">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="6240b-2118">`ParameterModifier` 通过 COM 互操作调用时，才使用和处理由引用传递的参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2118">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="6240b-2119">搜索`name`区分大小写。</span><span class="sxs-lookup"><span data-stu-id="6240b-2119">The search for `name` is case-sensitive.</span></span> <span data-ttu-id="6240b-2120">搜索中包括公共 static 和 public 实例属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2120">The search includes public static and public instance properties.</span></span>  
  
 <span data-ttu-id="6240b-2121">如果当前<xref:System.Type>表示构造泛型类型，此方法返回<xref:System.Reflection.PropertyInfo>具有类型参数替换为适当的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2121">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-2122">如果当前<xref:System.Type>表示的类型参数的泛型类型或泛型方法定义中，在此方法搜索类约束的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2122">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="6240b-2123">索引器属性和默认属性</span><span class="sxs-lookup"><span data-stu-id="6240b-2123">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="6240b-2124">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)]，和[!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)]简化了用于访问索引的属性的语法，并允许一个索引的属性是其类型的默认值。</span><span class="sxs-lookup"><span data-stu-id="6240b-2124">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="6240b-2125">例如，如果变量`myList`是指<xref:System.Collections.ArrayList>，语法`myList[3]`(`myList(3)`在 Visual Basic 中) 检索索引为 3 的元素。</span><span class="sxs-lookup"><span data-stu-id="6240b-2125">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="6240b-2126">可以重载该属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2126">You can overload the property.</span></span>  
  
 <span data-ttu-id="6240b-2127">在 C# 中，此功能称为索引器，不能按名称引用。</span><span class="sxs-lookup"><span data-stu-id="6240b-2127">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="6240b-2128">默认情况下，C# 索引器将显示在元数据中作为名为"Item"索引属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2128">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="6240b-2129">但是，类库开发人员可以使用<xref:System.Runtime.CompilerServices.IndexerNameAttribute>特性来更改元数据中的索引器的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2129">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="6240b-2130">例如，<xref:System.String>类具有名为一个索引器<xref:System.String.Chars%2A>。</span><span class="sxs-lookup"><span data-stu-id="6240b-2130">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="6240b-2131">使用 C# 以外的语言创建的索引的属性可以具有项以外的名称以及。</span><span class="sxs-lookup"><span data-stu-id="6240b-2131">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="6240b-2132">若要确定类型是否具有默认属性，请使用<xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29>方法来测试<xref:System.Reflection.DefaultMemberAttribute>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2132">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="6240b-2133">如果该类型具有<xref:System.Reflection.DefaultMemberAttribute>，则<xref:System.Reflection.DefaultMemberAttribute.MemberName%2A>属性返回的默认属性的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2133">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-2134">以下示例获取`Type`对象对应于`MyPropertyClass`，并使用传递给的参数检索此类的索引的属性`GetProperty`方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-2134">The following example obtains a `Type` object corresponding to `MyPropertyClass`, and the indexed property of this class is retrieved using the arguments passed to the `GetProperty` method.</span></span>  
  
 [!code-cpp[Type_GetProperty5#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty5/CPP/type_getproperty2.cpp#1)]
 [!code-csharp[Type_GetProperty5#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty5/CS/type_getproperty2.cs#1)]
 [!code-vb[Type_GetProperty5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty5/VB/type_getproperty2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="6240b-2135">找到多个具有指定名称且与指定自变量类型和修饰符匹配的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2135">More than one property is found with the specified name and matching the specified argument types and modifiers.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-2136"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2136"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="6240b-2137">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2137">-or-</span></span> 
 <span data-ttu-id="6240b-2138"><paramref name="types" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2138"><paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-2139"><paramref name="types" /> 是多维的。</span><span class="sxs-lookup"><span data-stu-id="6240b-2139"><paramref name="types" /> is multidimensional.</span></span>  
  
<span data-ttu-id="6240b-2140">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2140">-or-</span></span> 
 <span data-ttu-id="6240b-2141"><paramref name="modifiers" /> 是多维的。</span><span class="sxs-lookup"><span data-stu-id="6240b-2141"><paramref name="modifiers" /> is multidimensional.</span></span>  
  
<span data-ttu-id="6240b-2142">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2142">-or-</span></span> 
 <span data-ttu-id="6240b-2143"><paramref name="types" /> 和 <paramref name="modifiers" /> 的长度不相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-2143"><paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="6240b-2144"><paramref name="types" /> 的元素为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2144">An element of <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo&#xA;override this.GetProperty : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetProperty (name, bindingAttr, binder, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6240b-2145">包含要获取的属性名的字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-2145">The string containing the name of the property to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="6240b-2146">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="6240b-2146">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="6240b-2147">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2147">-or-</span></span> 
<span data-ttu-id="6240b-2148">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2148">Zero, to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="6240b-2149">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-2149">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="6240b-2150">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2150">-or-</span></span> 
<span data-ttu-id="6240b-2151">要使用 <see langword="Nothing" /> 的空引用（在 Visual Basic 中为 <see cref="P:System.Type.DefaultBinder" />）。</span><span class="sxs-lookup"><span data-stu-id="6240b-2151">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="6240b-2152">属性的返回类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2152">The return type of the property.</span></span></param>
        <param name="types"><span data-ttu-id="6240b-2153">一个 <see cref="T:System.Type" /> 对象数组，表示要获取的索引属性的参数的数目、顺序和类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2153">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span></span>  
  
<span data-ttu-id="6240b-2154">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2154">-or-</span></span> 
<span data-ttu-id="6240b-2155">获取未被索引的属性的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。</span><span class="sxs-lookup"><span data-stu-id="6240b-2155">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span></span></param>
        <param name="modifiers"><span data-ttu-id="6240b-2156"><see cref="T:System.Reflection.ParameterModifier" /> 对象的数组，表示与 <paramref name="types" /> 数组中的相应元素关联的特性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2156">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="6240b-2157">默认的联编程序不处理此参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2157">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="6240b-2158">使用指定的绑定约束，搜索参数与指定的自变量类型及修饰符匹配的指定属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2158">Searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="6240b-2159">表示符合指定需求的属性的对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2159">An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-2160">如果它具有至少一个访问器，它是公共的属性被视为公共反射。</span><span class="sxs-lookup"><span data-stu-id="6240b-2160">A property is considered public to reflection if it has at least one accessor that is public.</span></span> <span data-ttu-id="6240b-2161">否则，该属性被视为私有的并且必须使用<xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (在 Visual Basic 中，将使用的值合并`Or`) 来获取它。</span><span class="sxs-lookup"><span data-stu-id="6240b-2161">Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags.NonPublic?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Instance?displayProperty=nameWithType> &#124; <xref:System.Reflection.BindingFlags.Static?displayProperty=nameWithType> (in Visual Basic, combine the values using `Or`) to get it.</span></span>  
  
 <span data-ttu-id="6240b-2162">尽管默认联编程序不会处理<xref:System.Reflection.ParameterModifier>(`modifiers`参数)，您可以使用抽象<xref:System.Reflection.Binder?displayProperty=nameWithType>类以编写的自定义联编程序`modifiers`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2162">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="6240b-2163">`ParameterModifier` 通过 COM 互操作调用时，才使用和处理由引用传递的参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2163">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="6240b-2164">下表显示了返回通过基类的成员`Get`方法反射的类型上时。</span><span class="sxs-lookup"><span data-stu-id="6240b-2164">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6240b-2165">成员类型</span><span class="sxs-lookup"><span data-stu-id="6240b-2165">Member Type</span></span>|<span data-ttu-id="6240b-2166">Static</span><span class="sxs-lookup"><span data-stu-id="6240b-2166">Static</span></span>|<span data-ttu-id="6240b-2167">非静态</span><span class="sxs-lookup"><span data-stu-id="6240b-2167">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6240b-2168">构造函数</span><span class="sxs-lookup"><span data-stu-id="6240b-2168">Constructor</span></span>|<span data-ttu-id="6240b-2169">No</span><span class="sxs-lookup"><span data-stu-id="6240b-2169">No</span></span>|<span data-ttu-id="6240b-2170">No</span><span class="sxs-lookup"><span data-stu-id="6240b-2170">No</span></span>|  
|<span data-ttu-id="6240b-2171">字段</span><span class="sxs-lookup"><span data-stu-id="6240b-2171">Field</span></span>|<span data-ttu-id="6240b-2172">No</span><span class="sxs-lookup"><span data-stu-id="6240b-2172">No</span></span>|<span data-ttu-id="6240b-2173">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-2173">Yes.</span></span> <span data-ttu-id="6240b-2174">字段始终是按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-2174">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-2175">事件</span><span class="sxs-lookup"><span data-stu-id="6240b-2175">Event</span></span>|<span data-ttu-id="6240b-2176">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-2176">Not applicable</span></span>|<span data-ttu-id="6240b-2177">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-2177">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-2178">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-2178">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-2179">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-2179">See note 2 below.</span></span>|  
|<span data-ttu-id="6240b-2180">方法</span><span class="sxs-lookup"><span data-stu-id="6240b-2180">Method</span></span>|<span data-ttu-id="6240b-2181">No</span><span class="sxs-lookup"><span data-stu-id="6240b-2181">No</span></span>|<span data-ttu-id="6240b-2182">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-2182">Yes.</span></span> <span data-ttu-id="6240b-2183">方法 （包括虚拟和非虚拟） 可以隐藏通过名称或按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-2183">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-2184">嵌套的类型</span><span class="sxs-lookup"><span data-stu-id="6240b-2184">Nested Type</span></span>|<span data-ttu-id="6240b-2185">No</span><span class="sxs-lookup"><span data-stu-id="6240b-2185">No</span></span>|<span data-ttu-id="6240b-2186">No</span><span class="sxs-lookup"><span data-stu-id="6240b-2186">No</span></span>|  
|<span data-ttu-id="6240b-2187">Property</span><span class="sxs-lookup"><span data-stu-id="6240b-2187">Property</span></span>|<span data-ttu-id="6240b-2188">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-2188">Not applicable</span></span>|<span data-ttu-id="6240b-2189">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-2189">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-2190">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-2190">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-2191">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-2191">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6240b-2192">按名称和签名隐藏会考虑所有的签名，包括自定义修饰符，部分返回类型、 参数类型、 标记和非托管调用约定。</span><span class="sxs-lookup"><span data-stu-id="6240b-2192">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6240b-2193">这是二进制比较。</span><span class="sxs-lookup"><span data-stu-id="6240b-2193">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6240b-2194">为反射，属性和事件均由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-2194">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-2195">如果具有 get 和 set 访问器的属性中的基类，但派生的类具有一个 get 访问器，派生的类属性隐藏基类属性，并且你将无法再访问基类上的资源库。</span><span class="sxs-lookup"><span data-stu-id="6240b-2195">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6240b-2196">自定义特性不是通用类型系统的一部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-2196">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="6240b-2197">以下<xref:System.Reflection.BindingFlags>的筛选器标志可以用于定义要在搜索中包括的属性：</span><span class="sxs-lookup"><span data-stu-id="6240b-2197">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:</span></span>  
  
-   <span data-ttu-id="6240b-2198">您必须指定这两`BindingFlags.Instance`或`BindingFlags.Static`为了获取返回。</span><span class="sxs-lookup"><span data-stu-id="6240b-2198">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6240b-2199">指定`BindingFlags.Public`若要在搜索中包括的公共属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2199">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="6240b-2200">指定`BindingFlags.NonPublic`若要在搜索中包括非公共属性 （即私有、 内部和受保护属性）。</span><span class="sxs-lookup"><span data-stu-id="6240b-2200">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span>  
  
-   <span data-ttu-id="6240b-2201">指定`BindingFlags.FlattenHierarchy`用以`public`和`protected`层次结构; 上的静态成员`private`中继承的类的静态成员不包括。</span><span class="sxs-lookup"><span data-stu-id="6240b-2201">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="6240b-2202">以下<xref:System.Reflection.BindingFlags>修饰符标志可以用于更改搜索的工作原理：</span><span class="sxs-lookup"><span data-stu-id="6240b-2202">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6240b-2203">`BindingFlags.IgnoreCase` 若要忽略大小写的`name`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2203">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="6240b-2204">`BindingFlags.DeclaredOnly` 若要搜索上声明属性<xref:System.Type>，不只是继承的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2204">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="6240b-2205">有关更多信息，请参见<xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-2205">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6240b-2206">如果当前<xref:System.Type>表示构造泛型类型，此方法返回<xref:System.Reflection.PropertyInfo>具有类型参数替换为适当的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2206">If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.</span></span>  
  
 <span data-ttu-id="6240b-2207">如果当前<xref:System.Type>表示的类型参数的泛型类型或泛型方法定义中，在此方法搜索类约束的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2207">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.</span></span>  
  
## <a name="indexers-and-default-properties"></a><span data-ttu-id="6240b-2208">索引器属性和默认属性</span><span class="sxs-lookup"><span data-stu-id="6240b-2208">Indexers and Default Properties</span></span>  
 [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]<span data-ttu-id="6240b-2209">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)]，和[!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)]简化了用于访问索引的属性的语法，并允许一个索引的属性是其类型的默认值。</span><span class="sxs-lookup"><span data-stu-id="6240b-2209">, [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type.</span></span> <span data-ttu-id="6240b-2210">例如，如果变量`myList`是指<xref:System.Collections.ArrayList>，语法`myList[3]`(`myList(3)`在 Visual Basic 中) 检索索引为 3 的元素。</span><span class="sxs-lookup"><span data-stu-id="6240b-2210">For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3.</span></span> <span data-ttu-id="6240b-2211">可以重载该属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2211">You can overload the property.</span></span>  
  
 <span data-ttu-id="6240b-2212">在 C# 中，此功能称为索引器，不能按名称引用。</span><span class="sxs-lookup"><span data-stu-id="6240b-2212">In C#, this feature is called an indexer and cannot be refered to by name.</span></span> <span data-ttu-id="6240b-2213">默认情况下，C# 索引器将显示在元数据中作为名为"Item"索引属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2213">By default, a C# indexer appears in metadata as an indexed property named "Item".</span></span> <span data-ttu-id="6240b-2214">但是，类库开发人员可以使用<xref:System.Runtime.CompilerServices.IndexerNameAttribute>特性来更改元数据中的索引器的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2214">However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata.</span></span> <span data-ttu-id="6240b-2215">例如，<xref:System.String>类具有名为一个索引器<xref:System.String.Chars%2A>。</span><span class="sxs-lookup"><span data-stu-id="6240b-2215">For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>.</span></span> <span data-ttu-id="6240b-2216">使用 C# 以外的语言创建的索引的属性可以具有项以外的名称以及。</span><span class="sxs-lookup"><span data-stu-id="6240b-2216">Indexed properties created using languages other than C# can have names other than Item, as well.</span></span>  
  
 <span data-ttu-id="6240b-2217">若要确定类型是否具有默认属性，请使用<xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29>方法来测试<xref:System.Reflection.DefaultMemberAttribute>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2217">To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute.</span></span> <span data-ttu-id="6240b-2218">如果该类型具有<xref:System.Reflection.DefaultMemberAttribute>，则<xref:System.Reflection.DefaultMemberAttribute.MemberName%2A>属性返回的默认属性的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2218">If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="6240b-2219">找到多个具有指定名称的属性且属性与指定绑定约束匹配。</span><span class="sxs-lookup"><span data-stu-id="6240b-2219">More than one property is found with the specified name and matching the specified binding constraints.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-2220"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2220"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="6240b-2221">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2221">-or-</span></span> 
 <span data-ttu-id="6240b-2222"><paramref name="types" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2222"><paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-2223"><paramref name="types" /> 是多维的。</span><span class="sxs-lookup"><span data-stu-id="6240b-2223"><paramref name="types" /> is multidimensional.</span></span>  
  
<span data-ttu-id="6240b-2224">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2224">-or-</span></span> 
 <span data-ttu-id="6240b-2225"><paramref name="modifiers" /> 是多维的。</span><span class="sxs-lookup"><span data-stu-id="6240b-2225"><paramref name="modifiers" /> is multidimensional.</span></span>  
  
<span data-ttu-id="6240b-2226">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2226">-or-</span></span> 
 <span data-ttu-id="6240b-2227"><paramref name="types" /> 和 <paramref name="modifiers" /> 的长度不相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-2227"><paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="6240b-2228"><paramref name="types" /> 的元素为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2228">An element of <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <Member MemberName="GetPropertyImpl">
      <MemberSignature Language="C#" Value="protected abstract System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.PropertyInfo GetPropertyImpl(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Reflection::PropertyInfo ^ GetPropertyImpl(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetPropertyImpl : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="type.GetPropertyImpl (name, bindingAttr, binder, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6240b-2229">包含要获取的属性名的字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-2229">The string containing the name of the property to get.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="6240b-2230">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="6240b-2230">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span>  
  
<span data-ttu-id="6240b-2231">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2231">-or-</span></span> 
<span data-ttu-id="6240b-2232">零，以返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2232">Zero, to return <see langword="null" />.</span></span></param>
        <param name="binder"><span data-ttu-id="6240b-2233">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载成员、强制自变量类型和通过反射调用成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-2233">An object that defines a set of properties and enables binding, which can involve selection of an overloaded member, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="6240b-2234">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2234">-or-</span></span> 
<span data-ttu-id="6240b-2235">要使用 <see langword="Nothing" /> 的空引用（在 Visual Basic 中为 <see cref="P:System.Type.DefaultBinder" />）。</span><span class="sxs-lookup"><span data-stu-id="6240b-2235">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span></param>
        <param name="returnType"><span data-ttu-id="6240b-2236">属性的返回类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2236">The return type of the property.</span></span></param>
        <param name="types"><span data-ttu-id="6240b-2237">一个 <see cref="T:System.Type" /> 对象数组，表示要获取的索引属性的参数的数目、顺序和类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2237">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span></span>  
  
<span data-ttu-id="6240b-2238">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2238">-or-</span></span> 
<span data-ttu-id="6240b-2239">获取未被索引的属性的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。</span><span class="sxs-lookup"><span data-stu-id="6240b-2239">An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span></span></param>
        <param name="modifiers"><span data-ttu-id="6240b-2240"><see cref="T:System.Reflection.ParameterModifier" /> 对象的数组，表示与 <paramref name="types" /> 数组中的相应元素关联的特性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2240">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="types" /> array.</span></span> <span data-ttu-id="6240b-2241">默认的联编程序不处理此参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2241">The default binder does not process this parameter.</span></span></param>
        <summary><span data-ttu-id="6240b-2242">当在派生类中重写时，使用指定的绑定约束搜索其参数与指定的自变量类型和修饰符匹配的指定属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2242">When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span></span></summary>
        <returns><span data-ttu-id="6240b-2243">表示符合指定需求的属性的对象（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2243">An object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-2244">尽管默认联编程序不会处理<xref:System.Reflection.ParameterModifier>(`modifiers`参数)，您可以使用抽象<xref:System.Reflection.Binder?displayProperty=nameWithType>类以编写的自定义联编程序`modifiers`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2244">Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers`.</span></span> <span data-ttu-id="6240b-2245">`ParameterModifier` 通过 COM 互操作调用时，才使用和处理由引用传递的参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2245">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="6240b-2246">以下<xref:System.Reflection.BindingFlags>的筛选器标志可以用于定义要在搜索中包括的属性：</span><span class="sxs-lookup"><span data-stu-id="6240b-2246">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:</span></span>  
  
-   <span data-ttu-id="6240b-2247">您必须指定这两`BindingFlags.Instance`或`BindingFlags.Static`为了获取返回。</span><span class="sxs-lookup"><span data-stu-id="6240b-2247">You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.</span></span>  
  
-   <span data-ttu-id="6240b-2248">指定`BindingFlags.Public`若要在搜索中包括的公共属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2248">Specify `BindingFlags.Public` to include public properties in the search.</span></span>  
  
-   <span data-ttu-id="6240b-2249">指定`BindingFlags.NonPublic`若要在搜索中包括非公共属性 （即私有、 内部和受保护属性）。</span><span class="sxs-lookup"><span data-stu-id="6240b-2249">Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.</span></span>  
  
-   <span data-ttu-id="6240b-2250">指定`BindingFlags.FlattenHierarchy`用以`public`和`protected`层次结构; 上的静态成员`private`中继承的类的静态成员不包括。</span><span class="sxs-lookup"><span data-stu-id="6240b-2250">Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.</span></span>  
  
 <span data-ttu-id="6240b-2251">以下<xref:System.Reflection.BindingFlags>修饰符标志可以用于更改搜索的工作原理：</span><span class="sxs-lookup"><span data-stu-id="6240b-2251">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6240b-2252">`BindingFlags.IgnoreCase` 若要忽略大小写的`name`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2252">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="6240b-2253">`BindingFlags.DeclaredOnly` 若要搜索上声明属性<xref:System.Type>，不只是继承的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2253">`BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.</span></span>  
  
 <span data-ttu-id="6240b-2254">有关更多信息，请参见<xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-2254">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="6240b-2255">找到多个具有指定名称的属性且属性与指定绑定约束匹配。</span><span class="sxs-lookup"><span data-stu-id="6240b-2255">More than one property is found with the specified name and matching the specified binding constraints.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-2256"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2256"><paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="6240b-2257">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2257">-or-</span></span> 
 <span data-ttu-id="6240b-2258"><paramref name="types" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2258"><paramref name="types" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="6240b-2259">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2259">-or-</span></span> 
<span data-ttu-id="6240b-2260"><paramref name="types" /> 的其中一个元素为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2260">One of the elements in <paramref name="types" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-2261"><paramref name="types" /> 是多维的。</span><span class="sxs-lookup"><span data-stu-id="6240b-2261"><paramref name="types" /> is multidimensional.</span></span>  
  
<span data-ttu-id="6240b-2262">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2262">-or-</span></span> 
 <span data-ttu-id="6240b-2263"><paramref name="modifiers" /> 是多维的。</span><span class="sxs-lookup"><span data-stu-id="6240b-2263"><paramref name="modifiers" /> is multidimensional.</span></span>  
  
<span data-ttu-id="6240b-2264">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2264">-or-</span></span> 
 <span data-ttu-id="6240b-2265"><paramref name="types" /> 和 <paramref name="modifiers" /> 的长度不相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-2265"><paramref name="types" /> and <paramref name="modifiers" /> do not have the same length.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6240b-2266">当前的类型是 <see cref="T:System.Reflection.Emit.TypeBuilder" />、<see cref="T:System.Reflection.Emit.EnumBuilder" /> 或 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2266">The current type is a <see cref="T:System.Reflection.Emit.TypeBuilder" />, <see cref="T:System.Reflection.Emit.EnumBuilder" />, or <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</span></span></exception>
        <altmember cref="T:System.Reflection.PropertyInfo" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
        <altmember cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetType">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6240b-2267">获取表示指定类型的 <see cref="T:System.Type" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-2267">Gets a <see cref="T:System.Type" /> object that represents the specified type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType();" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="type.GetType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-2268">获取当前 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2268">Gets the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="6240b-2269">当前的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2269">The current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="6240b-2270">调用了类初始值设定项，且该项引发了异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-2270">A class initializer is invoked and throws an exception.</span></span></exception>
        <altmember cref="T:System.TypeLoadException" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md"><span data-ttu-id="6240b-2271">指定完全限定的类型名称</span><span class="sxs-lookup"><span data-stu-id="6240b-2271">Specifying Fully Qualified Type Names</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="static member GetType : string -&gt; Type" Usage="System.Type.GetType typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="6240b-2272">要获取的类型的程序集限定名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2272">The assembly-qualified name of the type to get.</span></span> <span data-ttu-id="6240b-2273">请参阅 <see cref="P:System.Type.AssemblyQualifiedName" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2273">See <see cref="P:System.Type.AssemblyQualifiedName" />.</span></span> <span data-ttu-id="6240b-2274">如果该类型位于当前正在执行的程序集中或者 Mscorlib.dll 中，则提供由命名空间限定的类型名称就足够了。</span><span class="sxs-lookup"><span data-stu-id="6240b-2274">If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</span></span></param>
        <summary><span data-ttu-id="6240b-2275">获取具有指定名称的 <see cref="T:System.Type" />，执行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="6240b-2275">Gets the <see cref="T:System.Type" /> with the specified name, performing a case-sensitive search.</span></span></summary>
        <returns><span data-ttu-id="6240b-2276">具有指定名称的类型（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2276">The type with the specified name, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-2277">可以使用<xref:System.Type.GetType%2A>方法来获取<xref:System.Type>对象的另一个程序集中的类型，如果你知道它的程序集限定名称可获取从<xref:System.Type.AssemblyQualifiedName>。</span><span class="sxs-lookup"><span data-stu-id="6240b-2277">You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly, if you know its assembly-qualified name which can be obtained from <xref:System.Type.AssemblyQualifiedName>.</span></span> <span data-ttu-id="6240b-2278"><xref:System.Type.GetType%2A> 导致在指定的程序集加载`typeName`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2278"><xref:System.Type.GetType%2A> causes loading of the assembly specified in `typeName`.</span></span> <span data-ttu-id="6240b-2279">您也可以加载使用程序集<xref:System.Reflection.Assembly.Load%2A>方法，并使用<xref:System.Type.GetType%2A>或<xref:System.Reflection.Assembly.GetTypes%2A>的方法<xref:System.Reflection.Assembly>类，以获取<xref:System.Type>对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-2279">You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A> method, and then use the <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetTypes%2A> methods of the <xref:System.Reflection.Assembly> class to get <xref:System.Type> objects.</span></span> <span data-ttu-id="6240b-2280">如果类型为对您的程序在编译时已知的程序集中，是在 C# 中，使用更加高效<xref:System.Type.GetType%2A>在 Visual Basic 或 c + + 中。</span><span class="sxs-lookup"><span data-stu-id="6240b-2280">If a type is in an assembly known to your program at compile time, it is more efficient to use  in C#, <xref:System.Type.GetType%2A> in Visual Basic, or  in C++.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-2281">如果`typeName`找不到，在调用<xref:System.Type.GetType%28System.String%29>方法将返回`null`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2281">If `typeName` cannot be found, the call to the <xref:System.Type.GetType%28System.String%29> method returns `null`.</span></span> <span data-ttu-id="6240b-2282">它不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-2282">It does not throw an exception.</span></span> <span data-ttu-id="6240b-2283">若要控制是否会引发异常，调用的重载<xref:System.Type.GetType%2A>方法具有`throwOnError`参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2283">To control whether an exception is thrown, call an overload of the <xref:System.Type.GetType%2A> method that has a `throwOnError` parameter.</span></span>  
  
 <span data-ttu-id="6240b-2284"><xref:System.Type.GetType%2A> 仅适用于从磁盘加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-2284"><xref:System.Type.GetType%2A> only works on assemblies loaded from disk.</span></span> <span data-ttu-id="6240b-2285">如果您调用<xref:System.Type.GetType%2A>来查找使用定义动态程序集中定义的类型<xref:System.Reflection.Emit>服务，你可能会收到不一致的行为。</span><span class="sxs-lookup"><span data-stu-id="6240b-2285">If you call <xref:System.Type.GetType%2A> to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior.</span></span> <span data-ttu-id="6240b-2286">行为取决于动态程序集是持久的也就是说，创建使用`RunAndSave`或`Save`访问模式的<xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType>枚举。</span><span class="sxs-lookup"><span data-stu-id="6240b-2286">The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="6240b-2287">如果动态程序集是持久性的和已写入磁盘之前`GetType`是调用，加载程序在磁盘上找到已保存的程序集，加载该程序集，并且该程序集中检索的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2287">If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly.</span></span> <span data-ttu-id="6240b-2288">如果该程序集未保存到磁盘`GetType`调用时，该方法将返回`null`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2288">If the assembly has not been saved to disk when `GetType` is called, the method returns `null`.</span></span> <span data-ttu-id="6240b-2289">`GetType` 不能理解瞬态动态程序集;因此，调用`GetType`来检索中暂时性的类型的动态程序集返回`null`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2289">`GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.</span></span>  
  
 <span data-ttu-id="6240b-2290">若要使用`GetType`上的动态模块订阅<xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType>事件，并调用`GetType`然后再进行保存。</span><span class="sxs-lookup"><span data-stu-id="6240b-2290">To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> event and call `GetType` before saving.</span></span> <span data-ttu-id="6240b-2291">否则，你会在内存中出现的程序集的两个副本。</span><span class="sxs-lookup"><span data-stu-id="6240b-2291">Otherwise, you will get two copies of the assembly in memory.</span></span>  
  
 <span data-ttu-id="6240b-2292">下表显示了返回通过基类的成员`Get`方法反射的类型上时。</span><span class="sxs-lookup"><span data-stu-id="6240b-2292">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6240b-2293">成员类型</span><span class="sxs-lookup"><span data-stu-id="6240b-2293">Member Type</span></span>|<span data-ttu-id="6240b-2294">Static</span><span class="sxs-lookup"><span data-stu-id="6240b-2294">Static</span></span>|<span data-ttu-id="6240b-2295">非静态</span><span class="sxs-lookup"><span data-stu-id="6240b-2295">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6240b-2296">构造函数</span><span class="sxs-lookup"><span data-stu-id="6240b-2296">Constructor</span></span>|<span data-ttu-id="6240b-2297">No</span><span class="sxs-lookup"><span data-stu-id="6240b-2297">No</span></span>|<span data-ttu-id="6240b-2298">No</span><span class="sxs-lookup"><span data-stu-id="6240b-2298">No</span></span>|  
|<span data-ttu-id="6240b-2299">字段</span><span class="sxs-lookup"><span data-stu-id="6240b-2299">Field</span></span>|<span data-ttu-id="6240b-2300">No</span><span class="sxs-lookup"><span data-stu-id="6240b-2300">No</span></span>|<span data-ttu-id="6240b-2301">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-2301">Yes.</span></span> <span data-ttu-id="6240b-2302">字段始终是按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-2302">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-2303">事件</span><span class="sxs-lookup"><span data-stu-id="6240b-2303">Event</span></span>|<span data-ttu-id="6240b-2304">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-2304">Not applicable</span></span>|<span data-ttu-id="6240b-2305">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-2305">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-2306">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-2306">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-2307">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-2307">See note 2 below.</span></span>|  
|<span data-ttu-id="6240b-2308">方法</span><span class="sxs-lookup"><span data-stu-id="6240b-2308">Method</span></span>|<span data-ttu-id="6240b-2309">No</span><span class="sxs-lookup"><span data-stu-id="6240b-2309">No</span></span>|<span data-ttu-id="6240b-2310">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-2310">Yes.</span></span> <span data-ttu-id="6240b-2311">方法 （包括虚拟和非虚拟） 可以隐藏通过名称或按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-2311">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-2312">嵌套的类型</span><span class="sxs-lookup"><span data-stu-id="6240b-2312">Nested Type</span></span>|<span data-ttu-id="6240b-2313">No</span><span class="sxs-lookup"><span data-stu-id="6240b-2313">No</span></span>|<span data-ttu-id="6240b-2314">No</span><span class="sxs-lookup"><span data-stu-id="6240b-2314">No</span></span>|  
|<span data-ttu-id="6240b-2315">Property</span><span class="sxs-lookup"><span data-stu-id="6240b-2315">Property</span></span>|<span data-ttu-id="6240b-2316">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-2316">Not applicable</span></span>|<span data-ttu-id="6240b-2317">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-2317">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-2318">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-2318">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-2319">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-2319">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6240b-2320">按名称和签名隐藏会考虑所有的签名，包括自定义修饰符，部分返回类型、 参数类型、 标记和非托管调用约定。</span><span class="sxs-lookup"><span data-stu-id="6240b-2320">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6240b-2321">这是二进制比较。</span><span class="sxs-lookup"><span data-stu-id="6240b-2321">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6240b-2322">为反射，属性和事件均由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-2322">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-2323">如果具有 get 和 set 访问器的属性中的基类，但派生的类具有一个 get 访问器，派生的类属性隐藏基类属性，并且你将无法再访问基类上的资源库。</span><span class="sxs-lookup"><span data-stu-id="6240b-2323">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6240b-2324">自定义特性不是通用类型系统的一部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-2324">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="6240b-2325">数组或 COM 类型是不执行搜索，除非它们已加载到表中的可用类。</span><span class="sxs-lookup"><span data-stu-id="6240b-2325">Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.</span></span>  
  
 <span data-ttu-id="6240b-2326">`typeName` 可将类型名称由限定其命名空间或程序集限定名，包括程序集名称规范。</span><span class="sxs-lookup"><span data-stu-id="6240b-2326">`typeName` can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification.</span></span> <span data-ttu-id="6240b-2327">请参阅 <xref:System.Type.AssemblyQualifiedName%2A>。</span><span class="sxs-lookup"><span data-stu-id="6240b-2327">See <xref:System.Type.AssemblyQualifiedName%2A>.</span></span>  
  
 <span data-ttu-id="6240b-2328">如果`typeName`包括命名空间而不是程序集名称，此方法搜索仅调用对象的程序集和 Mscorlib.dll，按该顺序。</span><span class="sxs-lookup"><span data-stu-id="6240b-2328">If `typeName` includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order.</span></span> <span data-ttu-id="6240b-2329">如果使用的部分或完整的程序集名称完全限定类型名称，此方法搜索中指定的程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-2329">If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly.</span></span> <span data-ttu-id="6240b-2330">如果该程序集具有强名称，则需要一个完整的程序集名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2330">If the assembly has a strong name, a complete assembly name is required.</span></span>  
  
 <span data-ttu-id="6240b-2331"><xref:System.Type.AssemblyQualifiedName%2A>属性将返回包括嵌套的类型、 程序集名称和泛型类型参数的完全限定的类型名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2331">The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and generic type arguments.</span></span> <span data-ttu-id="6240b-2332">支持公共语言运行时的所有编译器将都发出嵌套类的简单名称和反射构造查询时，根据以下约定的重整的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2332">All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-2333">在.NET Framework 2.0 版中，处理器体系结构添加到程序集标识，并可以指定为程序集名称字符串的一部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-2333">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="6240b-2334">例如，"ProcessorArchitecture = msil"。</span><span class="sxs-lookup"><span data-stu-id="6240b-2334">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="6240b-2335">但是，不包括在返回的字符串<xref:System.Type.AssemblyQualifiedName%2A>属性，出于兼容性原因。</span><span class="sxs-lookup"><span data-stu-id="6240b-2335">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="6240b-2336">此外可以通过创建加载类型<xref:System.Reflection.AssemblyName>对象并将其传递到的相应重载<xref:System.Reflection.Assembly.Load%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-2336">You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="6240b-2337">然后，可以使用<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>方法来加载类型的程序集中。</span><span class="sxs-lookup"><span data-stu-id="6240b-2337">You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method to load types from the assembly.</span></span> <span data-ttu-id="6240b-2338">另请参阅 <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-2338">See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="6240b-2339">分隔符</span><span class="sxs-lookup"><span data-stu-id="6240b-2339">Delimiter</span></span>|<span data-ttu-id="6240b-2340">含义</span><span class="sxs-lookup"><span data-stu-id="6240b-2340">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="6240b-2341">反斜杠 (\\)</span><span class="sxs-lookup"><span data-stu-id="6240b-2341">Backslash (\\)</span></span>|<span data-ttu-id="6240b-2342">转义符。</span><span class="sxs-lookup"><span data-stu-id="6240b-2342">Escape character.</span></span>|  
|<span data-ttu-id="6240b-2343">反撇号 （'） |位于一个或多个数字表示的类型参数，位于末尾的泛型类型的名称数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2343">Backtick (\`)|Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.</span></span>|  
|<span data-ttu-id="6240b-2344">方括号 ([])</span><span class="sxs-lookup"><span data-stu-id="6240b-2344">Brackets ([])</span></span>|<span data-ttu-id="6240b-2345">泛型类型参数列表，用于构造泛型类型; 括起来在类型参数列表中，则将程序集限定的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2345">Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.</span></span>|  
|<span data-ttu-id="6240b-2346">逗号 （，）</span><span class="sxs-lookup"><span data-stu-id="6240b-2346">Comma (,)</span></span>|<span data-ttu-id="6240b-2347">程序集名称前面。</span><span class="sxs-lookup"><span data-stu-id="6240b-2347">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="6240b-2348">句点 （.）</span><span class="sxs-lookup"><span data-stu-id="6240b-2348">Period (.)</span></span>|<span data-ttu-id="6240b-2349">表示命名空间标识符。</span><span class="sxs-lookup"><span data-stu-id="6240b-2349">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="6240b-2350">加号 （+）</span><span class="sxs-lookup"><span data-stu-id="6240b-2350">Plus sign (+)</span></span>|<span data-ttu-id="6240b-2351">位于嵌套的类。</span><span class="sxs-lookup"><span data-stu-id="6240b-2351">Precedes a nested class.</span></span>|  
  
 <span data-ttu-id="6240b-2352">例如，一个类的完全限定的名称可能如下所示：</span><span class="sxs-lookup"><span data-stu-id="6240b-2352">For example, the fully qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="6240b-2353">如果命名空间为 TopNamespace.Sub+Namespace，则必须在字符串前面加一个转义字符加号 （+） (\\) 以防止它被解释为嵌套分隔符。</span><span class="sxs-lookup"><span data-stu-id="6240b-2353">If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="6240b-2354">反射发出此字符串，如下所示：</span><span class="sxs-lookup"><span data-stu-id="6240b-2354">Reflection emits this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="6240b-2355">一个"+ +"变为"\\+\\+"，和一个"\\"变为"\\\\"。</span><span class="sxs-lookup"><span data-stu-id="6240b-2355">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="6240b-2356">可以保持此限定的名，并在以后使用它来加载<xref:System.Type>。</span><span class="sxs-lookup"><span data-stu-id="6240b-2356">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="6240b-2357">若要搜索并加载<xref:System.Type>，使用<xref:System.Type.GetType%2A>使用类型名称只或用程序集限定的类型名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2357">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="6240b-2358"><xref:System.Type.GetType%2A> 使用类型名称只会查找<xref:System.Type>中调用方的程序集，然后在系统程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-2358"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="6240b-2359"><xref:System.Type.GetType%2A> 使用程序集限定的类型名称将寻找<xref:System.Type>在任何程序集中。</span><span class="sxs-lookup"><span data-stu-id="6240b-2359"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="6240b-2360">类型名称可能包含尾随字符表示的类型，如类型是引用类型、 指针类型或数组类型有关的其他信息。</span><span class="sxs-lookup"><span data-stu-id="6240b-2360">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="6240b-2361">若要检索的类型名称而无需这些尾随字符，请使用`t.GetElementType().ToString()`，其中`t`的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2361">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="6240b-2362">空格都是相关程序集名称之外的所有类型的名称组件中。</span><span class="sxs-lookup"><span data-stu-id="6240b-2362">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="6240b-2363">在程序集名称，分隔符前的空格相关，但是、 分隔符之后的空格将被忽略。</span><span class="sxs-lookup"><span data-stu-id="6240b-2363">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="6240b-2364">泛型类型的名称结尾反引号 (\`) 跟数字表示的泛型类型参数的数目。</span><span class="sxs-lookup"><span data-stu-id="6240b-2364">The name of a generic type ends with a backtick (\`) followed by digits representing the number of generic type arguments.</span></span> <span data-ttu-id="6240b-2365">此名称重整的目的是允许编译器来支持在同一作用域中发生的泛型类型具有相同名称但具有不同数量的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2365">The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope.</span></span> <span data-ttu-id="6240b-2366">例如，反射返回重整的名称`Tuple`1` and `元组`2`从泛型方法`Tuple(Of T)`并`Tuple(Of T0, T1)`在 Visual Basic 中，或`Tuple<T>`和元组`\<T0, T1>`Visual C# 中。</span><span class="sxs-lookup"><span data-stu-id="6240b-2366">For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`\<T0, T1>` in Visual C#.</span></span>  
  
 <span data-ttu-id="6240b-2367">对于泛型类型，类型实参列表括在方括号内，并由逗号分隔的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2367">For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas.</span></span> <span data-ttu-id="6240b-2368">例如，泛型<xref:System.Collections.Generic.Dictionary%602>具有两个类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2368">For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters.</span></span> <span data-ttu-id="6240b-2369">一个<xref:System.Collections.Generic.Dictionary%602>的`MyType`类型的密钥与<xref:System.String>可能表示，如下所示：</span><span class="sxs-lookup"><span data-stu-id="6240b-2369">A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:</span></span>  
  
```  
System.Collections.Generic.Dictionary`2[System.String,MyType]  
```  
  
 <span data-ttu-id="6240b-2370">若要指定类型实参列表内的某个程序集限定类型，请将放在括号内的程序集限定类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2370">To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets.</span></span> <span data-ttu-id="6240b-2371">否则，单独的程序集限定名称的逗号解释为限制其他类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2371">Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments.</span></span> <span data-ttu-id="6240b-2372">例如，<xref:System.Collections.Generic.Dictionary%602>的`MyType`fromMyAssembly.dll，与键的类型<xref:System.String>，可能会按如下所示指定：</span><span class="sxs-lookup"><span data-stu-id="6240b-2372">For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` fromMyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:</span></span>  
  
```  
Type.GetType("System.Collections.Generic.Dictionary`2[System.String,[MyType,MyAssembly]]")  
```  
  
> [!NOTE]
>  <span data-ttu-id="6240b-2373">程序集限定的类型可以括在括号中，仅当它出现在类型参数列表。</span><span class="sxs-lookup"><span data-stu-id="6240b-2373">An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list.</span></span> <span data-ttu-id="6240b-2374">在类型参数列表中搜索程序集限定和未限定类型的规则是限定和未限定的非泛型类型的规则相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-2374">The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.</span></span>  
  
 <span data-ttu-id="6240b-2375">可以为 null 的类型是泛型类型的一种特殊情况。</span><span class="sxs-lookup"><span data-stu-id="6240b-2375">Nullable types are a special case of generic types.</span></span> <span data-ttu-id="6240b-2376">例如，一个可以为 null<xref:System.Int32>由字符串"System.Nullable'1[System.Int32]"表示。</span><span class="sxs-lookup"><span data-stu-id="6240b-2376">For example, a nullable <xref:System.Int32> is represented by the string "System.Nullable\`1[System.Int32]".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-2377">在 C#、 c + + 和 Visual Basic 中还可以获取使用类型运算符可以为 null 的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2377">In C#, C++, and Visual Basic you can also get nullable types using type operators.</span></span> <span data-ttu-id="6240b-2378">例如，可以为 null<xref:System.Boolean>返回类型`typeof(Nullable<bool>)`在 C# 中，通过`Nullable<Boolean>::typeid`c + + 和`GetType(Nullable(Of Boolean))`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="6240b-2378">For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="6240b-2379">下表显示了与使用的语法`GetType`为各种类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2379">The following table shows the syntax you use with `GetType` for various types.</span></span>  
  
|<span data-ttu-id="6240b-2380">若要获取</span><span class="sxs-lookup"><span data-stu-id="6240b-2380">To Get</span></span>|<span data-ttu-id="6240b-2381">使用</span><span class="sxs-lookup"><span data-stu-id="6240b-2381">Use</span></span>|  
|------------|---------|  
|<span data-ttu-id="6240b-2382">一个可以为 null <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="6240b-2382">A nullable <xref:System.Int32></span></span>|``Type.GetType("System.Nullable`1[System.Int32]")``|  
|<span data-ttu-id="6240b-2383">指向非托管的指针 `MyType`</span><span class="sxs-lookup"><span data-stu-id="6240b-2383">An unmanaged pointer to `MyType`</span></span>|`Type.GetType("MyType*")`|  
|<span data-ttu-id="6240b-2384">非托管的指针到指向 `MyType`</span><span class="sxs-lookup"><span data-stu-id="6240b-2384">An unmanaged pointer to a pointer to `MyType`</span></span>|`Type.GetType("MyType**")`|  
|<span data-ttu-id="6240b-2385">托管的指针或引用 `MyType`</span><span class="sxs-lookup"><span data-stu-id="6240b-2385">A managed pointer or reference to `MyType`</span></span>|<span data-ttu-id="6240b-2386">`Type.GetType("MyType&")`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2386">`Type.GetType("MyType&")`.</span></span> <span data-ttu-id="6240b-2387">请注意，与指针不同，引用仅限于一个级别。</span><span class="sxs-lookup"><span data-stu-id="6240b-2387">Note that unlike pointers, references are limited to one level.</span></span>|  
|<span data-ttu-id="6240b-2388">父类和嵌套的类</span><span class="sxs-lookup"><span data-stu-id="6240b-2388">A parent class and a nested class</span></span>|`Type.GetType("MyParentClass+MyNestedClass")`|  
|<span data-ttu-id="6240b-2389">一维数组下限为 0</span><span class="sxs-lookup"><span data-stu-id="6240b-2389">A one-dimensional array with a lower bound of 0</span></span>|`Type.GetType("MyType[]")`|  
|<span data-ttu-id="6240b-2390">一维数组下限未知</span><span class="sxs-lookup"><span data-stu-id="6240b-2390">A one-dimensional array with an unknown lower bound</span></span>|`Type.GetType("MyType[*]")`|  
|<span data-ttu-id="6240b-2391">N 维数组</span><span class="sxs-lookup"><span data-stu-id="6240b-2391">An n-dimensional array</span></span>|<span data-ttu-id="6240b-2392">在中总共 n-1 次括号逗号 （，）。</span><span class="sxs-lookup"><span data-stu-id="6240b-2392">A comma (,) inside the brackets a total of n-1 times.</span></span> <span data-ttu-id="6240b-2393">例如，`System.Object[,,]`表示一个三维`Object`数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-2393">For example, `System.Object[,,]` represents a three-dimensional `Object` array.</span></span>|  
|<span data-ttu-id="6240b-2394">数组的一维数组</span><span class="sxs-lookup"><span data-stu-id="6240b-2394">An array of one-dimensional arrays</span></span>|`Type.GetType("MyType[][]")`|  
|<span data-ttu-id="6240b-2395">矩形二维数组具有未知的下限</span><span class="sxs-lookup"><span data-stu-id="6240b-2395">A rectangular two-dimensional array with unknown lower bounds</span></span>|`Type.GetType("MyType[,]")`|  
|<span data-ttu-id="6240b-2396">具有一个类型参数的泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-2396">A generic type with one type argument</span></span>|``Type.GetType("MyGenericType`1[MyType]")``|  
|<span data-ttu-id="6240b-2397">具有两个类型参数的泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-2397">A generic type with two type arguments</span></span>|``Type.GetType("MyGenericType`2[MyType,AnotherType]")``|  
|<span data-ttu-id="6240b-2398">具有两个程序集限定类型参数的泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-2398">A generic type with two assembly-qualified type arguments</span></span>|``Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")``|  
|<span data-ttu-id="6240b-2399">具有程序集限定类型参数的程序集限定的泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-2399">An assembly-qualified generic type with an assembly-qualified type argument</span></span>|<span data-ttu-id="6240b-2400">\`\`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")`</span><span class="sxs-lookup"><span data-stu-id="6240b-2400">\`\`Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")`</span></span>|  
|<span data-ttu-id="6240b-2401">一个其类型参数为具有两个类型参数的泛型类型的泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-2401">A generic type whose type argument is a generic type with two type arguments</span></span>|<span data-ttu-id="6240b-2402">\`\`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")\`</span><span class="sxs-lookup"><span data-stu-id="6240b-2402">\`\`Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")\`</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6240b-2403">下面的示例检索的类型`System.Int32`，并使用该类型对象以显示<xref:System.Type.FullName%2A>属性的`System.Int32`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2403">The following example retrieves the type of `System.Int32` and uses that type object to display the <xref:System.Type.FullName%2A> property of `System.Int32`.</span></span>  
  
 [!code-cpp[Type_GetType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetType/CPP/type_gettype.cpp#1)]
 [!code-csharp[Type_GetType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetType/CS/type_gettype.cs#1)]
 [!code-vb[Type_GetType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetType/VB/type_gettype.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-2404"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2404"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="6240b-2405">调用了类初始值设定项，且该项引发了异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-2405">A class initializer is invoked and throws an exception.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-2406"><paramref name="typeName" /> 表示将指针类型、<see langword="ByRef" /> 类型或 <see cref="T:System.Void" /> 作为其类型参数之一的泛型类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2406"><paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span></span>  
  
<span data-ttu-id="6240b-2407">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2407">-or-</span></span> 
 <span data-ttu-id="6240b-2408"><paramref name="typeName" /> 表示具有错误的类型参数数目的泛型类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2408"><paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span></span>  
  
<span data-ttu-id="6240b-2409">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2409">-or-</span></span> 
 <span data-ttu-id="6240b-2410"><paramref name="typeName" /> 表示泛型类型，并且其类型参数之一不满足相应类型参数的约束。</span><span class="sxs-lookup"><span data-stu-id="6240b-2410"><paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="6240b-2411"><paramref name="typeName" /> 表示 <see cref="T:System.TypedReference" /> 的数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-2411"><paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="6240b-2412">在<see href="https://go.microsoft.com/fwlink/?LinkID=247912">适用于 Windows 应用商店应用的 .NET</see> 或<see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">可移植类库</see>中，改为捕获基类异常 <see cref="T:System.IO.IOException" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2412">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="6240b-2413">找到了程序集或其依赖项之一，但无法加载它们。</span><span class="sxs-lookup"><span data-stu-id="6240b-2413">The assembly or one of its dependencies was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="6240b-2414">程序集或其依赖项之一无效。</span><span class="sxs-lookup"><span data-stu-id="6240b-2414">The assembly or one of its dependencies is not valid.</span></span>  
  
<span data-ttu-id="6240b-2415">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2415">-or-</span></span> 
<span data-ttu-id="6240b-2416">当前加载的是公共语言运行时 2.0 版或更高版本，而程序集使用更高的版本编译。</span><span class="sxs-lookup"><span data-stu-id="6240b-2416">Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</span></span></exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md"><span data-ttu-id="6240b-2417">指定完全限定的类型名称</span><span class="sxs-lookup"><span data-stu-id="6240b-2417">Specifying Fully Qualified Type Names</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetType : string * bool -&gt; Type" Usage="System.Type.GetType (typeName, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="6240b-2418">要获取的类型的程序集限定名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2418">The assembly-qualified name of the type to get.</span></span> <span data-ttu-id="6240b-2419">请参阅 <see cref="P:System.Type.AssemblyQualifiedName" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2419">See <see cref="P:System.Type.AssemblyQualifiedName" />.</span></span> <span data-ttu-id="6240b-2420">如果该类型位于当前正在执行的程序集中或者 Mscorlib.dll 中，则提供由命名空间限定的类型名称就足够了。</span><span class="sxs-lookup"><span data-stu-id="6240b-2420">If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</span></span></param>
        <param name="throwOnError"><span data-ttu-id="6240b-2421">如果为 <see langword="true" />，则在找不到该类型时引发异常；如果为 <see langword="false" />，则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2421"><see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span></span> <span data-ttu-id="6240b-2422">指定 <see langword="false" /> 还会取消某些其他异常条件，但并不取消所有条件。</span><span class="sxs-lookup"><span data-stu-id="6240b-2422">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span></span> <span data-ttu-id="6240b-2423">请参见“异常”部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-2423">See the Exceptions section.</span></span></param>
        <summary><span data-ttu-id="6240b-2424">获取具有指定名称的 <see cref="T:System.Type" />，指定是否执行区分大小写的搜索，以及在找不到类型时是否引发异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-2424">Gets the <see cref="T:System.Type" /> with the specified name, performing a case-sensitive search and specifying whether to throw an exception if the type is not found.</span></span></summary>
        <returns><span data-ttu-id="6240b-2425">具有指定名称的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2425">The type with the specified name.</span></span> <span data-ttu-id="6240b-2426">如果找不到该类型，则 <paramref name="throwOnError" /> 参数指定是返回 <see langword="null" /> 还是引发异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-2426">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span></span> <span data-ttu-id="6240b-2427">在某些情况下，将引发异常，而不考虑 <paramref name="throwOnError" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="6240b-2427">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span></span> <span data-ttu-id="6240b-2428">请参见“异常”部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-2428">See the Exceptions section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-2429">可以使用<xref:System.Type.GetType%2A>方法来获取<xref:System.Type>对象的另一个程序集中的类型，如果你知道它的程序集限定名称可获取从<xref:System.Type.AssemblyQualifiedName>。</span><span class="sxs-lookup"><span data-stu-id="6240b-2429">You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly, if you know its assembly-qualified name which can be obtained from <xref:System.Type.AssemblyQualifiedName>.</span></span> <span data-ttu-id="6240b-2430"><xref:System.Type.GetType%2A> 导致在指定的程序集加载`typeName`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2430"><xref:System.Type.GetType%2A> causes loading of the assembly specified in `typeName`.</span></span> <span data-ttu-id="6240b-2431">您也可以加载使用程序集<xref:System.Reflection.Assembly.Load%2A>方法，并使用<xref:System.Type.GetType%2A>或<xref:System.Reflection.Assembly.GetTypes%2A>的方法<xref:System.Reflection.Assembly>类，以获取<xref:System.Type>对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-2431">You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A> method, and then use the <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetTypes%2A> methods of the <xref:System.Reflection.Assembly> class to get <xref:System.Type> objects.</span></span> <span data-ttu-id="6240b-2432">如果类型是在编译时已知到您的程序的程序集中，则使用更加高效`typeof`在 C# 中，<xref:System.Type.GetType%2A>在 Visual Basic 中，或`typeid`c + + 中。</span><span class="sxs-lookup"><span data-stu-id="6240b-2432">If a type is in an assembly known to your program at compile time, it is more efficient to use `typeof` in C#, <xref:System.Type.GetType%2A> in Visual Basic, or `typeid` in C++.</span></span>  
  
 <span data-ttu-id="6240b-2433">`GetType` 仅适用于从磁盘加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-2433">`GetType` only works on assemblies loaded from disk.</span></span> <span data-ttu-id="6240b-2434">如果您调用`GetType`来查找使用定义动态程序集中定义的类型<xref:System.Reflection.Emit>服务，你可能会收到不一致的行为。</span><span class="sxs-lookup"><span data-stu-id="6240b-2434">If you call `GetType` to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior.</span></span> <span data-ttu-id="6240b-2435">行为取决于动态程序集是持久的也就是说，创建使用`RunAndSave`或`Save`访问模式的<xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType>枚举。</span><span class="sxs-lookup"><span data-stu-id="6240b-2435">The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="6240b-2436">如果动态程序集是持久性的和已写入磁盘之前`GetType`是调用，加载程序在磁盘上找到已保存的程序集，加载该程序集，并且该程序集中检索的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2436">If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly.</span></span> <span data-ttu-id="6240b-2437">如果该程序集未保存到磁盘`GetType`调用时，该方法将返回`null`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2437">If the assembly has not been saved to disk when `GetType` is called, the method returns `null`.</span></span> <span data-ttu-id="6240b-2438">`GetType` 不能理解瞬态动态程序集;因此，调用`GetType`来检索中暂时性的类型的动态程序集返回`null`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2438">`GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.</span></span>  
  
 <span data-ttu-id="6240b-2439">若要使用`GetType`上的动态模块订阅<xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType>事件，并调用`GetType`然后再进行保存。</span><span class="sxs-lookup"><span data-stu-id="6240b-2439">To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> event and call `GetType` before saving.</span></span> <span data-ttu-id="6240b-2440">否则，你会在内存中出现的程序集的两个副本。</span><span class="sxs-lookup"><span data-stu-id="6240b-2440">Otherwise, you will get two copies of the assembly in memory.</span></span>  
  
 <span data-ttu-id="6240b-2441">`throwOnError`参数指定并发生什么类型未找到，也抑制了某些其他异常条件，如异常部分中所述。</span><span class="sxs-lookup"><span data-stu-id="6240b-2441">The `throwOnError` parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section.</span></span> <span data-ttu-id="6240b-2442">而不考虑值引发一些异常`throwOnError`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2442">Some exceptions are thrown regardless of the value of `throwOnError`.</span></span> <span data-ttu-id="6240b-2443">例如，如果找到但不能加载，类型<xref:System.TypeLoadException>引发即使`throwOnError`是`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2443">For example, if the type is found but cannot be loaded, a <xref:System.TypeLoadException> is thrown even if `throwOnError` is `false`.</span></span>  
  
 <span data-ttu-id="6240b-2444">下表显示了返回通过基类的成员`Get`方法反射的类型上时。</span><span class="sxs-lookup"><span data-stu-id="6240b-2444">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6240b-2445">成员类型</span><span class="sxs-lookup"><span data-stu-id="6240b-2445">Member Type</span></span>|<span data-ttu-id="6240b-2446">Static</span><span class="sxs-lookup"><span data-stu-id="6240b-2446">Static</span></span>|<span data-ttu-id="6240b-2447">非静态</span><span class="sxs-lookup"><span data-stu-id="6240b-2447">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6240b-2448">构造函数</span><span class="sxs-lookup"><span data-stu-id="6240b-2448">Constructor</span></span>|<span data-ttu-id="6240b-2449">No</span><span class="sxs-lookup"><span data-stu-id="6240b-2449">No</span></span>|<span data-ttu-id="6240b-2450">No</span><span class="sxs-lookup"><span data-stu-id="6240b-2450">No</span></span>|  
|<span data-ttu-id="6240b-2451">字段</span><span class="sxs-lookup"><span data-stu-id="6240b-2451">Field</span></span>|<span data-ttu-id="6240b-2452">No</span><span class="sxs-lookup"><span data-stu-id="6240b-2452">No</span></span>|<span data-ttu-id="6240b-2453">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-2453">Yes.</span></span> <span data-ttu-id="6240b-2454">字段始终是按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-2454">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-2455">事件</span><span class="sxs-lookup"><span data-stu-id="6240b-2455">Event</span></span>|<span data-ttu-id="6240b-2456">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-2456">Not applicable</span></span>|<span data-ttu-id="6240b-2457">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-2457">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-2458">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-2458">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-2459">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-2459">See note 2 below.</span></span>|  
|<span data-ttu-id="6240b-2460">方法</span><span class="sxs-lookup"><span data-stu-id="6240b-2460">Method</span></span>|<span data-ttu-id="6240b-2461">No</span><span class="sxs-lookup"><span data-stu-id="6240b-2461">No</span></span>|<span data-ttu-id="6240b-2462">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-2462">Yes.</span></span> <span data-ttu-id="6240b-2463">方法 （包括虚拟和非虚拟） 可以隐藏通过名称或按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-2463">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-2464">嵌套的类型</span><span class="sxs-lookup"><span data-stu-id="6240b-2464">Nested Type</span></span>|<span data-ttu-id="6240b-2465">No</span><span class="sxs-lookup"><span data-stu-id="6240b-2465">No</span></span>|<span data-ttu-id="6240b-2466">No</span><span class="sxs-lookup"><span data-stu-id="6240b-2466">No</span></span>|  
|<span data-ttu-id="6240b-2467">Property</span><span class="sxs-lookup"><span data-stu-id="6240b-2467">Property</span></span>|<span data-ttu-id="6240b-2468">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-2468">Not applicable</span></span>|<span data-ttu-id="6240b-2469">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-2469">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-2470">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-2470">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-2471">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-2471">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6240b-2472">按名称和签名隐藏会考虑所有的签名，包括自定义修饰符，部分返回类型、 参数类型、 标记和非托管调用约定。</span><span class="sxs-lookup"><span data-stu-id="6240b-2472">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6240b-2473">这是二进制比较。</span><span class="sxs-lookup"><span data-stu-id="6240b-2473">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6240b-2474">为反射，属性和事件均由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-2474">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-2475">如果具有 get 和 set 访问器的属性中的基类，但派生的类具有一个 get 访问器，派生的类属性隐藏基类属性，并且你将无法再访问基类上的资源库。</span><span class="sxs-lookup"><span data-stu-id="6240b-2475">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6240b-2476">自定义特性不是通用类型系统的一部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-2476">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="6240b-2477">数组或 COM 类型是不执行搜索，除非它们已加载到表中的可用类。</span><span class="sxs-lookup"><span data-stu-id="6240b-2477">Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.</span></span>  
  
 <span data-ttu-id="6240b-2478">`typeName` 可将类型名称由限定其命名空间或程序集限定名，包括程序集名称规范。</span><span class="sxs-lookup"><span data-stu-id="6240b-2478">`typeName` can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification.</span></span> <span data-ttu-id="6240b-2479">请参阅 <xref:System.Type.AssemblyQualifiedName%2A>。</span><span class="sxs-lookup"><span data-stu-id="6240b-2479">See <xref:System.Type.AssemblyQualifiedName%2A>.</span></span>  
  
 <span data-ttu-id="6240b-2480">如果`typeName`包括命名空间而不是程序集名称，此方法搜索仅调用对象的程序集和 Mscorlib.dll，按该顺序。</span><span class="sxs-lookup"><span data-stu-id="6240b-2480">If `typeName` includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order.</span></span> <span data-ttu-id="6240b-2481">如果使用的部分或完整的程序集名称完全限定类型名称，此方法搜索中指定的程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-2481">If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly.</span></span> <span data-ttu-id="6240b-2482">如果该程序集具有强名称，则需要一个完整的程序集名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2482">If the assembly has a strong name, a complete assembly name is required.</span></span>  
  
 <span data-ttu-id="6240b-2483"><xref:System.Type.AssemblyQualifiedName%2A>属性将返回包括嵌套的类型、 程序集名称和泛型参数的完全限定的类型名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2483">The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and generic arguments.</span></span> <span data-ttu-id="6240b-2484">支持公共语言运行时的所有编译器将都发出嵌套类的简单名称和反射构造查询时，根据以下约定的重整的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2484">All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-2485">在.NET Framework 2.0 版中，处理器体系结构添加到程序集标识，并可以指定为程序集名称字符串的一部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-2485">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="6240b-2486">例如，"ProcessorArchitecture = msil"。</span><span class="sxs-lookup"><span data-stu-id="6240b-2486">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="6240b-2487">但是，不包括在返回的字符串<xref:System.Type.AssemblyQualifiedName%2A>属性，出于兼容性原因。</span><span class="sxs-lookup"><span data-stu-id="6240b-2487">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="6240b-2488">此外可以通过创建加载类型<xref:System.Reflection.AssemblyName>对象并将其传递到的相应重载<xref:System.Reflection.Assembly.Load%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-2488">You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="6240b-2489">然后，可以使用<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>方法来加载类型的程序集中。</span><span class="sxs-lookup"><span data-stu-id="6240b-2489">You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method to load types from the assembly.</span></span> <span data-ttu-id="6240b-2490">另请参阅 <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-2490">See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="6240b-2491">分隔符</span><span class="sxs-lookup"><span data-stu-id="6240b-2491">Delimiter</span></span>|<span data-ttu-id="6240b-2492">含义</span><span class="sxs-lookup"><span data-stu-id="6240b-2492">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="6240b-2493">反斜杠 (\\)</span><span class="sxs-lookup"><span data-stu-id="6240b-2493">Backslash (\\)</span></span>|<span data-ttu-id="6240b-2494">转义符。</span><span class="sxs-lookup"><span data-stu-id="6240b-2494">Escape character.</span></span>|  
|<span data-ttu-id="6240b-2495">反撇号 （'） |位于一个或多个数字表示的类型参数，位于末尾的泛型类型的名称数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2495">Backtick (\`)|Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.</span></span>|  
|<span data-ttu-id="6240b-2496">方括号 ([])</span><span class="sxs-lookup"><span data-stu-id="6240b-2496">Brackets ([])</span></span>|<span data-ttu-id="6240b-2497">泛型类型参数列表，用于构造泛型类型; 括起来在类型参数列表中，则将程序集限定的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2497">Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.</span></span>|  
|<span data-ttu-id="6240b-2498">逗号 （，）</span><span class="sxs-lookup"><span data-stu-id="6240b-2498">Comma (,)</span></span>|<span data-ttu-id="6240b-2499">程序集名称前面。</span><span class="sxs-lookup"><span data-stu-id="6240b-2499">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="6240b-2500">句点 （.）</span><span class="sxs-lookup"><span data-stu-id="6240b-2500">Period (.)</span></span>|<span data-ttu-id="6240b-2501">表示命名空间标识符。</span><span class="sxs-lookup"><span data-stu-id="6240b-2501">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="6240b-2502">加号 （+）</span><span class="sxs-lookup"><span data-stu-id="6240b-2502">Plus sign (+)</span></span>|<span data-ttu-id="6240b-2503">位于嵌套的类。</span><span class="sxs-lookup"><span data-stu-id="6240b-2503">Precedes a nested class.</span></span>|  
  
 <span data-ttu-id="6240b-2504">例如，一个类的完全限定的名称可能如下所示：</span><span class="sxs-lookup"><span data-stu-id="6240b-2504">For example, the fully qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="6240b-2505">如果命名空间为 TopNamespace.Sub+Namespace，则必须在字符串前面加一个转义字符加号 （+） (\\) 以防止它被解释为嵌套分隔符。</span><span class="sxs-lookup"><span data-stu-id="6240b-2505">If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="6240b-2506">反射发出此字符串，如下所示：</span><span class="sxs-lookup"><span data-stu-id="6240b-2506">Reflection emits this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="6240b-2507">一个"+ +"变为"\\+\\+"，和一个"\\"变为"\\\\"。</span><span class="sxs-lookup"><span data-stu-id="6240b-2507">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="6240b-2508">可以保持此限定的名，并在以后使用它来加载<xref:System.Type>。</span><span class="sxs-lookup"><span data-stu-id="6240b-2508">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="6240b-2509">若要搜索并加载<xref:System.Type>，使用<xref:System.Type.GetType%2A>使用类型名称只或用程序集限定的类型名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2509">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="6240b-2510"><xref:System.Type.GetType%2A> 使用类型名称只会查找<xref:System.Type>中调用方的程序集，然后在系统程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-2510"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="6240b-2511"><xref:System.Type.GetType%2A> 使用程序集限定的类型名称将寻找<xref:System.Type>在任何程序集中。</span><span class="sxs-lookup"><span data-stu-id="6240b-2511"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="6240b-2512">类型名称可能包含尾随字符表示的类型，如类型是引用类型、 指针类型或数组类型有关的其他信息。</span><span class="sxs-lookup"><span data-stu-id="6240b-2512">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="6240b-2513">若要检索的类型名称而无需这些尾随字符，请使用`t.GetElementType().ToString()`，其中`t`的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2513">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="6240b-2514">空格都是相关程序集名称之外的所有类型的名称组件中。</span><span class="sxs-lookup"><span data-stu-id="6240b-2514">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="6240b-2515">在程序集名称，分隔符前的空格相关，但是、 分隔符之后的空格将被忽略。</span><span class="sxs-lookup"><span data-stu-id="6240b-2515">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="6240b-2516">泛型类型的名称结尾反引号 (\`) 跟数字表示的泛型类型参数的数目。</span><span class="sxs-lookup"><span data-stu-id="6240b-2516">The name of a generic type ends with a backtick (\`) followed by digits representing the number of generic type arguments.</span></span> <span data-ttu-id="6240b-2517">此名称重整的目的是允许编译器来支持在同一作用域中发生的泛型类型具有相同名称但具有不同数量的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2517">The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope.</span></span> <span data-ttu-id="6240b-2518">例如，反射返回重整的名称`Tuple`1` and `元组`2`从泛型方法`Tuple(Of T)`并`Tuple(Of T0, T1)`在 Visual Basic 中，或`Tuple<T>`和元组`\<T0, T1>`Visual C# 中。</span><span class="sxs-lookup"><span data-stu-id="6240b-2518">For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`\<T0, T1>` in Visual C#.</span></span>  
  
 <span data-ttu-id="6240b-2519">对于泛型类型，类型实参列表括在方括号内，并由逗号分隔的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2519">For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas.</span></span> <span data-ttu-id="6240b-2520">例如，泛型<xref:System.Collections.Generic.Dictionary%602>具有两个类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2520">For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters.</span></span> <span data-ttu-id="6240b-2521">一个<xref:System.Collections.Generic.Dictionary%602>的`MyType`类型的密钥与<xref:System.String>可能表示，如下所示：</span><span class="sxs-lookup"><span data-stu-id="6240b-2521">A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:</span></span>  
  
```  
System.Collections.Generic.Dictionary`2[System.String,MyType]  
```  
  
 <span data-ttu-id="6240b-2522">若要指定类型实参列表内的某个程序集限定类型，请将放在括号内的程序集限定类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2522">To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets.</span></span> <span data-ttu-id="6240b-2523">否则，单独的程序集限定名称的逗号解释为限制其他类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2523">Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments.</span></span> <span data-ttu-id="6240b-2524">例如，<xref:System.Collections.Generic.Dictionary%602>的`MyType`MyAssembly.dll，与键的类型从<xref:System.String>，可能会按如下所示指定：</span><span class="sxs-lookup"><span data-stu-id="6240b-2524">For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` from MyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:</span></span>  
  
```  
Type.GetType("System.Collections.Generic.Dictionary`2[System.String,[MyType,MyAssembly]]")  
```  
  
> [!NOTE]
>  <span data-ttu-id="6240b-2525">程序集限定的类型可以括在括号中，仅当它出现在类型参数列表。</span><span class="sxs-lookup"><span data-stu-id="6240b-2525">An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list.</span></span> <span data-ttu-id="6240b-2526">在类型参数列表中搜索程序集限定和未限定类型的规则是限定和未限定的非泛型类型的规则相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-2526">The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.</span></span>  
  
 <span data-ttu-id="6240b-2527">可以为 null 的类型是泛型类型的一种特殊情况。</span><span class="sxs-lookup"><span data-stu-id="6240b-2527">Nullable types are a special case of generic types.</span></span> <span data-ttu-id="6240b-2528">例如，一个可以为 null<xref:System.Int32>由字符串"System.Nullable'1[System.Int32]"表示。</span><span class="sxs-lookup"><span data-stu-id="6240b-2528">For example, a nullable <xref:System.Int32> is represented by the string "System.Nullable\`1[System.Int32]".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-2529">在 C#、 c + + 和 Visual Basic 中还可以获取使用类型运算符可以为 null 的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2529">In C#, C++, and Visual Basic you can also get nullable types using type operators.</span></span> <span data-ttu-id="6240b-2530">例如，可以为 null<xref:System.Boolean>返回类型`typeof(Nullable<bool>)`在 C# 中，通过`Nullable<Boolean>::typeid`c + + 和`GetType(Nullable(Of Boolean))`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="6240b-2530">For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="6240b-2531">下表显示了与使用的语法`GetType`为各种类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2531">The following table shows the syntax you use with `GetType` for various types.</span></span>  
  
|<span data-ttu-id="6240b-2532">若要获取</span><span class="sxs-lookup"><span data-stu-id="6240b-2532">To Get</span></span>|<span data-ttu-id="6240b-2533">使用</span><span class="sxs-lookup"><span data-stu-id="6240b-2533">Use</span></span>|  
|------------|---------|  
|<span data-ttu-id="6240b-2534">一个可以为 null <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="6240b-2534">A nullable <xref:System.Int32></span></span>|``Type.GetType("System.Nullable`1[System.Int32]")``|  
|<span data-ttu-id="6240b-2535">指向非托管的指针 `MyType`</span><span class="sxs-lookup"><span data-stu-id="6240b-2535">An unmanaged pointer to `MyType`</span></span>|`Type.GetType("MyType*")`|  
|<span data-ttu-id="6240b-2536">非托管的指针到指向 `MyType`</span><span class="sxs-lookup"><span data-stu-id="6240b-2536">An unmanaged pointer to a pointer to `MyType`</span></span>|`Type.GetType("MyType**")`|  
|<span data-ttu-id="6240b-2537">托管的指针或引用 `MyType`</span><span class="sxs-lookup"><span data-stu-id="6240b-2537">A managed pointer or reference to `MyType`</span></span>|<span data-ttu-id="6240b-2538">`Type.GetType("MyType&")`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2538">`Type.GetType("MyType&")`.</span></span> <span data-ttu-id="6240b-2539">请注意，与指针不同，引用仅限于一个级别。</span><span class="sxs-lookup"><span data-stu-id="6240b-2539">Note that unlike pointers, references are limited to one level.</span></span>|  
|<span data-ttu-id="6240b-2540">父类和嵌套的类</span><span class="sxs-lookup"><span data-stu-id="6240b-2540">A parent class and a nested class</span></span>|`Type.GetType("MyParentClass+MyNestedClass")`|  
|<span data-ttu-id="6240b-2541">一维数组下限为 0</span><span class="sxs-lookup"><span data-stu-id="6240b-2541">A one-dimensional array with a lower bound of 0</span></span>|`Type.GetType("MyArray[]")`|  
|<span data-ttu-id="6240b-2542">一维数组下限未知</span><span class="sxs-lookup"><span data-stu-id="6240b-2542">A one-dimensional array with an unknown lower bound</span></span>|`Type.GetType("MyArray[*]")`|  
|<span data-ttu-id="6240b-2543">N 维数组</span><span class="sxs-lookup"><span data-stu-id="6240b-2543">An n-dimensional array</span></span>|<span data-ttu-id="6240b-2544">在中总共 n-1 次括号逗号 （，）。</span><span class="sxs-lookup"><span data-stu-id="6240b-2544">A comma (,) inside the brackets a total of n-1 times.</span></span> <span data-ttu-id="6240b-2545">例如，`System.Object[,,]`表示一个三维`Object`数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-2545">For example, `System.Object[,,]` represents a three-dimensional `Object` array.</span></span>|  
|<span data-ttu-id="6240b-2546">二维数组的数组</span><span class="sxs-lookup"><span data-stu-id="6240b-2546">A two-dimensional array's array</span></span>|`Type.GetType("MyArray[][]")`|  
|<span data-ttu-id="6240b-2547">矩形二维数组具有未知的下限</span><span class="sxs-lookup"><span data-stu-id="6240b-2547">A rectangular two-dimensional array with unknown lower bounds</span></span>|`Type.GetType("MyArray[,]")`|  
|<span data-ttu-id="6240b-2548">具有一个类型参数的泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-2548">A generic type with one type argument</span></span>|``Type.GetType("MyGenericType`1[MyType]")``|  
|<span data-ttu-id="6240b-2549">具有两个类型参数的泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-2549">A generic type with two type arguments</span></span>|``Type.GetType("MyGenericType`2[MyType,AnotherType]")``|  
|<span data-ttu-id="6240b-2550">具有两个程序集限定类型参数的泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-2550">A generic type with two assembly-qualified type arguments</span></span>|``Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")``|  
|<span data-ttu-id="6240b-2551">具有程序集限定类型参数的程序集限定的泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-2551">An assembly-qualified generic type with an assembly-qualified type argument</span></span>|``Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")``|  
|<span data-ttu-id="6240b-2552">一个其类型参数为具有两个类型参数的泛型类型的泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-2552">A generic type whose type argument is a generic type with two type arguments</span></span>|``Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")``|  
  
   
  
## Examples  
 <span data-ttu-id="6240b-2553">下面的示例检索的类型`System.Int32`，并使用该类型对象以显示<xref:System.Type.FullName%2A>属性的`System.Int32`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2553">The following example retrieves the type of `System.Int32` and uses that type object to display the <xref:System.Type.FullName%2A> property of `System.Int32`.</span></span> <span data-ttu-id="6240b-2554">如果不存在的程序集引用类型对象，此示例将引发异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-2554">If a type object refers to an assembly that does not exist, this example throws an exception.</span></span>  
  
 [!code-cpp[Type_GetType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetType/CPP/type_gettype.cpp#1)]
 [!code-csharp[Type_GetType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetType/CS/type_gettype.cs#1)]
 [!code-vb[Type_GetType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetType/VB/type_gettype.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-2555"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2555"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="6240b-2556">调用了类初始值设定项，且该项引发了异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-2556">A class initializer is invoked and throws an exception.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="6240b-2557"><paramref name="throwOnError" /> 是 <see langword="true" />，且找不到该类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2557"><paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span></span>  
  
<span data-ttu-id="6240b-2558">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2558">-or-</span></span> 
 <span data-ttu-id="6240b-2559"><paramref name="throwOnError" /> 的值为 <see langword="true" />，且 <paramref name="typeName" /> 包含无效字符，例如嵌入的制表符。</span><span class="sxs-lookup"><span data-stu-id="6240b-2559"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span></span> 
<span data-ttu-id="6240b-2560">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2560">-or-</span></span> 
 <span data-ttu-id="6240b-2561"><paramref name="throwOnError" /> 的值为 <see langword="true" />，且 <paramref name="typeName" /> 为空字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-2561"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span></span>  
  
<span data-ttu-id="6240b-2562">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2562">-or-</span></span> 
 <span data-ttu-id="6240b-2563"><paramref name="throwOnError" /> 的值为 <see langword="true" />，且 <paramref name="typeName" /> 表示大小无效的数组类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2563"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span></span>  
  
<span data-ttu-id="6240b-2564">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2564">-or-</span></span> 
 <span data-ttu-id="6240b-2565"><paramref name="typeName" /> 表示 <see cref="T:System.TypedReference" /> 的数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-2565"><paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-2566"><paramref name="throwOnError" /> 是 <see langword="true" />，且 <paramref name="typeName" /> 包含无效的语法。</span><span class="sxs-lookup"><span data-stu-id="6240b-2566"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax.</span></span> <span data-ttu-id="6240b-2567">例如："MyType[,\*,]"。</span><span class="sxs-lookup"><span data-stu-id="6240b-2567">For example, "MyType[,\*,]".</span></span>  
  
<span data-ttu-id="6240b-2568">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2568">-or-</span></span> 
 <span data-ttu-id="6240b-2569"><paramref name="typeName" /> 表示将指针类型、<see langword="ByRef" /> 类型或 <see cref="T:System.Void" /> 作为其类型参数之一的泛型类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2569"><paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span></span>  
  
<span data-ttu-id="6240b-2570">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2570">-or-</span></span> 
 <span data-ttu-id="6240b-2571"><paramref name="typeName" /> 表示具有错误的类型参数数目的泛型类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2571"><paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span></span>  
  
<span data-ttu-id="6240b-2572">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2572">-or-</span></span> 
 <span data-ttu-id="6240b-2573"><paramref name="typeName" /> 表示泛型类型，并且其类型参数之一不满足相应类型参数的约束。</span><span class="sxs-lookup"><span data-stu-id="6240b-2573"><paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="6240b-2574"><paramref name="throwOnError" /> 的值为 <see langword="true" />，且未找到程序集或程序集的某个依赖项。</span><span class="sxs-lookup"><span data-stu-id="6240b-2574"><paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><block subset="none" type="note">
            <para>  
 <span data-ttu-id="6240b-2575">在<see href="https://go.microsoft.com/fwlink/?LinkID=247912">适用于 Windows 应用商店应用的 .NET</see> 或<see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">可移植类库</see>中，改为捕获基类异常 <see cref="T:System.IO.IOException" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2575">In the <see href="https://go.microsoft.com/fwlink/?LinkID=247912">.NET for Windows Store apps</see> or the <see href="https://docs.microsoft.com/dotnet/standard/cross-platform/cross-platform-development-with-the-portable-class-library">Portable Class Library</see>, catch the base class exception, <see cref="T:System.IO.IOException" />, instead.</span></span>  
  
</para>
          </block>  
  
 <span data-ttu-id="6240b-2576">找到了程序集或其依赖项之一，但无法加载它们。</span><span class="sxs-lookup"><span data-stu-id="6240b-2576">The assembly or one of its dependencies was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="6240b-2577">程序集或其依赖项之一无效。</span><span class="sxs-lookup"><span data-stu-id="6240b-2577">The assembly or one of its dependencies is not valid.</span></span>  
  
<span data-ttu-id="6240b-2578">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2578">-or-</span></span> 
<span data-ttu-id="6240b-2579">当前加载的是公共语言运行时 2.0 版或更高版本，而程序集使用更高的版本编译。</span><span class="sxs-lookup"><span data-stu-id="6240b-2579">Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</span></span></exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md"><span data-ttu-id="6240b-2580">指定完全限定的类型名称</span><span class="sxs-lookup"><span data-stu-id="6240b-2580">Specifying Fully Qualified Type Names</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, bool throwOnError, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, throwOnError As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member GetType : string * bool * bool -&gt; Type" Usage="System.Type.GetType (typeName, throwOnError, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="6240b-2581">要获取的类型的程序集限定名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2581">The assembly-qualified name of the type to get.</span></span> <span data-ttu-id="6240b-2582">请参阅 <see cref="P:System.Type.AssemblyQualifiedName" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2582">See <see cref="P:System.Type.AssemblyQualifiedName" />.</span></span> <span data-ttu-id="6240b-2583">如果该类型位于当前正在执行的程序集中或者 Mscorlib.dll 中，则提供由命名空间限定的类型名称就足够了。</span><span class="sxs-lookup"><span data-stu-id="6240b-2583">If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</span></span></param>
        <param name="throwOnError"><span data-ttu-id="6240b-2584">如果为 <see langword="true" />，则在找不到该类型时引发异常；如果为 <see langword="false" />，则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2584"><see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span></span> <span data-ttu-id="6240b-2585">指定 <see langword="false" /> 还会取消某些其他异常条件，但并不取消所有条件。</span><span class="sxs-lookup"><span data-stu-id="6240b-2585">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span></span> <span data-ttu-id="6240b-2586">请参见“异常”部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-2586">See the Exceptions section.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="6240b-2587">对 <see langword="true" /> 执行的搜索不区分大小写，则为 <paramref name="typeName" />；对 <see langword="false" /> 执行的搜索区分大小写，则为 <paramref name="typeName" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2587"><see langword="true" /> to perform a case-insensitive search for <paramref name="typeName" />, <see langword="false" /> to perform a case-sensitive search for <paramref name="typeName" />.</span></span></param>
        <summary><span data-ttu-id="6240b-2588">获取具有指定名称的 <see cref="T:System.Type" />，指定是否执行区分大小写的搜索，以及在找不到类型时是否引发异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-2588">Gets the <see cref="T:System.Type" /> with the specified name, specifying whether to throw an exception if the type is not found and whether to perform a case-sensitive search.</span></span></summary>
        <returns><span data-ttu-id="6240b-2589">具有指定名称的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2589">The type with the specified name.</span></span> <span data-ttu-id="6240b-2590">如果找不到该类型，则 <paramref name="throwOnError" /> 参数指定是返回 <see langword="null" /> 还是引发异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-2590">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span></span> <span data-ttu-id="6240b-2591">在某些情况下，将引发异常，而不考虑 <paramref name="throwOnError" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="6240b-2591">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span></span> <span data-ttu-id="6240b-2592">请参见“异常”部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-2592">See the Exceptions section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-2593">可以使用<xref:System.Type.GetType%2A>方法来获取<xref:System.Type>对象的另一个程序集中的类型，如果你知道它的程序集限定名称可获取从<xref:System.Type.AssemblyQualifiedName>。</span><span class="sxs-lookup"><span data-stu-id="6240b-2593">You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly, if you know its assembly-qualified name which can be obtained from <xref:System.Type.AssemblyQualifiedName>.</span></span> <span data-ttu-id="6240b-2594"><xref:System.Type.GetType%2A> 导致在指定的程序集加载`typeName`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2594"><xref:System.Type.GetType%2A> causes loading of the assembly specified in `typeName`.</span></span> <span data-ttu-id="6240b-2595">您也可以加载使用程序集<xref:System.Reflection.Assembly.Load%2A>方法，并使用<xref:System.Type.GetType%2A>或<xref:System.Reflection.Assembly.GetTypes%2A>的方法<xref:System.Reflection.Assembly>类，以获取<xref:System.Type>对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-2595">You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A> method, and then use the <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetTypes%2A> methods of the <xref:System.Reflection.Assembly> class to get <xref:System.Type> objects.</span></span> <span data-ttu-id="6240b-2596">如果类型是在编译时已知到您的程序的程序集中，则使用更加高效`typeof`在 C# 中，<xref:System.Type.GetType%2A>在 Visual Basic 中，或`typeid`c + + 中。</span><span class="sxs-lookup"><span data-stu-id="6240b-2596">If a type is in an assembly known to your program at compile time, it is more efficient to use `typeof` in C#, <xref:System.Type.GetType%2A> in Visual Basic, or `typeid` in C++.</span></span>  
  
 <span data-ttu-id="6240b-2597">`GetType` 仅适用于从磁盘加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-2597">`GetType` only works on assemblies loaded from disk.</span></span> <span data-ttu-id="6240b-2598">如果您调用`GetType`来查找使用定义动态程序集中定义的类型<xref:System.Reflection.Emit>服务，你可能会收到不一致的行为。</span><span class="sxs-lookup"><span data-stu-id="6240b-2598">If you call `GetType` to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior.</span></span> <span data-ttu-id="6240b-2599">行为取决于动态程序集是持久的也就是说，创建使用`RunAndSave`或`Save`访问模式的<xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType>枚举。</span><span class="sxs-lookup"><span data-stu-id="6240b-2599">The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=nameWithType> enumeration.</span></span> <span data-ttu-id="6240b-2600">如果动态程序集是持久性的和已写入磁盘之前`GetType`是调用，加载程序在磁盘上找到已保存的程序集，加载该程序集，并且该程序集中检索的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2600">If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly.</span></span> <span data-ttu-id="6240b-2601">如果该程序集未保存到磁盘`GetType`调用时，该方法将返回`null`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2601">If the assembly has not been saved to disk when `GetType` is called, the method returns `null`.</span></span> <span data-ttu-id="6240b-2602">`GetType` 不能理解瞬态动态程序集;因此，调用`GetType`来检索中暂时性的类型的动态程序集返回`null`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2602">`GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.</span></span>  
  
 <span data-ttu-id="6240b-2603">若要使用`GetType`上的动态模块订阅<xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType>事件，并调用`GetType`然后再进行保存。</span><span class="sxs-lookup"><span data-stu-id="6240b-2603">To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=nameWithType> event and call `GetType` before saving.</span></span> <span data-ttu-id="6240b-2604">否则，你会在内存中出现的程序集的两个副本。</span><span class="sxs-lookup"><span data-stu-id="6240b-2604">Otherwise, you will get two copies of the assembly in memory.</span></span>  
  
 <span data-ttu-id="6240b-2605">`throwOnError`参数指定并发生什么类型未找到，也抑制了某些其他异常条件，如异常部分中所述。</span><span class="sxs-lookup"><span data-stu-id="6240b-2605">The `throwOnError` parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section.</span></span> <span data-ttu-id="6240b-2606">而不考虑值引发一些异常`throwOnError`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2606">Some exceptions are thrown regardless of the value of `throwOnError`.</span></span> <span data-ttu-id="6240b-2607">例如，如果找到但不能加载，类型<xref:System.TypeLoadException>引发即使`throwOnError`是`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2607">For example, if the type is found but cannot be loaded, a <xref:System.TypeLoadException> is thrown even if `throwOnError` is `false`.</span></span>  
  
 <span data-ttu-id="6240b-2608">下表显示了返回通过基类的成员`Get`方法反射的类型上时。</span><span class="sxs-lookup"><span data-stu-id="6240b-2608">The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.</span></span>  
  
|<span data-ttu-id="6240b-2609">成员类型</span><span class="sxs-lookup"><span data-stu-id="6240b-2609">Member Type</span></span>|<span data-ttu-id="6240b-2610">Static</span><span class="sxs-lookup"><span data-stu-id="6240b-2610">Static</span></span>|<span data-ttu-id="6240b-2611">非静态</span><span class="sxs-lookup"><span data-stu-id="6240b-2611">Non-Static</span></span>|  
|-----------------|------------|-----------------|  
|<span data-ttu-id="6240b-2612">构造函数</span><span class="sxs-lookup"><span data-stu-id="6240b-2612">Constructor</span></span>|<span data-ttu-id="6240b-2613">No</span><span class="sxs-lookup"><span data-stu-id="6240b-2613">No</span></span>|<span data-ttu-id="6240b-2614">No</span><span class="sxs-lookup"><span data-stu-id="6240b-2614">No</span></span>|  
|<span data-ttu-id="6240b-2615">字段</span><span class="sxs-lookup"><span data-stu-id="6240b-2615">Field</span></span>|<span data-ttu-id="6240b-2616">No</span><span class="sxs-lookup"><span data-stu-id="6240b-2616">No</span></span>|<span data-ttu-id="6240b-2617">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-2617">Yes.</span></span> <span data-ttu-id="6240b-2618">字段始终是按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-2618">A field is always hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-2619">事件</span><span class="sxs-lookup"><span data-stu-id="6240b-2619">Event</span></span>|<span data-ttu-id="6240b-2620">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-2620">Not applicable</span></span>|<span data-ttu-id="6240b-2621">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-2621">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-2622">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-2622">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-2623">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-2623">See note 2 below.</span></span>|  
|<span data-ttu-id="6240b-2624">方法</span><span class="sxs-lookup"><span data-stu-id="6240b-2624">Method</span></span>|<span data-ttu-id="6240b-2625">No</span><span class="sxs-lookup"><span data-stu-id="6240b-2625">No</span></span>|<span data-ttu-id="6240b-2626">可以。</span><span class="sxs-lookup"><span data-stu-id="6240b-2626">Yes.</span></span> <span data-ttu-id="6240b-2627">方法 （包括虚拟和非虚拟） 可以隐藏通过名称或按名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-2627">A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.</span></span>|  
|<span data-ttu-id="6240b-2628">嵌套的类型</span><span class="sxs-lookup"><span data-stu-id="6240b-2628">Nested Type</span></span>|<span data-ttu-id="6240b-2629">No</span><span class="sxs-lookup"><span data-stu-id="6240b-2629">No</span></span>|<span data-ttu-id="6240b-2630">No</span><span class="sxs-lookup"><span data-stu-id="6240b-2630">No</span></span>|  
|<span data-ttu-id="6240b-2631">Property</span><span class="sxs-lookup"><span data-stu-id="6240b-2631">Property</span></span>|<span data-ttu-id="6240b-2632">不适用</span><span class="sxs-lookup"><span data-stu-id="6240b-2632">Not applicable</span></span>|<span data-ttu-id="6240b-2633">通用类型系统规则是继承是实现的属性的方法相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-2633">The common type system rule is that the inheritance is the same as that of the methods that implement the property.</span></span> <span data-ttu-id="6240b-2634">反射将属性视为由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-2634">Reflection treats properties as hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-2635">请参阅备注 2 下面。</span><span class="sxs-lookup"><span data-stu-id="6240b-2635">See note 2 below.</span></span>|  
  
1.  <span data-ttu-id="6240b-2636">按名称和签名隐藏会考虑所有的签名，包括自定义修饰符，部分返回类型、 参数类型、 标记和非托管调用约定。</span><span class="sxs-lookup"><span data-stu-id="6240b-2636">Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions.</span></span> <span data-ttu-id="6240b-2637">这是二进制比较。</span><span class="sxs-lookup"><span data-stu-id="6240b-2637">This is a binary comparison.</span></span>  
  
2.  <span data-ttu-id="6240b-2638">为反射，属性和事件均由名称和签名隐藏。</span><span class="sxs-lookup"><span data-stu-id="6240b-2638">For reflection, properties and events are hide-by-name-and-signature.</span></span> <span data-ttu-id="6240b-2639">如果具有 get 和 set 访问器的属性中的基类，但派生的类具有一个 get 访问器，派生的类属性隐藏基类属性，并且你将无法再访问基类上的资源库。</span><span class="sxs-lookup"><span data-stu-id="6240b-2639">If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.</span></span>  
  
3.  <span data-ttu-id="6240b-2640">自定义特性不是通用类型系统的一部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-2640">Custom attributes are not part of the common type system.</span></span>  
  
 <span data-ttu-id="6240b-2641">数组或 COM 类型是不执行搜索，除非它们已加载到表中的可用类。</span><span class="sxs-lookup"><span data-stu-id="6240b-2641">Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.</span></span>  
  
 <span data-ttu-id="6240b-2642">`typeName` 可将类型名称由限定其命名空间或程序集限定名，包括程序集名称规范。</span><span class="sxs-lookup"><span data-stu-id="6240b-2642">`typeName` can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification.</span></span> <span data-ttu-id="6240b-2643">请参阅 <xref:System.Type.AssemblyQualifiedName%2A>。</span><span class="sxs-lookup"><span data-stu-id="6240b-2643">See <xref:System.Type.AssemblyQualifiedName%2A>.</span></span>  
  
 <span data-ttu-id="6240b-2644">如果`typeName`包括命名空间而不是程序集名称，此方法搜索仅调用对象的程序集和 Mscorlib.dll，按该顺序。</span><span class="sxs-lookup"><span data-stu-id="6240b-2644">If `typeName` includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order.</span></span> <span data-ttu-id="6240b-2645">如果使用的部分或完整的程序集名称完全限定类型名称，此方法搜索中指定的程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-2645">If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly.</span></span> <span data-ttu-id="6240b-2646">如果该程序集具有强名称，则需要一个完整的程序集名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2646">If the assembly has a strong name, a complete assembly name is required.</span></span>  
  
 <span data-ttu-id="6240b-2647"><xref:System.Type.AssemblyQualifiedName%2A>属性将返回包括嵌套的类型、 程序集名称和类型参数的完全限定的类型名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2647">The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and type arguments.</span></span> <span data-ttu-id="6240b-2648">支持公共语言运行时的所有编译器将都发出嵌套类的简单名称和反射构造查询时，根据以下约定的重整的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2648">All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-2649">在.NET Framework 2.0 版中，处理器体系结构添加到程序集标识，并可以指定为程序集名称字符串的一部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-2649">In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.</span></span> <span data-ttu-id="6240b-2650">例如，"ProcessorArchitecture = msil"。</span><span class="sxs-lookup"><span data-stu-id="6240b-2650">For example, "ProcessorArchitecture=msil".</span></span> <span data-ttu-id="6240b-2651">但是，不包括在返回的字符串<xref:System.Type.AssemblyQualifiedName%2A>属性，出于兼容性原因。</span><span class="sxs-lookup"><span data-stu-id="6240b-2651">However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons.</span></span> <span data-ttu-id="6240b-2652">此外可以通过创建加载类型<xref:System.Reflection.AssemblyName>对象并将其传递到的相应重载<xref:System.Reflection.Assembly.Load%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-2652">You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method.</span></span> <span data-ttu-id="6240b-2653">然后，可以使用<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>方法来加载类型的程序集中。</span><span class="sxs-lookup"><span data-stu-id="6240b-2653">You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method to load types from the assembly.</span></span> <span data-ttu-id="6240b-2654">另请参阅 <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-2654">See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="6240b-2655">分隔符</span><span class="sxs-lookup"><span data-stu-id="6240b-2655">Delimiter</span></span>|<span data-ttu-id="6240b-2656">含义</span><span class="sxs-lookup"><span data-stu-id="6240b-2656">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="6240b-2657">反斜杠 (\\)</span><span class="sxs-lookup"><span data-stu-id="6240b-2657">Backslash (\\)</span></span>|<span data-ttu-id="6240b-2658">转义符。</span><span class="sxs-lookup"><span data-stu-id="6240b-2658">Escape character.</span></span>|  
|<span data-ttu-id="6240b-2659">反撇号 （'） |位于一个或多个数字表示的类型参数，位于末尾的泛型类型的名称数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2659">Backtick (\`)|Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.</span></span>|  
|<span data-ttu-id="6240b-2660">方括号 ([])</span><span class="sxs-lookup"><span data-stu-id="6240b-2660">Brackets ([])</span></span>|<span data-ttu-id="6240b-2661">泛型类型参数列表，用于构造泛型类型; 括起来在类型参数列表中，则将程序集限定的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2661">Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.</span></span>|  
|<span data-ttu-id="6240b-2662">逗号 （，）</span><span class="sxs-lookup"><span data-stu-id="6240b-2662">Comma (,)</span></span>|<span data-ttu-id="6240b-2663">程序集名称前面。</span><span class="sxs-lookup"><span data-stu-id="6240b-2663">Precedes the Assembly name.</span></span>|  
|<span data-ttu-id="6240b-2664">句点 （.）</span><span class="sxs-lookup"><span data-stu-id="6240b-2664">Period (.)</span></span>|<span data-ttu-id="6240b-2665">表示命名空间标识符。</span><span class="sxs-lookup"><span data-stu-id="6240b-2665">Denotes namespace identifiers.</span></span>|  
|<span data-ttu-id="6240b-2666">加号 （+）</span><span class="sxs-lookup"><span data-stu-id="6240b-2666">Plus sign (+)</span></span>|<span data-ttu-id="6240b-2667">位于嵌套的类。</span><span class="sxs-lookup"><span data-stu-id="6240b-2667">Precedes a nested class.</span></span>|  
  
 <span data-ttu-id="6240b-2668">例如，一个类的完全限定的名称可能如下所示：</span><span class="sxs-lookup"><span data-stu-id="6240b-2668">For example, the fully qualified name for a class might look like this:</span></span>  
  
```  
TopNamespace.SubNameSpace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="6240b-2669">如果命名空间为 TopNamespace.Sub+Namespace，则必须在字符串前面加一个转义字符加号 （+） (\\) 以防止它被解释为嵌套分隔符。</span><span class="sxs-lookup"><span data-stu-id="6240b-2669">If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\) to prevent it from being interpreted as a nesting separator.</span></span> <span data-ttu-id="6240b-2670">反射发出此字符串，如下所示：</span><span class="sxs-lookup"><span data-stu-id="6240b-2670">Reflection emits this string as follows:</span></span>  
  
```  
TopNamespace.Sub\+Namespace.ContainingClass+NestedClass,MyAssembly  
```  
  
 <span data-ttu-id="6240b-2671">一个"+ +"变为"\\+\\+"，和一个"\\"变为"\\\\"。</span><span class="sxs-lookup"><span data-stu-id="6240b-2671">A "++" becomes "\\+\\+", and a "\\" becomes "\\\\".</span></span>  
  
 <span data-ttu-id="6240b-2672">可以保持此限定的名，并在以后使用它来加载<xref:System.Type>。</span><span class="sxs-lookup"><span data-stu-id="6240b-2672">This qualified name can be persisted and later used to load the <xref:System.Type>.</span></span> <span data-ttu-id="6240b-2673">若要搜索并加载<xref:System.Type>，使用<xref:System.Type.GetType%2A>使用类型名称只或用程序集限定的类型名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2673">To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name.</span></span> <span data-ttu-id="6240b-2674"><xref:System.Type.GetType%2A> 使用类型名称只会查找<xref:System.Type>中调用方的程序集，然后在系统程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-2674"><xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly.</span></span> <span data-ttu-id="6240b-2675"><xref:System.Type.GetType%2A> 使用程序集限定的类型名称将寻找<xref:System.Type>在任何程序集中。</span><span class="sxs-lookup"><span data-stu-id="6240b-2675"><xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.</span></span>  
  
 <span data-ttu-id="6240b-2676">类型名称可能包含尾随字符表示的类型，如类型是引用类型、 指针类型或数组类型有关的其他信息。</span><span class="sxs-lookup"><span data-stu-id="6240b-2676">Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type.</span></span> <span data-ttu-id="6240b-2677">若要检索的类型名称而无需这些尾随字符，请使用`t.GetElementType().ToString()`，其中`t`的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2677">To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.</span></span>  
  
 <span data-ttu-id="6240b-2678">空格都是相关程序集名称之外的所有类型的名称组件中。</span><span class="sxs-lookup"><span data-stu-id="6240b-2678">Spaces are relevant in all type name components except the assembly name.</span></span> <span data-ttu-id="6240b-2679">在程序集名称，分隔符前的空格相关，但是、 分隔符之后的空格将被忽略。</span><span class="sxs-lookup"><span data-stu-id="6240b-2679">In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</span></span>  
  
 <span data-ttu-id="6240b-2680">泛型类型的名称结尾反引号 (\`) 跟数字表示的泛型类型参数的数目。</span><span class="sxs-lookup"><span data-stu-id="6240b-2680">The name of a generic type ends with a backtick (\`) followed by digits representing the number of generic type arguments.</span></span> <span data-ttu-id="6240b-2681">此名称重整的目的是允许编译器来支持在同一作用域中发生的泛型类型具有相同名称但具有不同数量的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2681">The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope.</span></span> <span data-ttu-id="6240b-2682">例如，反射返回重整的名称`Tuple`1` and `元组`2`从泛型方法`Tuple(Of T)`并`Tuple(Of T0, T1)`在 Visual Basic 中，或`Tuple<T>`和元组`\<T0, T1>`Visual C# 中。</span><span class="sxs-lookup"><span data-stu-id="6240b-2682">For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`\<T0, T1>` in Visual C#.</span></span>  
  
 <span data-ttu-id="6240b-2683">对于泛型类型，类型实参列表括在方括号内，并由逗号分隔的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2683">For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas.</span></span> <span data-ttu-id="6240b-2684">例如，泛型<xref:System.Collections.Generic.Dictionary%602>具有两个类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2684">For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters.</span></span> <span data-ttu-id="6240b-2685">一个<xref:System.Collections.Generic.Dictionary%602>的`MyType`类型的密钥与<xref:System.String>可能表示，如下所示：</span><span class="sxs-lookup"><span data-stu-id="6240b-2685">A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:</span></span>  
  
```  
System.Collections.Generic.Dictionary`2[System.String,MyType]  
```  
  
 <span data-ttu-id="6240b-2686">若要指定类型实参列表内的某个程序集限定类型，请将放在括号内的程序集限定类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2686">To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets.</span></span> <span data-ttu-id="6240b-2687">否则，单独的程序集限定名称的逗号解释为限制其他类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2687">Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments.</span></span> <span data-ttu-id="6240b-2688">例如，<xref:System.Collections.Generic.Dictionary%602>的`MyType`MyAssembly.dll，与键的类型从<xref:System.String>，可能会按如下所示指定：</span><span class="sxs-lookup"><span data-stu-id="6240b-2688">For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` from MyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:</span></span>  
  
```  
Type.GetType("System.Collections.Generic.Dictionary`2[System.String,[MyType,MyAssembly]]")  
```  
  
> [!NOTE]
>  <span data-ttu-id="6240b-2689">程序集限定的类型可以括在括号中，仅当它出现在类型参数列表。</span><span class="sxs-lookup"><span data-stu-id="6240b-2689">An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list.</span></span> <span data-ttu-id="6240b-2690">在类型参数列表中搜索程序集限定和未限定类型的规则是限定和未限定的非泛型类型的规则相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-2690">The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.</span></span>  
  
 <span data-ttu-id="6240b-2691">可以为 null 的类型是泛型类型的一种特殊情况。</span><span class="sxs-lookup"><span data-stu-id="6240b-2691">Nullable types are a special case of generic types.</span></span> <span data-ttu-id="6240b-2692">例如，一个可以为 null<xref:System.Int32>由字符串"System.Nullable'1[System.Int32]"表示。</span><span class="sxs-lookup"><span data-stu-id="6240b-2692">For example, a nullable <xref:System.Int32> is represented by the string "System.Nullable\`1[System.Int32]".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-2693">在 C#、 c + + 和 Visual Basic 中还可以获取使用类型运算符可以为 null 的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2693">In C#, C++, and Visual Basic you can also get nullable types using type operators.</span></span> <span data-ttu-id="6240b-2694">例如，可以为 null<xref:System.Boolean>返回类型`typeof(Nullable<bool>)`在 C# 中，通过`Nullable<Boolean>::typeid`c + + 和`GetType(Nullable(Of Boolean))`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="6240b-2694">For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="6240b-2695">下表显示了与使用的语法`GetType`为各种类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2695">The following table shows the syntax you use with `GetType` for various types.</span></span>  
  
|<span data-ttu-id="6240b-2696">若要获取</span><span class="sxs-lookup"><span data-stu-id="6240b-2696">To Get</span></span>|<span data-ttu-id="6240b-2697">使用</span><span class="sxs-lookup"><span data-stu-id="6240b-2697">Use</span></span>|  
|------------|---------|  
|<span data-ttu-id="6240b-2698">一个可以为 null <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="6240b-2698">A nullable <xref:System.Int32></span></span>|``Type.GetType("System.Nullable`1[System.Int32]")``|  
|<span data-ttu-id="6240b-2699">指向非托管的指针 `MyType`</span><span class="sxs-lookup"><span data-stu-id="6240b-2699">An unmanaged pointer to `MyType`</span></span>|`Type.GetType("MyType*")`|  
|<span data-ttu-id="6240b-2700">非托管的指针到指向 `MyType`</span><span class="sxs-lookup"><span data-stu-id="6240b-2700">An unmanaged pointer to a pointer to `MyType`</span></span>|`Type.GetType("MyType**")`|  
|<span data-ttu-id="6240b-2701">托管的指针或引用 `MyType`</span><span class="sxs-lookup"><span data-stu-id="6240b-2701">A managed pointer or reference to `MyType`</span></span>|<span data-ttu-id="6240b-2702">`Type.GetType("MyType&")`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2702">`Type.GetType("MyType&")`.</span></span> <span data-ttu-id="6240b-2703">请注意，与指针不同，引用仅限于一个级别。</span><span class="sxs-lookup"><span data-stu-id="6240b-2703">Note that unlike pointers, references are limited to one level.</span></span>|  
|<span data-ttu-id="6240b-2704">父类和嵌套的类</span><span class="sxs-lookup"><span data-stu-id="6240b-2704">A parent class and a nested class</span></span>|`Type.GetType("MyParentClass+MyNestedClass")`|  
|<span data-ttu-id="6240b-2705">一维数组下限为 0</span><span class="sxs-lookup"><span data-stu-id="6240b-2705">A one-dimensional array with a lower bound of 0</span></span>|`Type.GetType("MyArray[]")`|  
|<span data-ttu-id="6240b-2706">一维数组下限未知</span><span class="sxs-lookup"><span data-stu-id="6240b-2706">A one-dimensional array with an unknown lower bound</span></span>|`Type.GetType("MyArray[*]")`|  
|<span data-ttu-id="6240b-2707">N 维数组</span><span class="sxs-lookup"><span data-stu-id="6240b-2707">An n-dimensional array</span></span>|<span data-ttu-id="6240b-2708">在中总共 n-1 次括号逗号 （，）。</span><span class="sxs-lookup"><span data-stu-id="6240b-2708">A comma (,) inside the brackets a total of n-1 times.</span></span> <span data-ttu-id="6240b-2709">例如，`System.Object[,,]`表示一个三维`Object`数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-2709">For example, `System.Object[,,]` represents a three-dimensional `Object` array.</span></span>|  
|<span data-ttu-id="6240b-2710">二维数组的数组</span><span class="sxs-lookup"><span data-stu-id="6240b-2710">A two-dimensional array's array</span></span>|`Type.GetType("MyArray[][]")`|  
|<span data-ttu-id="6240b-2711">矩形二维数组具有未知的下限</span><span class="sxs-lookup"><span data-stu-id="6240b-2711">A rectangular two-dimensional array with unknown lower bounds</span></span>|`Type.GetType("MyArray[,]")`|  
|<span data-ttu-id="6240b-2712">具有一个类型参数的泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-2712">A generic type with one type argument</span></span>|``Type.GetType("MyGenericType`1[MyType]")``|  
|<span data-ttu-id="6240b-2713">具有两个类型参数的泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-2713">A generic type with two type arguments</span></span>|``Type.GetType("MyGenericType`2[MyType,AnotherType]")``|  
|<span data-ttu-id="6240b-2714">具有两个程序集限定类型参数的泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-2714">A generic type with two assembly-qualified type arguments</span></span>|``Type.GetType("MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]")``|  
|<span data-ttu-id="6240b-2715">具有程序集限定类型参数的程序集限定的泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-2715">An assembly-qualified generic type with an assembly-qualified type argument</span></span>|``Type.GetType("MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly")``|  
|<span data-ttu-id="6240b-2716">一个其类型参数为具有两个类型参数的泛型类型的泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-2716">A generic type whose type argument is a generic type with two type arguments</span></span>|``Type.GetType("MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]")``|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-2717"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2717"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="6240b-2718">调用了类初始值设定项，且该项引发了异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-2718">A class initializer is invoked and throws an exception.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="6240b-2719"><paramref name="throwOnError" /> 是 <see langword="true" />，且找不到该类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2719"><paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span></span>  
  
<span data-ttu-id="6240b-2720">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2720">-or-</span></span> 
 <span data-ttu-id="6240b-2721"><paramref name="throwOnError" /> 的值为 <see langword="true" />，且 <paramref name="typeName" /> 包含无效字符，例如嵌入的制表符。</span><span class="sxs-lookup"><span data-stu-id="6240b-2721"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span></span> 
<span data-ttu-id="6240b-2722">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2722">-or-</span></span> 
 <span data-ttu-id="6240b-2723"><paramref name="throwOnError" /> 的值为 <see langword="true" />，且 <paramref name="typeName" /> 为空字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-2723"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span></span>  
  
<span data-ttu-id="6240b-2724">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2724">-or-</span></span> 
 <span data-ttu-id="6240b-2725"><paramref name="throwOnError" /> 的值为 <see langword="true" />，且 <paramref name="typeName" /> 表示大小无效的数组类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2725"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span></span>  
  
<span data-ttu-id="6240b-2726">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2726">-or-</span></span> 
 <span data-ttu-id="6240b-2727"><paramref name="typeName" /> 表示 <see cref="T:System.TypedReference" /> 的数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-2727"><paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-2728"><paramref name="throwOnError" /> 是 <see langword="true" />，且 <paramref name="typeName" /> 包含无效的语法。</span><span class="sxs-lookup"><span data-stu-id="6240b-2728"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax.</span></span> <span data-ttu-id="6240b-2729">例如："MyType[,\*,]"。</span><span class="sxs-lookup"><span data-stu-id="6240b-2729">For example, "MyType[,\*,]".</span></span>  
  
<span data-ttu-id="6240b-2730">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2730">-or-</span></span> 
 <span data-ttu-id="6240b-2731"><paramref name="typeName" /> 表示将指针类型、<see langword="ByRef" /> 类型或 <see cref="T:System.Void" /> 作为其类型参数之一的泛型类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2731"><paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span></span>  
  
<span data-ttu-id="6240b-2732">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2732">-or-</span></span> 
 <span data-ttu-id="6240b-2733"><paramref name="typeName" /> 表示具有错误的类型参数数目的泛型类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2733"><paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span></span>  
  
<span data-ttu-id="6240b-2734">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2734">-or-</span></span> 
 <span data-ttu-id="6240b-2735"><paramref name="typeName" /> 表示泛型类型，并且其类型参数之一不满足相应类型参数的约束。</span><span class="sxs-lookup"><span data-stu-id="6240b-2735"><paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="6240b-2736"><paramref name="throwOnError" /> 的值为 <see langword="true" />，且未找到程序集或程序集的某个依赖项。</span><span class="sxs-lookup"><span data-stu-id="6240b-2736"><paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="6240b-2737">找到了程序集或其依赖项之一，但无法加载它们。</span><span class="sxs-lookup"><span data-stu-id="6240b-2737">The assembly or one of its dependencies was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="6240b-2738">程序集或其依赖项之一无效。</span><span class="sxs-lookup"><span data-stu-id="6240b-2738">The assembly or one of its dependencies is not valid.</span></span>  
  
<span data-ttu-id="6240b-2739">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2739">-or-</span></span> 
<span data-ttu-id="6240b-2740">当前加载的是公共语言运行时 2.0 版或更高版本，而程序集使用更高的版本编译。</span><span class="sxs-lookup"><span data-stu-id="6240b-2740">Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</span></span></exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md"><span data-ttu-id="6240b-2741">指定完全限定的类型名称</span><span class="sxs-lookup"><span data-stu-id="6240b-2741">Specifying Fully Qualified Type Names</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; assemblyResolver, Func&lt;System.Reflection.Assembly,string,bool,Type&gt; typeResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, class System.Func`2&lt;class System.Reflection.AssemblyName, class System.Reflection.Assembly&gt; assemblyResolver, class System.Func`4&lt;class System.Reflection.Assembly, string, bool, class System.Type&gt; typeResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, assemblyResolver As Func(Of AssemblyName, Assembly), typeResolver As Func(Of Assembly, String, Boolean, Type)) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, Func&lt;System::Reflection::AssemblyName ^, System::Reflection::Assembly ^&gt; ^ assemblyResolver, Func&lt;System::Reflection::Assembly ^, System::String ^, bool, Type ^&gt; ^ typeResolver);" />
      <MemberSignature Language="F#" Value="static member GetType : string * Func&lt;System.Reflection.AssemblyName, System.Reflection.Assembly&gt; * Func&lt;System.Reflection.Assembly, string, bool, Type&gt; -&gt; Type" Usage="System.Type.GetType (typeName, assemblyResolver, typeResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyResolver" Type="System.Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;" />
        <Parameter Name="typeResolver" Type="System.Func&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="6240b-2742">要获取的类型的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2742">The name of the type to get.</span></span> <span data-ttu-id="6240b-2743">如果提供了 <paramref name="typeResolver" /> 参数，则类型名称可以为 <paramref name="typeResolver" /> 能够解析的任何字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-2743">If the <paramref name="typeResolver" /> parameter is provided, the type name can be any string that <paramref name="typeResolver" /> is capable of resolving.</span></span> <span data-ttu-id="6240b-2744">如果提供了 <paramref name="assemblyResolver" /> 参数，或者使用了标准类型解析，则除非该类型位于当前正在执行的程序集或 Mscorlib.dll 中（在这种情况下足以提供其命名空间所限定的类型名称），否则 <paramref name="typeName" /> 必须为程序集限定的名称（请参见 <see cref="P:System.Type.AssemblyQualifiedName" />）。</span><span class="sxs-lookup"><span data-stu-id="6240b-2744">If the <paramref name="assemblyResolver" /> parameter is provided or if standard type resolution is used, <paramref name="typeName" /> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</span></span></param>
        <param name="assemblyResolver"><span data-ttu-id="6240b-2745">一个方法，它定位并返回 <paramref name="typeName" /> 中指定的程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-2745">A method that locates and returns the assembly that is specified in <paramref name="typeName" />.</span></span> <span data-ttu-id="6240b-2746">以 <paramref name="assemblyResolver" /> 对象形式传递给 <see cref="T:System.Reflection.AssemblyName" /> 的程序集名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2746">The assembly name is passed to <paramref name="assemblyResolver" /> as an <see cref="T:System.Reflection.AssemblyName" /> object.</span></span> <span data-ttu-id="6240b-2747">如果 <paramref name="typeName" /> 不包含程序集的名称，则不调用 <paramref name="assemblyResolver" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2747">If <paramref name="typeName" /> does not contain the name of an assembly, <paramref name="assemblyResolver" /> is not called.</span></span> <span data-ttu-id="6240b-2748">如果未提供 <paramref name="assemblyResolver" />，则执行标准程序集解析。</span><span class="sxs-lookup"><span data-stu-id="6240b-2748">If <paramref name="assemblyResolver" /> is not supplied, standard assembly resolution is performed.</span></span>  
  
<span data-ttu-id="6240b-2749">警告   不要通过未知的或不受信任的调用方传递方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-2749">Caution   Do not pass methods from unknown or untrusted callers.</span></span> <span data-ttu-id="6240b-2750">此操作可能会导致恶意代码特权提升。</span><span class="sxs-lookup"><span data-stu-id="6240b-2750">Doing so could result in elevation of privilege for malicious code.</span></span> <span data-ttu-id="6240b-2751">仅使用你提供或者熟悉的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-2751">Use only methods that you provide or that you are familiar with.</span></span></param>
        <param name="typeResolver"><span data-ttu-id="6240b-2752">一个方法，它在由 <paramref name="typeName" /> 或标准程序集解析返回的程序集中定位并返回 <paramref name="assemblyResolver" /> 所指定的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2752">A method that locates and returns the type that is specified by <paramref name="typeName" /> from the assembly that is returned by <paramref name="assemblyResolver" /> or by standard assembly resolution.</span></span> <span data-ttu-id="6240b-2753">如果未提供任何程序集，则 <paramref name="typeResolver" /> 方法可以提供一个程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-2753">If no assembly is provided, the <paramref name="typeResolver" /> method can provide one.</span></span> <span data-ttu-id="6240b-2754">该方法还采用一个参数以指定是否执行不区分大小写的搜索；<see langword="false" /> 传递给该参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2754">The method also takes a parameter that specifies whether to perform a case-insensitive search; <see langword="false" /> is passed to that parameter.</span></span>  
  
<span data-ttu-id="6240b-2755">警告   不要通过未知的或不受信任的调用方传递方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-2755">Caution   Do not pass methods from unknown or untrusted callers.</span></span></param>
        <summary><span data-ttu-id="6240b-2756">获取具有指定名称的类型，（可选）提供自定义方法以解析程序集和该类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2756">Gets the type with the specified name, optionally providing custom methods to resolve the assembly and the type.</span></span></summary>
        <returns><span data-ttu-id="6240b-2757">具有指定名称的类型，如果未找到该类型，则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2757">The type with the specified name, or <see langword="null" /> if the type is not found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-2758">此方法和有关的详细信息的使用方案`assemblyResolver`并`typeResolver`参数可在<xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="6240b-2758">Usage scenarios for this method and details about the `assemblyResolver` and `typeResolver` parameters can be found in the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-2759">如果`typeName`找不到，在调用<xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29>方法将返回`null`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2759">If `typeName` cannot be found, the call to the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> method returns `null`.</span></span> <span data-ttu-id="6240b-2760">它不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-2760">It does not throw an exception.</span></span> <span data-ttu-id="6240b-2761">若要控制是否会引发异常，调用的重载<xref:System.Type.GetType%2A>方法具有`throwOnError`参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2761">To control whether an exception is thrown, call an overload of the <xref:System.Type.GetType%2A> method that has a `throwOnError` parameter.</span></span>  
  
 <span data-ttu-id="6240b-2762">调用此方法的重载相当于调用<xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29>方法重载并指定`false`有关`throwOnError`和`ignoreCase`参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2762">Calling this method overload is the same as calling the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload and specifying `false` for the `throwOnError` and `ignoreCase` parameters.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-2763"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2763"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="6240b-2764">调用了类初始值设定项，且该项引发了异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-2764">A class initializer is invoked and throws an exception.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-2765">当 <paramref name="typeName" /> 解析为类型名称和程序集名称时（例如，当简单类型名称包含未转义的特殊字符时），发生错误。</span><span class="sxs-lookup"><span data-stu-id="6240b-2765">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).</span></span>  
  
<span data-ttu-id="6240b-2766">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2766">-or-</span></span> 
 <span data-ttu-id="6240b-2767"><paramref name="typeName" /> 表示将指针类型、<see langword="ByRef" /> 类型或 <see cref="T:System.Void" /> 作为其类型参数之一的泛型类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2767"><paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span></span>  
  
<span data-ttu-id="6240b-2768">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2768">-or-</span></span> 
 <span data-ttu-id="6240b-2769"><paramref name="typeName" /> 表示具有错误的类型参数数目的泛型类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2769"><paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span></span>  
  
<span data-ttu-id="6240b-2770">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2770">-or-</span></span> 
 <span data-ttu-id="6240b-2771"><paramref name="typeName" /> 表示泛型类型，并且其类型参数之一不满足相应类型参数的约束。</span><span class="sxs-lookup"><span data-stu-id="6240b-2771"><paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="6240b-2772"><paramref name="typeName" /> 表示 <see cref="T:System.TypedReference" /> 的数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-2772"><paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="6240b-2773">找到了程序集或其依赖项之一，但无法加载它们。</span><span class="sxs-lookup"><span data-stu-id="6240b-2773">The assembly or one of its dependencies was found, but could not be loaded.</span></span>  
  
<span data-ttu-id="6240b-2774">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2774">-or-</span></span> 
 <span data-ttu-id="6240b-2775"><paramref name="typeName" /> 包含无效的程序集名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2775"><paramref name="typeName" /> contains an invalid assembly name.</span></span>  
  
<span data-ttu-id="6240b-2776">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2776">-or-</span></span> 
 <span data-ttu-id="6240b-2777"><paramref name="typeName" /> 是一个有效的程序集名称，不包含类型名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2777"><paramref name="typeName" /> is a valid assembly name without a type name.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="6240b-2778">程序集或其依赖项之一无效。</span><span class="sxs-lookup"><span data-stu-id="6240b-2778">The assembly or one of its dependencies is not valid.</span></span>  
  
<span data-ttu-id="6240b-2779">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2779">-or-</span></span> 
<span data-ttu-id="6240b-2780">此程序集使用高于当前所加载版本的公共语言运行时版本编译而成。</span><span class="sxs-lookup"><span data-stu-id="6240b-2780">The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; assemblyResolver, Func&lt;System.Reflection.Assembly,string,bool,Type&gt; typeResolver, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, class System.Func`2&lt;class System.Reflection.AssemblyName, class System.Reflection.Assembly&gt; assemblyResolver, class System.Func`4&lt;class System.Reflection.Assembly, string, bool, class System.Type&gt; typeResolver, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, assemblyResolver As Func(Of AssemblyName, Assembly), typeResolver As Func(Of Assembly, String, Boolean, Type), throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, Func&lt;System::Reflection::AssemblyName ^, System::Reflection::Assembly ^&gt; ^ assemblyResolver, Func&lt;System::Reflection::Assembly ^, System::String ^, bool, Type ^&gt; ^ typeResolver, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetType : string * Func&lt;System.Reflection.AssemblyName, System.Reflection.Assembly&gt; * Func&lt;System.Reflection.Assembly, string, bool, Type&gt; * bool -&gt; Type" Usage="System.Type.GetType (typeName, assemblyResolver, typeResolver, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyResolver" Type="System.Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;" />
        <Parameter Name="typeResolver" Type="System.Func&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="6240b-2781">要获取的类型的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2781">The name of the type to get.</span></span> <span data-ttu-id="6240b-2782">如果提供了 <paramref name="typeResolver" /> 参数，则类型名称可以为 <paramref name="typeResolver" /> 能够解析的任何字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-2782">If the <paramref name="typeResolver" /> parameter is provided, the type name can be any string that <paramref name="typeResolver" /> is capable of resolving.</span></span> <span data-ttu-id="6240b-2783">如果提供了 <paramref name="assemblyResolver" /> 参数，或者使用了标准类型解析，则除非该类型位于当前正在执行的程序集或 Mscorlib.dll 中（在这种情况下足以提供其命名空间所限定的类型名称），否则 <paramref name="typeName" /> 必须为程序集限定的名称（请参见 <see cref="P:System.Type.AssemblyQualifiedName" />）。</span><span class="sxs-lookup"><span data-stu-id="6240b-2783">If the <paramref name="assemblyResolver" /> parameter is provided or if standard type resolution is used, <paramref name="typeName" /> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</span></span></param>
        <param name="assemblyResolver"><span data-ttu-id="6240b-2784">一个方法，它定位并返回 <paramref name="typeName" /> 中指定的程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-2784">A method that locates and returns the assembly that is specified in <paramref name="typeName" />.</span></span> <span data-ttu-id="6240b-2785">以 <paramref name="assemblyResolver" /> 对象形式传递给 <see cref="T:System.Reflection.AssemblyName" /> 的程序集名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2785">The assembly name is passed to <paramref name="assemblyResolver" /> as an <see cref="T:System.Reflection.AssemblyName" /> object.</span></span> <span data-ttu-id="6240b-2786">如果 <paramref name="typeName" /> 不包含程序集的名称，则不调用 <paramref name="assemblyResolver" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2786">If <paramref name="typeName" /> does not contain the name of an assembly, <paramref name="assemblyResolver" /> is not called.</span></span> <span data-ttu-id="6240b-2787">如果未提供 <paramref name="assemblyResolver" />，则执行标准程序集解析。</span><span class="sxs-lookup"><span data-stu-id="6240b-2787">If <paramref name="assemblyResolver" /> is not supplied, standard assembly resolution is performed.</span></span>  
  
<span data-ttu-id="6240b-2788">警告   不要通过未知的或不受信任的调用方传递方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-2788">Caution   Do not pass methods from unknown or untrusted callers.</span></span> <span data-ttu-id="6240b-2789">此操作可能会导致恶意代码特权提升。</span><span class="sxs-lookup"><span data-stu-id="6240b-2789">Doing so could result in elevation of privilege for malicious code.</span></span> <span data-ttu-id="6240b-2790">仅使用你提供或者熟悉的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-2790">Use only methods that you provide or that you are familiar with.</span></span></param>
        <param name="typeResolver"><span data-ttu-id="6240b-2791">一个方法，它在由 <paramref name="typeName" /> 或标准程序集解析返回的程序集中定位并返回 <paramref name="assemblyResolver" /> 所指定的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2791">A method that locates and returns the type that is specified by <paramref name="typeName" /> from the assembly that is returned by <paramref name="assemblyResolver" /> or by standard assembly resolution.</span></span> <span data-ttu-id="6240b-2792">如果未提供任何程序集，则该方法可以提供一个程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-2792">If no assembly is provided, the method can provide one.</span></span> <span data-ttu-id="6240b-2793">该方法还采用一个参数以指定是否执行不区分大小写的搜索；<see langword="false" /> 传递给该参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2793">The method also takes a parameter that specifies whether to perform a case-insensitive search; <see langword="false" /> is passed to that parameter.</span></span>  
  
<span data-ttu-id="6240b-2794">警告   不要通过未知的或不受信任的调用方传递方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-2794">Caution   Do not pass methods from unknown or untrusted callers.</span></span></param>
        <param name="throwOnError"><span data-ttu-id="6240b-2795">如果为 <see langword="true" />，则在找不到该类型时引发异常；如果为 <see langword="false" />，则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2795"><see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span></span> <span data-ttu-id="6240b-2796">指定 <see langword="false" /> 还会取消某些其他异常条件，但并不取消所有条件。</span><span class="sxs-lookup"><span data-stu-id="6240b-2796">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span></span> <span data-ttu-id="6240b-2797">请参见“异常”部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-2797">See the Exceptions section.</span></span></param>
        <summary><span data-ttu-id="6240b-2798">获取具有指定名称的类型，指定在找不到该类型时是否引发异常，（可选）提供自定义方法以解析程序集和该类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2798">Gets the type with the specified name, specifying whether to throw an exception if the type is not found, and optionally providing custom methods to resolve the assembly and the type.</span></span></summary>
        <returns><span data-ttu-id="6240b-2799">具有指定名称的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2799">The type with the specified name.</span></span> <span data-ttu-id="6240b-2800">如果找不到该类型，则 <paramref name="throwOnError" /> 参数指定是返回 <see langword="null" /> 还是引发异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-2800">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span></span> <span data-ttu-id="6240b-2801">在某些情况下，将引发异常，而不考虑 <paramref name="throwOnError" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="6240b-2801">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span></span> <span data-ttu-id="6240b-2802">请参见“异常”部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-2802">See the Exceptions section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-2803">此方法和有关的详细信息的使用方案`assemblyResolver`并`typeResolver`参数可在<xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="6240b-2803">Usage scenarios for this method and details about the `assemblyResolver` and `typeResolver` parameters can be found in the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload.</span></span>  
  
 <span data-ttu-id="6240b-2804">调用此方法的重载相当于调用<xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29>方法重载并指定`false`为`ignoreCase`参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2804">Calling this method overload is the same as calling the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload and specifying `false` for the `ignoreCase` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-2805"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2805"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="6240b-2806">调用了类初始值设定项，且该项引发了异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-2806">A class initializer is invoked and throws an exception.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="6240b-2807"><paramref name="throwOnError" /> 是 <see langword="true" />，且找不到该类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2807"><paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span></span>  
  
<span data-ttu-id="6240b-2808">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2808">-or-</span></span> 
 <span data-ttu-id="6240b-2809"><paramref name="throwOnError" /> 的值为 <see langword="true" />，且 <paramref name="typeName" /> 包含无效字符，例如嵌入的制表符。</span><span class="sxs-lookup"><span data-stu-id="6240b-2809"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span></span> 
<span data-ttu-id="6240b-2810">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2810">-or-</span></span> 
 <span data-ttu-id="6240b-2811"><paramref name="throwOnError" /> 的值为 <see langword="true" />，且 <paramref name="typeName" /> 为空字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-2811"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span></span>  
  
<span data-ttu-id="6240b-2812">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2812">-or-</span></span> 
 <span data-ttu-id="6240b-2813"><paramref name="throwOnError" /> 的值为 <see langword="true" />，且 <paramref name="typeName" /> 表示大小无效的数组类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2813"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span></span>  
  
<span data-ttu-id="6240b-2814">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2814">-or-</span></span> 
 <span data-ttu-id="6240b-2815"><paramref name="typeName" /> 表示 <see cref="T:System.TypedReference" /> 的数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-2815"><paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-2816">当 <paramref name="typeName" /> 解析为类型名称和程序集名称时（例如，当简单类型名称包含未转义的特殊字符时），发生错误。</span><span class="sxs-lookup"><span data-stu-id="6240b-2816">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).</span></span>  
  
<span data-ttu-id="6240b-2817">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2817">-or-</span></span> 
 <span data-ttu-id="6240b-2818"><paramref name="throwOnError" /> 是 <see langword="true" />，且 <paramref name="typeName" /> 包含无效的语法（例如 "MyType[,\*,]"）。</span><span class="sxs-lookup"><span data-stu-id="6240b-2818"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax (for example, "MyType[,\*,]").</span></span>  
  
<span data-ttu-id="6240b-2819">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2819">-or-</span></span> 
 <span data-ttu-id="6240b-2820"><paramref name="typeName" /> 表示将指针类型、<see langword="ByRef" /> 类型或 <see cref="T:System.Void" /> 作为其类型参数之一的泛型类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2820"><paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span></span>  
  
<span data-ttu-id="6240b-2821">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2821">-or-</span></span> 
 <span data-ttu-id="6240b-2822"><paramref name="typeName" /> 表示具有错误的类型参数数目的泛型类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2822"><paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span></span>  
  
<span data-ttu-id="6240b-2823">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2823">-or-</span></span> 
 <span data-ttu-id="6240b-2824"><paramref name="typeName" /> 表示泛型类型，并且其类型参数之一不满足相应类型参数的约束。</span><span class="sxs-lookup"><span data-stu-id="6240b-2824"><paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="6240b-2825"><paramref name="throwOnError" /> 的值为 <see langword="true" />，且未找到程序集或程序集的某个依赖项。</span><span class="sxs-lookup"><span data-stu-id="6240b-2825"><paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span></span>  
  
<span data-ttu-id="6240b-2826">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2826">-or-</span></span> 
 <span data-ttu-id="6240b-2827"><paramref name="typeName" /> 包含无效的程序集名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2827"><paramref name="typeName" /> contains an invalid assembly name.</span></span>  
  
<span data-ttu-id="6240b-2828">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2828">-or-</span></span> 
 <span data-ttu-id="6240b-2829"><paramref name="typeName" /> 是一个不含类型名称的有效程序集名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2829"><paramref name="typeName" /> is a valid assembly name without a type name.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="6240b-2830">找到了程序集或其依赖项之一，但无法加载它们。</span><span class="sxs-lookup"><span data-stu-id="6240b-2830">The assembly or one of its dependencies was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="6240b-2831">程序集或其依赖项之一无效。</span><span class="sxs-lookup"><span data-stu-id="6240b-2831">The assembly or one of its dependencies is not valid.</span></span>  
  
<span data-ttu-id="6240b-2832">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2832">-or-</span></span> 
<span data-ttu-id="6240b-2833">此程序集使用高于当前所加载版本的公共语言运行时版本编译而成。</span><span class="sxs-lookup"><span data-stu-id="6240b-2833">The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public static Type GetType (string typeName, Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt; assemblyResolver, Func&lt;System.Reflection.Assembly,string,bool,Type&gt; typeResolver, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetType(string typeName, class System.Func`2&lt;class System.Reflection.AssemblyName, class System.Reflection.Assembly&gt; assemblyResolver, class System.Func`4&lt;class System.Reflection.Assembly, string, bool, class System.Type&gt; typeResolver, bool throwOnError, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetType (typeName As String, assemblyResolver As Func(Of AssemblyName, Assembly), typeResolver As Func(Of Assembly, String, Boolean, Type), throwOnError As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetType(System::String ^ typeName, Func&lt;System::Reflection::AssemblyName ^, System::Reflection::Assembly ^&gt; ^ assemblyResolver, Func&lt;System::Reflection::Assembly ^, System::String ^, bool, Type ^&gt; ^ typeResolver, bool throwOnError, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member GetType : string * Func&lt;System.Reflection.AssemblyName, System.Reflection.Assembly&gt; * Func&lt;System.Reflection.Assembly, string, bool, Type&gt; * bool * bool -&gt; Type" Usage="System.Type.GetType (typeName, assemblyResolver, typeResolver, throwOnError, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyResolver" Type="System.Func&lt;System.Reflection.AssemblyName,System.Reflection.Assembly&gt;" />
        <Parameter Name="typeResolver" Type="System.Func&lt;System.Reflection.Assembly,System.String,System.Boolean,System.Type&gt;" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="6240b-2834">要获取的类型的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2834">The name of the type to get.</span></span> <span data-ttu-id="6240b-2835">如果提供了 <paramref name="typeResolver" /> 参数，则类型名称可以为 <paramref name="typeResolver" /> 能够解析的任何字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-2835">If the <paramref name="typeResolver" /> parameter is provided, the type name can be any string that <paramref name="typeResolver" /> is capable of resolving.</span></span> <span data-ttu-id="6240b-2836">如果提供了 <paramref name="assemblyResolver" /> 参数，或者使用了标准类型解析，则除非该类型位于当前正在执行的程序集或 Mscorlib.dll 中（在这种情况下足以提供其命名空间所限定的类型名称），否则 <paramref name="typeName" /> 必须为程序集限定的名称（请参见 <see cref="P:System.Type.AssemblyQualifiedName" />）。</span><span class="sxs-lookup"><span data-stu-id="6240b-2836">If the <paramref name="assemblyResolver" /> parameter is provided or if standard type resolution is used, <paramref name="typeName" /> must be an assembly-qualified name (see <see cref="P:System.Type.AssemblyQualifiedName" />), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.</span></span></param>
        <param name="assemblyResolver"><span data-ttu-id="6240b-2837">一个方法，它定位并返回 <paramref name="typeName" /> 中指定的程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-2837">A method that locates and returns the assembly that is specified in <paramref name="typeName" />.</span></span> <span data-ttu-id="6240b-2838">以 <paramref name="assemblyResolver" /> 对象形式传递给 <see cref="T:System.Reflection.AssemblyName" /> 的程序集名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2838">The assembly name is passed to <paramref name="assemblyResolver" /> as an <see cref="T:System.Reflection.AssemblyName" /> object.</span></span> <span data-ttu-id="6240b-2839">如果 <paramref name="typeName" /> 不包含程序集的名称，则不调用 <paramref name="assemblyResolver" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2839">If <paramref name="typeName" /> does not contain the name of an assembly, <paramref name="assemblyResolver" /> is not called.</span></span> <span data-ttu-id="6240b-2840">如果未提供 <paramref name="assemblyResolver" />，则执行标准程序集解析。</span><span class="sxs-lookup"><span data-stu-id="6240b-2840">If <paramref name="assemblyResolver" /> is not supplied, standard assembly resolution is performed.</span></span>  
  
<span data-ttu-id="6240b-2841">警告   不要通过未知的或不受信任的调用方传递方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-2841">Caution   Do not pass methods from unknown or untrusted callers.</span></span> <span data-ttu-id="6240b-2842">此操作可能会导致恶意代码特权提升。</span><span class="sxs-lookup"><span data-stu-id="6240b-2842">Doing so could result in elevation of privilege for malicious code.</span></span> <span data-ttu-id="6240b-2843">仅使用你提供或者熟悉的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-2843">Use only methods that you provide or that you are familiar with.</span></span></param>
        <param name="typeResolver"><span data-ttu-id="6240b-2844">一个方法，它在由 <paramref name="typeName" /> 或标准程序集解析返回的程序集中定位并返回 <paramref name="assemblyResolver" /> 所指定的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2844">A method that locates and returns the type that is specified by <paramref name="typeName" /> from the assembly that is returned by <paramref name="assemblyResolver" /> or by standard assembly resolution.</span></span> <span data-ttu-id="6240b-2845">如果未提供任何程序集，则该方法可以提供一个程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-2845">If no assembly is provided, the method can provide one.</span></span> <span data-ttu-id="6240b-2846">该方法还采用一个参数以指定是否执行不区分大小写的搜索；<paramref name="ignoreCase" /> 的值传递给该参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2846">The method also takes a parameter that specifies whether to perform a case-insensitive search; the value of <paramref name="ignoreCase" /> is passed to that parameter.</span></span>  
  
<span data-ttu-id="6240b-2847">警告   不要通过未知的或不受信任的调用方传递方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-2847">Caution   Do not pass methods from unknown or untrusted callers.</span></span></param>
        <param name="throwOnError"><span data-ttu-id="6240b-2848">如果为 <see langword="true" />，则在找不到该类型时引发异常；如果为 <see langword="false" />，则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2848"><see langword="true" /> to throw an exception if the type cannot be found; <see langword="false" /> to return <see langword="null" />.</span></span> <span data-ttu-id="6240b-2849">指定 <see langword="false" /> 还会取消某些其他异常条件，但并不取消所有条件。</span><span class="sxs-lookup"><span data-stu-id="6240b-2849">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span></span> <span data-ttu-id="6240b-2850">请参见“异常”部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-2850">See the Exceptions section.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="6240b-2851">对 <see langword="true" /> 执行的搜索不区分大小写，则为 <paramref name="typeName" />；对 <see langword="false" /> 执行的搜索区分大小写，则为 <paramref name="typeName" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2851"><see langword="true" /> to perform a case-insensitive search for <paramref name="typeName" />, <see langword="false" /> to perform a case-sensitive search for <paramref name="typeName" />.</span></span></param>
        <summary><span data-ttu-id="6240b-2852">获取具有指定名称的类型，指定是否执行区分大小写的搜索，在找不到类型时是否引发异常，（可选）提供自定义方法以解析程序集和该类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2852">Gets the type with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found, and optionally providing custom methods to resolve the assembly and the type.</span></span></summary>
        <returns><span data-ttu-id="6240b-2853">具有指定名称的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2853">The type with the specified name.</span></span> <span data-ttu-id="6240b-2854">如果找不到该类型，则 <paramref name="throwOnError" /> 参数指定是返回 <see langword="null" /> 还是引发异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-2854">If the type is not found, the <paramref name="throwOnError" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span></span> <span data-ttu-id="6240b-2855">在某些情况下，将引发异常，而不考虑 <paramref name="throwOnError" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="6240b-2855">In some cases, an exception is thrown regardless of the value of <paramref name="throwOnError" />.</span></span> <span data-ttu-id="6240b-2856">请参见“异常”部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-2856">See the Exceptions section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-2857">使用此方法的重载和及其关联的重载 (<xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29>并<xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%29>) 来替换的默认实现<xref:System.Type.GetType%2A>具有更灵活的实现方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-2857">Use this method overload and its associated overloads (<xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> and <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%29>) to replace the default implementation of the <xref:System.Type.GetType%2A> method with more flexible implementations.</span></span> <span data-ttu-id="6240b-2858">通过提供你自己的方法来解析类型名称和包含它们的程序集的名称，可以执行以下操作：</span><span class="sxs-lookup"><span data-stu-id="6240b-2858">By providing your own methods that resolve type names and the names of the assemblies that contain them, you can do the following:</span></span>  
  
-   <span data-ttu-id="6240b-2859">控制从加载一种类型的程序集的版本。</span><span class="sxs-lookup"><span data-stu-id="6240b-2859">Control which version of an assembly a type is loaded from.</span></span>  
  
-   <span data-ttu-id="6240b-2860">提供查找不包括程序集名称的类型名称的另一个位置。</span><span class="sxs-lookup"><span data-stu-id="6240b-2860">Provide another place to look for a type name that does not include an assembly name.</span></span>  
  
-   <span data-ttu-id="6240b-2861">加载使用部分程序集名称的程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-2861">Load assemblies using partial assembly names.</span></span>  
  
-   <span data-ttu-id="6240b-2862">返回的子类<xref:System.Type?displayProperty=nameWithType>不通过公共语言运行时 (CLR) 创建的。</span><span class="sxs-lookup"><span data-stu-id="6240b-2862">Return subclasses of <xref:System.Type?displayProperty=nameWithType> that are not created by the common language runtime (CLR).</span></span>  
  
 <span data-ttu-id="6240b-2863">例如，在版本容错序列化此方法，可使用部分名称搜索"best fit"程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-2863">For example, in version-tolerant serialization this method enables you to search for a "best fit" assembly by using a partial name.</span></span> <span data-ttu-id="6240b-2864">另一个重载<xref:System.Type.GetType%2A>方法需要一个程序集限定类型名称，其中包括的版本号。</span><span class="sxs-lookup"><span data-stu-id="6240b-2864">Other overloads of the <xref:System.Type.GetType%2A> method require an assembly-qualified type name, which includes the version number.</span></span>  
  
 <span data-ttu-id="6240b-2865">类型系统的备用实现可能需要返回的子类<xref:System.Type?displayProperty=nameWithType>不通过 CLR 创建的; 所有类型的其他重载返回<xref:System.Type.GetType%2A>方法是运行时类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2865">Alternate implementations of the type system may need to return subclasses of <xref:System.Type?displayProperty=nameWithType> that are not created by the CLR; all types that are returned by other overloads of the <xref:System.Type.GetType%2A> method are runtime types.</span></span>  
  
<a name="usage_notes"></a>   
## <a name="usage-notes"></a><span data-ttu-id="6240b-2866">用法说明</span><span class="sxs-lookup"><span data-stu-id="6240b-2866">Usage Notes</span></span>  
 <span data-ttu-id="6240b-2867">此方法的重载和及其关联的重载解析`typeName`到的类型和名称的程序集名称，然后解析该名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2867">This method overload and its associated overloads parse `typeName` into the name of a type and the name of an assembly, and then resolve the names.</span></span> <span data-ttu-id="6240b-2868">程序集名称的解析早类型名称的解析，因为必须在程序集的上下文中解析类型名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2868">Resolution of the assembly name occurs before resolution of the type name, because a type name must be resolved in the context of an assembly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-2869">如果您不熟悉的程序集限定类型名称的概念，请参阅<xref:System.Type.AssemblyQualifiedName%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-2869">If you are unfamiliar with the concept of assembly-qualified type names, see the <xref:System.Type.AssemblyQualifiedName%2A> property.</span></span>  
  
 <span data-ttu-id="6240b-2870">如果`typeName`不是一个程序集限定的名称，跳过程序集解析。</span><span class="sxs-lookup"><span data-stu-id="6240b-2870">If `typeName` is not an assembly-qualified name, assembly resolution is skipped.</span></span> <span data-ttu-id="6240b-2871">可以在 Mscorlib.dll 或当前正在执行的程序集的上下文中解析未限定的类型名称或你可以根据需要提供中的程序集`typeResolver`参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2871">Unqualified type names can be resolved in the context of Mscorlib.dll or the currently executing assembly, or you can optionally provide an assembly in the `typeResolver` parameter.</span></span> <span data-ttu-id="6240b-2872">包括或忽略程序集名称，用于为中的表显示不同类型的名称解析的效果[混合名称解析](#mixed_name_resolution)部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-2872">The effects of including or omitting the assembly name for different kinds of name resolution are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section.</span></span>  
  
 <span data-ttu-id="6240b-2873">常规使用注意事项：</span><span class="sxs-lookup"><span data-stu-id="6240b-2873">General usage notes:</span></span>  
  
-   <span data-ttu-id="6240b-2874">不要传递到方法`assemblyResolver`或`typeResolver`如果它们来自未知或不受信任的调用方。</span><span class="sxs-lookup"><span data-stu-id="6240b-2874">Do not pass methods to `assemblyResolver` or `typeResolver` if they come from unknown or untrusted callers.</span></span> <span data-ttu-id="6240b-2875">仅使用你提供或者熟悉的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-2875">Use only methods that you provide or that you are familiar with.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="6240b-2876">使用来自未知或不受信任的调用方的方法可能导致提升权限的恶意代码。</span><span class="sxs-lookup"><span data-stu-id="6240b-2876">Using methods from unknown or untrusted callers could result in elevation of privilege for malicious code.</span></span>  
  
-   <span data-ttu-id="6240b-2877">如果省略`assemblyResolver`和/或`typeResolver`参数、 的值`throwOnError`参数传递给执行默认解析的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-2877">If you omit the `assemblyResolver` and/or `typeResolver` parameters, the value of the `throwOnError` parameter is passed to the methods that perform the default resolution.</span></span>  
  
-   <span data-ttu-id="6240b-2878">如果`throwOnError`是`true`，此方法将引发<xref:System.TypeLoadException>时`typeResolver`返回`null`，和一个<xref:System.IO.FileNotFoundException>时`assemblyResolver`返回`null`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2878">If `throwOnError` is `true`, this method throws a <xref:System.TypeLoadException> when `typeResolver` returns `null`, and a <xref:System.IO.FileNotFoundException> when `assemblyResolver` returns `null`.</span></span>  
  
-   <span data-ttu-id="6240b-2879">此方法不会捕获引发的异常`assemblyResolver`和`typeResolver`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2879">This method does not catch exceptions thrown by `assemblyResolver` and `typeResolver`.</span></span> <span data-ttu-id="6240b-2880">你负责解析程序方法通过引发任何异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-2880">You are responsible for any exceptions that are thrown by the resolver methods.</span></span>  
  
<a name="resolving_assemblies"></a>   
### <a name="resolving-assemblies"></a><span data-ttu-id="6240b-2881">解析程序集</span><span class="sxs-lookup"><span data-stu-id="6240b-2881">Resolving Assemblies</span></span>  
 <span data-ttu-id="6240b-2882">`assemblyResolver`方法接收<xref:System.Reflection.AssemblyName>对象，生成的分析中包含的字符串的程序集名称`typeName`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2882">The `assemblyResolver` method receives an <xref:System.Reflection.AssemblyName> object, which is produced by parsing the string assembly name that is included in `typeName`.</span></span> <span data-ttu-id="6240b-2883">如果`typeName`不包含程序集名称，`assemblyResolver`不会调用并`null`传递给`typeResolver`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2883">If `typeName` does not contain an assembly name, `assemblyResolver` is not called and `null` is passed to `typeResolver`.</span></span>  
  
 <span data-ttu-id="6240b-2884">如果`assemblyResolver`不提供、 标准程序集探测用于查找程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-2884">If `assemblyResolver` is not supplied, standard assembly probing is used to locate the assembly.</span></span> <span data-ttu-id="6240b-2885">如果`assemblyResolver`提供，则<xref:System.Type.GetType%2A>方法不会执行标准探测，这种情况下，您必须确保，在`assemblyResolver`可以处理将传递给它的所有程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-2885">If `assemblyResolver` is provided, the <xref:System.Type.GetType%2A> method does not do standard probing; in that case you must ensure that your `assemblyResolver` can handle all the assemblies you pass to it.</span></span>  
  
 <span data-ttu-id="6240b-2886">`assemblyResolver`方法应返回`null`如果无法解析的程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-2886">The `assemblyResolver` method should return `null` if the assembly cannot be resolved.</span></span> <span data-ttu-id="6240b-2887">如果`assemblyResolver`将返回`null`，`typeResolver`不会调用，并且不进行其他处理发生; 此外，如果`throwOnError`是`true`、<xref:System.IO.FileNotFoundException>引发。</span><span class="sxs-lookup"><span data-stu-id="6240b-2887">If `assemblyResolver` returns `null`, `typeResolver` is not called and no further processing occurs; additionally, if `throwOnError` is `true`, a <xref:System.IO.FileNotFoundException> is thrown.</span></span>  
  
 <span data-ttu-id="6240b-2888">如果<xref:System.Reflection.AssemblyName>传递给`assemblyResolver`是部分名称、 一个或多个其部件是`null`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2888">If the <xref:System.Reflection.AssemblyName> that is passed to `assemblyResolver` is a partial name, one or more of its parts are `null`.</span></span> <span data-ttu-id="6240b-2889">例如，如果它具有无版本<xref:System.Reflection.AssemblyName.Version%2A>属性是`null`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2889">For example, if it has no version, the <xref:System.Reflection.AssemblyName.Version%2A> property is `null`.</span></span> <span data-ttu-id="6240b-2890">如果<xref:System.Reflection.AssemblyName.Version%2A>属性，<xref:System.Reflection.AssemblyName.CultureInfo%2A>属性，并<xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A>方法都返回`null`，然后提供的程序集简单名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2890">If the <xref:System.Reflection.AssemblyName.Version%2A> property, the <xref:System.Reflection.AssemblyName.CultureInfo%2A> property, and the <xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A> method all return `null`, then only the simple name of the assembly was supplied.</span></span> <span data-ttu-id="6240b-2891">`assemblyResolver`方法可以使用或忽略程序集名称的所有部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-2891">The `assemblyResolver` method can use or ignore all parts of the assembly name.</span></span>  
  
 <span data-ttu-id="6240b-2892">为中的表显示不同的程序集解析选项的作用[混合名称解析](#mixed_name_resolution)部分中的，对于简单和程序集限定类型名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2892">The effects of different assembly resolution options are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section, for simple and assembly-qualified type names.</span></span>  
  
<a name="resolving_types"></a>   
### <a name="resolving-types"></a><span data-ttu-id="6240b-2893">解析类型</span><span class="sxs-lookup"><span data-stu-id="6240b-2893">Resolving Types</span></span>  
 <span data-ttu-id="6240b-2894">如果`typeName`未指定一个程序集的名称，`typeResolver`始终调用。</span><span class="sxs-lookup"><span data-stu-id="6240b-2894">If `typeName` does not specify an assembly name, `typeResolver` is always called.</span></span> <span data-ttu-id="6240b-2895">如果`typeName`指定一个程序集的名称，`typeResolver`仅在成功解析的程序集名称时调用。</span><span class="sxs-lookup"><span data-stu-id="6240b-2895">If `typeName` specifies an assembly name, `typeResolver` is called only when the assembly name is successfully resolved.</span></span> <span data-ttu-id="6240b-2896">如果`assemblyResolver`或标准程序集探测返回`null`，`typeResolver`不调用。</span><span class="sxs-lookup"><span data-stu-id="6240b-2896">If `assemblyResolver` or standard assembly probing returns `null`, `typeResolver` is not called.</span></span>  
  
 <span data-ttu-id="6240b-2897">`typeResolver`方法接收三个参数：</span><span class="sxs-lookup"><span data-stu-id="6240b-2897">The `typeResolver` method receives three arguments:</span></span>  
  
-   <span data-ttu-id="6240b-2898">要搜索的程序集或`null`如果`typeName`不包含程序集名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2898">The assembly to search or `null` if `typeName` does not contain an assembly name.</span></span>  
  
-   <span data-ttu-id="6240b-2899">简单类型的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2899">The simple name of the type.</span></span> <span data-ttu-id="6240b-2900">对于嵌套类型，这是最外面的包含类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2900">In the case of a nested type, this is the outermost containing type.</span></span> <span data-ttu-id="6240b-2901">对于泛型类型，这是泛型类型的简单名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2901">In the case of a generic type, this is the simple name of the generic type.</span></span>  
  
-   <span data-ttu-id="6240b-2902">一个布尔值，是`true`如果类型名称的大小写将被忽略。</span><span class="sxs-lookup"><span data-stu-id="6240b-2902">A Boolean value that is `true` if the case of type names is to be ignored.</span></span>  
  
 <span data-ttu-id="6240b-2903">该实现确定这些自变量的使用的方式。</span><span class="sxs-lookup"><span data-stu-id="6240b-2903">The implementation determines the way these arguments are used.</span></span> <span data-ttu-id="6240b-2904">`typeResolver`方法应返回`null`如果无法解析类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2904">The `typeResolver` method should return `null` if it cannot resolve the type.</span></span> <span data-ttu-id="6240b-2905">如果`typeResolver`将返回`null`并`throwOnError`是`true`，此重载<xref:System.Type.GetType%2A>引发<xref:System.TypeLoadException>。</span><span class="sxs-lookup"><span data-stu-id="6240b-2905">If `typeResolver` returns `null` and `throwOnError` is `true`, this overload of <xref:System.Type.GetType%2A> throws a <xref:System.TypeLoadException>.</span></span>  
  
 <span data-ttu-id="6240b-2906">为中的表显示不同的类型解析选项的作用[混合名称解析](#mixed_name_resolution)部分中的，对于简单和程序集限定类型名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2906">The effects of different type resolution options are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section, for simple and assembly-qualified type names.</span></span>  
  
#### <a name="resolving-nested-types"></a><span data-ttu-id="6240b-2907">解析嵌套的类型</span><span class="sxs-lookup"><span data-stu-id="6240b-2907">Resolving Nested Types</span></span>  
 <span data-ttu-id="6240b-2908">如果`typeName`是嵌套的类型，只有名称的最外层包含类型传递给`typeResolver`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2908">If `typeName` is a nested type, only the name of the outermost containing type is passed to `typeResolver`.</span></span> <span data-ttu-id="6240b-2909">当`typeResolver`返回此类型<xref:System.Type.GetNestedType%2A>方法以递归方式调用之前的最内部的嵌套的类型已得到解决。</span><span class="sxs-lookup"><span data-stu-id="6240b-2909">When `typeResolver` returns this type, the <xref:System.Type.GetNestedType%2A> method is called recursively until the innermost nested type has been resolved.</span></span>  
  
#### <a name="resolving-generic-types"></a><span data-ttu-id="6240b-2910">解析泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-2910">Resolving Generic Types</span></span>  
 <span data-ttu-id="6240b-2911"><xref:System.Type.GetType%2A>称为以递归方式来解析泛型类型：首先，若要解决的泛型类型本身，以及之后如何解析其类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2911">The <xref:System.Type.GetType%2A> is called recursively to resolve generic types: First to resolve the generic type itself, and then to resolve its type arguments.</span></span> <span data-ttu-id="6240b-2912">如果类型参数是泛型，<xref:System.Type.GetType%2A>被递归调用来解析其类型参数中，依次类推。</span><span class="sxs-lookup"><span data-stu-id="6240b-2912">If a type argument is generic, <xref:System.Type.GetType%2A> is called recursively to resolve its type arguments, and so on.</span></span>  
  
 <span data-ttu-id="6240b-2913">组合`assemblyResolver`和`typeResolver`提供必须能够解析此递归的所有级别。</span><span class="sxs-lookup"><span data-stu-id="6240b-2913">The combination of `assemblyResolver` and `typeResolver` that you provide must be capable of resolving all levels of this recursion.</span></span> <span data-ttu-id="6240b-2914">例如，假设您提供`assemblyResolver`，它控制的加载`MyAssembly`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2914">For example, suppose you supply an `assemblyResolver` that controls the loading of `MyAssembly`.</span></span> <span data-ttu-id="6240b-2915">假设你想要解析的泛型类型`Dictionary<string, MyType>`(`Dictionary(Of String, MyType)`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="6240b-2915">Suppose you want to resolve the generic type `Dictionary<string, MyType>` (`Dictionary(Of String, MyType)` in Visual Basic).</span></span> <span data-ttu-id="6240b-2916">您可能会传递以下泛型类型名称：</span><span class="sxs-lookup"><span data-stu-id="6240b-2916">You might pass the following generic type name:</span></span>  
  
```  
"System.Collections.Generic.Dictionary`2[System.String,[MyNamespace.MyType, MyAssembly]]"  
```  
  
 <span data-ttu-id="6240b-2917">请注意，`MyType`是只有程序集限定类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-2917">Notice that `MyType` is the only assembly-qualified type argument.</span></span> <span data-ttu-id="6240b-2918">名称<xref:System.Collections.Generic.Dictionary%602>和<xref:System.String>类不是程序集限定。</span><span class="sxs-lookup"><span data-stu-id="6240b-2918">The names of the <xref:System.Collections.Generic.Dictionary%602> and <xref:System.String> classes are not assembly-qualified.</span></span> <span data-ttu-id="6240b-2919">你`typeResolver`必须能够处理的程序集或`null`，因为它将接收`null`有关<xref:System.Collections.Generic.Dictionary%602>和<xref:System.String>。</span><span class="sxs-lookup"><span data-stu-id="6240b-2919">Your `typeResolver` must be able handle either an assembly or `null`, because it will receive `null` for <xref:System.Collections.Generic.Dictionary%602> and <xref:System.String>.</span></span> <span data-ttu-id="6240b-2920">它可以处理这种情况下，通过调用的重载<xref:System.Type.GetType%2A>采用一个字符串，因为两者都未限定的类型名称是在 Mscorlib.dll 中的方法：</span><span class="sxs-lookup"><span data-stu-id="6240b-2920">It can handle that case by calling an overload of the <xref:System.Type.GetType%2A> method that takes a string, because both of the unqualified type names are in Mscorlib.dll:</span></span>  
  
 [!code-csharp[GetTypeOnSteroids#1](~/samples/snippets/csharp/VS_Snippets_CLR/gettypeonsteroids/cs/source.cs#1)]  
  
 <span data-ttu-id="6240b-2921">`assemblyResolver`不会调用方法的字典类型和字符串类型，因为这些类型名称不是程序集限定。</span><span class="sxs-lookup"><span data-stu-id="6240b-2921">The `assemblyResolver` method is not called for the dictionary type and the string type, because those type names are not assembly-qualified.</span></span>  
  
 <span data-ttu-id="6240b-2922">现在假设，而不是`System.String`，第一种泛型自变量类型是`YourType`，从`YourAssembly`:</span><span class="sxs-lookup"><span data-stu-id="6240b-2922">Now suppose that instead of `System.String`, the first generic argument type is `YourType`, from `YourAssembly`:</span></span>  
  
```  
"System.Collections.Generic.Dictionary`2[[YourNamespace.YourType, YourAssembly, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null], [MyNamespace.MyType, MyAssembly]]"  
```  
  
 <span data-ttu-id="6240b-2923">由于此程序集是 Mscorlib.dll 和当前正在执行的程序集都不，不能解决`YourType`不含程序集限定的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2923">Because this assembly is neither Mscorlib.dll nor the currently executing assembly, you cannot resolve `YourType` without an assembly-qualified name.</span></span> <span data-ttu-id="6240b-2924">因为你`assemblyResolve`将以递归方式调用，它必须能够处理这种情况。</span><span class="sxs-lookup"><span data-stu-id="6240b-2924">Because your `assemblyResolve` will be called recursively, it must be able to handle this case.</span></span> <span data-ttu-id="6240b-2925">而不是返回`null`以外的其他程序集`MyAssembly`，它现在的执行程序集加载成使用提供<xref:System.Reflection.AssemblyName>对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-2925">Instead of returning `null` for assemblies other than `MyAssembly`, it now performs an assembly load using the supplied <xref:System.Reflection.AssemblyName> object.</span></span>  
  
 [!code-csharp[GetTypeOnSteroids#2](~/samples/snippets/csharp/VS_Snippets_CLR/gettypeonsteroids/cs/source.cs#2)]  
  
 <span data-ttu-id="6240b-2926">返回到[用法说明](#usage_notes)。</span><span class="sxs-lookup"><span data-stu-id="6240b-2926">Back to [Usage Notes](#usage_notes).</span></span>  
  
#### <a name="resolving-type-names-with-special-characters"></a><span data-ttu-id="6240b-2927">解析带有特殊字符的类型名称</span><span class="sxs-lookup"><span data-stu-id="6240b-2927">Resolving Type Names with Special Characters</span></span>  
 <span data-ttu-id="6240b-2928">某些字符在程序集限定名称中具有特殊含义。</span><span class="sxs-lookup"><span data-stu-id="6240b-2928">Certain characters have special meanings in assembly-qualified names.</span></span> <span data-ttu-id="6240b-2929">如果简单类型名称包含这些字符，字符会导致分析错误时的简单名称是程序集限定名的一部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-2929">If a simple type name contains these characters, the characters cause parsing errors when the simple name is part of an assembly-qualified name.</span></span> <span data-ttu-id="6240b-2930">若要避免出现分析错误，必须转义反斜杠的特殊字符之前可以将传递到的程序集限定名称,<xref:System.Type.GetType%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-2930">To avoid the parsing errors, you must escape the special characters with a backslash before you can pass the assembly-qualified name to the <xref:System.Type.GetType%2A> method.</span></span> <span data-ttu-id="6240b-2931">例如，如果名为某种`Strange]Type`，方括号前必须按如下所示添加转义符： `Strange\]Type`。</span><span class="sxs-lookup"><span data-stu-id="6240b-2931">For example, if a type is named `Strange]Type`, the escape character must be added ahead of the square bracket as follows: `Strange\]Type`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-2932">使用此类特殊字符的名称不能在 Visual Basic 或 C# 中，创建，但可以使用 Microsoft 中间语言 (MSIL)，或发出动态程序集创建。</span><span class="sxs-lookup"><span data-stu-id="6240b-2932">Names with such special characters cannot be created in Visual Basic or C#, but can be created by using Microsoft intermediate language (MSIL) or by emitting dynamic assemblies.</span></span>  
  
 <span data-ttu-id="6240b-2933">下表显示了类型名称的特殊字符。</span><span class="sxs-lookup"><span data-stu-id="6240b-2933">The following table shows the special characters for type names.</span></span>  
  
|<span data-ttu-id="6240b-2934">字符</span><span class="sxs-lookup"><span data-stu-id="6240b-2934">Character</span></span>|<span data-ttu-id="6240b-2935">含义</span><span class="sxs-lookup"><span data-stu-id="6240b-2935">Meaning</span></span>|  
|---------------|-------------|  
|<span data-ttu-id="6240b-2936">`,` （逗号）</span><span class="sxs-lookup"><span data-stu-id="6240b-2936">`,` (comma)</span></span>|<span data-ttu-id="6240b-2937">程序集限定名称的分隔符。</span><span class="sxs-lookup"><span data-stu-id="6240b-2937">Delimiter for assembly-qualified names.</span></span>|  
|<span data-ttu-id="6240b-2938">`[]` （方括号）</span><span class="sxs-lookup"><span data-stu-id="6240b-2938">`[]` (square brackets)</span></span>|<span data-ttu-id="6240b-2939">作为后缀对，指示数组类型;作为分隔符对，包含泛型参数列表和程序集限定名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2939">As a suffix pair, indicates an array type; as a delimiter pair, encloses generic argument lists and assembly-qualified names.</span></span>|  
|<span data-ttu-id="6240b-2940">`&` （与号）</span><span class="sxs-lookup"><span data-stu-id="6240b-2940">`&` (ampersand)</span></span>|<span data-ttu-id="6240b-2941">作为后缀，表示一种类型是引用类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2941">As a suffix, indicates that a type is a reference type.</span></span>|  
|<span data-ttu-id="6240b-2942">`*` （星号）</span><span class="sxs-lookup"><span data-stu-id="6240b-2942">`*` (asterisk)</span></span>|<span data-ttu-id="6240b-2943">作为后缀，表示一种类型是指针类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2943">As a suffix, indicates that a type is a pointer type.</span></span>|  
|<span data-ttu-id="6240b-2944">`+` （加号）</span><span class="sxs-lookup"><span data-stu-id="6240b-2944">`+` (plus)</span></span>|<span data-ttu-id="6240b-2945">对嵌套类型分隔符。</span><span class="sxs-lookup"><span data-stu-id="6240b-2945">Delimiter for nested types.</span></span>|  
|<span data-ttu-id="6240b-2946">`\` （反斜杠）</span><span class="sxs-lookup"><span data-stu-id="6240b-2946">`\` (backslash)</span></span>|<span data-ttu-id="6240b-2947">转义符。</span><span class="sxs-lookup"><span data-stu-id="6240b-2947">Escape character.</span></span>|  
  
 <span data-ttu-id="6240b-2948">属性，如<xref:System.Type.AssemblyQualifiedName%2A>返回正确转义的字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-2948">Properties such as <xref:System.Type.AssemblyQualifiedName%2A> return correctly escaped strings.</span></span> <span data-ttu-id="6240b-2949">必须传递到的正确转义的字符串<xref:System.Type.GetType%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-2949">You must pass correctly escaped strings to the <xref:System.Type.GetType%2A> method.</span></span> <span data-ttu-id="6240b-2950">依次<xref:System.Type.GetType%2A>方法将传递到正确转义后的名称`typeResolver`和到默认类型解析方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-2950">In turn, the <xref:System.Type.GetType%2A> method passes correctly escaped names to `typeResolver` and to the default type resolution methods.</span></span> <span data-ttu-id="6240b-2951">如果需要进行比较将名称传递给中的非转义名称`typeResolver`，必须删除转义符。</span><span class="sxs-lookup"><span data-stu-id="6240b-2951">If you need to compare a name to an unescaped name in `typeResolver`, you must remove the escape characters.</span></span>  
  
 <span data-ttu-id="6240b-2952">返回到[用法说明](#usage_notes)。</span><span class="sxs-lookup"><span data-stu-id="6240b-2952">Back to [Usage Notes](#usage_notes).</span></span>  
  
<a name="mixed_name_resolution"></a>   
## <a name="mixed-name-resolution"></a><span data-ttu-id="6240b-2953">混合的名称解析</span><span class="sxs-lookup"><span data-stu-id="6240b-2953">Mixed Name Resolution</span></span>  
 <span data-ttu-id="6240b-2954">下表总结了之间的交互`assemblyResolver`， `typeResolver`，和类型名称和程序集名称中的所有组合的默认名称解析`typeName`:</span><span class="sxs-lookup"><span data-stu-id="6240b-2954">The following table summarizes the interactions between `assemblyResolver`, `typeResolver`, and default name resolution, for all combinations of type name and assembly name in `typeName`:</span></span>  
  
|<span data-ttu-id="6240b-2955">类型名称的内容</span><span class="sxs-lookup"><span data-stu-id="6240b-2955">Contents of type name</span></span>|<span data-ttu-id="6240b-2956">程序集冲突解决程序方法</span><span class="sxs-lookup"><span data-stu-id="6240b-2956">Assembly resolver method</span></span>|<span data-ttu-id="6240b-2957">类型解析程序方法</span><span class="sxs-lookup"><span data-stu-id="6240b-2957">Type resolver method</span></span>|<span data-ttu-id="6240b-2958">结果</span><span class="sxs-lookup"><span data-stu-id="6240b-2958">Result</span></span>|  
|---------------------------|------------------------------|--------------------------|------------|  
|<span data-ttu-id="6240b-2959">程序集类型</span><span class="sxs-lookup"><span data-stu-id="6240b-2959">type, assembly</span></span>|<span data-ttu-id="6240b-2960">null</span><span class="sxs-lookup"><span data-stu-id="6240b-2960">null</span></span>|<span data-ttu-id="6240b-2961">null</span><span class="sxs-lookup"><span data-stu-id="6240b-2961">null</span></span>|<span data-ttu-id="6240b-2962">等效于调用<xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>方法重载。</span><span class="sxs-lookup"><span data-stu-id="6240b-2962">Equivalent to calling the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> method overload.</span></span>|  
|<span data-ttu-id="6240b-2963">程序集类型</span><span class="sxs-lookup"><span data-stu-id="6240b-2963">type, assembly</span></span>|<span data-ttu-id="6240b-2964">提供</span><span class="sxs-lookup"><span data-stu-id="6240b-2964">provided</span></span>|<span data-ttu-id="6240b-2965">null</span><span class="sxs-lookup"><span data-stu-id="6240b-2965">null</span></span>|<span data-ttu-id="6240b-2966">`assemblyResolver` 返回程序集，则返回`null`如果无法解析程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-2966">`assemblyResolver` returns the assembly or returns `null` if it cannot resolve the assembly.</span></span> <span data-ttu-id="6240b-2967">如果程序集解析，<xref:System.Reflection.Assembly.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>方法重载用于从程序集加载该类型; 否则，将不会尝试解析的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2967">If the assembly is resolved, the <xref:System.Reflection.Assembly.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> method overload is used to load the type from the assembly; otherwise, there is no attempt to resolve the type.</span></span>|  
|<span data-ttu-id="6240b-2968">程序集类型</span><span class="sxs-lookup"><span data-stu-id="6240b-2968">type, assembly</span></span>|<span data-ttu-id="6240b-2969">null</span><span class="sxs-lookup"><span data-stu-id="6240b-2969">null</span></span>|<span data-ttu-id="6240b-2970">提供</span><span class="sxs-lookup"><span data-stu-id="6240b-2970">provided</span></span>|<span data-ttu-id="6240b-2971">等效于将转换到的程序集名称<xref:System.Reflection.AssemblyName>对象并调用<xref:System.Reflection.Assembly.Load%28System.Reflection.AssemblyName%29?displayProperty=nameWithType>方法重载来获取程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-2971">Equivalent to converting the assembly name to an <xref:System.Reflection.AssemblyName> object and calling the <xref:System.Reflection.Assembly.Load%28System.Reflection.AssemblyName%29?displayProperty=nameWithType> method overload to get the assembly.</span></span> <span data-ttu-id="6240b-2972">如果程序集解析，则将它传递到`typeResolver`; 否则为`typeResolver`不调用，并且没有任何进一步尝试解析类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2972">If the assembly is resolved, it is passed to `typeResolver`; otherwise, `typeResolver` is not called and there is no further attempt to resolve the type.</span></span>|  
|<span data-ttu-id="6240b-2973">程序集类型</span><span class="sxs-lookup"><span data-stu-id="6240b-2973">type, assembly</span></span>|<span data-ttu-id="6240b-2974">提供</span><span class="sxs-lookup"><span data-stu-id="6240b-2974">provided</span></span>|<span data-ttu-id="6240b-2975">提供</span><span class="sxs-lookup"><span data-stu-id="6240b-2975">provided</span></span>|<span data-ttu-id="6240b-2976">`assemblyResolver` 返回程序集，则返回`null`如果无法解析程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-2976">`assemblyResolver` returns the assembly or returns `null` if it cannot resolve the assembly.</span></span> <span data-ttu-id="6240b-2977">如果程序集解析，则将它传递到`typeResolver`; 否则为`typeResolver`不调用，并且没有任何进一步尝试解析类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2977">If the assembly is resolved, it is passed to `typeResolver`; otherwise, `typeResolver` is not called and there is no further attempt to resolve the type.</span></span>|  
|<span data-ttu-id="6240b-2978">类型</span><span class="sxs-lookup"><span data-stu-id="6240b-2978">type</span></span>|<span data-ttu-id="6240b-2979">null、 提供</span><span class="sxs-lookup"><span data-stu-id="6240b-2979">null, provided</span></span>|<span data-ttu-id="6240b-2980">null</span><span class="sxs-lookup"><span data-stu-id="6240b-2980">null</span></span>|<span data-ttu-id="6240b-2981">等效于调用<xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType>方法重载。</span><span class="sxs-lookup"><span data-stu-id="6240b-2981">Equivalent to calling the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="6240b-2982">由于未提供的程序集名称，将搜索只有 Mscorlib.dll 和当前正在执行的程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-2982">Because the assembly name is not provided, only Mscorlib.dll and the currently executing assembly are searched.</span></span> <span data-ttu-id="6240b-2983">如果`assemblyResolver`提供，它将被忽略。</span><span class="sxs-lookup"><span data-stu-id="6240b-2983">If `assemblyResolver` is provided, it is ignored.</span></span>|  
|<span data-ttu-id="6240b-2984">类型</span><span class="sxs-lookup"><span data-stu-id="6240b-2984">type</span></span>|<span data-ttu-id="6240b-2985">null、 提供</span><span class="sxs-lookup"><span data-stu-id="6240b-2985">null, provided</span></span>|<span data-ttu-id="6240b-2986">提供</span><span class="sxs-lookup"><span data-stu-id="6240b-2986">provided</span></span>|<span data-ttu-id="6240b-2987">`typeResolver` 调用时，和`null`传递的程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-2987">`typeResolver` is called, and `null` is passed for the assembly.</span></span> <span data-ttu-id="6240b-2988">`typeResolver` 可以从任何程序集，包括程序集加载为目的提供一种类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2988">`typeResolver` can provide a type from any assembly, including assemblies it loads for the purpose.</span></span> <span data-ttu-id="6240b-2989">如果`assemblyResolver`提供，它将被忽略。</span><span class="sxs-lookup"><span data-stu-id="6240b-2989">If `assemblyResolver` is provided, it is ignored.</span></span>|  
|<span data-ttu-id="6240b-2990">程序集</span><span class="sxs-lookup"><span data-stu-id="6240b-2990">assembly</span></span>|<span data-ttu-id="6240b-2991">null、 提供</span><span class="sxs-lookup"><span data-stu-id="6240b-2991">null, provided</span></span>|<span data-ttu-id="6240b-2992">null、 提供</span><span class="sxs-lookup"><span data-stu-id="6240b-2992">null, provided</span></span>|<span data-ttu-id="6240b-2993">一个<xref:System.IO.FileLoadException>引发，因为程序集名称会进行分析，就好像程序程序集限定类型名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2993">A <xref:System.IO.FileLoadException> is thrown, because the assembly name is parsed as if it were an assembly-qualified type name.</span></span> <span data-ttu-id="6240b-2994">这会导致无效的程序集名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-2994">This results in an invalid assembly name.</span></span>|  
  
 <span data-ttu-id="6240b-2995">返回到：[使用注意事项](#usage_notes)，[解析程序集](#resolving_assemblies)，[解析类型](#resolving_types)。</span><span class="sxs-lookup"><span data-stu-id="6240b-2995">Back to: [Usage Notes](#usage_notes), [Resolving Assemblies](#resolving_assemblies), [Resolving Types](#resolving_types).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-2996"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-2996"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="6240b-2997">调用了类初始值设定项，且该项引发了异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-2997">A class initializer is invoked and throws an exception.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="6240b-2998"><paramref name="throwOnError" /> 是 <see langword="true" />，且找不到该类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-2998"><paramref name="throwOnError" /> is <see langword="true" /> and the type is not found.</span></span>  
  
<span data-ttu-id="6240b-2999">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-2999">-or-</span></span> 
 <span data-ttu-id="6240b-3000"><paramref name="throwOnError" /> 的值为 <see langword="true" />，且 <paramref name="typeName" /> 包含无效字符，例如嵌入的制表符。</span><span class="sxs-lookup"><span data-stu-id="6240b-3000"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span></span> 
<span data-ttu-id="6240b-3001">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3001">-or-</span></span> 
 <span data-ttu-id="6240b-3002"><paramref name="throwOnError" /> 的值为 <see langword="true" />，且 <paramref name="typeName" /> 为空字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-3002"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span></span>  
  
<span data-ttu-id="6240b-3003">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3003">-or-</span></span> 
 <span data-ttu-id="6240b-3004"><paramref name="throwOnError" /> 的值为 <see langword="true" />，且 <paramref name="typeName" /> 表示大小无效的数组类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3004"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span></span>  
  
<span data-ttu-id="6240b-3005">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3005">-or-</span></span> 
 <span data-ttu-id="6240b-3006"><paramref name="typeName" /> 表示 <see cref="T:System.TypedReference" /> 的数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-3006"><paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-3007">当 <paramref name="typeName" /> 解析为类型名称和程序集名称时（例如，当简单类型名称包含未转义的特殊字符时），发生错误。</span><span class="sxs-lookup"><span data-stu-id="6240b-3007">An error occurs when <paramref name="typeName" /> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).</span></span>  
  
<span data-ttu-id="6240b-3008">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3008">-or-</span></span> 
 <span data-ttu-id="6240b-3009"><paramref name="throwOnError" /> 是 <see langword="true" />，且 <paramref name="typeName" /> 包含无效的语法（例如 "MyType[,\*,]"）。</span><span class="sxs-lookup"><span data-stu-id="6240b-3009"><paramref name="throwOnError" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax (for example, "MyType[,\*,]").</span></span>  
  
<span data-ttu-id="6240b-3010">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3010">-or-</span></span> 
 <span data-ttu-id="6240b-3011"><paramref name="typeName" /> 表示将指针类型、<see langword="ByRef" /> 类型或 <see cref="T:System.Void" /> 作为其类型参数之一的泛型类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3011"><paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span></span>  
  
<span data-ttu-id="6240b-3012">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3012">-or-</span></span> 
 <span data-ttu-id="6240b-3013"><paramref name="typeName" /> 表示具有错误的类型参数数目的泛型类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3013"><paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span></span>  
  
<span data-ttu-id="6240b-3014">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3014">-or-</span></span> 
 <span data-ttu-id="6240b-3015"><paramref name="typeName" /> 表示泛型类型，并且其类型参数之一不满足相应类型参数的约束。</span><span class="sxs-lookup"><span data-stu-id="6240b-3015"><paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="6240b-3016"><paramref name="throwOnError" /> 的值为 <see langword="true" />，且未找到程序集或程序集的某个依赖项。</span><span class="sxs-lookup"><span data-stu-id="6240b-3016"><paramref name="throwOnError" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="6240b-3017">找到了程序集或其依赖项之一，但无法加载它们。</span><span class="sxs-lookup"><span data-stu-id="6240b-3017">The assembly or one of its dependencies was found, but could not be loaded.</span></span>  
  
<span data-ttu-id="6240b-3018">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3018">-or-</span></span> 
 <span data-ttu-id="6240b-3019"><paramref name="typeName" /> 包含无效的程序集名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-3019"><paramref name="typeName" /> contains an invalid assembly name.</span></span>  
  
<span data-ttu-id="6240b-3020">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3020">-or-</span></span> 
 <span data-ttu-id="6240b-3021"><paramref name="typeName" /> 是一个有效的程序集名称，不包含类型名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-3021"><paramref name="typeName" /> is a valid assembly name without a type name.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="6240b-3022">程序集或其依赖项之一无效。</span><span class="sxs-lookup"><span data-stu-id="6240b-3022">The assembly or one of its dependencies is not valid.</span></span>  
  
<span data-ttu-id="6240b-3023">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3023">-or-</span></span> 
<span data-ttu-id="6240b-3024">此程序集使用高于当前所加载版本的公共语言运行时版本编译而成。</span><span class="sxs-lookup"><span data-stu-id="6240b-3024">The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeArray">
      <MemberSignature Language="C#" Value="public static Type[] GetTypeArray (object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type[] GetTypeArray(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeArray(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeArray (args As Object()) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;Type ^&gt; ^ GetTypeArray(cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member GetTypeArray : obj[] -&gt; Type[]" Usage="System.Type.GetTypeArray args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="args"><span data-ttu-id="6240b-3025">要确定其类型的对象数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-3025">An array of objects whose types to determine.</span></span></param>
        <summary><span data-ttu-id="6240b-3026">获取指定数组中对象的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3026">Gets the types of the objects in the specified array.</span></span></summary>
        <returns><span data-ttu-id="6240b-3027">表示 <see cref="T:System.Type" /> 中相应元素的类型的 <paramref name="args" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-3027">An array of <see cref="T:System.Type" /> objects representing the types of the corresponding elements in <paramref name="args" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6240b-3028">下面的代码示例演示如何使用<xref:System.Type.GetTypeArray%2A>方法来列出了数组的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3028">The following code example demonstrates how to use the <xref:System.Type.GetTypeArray%2A> method to list the types of the elements of an array.</span></span>  
  
 [!code-cpp[Type_GetTypeCode#3](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeCode/CPP/type_gettypecode.cpp#3)]
 [!code-csharp[Type_GetTypeCode#3](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeCode/CS/type_gettypecode.cs#3)]
 [!code-vb[Type_GetTypeCode#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeCode/VB/type_gettypecode.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-3029"><paramref name="args" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3029"><paramref name="args" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="6240b-3030">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3030">-or-</span></span> 
<span data-ttu-id="6240b-3031"><paramref name="args" /> 的其中一个或多个元素为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3031">One or more of the elements in <paramref name="args" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="6240b-3032">调用类初始值设定项，并且至少一个引发异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-3032">The class initializers are invoked and at least one throws an exception.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public static TypeCode GetTypeCode (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TypeCode GetTypeCode(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeCode(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TypeCode GetTypeCode(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member GetTypeCode : Type -&gt; TypeCode" Usage="System.Type.GetTypeCode type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="6240b-3033">要获取其基础代码的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3033">The type whose underlying type code to get.</span></span></param>
        <summary><span data-ttu-id="6240b-3034">获取指定 <see cref="T:System.Type" /> 的基础类型代码。</span><span class="sxs-lookup"><span data-stu-id="6240b-3034">Gets the underlying type code of the specified <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="6240b-3035">如果 <see cref="F:System.TypeCode.Empty" /> 为 <paramref name="type" />，则为基础类型代码或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3035">The code of the underlying type, or <see cref="F:System.TypeCode.Empty" /> if <paramref name="type" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3036">继承自<xref:System.Type>，可以通过重写来更改此方法的行为<xref:System.Type.GetTypeCodeImpl%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3036">When you inherit from <xref:System.Type>, you can change the behavior of this method by overriding the <xref:System.Type.GetTypeCodeImpl%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3037">下面的代码示例演示如何将<xref:System.TypeCode>枚举可用。</span><span class="sxs-lookup"><span data-stu-id="6240b-3037">The following code example demonstrates how the <xref:System.TypeCode> enumeration can be used.</span></span> <span data-ttu-id="6240b-3038">在决策块内中`WriteObjectInfo`方法，<xref:System.TypeCode>的<xref:System.Object>参数进行检查，并且相应的消息写入控制台。</span><span class="sxs-lookup"><span data-stu-id="6240b-3038">In a decision block inside the `WriteObjectInfo` method, the <xref:System.TypeCode> of an <xref:System.Object> parameter is examined, and an appropriate message is written to the console.</span></span>  
  
 [!code-cpp[System.TypeCode#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TypeCode/CPP/iconvertible.cpp#2)]
 [!code-csharp[System.TypeCode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TypeCode/CS/iconvertible.cs#2)]
 [!code-vb[System.TypeCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TypeCode/VB/iconvertible.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TypeCode" />
        <altmember cref="M:System.Type.GetTypeCodeImpl" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeCodeImpl">
      <MemberSignature Language="C#" Value="protected virtual TypeCode GetTypeCodeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.TypeCode GetTypeCodeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeCodeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTypeCodeImpl () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual TypeCode GetTypeCodeImpl();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCodeImpl : unit -&gt; TypeCode&#xA;override this.GetTypeCodeImpl : unit -&gt; TypeCode" Usage="type.GetTypeCodeImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-3039">返回此 <see cref="T:System.Type" /> 实例的基础类型代码。</span><span class="sxs-lookup"><span data-stu-id="6240b-3039">Returns the underlying type code of this <see cref="T:System.Type" /> instance.</span></span></summary>
        <returns><span data-ttu-id="6240b-3040">基础类型的类型代码。</span><span class="sxs-lookup"><span data-stu-id="6240b-3040">The type code of the underlying type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3041">此方法提供实现`static`（在 C# 中) 或`Shared`（在 Visual Basic)<xref:System.Type.GetTypeCode%28System.Type%29>方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3041">This method provides the implementation for the `static` (in C#) or `Shared` (in Visual Basic) <xref:System.Type.GetTypeCode%28System.Type%29> method.</span></span> <span data-ttu-id="6240b-3042">继承自<xref:System.Type>，可以重写此方法以提供您自己的实现的<xref:System.Type.GetTypeCode%2A>。</span><span class="sxs-lookup"><span data-stu-id="6240b-3042">When you inherit from <xref:System.Type>, you can override this method to provide your own implementation of <xref:System.Type.GetTypeCode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TypeCode" />
        <altmember cref="M:System.Type.GetTypeCode(System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTypeFromCLSID">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6240b-3043">获取与指定类标识符 (CLSID) 关联的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3043">Gets the type associated with the specified class identifier (CLSID).</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromCLSID : Guid -&gt; Type" Usage="System.Type.GetTypeFromCLSID clsid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="clsid"><span data-ttu-id="6240b-3044">要获取的类型的 CLSID。</span><span class="sxs-lookup"><span data-stu-id="6240b-3044">The CLSID of the type to get.</span></span></param>
        <summary><span data-ttu-id="6240b-3045">获取与指定类标识符 (CLSID) 关联的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3045">Gets the type associated with the specified class identifier (CLSID).</span></span></summary>
        <returns><span data-ttu-id="6240b-3046"><see langword="System.__ComObject" />，无论 CLSID 是否有效。</span><span class="sxs-lookup"><span data-stu-id="6240b-3046"><see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3047"><xref:System.Type.GetTypeFromCLSID%2A>方法支持后期绑定访问到非托管 COM 对象从.NET Framework 应用程序时知道该 COM 对象的类标识符 (CLSID)。</span><span class="sxs-lookup"><span data-stu-id="6240b-3047">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="6240b-3048">在注册表的 HKEY_CLASSES_ROOT\CLSID 项定义 COM 类的类标识符。</span><span class="sxs-lookup"><span data-stu-id="6240b-3048">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="6240b-3049">可以检索的值<xref:System.Type.IsCOMObject%2A>属性来确定此方法返回的类型是否为 COM 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-3049">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="6240b-3050">您可以调用<xref:System.Type.GetTypeFromProgID%2A>方法用于后期绑定访问 COM 对象您知道其编程标识符 (ProgID)。</span><span class="sxs-lookup"><span data-stu-id="6240b-3050">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="6240b-3051">实例化的 CLSID 从非托管的 COM 对象是一个两步过程：</span><span class="sxs-lookup"><span data-stu-id="6240b-3051">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="6240b-3052">获取<xref:System.Type>对象，表示`__ComObject`，通过调用对应于 CLSID<xref:System.Type.GetTypeFromCLSID%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3052">Get a <xref:System.Type> object that represents the`__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="6240b-3053">调用<xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType>方法可实例化 COM 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-3053">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
 <span data-ttu-id="6240b-3054">请参阅说明的示例。</span><span class="sxs-lookup"><span data-stu-id="6240b-3054">See the example for an illustration.</span></span>  
  
 <span data-ttu-id="6240b-3055"><xref:System.Type.GetTypeFromCLSID%28System.Guid%29>重载将忽略实例化时可能会发生任何异常<xref:System.Type>对象，基于`clsid`参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-3055">The <xref:System.Type.GetTypeFromCLSID%28System.Guid%29> overload ignores any exception that may occur when instantiating a <xref:System.Type> object based on the `clsid` argument.</span></span> <span data-ttu-id="6240b-3056">请注意，如果引发任何异常`clsid`在注册表中找不到。</span><span class="sxs-lookup"><span data-stu-id="6240b-3056">Note that no exception is thrown if `clsid` is not found in the registry.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3057">下面的示例使用 Microsoft Word 的 CLSID[应用程序对象](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word)来检索表示 Microsoft Word 应用程序的 COM 类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3057">The following example uses the CLSID of the Microsoft Word [Application object](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) to retrieve a COM type that represents the Microsoft Word application.</span></span> <span data-ttu-id="6240b-3058">然后通过调用实例类型<xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType>方法，并通过调用关闭[Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word)方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3058">It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) method.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid1.cs#1)]
 [!code-vb[System.Type.GetTypeFromCLSID#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="6240b-3059">此方法旨在用于使用 COM 对象，不与.NET Framework 对象时。</span><span class="sxs-lookup"><span data-stu-id="6240b-3059">This method is intended for use when working with COM objects, not with .NET Framework objects.</span></span> <span data-ttu-id="6240b-3060">所有托管对象，包括对 COM 可见 (即，其<see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" />属性是<see langword="true" />) 具有一个 GUID，返回的<see cref="P:System.Type.GUID" />属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3060">All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property.</span></span> <span data-ttu-id="6240b-3061">尽管该方法返回<see cref="T:System.Type" />对象，与 GUID 对应的.NET Framework 对象，则无法使用此<see cref="T:System.Type" />对象来创建类型实例通过调用<see cref="M:System.Activator.CreateInstance(System.Type)" />方法，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="6240b-3061">Although the method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for .NET Framework objects, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.</span></span>  
  
<span data-ttu-id="6240b-3062">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span><span class="sxs-lookup"><span data-stu-id="6240b-3062">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span></span> 
<span data-ttu-id="6240b-3063">相反，<see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" />应仅用于检索的非托管的 COM 对象，并生成 GUID<see cref="T:System.Type" />对象传递给<see cref="M:System.Activator.CreateInstance(System.Type)" />方法必须表示非托管的 COM 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-3063">Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromCLSID : Guid * bool -&gt; Type" Usage="System.Type.GetTypeFromCLSID (clsid, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="clsid"><span data-ttu-id="6240b-3064">要获取的类型的 CLSID。</span><span class="sxs-lookup"><span data-stu-id="6240b-3064">The CLSID of the type to get.</span></span></param>
        <param name="throwOnError"><span data-ttu-id="6240b-3065"><see langword="true" /> 将引发所发生的任何异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-3065"><see langword="true" /> to throw any exception that occurs.</span></span>  
  
<span data-ttu-id="6240b-3066">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3066">-or-</span></span> 
 <span data-ttu-id="6240b-3067"><see langword="false" /> 将忽略所发生的任何异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-3067"><see langword="false" /> to ignore any exception that occurs.</span></span></param>
        <summary><span data-ttu-id="6240b-3068">获取与指定类标识符 (CLSID) 关联的类型，指定在加载该类型时如果发生错误是否引发异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-3068">Gets the type associated with the specified class identifier (CLSID), specifying whether to throw an exception if an error occurs while loading the type.</span></span></summary>
        <returns><span data-ttu-id="6240b-3069"><see langword="System.__ComObject" />，无论 CLSID 是否有效。</span><span class="sxs-lookup"><span data-stu-id="6240b-3069"><see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3070"><xref:System.Type.GetTypeFromCLSID%2A>方法支持后期绑定访问到非托管 COM 对象从.NET Framework 应用程序时知道该 COM 对象的类标识符 (CLSID)。</span><span class="sxs-lookup"><span data-stu-id="6240b-3070">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="6240b-3071">在注册表的 HKEY_CLASSES_ROOT\CLSID 项定义 COM 类的类标识符。</span><span class="sxs-lookup"><span data-stu-id="6240b-3071">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="6240b-3072">可以检索的值<xref:System.Type.IsCOMObject%2A>属性来确定此方法返回的类型是否为 COM 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-3072">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="6240b-3073">您可以调用<xref:System.Type.GetTypeFromProgID%2A>方法用于后期绑定访问 COM 对象您知道其编程标识符 (ProgID)。</span><span class="sxs-lookup"><span data-stu-id="6240b-3073">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="6240b-3074">实例化的 CLSID 从非托管的 COM 对象是一个两步过程：</span><span class="sxs-lookup"><span data-stu-id="6240b-3074">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="6240b-3075">获取<xref:System.Type>对象，表示`__ComObject`，通过调用对应于 CLSID<xref:System.Type.GetTypeFromCLSID%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3075">Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="6240b-3076">调用<xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType>方法可实例化 COM 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-3076">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
 <span data-ttu-id="6240b-3077">请参阅说明的示例。</span><span class="sxs-lookup"><span data-stu-id="6240b-3077">See the example for an illustration.</span></span>  
  
 <span data-ttu-id="6240b-3078">如异常<xref:System.OutOfMemoryException>时指定，将引发`true`为`throwOnError`，但它不会为未注册的 Clsid。</span><span class="sxs-lookup"><span data-stu-id="6240b-3078">Exceptions such as <xref:System.OutOfMemoryException> will be thrown when specifying `true` for `throwOnError`, but it will not fail for unregistered CLSIDs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3079">下面的示例使用 Microsoft Word 的 CLSID[应用程序对象](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word)来检索表示 Microsoft Word 应用程序的 COM 类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3079">The following example uses the CLSID of the Microsoft Word [Application object](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) to retrieve a COM type that represents the Microsoft Word application.</span></span> <span data-ttu-id="6240b-3080">然后通过调用实例类型<xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType>方法，并通过调用关闭[Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word)方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3080">It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) method.</span></span> <span data-ttu-id="6240b-3081">出错时加载该类型时，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-3081">An exception is thrown if an error occurs while loading the type.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid_ex2.cs#2)]
 [!code-vb[System.Type.GetTypeFromCLSID#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid_ex2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="6240b-3082">此方法旨在用于使用 COM 对象，不与.NET Framework 对象时。</span><span class="sxs-lookup"><span data-stu-id="6240b-3082">This method is intended for use when working with COM objects, not with .NET Framework objects.</span></span> <span data-ttu-id="6240b-3083">所有托管对象，包括对 COM 可见 (即，其<see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" />属性是<see langword="true" />) 具有一个 GUID，返回的<see cref="P:System.Type.GUID" />属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3083">All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property.</span></span> <span data-ttu-id="6240b-3084">尽管该方法返回<see cref="T:System.Type" />对象，与 GUID 对应的.NET Framework 对象，则无法使用此<see cref="T:System.Type" />对象来创建类型实例通过调用<see cref="M:System.Activator.CreateInstance(System.Type)" />方法，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="6240b-3084">Although the method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for .NET Framework objects, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.</span></span>  
  
<span data-ttu-id="6240b-3085">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span><span class="sxs-lookup"><span data-stu-id="6240b-3085">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span></span> 
<span data-ttu-id="6240b-3086">相反，<see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" />应仅用于检索的非托管的 COM 对象，并生成 GUID<see cref="T:System.Type" />对象传递给<see cref="M:System.Activator.CreateInstance(System.Type)" />方法必须表示非托管的 COM 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-3086">Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid, string server);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid, string server) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid, server As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid, System::String ^ server);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromCLSID : Guid * string -&gt; Type" Usage="System.Type.GetTypeFromCLSID (clsid, server)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
        <Parameter Name="server" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="clsid"><span data-ttu-id="6240b-3087">要获取的类型的 CLSID。</span><span class="sxs-lookup"><span data-stu-id="6240b-3087">The CLSID of the type to get.</span></span></param>
        <param name="server"><span data-ttu-id="6240b-3088">用于从中加载该类型的服务器。</span><span class="sxs-lookup"><span data-stu-id="6240b-3088">The server from which to load the type.</span></span> <span data-ttu-id="6240b-3089">如果服务器名称为 <see langword="null" />，则此方法会自动恢复到本地计算机上。</span><span class="sxs-lookup"><span data-stu-id="6240b-3089">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span></span></param>
        <summary><span data-ttu-id="6240b-3090">从指定服务器获取与指定类标识符 (CLSID) 关联的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3090">Gets the type associated with the specified class identifier (CLSID) from the specified server.</span></span></summary>
        <returns><span data-ttu-id="6240b-3091"><see langword="System.__ComObject" />，无论 CLSID 是否有效。</span><span class="sxs-lookup"><span data-stu-id="6240b-3091"><see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3092"><xref:System.Type.GetTypeFromCLSID%2A>方法支持后期绑定访问到非托管 COM 对象从.NET Framework 应用程序时知道该 COM 对象的类标识符 (CLSID)。</span><span class="sxs-lookup"><span data-stu-id="6240b-3092">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="6240b-3093">在注册表的 HKEY_CLASSES_ROOT\CLSID 项定义 COM 类的类标识符。</span><span class="sxs-lookup"><span data-stu-id="6240b-3093">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="6240b-3094">可以检索的值<xref:System.Type.IsCOMObject%2A>属性来确定此方法返回的类型是否为 COM 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-3094">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="6240b-3095">您可以调用<xref:System.Type.GetTypeFromProgID%2A>方法用于后期绑定访问 COM 对象您知道其编程标识符 (ProgID)。</span><span class="sxs-lookup"><span data-stu-id="6240b-3095">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="6240b-3096">实例化的 CLSID 从非托管的 COM 对象是一个两步过程：</span><span class="sxs-lookup"><span data-stu-id="6240b-3096">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="6240b-3097">获取<xref:System.Type>对象，表示`__ComObject`，通过调用对应于 CLSID<xref:System.Type.GetTypeFromCLSID%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3097">Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="6240b-3098">调用<xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType>方法可实例化 COM 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-3098">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3099">下面的示例使用 Microsoft Word 的 CLSID[应用程序对象](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word)来检索表示名为 computer17.central.contoso.com 的服务器提供的 Microsoft Word 应用程序的 COM 类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3099">The following example uses the CLSID of the Microsoft Word [Application object](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) to retrieve a COM type that represents the Microsoft Word application from a server named computer17.central.contoso.com.</span></span> <span data-ttu-id="6240b-3100">然后通过调用实例类型<xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType>方法，并通过调用关闭[Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word)方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3100">It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) method.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid_ex3.cs#3)]
 [!code-vb[System.Type.GetTypeFromCLSID#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid_ex3.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="6240b-3101">此方法旨在用于使用 COM 对象，不与.NET Framework 对象时。</span><span class="sxs-lookup"><span data-stu-id="6240b-3101">This method is intended for use when working with COM objects, not with .NET Framework objects.</span></span> <span data-ttu-id="6240b-3102">所有托管对象，包括对 COM 可见 (即，其<see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" />属性是<see langword="true" />) 具有一个 GUID，返回的<see cref="P:System.Type.GUID" />属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3102">All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property.</span></span> <span data-ttu-id="6240b-3103">尽管该方法返回<see cref="T:System.Type" />对象，与 GUID 对应的.NET Framework 对象，则无法使用此<see cref="T:System.Type" />对象来创建类型实例通过调用<see cref="M:System.Activator.CreateInstance(System.Type)" />方法，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="6240b-3103">Although the method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for .NET Framework objects, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.</span></span>  
  
<span data-ttu-id="6240b-3104">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span><span class="sxs-lookup"><span data-stu-id="6240b-3104">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span></span> 
<span data-ttu-id="6240b-3105">相反，<see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" />应仅用于检索的非托管的 COM 对象，并生成 GUID<see cref="T:System.Type" />对象传递给<see cref="M:System.Activator.CreateInstance(System.Type)" />方法必须表示非托管的 COM 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-3105">Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid, string server, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid, string server, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromCLSID (clsid As Guid, server As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromCLSID(Guid clsid, System::String ^ server, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromCLSID : Guid * string * bool -&gt; Type" Usage="System.Type.GetTypeFromCLSID (clsid, server, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
        <Parameter Name="server" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="clsid"><span data-ttu-id="6240b-3106">要获取的类型的 CLSID。</span><span class="sxs-lookup"><span data-stu-id="6240b-3106">The CLSID of the type to get.</span></span></param>
        <param name="server"><span data-ttu-id="6240b-3107">用于从中加载该类型的服务器。</span><span class="sxs-lookup"><span data-stu-id="6240b-3107">The server from which to load the type.</span></span> <span data-ttu-id="6240b-3108">如果服务器名称为 <see langword="null" />，则此方法会自动恢复到本地计算机上。</span><span class="sxs-lookup"><span data-stu-id="6240b-3108">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span></span></param>
        <param name="throwOnError"><span data-ttu-id="6240b-3109"><see langword="true" /> 将引发所发生的任何异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-3109"><see langword="true" /> to throw any exception that occurs.</span></span>  
  
<span data-ttu-id="6240b-3110">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3110">-or-</span></span> 
 <span data-ttu-id="6240b-3111"><see langword="false" /> 将忽略所发生的任何异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-3111"><see langword="false" /> to ignore any exception that occurs.</span></span></param>
        <summary><span data-ttu-id="6240b-3112">从指定服务器获取与指定类标识符 (CLSID) 关联的类型，指定在加载该类型时如果发生错误是否引发异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-3112">Gets the type associated with the specified class identifier (CLSID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.</span></span></summary>
        <returns><span data-ttu-id="6240b-3113"><see langword="System.__ComObject" />，无论 CLSID 是否有效。</span><span class="sxs-lookup"><span data-stu-id="6240b-3113"><see langword="System.__ComObject" /> regardless of whether the CLSID is valid.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3114"><xref:System.Type.GetTypeFromCLSID%2A>方法支持后期绑定访问到非托管 COM 对象从.NET Framework 应用程序时知道该 COM 对象的类标识符 (CLSID)。</span><span class="sxs-lookup"><span data-stu-id="6240b-3114">The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).</span></span>  <span data-ttu-id="6240b-3115">在注册表的 HKEY_CLASSES_ROOT\CLSID 项定义 COM 类的类标识符。</span><span class="sxs-lookup"><span data-stu-id="6240b-3115">The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\CLSID key of the registry.</span></span> <span data-ttu-id="6240b-3116">可以检索的值<xref:System.Type.IsCOMObject%2A>属性来确定此方法返回的类型是否为 COM 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-3116">You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="6240b-3117">您可以调用<xref:System.Type.GetTypeFromProgID%2A>方法用于后期绑定访问 COM 对象您知道其编程标识符 (ProgID)。</span><span class="sxs-lookup"><span data-stu-id="6240b-3117">You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.</span></span>  
  
 <span data-ttu-id="6240b-3118">实例化的 CLSID 从非托管的 COM 对象是一个两步过程：</span><span class="sxs-lookup"><span data-stu-id="6240b-3118">Instantiating an unmanaged COM object from its CLSID is a two-step process:</span></span>  
  
1.  <span data-ttu-id="6240b-3119">获取<xref:System.Type>对象，表示`__ComObject`，通过调用对应于 CLSID<xref:System.Type.GetTypeFromCLSID%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3119">Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.</span></span>  
  
2.  <span data-ttu-id="6240b-3120">调用<xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType>方法可实例化 COM 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-3120">Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=nameWithType> method to instantiate the COM object.</span></span>  
  
 <span data-ttu-id="6240b-3121">如异常<xref:System.OutOfMemoryException>时指定，将引发`true`为`throwOnError`，但它不会为未注册的 Clsid。</span><span class="sxs-lookup"><span data-stu-id="6240b-3121">Exceptions such as <xref:System.OutOfMemoryException> will be thrown when specifying `true` for `throwOnError`, but it will not fail for unregistered CLSIDs.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3122">下面的示例使用 Microsoft Word 的 CLSID[应用程序对象](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word)来检索表示名为 computer17.central.contoso.com 的服务器提供的 Microsoft Word 应用程序的 COM 类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3122">The following example uses the CLSID of the Microsoft Word [Application object](https://msdn.microsoft.com/vba/word-vba/articles/application-object-word) to retrieve a COM type that represents the Microsoft Word application from a server named computer17.central.contoso.com.</span></span> <span data-ttu-id="6240b-3123">然后通过调用实例类型<xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType>方法，并通过调用关闭[Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word)方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3123">It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method, and closes it by calling the [Application.Quit](https://msdn.microsoft.com/VBA/Word-VBA/articles/application-quit-method-word) method.</span></span> <span data-ttu-id="6240b-3124">出错时加载该类型时，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-3124">An exception is thrown if an error occurs while loading the type.</span></span>  
  
 [!code-csharp[System.Type.GetTypeFromCLSID#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid_ex4.cs#4)]
 [!code-vb[System.Type.GetTypeFromCLSID#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid_ex4.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="6240b-3125">此方法旨在用于使用 COM 对象，不与.NET Framework 对象时。</span><span class="sxs-lookup"><span data-stu-id="6240b-3125">This method is intended for use when working with COM objects, not with .NET Framework objects.</span></span> <span data-ttu-id="6240b-3126">所有托管对象，包括对 COM 可见 (即，其<see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" />属性是<see langword="true" />) 具有一个 GUID，返回的<see cref="P:System.Type.GUID" />属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3126">All managed objects, including those that are visible to COM (that is, their <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> attribute is <see langword="true" />) have a GUID that is returned by the <see cref="P:System.Type.GUID" /> property.</span></span> <span data-ttu-id="6240b-3127">尽管<see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" />方法将返回<see cref="T:System.Type" />对应于特定的托管对象的 GUID 对象，则无法使用此<see cref="T:System.Type" />对象来创建类型实例通过调用<see cref="M:System.Activator.CreateInstance(System.Type)" />方法，如下面的示例显示。</span><span class="sxs-lookup"><span data-stu-id="6240b-3127">Although the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> method returns a <see cref="T:System.Type" /> object that corresponds to the GUID for a particular managed object, you can't use that <see cref="T:System.Type" /> object to create a type instance by calling the  <see cref="M:System.Activator.CreateInstance(System.Type)" /> method, as the following example shows.</span></span>  
  
<span data-ttu-id="6240b-3128">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span><span class="sxs-lookup"><span data-stu-id="6240b-3128">[!code-csharp[System.Type.GetTypeFromCLSID#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid11.cs#11)] [!code-vb[System.Type.GetTypeFromCLSID#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid11.vb#11)]</span></span> 
<span data-ttu-id="6240b-3129">相反，<see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" />应仅用于检索的非托管的 COM 对象，并生成 GUID<see cref="T:System.Type" />对象传递给<see cref="M:System.Activator.CreateInstance(System.Type)" />方法必须表示非托管的 COM 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-3129">Instead, the <see cref="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)" /> should only be used to retrieve the GUID of an unmanaged COM object, and the resulting <see cref="T:System.Type" /> object that is passed to the <see cref="M:System.Activator.CreateInstance(System.Type)" /> method must represent an unmanaged COM object.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromHandle">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromHandle (RuntimeTypeHandle handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromHandle(valuetype System.RuntimeTypeHandle handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromHandle (handle As RuntimeTypeHandle) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromHandle(RuntimeTypeHandle handle);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromHandle : RuntimeTypeHandle -&gt; Type" Usage="System.Type.GetTypeFromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.RuntimeTypeHandle" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="6240b-3130">引用类型的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-3130">The object that refers to the type.</span></span></param>
        <summary><span data-ttu-id="6240b-3131">获取由指定类型句柄引用的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3131">Gets the type referenced by the specified type handle.</span></span></summary>
        <returns><span data-ttu-id="6240b-3132">如果 <see cref="T:System.RuntimeTypeHandle" /> 的 <see langword="null" /> 属性为 <see cref="P:System.RuntimeTypeHandle.Value" />，则为由指定的 <paramref name="handle" /> 引用的类型，或者为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3132">The type referenced by the specified <see cref="T:System.RuntimeTypeHandle" />, or <see langword="null" /> if the <see cref="P:System.RuntimeTypeHandle.Value" /> property of <paramref name="handle" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3133">句柄仅在获取它们的应用程序域中都有效。</span><span class="sxs-lookup"><span data-stu-id="6240b-3133">The handles are valid only in the application domain in which they were obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3134">下面的示例使用<xref:System.Type.GetTypeFromHandle%2A>方法以获取<xref:System.Type>对象从<xref:System.RuntimeTypeHandle>提供的<xref:System.Type.GetTypeHandle%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3134">The following example uses the <xref:System.Type.GetTypeFromHandle%2A> method to get a <xref:System.Type> object from a <xref:System.RuntimeTypeHandle> provided by the <xref:System.Type.GetTypeHandle%2A> method.</span></span>  
  
 [!code-cpp[Type_GetTypeFromHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromHandle/CPP/type_gettypefromhandle.cpp#1)]
 [!code-csharp[Type_GetTypeFromHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromHandle/CS/type_gettypefromhandle.cs#1)]
 [!code-vb[Type_GetTypeFromHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromHandle/VB/type_gettypefromhandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="6240b-3135">调用了类初始值设定项，且该项引发了异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-3135">A class initializer is invoked and throws an exception.</span></span></exception>
        <altmember cref="T:System.RuntimeTypeHandle" />
        <altmember cref="P:System.Type.TypeHandle" />
        <altmember cref="M:System.Type.GetTypeHandle(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTypeFromProgID">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6240b-3136">获取与指定程序标识符 (ProgID) 关联的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3136">Gets the type associated with the specified program identifier (ProgID).</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromProgID : string -&gt; Type" Usage="System.Type.GetTypeFromProgID progID" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="progID"><span data-ttu-id="6240b-3137">要获取的类型的 ProgID。</span><span class="sxs-lookup"><span data-stu-id="6240b-3137">The ProgID of the type to get.</span></span></param>
        <summary><span data-ttu-id="6240b-3138">获取与指定程序标识符 (ProgID) 关联的类型，如果在加载 <see cref="T:System.Type" /> 时遇到错误，则返回空值。</span><span class="sxs-lookup"><span data-stu-id="6240b-3138">Gets the type associated with the specified program identifier (ProgID), returning null if an error is encountered while loading the <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="6240b-3139">如果 <paramref name="progID" /> 是注册表中的有效项，并且有与之关联的类型，则为与指定 ProgID 关联的类型；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3139">The type associated with the specified ProgID, if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3140">提供此方法用于 COM 支持。</span><span class="sxs-lookup"><span data-stu-id="6240b-3140">This method is provided for COM support.</span></span> <span data-ttu-id="6240b-3141">因为它们已取代命名空间的概念，Progid 不会使用 Microsoft.NET Framework 中。</span><span class="sxs-lookup"><span data-stu-id="6240b-3141">ProgIDs are not used in the Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-3142"><paramref name="progID" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3142"><paramref name="progID" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="6240b-3143">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="6240b-3143">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="6240b-3144">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-3144">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromProgID : string * bool -&gt; Type" Usage="System.Type.GetTypeFromProgID (progID, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="progID"><span data-ttu-id="6240b-3145">要获取的类型的 ProgID。</span><span class="sxs-lookup"><span data-stu-id="6240b-3145">The ProgID of the type to get.</span></span></param>
        <param name="throwOnError"><span data-ttu-id="6240b-3146"><see langword="true" /> 将引发所发生的任何异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-3146"><see langword="true" /> to throw any exception that occurs.</span></span>  
  
<span data-ttu-id="6240b-3147">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3147">-or-</span></span> 
 <span data-ttu-id="6240b-3148"><see langword="false" /> 将忽略所发生的任何异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-3148"><see langword="false" /> to ignore any exception that occurs.</span></span></param>
        <summary><span data-ttu-id="6240b-3149">获取与指定程序标识符 (ProgID) 关联的类型，指定如果在加载该类型时发生错误是否引发异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-3149">Gets the type associated with the specified program identifier (ProgID), specifying whether to throw an exception if an error occurs while loading the type.</span></span></summary>
        <returns><span data-ttu-id="6240b-3150">如果 <paramref name="progID" /> 是注册表中的有效项且有与之关联的类型，则为与指定程序标识符 (ProgID) 关联的类型；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3150">The type associated with the specified program identifier (ProgID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3151">提供此方法用于 COM 支持。</span><span class="sxs-lookup"><span data-stu-id="6240b-3151">This method is provided for COM support.</span></span> <span data-ttu-id="6240b-3152">因为它们已取代命名空间的概念，程序 Id 不会使用 Microsoft.NET Framework 中。</span><span class="sxs-lookup"><span data-stu-id="6240b-3152">Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3153">下面的示例检索通过传递进程 Id，指定是否引发异常，如果 ProgID 为无效的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3153">The following example retrieves a type by passing a ProgID, specifying whether to throw an exception if the ProgID is invalid.</span></span> <span data-ttu-id="6240b-3154">然后，该示例显示 ClassID 相关的 progid，以及任何适用的异常消息。</span><span class="sxs-lookup"><span data-stu-id="6240b-3154">The example then displays the ClassID related to the ProgID, along with any applicable exception message.</span></span>  
  
 [!code-cpp[Type_GetTypeFromProgID2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromProgID2/CPP/type_gettypefromprogid2.cpp#1)]
 [!code-csharp[Type_GetTypeFromProgID2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID2/CS/type_gettypefromprogid2.cs#1)]
 [!code-vb[Type_GetTypeFromProgID2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromProgID2/VB/type_gettypefromprogid2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-3155"><paramref name="progID" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3155"><paramref name="progID" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.COMException"><span data-ttu-id="6240b-3156">未注册指定的 ProgID。</span><span class="sxs-lookup"><span data-stu-id="6240b-3156">The specified ProgID is not registered.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="6240b-3157">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="6240b-3157">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="6240b-3158">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-3158">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID, string server);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID, string server) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String, server As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID, System::String ^ server);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromProgID : string * string -&gt; Type" Usage="System.Type.GetTypeFromProgID (progID, server)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
        <Parameter Name="server" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="progID"><span data-ttu-id="6240b-3159">要获取的类型的 ProgID。</span><span class="sxs-lookup"><span data-stu-id="6240b-3159">The progID of the type to get.</span></span></param>
        <param name="server"><span data-ttu-id="6240b-3160">用于从中加载该类型的服务器。</span><span class="sxs-lookup"><span data-stu-id="6240b-3160">The server from which to load the type.</span></span> <span data-ttu-id="6240b-3161">如果服务器名称为 <see langword="null" />，则此方法会自动恢复到本地计算机上。</span><span class="sxs-lookup"><span data-stu-id="6240b-3161">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span></span></param>
        <summary><span data-ttu-id="6240b-3162">从指定服务器获取与指定程序标识符 (progID) 关联的类型，如果在加载该类型时遇到错误则返回空值。</span><span class="sxs-lookup"><span data-stu-id="6240b-3162">Gets the type associated with the specified program identifier (progID) from the specified server, returning null if an error is encountered while loading the type.</span></span></summary>
        <returns><span data-ttu-id="6240b-3163">如果 <paramref name="progID" /> 是注册表中的有效项且有与之关联的类型，则为与指定程序标识符 (ProgID) 关联的类型；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3163">The type associated with the specified program identifier (progID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3164">提供此方法用于 COM 支持。</span><span class="sxs-lookup"><span data-stu-id="6240b-3164">This method is provided for COM support.</span></span> <span data-ttu-id="6240b-3165">因为它们已取代命名空间的概念，程序 Id 不会使用 Microsoft.NET Framework 中。</span><span class="sxs-lookup"><span data-stu-id="6240b-3165">Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3166">下面的示例检索并传递 ProgID 和服务器名称的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3166">The following example retrieves a type by passing a ProgID and server name.</span></span> <span data-ttu-id="6240b-3167">该示例然后显示相关的 progid，ClassID 或 ProgID 或服务器名称无效时引发异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-3167">The example then displays the ClassID related to the ProgID, or throws an exception if the ProgID or the server name is invalid.</span></span>  
  
 [!code-cpp[Type_GetTypeFromProgID3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromProgID3/CPP/Type_GetTypeFromProgID3.cpp#1)]
 [!code-csharp[Type_GetTypeFromProgID3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID3/CS/type_gettypefromprogid3.cs#1)]
 [!code-vb[Type_GetTypeFromProgID3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromProgID3/VB/type_gettypefromprogid3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-3168"><paramref name="prodID" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3168"><paramref name="prodID" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="6240b-3169">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="6240b-3169">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="6240b-3170">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-3170">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromProgID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromProgID (string progID, string server, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromProgID(string progID, string server, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeFromProgID(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeFromProgID (progID As String, server As String, throwOnError As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetTypeFromProgID(System::String ^ progID, System::String ^ server, bool throwOnError);" />
      <MemberSignature Language="F#" Value="static member GetTypeFromProgID : string * string * bool -&gt; Type" Usage="System.Type.GetTypeFromProgID (progID, server, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
        <Parameter Name="server" Type="System.String" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="progID"><span data-ttu-id="6240b-3171">要获取的 <see cref="T:System.Type" /> 的 progID。</span><span class="sxs-lookup"><span data-stu-id="6240b-3171">The progID of the <see cref="T:System.Type" /> to get.</span></span></param>
        <param name="server"><span data-ttu-id="6240b-3172">用于从中加载该类型的服务器。</span><span class="sxs-lookup"><span data-stu-id="6240b-3172">The server from which to load the type.</span></span> <span data-ttu-id="6240b-3173">如果服务器名称为 <see langword="null" />，则此方法会自动恢复到本地计算机上。</span><span class="sxs-lookup"><span data-stu-id="6240b-3173">If the server name is <see langword="null" />, this method automatically reverts to the local machine.</span></span></param>
        <param name="throwOnError"><span data-ttu-id="6240b-3174"><see langword="true" /> 将引发所发生的任何异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-3174"><see langword="true" /> to throw any exception that occurs.</span></span>  
  
<span data-ttu-id="6240b-3175">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3175">-or-</span></span> 
 <span data-ttu-id="6240b-3176"><see langword="false" /> 将忽略所发生的任何异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-3176"><see langword="false" /> to ignore any exception that occurs.</span></span></param>
        <summary><span data-ttu-id="6240b-3177">从指定服务器获取与指定程序标识符 (progID) 关联的类型，指定如果在加载该类型时发生错误是否引发异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-3177">Gets the type associated with the specified program identifier (progID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.</span></span></summary>
        <returns><span data-ttu-id="6240b-3178">如果 <paramref name="progID" /> 是注册表中的有效项且有与之关联的类型，则为与指定程序标识符 (ProgID) 关联的类型；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3178">The type associated with the specified program identifier (progID), if <paramref name="progID" /> is a valid entry in the registry and a type is associated with it; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3179">提供此方法用于 COM 支持。</span><span class="sxs-lookup"><span data-stu-id="6240b-3179">This method is provided for COM support.</span></span> <span data-ttu-id="6240b-3180">因为它们已取代命名空间的概念，程序 Id 不会使用 Microsoft.NET Framework 中。</span><span class="sxs-lookup"><span data-stu-id="6240b-3180">Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3181">下面的示例检索并传递 ProgID 和服务器名称的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3181">The following example retrieves a type by passing a ProgID and server name.</span></span> <span data-ttu-id="6240b-3182">然后，该示例显示 ClassID 相关的 progid，指定是否引发异常，如果 ProgID 或服务器名称无效。</span><span class="sxs-lookup"><span data-stu-id="6240b-3182">The example then displays the ClassID related to the ProgID, specifying whether to throw an exception if the ProgID or the server name is invalid.</span></span>  
  
 [!code-cpp[Type_GetTypeFromProgID4#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromProgID4/CPP/Type_GetTypeFromProgID4.cpp#1)]
 [!code-csharp[Type_GetTypeFromProgID4#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID4/CS/type_gettypefromprogid4.cs#1)]
 [!code-vb[Type_GetTypeFromProgID4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromProgID4/VB/type_gettypefromprogid4.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-3183"><paramref name="progID" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3183"><paramref name="progID" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.COMException"><span data-ttu-id="6240b-3184">未注册指定的 progID。</span><span class="sxs-lookup"><span data-stu-id="6240b-3184">The specified progID is not registered.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="6240b-3185">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="6240b-3185">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="6240b-3186">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-3186">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.GetProgIdForType(System.Type)" />
        <altmember cref="T:System.TypeLoadException" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeHandle">
      <MemberSignature Language="C#" Value="public static RuntimeTypeHandle GetTypeHandle (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.RuntimeTypeHandle GetTypeHandle(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.GetTypeHandle(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTypeHandle (o As Object) As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static RuntimeTypeHandle GetTypeHandle(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="static member GetTypeHandle : obj -&gt; RuntimeTypeHandle" Usage="System.Type.GetTypeHandle o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="6240b-3187">要获取类型句柄的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-3187">The object for which to get the type handle.</span></span></param>
        <summary><span data-ttu-id="6240b-3188">获取指定对象的 <see cref="T:System.Type" /> 的句柄。</span><span class="sxs-lookup"><span data-stu-id="6240b-3188">Gets the handle for the <see cref="T:System.Type" /> of a specified object.</span></span></summary>
        <returns><span data-ttu-id="6240b-3189">指定 <see cref="T:System.Type" /> 的 <see cref="T:System.Object" /> 的句柄。</span><span class="sxs-lookup"><span data-stu-id="6240b-3189">The handle for the <see cref="T:System.Type" /> of the specified <see cref="T:System.Object" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3190">句柄仅在获取它们的应用程序域中都有效。</span><span class="sxs-lookup"><span data-stu-id="6240b-3190">The handles are valid only in the application domain in which they were obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3191">下面的示例定义了类`MyClass1`，获取它的实例并检索该对象的运行时句柄。</span><span class="sxs-lookup"><span data-stu-id="6240b-3191">The following example defines the class `MyClass1`, gets an instance of it, and retrieves the runtime handle of the object.</span></span>  
  
 [!code-cpp[Type_GetTypeHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeHandle/CPP/Type_GetTypeHandle.cpp#1)]
 [!code-csharp[Type_GetTypeHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeHandle/CS/type_gettypehandle.cs#1)]
 [!code-vb[Type_GetTypeHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeHandle/VB/type_gettypehandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-3192"><paramref name="o" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3192"><paramref name="o" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.RuntimeTypeHandle" />
        <altmember cref="P:System.Type.TypeHandle" />
        <altmember cref="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)" />
      </Docs>
    </Member>
    <Member MemberName="GUID">
      <MemberSignature Language="C#" Value="public abstract Guid GUID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid GUID" />
      <MemberSignature Language="DocId" Value="P:System.Type.GUID" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property GUID As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Guid GUID { Guid get(); };" />
      <MemberSignature Language="F#" Value="member this.GUID : Guid" Usage="System.Type.GUID" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.GUID</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3193">获取与 <see cref="T:System.Type" /> 关联的 GUID。</span><span class="sxs-lookup"><span data-stu-id="6240b-3193">Gets the GUID associated with the <see cref="T:System.Type" />.</span></span></summary>
        <value><span data-ttu-id="6240b-3194">获取与 <see cref="T:System.Type" /> 关联的 GUID。</span><span class="sxs-lookup"><span data-stu-id="6240b-3194">The GUID associated with the <see cref="T:System.Type" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3195">GUID 是与类型使用相关联<xref:System.Runtime.InteropServices.GuidAttribute>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3195">A GUID is associated with a type using the <xref:System.Runtime.InteropServices.GuidAttribute> attribute.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3196">下面的示例创建该类`MyClass1`具有公共方法，创建`Type`对象对应于`MyClass1`，并获取<xref:System.Guid>结构使用`GUID`属性`Type`类。</span><span class="sxs-lookup"><span data-stu-id="6240b-3196">The following example creates the class `MyClass1` with a public method, creates a `Type` object corresponding to `MyClass1`, and gets the <xref:System.Guid> structure using the `GUID` property of the `Type` class.</span></span>  
  
 [!code-cpp[Type_Guid#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_Guid/CPP/type_guid.cpp#1)]
 [!code-csharp[Type_Guid#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_Guid/CS/type_guid.cs#1)]
 [!code-vb[Type_Guid#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_Guid/VB/type_guid.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Guid" />
      </Docs>
    </Member>
    <Member MemberName="HasElementType">
      <MemberSignature Language="C#" Value="public bool HasElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasElementType" />
      <MemberSignature Language="DocId" Value="P:System.Type.HasElementType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasElementType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasElementType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasElementType : bool" Usage="System.Type.HasElementType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.HasElementType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3197">获取一个值，通过该值指示当前 <see cref="T:System.Type" /> 是包含还是引用另一类型，即当前 <see cref="T:System.Type" /> 是数组、指针还是通过引用传递。</span><span class="sxs-lookup"><span data-stu-id="6240b-3197">Gets a value indicating whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference.</span></span></summary>
        <value><span data-ttu-id="6240b-3198">如果 <see langword="true" /> 为数组、指针或按引用传递，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3198"><see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3199">例如，Type.GetType("Int32[]")。HasElementType 返回`true`，但 Type.GetType("Int32")。HasElementType 返回`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3199">For example, Type.GetType("Int32[]").HasElementType returns `true`, but Type.GetType("Int32").HasElementType returns `false`.</span></span> <span data-ttu-id="6240b-3200">HasElementType 也会返回`true`为"Int32 \*"和"Int32 （& a)"。</span><span class="sxs-lookup"><span data-stu-id="6240b-3200">HasElementType also returns `true` for "Int32\*" and "Int32&".</span></span>  
  
 <span data-ttu-id="6240b-3201">如果当前<xref:System.Type>表示泛型类型或类型参数的泛型类型或泛型方法定义中此属性始终返回`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3201">If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3202">下面的示例返回`true`或`false`具体取决于该对象是否是数组、 引用类型或指针。</span><span class="sxs-lookup"><span data-stu-id="6240b-3202">The following example returns `true` or `false` depending on whether or not the object is an array, a reference type, or a pointer.</span></span>  
  
 [!code-cpp[Type_HasElementType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementType/CPP/type_haselementtype.cpp#1)]
 [!code-csharp[Type_HasElementType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementType/CS/type_haselementtype.cs#1)]
 [!code-vb[Type_HasElementType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementType/VB/type_haselementtype.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.HasElementTypeImpl" />
        <altmember cref="P:System.Type.IsArray" />
        <altmember cref="P:System.Type.IsPointer" />
        <altmember cref="P:System.Type.IsByRef" />
        <altmember cref="M:System.Type.GetElementType" />
        <altmember cref="M:System.Type.GetType" />
      </Docs>
    </Member>
    <Member MemberName="HasElementTypeImpl">
      <MemberSignature Language="C#" Value="protected abstract bool HasElementTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool HasElementTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.HasElementTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function HasElementTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool HasElementTypeImpl();" />
      <MemberSignature Language="F#" Value="abstract member HasElementTypeImpl : unit -&gt; bool" Usage="type.HasElementTypeImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-3203">当在派生类中重写时，实现 <see cref="P:System.Type.HasElementType" /> 属性，确定当前 <see cref="T:System.Type" /> 是否包含另一类型或对其引用；即，当前 <see cref="T:System.Type" /> 是否是数组、指针或由引用传递。</span><span class="sxs-lookup"><span data-stu-id="6240b-3203">When overridden in a derived class, implements the <see cref="P:System.Type.HasElementType" /> property and determines whether the current <see cref="T:System.Type" /> encompasses or refers to another type; that is, whether the current <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference.</span></span></summary>
        <returns><span data-ttu-id="6240b-3204">如果 <see langword="true" /> 为数组、指针或按引用传递，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3204"><see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3205">例如，Type.GetType("Int32[]")。HasElementTypeImpl 返回`true`，但 Type.GetType("Int32")。HasElementTypeImpl 返回`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3205">For example, Type.GetType("Int32[]").HasElementTypeImpl returns `true`, but Type.GetType("Int32").HasElementTypeImpl returns `false`.</span></span> <span data-ttu-id="6240b-3206">HasElementTypeImpl 也会返回`true`为"Int32 \*"和"Int32 （& a)"。</span><span class="sxs-lookup"><span data-stu-id="6240b-3206">HasElementTypeImpl also returns `true` for "Int32\*" and "Int32&".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3207">下面的示例定义该类`MyTypeDelegator`，值将覆盖`HasElementTypeImpl`方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3207">The following example defines the class `MyTypeDelegator`, which overrides the `HasElementTypeImpl` method.</span></span> <span data-ttu-id="6240b-3208">主类将检查`HasElementType`属性并显示的元素类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3208">The main class checks for the `HasElementType` property and displays the element type.</span></span>  
  
 [!code-cpp[Type_HasElementTypeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementTypeImpl/CPP/type_haselementtypeimpl.cpp#1)]
 [!code-csharp[Type_HasElementTypeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementTypeImpl/CS/type_haselementtypeimpl.cs#1)]
 [!code-vb[Type_HasElementTypeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementTypeImpl/VB/type_haselementtypeimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.HasElementType" />
        <altmember cref="P:System.Type.IsArray" />
        <altmember cref="P:System.Type.IsPointer" />
        <altmember cref="P:System.Type.IsByRef" />
        <altmember cref="M:System.Type.GetElementType" />
        <altmember cref="M:System.Type.GetType" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeMember">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6240b-3209">调用当前 <see cref="T:System.Type" /> 的特定成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-3209">Invokes a specific member of the current <see cref="T:System.Type" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] -&gt; obj&#xA;override this.InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] -&gt; obj" Usage="type.InvokeMember (name, invokeAttr, binder, target, args)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6240b-3210">字符串，它包含要调用的构造函数、方法、属性或字段成员的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-3210">The string containing the name of the constructor, method, property, or field member to invoke.</span></span>  
  
<span data-ttu-id="6240b-3211">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3211">-or-</span></span> 
<span data-ttu-id="6240b-3212">空字符串 ("")，表示调用默认成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-3212">An empty string ("") to invoke the default member.</span></span>  
  
<span data-ttu-id="6240b-3213">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3213">-or-</span></span> 
<span data-ttu-id="6240b-3214">对于 <see langword="IDispatch" /> 成员，则为一个表示 DispID 的字符串，例如"[DispID=3]"。</span><span class="sxs-lookup"><span data-stu-id="6240b-3214">For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="6240b-3215">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="6240b-3215">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span> <span data-ttu-id="6240b-3216">访问可以是 <see langword="BindingFlags" /> 之一，如 <see langword="Public" />、<see langword="NonPublic" />、<see langword="Private" />、<see langword="InvokeMethod" /> 和 <see langword="GetField" /> 等。</span><span class="sxs-lookup"><span data-stu-id="6240b-3216">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span></span> <span data-ttu-id="6240b-3217">查找类型无需指定。</span><span class="sxs-lookup"><span data-stu-id="6240b-3217">The type of lookup need not be specified.</span></span> <span data-ttu-id="6240b-3218">如果省略查找的类型，则将使用 <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3218">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</span></span></param>
        <param name="binder"><span data-ttu-id="6240b-3219">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-3219">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="6240b-3220">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3220">-or-</span></span> 
<span data-ttu-id="6240b-3221">要使用 <see langword="Nothing" /> 的空引用（在 Visual Basic 中为 <see cref="P:System.Type.DefaultBinder" />）。</span><span class="sxs-lookup"><span data-stu-id="6240b-3221">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span> <span data-ttu-id="6240b-3222">请注意，为了成功地使用变量参数来调用方法重载，可能必须显式定义 <see cref="T:System.Reflection.Binder" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-3222">Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</span></span></param>
        <param name="target"><span data-ttu-id="6240b-3223">对其调用指定成员的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-3223">The object on which to invoke the specified member.</span></span></param>
        <param name="args"><span data-ttu-id="6240b-3224">包含传递给要调用的成员的参数的数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-3224">An array containing the arguments to pass to the member to invoke.</span></span></param>
        <summary><span data-ttu-id="6240b-3225">使用指定的绑定约束并匹配指定的自变量列表，调用指定成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-3225">Invokes the specified member, using the specified binding constraints and matching the specified argument list.</span></span></summary>
        <returns><span data-ttu-id="6240b-3226">一个对象，表示被调用成员的返回值。</span><span class="sxs-lookup"><span data-stu-id="6240b-3226">An object representing the return value of the invoked member.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="6240b-3227">不能使用<xref:System.Type.InvokeMember%2A>调用泛型方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3227">You cannot use <xref:System.Type.InvokeMember%2A> to invoke a generic method.</span></span>  
  
 <span data-ttu-id="6240b-3228">以下<xref:System.Reflection.BindingFlags>的筛选器标志可以用于定义要在搜索中包括的成员：</span><span class="sxs-lookup"><span data-stu-id="6240b-3228">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="6240b-3229">指定`BindingFlags.Public`若要在搜索中包括公共成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-3229">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="6240b-3230">指定`BindingFlags.NonPublic`若要在搜索中包括非公共成员 （即，专用和受保护成员）。</span><span class="sxs-lookup"><span data-stu-id="6240b-3230">Specify `BindingFlags.NonPublic` to include non-public members (that is, private and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="6240b-3231">指定`BindingFlags.FlattenHierarchy`包括层次结构中的静态成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-3231">Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.</span></span>  
  
 <span data-ttu-id="6240b-3232">以下<xref:System.Reflection.BindingFlags>修饰符标志可以用于更改搜索的工作原理：</span><span class="sxs-lookup"><span data-stu-id="6240b-3232">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6240b-3233">`BindingFlags.IgnoreCase` 若要忽略大小写的`name`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3233">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="6240b-3234">`BindingFlags.DeclaredOnly` 若要搜索仅在声明的成员<xref:System.Type>，不只是继承的成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-3234">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="6240b-3235">以下<xref:System.Reflection.BindingFlags>调用标志可以用于表示要与该成员执行的操作：</span><span class="sxs-lookup"><span data-stu-id="6240b-3235">The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:</span></span>  
  
-   <span data-ttu-id="6240b-3236">`CreateInstance` 若要调用构造函数。</span><span class="sxs-lookup"><span data-stu-id="6240b-3236">`CreateInstance` to invoke a constructor.</span></span> <span data-ttu-id="6240b-3237">`name` 将被忽略。</span><span class="sxs-lookup"><span data-stu-id="6240b-3237">`name` is ignored.</span></span> <span data-ttu-id="6240b-3238">与其他调用标志无效。</span><span class="sxs-lookup"><span data-stu-id="6240b-3238">Not valid with other invocation flags.</span></span>  
  
-   <span data-ttu-id="6240b-3239">`InvokeMethod` 若要调用一个方法，但不是构造函数或类型初始值设定项。</span><span class="sxs-lookup"><span data-stu-id="6240b-3239">`InvokeMethod` to invoke a method, but not a constructor or a type initializer.</span></span> <span data-ttu-id="6240b-3240">不有效，且`SetField`或`SetProperty`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3240">Not valid with `SetField` or `SetProperty`.</span></span> <span data-ttu-id="6240b-3241">如果`InvokeMethod`其本身而言，指定`BindingFlags.Public`， `BindingFlags.Instance`，和`BindingFlags.Static`自动包括在内。</span><span class="sxs-lookup"><span data-stu-id="6240b-3241">If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.</span></span>  
  
-   <span data-ttu-id="6240b-3242">`GetField` 若要获取字段的值。</span><span class="sxs-lookup"><span data-stu-id="6240b-3242">`GetField` to get the value of a field.</span></span> <span data-ttu-id="6240b-3243">使用无效`SetField`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3243">Not valid with `SetField`.</span></span>  
  
-   <span data-ttu-id="6240b-3244">`SetField` 若要设置字段的值。</span><span class="sxs-lookup"><span data-stu-id="6240b-3244">`SetField` to set the value of a field.</span></span> <span data-ttu-id="6240b-3245">使用无效`GetField`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3245">Not valid with `GetField`.</span></span>  
  
-   <span data-ttu-id="6240b-3246">`GetProperty` 若要获取的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3246">`GetProperty` to get a property.</span></span> <span data-ttu-id="6240b-3247">使用无效`SetProperty`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3247">Not valid with `SetProperty`.</span></span>  
  
-   <span data-ttu-id="6240b-3248">`SetProperty` 若要设置的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3248">`SetProperty` to set a property.</span></span> <span data-ttu-id="6240b-3249">使用无效`GetProperty`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3249">Not valid with `GetProperty`.</span></span>  
  
 <span data-ttu-id="6240b-3250">有关更多信息，请参见<xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-3250">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6240b-3251">如果下列条件都成立，则将调用一个方法：</span><span class="sxs-lookup"><span data-stu-id="6240b-3251">A method will be invoked if both of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="6240b-3252">方法声明中的参数数量等于的中的参数数目`args`数组 (除非该成员上定义了默认参数和`BindingFlags.OptionalParamBinding`指定)。</span><span class="sxs-lookup"><span data-stu-id="6240b-3252">The number of parameters in the method declaration equals the number of arguments in the `args` array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).</span></span>  
  
-   <span data-ttu-id="6240b-3253">每个自变量的类型可以转换为参数的类型绑定器。</span><span class="sxs-lookup"><span data-stu-id="6240b-3253">The type of each argument can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="6240b-3254">联编程序将查找所有匹配的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3254">The binder will find all of the matching methods.</span></span> <span data-ttu-id="6240b-3255">这些方法会找到基于请求的绑定类型 (<xref:System.Reflection.BindingFlags>值`InvokeMethod`， `GetProperty`，依此类推)。</span><span class="sxs-lookup"><span data-stu-id="6240b-3255">These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on).</span></span> <span data-ttu-id="6240b-3256">按名称、 数量的参数，并搜索修饰符联编程序中定义的一组筛选的组的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3256">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span>  
  
 <span data-ttu-id="6240b-3257">选择该方法后，调用此操作。</span><span class="sxs-lookup"><span data-stu-id="6240b-3257">After the method is selected, it is invoked.</span></span> <span data-ttu-id="6240b-3258">此时，检查可访问性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3258">Accessibility is checked at that point.</span></span> <span data-ttu-id="6240b-3259">搜索可能基于与方法关联的可访问性属性来控制搜索的组的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3259">The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="6240b-3260"><xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType>方法的<xref:System.Reflection.Binder>类负责选择要调用的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3260">The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="6240b-3261">默认联编程序选择最精确的匹配。</span><span class="sxs-lookup"><span data-stu-id="6240b-3261">The default binder selects the most specific match.</span></span>  
  
 <span data-ttu-id="6240b-3262">对于完全受信任的代码; 忽略访问限制也就是说，可以访问和通过调用私有构造函数、 方法、 字段和属性<xref:System.Reflection>每当代码是完全受信任。</span><span class="sxs-lookup"><span data-stu-id="6240b-3262">Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through <xref:System.Reflection> whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="6240b-3263">可以使用`Type.InvokeMember`若要将字段设置为特定值，通过指定<xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-3263">You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6240b-3264">例如，如果你想要设置 C 和 F 的类上名为 F 的公共实例字段是`String`，您可以使用如下代码：</span><span class="sxs-lookup"><span data-stu-id="6240b-3264">For example, if you want to set a public instance field named F on class C, and F is a `String`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {"strings new value"});`  
  
 <span data-ttu-id="6240b-3265">如果 F `String[]`，您可以使用如下代码：</span><span class="sxs-lookup"><span data-stu-id="6240b-3265">If F is a `String[]`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {new String[]{"a","z","c","d"}});`  
  
 <span data-ttu-id="6240b-3266">这将初始化字段 F 到此新的数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-3266">which will initialize the field F to this new array.</span></span> <span data-ttu-id="6240b-3267">此外可以使用`Type.InvokeMember`设置通过使用如下所示的代码提供的值，然后选择下一步值索引数组中的位置：</span><span class="sxs-lookup"><span data-stu-id="6240b-3267">You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {1, "b"});`  
  
 <span data-ttu-id="6240b-3268">这将更改 F 包含字符串"b"数组中的字符串"z"。</span><span class="sxs-lookup"><span data-stu-id="6240b-3268">This will change string "z" in the array that F holds to string "b".</span></span>  
  
 <span data-ttu-id="6240b-3269">当调用`IDispatch`成员，您可以指定而不是成员名称，使用字符串格式的 DispID"[DispID = # #]"。</span><span class="sxs-lookup"><span data-stu-id="6240b-3269">When you invoke an `IDispatch` member, you can specify the DispID instead of the member name, using the string format "[DispID=##]".</span></span> <span data-ttu-id="6240b-3270">例如，如果 DispID MyComMethod 为 3，则可以指定字符串"[DispID = 3]"而不是"MyComMethod"。</span><span class="sxs-lookup"><span data-stu-id="6240b-3270">For example, if the DispID of MyComMethod is 3, you can specify the string "[DispID=3]" instead of "MyComMethod".</span></span> <span data-ttu-id="6240b-3271">调用成员的 DispID 速度比按名称查找该成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-3271">Invoking a member by DispID is faster than looking up the member by name.</span></span> <span data-ttu-id="6240b-3272">在复杂的聚合方案中，DispID 有时是调用所需的成员的唯一方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3272">In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-3273">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，可以使用此方法访问非公共成员，如果授予调用方<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标记线程和非公共成员的授予集限制到调用方的授予集或子集其中。</span><span class="sxs-lookup"><span data-stu-id="6240b-3273">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="6240b-3274">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="6240b-3274">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="6240b-3275">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="6240b-3275">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3276">下面的示例使用`InvokeMember`访问成员的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3276">The following example uses `InvokeMember` to access members of a type.</span></span>  
  
 [!code-cpp[InvokeMem#1](~/samples/snippets/cpp/VS_Snippets_CLR/InvokeMem/CPP/invokemem.cpp#1)]
 [!code-csharp[InvokeMem#1](~/samples/snippets/csharp/VS_Snippets_CLR/InvokeMem/CS/invokemem.cs#1)]
 [!code-vb[InvokeMem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/InvokeMem/VB/invokemem.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-3277"><paramref name="invokeAttr" /> 不包含 <see langword="CreateInstance" />，并且 <paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3277"><paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-3278"><paramref name="invokeAttr" /> 不是有效的 <see cref="T:System.Reflection.BindingFlags" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3278"><paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.</span></span>  
  
<span data-ttu-id="6240b-3279">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3279">-or-</span></span> 
 <span data-ttu-id="6240b-3280"><paramref name="invokeAttr" /> 不包含以下某个绑定标志：<see langword="InvokeMethod" />、<see langword="CreateInstance" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> 或 <see langword="SetProperty" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3280"><paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="6240b-3281">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3281">-or-</span></span> 
 <span data-ttu-id="6240b-3282"><paramref name="invokeAttr" /> 包含 <see langword="CreateInstance" /> 与 <see langword="InvokeMethod" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> 或 <see langword="SetProperty" /> 的组合。</span><span class="sxs-lookup"><span data-stu-id="6240b-3282"><paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="6240b-3283">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3283">-or-</span></span> 
 <span data-ttu-id="6240b-3284"><paramref name="invokeAttr" /> 同时包含 <see langword="GetField" /> 和 <see langword="SetField" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3284"><paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.</span></span>  
  
<span data-ttu-id="6240b-3285">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3285">-or-</span></span> 
 <span data-ttu-id="6240b-3286"><paramref name="invokeAttr" /> 同时包含 <see langword="GetProperty" /> 和 <see langword="SetProperty" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3286"><paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="6240b-3287">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3287">-or-</span></span> 
 <span data-ttu-id="6240b-3288"><paramref name="invokeAttr" /> 包含 <see langword="InvokeMethod" /> 与 <see langword="SetField" /> 或 <see langword="SetProperty" /> 的组合。</span><span class="sxs-lookup"><span data-stu-id="6240b-3288"><paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="6240b-3289">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3289">-or-</span></span> 
 <span data-ttu-id="6240b-3290"><paramref name="invokeAttr" /> 包含 <see langword="SetField" />，并且 <paramref name="args" /> 具有多个元素。</span><span class="sxs-lookup"><span data-stu-id="6240b-3290"><paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.</span></span>  
  
<span data-ttu-id="6240b-3291">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3291">-or-</span></span> 
<span data-ttu-id="6240b-3292">对 COM 对象调用了此方法，但以下绑定标志中有一个未传入：<see langword="BindingFlags.InvokeMethod" />、<see langword="BindingFlags.GetProperty" />、<see langword="BindingFlags.SetProperty" />、<see langword="BindingFlags.PutDispProperty" /> 或 <see langword="BindingFlags.PutRefDispProperty" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3292">This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.</span></span>  
  
<span data-ttu-id="6240b-3293">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3293">-or-</span></span> 
<span data-ttu-id="6240b-3294">其中一个命名参数数组包含一个值为 <see langword="null" /> 的字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-3294">One of the named parameter arrays contains a string that is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="6240b-3295">指定的成员是类初始值设定项。</span><span class="sxs-lookup"><span data-stu-id="6240b-3295">The specified member is a class initializer.</span></span></exception>
        <exception cref="T:System.MissingFieldException"><span data-ttu-id="6240b-3296">找不到此字段或属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3296">The field or property cannot be found.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="6240b-3297">找不到与 <paramref name="args" /> 中的参数匹配的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3297">No method can be found that matches the arguments in <paramref name="args" />.</span></span>  
  
<span data-ttu-id="6240b-3298">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3298">-or-</span></span> 
<span data-ttu-id="6240b-3299">当前 <see cref="T:System.Type" /> 对象表示包含开放类型参数的类型，也就是说，<see cref="P:System.Type.ContainsGenericParameters" /> 将返回 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3299">The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException"><span data-ttu-id="6240b-3300">不能在 <paramref name="target" /> 上调用指定的成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-3300">The specified member cannot be invoked on <paramref name="target" />.</span></span></exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="6240b-3301">多个方法与绑定条件匹配。</span><span class="sxs-lookup"><span data-stu-id="6240b-3301">More than one method matches the binding criteria.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6240b-3302">.NET Compact Framework 当前不支持此方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3302">The .NET Compact Framework does not currently support this method.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6240b-3303">由 <paramref name="name" /> 表示的方法具有一个或多个未指定的泛型类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-3303">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters.</span></span> <span data-ttu-id="6240b-3304">也就是说，此方法的 <see cref="P:System.Reflection.MethodBase.ContainsGenericParameters" /> 属性将返回 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3304">That is, the method's <see cref="P:System.Reflection.MethodBase.ContainsGenericParameters" /> property returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="6240b-3305">用于访问非公共成员，而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="6240b-3305">for accessing non-public members regardless of their grant set.</span></span> <span data-ttu-id="6240b-3306">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="6240b-3306">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="6240b-3307">若要调用非托管的代码。</span><span class="sxs-lookup"><span data-stu-id="6240b-3307">to call unmanaged code.</span></span> <span data-ttu-id="6240b-3308">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="6240b-3308">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="T:System.Reflection.ParameterAttributes" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Globalization.CultureInfo -&gt; obj&#xA;override this.InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Globalization.CultureInfo -&gt; obj" Usage="type.InvokeMember (name, invokeAttr, binder, target, args, culture)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6240b-3309">字符串，它包含要调用的构造函数、方法、属性或字段成员的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-3309">The string containing the name of the constructor, method, property, or field member to invoke.</span></span>  
  
<span data-ttu-id="6240b-3310">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3310">-or-</span></span> 
<span data-ttu-id="6240b-3311">空字符串 ("")，表示调用默认成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-3311">An empty string ("") to invoke the default member.</span></span>  
  
<span data-ttu-id="6240b-3312">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3312">-or-</span></span> 
<span data-ttu-id="6240b-3313">对于 <see langword="IDispatch" /> 成员，则为一个表示 DispID 的字符串，例如"[DispID=3]"。</span><span class="sxs-lookup"><span data-stu-id="6240b-3313">For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="6240b-3314">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="6240b-3314">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span> <span data-ttu-id="6240b-3315">访问可以是 <see langword="BindingFlags" /> 之一，如 <see langword="Public" />、<see langword="NonPublic" />、<see langword="Private" />、<see langword="InvokeMethod" /> 和 <see langword="GetField" /> 等。</span><span class="sxs-lookup"><span data-stu-id="6240b-3315">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span></span> <span data-ttu-id="6240b-3316">查找类型无需指定。</span><span class="sxs-lookup"><span data-stu-id="6240b-3316">The type of lookup need not be specified.</span></span> <span data-ttu-id="6240b-3317">如果省略查找的类型，则将使用 <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3317">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</span></span></param>
        <param name="binder"><span data-ttu-id="6240b-3318">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-3318">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="6240b-3319">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3319">-or-</span></span> 
<span data-ttu-id="6240b-3320">要使用 <see langword="Nothing" /> 的空引用（在 Visual Basic 中为 <see cref="P:System.Type.DefaultBinder" />）。</span><span class="sxs-lookup"><span data-stu-id="6240b-3320">A null reference (<see langword="Nothing" /> in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span> <span data-ttu-id="6240b-3321">请注意，为了成功地使用变量参数来调用方法重载，可能必须显式定义 <see cref="T:System.Reflection.Binder" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-3321">Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</span></span></param>
        <param name="target"><span data-ttu-id="6240b-3322">对其调用指定成员的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-3322">The object on which to invoke the specified member.</span></span></param>
        <param name="args"><span data-ttu-id="6240b-3323">包含传递给要调用的成员的参数的数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-3323">An array containing the arguments to pass to the member to invoke.</span></span></param>
        <param name="culture"><span data-ttu-id="6240b-3324">表示要使用的全局化区域设置的对象，它对区域设置特定的转换可能是必需的，比如将数字 <see cref="T:System.String" /> 转换为 <see cref="T:System.Double" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3324">The object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric <see cref="T:System.String" /> to a <see cref="T:System.Double" />.</span></span>  
  
<span data-ttu-id="6240b-3325">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3325">-or-</span></span> 
<span data-ttu-id="6240b-3326">要使用当前线程的 <see langword="Nothing" /> 的空引用（在 Visual Basic 中为 <see cref="T:System.Globalization.CultureInfo" />）。</span><span class="sxs-lookup"><span data-stu-id="6240b-3326">A null reference (<see langword="Nothing" /> in Visual Basic) to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</span></span></param>
        <summary><span data-ttu-id="6240b-3327">使用指定的绑定约束和匹配的指定参数列表及区域性来调用指定成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-3327">Invokes the specified member, using the specified binding constraints and matching the specified argument list and culture.</span></span></summary>
        <returns><span data-ttu-id="6240b-3328">一个对象，表示被调用成员的返回值。</span><span class="sxs-lookup"><span data-stu-id="6240b-3328">An object representing the return value of the invoked member.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3329">尽管默认联编程序不会处理<xref:System.Globalization.CultureInfo>(`culture`参数)，您可以使用抽象<xref:System.Reflection.Binder?displayProperty=nameWithType>类以编写的自定义联编程序`culture`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3329">Although the default binder does not process <xref:System.Globalization.CultureInfo> (the `culture` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `culture`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-3330">不能使用<xref:System.Type.InvokeMember%2A>调用泛型方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3330">You cannot use <xref:System.Type.InvokeMember%2A> to invoke a generic method.</span></span>  
  
 <span data-ttu-id="6240b-3331">以下<xref:System.Reflection.BindingFlags>的筛选器标志可以用于定义要在搜索中包括的成员：</span><span class="sxs-lookup"><span data-stu-id="6240b-3331">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="6240b-3332">指定`BindingFlags.Public`若要在搜索中包括公共成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-3332">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="6240b-3333">指定`BindingFlags.NonPublic`若要在搜索中包括非公共成员 （即私有、 内部和受保护成员）。</span><span class="sxs-lookup"><span data-stu-id="6240b-3333">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="6240b-3334">指定`BindingFlags.FlattenHierarchy`包括层次结构中的静态成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-3334">Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.</span></span>  
  
 <span data-ttu-id="6240b-3335">以下<xref:System.Reflection.BindingFlags>修饰符标志可以用于更改搜索的工作原理：</span><span class="sxs-lookup"><span data-stu-id="6240b-3335">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6240b-3336">`BindingFlags.IgnoreCase` 若要忽略大小写的`name`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3336">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="6240b-3337">`BindingFlags.DeclaredOnly` 若要搜索仅在声明的成员<xref:System.Type>，不只是继承的成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-3337">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="6240b-3338">以下<xref:System.Reflection.BindingFlags>调用标志可以用于表示要与该成员执行的操作：</span><span class="sxs-lookup"><span data-stu-id="6240b-3338">The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:</span></span>  
  
-   <span data-ttu-id="6240b-3339">`CreateInstance` 若要调用构造函数。</span><span class="sxs-lookup"><span data-stu-id="6240b-3339">`CreateInstance` to invoke a constructor.</span></span> <span data-ttu-id="6240b-3340">`name` 将被忽略。</span><span class="sxs-lookup"><span data-stu-id="6240b-3340">`name` is ignored.</span></span> <span data-ttu-id="6240b-3341">与其他调用标志无效。</span><span class="sxs-lookup"><span data-stu-id="6240b-3341">Not valid with other invocation flags.</span></span>  
  
-   <span data-ttu-id="6240b-3342">`InvokeMethod` 若要调用一个方法，但不是构造函数或类型初始值设定项。</span><span class="sxs-lookup"><span data-stu-id="6240b-3342">`InvokeMethod` to invoke a method, but not a constructor or a type initializer.</span></span> <span data-ttu-id="6240b-3343">不有效，且`SetField`或`SetProperty`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3343">Not valid with `SetField` or `SetProperty`.</span></span> <span data-ttu-id="6240b-3344">如果`InvokeMethod`其本身而言，指定`BindingFlags.Public`， `BindingFlags.Instance`，和`BindingFlags.Static`自动包括在内。</span><span class="sxs-lookup"><span data-stu-id="6240b-3344">If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.</span></span>  
  
-   <span data-ttu-id="6240b-3345">`GetField` 若要获取字段的值。</span><span class="sxs-lookup"><span data-stu-id="6240b-3345">`GetField` to get the value of a field.</span></span> <span data-ttu-id="6240b-3346">使用无效`SetField`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3346">Not valid with `SetField`.</span></span>  
  
-   <span data-ttu-id="6240b-3347">`SetField` 若要设置字段的值。</span><span class="sxs-lookup"><span data-stu-id="6240b-3347">`SetField` to set the value of a field.</span></span> <span data-ttu-id="6240b-3348">使用无效`GetField`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3348">Not valid with `GetField`.</span></span>  
  
-   <span data-ttu-id="6240b-3349">`GetProperty` 若要获取的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3349">`GetProperty` to get a property.</span></span> <span data-ttu-id="6240b-3350">使用无效`SetProperty`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3350">Not valid with `SetProperty`.</span></span>  
  
-   <span data-ttu-id="6240b-3351">`SetProperty` 若要设置的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3351">`SetProperty` to set a property.</span></span> <span data-ttu-id="6240b-3352">使用无效`GetProperty`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3352">Not valid with `GetProperty`.</span></span>  
  
 <span data-ttu-id="6240b-3353">有关更多信息，请参见<xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-3353">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6240b-3354">如果下列条件都成立，则将调用一个方法：</span><span class="sxs-lookup"><span data-stu-id="6240b-3354">A method will be invoked if both of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="6240b-3355">方法声明中的参数数量等于的中的参数数目`args`数组 (除非该成员上定义了默认参数和`BindingFlags.OptionalParamBinding`指定)。</span><span class="sxs-lookup"><span data-stu-id="6240b-3355">The number of parameters in the method declaration equals the number of arguments in the `args` array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).</span></span>  
  
-   <span data-ttu-id="6240b-3356">每个自变量的类型可以转换为参数的类型绑定器。</span><span class="sxs-lookup"><span data-stu-id="6240b-3356">The type of each argument can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="6240b-3357">联编程序将查找所有匹配的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3357">The binder will find all of the matching methods.</span></span> <span data-ttu-id="6240b-3358">这些方法会找到基于请求的绑定类型 (<xref:System.Reflection.BindingFlags>值`InvokeMethod`， `GetProperty`，依此类推)。</span><span class="sxs-lookup"><span data-stu-id="6240b-3358">These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on).</span></span> <span data-ttu-id="6240b-3359">按名称、 数量的参数，并搜索修饰符联编程序中定义的一组筛选的组的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3359">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span>  
  
 <span data-ttu-id="6240b-3360">选择该方法后，调用此操作。</span><span class="sxs-lookup"><span data-stu-id="6240b-3360">After the method is selected, it is invoked.</span></span> <span data-ttu-id="6240b-3361">此时，检查可访问性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3361">Accessibility is checked at that point.</span></span> <span data-ttu-id="6240b-3362">搜索可能基于与方法关联的可访问性属性来控制搜索的组的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3362">The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="6240b-3363"><xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType>方法的<xref:System.Reflection.Binder>类负责选择要调用的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3363">The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="6240b-3364">默认联编程序选择最精确的匹配。</span><span class="sxs-lookup"><span data-stu-id="6240b-3364">The default binder selects the most specific match.</span></span>  
  
 <span data-ttu-id="6240b-3365">对于完全受信任的代码; 忽略访问限制也就是说，私有构造函数、 方法、 字段和属性可以访问和通过反射调用，只要代码完全受信任。</span><span class="sxs-lookup"><span data-stu-id="6240b-3365">Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through Reflection whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="6240b-3366">可以使用`Type.InvokeMember`若要将字段设置为特定值，通过指定<xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-3366">You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6240b-3367">例如，如果你想要设置 C 和 F 的类上名为 F 的公共实例字段是`String`您可以使用如下代码：</span><span class="sxs-lookup"><span data-stu-id="6240b-3367">For example, if you want to set a public instance field named F on class C, and F is a `String` you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {"strings new value"}, null);`  
  
 <span data-ttu-id="6240b-3368">如果 F `String[]`，您可以使用如下代码：</span><span class="sxs-lookup"><span data-stu-id="6240b-3368">If F is a `String[]`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {new String[]{"a","z","c","d"}}, null);`  
  
 <span data-ttu-id="6240b-3369">这将初始化字段 F 到此新的数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-3369">which will initialize the field F to this new array.</span></span> <span data-ttu-id="6240b-3370">此外可以使用`Type.InvokeMember`设置通过使用如下所示的代码提供的值，然后选择下一步值索引数组中的位置：</span><span class="sxs-lookup"><span data-stu-id="6240b-3370">You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {1, "b"}, null);`  
  
 <span data-ttu-id="6240b-3371">这将更改 F 包含字符串"b"数组中的字符串"z"。</span><span class="sxs-lookup"><span data-stu-id="6240b-3371">This will change string "z" in the array that F holds to string "b".</span></span>  
  
 <span data-ttu-id="6240b-3372">当调用`IDispatch`成员可以指定而不是成员名称，使用字符串格式的 DispID"[DispID = # #]"。</span><span class="sxs-lookup"><span data-stu-id="6240b-3372">When you invoke an `IDispatch` member you can specify the DispID instead of the member name, using the string format "[DispID=##]".</span></span> <span data-ttu-id="6240b-3373">例如，如果 DispID MyComMethod 为 3，则可以指定字符串"[DispID = 3]"而不是"MyComMethod"。</span><span class="sxs-lookup"><span data-stu-id="6240b-3373">For example, if the DispID of MyComMethod is 3, you can specify the string "[DispID=3]" instead of "MyComMethod".</span></span> <span data-ttu-id="6240b-3374">调用成员的 DispID 速度比按名称查找该成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-3374">Invoking a member by DispID is faster than looking up the member by name.</span></span> <span data-ttu-id="6240b-3375">在复杂的聚合方案中，DispID 有时是调用所需的成员的唯一方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3375">In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-3376">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，可以使用此方法访问非公共成员，如果授予调用方<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标记线程和非公共成员的授予集限制到调用方的授予集或子集其中。</span><span class="sxs-lookup"><span data-stu-id="6240b-3376">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="6240b-3377">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="6240b-3377">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="6240b-3378">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="6240b-3378">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-3379"><paramref name="invokeAttr" /> 不包含 <see langword="CreateInstance" />，并且 <paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3379"><paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-3380"><paramref name="invokeAttr" /> 不是有效的 <see cref="T:System.Reflection.BindingFlags" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3380"><paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.</span></span>  
  
<span data-ttu-id="6240b-3381">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3381">-or-</span></span> 
 <span data-ttu-id="6240b-3382"><paramref name="invokeAttr" /> 不包含以下某个绑定标志：<see langword="InvokeMethod" />、<see langword="CreateInstance" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> 或 <see langword="SetProperty" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3382"><paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="6240b-3383">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3383">-or-</span></span> 
 <span data-ttu-id="6240b-3384"><paramref name="invokeAttr" /> 包含 <see langword="CreateInstance" /> 与 <see langword="InvokeMethod" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> 或 <see langword="SetProperty" /> 的组合。</span><span class="sxs-lookup"><span data-stu-id="6240b-3384"><paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="6240b-3385">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3385">-or-</span></span> 
 <span data-ttu-id="6240b-3386"><paramref name="invokeAttr" /> 同时包含 <see langword="GetField" /> 和 <see langword="SetField" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3386"><paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.</span></span>  
  
<span data-ttu-id="6240b-3387">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3387">-or-</span></span> 
 <span data-ttu-id="6240b-3388"><paramref name="invokeAttr" /> 同时包含 <see langword="GetProperty" /> 和 <see langword="SetProperty" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3388"><paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="6240b-3389">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3389">-or-</span></span> 
 <span data-ttu-id="6240b-3390"><paramref name="invokeAttr" /> 包含 <see langword="InvokeMethod" /> 与 <see langword="SetField" /> 或 <see langword="SetProperty" /> 的组合。</span><span class="sxs-lookup"><span data-stu-id="6240b-3390"><paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="6240b-3391">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3391">-or-</span></span> 
 <span data-ttu-id="6240b-3392"><paramref name="invokeAttr" /> 包含 <see langword="SetField" />，并且 <paramref name="args" /> 具有多个元素。</span><span class="sxs-lookup"><span data-stu-id="6240b-3392"><paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.</span></span>  
  
<span data-ttu-id="6240b-3393">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3393">-or-</span></span> 
<span data-ttu-id="6240b-3394">对 COM 对象调用了此方法，但以下绑定标志中有一个未传入：<see langword="BindingFlags.InvokeMethod" />、<see langword="BindingFlags.GetProperty" />、<see langword="BindingFlags.SetProperty" />、<see langword="BindingFlags.PutDispProperty" /> 或 <see langword="BindingFlags.PutRefDispProperty" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3394">This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.</span></span>  
  
<span data-ttu-id="6240b-3395">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3395">-or-</span></span> 
<span data-ttu-id="6240b-3396">其中一个命名参数数组包含一个值为 <see langword="null" /> 的字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-3396">One of the named parameter arrays contains a string that is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="6240b-3397">指定的成员是类初始值设定项。</span><span class="sxs-lookup"><span data-stu-id="6240b-3397">The specified member is a class initializer.</span></span></exception>
        <exception cref="T:System.MissingFieldException"><span data-ttu-id="6240b-3398">找不到此字段或属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3398">The field or property cannot be found.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="6240b-3399">找不到与 <paramref name="args" /> 中的参数匹配的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3399">No method can be found that matches the arguments in <paramref name="args" />.</span></span>  
  
<span data-ttu-id="6240b-3400">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3400">-or-</span></span> 
<span data-ttu-id="6240b-3401">当前 <see cref="T:System.Type" /> 对象表示包含开放类型参数的类型，也就是说，<see cref="P:System.Type.ContainsGenericParameters" /> 将返回 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3401">The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException"><span data-ttu-id="6240b-3402">不能在 <paramref name="target" /> 上调用指定的成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-3402">The specified member cannot be invoked on <paramref name="target" />.</span></span></exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="6240b-3403">多个方法与绑定条件匹配。</span><span class="sxs-lookup"><span data-stu-id="6240b-3403">More than one method matches the binding criteria.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6240b-3404">由 <paramref name="name" /> 表示的方法具有一个或多个未指定的泛型类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-3404">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters.</span></span> <span data-ttu-id="6240b-3405">也就是说，此方法的 <see cref="P:System.Reflection.MethodBase.ContainsGenericParameters" /> 属性将返回 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3405">That is, the method's <see cref="P:System.Reflection.MethodBase.ContainsGenericParameters" /> property returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="6240b-3406">用于访问非公共成员，而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="6240b-3406">for accessing non-public members regardless of their grant set.</span></span> <span data-ttu-id="6240b-3407">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="6240b-3407">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="6240b-3408">若要调用非托管的代码。</span><span class="sxs-lookup"><span data-stu-id="6240b-3408">to call unmanaged code.</span></span> <span data-ttu-id="6240b-3409">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="6240b-3409">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="T:System.Reflection.ParameterAttributes" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public abstract object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::String ^&gt; ^ namedParameters);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Reflection.ParameterModifier[] * System.Globalization.CultureInfo * string[] -&gt; obj" Usage="type.InvokeMember (name, invokeAttr, binder, target, args, modifiers, culture, namedParameters)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])</InterfaceMember>
        <InterfaceMember>M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="namedParameters" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="6240b-3410">字符串，它包含要调用的构造函数、方法、属性或字段成员的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-3410">The string containing the name of the constructor, method, property, or field member to invoke.</span></span>  
  
<span data-ttu-id="6240b-3411">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3411">-or-</span></span> 
<span data-ttu-id="6240b-3412">空字符串 ("")，表示调用默认成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-3412">An empty string ("") to invoke the default member.</span></span>  
  
<span data-ttu-id="6240b-3413">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3413">-or-</span></span> 
<span data-ttu-id="6240b-3414">对于 <see langword="IDispatch" /> 成员，则为一个表示 DispID 的字符串，例如"[DispID=3]"。</span><span class="sxs-lookup"><span data-stu-id="6240b-3414">For <see langword="IDispatch" /> members, a string representing the DispID, for example "[DispID=3]".</span></span></param>
        <param name="invokeAttr"><span data-ttu-id="6240b-3415">一个位屏蔽，由一个或多个指定搜索执行方式的 <see cref="T:System.Reflection.BindingFlags" /> 组成。</span><span class="sxs-lookup"><span data-stu-id="6240b-3415">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span></span> <span data-ttu-id="6240b-3416">访问可以是 <see langword="BindingFlags" /> 之一，如 <see langword="Public" />、<see langword="NonPublic" />、<see langword="Private" />、<see langword="InvokeMethod" /> 和 <see langword="GetField" /> 等。</span><span class="sxs-lookup"><span data-stu-id="6240b-3416">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span></span> <span data-ttu-id="6240b-3417">查找类型无需指定。</span><span class="sxs-lookup"><span data-stu-id="6240b-3417">The type of lookup need not be specified.</span></span> <span data-ttu-id="6240b-3418">如果省略查找的类型，则将使用 <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3418">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" /> are used.</span></span></param>
        <param name="binder"><span data-ttu-id="6240b-3419">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-3419">An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span></span>  
  
<span data-ttu-id="6240b-3420">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3420">-or-</span></span> 
<span data-ttu-id="6240b-3421">要使用 <see cref="P:System.Type.DefaultBinder" /> 的空引用（在 Visual Basic 中为 Nothing）。</span><span class="sxs-lookup"><span data-stu-id="6240b-3421">A null reference (Nothing in Visual Basic), to use the <see cref="P:System.Type.DefaultBinder" />.</span></span> <span data-ttu-id="6240b-3422">请注意，为了成功地使用变量参数来调用方法重载，可能必须显式定义 <see cref="T:System.Reflection.Binder" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-3422">Note that explicitly defining a <see cref="T:System.Reflection.Binder" /> object may be required for successfully invoking method overloads with variable arguments.</span></span></param>
        <param name="target"><span data-ttu-id="6240b-3423">对其调用指定成员的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-3423">The object on which to invoke the specified member.</span></span></param>
        <param name="args"><span data-ttu-id="6240b-3424">包含传递给要调用的成员的参数的数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-3424">An array containing the arguments to pass to the member to invoke.</span></span></param>
        <param name="modifiers"><span data-ttu-id="6240b-3425"><see cref="T:System.Reflection.ParameterModifier" /> 对象的数组，表示与 <paramref name="args" /> 数组中的相应元素关联的特性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3425">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <paramref name="args" /> array.</span></span> <span data-ttu-id="6240b-3426">参数的关联的属性存储在成员的签名中。</span><span class="sxs-lookup"><span data-stu-id="6240b-3426">A parameter's associated attributes are stored in the member's signature.</span></span>  
  
<span data-ttu-id="6240b-3427">只有在调用 COM 组件时，默认联编程序才处理此参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-3427">The default binder processes this parameter only when calling a COM component.</span></span></param>
        <param name="culture"><span data-ttu-id="6240b-3428">表示要使用的全局化区域设置的 <see cref="T:System.Globalization.CultureInfo" /> 对象，它对区域设置特定的转换可能是必需的，比如将数字 String 转换为 Double。</span><span class="sxs-lookup"><span data-stu-id="6240b-3428">The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.</span></span>  
  
<span data-ttu-id="6240b-3429">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3429">-or-</span></span> 
<span data-ttu-id="6240b-3430">要使用当前线程的 <see langword="Nothing" /> 的空引用（在 Visual Basic 中为 <see cref="T:System.Globalization.CultureInfo" />）。</span><span class="sxs-lookup"><span data-stu-id="6240b-3430">A null reference (<see langword="Nothing" /> in Visual Basic) to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</span></span></param>
        <param name="namedParameters"><span data-ttu-id="6240b-3431">包含参数名称的数组，<paramref name="args" /> 数组中的值将传递给这些参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-3431">An array containing the names of the parameters to which the values in the <paramref name="args" /> array are passed.</span></span></param>
        <summary><span data-ttu-id="6240b-3432">当在派生类中重写时，使用指定的绑定约束并匹配指定的参数列表、修饰符和区域性，调用指定成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-3432">When overridden in a derived class, invokes the specified member, using the specified binding constraints and matching the specified argument list, modifiers and culture.</span></span></summary>
        <returns><span data-ttu-id="6240b-3433">一个对象，表示被调用成员的返回值。</span><span class="sxs-lookup"><span data-stu-id="6240b-3433">An object representing the return value of the invoked member.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3434">`InvokeMember` 调用构造函数成员或方法成员，获取或设置的属性成员，获取或设置数据字段成员，或获取或设置数组成员的元素。</span><span class="sxs-lookup"><span data-stu-id="6240b-3434">`InvokeMember` calls a constructor member or a method member, gets or sets a property member, gets or sets a data field member, or gets or sets an element of an array member.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-3435">不能使用<xref:System.Type.InvokeMember%2A>调用泛型方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3435">You cannot use <xref:System.Type.InvokeMember%2A> to invoke a generic method.</span></span>  
  
 <span data-ttu-id="6240b-3436">当调用`IDispatch`成员可以指定而不是成员名称，使用字符串格式的 DispID"[DispID = # #]"。</span><span class="sxs-lookup"><span data-stu-id="6240b-3436">When you invoke an `IDispatch` member you can specify the DispID instead of the member name, using the string format "[DispID=##]".</span></span> <span data-ttu-id="6240b-3437">例如，如果 DispID MyComMethod 为 3，则可以指定字符串"[DispID = 3]"而不是"MyComMethod"。</span><span class="sxs-lookup"><span data-stu-id="6240b-3437">For example, if the DispID of MyComMethod is 3, you can specify the string "[DispID=3]" instead of "MyComMethod".</span></span> <span data-ttu-id="6240b-3438">调用成员的 DispID 速度比按名称查找该成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-3438">Invoking a member by DispID is faster than looking up the member by name.</span></span> <span data-ttu-id="6240b-3439">在复杂的聚合方案中，DispID 有时是调用所需的成员的唯一方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3439">In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.</span></span>  
  
 <span data-ttu-id="6240b-3440">尽管默认联编程序不会处理<xref:System.Reflection.ParameterModifier>或<xref:System.Globalization.CultureInfo>(`modifiers`并`culture`参数)，您可以使用抽象<xref:System.Reflection.Binder?displayProperty=nameWithType>类编写的自定义联编程序`modifiers`和`culture`.</span><span class="sxs-lookup"><span data-stu-id="6240b-3440">Although the default binder does not process <xref:System.Reflection.ParameterModifier> or <xref:System.Globalization.CultureInfo> (the `modifiers` and `culture` parameters), you can use the abstract <xref:System.Reflection.Binder?displayProperty=nameWithType> class to write a custom binder that does process `modifiers` and `culture`.</span></span> <span data-ttu-id="6240b-3441">`ParameterModifier` 通过 COM 互操作调用时，才使用和处理由引用传递的参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-3441">`ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.</span></span>  
  
 <span data-ttu-id="6240b-3442">`namedParameters` 数组中的每个参数对应 `args` 数组中的元素来获取值。</span><span class="sxs-lookup"><span data-stu-id="6240b-3442">Each parameter in the `namedParameters` array gets the value in the corresponding element in the `args` array.</span></span> <span data-ttu-id="6240b-3443">如果 `args` 的长度大于 `namedParameters` 的长度，则剩余的自变量值将按顺序传递。</span><span class="sxs-lookup"><span data-stu-id="6240b-3443">If the length of `args` is greater than the length of `namedParameters`, the remaining argument values are passed in order.</span></span>  
  
 <span data-ttu-id="6240b-3444">`namedParameters`数组可用于更改输入数组中参数的顺序。</span><span class="sxs-lookup"><span data-stu-id="6240b-3444">The `namedParameters` array can be used to change the order of arguments in an input array.</span></span> <span data-ttu-id="6240b-3445">例如，对于给定的方法`M(string a, int b)`(`M(ByVal a As String, ByVal b As Integer)`在 Visual Basic 中) 和输入的数组`{ 42, "x" }`，输入的数组可以传递不变以`args`如果数组`{ "b", "a" }`为提供`namedParameters`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3445">For example, given the method `M(string a, int b)` (`M(ByVal a As String, ByVal b As Integer)` in Visual Basic) and the input array `{ 42, "x" }`, the input array can be passed unchanged to `args` if the array `{ "b", "a" }` is supplied for `namedParameters`.</span></span>  
  
 <span data-ttu-id="6240b-3446">以下<xref:System.Reflection.BindingFlags>的筛选器标志可以用于定义要在搜索中包括的成员：</span><span class="sxs-lookup"><span data-stu-id="6240b-3446">The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:</span></span>  
  
-   <span data-ttu-id="6240b-3447">指定`BindingFlags.Public`若要在搜索中包括公共成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-3447">Specify `BindingFlags.Public` to include public members in the search.</span></span>  
  
-   <span data-ttu-id="6240b-3448">指定`BindingFlags.NonPublic`若要在搜索中包括非公共成员 （即私有、 内部和受保护成员）。</span><span class="sxs-lookup"><span data-stu-id="6240b-3448">Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.</span></span>  
  
-   <span data-ttu-id="6240b-3449">指定`BindingFlags.FlattenHierarchy`包括层次结构中的静态成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-3449">Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.</span></span>  
  
 <span data-ttu-id="6240b-3450">以下<xref:System.Reflection.BindingFlags>修饰符标志可以用于更改搜索的工作原理：</span><span class="sxs-lookup"><span data-stu-id="6240b-3450">The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:</span></span>  
  
-   <span data-ttu-id="6240b-3451">`BindingFlags.IgnoreCase` 若要忽略大小写的`name`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3451">`BindingFlags.IgnoreCase` to ignore the case of `name`.</span></span>  
  
-   <span data-ttu-id="6240b-3452">`BindingFlags.DeclaredOnly` 若要搜索仅在声明的成员<xref:System.Type>，不只是继承的成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-3452">`BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.</span></span>  
  
 <span data-ttu-id="6240b-3453">以下<xref:System.Reflection.BindingFlags>调用标志可以用于表示要与该成员执行的操作：</span><span class="sxs-lookup"><span data-stu-id="6240b-3453">The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:</span></span>  
  
-   <span data-ttu-id="6240b-3454">`CreateInstance` 若要调用构造函数。</span><span class="sxs-lookup"><span data-stu-id="6240b-3454">`CreateInstance` to invoke a constructor.</span></span> <span data-ttu-id="6240b-3455">`name` 将被忽略。</span><span class="sxs-lookup"><span data-stu-id="6240b-3455">`name` is ignored.</span></span> <span data-ttu-id="6240b-3456">与其他调用标志无效。</span><span class="sxs-lookup"><span data-stu-id="6240b-3456">Not valid with other invocation flags.</span></span>  
  
-   <span data-ttu-id="6240b-3457">`InvokeMethod` 若要调用一个方法，但不是构造函数或类型初始值设定项。</span><span class="sxs-lookup"><span data-stu-id="6240b-3457">`InvokeMethod` to invoke a method, but not a constructor or a type initializer.</span></span> <span data-ttu-id="6240b-3458">不有效，且`SetField`或`SetProperty`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3458">Not valid with `SetField` or `SetProperty`.</span></span> <span data-ttu-id="6240b-3459">如果`InvokeMethod`其本身而言，指定`BindingFlags.Public`， `BindingFlags.Instance`，和`BindingFlags.Static`自动包括在内。</span><span class="sxs-lookup"><span data-stu-id="6240b-3459">If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.</span></span>  
  
-   <span data-ttu-id="6240b-3460">`GetField` 若要获取字段的值。</span><span class="sxs-lookup"><span data-stu-id="6240b-3460">`GetField` to get the value of a field.</span></span> <span data-ttu-id="6240b-3461">使用无效`SetField`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3461">Not valid with `SetField`.</span></span>  
  
-   <span data-ttu-id="6240b-3462">`SetField` 若要设置字段的值。</span><span class="sxs-lookup"><span data-stu-id="6240b-3462">`SetField` to set the value of a field.</span></span> <span data-ttu-id="6240b-3463">使用无效`GetField`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3463">Not valid with `GetField`.</span></span>  
  
-   <span data-ttu-id="6240b-3464">`GetProperty` 若要获取的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3464">`GetProperty` to get a property.</span></span> <span data-ttu-id="6240b-3465">使用无效`SetProperty`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3465">Not valid with `SetProperty`.</span></span>  
  
-   <span data-ttu-id="6240b-3466">`SetProperty` 若要设置的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3466">`SetProperty` to set a property.</span></span> <span data-ttu-id="6240b-3467">使用无效`GetProperty`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3467">Not valid with `GetProperty`.</span></span>  
  
 <span data-ttu-id="6240b-3468">有关更多信息，请参见<xref:System.Reflection.BindingFlags?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-3468">See <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> for more information.</span></span>  
  
 <span data-ttu-id="6240b-3469">如果下列条件都成立，则将调用一个方法：</span><span class="sxs-lookup"><span data-stu-id="6240b-3469">A method will be invoked if both of the following conditions are true:</span></span>  
  
-   <span data-ttu-id="6240b-3470">方法声明中的参数数量等于的中的参数数目`args`数组 (除非该成员上定义了默认参数和`BindingFlags.OptionalParamBinding`指定)。</span><span class="sxs-lookup"><span data-stu-id="6240b-3470">The number of parameters in the method declaration equals the number of arguments in the `args` array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).</span></span>  
  
-   <span data-ttu-id="6240b-3471">每个自变量的类型可以转换为参数的类型绑定器。</span><span class="sxs-lookup"><span data-stu-id="6240b-3471">The type of each argument can be converted by the binder to the type of the parameter.</span></span>  
  
 <span data-ttu-id="6240b-3472">联编程序将查找所有匹配的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3472">The binder will find all of the matching methods.</span></span> <span data-ttu-id="6240b-3473">这些方法会找到基于请求的绑定类型 (<xref:System.Reflection.BindingFlags>值`InvokeMethod`， `GetProperty`，依此类推)。</span><span class="sxs-lookup"><span data-stu-id="6240b-3473">These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on).</span></span> <span data-ttu-id="6240b-3474">按名称、 数量的参数，并搜索修饰符联编程序中定义的一组筛选的组的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3474">The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.</span></span>  
  
 <span data-ttu-id="6240b-3475">选择该方法后，调用此操作。</span><span class="sxs-lookup"><span data-stu-id="6240b-3475">After the method is selected, it is invoked.</span></span> <span data-ttu-id="6240b-3476">此时，检查可访问性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3476">Accessibility is checked at that point.</span></span> <span data-ttu-id="6240b-3477">搜索可能基于与方法关联的可访问性属性来控制搜索的组的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3477">The search may control which set of methods are searched based upon the accessibility attribute associated with the method.</span></span> <span data-ttu-id="6240b-3478"><xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType>方法的<xref:System.Reflection.Binder>类负责选择要调用的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3478">The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=nameWithType> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked.</span></span> <span data-ttu-id="6240b-3479">默认联编程序选择最精确的匹配。</span><span class="sxs-lookup"><span data-stu-id="6240b-3479">The default binder selects the most specific match.</span></span>  
  
 <span data-ttu-id="6240b-3480">`InvokeMember` 可以使用调用参数具有默认值的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3480">`InvokeMember` can be used to invoke methods with parameters that have default values.</span></span> <span data-ttu-id="6240b-3481">若要将绑定到这些方法，反射需要<xref:System.Reflection.BindingFlags.OptionalParamBinding?displayProperty=nameWithType>来指定。</span><span class="sxs-lookup"><span data-stu-id="6240b-3481">To bind to these methods, Reflection requires <xref:System.Reflection.BindingFlags.OptionalParamBinding?displayProperty=nameWithType> to be specified.</span></span> <span data-ttu-id="6240b-3482">对于具有默认值的参数，可以提供不同的值，也可以提供<xref:System.Reflection.Missing.Value?displayProperty=nameWithType>可以使用默认值。</span><span class="sxs-lookup"><span data-stu-id="6240b-3482">For a parameter that has a default value, you can either supply a different value, or supply <xref:System.Reflection.Missing.Value?displayProperty=nameWithType> to use the default value.</span></span>  
  
 <span data-ttu-id="6240b-3483">例如，考虑 MyMethod 之类的方法 (int，x、 float y = 2.0)。</span><span class="sxs-lookup"><span data-stu-id="6240b-3483">For example, consider a method such as MyMethod(int x, float y = 2.0).</span></span> <span data-ttu-id="6240b-3484">若要调用此方法仅为 mymethod （4） 的第一个参数，传递上面的绑定标志之一并传递两个参数，即第一个参数 4 和`Missing.Value`的第二个参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-3484">To invoke this method with only the first argument as MyMethod(4), pass one of the above binding flags and pass two arguments, namely, 4 for the first argument and `Missing.Value` for the second argument.</span></span> <span data-ttu-id="6240b-3485">除非使用`Missing.Value`，否则不能省略可选参数与`Invoke`方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3485">Unless you use `Missing.Value`, you may not omit optional parameters with the `Invoke` method.</span></span> <span data-ttu-id="6240b-3486">如果必须这样做，使用`InvokeMember`相反。</span><span class="sxs-lookup"><span data-stu-id="6240b-3486">If you must do so, use `InvokeMember` instead.</span></span>  
  
 <span data-ttu-id="6240b-3487">对于完全受信任的代码; 忽略访问限制也就是说，可以访问和通过调用私有构造函数、 方法、 字段和属性<xref:System.Reflection>每当代码是完全受信任。</span><span class="sxs-lookup"><span data-stu-id="6240b-3487">Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through <xref:System.Reflection> whenever the code is fully trusted.</span></span>  
  
 <span data-ttu-id="6240b-3488">可以使用`Type.InvokeMember`若要将字段设置为特定值，通过指定<xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-3488">You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags.SetField?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6240b-3489">例如，如果你想要设置 C 和 F 的类上名为 F 的公共实例字段是`String`，您可以使用如下代码：</span><span class="sxs-lookup"><span data-stu-id="6240b-3489">For example, if you want to set a public instance field named F on class C, and F is a `String`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {"strings new value"}, null, null, null);`  
  
 <span data-ttu-id="6240b-3490">如果 F `String[]`，您可以使用如下代码：</span><span class="sxs-lookup"><span data-stu-id="6240b-3490">If F is a `String[]`, you can use code such as:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {new String[]{"a","z","c","d"}}, null, null, null);`  
  
 <span data-ttu-id="6240b-3491">这将初始化字段 F 到此新的数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-3491">which will initialize the field F to this new array.</span></span> <span data-ttu-id="6240b-3492">此外可以使用`Type.InvokeMember`设置通过使用如下所示的代码提供的值，然后选择下一步值索引数组中的位置：</span><span class="sxs-lookup"><span data-stu-id="6240b-3492">You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:</span></span>  
  
 `typeof(C).InvokeMember("F", BindingFlags.SetField, null, c, new Object[] {1, "b"}, null, null, null);`  
  
 <span data-ttu-id="6240b-3493">这将更改 F 包含字符串"b"数组中的字符串"z"。</span><span class="sxs-lookup"><span data-stu-id="6240b-3493">This will change string "z" in the array that F holds to string "b".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-3494">从开始[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]，可以使用此方法访问非公共成员，如果授予调用方<xref:System.Security.Permissions.ReflectionPermission>与<xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType>标记线程和非公共成员的授予集限制到调用方的授予集或子集其中。</span><span class="sxs-lookup"><span data-stu-id="6240b-3494">Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess?displayProperty=nameWithType> flag and if the grant set of the non-public members is restricted to the caller's grant set, or a subset thereof.</span></span> <span data-ttu-id="6240b-3495">(请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。)</span><span class="sxs-lookup"><span data-stu-id="6240b-3495">(See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)</span></span>  
>   
>  <span data-ttu-id="6240b-3496">若要使用此功能，应用程序应为 [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="6240b-3496">To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-3497"><paramref name="invokeAttr" /> 不包含 <see langword="CreateInstance" />，并且 <paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3497"><paramref name="invokeAttr" /> does not contain <see langword="CreateInstance" /> and <paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-3498"><paramref name="args" /> 和 <paramref name="modifiers" /> 的长度不相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-3498"><paramref name="args" /> and <paramref name="modifiers" /> do not have the same length.</span></span>  
  
<span data-ttu-id="6240b-3499">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3499">-or-</span></span> 
 <span data-ttu-id="6240b-3500"><paramref name="invokeAttr" /> 不是有效的 <see cref="T:System.Reflection.BindingFlags" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3500"><paramref name="invokeAttr" /> is not a valid <see cref="T:System.Reflection.BindingFlags" /> attribute.</span></span>  
  
<span data-ttu-id="6240b-3501">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3501">-or-</span></span> 
 <span data-ttu-id="6240b-3502"><paramref name="invokeAttr" /> 不包含以下某个绑定标志：<see langword="InvokeMethod" />、<see langword="CreateInstance" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> 或 <see langword="SetProperty" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3502"><paramref name="invokeAttr" /> does not contain one of the following binding flags: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="6240b-3503">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3503">-or-</span></span> 
 <span data-ttu-id="6240b-3504"><paramref name="invokeAttr" /> 包含 <see langword="CreateInstance" /> 与 <see langword="InvokeMethod" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> 或 <see langword="SetProperty" /> 的组合。</span><span class="sxs-lookup"><span data-stu-id="6240b-3504"><paramref name="invokeAttr" /> contains <see langword="CreateInstance" /> combined with <see langword="InvokeMethod" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" />, or <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="6240b-3505">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3505">-or-</span></span> 
 <span data-ttu-id="6240b-3506"><paramref name="invokeAttr" /> 同时包含 <see langword="GetField" /> 和 <see langword="SetField" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3506"><paramref name="invokeAttr" /> contains both <see langword="GetField" /> and <see langword="SetField" />.</span></span>  
  
<span data-ttu-id="6240b-3507">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3507">-or-</span></span> 
 <span data-ttu-id="6240b-3508"><paramref name="invokeAttr" /> 同时包含 <see langword="GetProperty" /> 和 <see langword="SetProperty" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3508"><paramref name="invokeAttr" /> contains both <see langword="GetProperty" /> and <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="6240b-3509">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3509">-or-</span></span> 
 <span data-ttu-id="6240b-3510"><paramref name="invokeAttr" /> 包含 <see langword="InvokeMethod" /> 与 <see langword="SetField" /> 或 <see langword="SetProperty" /> 的组合。</span><span class="sxs-lookup"><span data-stu-id="6240b-3510"><paramref name="invokeAttr" /> contains <see langword="InvokeMethod" /> combined with <see langword="SetField" /> or <see langword="SetProperty" />.</span></span>  
  
<span data-ttu-id="6240b-3511">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3511">-or-</span></span> 
 <span data-ttu-id="6240b-3512"><paramref name="invokeAttr" /> 包含 <see langword="SetField" />，并且 <paramref name="args" /> 具有多个元素。</span><span class="sxs-lookup"><span data-stu-id="6240b-3512"><paramref name="invokeAttr" /> contains <see langword="SetField" /> and <paramref name="args" /> has more than one element.</span></span>  
  
<span data-ttu-id="6240b-3513">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3513">-or-</span></span> 
<span data-ttu-id="6240b-3514">命名的参数数组大于参数数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-3514">The named parameter array is larger than the argument array.</span></span>  
  
<span data-ttu-id="6240b-3515">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3515">-or-</span></span> 
<span data-ttu-id="6240b-3516">对 COM 对象调用了此方法，但以下绑定标志中有一个未传入：<see langword="BindingFlags.InvokeMethod" />、<see langword="BindingFlags.GetProperty" />、<see langword="BindingFlags.SetProperty" />、<see langword="BindingFlags.PutDispProperty" /> 或 <see langword="BindingFlags.PutRefDispProperty" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3516">This method is called on a COM object and one of the following binding flags was not passed in: <see langword="BindingFlags.InvokeMethod" />, <see langword="BindingFlags.GetProperty" />, <see langword="BindingFlags.SetProperty" />, <see langword="BindingFlags.PutDispProperty" />, or <see langword="BindingFlags.PutRefDispProperty" />.</span></span>  
  
<span data-ttu-id="6240b-3517">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3517">-or-</span></span> 
<span data-ttu-id="6240b-3518">其中一个命名参数数组包含一个值为 <see langword="null" /> 的字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-3518">One of the named parameter arrays contains a string that is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="6240b-3519">指定的成员是类初始值设定项。</span><span class="sxs-lookup"><span data-stu-id="6240b-3519">The specified member is a class initializer.</span></span></exception>
        <exception cref="T:System.MissingFieldException"><span data-ttu-id="6240b-3520">找不到此字段或属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3520">The field or property cannot be found.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="6240b-3521">找不到与 <paramref name="args" /> 中的参数匹配的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3521">No method can be found that matches the arguments in <paramref name="args" />.</span></span>  
  
<span data-ttu-id="6240b-3522">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3522">-or-</span></span> 
<span data-ttu-id="6240b-3523">找不到具有 <paramref name="namedParameters" /> 中提供的参数名称的成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-3523">No member can be found that has the argument names supplied in <paramref name="namedParameters" />.</span></span>  
  
<span data-ttu-id="6240b-3524">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-3524">-or-</span></span> 
<span data-ttu-id="6240b-3525">当前 <see cref="T:System.Type" /> 对象表示包含开放类型参数的类型，也就是说，<see cref="P:System.Type.ContainsGenericParameters" /> 将返回 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3525">The current <see cref="T:System.Type" /> object represents a type that contains open type parameters, that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetException"><span data-ttu-id="6240b-3526">不能在 <paramref name="target" /> 上调用指定的成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-3526">The specified member cannot be invoked on <paramref name="target" />.</span></span></exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException"><span data-ttu-id="6240b-3527">多个方法与绑定条件匹配。</span><span class="sxs-lookup"><span data-stu-id="6240b-3527">More than one method matches the binding criteria.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6240b-3528">由 <paramref name="name" /> 表示的方法具有一个或多个未指定的泛型类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-3528">The method represented by <paramref name="name" /> has one or more unspecified generic type parameters.</span></span> <span data-ttu-id="6240b-3529">也就是说，此方法的 <see cref="P:System.Reflection.MethodBase.ContainsGenericParameters" /> 属性将返回 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3529">That is, the method's <see cref="P:System.Reflection.MethodBase.ContainsGenericParameters" /> property returns <see langword="true" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="6240b-3530">用于访问非公共成员，而不考虑其授予集。</span><span class="sxs-lookup"><span data-stu-id="6240b-3530">for accessing non-public members regardless of their grant set.</span></span> <span data-ttu-id="6240b-3531">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="6240b-3531">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="6240b-3532">若要调用非托管的代码。</span><span class="sxs-lookup"><span data-stu-id="6240b-3532">to call unmanaged code.</span></span> <span data-ttu-id="6240b-3533">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="6240b-3533">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Reflection.Binder" />
        <altmember cref="P:System.Type.DefaultBinder" />
        <altmember cref="T:System.Reflection.BindingFlags" />
        <altmember cref="T:System.Reflection.ParameterModifier" />
        <altmember cref="T:System.Reflection.ParameterAttributes" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Security.Permissions.ReflectionPermission" />
      </Docs>
    </Member>
    <Member MemberName="IsAbstract">
      <MemberSignature Language="C#" Value="public bool IsAbstract { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAbstract" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAbstract" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAbstract As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAbstract { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAbstract : bool" Usage="System.Type.IsAbstract" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAbstract</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3534">获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否为抽象的并且必须被重写。</span><span class="sxs-lookup"><span data-stu-id="6240b-3534">Gets a value indicating whether the <see cref="T:System.Type" /> is abstract and must be overridden.</span></span></summary>
        <value><span data-ttu-id="6240b-3535">如果 <see cref="T:System.Type" /> 是抽象的，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3535"><see langword="true" /> if the <see cref="T:System.Type" /> is abstract; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3536"><xref:System.Type.IsAbstract%2A>属性返回`true`在以下情况下：</span><span class="sxs-lookup"><span data-stu-id="6240b-3536">The <xref:System.Type.IsAbstract%2A> property returns `true` in the following cases:</span></span>  
  
-   <span data-ttu-id="6240b-3537">当前类型是抽象的;也就是说，它不能实例化，但仅可用作派生类的基类。</span><span class="sxs-lookup"><span data-stu-id="6240b-3537">The current type is abstract; that is, it cannot be instantiated, but can only serve as the base class for derived classes.</span></span> <span data-ttu-id="6240b-3538">在 C# 中，抽象类标记有[抽象](~/docs/csharp/language-reference/keywords/abstract.md)关键字; 在 Visual Basic 中，它们用来标记[MustInherit](~/docs/visual-basic/language-reference/modifiers/mustinherit.md)关键字。</span><span class="sxs-lookup"><span data-stu-id="6240b-3538">In C#, abstract classes are marked with the [abstract](~/docs/csharp/language-reference/keywords/abstract.md) keyword; in Visual Basic, they are marked with the [MustInherit](~/docs/visual-basic/language-reference/modifiers/mustinherit.md) keyword.</span></span>  
  
-   <span data-ttu-id="6240b-3539">当前类型是接口。</span><span class="sxs-lookup"><span data-stu-id="6240b-3539">The current type is an interface.</span></span>  
  
 <span data-ttu-id="6240b-3540">如果当前<xref:System.Type>表示泛型类型或泛型方法定义中的类型参数，此属性始终返回`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3540">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3541">下面的示例创建的数组<xref:System.Type>表示以下类型的对象： 包含类型返回`true`指定的对象是否`abstract`; 否则为它将返回`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3541">The following example creates an array of <xref:System.Type> objects that represent the following types:contains type returns `true` if the specified object is `abstract`; otherwise, it returns `false`.</span></span>  
  
-   <span data-ttu-id="6240b-3542">`AbstractClass`一个抽象类 (类标记为`abstract`C# 中和`MustInherit`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="6240b-3542">`AbstractClass`, an abstract class (a class marked as `abstract` in C# and `MustInherit` in Visual Basic).</span></span>  
  
-   <span data-ttu-id="6240b-3543">`DerivedClass`继承的类`AbstractClass`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3543">`DerivedClass`, a class that inherits from `AbstractClass`.</span></span>  
  
-   <span data-ttu-id="6240b-3544">`SingleClass`非可继承的类。</span><span class="sxs-lookup"><span data-stu-id="6240b-3544">`SingleClass`, a non-inheritable class.</span></span> <span data-ttu-id="6240b-3545">它被定义为`sealed`C# 中和`NotInheritable`在 Visual Basic 中。</span><span class="sxs-lookup"><span data-stu-id="6240b-3545">It is defined as `sealed` in C# and `NotInheritable` in Visual Basic.</span></span>  
  
-   <span data-ttu-id="6240b-3546">`ITypeInfo`一个接口。</span><span class="sxs-lookup"><span data-stu-id="6240b-3546">`ITypeInfo`, an interface.</span></span>  
  
-   <span data-ttu-id="6240b-3547">`ImplementingClass`实现的类`ITypeInfo`接口。</span><span class="sxs-lookup"><span data-stu-id="6240b-3547">`ImplementingClass`, a class that implements the `ITypeInfo` interface.</span></span>  
  
 <span data-ttu-id="6240b-3548">该方法返回`true`仅对`AbstractClass`，抽象类，和`ITypeInfo`，该接口。</span><span class="sxs-lookup"><span data-stu-id="6240b-3548">The method returns `true` only for `AbstractClass`, the abstract class, and `ITypeInfo`, the interface.</span></span>  
  
 [!code-csharp[System.Type.IsAbstract#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isabstract/cs/isabstract1.cs#1)]
 [!code-vb[System.Type.IsAbstract#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isabstract/vb/isabstract1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsAnsiClass">
      <MemberSignature Language="C#" Value="public bool IsAnsiClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnsiClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAnsiClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAnsiClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAnsiClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAnsiClass : bool" Usage="System.Type.IsAnsiClass" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAnsiClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3549">获取一个值，该值指示是否为 <see langword="AnsiClass" /> 选择了字符串格式属性 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3549">Gets a value indicating whether the string format attribute <see langword="AnsiClass" /> is selected for the <see cref="T:System.Type" />.</span></span></summary>
        <value><span data-ttu-id="6240b-3550">如果为 <see langword="true" /> 选择了字符串格式属性 <see langword="AnsiClass" />，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3550"><see langword="true" /> if the string format attribute <see langword="AnsiClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3551"><xref:System.Reflection.TypeAttributes.StringFormatMask>选择字符串格式属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3551">The <xref:System.Reflection.TypeAttributes.StringFormatMask> selects the string format attributes.</span></span> <span data-ttu-id="6240b-3552">通过定义应如何解释字符串，字符串格式属性增强互操作性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3552">The string format attributes enhance interoperability by defining how strings should be interpreted.</span></span>  
  
 <span data-ttu-id="6240b-3553">如果当前<xref:System.Type>表示泛型类型，此属性与从中构造类型的泛型类型定义。</span><span class="sxs-lookup"><span data-stu-id="6240b-3553">If the current <xref:System.Type> represents a generic type, this property pertains to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="6240b-3554">例如，如果当前<xref:System.Type>表示`MyGenericType<int>`(`MyGenericType(Of Integer)`在 Visual Basic 中)，此属性的值由`MyGenericType<T>`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3554">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="6240b-3555">如果当前<xref:System.Type>表示类型参数的泛型类型，此属性始终返回`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3555">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3556">下面的示例获取字段信息，并检查`AnsiClass`属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3556">The following example gets the field information and checks for the `AnsiClass` attribute.</span></span>  
  
 [!code-cpp[Type_IsAnsiClass#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsAnsiClass/CPP/Type_IsAnsiClass.cpp#1)]
 [!code-csharp[Type_IsAnsiClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsAnsiClass/CS/type_isansiclass.cs#1)]
 [!code-vb[Type_IsAnsiClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsAnsiClass/VB/type_isansiclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsUnicodeClass" />
        <altmember cref="P:System.Type.IsAutoClass" />
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public bool IsArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArray" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsArray" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsArray : bool" Usage="System.Type.IsArray" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsArray</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3557">获取一个值，该值指示类型是否为数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-3557">Gets a value that indicates whether the type is an array.</span></span></summary>
        <value><span data-ttu-id="6240b-3558">如果当前类型是数组，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3558"><see langword="true" /> if the current type is an array; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3559"><xref:System.Type.IsArray%2A>属性返回`false`为<xref:System.Array>类。</span><span class="sxs-lookup"><span data-stu-id="6240b-3559">The <xref:System.Type.IsArray%2A> property returns `false` for the <xref:System.Array> class.</span></span> <span data-ttu-id="6240b-3560">它还会返回`false`当前实例是否<xref:System.Type>对象，表示集合类型或接口，可使用集合，如<xref:System.Collections.IEnumerable>或<xref:System.Collections.Generic.IEnumerable%601>。</span><span class="sxs-lookup"><span data-stu-id="6240b-3560">It also returns `false` if the current instance is a <xref:System.Type> object that represents a collection type or an interface designed to work with collections, such as <xref:System.Collections.IEnumerable> or <xref:System.Collections.Generic.IEnumerable%601>.</span></span>  
  
 <span data-ttu-id="6240b-3561">若要检查的数组，请使用代码，如所示：</span><span class="sxs-lookup"><span data-stu-id="6240b-3561">To check for an array, use code such as:</span></span>  
  
```csharp  
typeof(Array).IsAssignableFrom(type)  
```  
  
```vb  
GetType(Array).IsAssignableFrom(type)  
```  
  
 <span data-ttu-id="6240b-3562">如果当前类型表示泛型类型或泛型类型或泛型方法定义中的类型参数，此属性始终返回`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3562">If the current type represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="6240b-3563">此属性是只读的。</span><span class="sxs-lookup"><span data-stu-id="6240b-3563">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3564">下面的示例演示了如何使用<xref:System.Type.IsArray%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3564">The following example demonstrates using the <xref:System.Type.IsArray%2A> property.</span></span>  
  
 [!code-csharp[System.Type.IsArray#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isarray/cs/isarray2.cs#1)]
 [!code-vb[System.Type.IsArray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isarray/vb/isarray2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsArrayImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsArrayImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsArrayImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsArrayImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsArrayImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsArrayImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsArrayImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsArrayImpl : unit -&gt; bool" Usage="type.IsArrayImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-3565">在派生类中重写时，实现 <see cref="P:System.Type.IsArray" /> 属性并确定 <see cref="T:System.Type" /> 是否为数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-3565">When overridden in a derived class, implements the <see cref="P:System.Type.IsArray" /> property and determines whether the <see cref="T:System.Type" /> is an array.</span></span></summary>
        <returns><span data-ttu-id="6240b-3566">如果 <see langword="true" /> 是数组，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3566"><see langword="true" /> if the <see cref="T:System.Type" /> is an array; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3567">实例<xref:System.Array>类必须返回`false`因为它是一个对象，而不是数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-3567">An instance of the <xref:System.Array> class must return `false` because it is an object, not an array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3568">以下示例重写`IsArrayImpl`中的方法`MyTypeDelegator`类检查，如果变量是一个数组，并显示结果。</span><span class="sxs-lookup"><span data-stu-id="6240b-3568">The following example overrides the `IsArrayImpl` method in the `MyTypeDelegator` class, checks if a variable is an array, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsArrayImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsArrayImpl/CPP/type_isarrayimpl.cpp#1)]
 [!code-csharp[Type_IsArrayImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsArrayImpl/CS/type_isarrayimpl.cs#1)]
 [!code-vb[Type_IsArrayImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsArrayImpl/VB/type_isarrayimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsArray" />
      </Docs>
    </Member>
    <Member MemberName="IsAssignableFrom">
      <MemberSignature Language="C#" Value="public virtual bool IsAssignableFrom (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAssignableFrom(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsAssignableFrom(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsAssignableFrom (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsAssignableFrom(Type ^ c);" />
      <MemberSignature Language="F#" Value="abstract member IsAssignableFrom : Type -&gt; bool&#xA;override this.IsAssignableFrom : Type -&gt; bool" Usage="type.IsAssignableFrom c" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.IsAssignableFrom(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="6240b-3569">要与当前类型进行比较的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3569">The type to compare with the current type.</span></span></param>
        <summary><span data-ttu-id="6240b-3570">确定指定类型的实例是否能分配给当前类型实例。</span><span class="sxs-lookup"><span data-stu-id="6240b-3570">Determines whether an instance of a specified type can be assigned to an instance of the current type.</span></span></summary>
        <returns><span data-ttu-id="6240b-3571">如果满足下列任一条件，则为 <see langword="true" />：</span><span class="sxs-lookup"><span data-stu-id="6240b-3571"><see langword="true" /> if any of the following conditions is true:</span></span> <span data-ttu-id="6240b-3572">
-   <paramref name="c" /> 和当前实例表示相同类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3572">
-   <paramref name="c" /> and the current instance represent the same type.</span></span>  
  <span data-ttu-id="6240b-3573">
-   <paramref name="c" /> 是从当前实例直接或间接派生的。</span><span class="sxs-lookup"><span data-stu-id="6240b-3573">
-   <paramref name="c" /> is derived either directly or indirectly from the current instance.</span></span> <span data-ttu-id="6240b-3574">如果继承于当前实例，则 <paramref name="c" /> 是从当前实例直接派生的；如果继承于从当前实例继承的接连一个或多个类，则 <paramref name="c" /> 是从当前实例间接派生的。</span><span class="sxs-lookup"><span data-stu-id="6240b-3574"><paramref name="c" /> is derived directly from the current instance if it inherits from the current instance; <paramref name="c" /> is derived indirectly from the current instance if it inherits from a succession of one or more classes that inherit from the current instance.</span></span>  
  
<span data-ttu-id="6240b-3575">-   当前实例是 <paramref name="c" /> 实现的一个接口。</span><span class="sxs-lookup"><span data-stu-id="6240b-3575">-   The current instance is an interface that <paramref name="c" /> implements.</span></span>  
  <span data-ttu-id="6240b-3576">
-   <paramref name="c" /> 是一个泛型类型参数，并且当前实例表示 <paramref name="c" /> 的约束之一。</span><span class="sxs-lookup"><span data-stu-id="6240b-3576">
-   <paramref name="c" /> is a generic type parameter, and the current instance represents one of the constraints of <paramref name="c" />.</span></span>  
  
<span data-ttu-id="6240b-3577">在以下示例中，当前实例是表示 <see cref="T:System.IO.Stream" /> 类的 <see cref="T:System.Type" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-3577">In the following example, the current instance is a <see cref="T:System.Type" /> object that represents the <see cref="T:System.IO.Stream" /> class.</span></span> <span data-ttu-id="6240b-3578"><c>GenericWithConstraint</c> 是一种泛型类型，其泛型类型参数必须为 <see cref="T:System.IO.Stream" /> 类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3578"><c>GenericWithConstraint</c> is a generic type whose generic type parameter must be of type    <see cref="T:System.IO.Stream" />.</span></span> <span data-ttu-id="6240b-3579">将其泛型类型参数传递到 <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> 表示可以将泛型类型参数的实例分配给 <see cref="T:System.IO.Stream" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-3579">Passing its generic type parameter to the <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> indicates that  an instance of the generic type parameter can be assigned to an <see cref="T:System.IO.Stream" /> object.</span></span>  
  
<span data-ttu-id="6240b-3580">[!code-csharp[System.Type.IsAssignableFrom#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom2.cs#2)] [!code-vb[System.Type.IsAssignableFrom#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom2.vb#2)]</span><span class="sxs-lookup"><span data-stu-id="6240b-3580">[!code-csharp[System.Type.IsAssignableFrom#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom2.cs#2)] [!code-vb[System.Type.IsAssignableFrom#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom2.vb#2)]</span></span> <span data-ttu-id="6240b-3581">
-   <paramref name="c" /> 表示一个值类型，并且当前实例表示 <c>Nullable&lt;c&gt;</c>（在 Visual Basic 中为 <c>Nullable(Of c)</c>）。</span><span class="sxs-lookup"><span data-stu-id="6240b-3581">
-   <paramref name="c" /> represents a value type, and the current instance represents <c>Nullable&lt;c&gt;</c> (<c>Nullable(Of c)</c> in Visual Basic).</span></span>  
  
 <span data-ttu-id="6240b-3582">如果不满足上述任何一个条件或者 <paramref name="c" /> 为 <see langword="false" />，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3582"><see langword="false" /> if none of these conditions are true, or if <paramref name="c" /> is <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3583"><xref:System.Type.IsAssignableFrom%2A>方法可以用于确定实例是否`c`可以分配给当前类型的实例，方法是最有用的在处理其类型在设计时未知的对象时，适用于条件赋值，如下面的示例演示。</span><span class="sxs-lookup"><span data-stu-id="6240b-3583">The <xref:System.Type.IsAssignableFrom%2A> method can be used to determine whether an instance of `c` can be assigned to an instance of the current type, The method is most useful when you are handling objects whose types are not known at design time and allows for conditional assignment, as the following example shows.</span></span>  
  
 [!code-csharp[System.Type.IsAssignableFrom#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom3.cs#3)]
 [!code-vb[System.Type.IsAssignableFrom#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom3.vb#3)]  
  
 <span data-ttu-id="6240b-3584">此方法这样可以确保，一行代码，如以下将在运行时执行而不引发<xref:System.InvalidCastException>异常或类似的异常：</span><span class="sxs-lookup"><span data-stu-id="6240b-3584">This method thus ensures that a line of code like the following will execute at runtime without throwing an <xref:System.InvalidCastException> exception or a similar exception:</span></span>  
  
 [!code-csharp[System.Type.IsAssignableFrom#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom3.cs#4)]
 [!code-vb[System.Type.IsAssignableFrom#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom3.vb#4)]  
  
 <span data-ttu-id="6240b-3585">此方法由派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="6240b-3585">This method can be overridden by a derived class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-3586">泛型类型定义不能从封闭式构造类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3586">A generic type definition is not assignable from a closed constructed type.</span></span> <span data-ttu-id="6240b-3587">也就是说，不能将封闭式构造的类型分配`MyGenericList<int>`(`MyGenericList(Of Integer)`在 Visual Basic 中) 为类型的变量`MyGenericList<T>`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3587">That is, you cannot assign the closed constructed type `MyGenericList<int>` (`MyGenericList(Of Integer)` in Visual Basic) to a variable of type `MyGenericList<T>`.</span></span>  
  
 <span data-ttu-id="6240b-3588">如果`c`参数的类型是<xref:System.Reflection.Emit.TypeBuilder>，则结果根据是要生成的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3588">If the `c` parameter is of type <xref:System.Reflection.Emit.TypeBuilder>, the result is based on the type that is to be built.</span></span> <span data-ttu-id="6240b-3589">下面的代码示例演示此使用名为的内置的类型`B`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3589">The following code example demonstrates this using a built type named `B`.</span></span>  
  
 [!code-csharp[System.Type.IsAssignableFrom#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/isassignablefrom_ex1.cs#1)]
 [!code-vb[System.Type.IsAssignableFrom#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/isassignablefrom_ex1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3590">下面的示例演示`IsAssignableFrom`方法使用定义的类、 整数数组和泛型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3590">The following example demonstrates the `IsAssignableFrom` method using defined classes, integer arrays, and generics.</span></span>  
  
 [!code-cpp[TestIsAssignableFrom#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestIsAssignableFrom/cpp/testisassignablefrom.cpp#1)]
 [!code-csharp[TestIsAssignableFrom#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsAssignableFrom/CS/testisassignablefrom.cs#1)]
 [!code-vb[TestIsAssignableFrom#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsAssignableFrom/VB/testisassignablefrom.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAutoClass">
      <MemberSignature Language="C#" Value="public bool IsAutoClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutoClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAutoClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAutoClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAutoClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAutoClass : bool" Usage="System.Type.IsAutoClass" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAutoClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3591">获取一个值，该值指示是否为 <see langword="AutoClass" /> 选择了字符串格式属性 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3591">Gets a value indicating whether the string format attribute <see langword="AutoClass" /> is selected for the <see cref="T:System.Type" />.</span></span></summary>
        <value><span data-ttu-id="6240b-3592">如果为 <see langword="true" /> 选择了字符串格式属性 <see langword="AutoClass" />，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3592"><see langword="true" /> if the string format attribute <see langword="AutoClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3593"><xref:System.Reflection.TypeAttributes.StringFormatMask>选择字符串格式属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3593">The <xref:System.Reflection.TypeAttributes.StringFormatMask> selects the string format attributes.</span></span> <span data-ttu-id="6240b-3594">通过定义应如何解释字符串，字符串格式属性增强互操作性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3594">The string format attributes enhance interoperability by defining how strings should be interpreted.</span></span>  
  
 <span data-ttu-id="6240b-3595">如果当前<xref:System.Type>表示构造泛型类型，此属性适用于从其构造类型的泛型类型定义。</span><span class="sxs-lookup"><span data-stu-id="6240b-3595">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="6240b-3596">例如，如果当前<xref:System.Type>表示`MyGenericType<int>`(`MyGenericType(Of Integer)`在 Visual Basic 中)，此属性的值由`MyGenericType<T>`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3596">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="6240b-3597">如果当前<xref:System.Type>表示类型参数的泛型类型，此属性始终返回`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3597">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsAnsiClass" />
        <altmember cref="P:System.Type.IsUnicodeClass" />
      </Docs>
    </Member>
    <Member MemberName="IsAutoLayout">
      <MemberSignature Language="C#" Value="public bool IsAutoLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutoLayout" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsAutoLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAutoLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAutoLayout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAutoLayout : bool" Usage="System.Type.IsAutoLayout" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsAutoLayout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3598">获取指示当前类型的字段是否由公共语言运行时自动放置的值。</span><span class="sxs-lookup"><span data-stu-id="6240b-3598">Gets a value indicating whether the fields of the current type are laid out automatically by the common language runtime.</span></span></summary>
        <value><span data-ttu-id="6240b-3599">如果当前类型的 <see langword="true" /> 属性包括 <see cref="P:System.Type.Attributes" />，则为 <see cref="F:System.Reflection.TypeAttributes.AutoLayout" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3599"><see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.AutoLayout" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3600">为方便起见提供此属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3600">This property is provided as a convenience.</span></span> <span data-ttu-id="6240b-3601">或者，可以使用<xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType>枚举值来选择类型布局属性，然后测试是否<xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>设置。</span><span class="sxs-lookup"><span data-stu-id="6240b-3601">Alternatively, you can use the <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> is set.</span></span> <span data-ttu-id="6240b-3602"><xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>，<xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>，和<xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType>枚举值指示该类型的字段在内存中布局的方式。</span><span class="sxs-lookup"><span data-stu-id="6240b-3602">The <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>,<xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, and <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> enumeration values indicate the way the fields of the type are laid out in memory.</span></span>  
  
 <span data-ttu-id="6240b-3603">对于动态类型，可以指定<xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>创建类型时。</span><span class="sxs-lookup"><span data-stu-id="6240b-3603">For dynamic types, you can specify <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType> when you create the type.</span></span> <span data-ttu-id="6240b-3604">在代码中，将应用<xref:System.Runtime.InteropServices.StructLayoutAttribute>属性与<xref:System.Runtime.InteropServices.LayoutKind.Auto?displayProperty=nameWithType>枚举值的类型，若要让运行时确定适当的方式进行布局的类。</span><span class="sxs-lookup"><span data-stu-id="6240b-3604">In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind.Auto?displayProperty=nameWithType> enumeration value to the type, to let the runtime determine the appropriate way to lay out the class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-3605">不能使用<xref:System.Reflection.MemberInfo.GetCustomAttributes%2A>方法，以确定是否<xref:System.Runtime.InteropServices.StructLayoutAttribute>应用于类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3605">You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.</span></span>  
  
 <span data-ttu-id="6240b-3606">如果当前<xref:System.Type>表示构造泛型类型，此属性适用于从其构造类型的泛型类型定义。</span><span class="sxs-lookup"><span data-stu-id="6240b-3606">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="6240b-3607">例如，如果当前<xref:System.Type>表示`MyGenericType<int>`(`MyGenericType(Of Integer)`在 Visual Basic 中)，此属性的值由 `MyGenericType<T>.`</span><span class="sxs-lookup"><span data-stu-id="6240b-3607">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>.`</span></span>  
  
 <span data-ttu-id="6240b-3608">如果当前<xref:System.Type>表示泛型类型或泛型方法定义中的类型参数，此属性始终返回`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3608">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3609">下面的示例创建类型的实例，并显示<xref:System.Type.IsAutoLayout%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3609">The following example creates an instance of the type and displays the <xref:System.Type.IsAutoLayout%2A> property.</span></span>  
  
 [!code-cpp[Type_IsAutoLayout#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsAutoLayout/CPP/type_isautolayout.cpp#1)]
 [!code-csharp[Type_IsAutoLayout#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsAutoLayout/CS/type_isautolayout.cs#1)]
 [!code-vb[Type_IsAutoLayout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsAutoLayout/VB/type_isautolayout.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsLayoutSequential" />
        <altmember cref="P:System.Type.IsExplicitLayout" />
        <related type="Article" href="~/docs/standard/metadata-and-self-describing-components.md"><span data-ttu-id="6240b-3610">元数据和自描述组件</span><span class="sxs-lookup"><span data-stu-id="6240b-3610">Metadata and Self-Describing Components</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsByRef">
      <MemberSignature Language="C#" Value="public bool IsByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRef" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsByRef" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsByRef As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsByRef { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsByRef : bool" Usage="System.Type.IsByRef" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsByRef</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3611">获取一个值，该值指示 <see cref="T:System.Type" /> 是否由引用传递。</span><span class="sxs-lookup"><span data-stu-id="6240b-3611">Gets a value indicating whether the <see cref="T:System.Type" /> is passed by reference.</span></span></summary>
        <value><span data-ttu-id="6240b-3612">如果 <see cref="T:System.Type" /> 按引用传递，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3612"><see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3613">若要获取实际的类型，取消引用通过引用传递的类型，然后调用<xref:System.Type.GetElementType%2A>对该类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3613">To get to the actual type, dereference the type that was passed by reference, and then call <xref:System.Type.GetElementType%2A> on that type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3614">下面的示例演示使用的`IsByRef`要检查是否按引用传递的指定的类型属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3614">The following example demonstrates a use of the `IsByRef` property to check whether a specified type is passed by reference.</span></span> <span data-ttu-id="6240b-3615">该示例定义类`MyTypeDelegator`，值将覆盖`HasElementTypeImpl`方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3615">The example defines the class `MyTypeDelegator`, which overrides the `HasElementTypeImpl` method.</span></span> <span data-ttu-id="6240b-3616">主类将检查`HasElementType`属性并显示的元素类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3616">The main class checks for the `HasElementType` property and displays the element type.</span></span>  
  
 [!code-cpp[Type_HasElementTypeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementTypeImpl/CPP/type_haselementtypeimpl.cpp#1)]
 [!code-csharp[Type_HasElementTypeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementTypeImpl/CS/type_haselementtypeimpl.cs#1)]
 [!code-vb[Type_HasElementTypeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementTypeImpl/VB/type_haselementtypeimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsByRefImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsByRefImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsByRefImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsByRefImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsByRefImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsByRefImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsByRefImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsByRefImpl : unit -&gt; bool" Usage="type.IsByRefImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-3617">在派生类中重写时，实现 <see cref="P:System.Type.IsByRef" /> 属性并确定<see cref="T:System.Type" /> 是否通过引用传递。</span><span class="sxs-lookup"><span data-stu-id="6240b-3617">When overridden in a derived class, implements the <see cref="P:System.Type.IsByRef" /> property and determines whether the <see cref="T:System.Type" /> is passed by reference.</span></span></summary>
        <returns><span data-ttu-id="6240b-3618">如果 <see cref="T:System.Type" /> 按引用传递，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3618"><see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.IsByRef" />
      </Docs>
    </Member>
    <Member MemberName="IsByRefLike">
      <MemberSignature Language="C#" Value="public virtual bool IsByRefLike { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRefLike" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsByRefLike" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsByRefLike As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsByRefLike { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsByRefLike : bool" Usage="System.Type.IsByRefLike" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClass">
      <MemberSignature Language="C#" Value="public bool IsClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClass : bool" Usage="System.Type.IsClass" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3619">获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否是一个类或委托；即，不是值类型或接口。</span><span class="sxs-lookup"><span data-stu-id="6240b-3619">Gets a value indicating whether the <see cref="T:System.Type" /> is a class or a delegate; that is, not a value type or interface.</span></span></summary>
        <value><span data-ttu-id="6240b-3620">如果 <see cref="T:System.Type" /> 是类，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3620"><see langword="true" /> if the <see cref="T:System.Type" /> is a class; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3621">此属性返回`true`为委托或类。</span><span class="sxs-lookup"><span data-stu-id="6240b-3621">This property returns `true` for classes as well as delegates.</span></span> <span data-ttu-id="6240b-3622">它将返回`false`为的值类型 （结构和枚举） 即使它们装箱。</span><span class="sxs-lookup"><span data-stu-id="6240b-3622">It returns `false` for value types (for structures and enumerations) even if they are boxed.</span></span>  
  
 <span data-ttu-id="6240b-3623">如果当前<xref:System.Type>表示泛型类型或泛型方法定义中的类型参数，此属性始终返回`true`。如果当前<xref:System.Type>表示构造泛型类型，此属性返回`true`如果泛型类型定义为类定义; 也就是说，它不定义接口或值类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3623">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `true`.If the current <xref:System.Type> represents a constructed generic type, this property returns `true` if the generic type definition is a class definition; that is, it does not define an interface or a value type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-3624">此属性返回`true`有关`Type`实例，分别代表<xref:System.Enum>和<xref:System.ValueType>类。</span><span class="sxs-lookup"><span data-stu-id="6240b-3624">This property returns `true` for `Type` instances that represent the <xref:System.Enum> and <xref:System.ValueType> classes.</span></span> <span data-ttu-id="6240b-3625">这两个类分别是枚举的基类型和值类型，但它们不是枚举或值类型本身。</span><span class="sxs-lookup"><span data-stu-id="6240b-3625">These two classes are the base types for enumerations and value types, respectively, but they are not enumerations or value types themselves.</span></span> <span data-ttu-id="6240b-3626">有关详细信息，请参阅<xref:System.Type.IsValueType%2A>和<xref:System.Type.IsEnum%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3626">For more information, see the <xref:System.Type.IsValueType%2A> and <xref:System.Type.IsEnum%2A> properties.</span></span>  
  
 <span data-ttu-id="6240b-3627"><xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType>枚举值可区分类型声明为类或接口。但是，类和值类型都与标记<xref:System.Reflection.TypeAttributes.Class?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3627">The <xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType> enumeration value  distinguishes a type declaration as class or interface.However, both classes and value types are marked with the <xref:System.Reflection.TypeAttributes.Class?displayProperty=nameWithType> attribute.</span></span> <span data-ttu-id="6240b-3628">如果检索到的类型的特性属性，然后使用值<xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType>值以确定类型是否为类而不是值类型，还必须调用<xref:System.Type.IsValueType%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3628">If you retrieve the value of a type's Attributes property and use the <xref:System.Reflection.TypeAttributes.ClassSemanticsMask?displayProperty=nameWithType> value to determine whether a type is a class instead of a value type, you must also call the <xref:System.Type.IsValueType%2A> property.</span></span> <span data-ttu-id="6240b-3629">有关示例<xref:System.Reflection.TypeAttributes>枚举包含的其他信息，以及 anexample。</span><span class="sxs-lookup"><span data-stu-id="6240b-3629">The example for the <xref:System.Reflection.TypeAttributes> enumeration contains additional information as well as anexample.</span></span>  
  
 <span data-ttu-id="6240b-3630">此属性是只读的。</span><span class="sxs-lookup"><span data-stu-id="6240b-3630">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3631">以下示例创建类型的实例，并指示类型是否是一个类。</span><span class="sxs-lookup"><span data-stu-id="6240b-3631">The following example creates an instance of a type and indicates whether the type is a class.</span></span>  
  
 [!code-cpp[Type_IsClass#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsClass/CPP/type_isclass.cpp#1)]
 [!code-csharp[Type_IsClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsClass/CS/type_isclass.cs#1)]
 [!code-vb[Type_IsClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsClass/VB/type_isclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsInterface" />
        <altmember cref="P:System.Type.IsValueType" />
        <altmember cref="F:System.Reflection.TypeAttributes.ClassSemanticsMask" />
      </Docs>
    </Member>
    <Member MemberName="IsCOMObject">
      <MemberSignature Language="C#" Value="public bool IsCOMObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCOMObject" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsCOMObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCOMObject As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCOMObject { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCOMObject : bool" Usage="System.Type.IsCOMObject" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsCOMObject</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3632">获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否为 COM 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-3632">Gets a value indicating whether the <see cref="T:System.Type" /> is a COM object.</span></span></summary>
        <value><span data-ttu-id="6240b-3633">如果 <see langword="true" /> 为 COM 对象，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3633"><see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3634">此方法返回`false`的 COM 接口，因为它们不是对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-3634">This method returns `false` for COM interfaces because they are not objects.</span></span> <span data-ttu-id="6240b-3635">可以通过 Microsoft.NET Framework 对象实现 COM 接口。</span><span class="sxs-lookup"><span data-stu-id="6240b-3635">COM interfaces can be implemented by Microsoft .NET Framework objects.</span></span>  
  
 <span data-ttu-id="6240b-3636">此外可以加载 COM 类，并获得`Type`通过使用该 COM 类的对象[Tlbimp.exe （类型库导入程序）](~/docs/framework/tools/tlbimp-exe-type-library-importer.md)工具。</span><span class="sxs-lookup"><span data-stu-id="6240b-3636">You can also load a COM class and get a `Type` object for that COM class by using the [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool.</span></span>  
  
 <span data-ttu-id="6240b-3637">如果当前<xref:System.Type>表示构造泛型类型，此属性适用于从其构造类型的泛型类型定义。</span><span class="sxs-lookup"><span data-stu-id="6240b-3637">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="6240b-3638">例如，如果当前<xref:System.Type>表示`MyGenericType<int`> (`MyGenericType(Of Integer)`在 Visual Basic 中)，此属性的值由`MyGenericType<T>`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3638">For example, if the current <xref:System.Type> represents `MyGenericType<int`> (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="6240b-3639">如果当前<xref:System.Type>表示泛型类型或泛型方法定义中的类型参数，此属性始终返回`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3639">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsCOMObjectImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsCOMObjectImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsCOMObjectImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsCOMObjectImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsCOMObjectImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsCOMObjectImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsCOMObjectImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsCOMObjectImpl : unit -&gt; bool" Usage="type.IsCOMObjectImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-3640">当在派生类中重写时，实现 <see cref="P:System.Type.IsCOMObject" /> 属性并确定 <see cref="T:System.Type" /> 是否为 COM 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-3640">When overridden in a derived class, implements the <see cref="P:System.Type.IsCOMObject" /> property and determines whether the <see cref="T:System.Type" /> is a COM object.</span></span></summary>
        <returns><span data-ttu-id="6240b-3641">如果 <see langword="true" /> 为 COM 对象，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3641"><see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3642">此方法返回`false`的 COM 接口，因为它们不是对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-3642">This method returns `false` for COM interfaces because they are not objects.</span></span> <span data-ttu-id="6240b-3643">可以通过 Microsoft.NET Framework 对象实现 COM 接口。</span><span class="sxs-lookup"><span data-stu-id="6240b-3643">COM interfaces can be implemented by Microsoft .NET Framework objects.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsCOMObject" />
      </Docs>
    </Member>
    <Member MemberName="IsConstructedGenericType">
      <MemberSignature Language="C#" Value="public virtual bool IsConstructedGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructedGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsConstructedGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsConstructedGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsConstructedGenericType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsConstructedGenericType : bool" Usage="System.Type.IsConstructedGenericType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3644">获取指示此对象是否表示构造的泛型类型的值。</span><span class="sxs-lookup"><span data-stu-id="6240b-3644">Gets a value that indicates whether this object represents a constructed generic type.</span></span> <span data-ttu-id="6240b-3645">你可以创建构造型泛型类型的实例。</span><span class="sxs-lookup"><span data-stu-id="6240b-3645">You can create instances of a constructed generic type.</span></span></summary>
        <value><span data-ttu-id="6240b-3646">如果此对象表示构造泛型类型，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3646"><see langword="true" /> if this object represents a constructed generic type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3647">一个构造泛型类型具有必须提供所有其泛型类型参数的显式类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3647">A constructed generic type has had explicit types supplied for all of its generic type parameters.</span></span> <span data-ttu-id="6240b-3648">它也称为封闭式泛型类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3648">It is also referred to as a closed generic type.</span></span>  
  
 <span data-ttu-id="6240b-3649">当此属性是`true`，可以创建当前类型的实例; 时`false`，您不能。</span><span class="sxs-lookup"><span data-stu-id="6240b-3649">When this property is `true`, you can create instances of the current type; when it is `false`, you can't.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsContextful">
      <MemberSignature Language="C#" Value="public bool IsContextful { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsContextful" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsContextful" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsContextful As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsContextful { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsContextful : bool" Usage="System.Type.IsContextful" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsContextful</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3650">获取一个值，通过该值指示 <see cref="T:System.Type" /> 在上下文中是否可以被承载。</span><span class="sxs-lookup"><span data-stu-id="6240b-3650">Gets a value indicating whether the <see cref="T:System.Type" /> can be hosted in a context.</span></span></summary>
        <value><span data-ttu-id="6240b-3651">如果 <see cref="T:System.Type" /> 能够在某个上下文中承载，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3651"><see langword="true" /> if the <see cref="T:System.Type" /> can be hosted in a context; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3652">上下文截获对类成员的调用，并强制实施策略应用于类，例如同步。</span><span class="sxs-lookup"><span data-stu-id="6240b-3652">A context intercepts calls to the class members and enforces policies that are applied to the class, such as synchronization.</span></span> <span data-ttu-id="6240b-3653">有关更多详细远程处理上下文的信息，请参阅<xref:System.Runtime.Remoting.Contexts.Context>。</span><span class="sxs-lookup"><span data-stu-id="6240b-3653">For more detailed information on remoting contexts, see <xref:System.Runtime.Remoting.Contexts.Context>.</span></span>  
  
 <span data-ttu-id="6240b-3654">如果当前<xref:System.Type>表示泛型类型或泛型方法定义中的类型参数，此属性始终返回`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3654">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3655">下面的示例演示`IsContextful`， <xref:System.Type.IsMarshalByRef%2A>，并<xref:System.Type.IsPrimitive%2A>的属性<xref:System.Type>类。</span><span class="sxs-lookup"><span data-stu-id="6240b-3655">The following example demonstrates the `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, and <xref:System.Type.IsPrimitive%2A> properties of the <xref:System.Type> class.</span></span> <span data-ttu-id="6240b-3656">它将检查给定的类型是否可以在上下文中，它可以引用封送，以及该类型是基元数据类型是否承载。</span><span class="sxs-lookup"><span data-stu-id="6240b-3656">It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.</span></span>  
  
 [!code-cpp[Type_IsContextful#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextful/CPP/type_iscontextful.cpp#1)]
 [!code-csharp[Type_IsContextful#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextful/CS/type_iscontextful.cs#1)]
 [!code-vb[Type_IsContextful#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextful/VB/type_iscontextful.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsContextfulImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsContextfulImpl">
      <MemberSignature Language="C#" Value="protected virtual bool IsContextfulImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsContextfulImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsContextfulImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsContextfulImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsContextfulImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsContextfulImpl : unit -&gt; bool&#xA;override this.IsContextfulImpl : unit -&gt; bool" Usage="type.IsContextfulImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-3657">实现 <see cref="P:System.Type.IsContextful" /> 属性并确定 <see cref="T:System.Type" /> 在上下文中是否可以被承载。</span><span class="sxs-lookup"><span data-stu-id="6240b-3657">Implements the <see cref="P:System.Type.IsContextful" /> property and determines whether the <see cref="T:System.Type" /> can be hosted in a context.</span></span></summary>
        <returns><span data-ttu-id="6240b-3658">如果 <see cref="T:System.Type" /> 能够在某个上下文中承载，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3658"><see langword="true" /> if the <see cref="T:System.Type" /> can be hosted in a context; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3659">此方法由派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="6240b-3659">This method can be overridden by a derived class.</span></span>  
  
 <span data-ttu-id="6240b-3660">上下文截获对类成员的调用，并强制执行策略应用于类，例如同步。</span><span class="sxs-lookup"><span data-stu-id="6240b-3660">A context intercepts calls to the class members and enforce policies that are applied to the class, such as synchronization.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3661">下面的示例演示使用的`IsContextfulImpl`方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3661">The following example demonstrates a use of the `IsContextfulImpl` method.</span></span>  
  
 [!code-cpp[Type_IsContextfulImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextfulImpl/CPP/type_iscontextfulimpl.cpp#1)]
 [!code-csharp[Type_IsContextfulImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextfulImpl/CS/type_iscontextfulimpl.cs#1)]
 [!code-vb[Type_IsContextfulImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextfulImpl/VB/type_iscontextfulimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsContextful" />
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public virtual bool IsEnum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnum" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsEnum" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsEnum As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEnum { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnum : bool" Usage="System.Type.IsEnum" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsEnum</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3662">获取一个值，该值指示当前的 <see cref="T:System.Type" /> 是否表示枚举。</span><span class="sxs-lookup"><span data-stu-id="6240b-3662">Gets a value indicating whether the current <see cref="T:System.Type" /> represents an enumeration.</span></span></summary>
        <value><span data-ttu-id="6240b-3663">如果当前 <see langword="true" /> 表示枚举，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3663"><see langword="true" /> if the current <see cref="T:System.Type" /> represents an enumeration; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3664">此属性返回`true`为枚举，而不是<xref:System.Enum>类型本身。</span><span class="sxs-lookup"><span data-stu-id="6240b-3664">This property returns `true` for an enumeration, but not for the <xref:System.Enum> type itself.</span></span>  
  
 <span data-ttu-id="6240b-3665">如果当前<xref:System.Type>表示构造泛型类型，此属性适用于从其构造类型的泛型类型定义。</span><span class="sxs-lookup"><span data-stu-id="6240b-3665">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="6240b-3666">例如，如果当前<xref:System.Type>表示`MyGenericType<int>`(`MyGenericType(Of Integer)`在 Visual Basic 中)，此属性的值由`MyGenericType<T>`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3666">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="6240b-3667">如果当前<xref:System.Type>表示泛型类型或泛型方法定义中的类型参数，此属性始终返回`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3667">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="6240b-3668">此属性是只读的。</span><span class="sxs-lookup"><span data-stu-id="6240b-3668">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3669">下面的示例演示如何使用`IsEnum`属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3669">The following example demonstrates how to use the `IsEnum` property.</span></span>  
  
 [!code-cpp[TestIsEnum#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestIsEnum/CPP/TestIsEnum.cpp#1)]
 [!code-csharp[TestIsEnum#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsEnum/CS/testisenum.cs#1)]
 [!code-vb[TestIsEnum#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsEnum/VB/testisenum.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsEnumDefined">
      <MemberSignature Language="C#" Value="public virtual bool IsEnumDefined (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEnumDefined(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsEnumDefined(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsEnumDefined (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsEnumDefined(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IsEnumDefined : obj -&gt; bool&#xA;override this.IsEnumDefined : obj -&gt; bool" Usage="type.IsEnumDefined value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="6240b-3670">要测试的值。</span><span class="sxs-lookup"><span data-stu-id="6240b-3670">The value to be tested.</span></span></param>
        <summary><span data-ttu-id="6240b-3671">返回一个值，该值指示当前的枚举类型中是否存在指定的值。</span><span class="sxs-lookup"><span data-stu-id="6240b-3671">Returns a value that indicates whether the specified value exists in the current enumeration type.</span></span></summary>
        <returns><span data-ttu-id="6240b-3672">如果指定的值是当前枚举类型的成员，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3672"><see langword="true" /> if the specified value is a member of the current enumeration type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-3673">当前类型不是一个枚举。</span><span class="sxs-lookup"><span data-stu-id="6240b-3673">The current type is not an enumeration.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-3674"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3674"><paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6240b-3675"><paramref name="value" /> 类型不能为枚举的基础类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3675"><paramref name="value" /> is of a type that cannot be the underlying type of an enumeration.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentTo">
      <MemberSignature Language="C#" Value="public virtual bool IsEquivalentTo (Type other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEquivalentTo(class System.Type other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsEquivalentTo(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsEquivalentTo (other As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsEquivalentTo(Type ^ other);" />
      <MemberSignature Language="F#" Value="abstract member IsEquivalentTo : Type -&gt; bool&#xA;override this.IsEquivalentTo : Type -&gt; bool" Usage="type.IsEquivalentTo other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="6240b-3676">要测试是否与当前类型等效的 COM 类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3676">The COM type that is tested for equivalence with the current type.</span></span></param>
        <summary><span data-ttu-id="6240b-3677">确定两个 COM 类型是否具有相同的标识，以及是否符合类型等效的条件。</span><span class="sxs-lookup"><span data-stu-id="6240b-3677">Determines whether two COM types have the same identity and are eligible for type equivalence.</span></span></summary>
        <returns><span data-ttu-id="6240b-3678">如果 COM 类型等效，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3678"><see langword="true" /> if the COM types are equivalent; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6240b-3679">如果一个类型位于为执行加载的程序集中，而另一个类型位于已加载到仅限反射上下文的程序集中，则此方法也返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3679">This method also returns <see langword="false" /> if one type is in an assembly that is loaded for execution, and the other is in an assembly that is loaded into the reflection-only context.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3680">从[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，公共语言运行时支持嵌入 COM 类型的直接为托管程序集，而不是要求托管程序集获取 COM 类型的类型信息从互操作的类型信息程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-3680">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the common language runtime supports the embedding of type information for COM types directly into managed assemblies, instead of requiring the managed assemblies to obtain type information for COM types from interop assemblies.</span></span> <span data-ttu-id="6240b-3681">由于嵌入式类型信息仅包含托管程序集实际使用的类型和成员，因此两个托管程序集可能具有相同 COM 类型的不同视图。</span><span class="sxs-lookup"><span data-stu-id="6240b-3681">Because the embedded type information includes only the types and members that are actually used by a managed assembly, two managed assemblies might have very different views of the same COM type.</span></span> <span data-ttu-id="6240b-3682">每个托管程序集都有不同的 <xref:System.Type> 对象来表示其 COM 类型视图。</span><span class="sxs-lookup"><span data-stu-id="6240b-3682">Each managed assembly has a different <xref:System.Type> object to represent its view of the COM type.</span></span> <span data-ttu-id="6240b-3683">公共语言运行时支持接口、结构、枚举和委托等不同视图之间的类型等效性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3683">The common language runtime supports type equivalence between these different views for interfaces, structures, enumerations, and delegates.</span></span>  
  
 <span data-ttu-id="6240b-3684">类型等效性意味着从一个托管程序集传递到另一个托管程序集的 COM 对象可以转换为接收程序集中适当的托管类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3684">Type equivalence means that a COM object that is passed from one managed assembly to another can be cast to the appropriate managed type in the receiving assembly.</span></span> <span data-ttu-id="6240b-3685"><xref:System.Type.IsEquivalentTo%2A>方法使程序集来确定从另一个程序集获取的 COM 对象具有相同的 COM 标识作为一种第一个程序集的自己嵌入互操作类型，并因此可以强制转换为该类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3685">The <xref:System.Type.IsEquivalentTo%2A> method enables an assembly to determine that a COM object obtained from another assembly has the same COM identity as one of the first assembly's own embedded interop types, and thus can be cast to that type.</span></span>  
  
 <span data-ttu-id="6240b-3686">有关详细信息，请参阅[类型等效性和嵌入的互操作类型](~/docs/framework/interop/type-equivalence-and-embedded-interop-types.md)。</span><span class="sxs-lookup"><span data-stu-id="6240b-3686">For more information, see [Type Equivalence and Embedded Interop Types](~/docs/framework/interop/type-equivalence-and-embedded-interop-types.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExplicitLayout">
      <MemberSignature Language="C#" Value="public bool IsExplicitLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExplicitLayout" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsExplicitLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExplicitLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExplicitLayout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExplicitLayout : bool" Usage="System.Type.IsExplicitLayout" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsExplicitLayout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3687">获取指示当前类型的字段是否放置在显式指定的偏移量处的值。</span><span class="sxs-lookup"><span data-stu-id="6240b-3687">Gets a value indicating whether the fields of the current type are laid out at explicitly specified offsets.</span></span></summary>
        <value><span data-ttu-id="6240b-3688">如果当前类型的 <see langword="true" /> 属性包括 <see cref="P:System.Type.Attributes" />，则为 <see cref="F:System.Reflection.TypeAttributes.ExplicitLayout" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3688"><see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.ExplicitLayout" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3689">为方便起见提供此属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3689">This property is provided as a convenience.</span></span> <span data-ttu-id="6240b-3690">或者，可以使用<xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType>枚举值来选择类型布局属性，然后测试是否<xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>设置。</span><span class="sxs-lookup"><span data-stu-id="6240b-3690">Alternatively, you can use the <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> is set.</span></span> <span data-ttu-id="6240b-3691"><xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>， <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>，和<xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType>枚举值指示该类型的字段在内存中布局的方式。</span><span class="sxs-lookup"><span data-stu-id="6240b-3691">The <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>, <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, and <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> enumeration values indicate the way the fields of the type are laid out in memory.</span></span>  
  
 <span data-ttu-id="6240b-3692">对于动态类型，可以指定<xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>创建类型时。</span><span class="sxs-lookup"><span data-stu-id="6240b-3692">For dynamic types, you can specify <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType> when you create the type.</span></span> <span data-ttu-id="6240b-3693">在代码中，将应用<xref:System.Runtime.InteropServices.StructLayoutAttribute>属性与<xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType>枚举值的类型，以指定显式指定字段开始的偏移量。</span><span class="sxs-lookup"><span data-stu-id="6240b-3693">In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> enumeration value to the type, to specify that the offsets at which the fields start are specified explicitly.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-3694">不能使用<xref:System.Reflection.MemberInfo.GetCustomAttributes%2A>方法，以确定是否<xref:System.Runtime.InteropServices.StructLayoutAttribute>应用于类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3694">You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.</span></span>  
  
 <span data-ttu-id="6240b-3695">如果当前<xref:System.Type>表示构造泛型类型，此属性适用于从其构造类型的泛型类型定义。</span><span class="sxs-lookup"><span data-stu-id="6240b-3695">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="6240b-3696">例如，如果当前<xref:System.Type>表示`MyGenericType<int>`(`MyGenericType(Of Integer)`在 Visual Basic 中)，此属性的值由`MyGenericType<T>`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3696">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="6240b-3697">如果当前<xref:System.Type>表示泛型类型或泛型方法定义中的类型参数，此属性始终返回`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3697">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3698">以下示例创建类型的实例，并显示的值及其<xref:System.Type.IsExplicitLayout%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3698">The following example creates an instance of a type and displays the value of its <xref:System.Type.IsExplicitLayout%2A> property.</span></span> <span data-ttu-id="6240b-3699">它使用`MySystemTime`类，该类中的代码示例也是<xref:System.Runtime.InteropServices.StructLayoutAttribute>。</span><span class="sxs-lookup"><span data-stu-id="6240b-3699">It uses the `MySystemTime` class, which is also in the code example for <xref:System.Runtime.InteropServices.StructLayoutAttribute>.</span></span>  
  
 [!code-csharp[Type_IsExplicitLayout#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsExplicitLayout/CS/type_isexplicitlayout.cs#1)]
 [!code-vb[Type_IsExplicitLayout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsExplicitLayout/VB/type_isexplicitlayout.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />
        <altmember cref="P:System.Type.IsAutoLayout" />
        <altmember cref="P:System.Type.IsLayoutSequential" />
        <related type="Article" href="~/docs/standard/metadata-and-self-describing-components.md"><span data-ttu-id="6240b-3700">元数据和自描述组件</span><span class="sxs-lookup"><span data-stu-id="6240b-3700">Metadata and Self-Describing Components</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsGenericMethodParameter">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericMethodParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericMethodParameter" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericMethodParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericMethodParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericMethodParameter { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericMethodParameter : bool" Usage="System.Type.IsGenericMethodParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGenericParameter">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericParameter" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericParameter { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericParameter : bool" Usage="System.Type.IsGenericParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3701">获取一个值，该值指示当前 <see cref="T:System.Type" /> 是否表示泛型类型或方法的定义中的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-3701">Gets a value indicating whether the current <see cref="T:System.Type" /> represents a type parameter in the definition of a generic type or method.</span></span></summary>
        <value><span data-ttu-id="6240b-3702">如果 <see cref="T:System.Type" /> 对象表示泛型类型定义或泛型方法定义的类型参数，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3702"><see langword="true" /> if the <see cref="T:System.Type" /> object represents a type parameter of a generic type definition or generic method definition; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3703"><xref:System.Type> 可以通过调用来获取这些对象表示泛型类型参数<xref:System.Type.GetGenericArguments%2A>方法<xref:System.Type>对象，表示泛型类型定义，或<xref:System.Reflection.MethodInfo.GetGenericArguments%2A>方法的<xref:System.Reflection.MethodInfo>对象，表示泛型方法定义。</span><span class="sxs-lookup"><span data-stu-id="6240b-3703"><xref:System.Type> objects that represent generic type parameters can be obtained by calling the <xref:System.Type.GetGenericArguments%2A> method of a <xref:System.Type> object that represents a generic type definition, or the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A> method of a <xref:System.Reflection.MethodInfo> object that represents a generic method definition.</span></span>  
  
-   <span data-ttu-id="6240b-3704">泛型类型或方法定义<xref:System.Type.IsGenericParameter%2A>属性返回`true`生成数组的每个元素。</span><span class="sxs-lookup"><span data-stu-id="6240b-3704">For a generic type or method definition, the <xref:System.Type.IsGenericParameter%2A> property returns `true` for every element of the resulting array.</span></span>  
  
-   <span data-ttu-id="6240b-3705">封闭式构造的类型或方法，<xref:System.Type.IsGenericParameter%2A>属性返回`false`返回的数组的每个元素<xref:System.Type.GetGenericArguments%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3705">For a closed constructed type or method, the <xref:System.Type.IsGenericParameter%2A> property returns `false` for every element of the array returned by the <xref:System.Type.GetGenericArguments%2A> method.</span></span>  
  
-   <span data-ttu-id="6240b-3706">开放式构造的类型或方法，该数组的某些元素可能是特定类型，其他人可能是类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-3706">For an open constructed type or method, some elements of the array might be specific types and others might be type parameters.</span></span> <span data-ttu-id="6240b-3707"><xref:System.Type.IsGenericParameter%2A> 返回`false`的类型和`true`的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-3707"><xref:System.Type.IsGenericParameter%2A> returns `false` for the types and `true` for the type parameters.</span></span> <span data-ttu-id="6240b-3708">代码示例<xref:System.Type.ContainsGenericParameters%2A>属性演示混合使用类型和类型参数的泛型类。</span><span class="sxs-lookup"><span data-stu-id="6240b-3708">The code example for the <xref:System.Type.ContainsGenericParameters%2A> property demonstrates a generic class with a mixture of types and type parameters.</span></span>  
  
 <span data-ttu-id="6240b-3709">有关泛型反射中使用的术语的固定条件列表，请参阅 <xref:System.Type.IsGenericType%2A> 属性注解。</span><span class="sxs-lookup"><span data-stu-id="6240b-3709">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3710">下面的示例使用<xref:System.Type.IsGenericParameter%2A>用于测试泛型类型参数属于泛型类型的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3710">The following example uses the <xref:System.Type.IsGenericParameter%2A> property to test for generic type parameters in a generic type.</span></span>  
  
 [!code-cpp[System.Type.IsGenericParameter#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericParameter/CPP/source.cpp#2)]
 [!code-csharp[System.Type.IsGenericParameter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericParameter/CS/source.cs#2)]
 [!code-vb[System.Type.IsGenericParameter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericParameter/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.GenericParameterPosition" />
        <altmember cref="M:System.Type.GetGenericArguments" />
        <altmember cref="M:System.Type.GetGenericParameterConstraints" />
        <altmember cref="P:System.Type.GenericParameterAttributes" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="6240b-3711">反射类型和泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-3711">Reflection and Generic Types</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="6240b-3712">如何：使用反射检查和实例化泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-3712">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsGenericType">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericType : bool" Usage="System.Type.IsGenericType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3713">获取一个值，该值指示当前类型是否是泛型类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3713">Gets a value indicating whether the current type is a generic type.</span></span></summary>
        <value><span data-ttu-id="6240b-3714"><see langword="true" /> 如果当前类型是泛型类型;否则为<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3714"><see langword="true" /> if the current type is a generic type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3715">使用<xref:System.Type.IsGenericType%2A>属性来确定是否<xref:System.Type>对象表示泛型类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3715">Use the <xref:System.Type.IsGenericType%2A> property to determine whether a <xref:System.Type> object represents a generic type.</span></span> <span data-ttu-id="6240b-3716">使用<xref:System.Type.ContainsGenericParameters%2A>属性来确定是否<xref:System.Type>对象都表示开放式构造的类型或封闭式构造的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3716">Use the <xref:System.Type.ContainsGenericParameters%2A> property to determine whether a <xref:System.Type> object represents an open constructed type or a closed constructed type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-3717"><xref:System.Type.IsGenericType%2A>属性返回`false`如果直接的类型不是泛型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3717">The <xref:System.Type.IsGenericType%2A> property returns `false` if the immediate type is not generic.</span></span> <span data-ttu-id="6240b-3718">例如，其元素是类型的数组`A<int>`(`A(Of Integer)`在 Visual Basic 中) 本身不是泛型类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3718">For example, an array whose elements are of type `A<int>` (`A(Of Integer)` in Visual Basic) is not itself a generic type.</span></span>  
  
 <span data-ttu-id="6240b-3719">下表总结了泛型反射中的常用术语的固定条件。</span><span class="sxs-lookup"><span data-stu-id="6240b-3719">The following table summarizes the invariant conditions for common terms used in generic reflection.</span></span>  
  
|<span data-ttu-id="6240b-3720">术语</span><span class="sxs-lookup"><span data-stu-id="6240b-3720">Term</span></span>|<span data-ttu-id="6240b-3721">固定条件</span><span class="sxs-lookup"><span data-stu-id="6240b-3721">Invariant</span></span>|  
|----------|---------------|  
|<span data-ttu-id="6240b-3722">Generic Type Definition — 泛型类型定义</span><span class="sxs-lookup"><span data-stu-id="6240b-3722">generic type definition</span></span>|<span data-ttu-id="6240b-3723"><xref:System.Type.IsGenericTypeDefinition%2A> 属性为 `true`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3723">The <xref:System.Type.IsGenericTypeDefinition%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="6240b-3724">定义一个泛型类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3724">Defines a generic type.</span></span> <span data-ttu-id="6240b-3725">通过调用创建构造的类型<xref:System.Type.MakeGenericType%2A>方法<xref:System.Type>对象表示泛型类型定义，并指定一个字符串数组的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-3725">A constructed type is created by calling the <xref:System.Type.MakeGenericType%2A> method on a <xref:System.Type> object that represents a generic type definition and specifying an array of type arguments.</span></span><br /><br /> <span data-ttu-id="6240b-3726"><xref:System.Type.MakeGenericType%2A> 可以调用仅在泛型类型定义上。</span><span class="sxs-lookup"><span data-stu-id="6240b-3726"><xref:System.Type.MakeGenericType%2A> can be called only on generic type definitions.</span></span><br /><br /> <span data-ttu-id="6240b-3727">任何泛型类型定义是泛型类型 (<xref:System.Type.IsGenericType%2A>属性是`true`)，但并不是。</span><span class="sxs-lookup"><span data-stu-id="6240b-3727">Any generic type definition is a generic type (the <xref:System.Type.IsGenericType%2A> property is `true`), but the converse is not true.</span></span>|  
|<span data-ttu-id="6240b-3728">Generic Type — 泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-3728">generic type</span></span>|<span data-ttu-id="6240b-3729"><xref:System.Type.IsGenericType%2A> 属性为 `true`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3729">The <xref:System.Type.IsGenericType%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="6240b-3730">可以是泛型类型定义、 开放式构造的类型或封闭式构造的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3730">Can be a generic type definition, an open constructed type, or a closed constructed type.</span></span><br /><br /> <span data-ttu-id="6240b-3731">请注意，数组类型的元素类型是泛型本身不是泛型类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3731">Note that an array type whose element type is generic is not itself a generic type.</span></span> <span data-ttu-id="6240b-3732">也是如此的<xref:System.Type>表示指向为泛型类型的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-3732">The same is true of a <xref:System.Type> object representing a pointer to a generic type.</span></span>|  
|<span data-ttu-id="6240b-3733">开放构造的类型</span><span class="sxs-lookup"><span data-stu-id="6240b-3733">open constructed type</span></span>|<span data-ttu-id="6240b-3734"><xref:System.Type.ContainsGenericParameters%2A> 属性为 `true`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3734">The <xref:System.Type.ContainsGenericParameters%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="6240b-3735">示例包括具有未分配的类型参数的泛型类型、 嵌套在泛型类型定义或开放式构造类型中的类型或泛型类型具有为其类型参数<xref:System.Type.ContainsGenericParameters%2A>属性是`true`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3735">Examples are a generic type that has unassigned type parameters, a type that is nested in a generic type definition or in an open constructed type, or a generic type that has a type argument for which the <xref:System.Type.ContainsGenericParameters%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="6240b-3736">不能创建开放式构造类型的实例。</span><span class="sxs-lookup"><span data-stu-id="6240b-3736">It is not possible to create an instance of an open constructed type.</span></span><br /><br /> <span data-ttu-id="6240b-3737">请注意，并非所有开放构造的类型是泛型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3737">Note that not all open constructed types are generic.</span></span> <span data-ttu-id="6240b-3738">例如，其元素类型是泛型类型定义的数组不是泛型，并指向开放式构造类型的指针不是泛型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3738">For example, an array whose element type is a generic type definition is not generic, and a pointer to an open constructed type is not generic.</span></span>|  
|<span data-ttu-id="6240b-3739">封闭式构造的类型</span><span class="sxs-lookup"><span data-stu-id="6240b-3739">closed constructed type</span></span>|<span data-ttu-id="6240b-3740"><xref:System.Type.ContainsGenericParameters%2A> 属性为 `false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3740">The <xref:System.Type.ContainsGenericParameters%2A> property is `false`.</span></span><br /><br /> <span data-ttu-id="6240b-3741">当检查以递归方式，该类型没有任何未分配的泛型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-3741">When examined recursively, the type has no unassigned generic parameters.</span></span>|  
|<span data-ttu-id="6240b-3742">Generic Type Parameter — 泛型类型参数</span><span class="sxs-lookup"><span data-stu-id="6240b-3742">generic type parameter</span></span>|<span data-ttu-id="6240b-3743"><xref:System.Type.IsGenericParameter%2A> 属性为 `true`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3743">The <xref:System.Type.IsGenericParameter%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="6240b-3744"><xref:System.Type.ContainsGenericParameters%2A> 属性为 `true`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3744">The <xref:System.Type.ContainsGenericParameters%2A> property is `true`.</span></span><br /><br /> <span data-ttu-id="6240b-3745">在泛型类型定义中，将更高版本分配类型的占位符。</span><span class="sxs-lookup"><span data-stu-id="6240b-3745">In a generic type definition, a placeholder for a type that will be assigned later.</span></span>|  
|<span data-ttu-id="6240b-3746">Generic Type Argument — 泛型类型变量</span><span class="sxs-lookup"><span data-stu-id="6240b-3746">generic type argument</span></span>|<span data-ttu-id="6240b-3747">可以是任何类型，包括泛型类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-3747">Can be any type, including a generic type parameter.</span></span><br /><br /> <span data-ttu-id="6240b-3748">数组的形式指定类型自变量<xref:System.Type>对象传递给<xref:System.Type.MakeGenericType%2A>方法创建一个构造泛型类型时。</span><span class="sxs-lookup"><span data-stu-id="6240b-3748">Type arguments are specified as an array of <xref:System.Type> objects passed to the <xref:System.Type.MakeGenericType%2A> method when creating a constructed generic type.</span></span> <span data-ttu-id="6240b-3749">如果要创建的生成类型的实例<xref:System.Type.ContainsGenericParameters%2A>属性必须为`false`对于所有类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-3749">If instances of the resulting type are to be created, the <xref:System.Type.ContainsGenericParameters%2A> property must be `false` for all the type arguments.</span></span>|  
  
 <span data-ttu-id="6240b-3750">下面的代码示例和表说明了其中的某些条款和固定条件。</span><span class="sxs-lookup"><span data-stu-id="6240b-3750">The following code example and table illustrate some of these terms and invariants.</span></span> <span data-ttu-id="6240b-3751">`Derived`类是特定的感兴趣，因为其基类型是其类型实参列表中具有混合类型和类型参数的构造的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3751">The `Derived` class is of particular interest because its base type is a constructed type that has a mixture of types and type parameters in its type argument list.</span></span>  
  
 [!code-cpp[System.Type.IsGenericType#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericType/cpp/remarks.cpp#2)]
 [!code-csharp[System.Type.IsGenericType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericType/cs/remarks.cs#2)]
 [!code-vb[System.Type.IsGenericType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericType/vb/remarks.vb#2)]  
  
 <span data-ttu-id="6240b-3752">下表显示了使用和生成的类`Base`， `Derived`，和`G`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3752">The following table shows examples that use and build on the classes `Base`, `Derived`, and `G`.</span></span> <span data-ttu-id="6240b-3753">当 c + + 和 C# 代码是相同的时只有一个条目会显示。</span><span class="sxs-lookup"><span data-stu-id="6240b-3753">When the C++ and C# code is the same, only one entry is shown.</span></span>  
  
|<span data-ttu-id="6240b-3754">示例</span><span class="sxs-lookup"><span data-stu-id="6240b-3754">Example</span></span>|<span data-ttu-id="6240b-3755">固定协定</span><span class="sxs-lookup"><span data-stu-id="6240b-3755">Invariants</span></span>|  
|-------------|----------------|  
|`Derived(Of V)`<br /><br /> `Derived<V>`|<span data-ttu-id="6240b-3756">对于此类型：</span><span class="sxs-lookup"><span data-stu-id="6240b-3756">For this type:</span></span><br /><br /> <span data-ttu-id="6240b-3757"><xref:System.Type.IsGenericType%2A> 为 `true`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3757"><xref:System.Type.IsGenericType%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="6240b-3758"><xref:System.Type.IsGenericTypeDefinition%2A> 为 `true`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3758"><xref:System.Type.IsGenericTypeDefinition%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="6240b-3759"><xref:System.Type.ContainsGenericParameters%2A> 为 `true`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3759"><xref:System.Type.ContainsGenericParameters%2A> is `true`.</span></span>|  
|`Base(Of String, V)`<br /><br /> `Base<String,V>`<br /><br /> `Base<String^,V>`|<span data-ttu-id="6240b-3760">对于此类型：</span><span class="sxs-lookup"><span data-stu-id="6240b-3760">For this type:</span></span><br /><br /> <span data-ttu-id="6240b-3761"><xref:System.Type.IsGenericType%2A> 为 `true`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3761"><xref:System.Type.IsGenericType%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="6240b-3762"><xref:System.Type.IsGenericTypeDefinition%2A> 为 `false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3762"><xref:System.Type.IsGenericTypeDefinition%2A> is `false`.</span></span><br /><br /> <span data-ttu-id="6240b-3763"><xref:System.Type.ContainsGenericParameters%2A> 为 `true`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3763"><xref:System.Type.ContainsGenericParameters%2A> is `true`.</span></span>|  
|`Dim d() As Derived(Of Integer)`<br /><br /> `Derived<int>[] d;`<br /><br /> `array<Derived<int>^>^ d;`|<span data-ttu-id="6240b-3764">变量的类型为`d`:</span><span class="sxs-lookup"><span data-stu-id="6240b-3764">For the type of variable `d`:</span></span><br /><br /> <span data-ttu-id="6240b-3765"><xref:System.Type.IsGenericType%2A> 是`false`因为`d`是一个数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-3765"><xref:System.Type.IsGenericType%2A> is `false` because `d` is an array.</span></span><br /><br /> <span data-ttu-id="6240b-3766"><xref:System.Type.IsGenericTypeDefinition%2A> 为 `false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3766"><xref:System.Type.IsGenericTypeDefinition%2A> is `false`.</span></span><br /><br /> <span data-ttu-id="6240b-3767"><xref:System.Type.ContainsGenericParameters%2A> 为 `false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3767"><xref:System.Type.ContainsGenericParameters%2A> is `false`.</span></span>|  
|<span data-ttu-id="6240b-3768">`T``U`，和`V`（不管它们出现）</span><span class="sxs-lookup"><span data-stu-id="6240b-3768">`T`, `U`, and `V` (everywhere they appear)</span></span>|<span data-ttu-id="6240b-3769"><xref:System.Type.IsGenericParameter%2A> 为 `true`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3769"><xref:System.Type.IsGenericParameter%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="6240b-3770"><xref:System.Type.IsGenericType%2A> 是`false`因为没有方法来约束泛型类型的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-3770"><xref:System.Type.IsGenericType%2A> is `false` because there is no way to constrain a type parameter to generic types.</span></span><br /><br /> <span data-ttu-id="6240b-3771"><xref:System.Type.IsGenericTypeDefinition%2A> 为 `false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3771"><xref:System.Type.IsGenericTypeDefinition%2A> is `false`.</span></span><br /><br /> <span data-ttu-id="6240b-3772"><xref:System.Type.ContainsGenericParameters%2A> 是`true`因为`T`， `U`，和`V`本身是泛型类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-3772"><xref:System.Type.ContainsGenericParameters%2A> is `true` because `T`, `U`, and `V` are themselves generic type parameters.</span></span> <span data-ttu-id="6240b-3773">这并不意味着更高版本分配给他们的类型参数有关的任何信息。</span><span class="sxs-lookup"><span data-stu-id="6240b-3773">This does not imply anything about type arguments that are assigned to them later.</span></span>|  
|<span data-ttu-id="6240b-3774">字段的类型 `F`</span><span class="sxs-lookup"><span data-stu-id="6240b-3774">The type of field `F`</span></span>|<span data-ttu-id="6240b-3775"><xref:System.Type.IsGenericType%2A> 为 `true`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3775"><xref:System.Type.IsGenericType%2A> is `true`.</span></span><br /><br /> <span data-ttu-id="6240b-3776"><xref:System.Type.IsGenericTypeDefinition%2A> 是`false`因为类型已分配给的类型参数`G`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3776"><xref:System.Type.IsGenericTypeDefinition%2A> is `false` because a type has been assigned to the type parameter of `G`.</span></span> <span data-ttu-id="6240b-3777">请注意，这相当于在调用<xref:System.Type.MakeGenericType%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3777">Note that this is equivalent to having called the <xref:System.Type.MakeGenericType%2A> method.</span></span><br /><br /> <span data-ttu-id="6240b-3778"><xref:System.Type.ContainsGenericParameters%2A> 是`true`因为字段的类型`F`有为开放式构造的类型的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-3778"><xref:System.Type.ContainsGenericParameters%2A> is `true` because the type of field `F` has a type argument that is an open constructed type.</span></span> <span data-ttu-id="6240b-3779">构造的类型是开放类型由于其类型参数 (即， `Base`) 是泛型类型定义。</span><span class="sxs-lookup"><span data-stu-id="6240b-3779">The constructed type is open because its type argument (that is, `Base`) is a generic type definition.</span></span> <span data-ttu-id="6240b-3780">这说明了递归性质<xref:System.Type.IsGenericType%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3780">This illustrates the recursive nature of the <xref:System.Type.IsGenericType%2A> property.</span></span>|  
|<span data-ttu-id="6240b-3781">嵌套的类 `Nested`</span><span class="sxs-lookup"><span data-stu-id="6240b-3781">The nested class `Nested`</span></span>|<span data-ttu-id="6240b-3782"><xref:System.Type.IsGenericType%2A> 是`true`，即使`Nested`类具有其自己的任何泛型类型参数，因为它嵌套在泛型类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3782"><xref:System.Type.IsGenericType%2A> is `true`, even though the `Nested` class has no generic type parameters of its own, because it is nested in a generic type.</span></span><br /><br /> <span data-ttu-id="6240b-3783"><xref:System.Type.IsGenericTypeDefinition%2A> 为 `true`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3783"><xref:System.Type.IsGenericTypeDefinition%2A> is `true`.</span></span> <span data-ttu-id="6240b-3784">也就是说，可以调用<xref:System.Type.MakeGenericType%2A>方法并提供封闭类型的类型参数`Derived`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3784">That is, you can call the <xref:System.Type.MakeGenericType%2A> method and supply the type parameter of the enclosing type, `Derived`.</span></span><br /><br /> <span data-ttu-id="6240b-3785"><xref:System.Type.ContainsGenericParameters%2A> 是`true`因为封闭类型`Derived`，具有泛型类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-3785"><xref:System.Type.ContainsGenericParameters%2A> is `true` because the enclosing type, `Derived`, has generic type parameters.</span></span> <span data-ttu-id="6240b-3786">这说明了递归性质<xref:System.Type.ContainsGenericParameters%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3786">This illustrates the recursive nature of the <xref:System.Type.ContainsGenericParameters%2A> property.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3787">下面的代码示例显示的值<xref:System.Type.IsGenericType%2A>， <xref:System.Type.IsGenericTypeDefinition%2A>， <xref:System.Type.IsGenericParameter%2A>，和<xref:System.Type.ContainsGenericParameters%2A>备注部分中描述的类型的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3787">The following code example displays the value of the <xref:System.Type.IsGenericType%2A>, <xref:System.Type.IsGenericTypeDefinition%2A>, <xref:System.Type.IsGenericParameter%2A>, and <xref:System.Type.ContainsGenericParameters%2A> properties for the types described in the Remarks section.</span></span> <span data-ttu-id="6240b-3788">有关属性值的说明，请参阅备注中随附的表。</span><span class="sxs-lookup"><span data-stu-id="6240b-3788">For explanations of the property values, see the accompanying table in Remarks.</span></span>  
  
 [!code-cpp[System.Type.IsGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericType/cpp/source.cpp#1)]
 [!code-csharp[System.Type.IsGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericType/cs/source.cs#1)]
 [!code-vb[System.Type.IsGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericType/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="6240b-3789">反射类型和泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-3789">Reflection and Generic Types</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="6240b-3790">如何：使用反射检查和实例化泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-3790">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsGenericTypeDefinition">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericTypeDefinition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericTypeDefinition : bool" Usage="System.Type.IsGenericTypeDefinition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3791">获取一个值，该值指示当前 <see cref="T:System.Type" /> 是否表示可以用来构造其他泛型类型的泛型类型定义。</span><span class="sxs-lookup"><span data-stu-id="6240b-3791">Gets a value indicating whether the current <see cref="T:System.Type" /> represents a generic type definition, from which other generic types can be constructed.</span></span></summary>
        <value><span data-ttu-id="6240b-3792">如果此 <see langword="true" /> 对象表示泛型类型定义，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3792"><see langword="true" /> if the <see cref="T:System.Type" /> object represents a generic type definition; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3793">泛型类型定义是可从其构造其他类型的模板。</span><span class="sxs-lookup"><span data-stu-id="6240b-3793">A generic type definition is a template from which other types can be constructed.</span></span> <span data-ttu-id="6240b-3794">例如，从泛型类型定义`G<T>`（以 C# 语法;`G(Of T)`在 Visual Basic 中或`generic <typename T> ref class G`c + + 中) 可以构造并实例化类型`G<int>`(`G(Of Integer)`在 Visual Basic 中)，通过调用<xref:System.Type.MakeGenericType%2A>方法使用泛型参数列表包含<xref:System.Int32>类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3794">For example, from the generic type definition `G<T>` (expressed in C# syntax; `G(Of T)` in Visual Basic or `generic <typename T> ref class G` in C++) you can construct and instantiate the type `G<int>` (`G(Of Integer)` in Visual Basic), by calling the <xref:System.Type.MakeGenericType%2A> method with a generic argument list containing the <xref:System.Int32> type.</span></span> <span data-ttu-id="6240b-3795">给定<xref:System.Type>对象表示此构造类型，<xref:System.Type.GetGenericTypeDefinition%2A>方法获取泛型类型定义回再次。</span><span class="sxs-lookup"><span data-stu-id="6240b-3795">Given a <xref:System.Type> object representing this constructed type, the <xref:System.Type.GetGenericTypeDefinition%2A> method gets the generic type definition back again.</span></span>  
  
 <span data-ttu-id="6240b-3796">使用<xref:System.Type.IsGenericTypeDefinition%2A>属性来确定是否可以从当前的类型创建新的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3796">Use the <xref:System.Type.IsGenericTypeDefinition%2A> property to determine whether you can create new types from the current type.</span></span> <span data-ttu-id="6240b-3797">如果<xref:System.Type.IsGenericTypeDefinition%2A>属性返回`true`，可以调用<xref:System.Type.MakeGenericType%2A>方法来创建新的泛型类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3797">If the <xref:System.Type.IsGenericTypeDefinition%2A> property returns `true`, you can call the <xref:System.Type.MakeGenericType%2A> method to create new generic types.</span></span>  
  
 <span data-ttu-id="6240b-3798">有关泛型反射中使用的术语的固定条件列表，请参阅 <xref:System.Type.IsGenericType%2A> 属性注解。</span><span class="sxs-lookup"><span data-stu-id="6240b-3798">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3799">下面的示例显示信息的类型，包括指示为泛型类型定义。</span><span class="sxs-lookup"><span data-stu-id="6240b-3799">The following example displays information about a type, including whether or not it is a generic type definition.</span></span> <span data-ttu-id="6240b-3800">构造类型、 其泛型类型定义，和普通类型，则会显示信息。</span><span class="sxs-lookup"><span data-stu-id="6240b-3800">Information is displayed for a constructed type, for its generic type definition, and for an ordinary type.</span></span>  
  
 [!code-cpp[System.Type.IsGenericTypeDefinition#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CPP/source.cpp#1)]
 [!code-csharp[System.Type.IsGenericTypeDefinition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CS/source.cs#1)]
 [!code-vb[System.Type.IsGenericTypeDefinition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.ContainsGenericParameters" />
        <altmember cref="M:System.Type.GetGenericTypeDefinition" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="6240b-3801">反射类型和泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-3801">Reflection and Generic Types</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="6240b-3802">如何：使用反射检查和实例化泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-3802">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsGenericTypeParameter">
      <MemberSignature Language="C#" Value="public virtual bool IsGenericTypeParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGenericTypeParameter" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsGenericTypeParameter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsGenericTypeParameter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsGenericTypeParameter { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGenericTypeParameter : bool" Usage="System.Type.IsGenericTypeParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImport">
      <MemberSignature Language="C#" Value="public bool IsImport { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsImport" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsImport" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsImport As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsImport { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsImport : bool" Usage="System.Type.IsImport" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsImport</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3803">获取一个值，该值指示 <see cref="T:System.Type" /> 是否应用了 <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> 属性，如果应用了该属性，则表示它是从 COM 类型库导入的。</span><span class="sxs-lookup"><span data-stu-id="6240b-3803">Gets a value indicating whether the <see cref="T:System.Type" /> has a <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> attribute applied, indicating that it was imported from a COM type library.</span></span></summary>
        <value><span data-ttu-id="6240b-3804">如果 <see langword="true" /> 具有 <see cref="T:System.Type" />，则为 <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3804"><see langword="true" /> if the <see cref="T:System.Type" /> has a <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3805">如果当前<xref:System.Type>表示构造泛型类型，此属性适用于从其构造类型的泛型类型定义。</span><span class="sxs-lookup"><span data-stu-id="6240b-3805">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="6240b-3806">例如，如果当前<xref:System.Type>表示`MyGenericType<int>`(`MyGenericType(Of Integer)`在 Visual Basic 中)，此属性的值由 `MyGenericType<T>.`</span><span class="sxs-lookup"><span data-stu-id="6240b-3806">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>.`</span></span>  
  
 <span data-ttu-id="6240b-3807">如果当前<xref:System.Type>表示泛型类型或泛型方法定义中的类型参数，此属性始终返回`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3807">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsInstanceOfType">
      <MemberSignature Language="C#" Value="public virtual bool IsInstanceOfType (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsInstanceOfType(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsInstanceOfType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsInstanceOfType (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsInstanceOfType(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="abstract member IsInstanceOfType : obj -&gt; bool&#xA;override this.IsInstanceOfType : obj -&gt; bool" Usage="type.IsInstanceOfType o" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.IsInstanceOfType(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="6240b-3808">要与当前类型进行比较的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-3808">The object to compare with the current type.</span></span></param>
        <summary><span data-ttu-id="6240b-3809">确定指定的对象是否是当前 <see cref="T:System.Type" /> 的实例。</span><span class="sxs-lookup"><span data-stu-id="6240b-3809">Determines whether the specified object is an instance of the current <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="6240b-3810">如果满足下列任一条件，则为 <see langword="true" />：当前 <see langword="Type" /> 位于由 <paramref name="o" /> 表示的对象的继承层次结构中；当前 <see langword="Type" /> 是 <paramref name="o" /> 实现的接口。</span><span class="sxs-lookup"><span data-stu-id="6240b-3810"><see langword="true" /> if the current <see langword="Type" /> is in the inheritance hierarchy of the object represented by <paramref name="o" />, or if the current <see langword="Type" /> is an interface that <paramref name="o" /> implements.</span></span> <span data-ttu-id="6240b-3811">如果不属于其中任一种情况，<paramref name="o" /> 为 <see langword="null" />，或者当前 <see langword="Type" /> 为开放式泛型类型（即 <see cref="P:System.Type.ContainsGenericParameters" /> 返回 <see langword="true" />），则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3811"><see langword="false" /> if neither of these conditions is the case, if <paramref name="o" /> is <see langword="null" />, or if the current <see langword="Type" /> is an open generic type (that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3812">此方法由派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="6240b-3812">This method can be overridden by a derived class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-3813">构造的类型不是其泛型类型定义的实例。</span><span class="sxs-lookup"><span data-stu-id="6240b-3813">A constructed type is not an instance of its generic type definition.</span></span> <span data-ttu-id="6240b-3814">即`MyGenericList<int>`(`MyGenericList(Of Integer)`在 Visual Basic 中) 不是实例的`MyGenericList<T>`(`MyGenericList(Of T)`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="6240b-3814">That is, `MyGenericList<int>` (`MyGenericList(Of Integer)` in Visual Basic) is not an instance of `MyGenericList<T>` (`MyGenericList(Of T)` in Visual Basic).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3815">下面的示例演示 `IsInstanceOfType` 方法的用法。</span><span class="sxs-lookup"><span data-stu-id="6240b-3815">The following example demonstrates the use of the `IsInstanceOfType` method.</span></span>  
  
 [!code-cpp[TestIsInstanceOfType#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestIsInstanceOfType/CPP/testisinstanceoftype.cpp#1)]
 [!code-csharp[TestIsInstanceOfType#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsInstanceOfType/CS/testisinstanceoftype.cs#1)]
 [!code-vb[TestIsInstanceOfType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsInstanceOfType/VB/testisinstanceoftype.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInterface">
      <MemberSignature Language="C#" Value="public bool IsInterface { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInterface" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsInterface" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInterface As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInterface { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInterface : bool" Usage="System.Type.IsInterface" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsInterface</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3816">获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否是一个接口；即，不是类或值类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3816">Gets a value indicating whether the <see cref="T:System.Type" /> is an interface; that is, not a class or a value type.</span></span></summary>
        <value><span data-ttu-id="6240b-3817">如果 <see langword="true" /> 是接口，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3817"><see langword="true" /> if the <see cref="T:System.Type" /> is an interface; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3818"><xref:System.Reflection.TypeAttributes.ClassSemanticsMask>区分类型声明为类、 接口或值类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3818">The <xref:System.Reflection.TypeAttributes.ClassSemanticsMask> distinguishes a type declaration as class, interface or value type.</span></span>  
  
 <span data-ttu-id="6240b-3819">如果当前<xref:System.Type>表示泛型类型或泛型方法定义中的类型参数，此属性始终返回`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3819">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="6240b-3820">此属性是只读的。</span><span class="sxs-lookup"><span data-stu-id="6240b-3820">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3821">以下示例创建一个接口，检查接口类型，并指示类是否具有`IsInterface`属性集。</span><span class="sxs-lookup"><span data-stu-id="6240b-3821">The following example creates an interface, checks for the interface type, and indicates whether a class has the `IsInterface` property set.</span></span>  
  
 [!code-cpp[Type_IsInterface#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsInterface/CPP/type_isinterface.cpp#1)]
 [!code-csharp[Type_IsInterface#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsInterface/CS/type_isinterface.cs#1)]
 [!code-vb[Type_IsInterface#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsInterface/VB/type_isinterface.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsClass" />
        <altmember cref="P:System.Type.IsValueType" />
      </Docs>
    </Member>
    <Member MemberName="IsLayoutSequential">
      <MemberSignature Language="C#" Value="public bool IsLayoutSequential { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLayoutSequential" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsLayoutSequential" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLayoutSequential As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLayoutSequential { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLayoutSequential : bool" Usage="System.Type.IsLayoutSequential" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsLayoutSequential</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3822">获取指示当前类型的字段是否按顺序（定义顺序或发送到元数据的顺序）放置的值。</span><span class="sxs-lookup"><span data-stu-id="6240b-3822">Gets a value indicating whether the fields of the current type are laid out sequentially, in the order that they were defined or emitted to the metadata.</span></span></summary>
        <value><span data-ttu-id="6240b-3823">如果当前类型的 <see langword="true" /> 属性包括 <see cref="P:System.Type.Attributes" />，则为 <see cref="F:System.Reflection.TypeAttributes.SequentialLayout" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3823"><see langword="true" /> if the <see cref="P:System.Type.Attributes" /> property of the current type includes <see cref="F:System.Reflection.TypeAttributes.SequentialLayout" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3824">为方便起见提供此属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3824">This property is provided as a convenience.</span></span> <span data-ttu-id="6240b-3825">或者，可以使用<xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType>枚举值来选择类型布局属性，然后测试是否<xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType>设置。</span><span class="sxs-lookup"><span data-stu-id="6240b-3825">Alternatively, you can use the <xref:System.Reflection.TypeAttributes.LayoutMask?displayProperty=nameWithType> enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> is set.</span></span> <span data-ttu-id="6240b-3826"><xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>， <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>，和<xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType>枚举值指示该类型的字段在内存中布局的方式。</span><span class="sxs-lookup"><span data-stu-id="6240b-3826">The <xref:System.Reflection.TypeAttributes.AutoLayout?displayProperty=nameWithType>, <xref:System.Reflection.TypeAttributes.ExplicitLayout?displayProperty=nameWithType>, and <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> enumeration values indicate the way the fields of the type are laid out in memory.</span></span>  
  
 <span data-ttu-id="6240b-3827">对于动态类型，可以指定<xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType>创建类型时。</span><span class="sxs-lookup"><span data-stu-id="6240b-3827">For dynamic types, you can specify <xref:System.Reflection.TypeAttributes.SequentialLayout?displayProperty=nameWithType> when you create the type.</span></span> <span data-ttu-id="6240b-3828">在代码中，将应用<xref:System.Runtime.InteropServices.StructLayoutAttribute>属性与<xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType>枚举值的类型，以指定是按顺序进行布局。</span><span class="sxs-lookup"><span data-stu-id="6240b-3828">In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> enumeration value to the type, to specify that layout is sequential.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-3829">不能使用<xref:System.Reflection.MemberInfo.GetCustomAttributes%2A>方法，以确定是否<xref:System.Runtime.InteropServices.StructLayoutAttribute>应用于类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3829">You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.</span></span>  
  
 <span data-ttu-id="6240b-3830">有关详细信息，请参阅部分 9.1.2 有关公共语言基础结构 (CLI) 文档规范的"第二部分：元数据定义和语义"。</span><span class="sxs-lookup"><span data-stu-id="6240b-3830">For more information, see section 9.1.2 of the specification for the Common Language Infrastructure (CLI) documentation, "Partition II: Metadata Definition and Semantics".</span></span> <span data-ttu-id="6240b-3831">可联机获取该文档；请参阅 MSDN 上的 [ECMA C# 和公共语言基础结构标准](https://go.microsoft.com/fwlink/?LinkID=99212)和 Ecma International 网站上的[标准 ECMA-335 - 公共语言基础结构 (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="6240b-3831">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 <span data-ttu-id="6240b-3832">如果当前<xref:System.Type>表示构造泛型类型，此属性适用于从其构造类型的泛型类型定义。</span><span class="sxs-lookup"><span data-stu-id="6240b-3832">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="6240b-3833">例如，如果当前<xref:System.Type>表示`MyGenericType<int>`(`MyGenericType(Of Integer)`在 Visual Basic 中)，此属性的值由`MyGenericType<T>`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3833">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="6240b-3834">如果当前<xref:System.Type>表示泛型类型或泛型方法定义中的类型参数，此属性始终返回`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3834">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3835">下面的示例为其创建一个类的实例<xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType>中的枚举值<xref:System.Runtime.InteropServices.StructLayoutAttribute>类设置、 检查<xref:System.Type.IsLayoutSequential%2A>属性，并显示结果。</span><span class="sxs-lookup"><span data-stu-id="6240b-3835">The following example creates an instance of a class for which the <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> enumeration value in the <xref:System.Runtime.InteropServices.StructLayoutAttribute> class has been set, checks for the <xref:System.Type.IsLayoutSequential%2A> property, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsLayoutSequential#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsLayoutSequential/CPP/type_islayoutsequential.cpp#1)]
 [!code-csharp[Type_IsLayoutSequential#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsLayoutSequential/CS/type_islayoutsequential.cs#1)]
 [!code-vb[Type_IsLayoutSequential#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsLayoutSequential/VB/type_islayoutsequential.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsAutoLayout" />
        <altmember cref="P:System.Type.IsExplicitLayout" />
        <related type="Article" href="~/docs/standard/metadata-and-self-describing-components.md"><span data-ttu-id="6240b-3836">元数据和自描述组件</span><span class="sxs-lookup"><span data-stu-id="6240b-3836">Metadata and Self-Describing Components</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsMarshalByRef">
      <MemberSignature Language="C#" Value="public bool IsMarshalByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMarshalByRef" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsMarshalByRef" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMarshalByRef As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMarshalByRef { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMarshalByRef : bool" Usage="System.Type.IsMarshalByRef" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsMarshalByRef</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3837">获取一个值，该值指示 <see cref="T:System.Type" /> 是否按引用进行封送。</span><span class="sxs-lookup"><span data-stu-id="6240b-3837">Gets a value indicating whether the <see cref="T:System.Type" /> is marshaled by reference.</span></span></summary>
        <value><span data-ttu-id="6240b-3838">如果 <see langword="true" /> 是由引用封送的，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3838"><see langword="true" /> if the <see cref="T:System.Type" /> is marshaled by reference; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6240b-3839">下面的示例演示`IsContextful`， <xref:System.Type.IsMarshalByRef%2A>，并<xref:System.Type.IsPrimitive%2A>的属性<xref:System.Type>类。</span><span class="sxs-lookup"><span data-stu-id="6240b-3839">The following example demonstrates the `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, and <xref:System.Type.IsPrimitive%2A> properties of the <xref:System.Type> class.</span></span> <span data-ttu-id="6240b-3840">它将检查给定的类型是否可以在上下文中，它可以引用封送，以及该类型是基元数据类型是否承载。</span><span class="sxs-lookup"><span data-stu-id="6240b-3840">It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.</span></span>  
  
 [!code-cpp[Type_IsContextful#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextful/CPP/type_iscontextful.cpp#1)]
 [!code-csharp[Type_IsContextful#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextful/CS/type_iscontextful.cs#1)]
 [!code-vb[Type_IsContextful#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextful/VB/type_iscontextful.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsMarshalByRefImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsMarshalByRefImpl">
      <MemberSignature Language="C#" Value="protected virtual bool IsMarshalByRefImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsMarshalByRefImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsMarshalByRefImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsMarshalByRefImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsMarshalByRefImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsMarshalByRefImpl : unit -&gt; bool&#xA;override this.IsMarshalByRefImpl : unit -&gt; bool" Usage="type.IsMarshalByRefImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-3841">实现 <see cref="P:System.Type.IsMarshalByRef" /> 属性并确定 <see cref="T:System.Type" /> 是否按引用来进行封送。</span><span class="sxs-lookup"><span data-stu-id="6240b-3841">Implements the <see cref="P:System.Type.IsMarshalByRef" /> property and determines whether the <see cref="T:System.Type" /> is marshaled by reference.</span></span></summary>
        <returns><span data-ttu-id="6240b-3842">如果 <see langword="true" /> 是由引用封送的，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3842"><see langword="true" /> if the <see cref="T:System.Type" /> is marshaled by reference; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3843">此方法由派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="6240b-3843">This method can be overridden by a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3844">下面的示例确定给定的类型是否由引用封送，并显示结果。</span><span class="sxs-lookup"><span data-stu-id="6240b-3844">The following example determines whether the given type is marshaled by reference and displays the result.</span></span>  
  
 [!code-cpp[Type_IsMarshalByRefImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsMarshalByRefImpl/CPP/type_ismarshalbyrefimpl.cpp#1)]
 [!code-csharp[Type_IsMarshalByRefImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsMarshalByRefImpl/CS/type_ismarshalbyrefimpl.cs#1)]
 [!code-vb[Type_IsMarshalByRefImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsMarshalByRefImpl/VB/type_ismarshalbyrefimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsMarshalByRef" />
      </Docs>
    </Member>
    <Member MemberName="IsNested">
      <MemberSignature Language="C#" Value="public bool IsNested { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNested" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNested" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNested As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNested { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNested : bool" Usage="System.Type.IsNested" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3845">获取一个指示当前 <see cref="T:System.Type" /> 对象是否表示其定义嵌套在另一个类型的定义之内的类型的值。</span><span class="sxs-lookup"><span data-stu-id="6240b-3845">Gets a value indicating whether the current <see cref="T:System.Type" /> object represents a type whose definition is nested inside the definition of another type.</span></span></summary>
        <value><span data-ttu-id="6240b-3846">如果 <see langword="true" /> 嵌套在另一个类型内，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3846"><see langword="true" /> if the <see cref="T:System.Type" /> is nested inside another type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3847"><xref:System.Type.IsNested%2A>属性返回`true`所有嵌套类型，而不考虑可见性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3847">The <xref:System.Type.IsNested%2A> property returns `true` for all nested types, regardless of visibility.</span></span> <span data-ttu-id="6240b-3848">若要在同一时间测试嵌套和可见性，请使用相关的属性<xref:System.Type.IsNestedAssembly%2A>， <xref:System.Type.IsNestedFamily%2A>， <xref:System.Type.IsNestedFamANDAssem%2A>， <xref:System.Type.IsNestedFamORAssem%2A>， <xref:System.Type.IsNestedPrivate%2A>，或<xref:System.Type.IsNestedPublic%2A>。</span><span class="sxs-lookup"><span data-stu-id="6240b-3848">To test for nesting and visibility at the same time, use the related properties <xref:System.Type.IsNestedAssembly%2A>, <xref:System.Type.IsNestedFamily%2A>, <xref:System.Type.IsNestedFamANDAssem%2A>, <xref:System.Type.IsNestedFamORAssem%2A>, <xref:System.Type.IsNestedPrivate%2A>, or <xref:System.Type.IsNestedPublic%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-3849"><xref:System.Reflection.TypeAttributes.VisibilityMask>枚举成员选择一种类型的可见性属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3849">The <xref:System.Reflection.TypeAttributes.VisibilityMask> enumeration member selects the visibility attributes for a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3850">下面的示例使用多个具有各种类型的可见性的嵌套类创建外部类。</span><span class="sxs-lookup"><span data-stu-id="6240b-3850">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="6240b-3851">然后检索的值数目的可见性相关<xref:System.Type>父类型和每个及其嵌套类型的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3851">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsNestedAssembly" />
        <altmember cref="P:System.Type.IsNestedFamily" />
        <altmember cref="P:System.Type.IsNestedFamANDAssem" />
        <altmember cref="P:System.Type.IsNestedFamORAssem" />
        <altmember cref="P:System.Type.IsNestedPrivate" />
        <altmember cref="P:System.Type.IsNestedPublic" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedAssembly">
      <MemberSignature Language="C#" Value="public bool IsNestedAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedAssembly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedAssembly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedAssembly : bool" Usage="System.Type.IsNestedAssembly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedAssembly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3852">获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否是嵌套的并且只能在它自己的程序集内可见。</span><span class="sxs-lookup"><span data-stu-id="6240b-3852">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its own assembly.</span></span></summary>
        <value><span data-ttu-id="6240b-3853">如果 <see langword="true" /> 是嵌套的并且仅在它自己的程序集中可见，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3853"><see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only within its own assembly; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3854">如果当前<xref:System.Type>表示类型参数的泛型类型，此属性始终返回`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3854">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="6240b-3855"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> 选择可见性属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3855"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3856">下面的示例使用多个具有各种类型的可见性的嵌套类创建外部类。</span><span class="sxs-lookup"><span data-stu-id="6240b-3856">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="6240b-3857">然后检索的值数目的可见性相关<xref:System.Type>父类型和每个及其嵌套类型的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3857">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamANDAssem">
      <MemberSignature Language="C#" Value="public bool IsNestedFamANDAssem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamANDAssem" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedFamANDAssem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamANDAssem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamANDAssem { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamANDAssem : bool" Usage="System.Type.IsNestedFamANDAssem" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedFamANDAssem</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3858">获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否是嵌套的并且只对同时属于自己家族和自己程序集的类可见。</span><span class="sxs-lookup"><span data-stu-id="6240b-3858">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly.</span></span></summary>
        <value><span data-ttu-id="6240b-3859">如果 <see cref="T:System.Type" /> 是嵌套的并且只对同时属于它自己的家族和它自己的程序集的类可见，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3859"><see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3860">如果当前<xref:System.Type>表示类型参数的泛型类型，此属性始终返回`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3860">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="6240b-3861"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> 选择可见性属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3861"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-3862">C# 和 Visual Basic 语言不包括允许你定义仅对受保护的类型在其自身程序集中可见的嵌套的类型的语义。</span><span class="sxs-lookup"><span data-stu-id="6240b-3862">The C# and Visual Basic languages do not include semantics that allow you to define a nested type that is visible only to protected types in its own assembly.</span></span> <span data-ttu-id="6240b-3863">`protected internal` C# 中的可见性和`Protected Friend`在 Visual Basic 中的可见性定义可见受保护的类型，在同一程序集中的类型中可见的嵌套的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3863">`protected internal` visibility in C# and `Protected Friend` visibility in Visual Basic define a nested type that is visible both to protected types and to types in the same assembly.</span></span>  
  
 <span data-ttu-id="6240b-3864">一个<xref:System.Type>对象的系列被定义为所有对象的相同<xref:System.Type>和子类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3864">A <xref:System.Type> object's family is defined as all objects of the same <xref:System.Type> and of its subtypes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3865">下面的示例使用多个具有各种类型的可见性的嵌套类创建外部类。</span><span class="sxs-lookup"><span data-stu-id="6240b-3865">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="6240b-3866">然后检索的值数目的可见性相关<xref:System.Type>父类型和每个及其嵌套类型的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3866">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamily">
      <MemberSignature Language="C#" Value="public bool IsNestedFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamily" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedFamily" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamily As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamily { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamily : bool" Usage="System.Type.IsNestedFamily" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedFamily</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3867">获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否是嵌套的并且只能在它自己的家族内可见。</span><span class="sxs-lookup"><span data-stu-id="6240b-3867">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only within its own family.</span></span></summary>
        <value><span data-ttu-id="6240b-3868">如果 <see langword="true" /> 是嵌套的并且仅在它自己的家族中可见，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3868"><see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only within its own family; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3869">如果当前<xref:System.Type>表示类型参数的泛型类型，此属性始终返回`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3869">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="6240b-3870"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> 选择可见性属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3870"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
 <span data-ttu-id="6240b-3871">一个<xref:System.Type>对象的系列被定义为所有对象的完全相同<xref:System.Type>和子类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3871">A <xref:System.Type> object's family is defined as all objects of the exact same <xref:System.Type> and of its subtypes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3872">下面的示例使用多个具有各种类型的可见性的嵌套类创建外部类。</span><span class="sxs-lookup"><span data-stu-id="6240b-3872">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="6240b-3873">然后检索的值数目的可见性相关<xref:System.Type>父类型和每个及其嵌套类型的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3873">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamORAssem">
      <MemberSignature Language="C#" Value="public bool IsNestedFamORAssem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamORAssem" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedFamORAssem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamORAssem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamORAssem { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamORAssem : bool" Usage="System.Type.IsNestedFamORAssem" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedFamORAssem</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3874">获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否是嵌套的并且只对属于它自己的家族或属于它自己的程序集的类可见。</span><span class="sxs-lookup"><span data-stu-id="6240b-3874">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and visible only to classes that belong to either its own family or to its own assembly.</span></span></summary>
        <value><span data-ttu-id="6240b-3875">如果 <see langword="true" /> 是嵌套的并且只对属于它自己的家族或属于它自己的程序集的类可见，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3875"><see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to its own family or to its own assembly; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3876">如果一种类型的可见性`protected internal`C# 中或`Protected Friend`在 Visual Basic<xref:System.Type.IsNestedFamORAssem%2A>属性返回`true`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3876">If the visibility of a type is `protected internal` in C# or `Protected Friend` in Visual Basic, the <xref:System.Type.IsNestedFamORAssem%2A> property returns `true`.</span></span>  
  
 <span data-ttu-id="6240b-3877">如果当前<xref:System.Type>表示类型参数的泛型类型，此属性始终返回`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3877">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="6240b-3878"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> 选择可见性属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3878"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
 <span data-ttu-id="6240b-3879">一个<xref:System.Type>对象的系列被定义为所有对象的完全相同<xref:System.Type>和子类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3879">A <xref:System.Type> object's family is defined as all objects of the exact same <xref:System.Type> and of its subtypes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3880">下面的示例使用多个具有各种类型的可见性的嵌套类创建外部类。</span><span class="sxs-lookup"><span data-stu-id="6240b-3880">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="6240b-3881">然后检索的值数目的可见性相关<xref:System.Type>父类型和每个及其嵌套类型的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3881">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedPrivate">
      <MemberSignature Language="C#" Value="public bool IsNestedPrivate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedPrivate" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedPrivate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedPrivate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedPrivate { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedPrivate : bool" Usage="System.Type.IsNestedPrivate" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedPrivate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3882">获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否是嵌套的并声明为私有。</span><span class="sxs-lookup"><span data-stu-id="6240b-3882">Gets a value indicating whether the <see cref="T:System.Type" /> is nested and declared private.</span></span></summary>
        <value><span data-ttu-id="6240b-3883">如果 <see langword="true" /> 是嵌套的并声明为私有，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3883"><see langword="true" /> if the <see cref="T:System.Type" /> is nested and declared private; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3884">如果当前<xref:System.Type>表示类型参数的泛型类型，此属性始终返回`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3884">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="6240b-3885"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> 选择可见性属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3885"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3886">下面的示例使用多个具有各种类型的可见性的嵌套类创建外部类。</span><span class="sxs-lookup"><span data-stu-id="6240b-3886">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="6240b-3887">然后检索的值数目的可见性相关<xref:System.Type>父类型和每个及其嵌套类型的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3887">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNestedPublic">
      <MemberSignature Language="C#" Value="public bool IsNestedPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedPublic" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNestedPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedPublic : bool" Usage="System.Type.IsNestedPublic" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNestedPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3888">获取一个值，通过该值指示类是否是嵌套的并且声明为公共的。</span><span class="sxs-lookup"><span data-stu-id="6240b-3888">Gets a value indicating whether a class is nested and declared public.</span></span></summary>
        <value><span data-ttu-id="6240b-3889">如果类是嵌套的并且声明为公共的，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3889"><see langword="true" /> if the class is nested and declared public; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3890">如果当前<xref:System.Type>表示类型参数的泛型类型，此属性始终返回`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3890">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="6240b-3891"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> 选择可见性属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3891"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3892">下面的示例使用多个具有各种类型的可见性的嵌套类创建外部类。</span><span class="sxs-lookup"><span data-stu-id="6240b-3892">The following example creates an outer class with a number of nested classes that have various types of visibility.</span></span> <span data-ttu-id="6240b-3893">然后检索的值数目的可见性相关<xref:System.Type>父类型和每个及其嵌套类型的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3893">It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.</span></span>  
  
 [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]
 [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsNotPublic">
      <MemberSignature Language="C#" Value="public bool IsNotPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotPublic" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsNotPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNotPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNotPublic : bool" Usage="System.Type.IsNotPublic" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsNotPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3894">获取一个值，该值指示 <see cref="T:System.Type" /> 是否声明为公共类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3894">Gets a value indicating whether the <see cref="T:System.Type" /> is not declared public.</span></span></summary>
        <value><span data-ttu-id="6240b-3895">如果 <see langword="true" /> 未声明为公共类型且不是嵌套类型，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3895"><see langword="true" /> if the <see cref="T:System.Type" /> is not declared public and is not a nested type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3896">使用嵌套类型，不使用此属性使用<xref:System.Type.IsNestedPublic%2A>属性改为。</span><span class="sxs-lookup"><span data-stu-id="6240b-3896">Do not use this property with nested types; use the <xref:System.Type.IsNestedPublic%2A> property instead.</span></span>  
  
 <span data-ttu-id="6240b-3897">如果当前<xref:System.Type>表示类型参数的泛型类型，此属性返回`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3897">If the current <xref:System.Type> represents a type parameter of a generic type, this property returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3898">此示例使用`IsNotPublic`要获取类型的可见性属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3898">This example usesthe `IsNotPublic` property to get the visibility of the type.</span></span>  
  
 [!code-cpp[Classic Type.IsNotPublic Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.IsNotPublic Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CS/source.cs#1)]
 [!code-vb[Classic Type.IsNotPublic Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/VB/source.vb#1)]  
  
 <span data-ttu-id="6240b-3899">下面的代码示例演示了为什么不能使用`IsPublic`和`IsNotPublic`的嵌套类。</span><span class="sxs-lookup"><span data-stu-id="6240b-3899">The following code example demonstrates why you cannot use `IsPublic` and `IsNotPublic` for nested classes.</span></span>  
  
 [!code-cpp[Classic Type.IsNotPublic Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Type.IsNotPublic Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CS/source.cs#2)]
 [!code-vb[Classic Type.IsNotPublic Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/VB/source.vb#2)]  
  
 <span data-ttu-id="6240b-3900">对于嵌套类，忽略的结果`IsPublic`并`IsNotPublic`而且注意到的结果仅`IsNestedPublic`和`IsNestedPrivate`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3900">For nested classes, ignore the results of `IsPublic` and `IsNotPublic` and pay attention only to the results of `IsNestedPublic` and `IsNestedPrivate`.</span></span> <span data-ttu-id="6240b-3901">此代码片段的反射输出将如下所示：</span><span class="sxs-lookup"><span data-stu-id="6240b-3901">The reflection output for this code fragment would be as follows:</span></span>  
  
|<span data-ttu-id="6240b-3902">类</span><span class="sxs-lookup"><span data-stu-id="6240b-3902">Class</span></span>|<span data-ttu-id="6240b-3903">IsNotPublic</span><span class="sxs-lookup"><span data-stu-id="6240b-3903">IsNotPublic</span></span>|<span data-ttu-id="6240b-3904">IsPublic</span><span class="sxs-lookup"><span data-stu-id="6240b-3904">IsPublic</span></span>|<span data-ttu-id="6240b-3905">IsNestedPublic</span><span class="sxs-lookup"><span data-stu-id="6240b-3905">IsNestedPublic</span></span>|<span data-ttu-id="6240b-3906">IsNestedPrivate</span><span class="sxs-lookup"><span data-stu-id="6240b-3906">IsNestedPrivate</span></span>|  
|-----------|-----------------|--------------|--------------------|---------------------|  
|<span data-ttu-id="6240b-3907">包含当前请求的 URL 的</span><span class="sxs-lookup"><span data-stu-id="6240b-3907">A</span></span>|<span data-ttu-id="6240b-3908">false</span><span class="sxs-lookup"><span data-stu-id="6240b-3908">FALSE</span></span>|<span data-ttu-id="6240b-3909">true</span><span class="sxs-lookup"><span data-stu-id="6240b-3909">TRUE</span></span>|<span data-ttu-id="6240b-3910">false</span><span class="sxs-lookup"><span data-stu-id="6240b-3910">FALSE</span></span>|<span data-ttu-id="6240b-3911">false</span><span class="sxs-lookup"><span data-stu-id="6240b-3911">FALSE</span></span>|  
|<span data-ttu-id="6240b-3912">B</span><span class="sxs-lookup"><span data-stu-id="6240b-3912">B</span></span>|<span data-ttu-id="6240b-3913">false</span><span class="sxs-lookup"><span data-stu-id="6240b-3913">FALSE</span></span>|<span data-ttu-id="6240b-3914">false</span><span class="sxs-lookup"><span data-stu-id="6240b-3914">FALSE</span></span>|<span data-ttu-id="6240b-3915">true</span><span class="sxs-lookup"><span data-stu-id="6240b-3915">TRUE</span></span>|<span data-ttu-id="6240b-3916">false</span><span class="sxs-lookup"><span data-stu-id="6240b-3916">FALSE</span></span>|  
|<span data-ttu-id="6240b-3917">C</span><span class="sxs-lookup"><span data-stu-id="6240b-3917">C</span></span>|<span data-ttu-id="6240b-3918">false</span><span class="sxs-lookup"><span data-stu-id="6240b-3918">FALSE</span></span>|<span data-ttu-id="6240b-3919">false</span><span class="sxs-lookup"><span data-stu-id="6240b-3919">FALSE</span></span>|<span data-ttu-id="6240b-3920">false</span><span class="sxs-lookup"><span data-stu-id="6240b-3920">FALSE</span></span>|<span data-ttu-id="6240b-3921">true</span><span class="sxs-lookup"><span data-stu-id="6240b-3921">TRUE</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsPointer">
      <MemberSignature Language="C#" Value="public bool IsPointer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPointer" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsPointer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPointer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPointer { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPointer : bool" Usage="System.Type.IsPointer" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsPointer</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3922">获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否为指针。</span><span class="sxs-lookup"><span data-stu-id="6240b-3922">Gets a value indicating whether the <see cref="T:System.Type" /> is a pointer.</span></span></summary>
        <value><span data-ttu-id="6240b-3923">如果 <see cref="T:System.Type" /> 是指针，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3923"><see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3924">如果当前<xref:System.Type>表示泛型类型或类型参数的泛型类型或泛型方法定义中此属性始终返回`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3924">If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 <span data-ttu-id="6240b-3925">此属性是只读的。</span><span class="sxs-lookup"><span data-stu-id="6240b-3925">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3926">下面的示例演示使用的`IsPointer`属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3926">The following example shows a use of the `IsPointer` property.</span></span>  
  
 [!code-cpp[Type_HasElementTypeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementTypeImpl/CPP/type_haselementtypeimpl.cpp#1)]
 [!code-csharp[Type_HasElementTypeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementTypeImpl/CS/type_haselementtypeimpl.cs#1)]
 [!code-vb[Type_HasElementTypeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementTypeImpl/VB/type_haselementtypeimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Type.IsPointerImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsPointerImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsPointerImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsPointerImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsPointerImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsPointerImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsPointerImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsPointerImpl : unit -&gt; bool" Usage="type.IsPointerImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-3927">在派生类中重写时，实现 <see cref="P:System.Type.IsPointer" /> 属性并确定 <see cref="T:System.Type" /> 是否为指针。</span><span class="sxs-lookup"><span data-stu-id="6240b-3927">When overridden in a derived class, implements the <see cref="P:System.Type.IsPointer" /> property and determines whether the <see cref="T:System.Type" /> is a pointer.</span></span></summary>
        <returns><span data-ttu-id="6240b-3928">如果 <see cref="T:System.Type" /> 是指针，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3928"><see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.IsPointer" />
      </Docs>
    </Member>
    <Member MemberName="IsPrimitive">
      <MemberSignature Language="C#" Value="public bool IsPrimitive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrimitive" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsPrimitive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrimitive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrimitive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPrimitive : bool" Usage="System.Type.IsPrimitive" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsPrimitive</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3929">获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否为基元类型之一。</span><span class="sxs-lookup"><span data-stu-id="6240b-3929">Gets a value indicating whether the <see cref="T:System.Type" /> is one of the primitive types.</span></span></summary>
        <value><span data-ttu-id="6240b-3930">如果 <see langword="true" /> 为基元类型之一，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3930"><see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3931">基元类型是<xref:System.Boolean>， <xref:System.Byte>， <xref:System.SByte>， <xref:System.Int16>， <xref:System.UInt16>， <xref:System.Int32>， <xref:System.UInt32>， <xref:System.Int64>， <xref:System.UInt64>， <xref:System.IntPtr>， <xref:System.UIntPtr>， <xref:System.Char>，<xref:System.Double>，和<xref:System.Single>。</span><span class="sxs-lookup"><span data-stu-id="6240b-3931">The primitive types are <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.IntPtr>, <xref:System.UIntPtr>, <xref:System.Char>, <xref:System.Double>, and <xref:System.Single>.</span></span>  
  
 <span data-ttu-id="6240b-3932">如果当前<xref:System.Type>表示泛型类型或类型参数的泛型类型或泛型方法定义中此属性始终返回`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3932">If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3933">下面的示例演示`IsContextful`， <xref:System.Type.IsMarshalByRef%2A>，并<xref:System.Type.IsPrimitive%2A>的属性<xref:System.Type>类。</span><span class="sxs-lookup"><span data-stu-id="6240b-3933">The following example demonstrates the `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, and <xref:System.Type.IsPrimitive%2A> properties of the <xref:System.Type> class.</span></span> <span data-ttu-id="6240b-3934">它将检查给定的类型是否可以在上下文中，它可以引用封送，以及该类型是基元数据类型是否承载。</span><span class="sxs-lookup"><span data-stu-id="6240b-3934">It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.</span></span>  
  
 [!code-cpp[Type_IsContextful#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextful/CPP/type_iscontextful.cpp#1)]
 [!code-csharp[Type_IsContextful#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextful/CS/type_iscontextful.cs#1)]
 [!code-vb[Type_IsContextful#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextful/VB/type_iscontextful.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Byte" />
        <altmember cref="T:System.SByte" />
        <altmember cref="T:System.Int16" />
        <altmember cref="T:System.UInt16" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.UInt32" />
        <altmember cref="T:System.Int64" />
        <altmember cref="T:System.UInt64" />
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Double" />
        <altmember cref="T:System.Single" />
        <altmember cref="M:System.Type.IsPrimitiveImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsPrimitiveImpl">
      <MemberSignature Language="C#" Value="protected abstract bool IsPrimitiveImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsPrimitiveImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsPrimitiveImpl" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function IsPrimitiveImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool IsPrimitiveImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsPrimitiveImpl : unit -&gt; bool" Usage="type.IsPrimitiveImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-3935">在派生类中重写时，实现 <see cref="P:System.Type.IsPrimitive" /> 属性并确定 <see cref="T:System.Type" /> 是否为基元类型之一。</span><span class="sxs-lookup"><span data-stu-id="6240b-3935">When overridden in a derived class, implements the <see cref="P:System.Type.IsPrimitive" /> property and determines whether the <see cref="T:System.Type" /> is one of the primitive types.</span></span></summary>
        <returns><span data-ttu-id="6240b-3936">如果 <see langword="true" /> 为基元类型之一，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3936"><see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3937">基元类型是<xref:System.Boolean>， <xref:System.Byte>， <xref:System.SByte>， <xref:System.Int16>， <xref:System.UInt16>， <xref:System.Int32>， <xref:System.UInt32>， <xref:System.Int64>， <xref:System.UInt64>， <xref:System.Char>， <xref:System.Double>，和<xref:System.Single>。</span><span class="sxs-lookup"><span data-stu-id="6240b-3937">The primitive types are <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.Char>, <xref:System.Double>, and <xref:System.Single>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3938">下面的示例确定给定的类型是否为基元类型，并显示结果。</span><span class="sxs-lookup"><span data-stu-id="6240b-3938">The following example determines whether the given type is a primitive type and displays the result.</span></span>  
  
 [!code-cpp[Type_IsPrimitiveImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsPrimitiveImpl/CPP/type_isprimitiveimpl.cpp#1)]
 [!code-csharp[Type_IsPrimitiveImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsPrimitiveImpl/CS/type_isprimitiveimpl.cs#1)]
 [!code-vb[Type_IsPrimitiveImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsPrimitiveImpl/VB/type_isprimitiveimpl.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Byte" />
        <altmember cref="T:System.SByte" />
        <altmember cref="T:System.Int16" />
        <altmember cref="T:System.UInt16" />
        <altmember cref="T:System.Int32" />
        <altmember cref="T:System.UInt32" />
        <altmember cref="T:System.Int64" />
        <altmember cref="T:System.UInt64" />
        <altmember cref="T:System.Char" />
        <altmember cref="T:System.Double" />
        <altmember cref="T:System.Single" />
        <altmember cref="P:System.Type.IsPrimitive" />
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPublic : bool" Usage="System.Type.IsPublic" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsPublic</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3939">获取一个值，该值指示 <see cref="T:System.Type" /> 是否声明为公共类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-3939">Gets a value indicating whether the <see cref="T:System.Type" /> is declared public.</span></span></summary>
        <value><span data-ttu-id="6240b-3940">如果 <see langword="true" /> 声明为公共类型且不是嵌套类型，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3940"><see langword="true" /> if the <see cref="T:System.Type" /> is declared public and is not a nested type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3941">不使用嵌套的类型;使用<xref:System.Type.IsNestedPublic%2A>相反。</span><span class="sxs-lookup"><span data-stu-id="6240b-3941">Do not use with nested types; use <xref:System.Type.IsNestedPublic%2A> instead.</span></span>  
  
 <span data-ttu-id="6240b-3942">如果当前<xref:System.Type>表示类型参数的泛型类型，此属性返回`true`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3942">If the current <xref:System.Type> represents a type parameter of a generic type, this property returns `true`.</span></span>  
  
 <span data-ttu-id="6240b-3943"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> 选择可见性属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3943"><xref:System.Reflection.TypeAttributes.VisibilityMask?displayProperty=nameWithType> selects the visibility attributes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3944">下面的示例创建的实例`MyTestClass`，检查`IsPublic`属性，并显示结果。</span><span class="sxs-lookup"><span data-stu-id="6240b-3944">The following example creates an instance of `MyTestClass`, checks for the `IsPublic` property, and displays the result.</span></span>  
  
 [!code-cpp[Type.IsPublic#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type.IsPublic/CPP/type_ispublic.cpp#1)]
 [!code-csharp[Type.IsPublic#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type.IsPublic/CS/type_ispublic.cs#1)]
 [!code-vb[Type.IsPublic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type.IsPublic/VB/type_ispublic.vb#1)]  
  
 <span data-ttu-id="6240b-3945">对于嵌套类，忽略的结果`IsPublic`并`IsNotPublic`而且注意到的结果仅<xref:System.Type.IsNestedPublic%2A>和<xref:System.Type.IsNestedPrivate%2A>。</span><span class="sxs-lookup"><span data-stu-id="6240b-3945">For nested classes, ignore the results of `IsPublic` and `IsNotPublic` and pay attention only to the results of <xref:System.Type.IsNestedPublic%2A> and <xref:System.Type.IsNestedPrivate%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Type.IsSealed" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsSealed</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3946">获取一个值，该值指示 <see cref="T:System.Type" /> 是否声明为密封的。</span><span class="sxs-lookup"><span data-stu-id="6240b-3946">Gets a value indicating whether the <see cref="T:System.Type" /> is declared sealed.</span></span></summary>
        <value><span data-ttu-id="6240b-3947">如果 <see langword="true" /> 被声明为密封的，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3947"><see langword="true" /> if the <see cref="T:System.Type" /> is declared sealed; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3948">如果当前<xref:System.Type>表示类型参数的泛型类型，此属性始终返回`true`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3948">If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-3949">下面的示例创建的实例`sealed`类，检查`IsSealed`属性，并显示结果。</span><span class="sxs-lookup"><span data-stu-id="6240b-3949">The following example creates an instance of a `sealed` class, checks for the `IsSealed` property, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsSealed#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsSealed/CPP/type_issealed.cpp#1)]
 [!code-csharp[Type_IsSealed#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsSealed/CS/type_issealed.cs#1)]
 [!code-vb[Type_IsSealed#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsSealed/VB/type_issealed.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsSecurityCritical">
      <MemberSignature Language="C#" Value="public virtual bool IsSecurityCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityCritical" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSecurityCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecurityCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityCritical : bool" Usage="System.Type.IsSecurityCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3950">获取一个值，该值指示当前的类型在当前信任级别上是安全关键的还是安全可靠关键的，并因此可以执行关键操作。</span><span class="sxs-lookup"><span data-stu-id="6240b-3950">Gets a value that indicates whether the current type is security-critical or security-safe-critical at the current trust level, and therefore can perform critical operations.</span></span></summary>
        <value><span data-ttu-id="6240b-3951">如果当前类型在当前信任级别上是安全关键的或安全可靠关键的，则为 <see langword="true" />；如果它是透明的，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3951"><see langword="true" /> if the current type is security-critical or security-safe-critical at the current trust level; <see langword="false" /> if it is transparent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3952"><xref:System.Type.IsSecurityCritical%2A>， <xref:System.Type.IsSecuritySafeCritical%2A>，和<xref:System.Type.IsSecurityTransparent%2A>属性报告在其当前的信任级别，由公共语言运行时 (CLR) 类型的透明度级别。</span><span class="sxs-lookup"><span data-stu-id="6240b-3952">The <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, and <xref:System.Type.IsSecurityTransparent%2A> properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="6240b-3953">下表中显示这些属性的组合：</span><span class="sxs-lookup"><span data-stu-id="6240b-3953">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="6240b-3954">安全级别</span><span class="sxs-lookup"><span data-stu-id="6240b-3954">Security level</span></span>|<span data-ttu-id="6240b-3955">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="6240b-3955">IsSecurityCritical</span></span>|<span data-ttu-id="6240b-3956">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="6240b-3956">IsSecuritySafeCritical</span></span>|<span data-ttu-id="6240b-3957">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="6240b-3957">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="6240b-3958">严重</span><span class="sxs-lookup"><span data-stu-id="6240b-3958">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="6240b-3959">可靠关键</span><span class="sxs-lookup"><span data-stu-id="6240b-3959">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="6240b-3960">透明</span><span class="sxs-lookup"><span data-stu-id="6240b-3960">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="6240b-3961">使用这些属性比检查程序集及其类型的安全批注、检查当前的信任级别，以及尝试复制运行时的规则要简单得多。</span><span class="sxs-lookup"><span data-stu-id="6240b-3961">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6240b-3962">对于部分信任程序集，此属性的值取决于当前的信任级别的程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-3962">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="6240b-3963">如果程序集加载到部分受信任的应用程序域 （例如，到沙盒应用程序域），运行时将忽略该程序集的安全批注。</span><span class="sxs-lookup"><span data-stu-id="6240b-3963">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="6240b-3964">程序集及其所有类型被视为透明。</span><span class="sxs-lookup"><span data-stu-id="6240b-3964">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="6240b-3965">在运行时才会注意到部分信任程序集的安全批注时该程序集加载到完全受信任的应用程序域 （例如，为桌面应用程序的默认应用程序域）。</span><span class="sxs-lookup"><span data-stu-id="6240b-3965">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="6240b-3966">与此相反，受信任的程序集 （即，具有强名称程序集安装在全局程序集缓存中） 是始终以而不考虑应用程序域的信任级别的完全信任方式加载的因此其当前的信任级别始终是完全受信任。</span><span class="sxs-lookup"><span data-stu-id="6240b-3966">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="6240b-3967">您可以使用来确定当前的信任级别的程序集和应用程序域<xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType>和<xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3967">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="6240b-3968">有关反射和透明度的详细信息，请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。</span><span class="sxs-lookup"><span data-stu-id="6240b-3968">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="6240b-3969">有关透明度的信息，请参阅[安全更改](~/docs/framework/security/security-changes.md)。</span><span class="sxs-lookup"><span data-stu-id="6240b-3969">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsSecuritySafeCritical" />
        <altmember cref="P:System.Type.IsSecurityTransparent" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md"><span data-ttu-id="6240b-3970">反射的安全注意事项</span><span class="sxs-lookup"><span data-stu-id="6240b-3970">Security Considerations for Reflection</span></span></related>
        <related type="Article" href="~/docs/framework/security/security-changes.md"><span data-ttu-id="6240b-3971">.NET Framework 中的安全性更改</span><span class="sxs-lookup"><span data-stu-id="6240b-3971">Security Changes in the .NET Framework</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsSecuritySafeCritical">
      <MemberSignature Language="C#" Value="public virtual bool IsSecuritySafeCritical { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecuritySafeCritical" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSecuritySafeCritical" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecuritySafeCritical As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecuritySafeCritical { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecuritySafeCritical : bool" Usage="System.Type.IsSecuritySafeCritical" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3972">获取一个值，该值指示当前类型在当前信任级别上是否是安全可靠关键的；即它是否可以执行关键操作并可以由透明代码访问。</span><span class="sxs-lookup"><span data-stu-id="6240b-3972">Gets a value that indicates whether the current type is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.</span></span></summary>
        <value><span data-ttu-id="6240b-3973">如果当前类型在当前信任级别上是安全可靠关键的，则为 <see langword="true" />；如果它是安全关键的或透明的，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3973"><see langword="true" /> if the current type is security-safe-critical at the current trust level; <see langword="false" /> if it is security-critical or transparent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3974"><xref:System.Type.IsSecurityCritical%2A>， <xref:System.Type.IsSecuritySafeCritical%2A>，和<xref:System.Type.IsSecurityTransparent%2A>属性报告在其当前的信任级别，由公共语言运行时 (CLR) 类型的透明度级别。</span><span class="sxs-lookup"><span data-stu-id="6240b-3974">The <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, and <xref:System.Type.IsSecurityTransparent%2A> properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="6240b-3975">下表中显示这些属性的组合：</span><span class="sxs-lookup"><span data-stu-id="6240b-3975">The combinations of these properties are shown in the following table:</span></span>  
  
|<span data-ttu-id="6240b-3976">安全级别</span><span class="sxs-lookup"><span data-stu-id="6240b-3976">Security level</span></span>|<span data-ttu-id="6240b-3977">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="6240b-3977">IsSecurityCritical</span></span>|<span data-ttu-id="6240b-3978">IsSecurityCritical</span><span class="sxs-lookup"><span data-stu-id="6240b-3978">IsSecuritySafeCritical</span></span>|<span data-ttu-id="6240b-3979">IsSecurityTransparent</span><span class="sxs-lookup"><span data-stu-id="6240b-3979">IsSecurityTransparent</span></span>|  
|--------------------|------------------------|----------------------------|---------------------------|  
|<span data-ttu-id="6240b-3980">严重</span><span class="sxs-lookup"><span data-stu-id="6240b-3980">Critical</span></span>|`true`|`false`|`false`|  
|<span data-ttu-id="6240b-3981">可靠关键</span><span class="sxs-lookup"><span data-stu-id="6240b-3981">Safe critical</span></span>|`true`|`true`|`false`|  
|<span data-ttu-id="6240b-3982">透明</span><span class="sxs-lookup"><span data-stu-id="6240b-3982">Transparent</span></span>|`false`|`false`|`true`|  
  
 <span data-ttu-id="6240b-3983">使用这些属性比检查程序集及其类型的安全批注、检查当前的信任级别，以及尝试复制运行时的规则要简单得多。</span><span class="sxs-lookup"><span data-stu-id="6240b-3983">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6240b-3984">对于部分信任程序集，此属性的值取决于当前的信任级别的程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-3984">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="6240b-3985">如果程序集加载到部分受信任的应用程序域 （例如，到沙盒应用程序域），运行时将忽略该程序集的安全批注。</span><span class="sxs-lookup"><span data-stu-id="6240b-3985">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="6240b-3986">程序集及其所有类型被视为透明。</span><span class="sxs-lookup"><span data-stu-id="6240b-3986">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="6240b-3987">在运行时才会注意到部分信任程序集的安全批注时该程序集加载到完全受信任的应用程序域 （例如，为桌面应用程序的默认应用程序域）。</span><span class="sxs-lookup"><span data-stu-id="6240b-3987">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="6240b-3988">与此相反，受信任的程序集 （即，具有强名称程序集安装在全局程序集缓存中） 是始终以而不考虑应用程序域的信任级别的完全信任方式加载的因此其当前的信任级别始终是完全受信任。</span><span class="sxs-lookup"><span data-stu-id="6240b-3988">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="6240b-3989">您可以使用来确定当前的信任级别的程序集和应用程序域<xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType>和<xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-3989">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="6240b-3990">有关反射和透明度的详细信息，请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。</span><span class="sxs-lookup"><span data-stu-id="6240b-3990">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="6240b-3991">有关透明度的信息，请参阅[安全更改](~/docs/framework/security/security-changes.md)。</span><span class="sxs-lookup"><span data-stu-id="6240b-3991">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsSecurityCritical" />
        <altmember cref="P:System.Type.IsSecurityTransparent" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md"><span data-ttu-id="6240b-3992">反射的安全注意事项</span><span class="sxs-lookup"><span data-stu-id="6240b-3992">Security Considerations for Reflection</span></span></related>
        <related type="Article" href="~/docs/framework/security/security-changes.md"><span data-ttu-id="6240b-3993">.NET Framework 中的安全性更改</span><span class="sxs-lookup"><span data-stu-id="6240b-3993">Security Changes in the .NET Framework</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsSecurityTransparent">
      <MemberSignature Language="C#" Value="public virtual bool IsSecurityTransparent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecurityTransparent" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSecurityTransparent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSecurityTransparent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSecurityTransparent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecurityTransparent : bool" Usage="System.Type.IsSecurityTransparent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-3994">获取一个值，该值指示当前类型在当前信任级别上是否是透明的而无法执行关键操作。</span><span class="sxs-lookup"><span data-stu-id="6240b-3994">Gets a value that indicates whether the current type is transparent at the current trust level, and therefore cannot perform critical operations.</span></span></summary>
        <value><span data-ttu-id="6240b-3995">如果该类型在当前信任级别上是安全透明的，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-3995"><see langword="true" /> if the type is security-transparent at the current trust level; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-3996">如果此属性返回`true`，则<xref:System.Type.IsSecurityCritical%2A>并<xref:System.Type.IsSecuritySafeCritical%2A>属性返回`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-3996">If this property returns `true`, the <xref:System.Type.IsSecurityCritical%2A> and <xref:System.Type.IsSecuritySafeCritical%2A> properties return `false`.</span></span>  
  
 <span data-ttu-id="6240b-3997"><xref:System.Type.IsSecurityCritical%2A>， <xref:System.Type.IsSecuritySafeCritical%2A>，和<xref:System.Type.IsSecurityTransparent%2A>属性报告在其当前的信任级别，由公共语言运行时 (CLR) 类型的透明度级别。</span><span class="sxs-lookup"><span data-stu-id="6240b-3997">The <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, and <xref:System.Type.IsSecurityTransparent%2A> properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR).</span></span> <span data-ttu-id="6240b-3998">使用这些属性比检查程序集及其类型的安全批注、检查当前的信任级别，以及尝试复制运行时的规则要简单得多。</span><span class="sxs-lookup"><span data-stu-id="6240b-3998">Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="6240b-3999">对于部分信任程序集，此属性的值取决于当前的信任级别的程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-3999">For partial-trust assemblies, the value of this property depends on the current trust level of the assembly.</span></span> <span data-ttu-id="6240b-4000">如果程序集加载到部分受信任的应用程序域 （例如，到沙盒应用程序域），运行时将忽略该程序集的安全批注。</span><span class="sxs-lookup"><span data-stu-id="6240b-4000">If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly.</span></span> <span data-ttu-id="6240b-4001">程序集及其所有类型被视为透明。</span><span class="sxs-lookup"><span data-stu-id="6240b-4001">The assembly and all its types are treated as transparent.</span></span> <span data-ttu-id="6240b-4002">在运行时才会注意到部分信任程序集的安全批注时该程序集加载到完全受信任的应用程序域 （例如，为桌面应用程序的默认应用程序域）。</span><span class="sxs-lookup"><span data-stu-id="6240b-4002">The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application).</span></span> <span data-ttu-id="6240b-4003">与此相反，受信任的程序集 （即，具有强名称程序集安装在全局程序集缓存中） 是始终以而不考虑应用程序域的信任级别的完全信任方式加载的因此其当前的信任级别始终是完全受信任。</span><span class="sxs-lookup"><span data-stu-id="6240b-4003">By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted.</span></span> <span data-ttu-id="6240b-4004">您可以使用来确定当前的信任级别的程序集和应用程序域<xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType>和<xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-4004">You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=nameWithType> properties.</span></span>  
  
 <span data-ttu-id="6240b-4005">有关反射和透明度的详细信息，请参阅[反射的安全注意事项](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md)。</span><span class="sxs-lookup"><span data-stu-id="6240b-4005">For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).</span></span> <span data-ttu-id="6240b-4006">有关透明度的信息，请参阅[安全更改](~/docs/framework/security/security-changes.md)。</span><span class="sxs-lookup"><span data-stu-id="6240b-4006">For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Type.IsSecurityCritical" />
        <altmember cref="P:System.Type.IsSecuritySafeCritical" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md"><span data-ttu-id="6240b-4007">反射的安全注意事项</span><span class="sxs-lookup"><span data-stu-id="6240b-4007">Security Considerations for Reflection</span></span></related>
        <related type="Article" href="~/docs/framework/security/security-changes.md"><span data-ttu-id="6240b-4008">.NET Framework 中的安全性更改</span><span class="sxs-lookup"><span data-stu-id="6240b-4008">Security Changes in the .NET Framework</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsSerializable">
      <MemberSignature Language="C#" Value="public virtual bool IsSerializable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSerializable" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSerializable" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSerializable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSerializable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSerializable : bool" Usage="System.Type.IsSerializable" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsSerializable</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-4009">获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否为可序列化的。</span><span class="sxs-lookup"><span data-stu-id="6240b-4009">Gets a value indicating whether the <see cref="T:System.Type" /> is serializable.</span></span></summary>
        <value><span data-ttu-id="6240b-4010">如果 <see cref="T:System.Type" /> 是可序列化的，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4010"><see langword="true" /> if the <see cref="T:System.Type" /> is serializable; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
<span data-ttu-id="6240b-4011">.NET Standard 中定义的类型不具有<xref:System.SerializableAttribute>。</span><span class="sxs-lookup"><span data-stu-id="6240b-4011">Types that are defined in the .NET Standard are not marked with <xref:System.SerializableAttribute>.</span></span> <span data-ttu-id="6240b-4012">相反，每个.NET 实现确定类型是否为可序列化。</span><span class="sxs-lookup"><span data-stu-id="6240b-4012">Instead, each .NET implementation determines whether a type is serializable.</span></span> <span data-ttu-id="6240b-4013">在运行时，可以使用<xref:System.Type.IsSerializable%2A>属性来确定该实现是否支持的类型的实例序列化。</span><span class="sxs-lookup"><span data-stu-id="6240b-4013">At run time, you can use the <xref:System.Type.IsSerializable%2A> property to determine whether that implementation supports serialization of an instance of the type.</span></span> <span data-ttu-id="6240b-4014">有关详细信息和示例，请参阅[如何确定.NET 标准对象是否可序列化](~/docs/standard/serialization/how-to-determine-if-netstandard-object-is-serializable.md)。</span><span class="sxs-lookup"><span data-stu-id="6240b-4014">For more information and an example, see [How to determine if a .NET Standard object is serializable](~/docs/standard/serialization/how-to-determine-if-netstandard-object-is-serializable.md).</span></span>
  
 <span data-ttu-id="6240b-4015">如果当前<xref:System.Type>表示构造泛型类型，此属性适用于从其构造类型的泛型类型定义。</span><span class="sxs-lookup"><span data-stu-id="6240b-4015">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="6240b-4016">例如，如果当前<xref:System.Type>表示`MyGenericType<int>`(`MyGenericType(Of Integer)`在 Visual Basic 中)，此属性的值由`MyGenericType<T>`。</span><span class="sxs-lookup"><span data-stu-id="6240b-4016">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="6240b-4017">如果当前<xref:System.Type>表示泛型类型或泛型方法定义中的类型参数，此属性始终返回`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-4017">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-4018">下面的示例创建的实例`MyTestClass`类，设置 [Serializable] 特性，并检查`IsSerializable`属性`true`或`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-4018">The following example creates an instance of `MyTestClass` class, sets the [Serializable] attribute, and checks the `IsSerializable` property for `true` or `false`.</span></span>  
  
 [!code-cpp[Type_IsSerializable#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsSerializable/CPP/type_isserializable.cpp#1)]
 [!code-csharp[Type_IsSerializable#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsSerializable/CS/type_isserializable.cs#1)]
 [!code-vb[Type_IsSerializable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsSerializable/VB/type_isserializable.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
      </Docs>
    </Member>
    <Member MemberName="IsSignatureType">
      <MemberSignature Language="C#" Value="public virtual bool IsSignatureType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSignatureType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSignatureType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSignatureType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSignatureType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSignatureType : bool" Usage="System.Type.IsSignatureType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSpecialName : bool" Usage="System.Type.IsSpecialName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsSpecialName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-4019">获取一个值，该值指示该类型是否具有需要特殊处理的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-4019">Gets a value indicating whether the type has a name that requires special handling.</span></span></summary>
        <value><span data-ttu-id="6240b-4020">如果该类型具有需要特殊处理的名称，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4020"><see langword="true" /> if the type has a name that requires special handling; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-4021">名称的开头或包含下划线字符 (_)、 属性访问器和运算符的重载方法是可能需要特殊处理某些编译器的类型的示例。</span><span class="sxs-lookup"><span data-stu-id="6240b-4021">Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of types that might require special treatment by some compilers.</span></span>  
  
 <span data-ttu-id="6240b-4022">如果当前<xref:System.Type>表示构造泛型类型，此属性适用于从其构造类型的泛型类型定义。</span><span class="sxs-lookup"><span data-stu-id="6240b-4022">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="6240b-4023">例如，如果当前<xref:System.Type>表示`MyGenericType<int>`(`MyGenericType(Of Integer)`在 Visual Basic 中)，此属性的值由`MyGenericType<T>`。</span><span class="sxs-lookup"><span data-stu-id="6240b-4023">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="6240b-4024">如果当前<xref:System.Type>表示泛型类型或泛型方法定义中的类型参数，此属性始终返回`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-4024">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IsSubclassOf">
      <MemberSignature Language="C#" Value="public virtual bool IsSubclassOf (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubclassOf(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsSubclassOf(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSubclassOf (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSubclassOf(Type ^ c);" />
      <MemberSignature Language="F#" Value="abstract member IsSubclassOf : Type -&gt; bool&#xA;override this.IsSubclassOf : Type -&gt; bool" Usage="type.IsSubclassOf c" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.IsSubclassOf(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="6240b-4025">要与当前类型进行比较的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-4025">The type to compare with the current type.</span></span></param>
        <summary><span data-ttu-id="6240b-4026">确定当前 <see cref="T:System.Type" /> 是否派生自指定的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4026">Determines whether the current <see cref="T:System.Type" /> derives from the specified <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="6240b-4027">如果当前 <see langword="true" /> 派生于 <see langword="Type" />，则为 <paramref name="c" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4027"><see langword="true" /> if the current <see langword="Type" /> derives from <paramref name="c" />; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="6240b-4028">如果 <see langword="false" /> 和当前 <paramref name="c" /> 相等，此方法也返回 <see langword="Type" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4028">This method also returns <see langword="false" /> if <paramref name="c" /> and the current <see langword="Type" /> are equal.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-4029">您可以调用<xref:System.Type.IsSubclassOf%2A>方法，以确定任何以下：</span><span class="sxs-lookup"><span data-stu-id="6240b-4029">You can call the <xref:System.Type.IsSubclassOf%2A> method to determine any of the following:</span></span>  
  
-   <span data-ttu-id="6240b-4030">是否从另一个类派生。</span><span class="sxs-lookup"><span data-stu-id="6240b-4030">Whether one class derives from another.</span></span>  
  
-   <span data-ttu-id="6240b-4031">一个类型派生<xref:System.ValueType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-4031">Whether a type derives from <xref:System.ValueType>.</span></span> <span data-ttu-id="6240b-4032">但是，<xref:System.Type.IsValueType%2A>是更有效地确定类型是否为值类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-4032">However, the <xref:System.Type.IsValueType%2A> is a more efficient way to determine whether a type is a value type.</span></span>  
  
-   <span data-ttu-id="6240b-4033">一个类型派生<xref:System.Enum>。</span><span class="sxs-lookup"><span data-stu-id="6240b-4033">Whether a type derives from <xref:System.Enum>.</span></span> <span data-ttu-id="6240b-4034">但是，<xref:System.Type.IsEnum%2A>方法是更有效地确定类型是否为枚举。</span><span class="sxs-lookup"><span data-stu-id="6240b-4034">However, the <xref:System.Type.IsEnum%2A> method is a more efficient way to determine whether a type is an enumeration.</span></span>  
  
-   <span data-ttu-id="6240b-4035">某个类型是一个委托，也就是说，是否从它派生<xref:System.Delegate>或<xref:System.MulticastDelegate>。</span><span class="sxs-lookup"><span data-stu-id="6240b-4035">Whether a type is a delegate, that is, whether it derives from either <xref:System.Delegate> or <xref:System.MulticastDelegate>.</span></span>  
  
 <span data-ttu-id="6240b-4036"><xref:System.Type.IsSubclassOf%2A>方法不能用于确定是否从另一个接口，派生接口或类是否实现的接口。</span><span class="sxs-lookup"><span data-stu-id="6240b-4036">The <xref:System.Type.IsSubclassOf%2A> method cannot be used to determine whether an interface derives from another interface, or whether a class implements an interface.</span></span> <span data-ttu-id="6240b-4037">使用<xref:System.Type.IsAssignableFrom%2A>方法实现此目的，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="6240b-4037">Use the <xref:System.Type.IsAssignableFrom%2A> method for that purpose, as the following example shows.</span></span>  
  
 [!code-csharp[System.Type.IsSubclassOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.issubclassof/cs/issubclassof_interface1.cs#1)]
 [!code-vb[System.Type.IsSubclassOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.issubclassof/vb/issubclassof_interface1.vb#1)]  
  
 <span data-ttu-id="6240b-4038">如果当前<xref:System.Type>表示的类型参数中的泛型类型或泛型方法定义中，派生从其类约束或<xref:System.Object?displayProperty=nameWithType>如果它没有类约束。</span><span class="sxs-lookup"><span data-stu-id="6240b-4038">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, it derives from its class constraint or from <xref:System.Object?displayProperty=nameWithType> if it has no class constraint.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-4039">有了接口，使用时除外<xref:System.Type.IsSubclassOf%2A>截然相反， <xref:System.Type.IsAssignableFrom%2A>。</span><span class="sxs-lookup"><span data-stu-id="6240b-4039">Except when used with interfaces, <xref:System.Type.IsSubclassOf%2A> is the converse of <xref:System.Type.IsAssignableFrom%2A>.</span></span> <span data-ttu-id="6240b-4040">也就是说，如果`t1.IsSubclassOf(t2)`是`true`，然后`t2.IsAssignableFrom(t1)`也是`true`。</span><span class="sxs-lookup"><span data-stu-id="6240b-4040">That is, if `t1.IsSubclassOf(t2)` is `true`, then `t2.IsAssignableFrom(t1)` is also `true`.</span></span>  
  
 <span data-ttu-id="6240b-4041">此方法由派生类中重写。</span><span class="sxs-lookup"><span data-stu-id="6240b-4041">This method can be overridden by a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-4042">下面的示例创建名为的类`Class1`和派生的类名为`DerivedC1`。</span><span class="sxs-lookup"><span data-stu-id="6240b-4042">The following example creates a class named `Class1` and a derived class named `DerivedC1`.</span></span> <span data-ttu-id="6240b-4043">它将调用<xref:System.Type.IsSubclassOf%2A>方法以显示`DerivedC1`是一个的子类`Class1`。</span><span class="sxs-lookup"><span data-stu-id="6240b-4043">It calls the <xref:System.Type.IsSubclassOf%2A> method to show that `DerivedC1` is a subclass of `Class1`.</span></span>  
  
 [!code-csharp[TestIsSubclassOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsSubclassOf/CS/testissubclassof.cs#1)]
 [!code-vb[TestIsSubclassOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsSubclassOf/VB/testissubclassof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-4044"><paramref name="c" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4044"><paramref name="c" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="P:System.Type.BaseType" />
      </Docs>
    </Member>
    <Member MemberName="IsSZArray">
      <MemberSignature Language="C#" Value="public virtual bool IsSZArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSZArray" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsSZArray" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsSZArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSZArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSZArray : bool" Usage="System.Type.IsSZArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTypeDefinition">
      <MemberSignature Language="C#" Value="public virtual bool IsTypeDefinition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTypeDefinition" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsTypeDefinition" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsTypeDefinition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsTypeDefinition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTypeDefinition : bool" Usage="System.Type.IsTypeDefinition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnicodeClass">
      <MemberSignature Language="C#" Value="public bool IsUnicodeClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnicodeClass" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsUnicodeClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUnicodeClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUnicodeClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUnicodeClass : bool" Usage="System.Type.IsUnicodeClass" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsUnicodeClass</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-4045">获取一个值，该值指示是否为 <see langword="UnicodeClass" /> 选择了字符串格式属性 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4045">Gets a value indicating whether the string format attribute <see langword="UnicodeClass" /> is selected for the <see cref="T:System.Type" />.</span></span></summary>
        <value><span data-ttu-id="6240b-4046">如果为 <see langword="true" /> 选择了字符串格式属性 <see langword="UnicodeClass" />，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4046"><see langword="true" /> if the string format attribute <see langword="UnicodeClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-4047"><xref:System.Reflection.TypeAttributes.StringFormatMask>用于选择字符串格式属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-4047">The <xref:System.Reflection.TypeAttributes.StringFormatMask> is used to select the string format attributes.</span></span> <span data-ttu-id="6240b-4048">通过定义应如何解释字符串，字符串格式属性增强互操作性。</span><span class="sxs-lookup"><span data-stu-id="6240b-4048">The string format attributes enhance interoperability by defining how strings should be interpreted.</span></span>  
  
 <span data-ttu-id="6240b-4049">如果当前<xref:System.Type>表示构造泛型类型，此属性适用于从其构造类型的泛型类型定义。</span><span class="sxs-lookup"><span data-stu-id="6240b-4049">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="6240b-4050">例如，如果当前<xref:System.Type>表示`MyGenericType<int>`(`MyGenericType(Of Integer)`在 Visual Basic 中)，此属性的值由`MyGenericType<T>`。</span><span class="sxs-lookup"><span data-stu-id="6240b-4050">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="6240b-4051">如果当前<xref:System.Type>表示泛型类型或泛型方法定义中的类型参数，此属性始终返回`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-4051">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsAnsiClass" />
        <altmember cref="P:System.Type.IsAutoClass" />
      </Docs>
    </Member>
    <Member MemberName="IsValueType">
      <MemberSignature Language="C#" Value="public bool IsValueType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueType" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsValueType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueType : bool" Usage="System.Type.IsValueType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.IsValueType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-4052">获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否为值类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-4052">Gets a value indicating whether the <see cref="T:System.Type" /> is a value type.</span></span></summary>
        <value><span data-ttu-id="6240b-4053">如果 <see langword="true" /> 是值类型，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4053"><see langword="true" /> if the <see cref="T:System.Type" /> is a value type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-4054">值类型是表示为位; 序列的类型值类型不是类或接口。</span><span class="sxs-lookup"><span data-stu-id="6240b-4054">Value types are types that are represented as sequences of bits; value types are not classes or interfaces.</span></span> <span data-ttu-id="6240b-4055">值类型称为"结构"中某些编程语言。</span><span class="sxs-lookup"><span data-stu-id="6240b-4055">Value types are referred to as "structs" in some programming languages.</span></span> <span data-ttu-id="6240b-4056">枚举都是值类型的一种特殊情况。</span><span class="sxs-lookup"><span data-stu-id="6240b-4056">Enums are a special case of value types.</span></span>  
  
 <span data-ttu-id="6240b-4057">此属性返回`false`有关<xref:System.ValueType>类，因为<xref:System.ValueType>不是值类型自身。</span><span class="sxs-lookup"><span data-stu-id="6240b-4057">This property returns `false` for the <xref:System.ValueType> class, because <xref:System.ValueType> is not a value type itself.</span></span> <span data-ttu-id="6240b-4058">它是所有的值类型的基类，因此可以向其分配任何值类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-4058">It is the base class for all value types, and therefore any value type can be assigned to it.</span></span> <span data-ttu-id="6240b-4059">这是不可能如果<xref:System.ValueType>自身是值类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-4059">This would not be possible if <xref:System.ValueType> itself was a value type.</span></span> <span data-ttu-id="6240b-4060">值类型进行装箱时分配给类型的字段<xref:System.ValueType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-4060">Value types are boxed when they are assigned to a field of type <xref:System.ValueType>.</span></span>  
  
 <span data-ttu-id="6240b-4061">此属性返回`true`枚举，而不是<xref:System.Enum>类型本身。</span><span class="sxs-lookup"><span data-stu-id="6240b-4061">This property returns `true` for enumerations, but not for the <xref:System.Enum> type itself.</span></span> <span data-ttu-id="6240b-4062">有关演示此行为的示例，请参阅<xref:System.Type.IsEnum%2A>。</span><span class="sxs-lookup"><span data-stu-id="6240b-4062">For an example that demonstrates this behavior, see <xref:System.Type.IsEnum%2A>.</span></span>  
  
 <span data-ttu-id="6240b-4063">此属性是只读的。</span><span class="sxs-lookup"><span data-stu-id="6240b-4063">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-4064">下面的示例创建一个类型的变量`MyEnum`，检查`IsValueType`属性，并显示结果。</span><span class="sxs-lookup"><span data-stu-id="6240b-4064">The following example creates a variable of type `MyEnum`, checks for the `IsValueType` property, and displays the result.</span></span>  
  
 [!code-cpp[Type_IsValueType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsValueType/CPP/type_isvaluetype.cpp#1)]
 [!code-csharp[Type_IsValueType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsValueType/CS/type_isvaluetype.cs#1)]
 [!code-vb[Type_IsValueType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsValueType/VB/type_isvaluetype.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsClass" />
        <altmember cref="P:System.Type.IsInterface" />
        <altmember cref="T:System.ValueType" />
        <altmember cref="M:System.Type.IsValueTypeImpl" />
      </Docs>
    </Member>
    <Member MemberName="IsValueTypeImpl">
      <MemberSignature Language="C#" Value="protected virtual bool IsValueTypeImpl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsValueTypeImpl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.IsValueTypeImpl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsValueTypeImpl () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsValueTypeImpl();" />
      <MemberSignature Language="F#" Value="abstract member IsValueTypeImpl : unit -&gt; bool&#xA;override this.IsValueTypeImpl : unit -&gt; bool" Usage="type.IsValueTypeImpl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-4065">实现 <see cref="P:System.Type.IsValueType" /> 属性并确定 <see cref="T:System.Type" /> 是否是值类型；即，它不是值类或接口。</span><span class="sxs-lookup"><span data-stu-id="6240b-4065">Implements the <see cref="P:System.Type.IsValueType" /> property and determines whether the <see cref="T:System.Type" /> is a value type; that is, not a class or an interface.</span></span></summary>
        <returns><span data-ttu-id="6240b-4066">如果 <see langword="true" /> 是值类型，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4066"><see langword="true" /> if the <see cref="T:System.Type" /> is a value type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-4067">此方法用于启用备用类型系统的实现。</span><span class="sxs-lookup"><span data-stu-id="6240b-4067">This method is provided to enable the implementation of alternate type systems.</span></span> <span data-ttu-id="6240b-4068">它通常不使用应用程序代码中。</span><span class="sxs-lookup"><span data-stu-id="6240b-4068">It is not generally used in application code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
        <altmember cref="P:System.Type.IsClass" />
        <altmember cref="P:System.Type.IsInterface" />
        <altmember cref="T:System.ValueType" />
        <altmember cref="P:System.Type.IsValueType" />
      </Docs>
    </Member>
    <Member MemberName="IsVariableBoundArray">
      <MemberSignature Language="C#" Value="public virtual bool IsVariableBoundArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVariableBoundArray" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsVariableBoundArray" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsVariableBoundArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsVariableBoundArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVariableBoundArray : bool" Usage="System.Type.IsVariableBoundArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVisible">
      <MemberSignature Language="C#" Value="public bool IsVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Type.IsVisible" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsVisible { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsVisible : bool" Usage="System.Type.IsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-4069">获取一个指示 <see cref="T:System.Type" /> 是否可由程序集之外的代码访问的值。</span><span class="sxs-lookup"><span data-stu-id="6240b-4069">Gets a value indicating whether the <see cref="T:System.Type" /> can be accessed by code outside the assembly.</span></span></summary>
        <value><span data-ttu-id="6240b-4070">如果当前 <see langword="true" /> 是公共类型或公共嵌套类型从而使所有封闭类型都是公共类型，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4070"><see langword="true" /> if the current <see cref="T:System.Type" /> is a public type or a public nested type such that all the enclosing types are public; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-4071">此属性用于确定类型是否为公共接口的组件程序集的一部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-4071">Use this property to determine whether a type is part of the public interface of a component assembly.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-4072">下面的代码示例测试两个类，其中只有一个是程序集外部可见。</span><span class="sxs-lookup"><span data-stu-id="6240b-4072">The following code example tests two classes, only one of which is visible outside the assembly.</span></span>  
  
 [!code-cpp[System.Type.IsVisible#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsVisible/CPP/source.cpp#1)]
 [!code-csharp[System.Type.IsVisible#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsVisible/CS/source.cs#1)]
 [!code-vb[System.Type.IsVisible#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsVisible/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeArrayType">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6240b-4073">返回表示当前类型的数组的 <see cref="T:System.Type" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-4073">Returns a <see cref="T:System.Type" /> object that represents an array of the current type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeArrayType">
      <MemberSignature Language="C#" Value="public virtual Type MakeArrayType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeArrayType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeArrayType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeArrayType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeArrayType();" />
      <MemberSignature Language="F#" Value="abstract member MakeArrayType : unit -&gt; Type&#xA;override this.MakeArrayType : unit -&gt; Type" Usage="type.MakeArrayType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-4074">返回 <see cref="T:System.Type" /> 对象，该对象表示当前类型的一维数组（下限为零）。</span><span class="sxs-lookup"><span data-stu-id="6240b-4074">Returns a <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</span></span></summary>
        <returns><span data-ttu-id="6240b-4075">返回一个表示当前类型的一维数组（下限为零）的 <see cref="T:System.Type" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-4075">A <see cref="T:System.Type" /> object representing a one-dimensional array of the current type, with a lower bound of zero.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-4076"><xref:System.Type.MakeArrayType%2A>方法提供了用于生成在运行时计算其元素类型的数组类型的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-4076">The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types whose element types are computed at run time.</span></span>  
  
 <span data-ttu-id="6240b-4077">**请注意**公共语言运行时进行了区分向量 （也就是说，始终从零开始的一维数组） 和多维数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-4077">**Note** The common language runtime makes a distinction between vectors (that is, one-dimensional arrays that are always zero-based) and multidimensional arrays.</span></span> <span data-ttu-id="6240b-4078">一个向量，始终具有只有一个维度，不是恰好有一个维度的多维数组相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-4078">A vector, which always has only one dimension, is not the same as a multidimensional array that happens to have only one dimension.</span></span> <span data-ttu-id="6240b-4079">此方法的重载仅可用于创建的矢量类型，并且它是唯一的方法来创建矢量类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-4079">This method overload can only be used to create vector types, and it is the only way to create a vector type.</span></span> <span data-ttu-id="6240b-4080">使用<xref:System.Type.MakeArrayType%28System.Int32%29>方法重载来创建多维数组类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-4080">Use the <xref:System.Type.MakeArrayType%28System.Int32%29> method overload to create multidimensional array types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-4081">下面的代码示例创建数组， `ref` (`ByRef`在 Visual Basic 中)，以及元素的指针类型`Test`类。</span><span class="sxs-lookup"><span data-stu-id="6240b-4081">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6240b-4082">基类不支持调用的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-4082">The invoked method is not supported in the base class.</span></span> <span data-ttu-id="6240b-4083">派生类必须提供一个实现。</span><span class="sxs-lookup"><span data-stu-id="6240b-4083">Derived classes must provide an implementation.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="6240b-4084">当前的类型是 <see cref="T:System.TypedReference" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4084">The current type is <see cref="T:System.TypedReference" />.</span></span>  
  
<span data-ttu-id="6240b-4085">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-4085">-or-</span></span> 
<span data-ttu-id="6240b-4086">当前的类型是 <see langword="ByRef" /> 类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-4086">The current type is a <see langword="ByRef" /> type.</span></span> <span data-ttu-id="6240b-4087">也就是说，<see cref="P:System.Type.IsByRef" /> 返回 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4087">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <altmember cref="M:System.Type.MakeByRefType" />
        <altmember cref="M:System.Type.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeArrayType">
      <MemberSignature Language="C#" Value="public virtual Type MakeArrayType (int rank);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeArrayType(int32 rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeArrayType(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeArrayType (rank As Integer) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeArrayType(int rank);" />
      <MemberSignature Language="F#" Value="abstract member MakeArrayType : int -&gt; Type&#xA;override this.MakeArrayType : int -&gt; Type" Usage="type.MakeArrayType rank" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rank"><span data-ttu-id="6240b-4088">数组的维数。</span><span class="sxs-lookup"><span data-stu-id="6240b-4088">The number of dimensions for the array.</span></span> <span data-ttu-id="6240b-4089">此数字必须小于或等于 32。</span><span class="sxs-lookup"><span data-stu-id="6240b-4089">This number must be less than or equal to 32.</span></span></param>
        <summary><span data-ttu-id="6240b-4090">返回 <see cref="T:System.Type" /> 对象，该对象表示一个具有指定维数的当前类型的数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-4090">Returns a <see cref="T:System.Type" /> object representing an array of the current type, with the specified number of dimensions.</span></span></summary>
        <returns><span data-ttu-id="6240b-4091">表示当前类型的指定维数的数组的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-4091">An object representing an array of the current type, with the specified number of dimensions.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-4092"><xref:System.Type.MakeArrayType%2A>方法提供了用于生成在运行时计算其元素类型的数组类型的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-4092">The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types whose element types are computed at run time.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-4093">公共语言运行时进行了区分向量 （也就是说，始终从零开始的一维数组） 和多维数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-4093">The common language runtime makes a distinction between vectors (that is, one-dimensional arrays that are always zero-based) and multidimensional arrays.</span></span> <span data-ttu-id="6240b-4094">一个向量，始终具有只有一个维度，不是恰好有一个维度的多维数组相同。</span><span class="sxs-lookup"><span data-stu-id="6240b-4094">A vector, which always has only one dimension, is not the same as a multidimensional array that happens to have only one dimension.</span></span> <span data-ttu-id="6240b-4095">不能使用此方法的重载创建矢量类型;如果`rank`为 1，此方法的重载返回恰好有一个维度的多维数组类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-4095">You cannot use this method overload to create a vector type; if `rank` is 1, this method overload returns a multidimensional array type that happens to have one dimension.</span></span> <span data-ttu-id="6240b-4096">使用<xref:System.Type.MakeArrayType>方法重载来创建矢量类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-4096">Use the <xref:System.Type.MakeArrayType> method overload to create vector types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-4097">下面的代码示例创建数组， `ref` (`ByRef`在 Visual Basic 中)，以及元素的指针类型`Test`类。</span><span class="sxs-lookup"><span data-stu-id="6240b-4097">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException"><span data-ttu-id="6240b-4098"><paramref name="rank" /> 无效。</span><span class="sxs-lookup"><span data-stu-id="6240b-4098"><paramref name="rank" /> is invalid.</span></span> <span data-ttu-id="6240b-4099">例如，0 或负数。</span><span class="sxs-lookup"><span data-stu-id="6240b-4099">For example, 0 or negative.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6240b-4100">基类不支持调用的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-4100">The invoked method is not supported in the base class.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="6240b-4101">当前的类型是 <see cref="T:System.TypedReference" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4101">The current type is <see cref="T:System.TypedReference" />.</span></span>  
  
<span data-ttu-id="6240b-4102">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-4102">-or-</span></span> 
<span data-ttu-id="6240b-4103">当前的类型是 <see langword="ByRef" /> 类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-4103">The current type is a <see langword="ByRef" /> type.</span></span> <span data-ttu-id="6240b-4104">也就是说，<see cref="P:System.Type.IsByRef" /> 返回 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4104">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span>  
  
<span data-ttu-id="6240b-4105">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-4105">-or-</span></span> 
 <span data-ttu-id="6240b-4106"><paramref name="rank" /> 大于 32。</span><span class="sxs-lookup"><span data-stu-id="6240b-4106"><paramref name="rank" /> is greater than 32.</span></span></exception>
        <altmember cref="M:System.Type.MakeByRefType" />
        <altmember cref="M:System.Type.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeByRefType">
      <MemberSignature Language="C#" Value="public virtual Type MakeByRefType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeByRefType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeByRefType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeByRefType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeByRefType();" />
      <MemberSignature Language="F#" Value="abstract member MakeByRefType : unit -&gt; Type&#xA;override this.MakeByRefType : unit -&gt; Type" Usage="type.MakeByRefType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-4107">返回表示作为 <see cref="T:System.Type" /> 参数（在 Visual Basic 中为 <see langword="ref" /> 参数）传递时的当前类型的 <see langword="ByRef" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-4107">Returns a <see cref="T:System.Type" /> object that represents the current type when passed as a <see langword="ref" /> parameter (<see langword="ByRef" /> parameter in Visual Basic).</span></span></summary>
        <returns><span data-ttu-id="6240b-4108">表示作为 <see cref="T:System.Type" /> 参数（在 Visual Basic 中为 <see langword="ref" /> 参数）传递时的当前类型的 <see langword="ByRef" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-4108">A <see cref="T:System.Type" /> object that represents the current type when passed as a <see langword="ref" /> parameter (<see langword="ByRef" /> parameter in Visual Basic).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-4109"><xref:System.Type.MakeByRefType%2A>方法提供了一种方法来生成`ref`类型 (`ByRef`在 Visual Basic 中) 参数列出了。</span><span class="sxs-lookup"><span data-stu-id="6240b-4109">The <xref:System.Type.MakeByRefType%2A> method provides a way to generate `ref` types (`ByRef` in Visual Basic) for parameter lists.</span></span>  
  
 <span data-ttu-id="6240b-4110">使用 Microsoft 中间语言 (MSIL) 的语法，如果当前<xref:System.Type>对象表示<xref:System.Int32>，此方法返回<xref:System.Type>对象，表示`Int32&`。</span><span class="sxs-lookup"><span data-stu-id="6240b-4110">Using the syntax of Microsoft intermediate language (MSIL), if the current <xref:System.Type> object represents <xref:System.Int32>, this method returns a <xref:System.Type> object representing `Int32&`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-4111">下面的代码示例创建数组， `ref` (`ByRef`在 Visual Basic 中)，以及元素的指针类型`Test`类。</span><span class="sxs-lookup"><span data-stu-id="6240b-4111">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6240b-4112">基类不支持调用的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-4112">The invoked method is not supported in the base class.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="6240b-4113">当前的类型是 <see cref="T:System.TypedReference" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4113">The current type is <see cref="T:System.TypedReference" />.</span></span>  
  
<span data-ttu-id="6240b-4114">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-4114">-or-</span></span> 
<span data-ttu-id="6240b-4115">当前的类型是 <see langword="ByRef" /> 类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-4115">The current type is a <see langword="ByRef" /> type.</span></span> <span data-ttu-id="6240b-4116">也就是说，<see cref="P:System.Type.IsByRef" /> 返回 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4116">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <altmember cref="M:System.Type.MakeArrayType" />
        <altmember cref="M:System.Type.MakePointerType" />
      </Docs>
    </Member>
    <Member MemberName="MakeGenericMethodParameter">
      <MemberSignature Language="C#" Value="public static Type MakeGenericMethodParameter (int position);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type MakeGenericMethodParameter(int32 position) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeGenericMethodParameter(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeGenericMethodParameter (position As Integer) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ MakeGenericMethodParameter(int position);" />
      <MemberSignature Language="F#" Value="static member MakeGenericMethodParameter : int -&gt; Type" Usage="System.Type.MakeGenericMethodParameter position" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeGenericType">
      <MemberSignature Language="C#" Value="public virtual Type MakeGenericType (params Type[] typeArguments);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakeGenericType(class System.Type[] typeArguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakeGenericType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakeGenericType (ParamArray typeArguments As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakeGenericType(... cli::array &lt;Type ^&gt; ^ typeArguments);" />
      <MemberSignature Language="F#" Value="abstract member MakeGenericType : Type[] -&gt; Type&#xA;override this.MakeGenericType : Type[] -&gt; Type" Usage="type.MakeGenericType typeArguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArguments" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArguments"><span data-ttu-id="6240b-4117">将代替当前泛型类型的类型参数的类型数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-4117">An array of types to be substituted for the type parameters of the current generic type.</span></span></param>
        <summary><span data-ttu-id="6240b-4118">替代由当前泛型类型定义的类型参数组成的类型数组的元素，并返回表示结果构造类型的 <see cref="T:System.Type" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-4118">Substitutes the elements of an array of types for the type parameters of the current generic type definition and returns a <see cref="T:System.Type" /> object representing the resulting constructed type.</span></span></summary>
        <returns><span data-ttu-id="6240b-4119"><see cref="T:System.Type" /> 表示的构造类型通过以下方式形成：用 <paramref name="typeArguments" /> 的元素取代当前泛型类型的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-4119">A <see cref="T:System.Type" /> representing the constructed type formed by substituting the elements of <paramref name="typeArguments" /> for the type parameters of the current generic type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-4120"><xref:System.Type.MakeGenericType%2A>方法，可编写代码，将特定类型分配给类型参数的泛型类型定义，从而创建<xref:System.Type>表示特定构造的类型的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-4120">The <xref:System.Type.MakeGenericType%2A> method allows you to write code that assigns specific types to the type parameters of a generic type definition, thus creating a <xref:System.Type> object that represents a particular constructed type.</span></span> <span data-ttu-id="6240b-4121">可以使用此<xref:System.Type>对象来创建构造类型的运行时实例。</span><span class="sxs-lookup"><span data-stu-id="6240b-4121">You can use this <xref:System.Type> object to create run-time instances of the constructed type.</span></span>  
  
 <span data-ttu-id="6240b-4122">使用类型构造<xref:System.Type.MakeGenericType%2A>可以是开放的也就是说，一些其类型参数可以是封闭式泛型方法或类型的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-4122">Types constructed with <xref:System.Type.MakeGenericType%2A> can be open, that is, some of their type arguments can be type parameters of enclosing generic methods or types.</span></span> <span data-ttu-id="6240b-4123">发出动态程序集时，可能使用此类开放式构造的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-4123">You might use such open constructed types when you emit dynamic assemblies.</span></span> <span data-ttu-id="6240b-4124">例如，考虑类`Base`和`Derived`在下面的代码。</span><span class="sxs-lookup"><span data-stu-id="6240b-4124">For example, consider the classes `Base` and `Derived` in the following code.</span></span>  
  
 [!code-cpp[System.Type.MakeGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.makegenerictype/cpp/remarks.cpp#1)]
 [!code-csharp[System.Type.MakeGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.makegenerictype/cs/remarks.cs#1)]
 [!code-vb[System.Type.MakeGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.makegenerictype/vb/remarks.vb#1)]  
  
 <span data-ttu-id="6240b-4125">若要生成`Derived`在动态程序集，就需要构造其基类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-4125">To generate `Derived` in a dynamic assembly, it is necessary to construct its base type.</span></span> <span data-ttu-id="6240b-4126">若要执行此操作，调用<xref:System.Type.MakeGenericType%2A>方法<xref:System.Type>对象，表示该类`Base`，使用泛型类型参数<xref:System.Int32>，并使用类型参数`V`从`Derived`。</span><span class="sxs-lookup"><span data-stu-id="6240b-4126">To do this, call the <xref:System.Type.MakeGenericType%2A> method on a <xref:System.Type> object representing the class `Base`, using the generic type arguments <xref:System.Int32> and the type parameter `V` from `Derived`.</span></span> <span data-ttu-id="6240b-4127">因为类型和泛型类型参数表示由<xref:System.Type>对象，其中包含一个数组可以传递给<xref:System.Type.MakeGenericType%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-4127">Because types and generic type parameters are both represented by <xref:System.Type> objects, an array containing both can be passed to the <xref:System.Type.MakeGenericType%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-4128">构造的类型，如`Base<int, V>`有用时，发出代码，但不能调用<xref:System.Type.MakeGenericType%2A>此类型上的方法因为它不是泛型类型定义。</span><span class="sxs-lookup"><span data-stu-id="6240b-4128">A constructed type such as `Base<int, V>` is useful when emitting code, but you cannot call the <xref:System.Type.MakeGenericType%2A> method on this type because it is not a generic type definition.</span></span> <span data-ttu-id="6240b-4129">若要创建封闭式构造的类型可进行实例化，请先调用<xref:System.Type.GetGenericTypeDefinition%2A>方法以获取<xref:System.Type>对象表示泛型类型定义，然后调用<xref:System.Type.MakeGenericType%2A>具有所需的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-4129">To create a closed constructed type that can be instantiated, first call the <xref:System.Type.GetGenericTypeDefinition%2A> method to get a <xref:System.Type> object representing the generic type definition and then call <xref:System.Type.MakeGenericType%2A> with the desired type arguments.</span></span>  
  
 <span data-ttu-id="6240b-4130"><xref:System.Type>返回的对象<xref:System.Type.MakeGenericType%2A>等同于<xref:System.Type>获取通过调用<xref:System.Object.GetType%2A>构造类型，所生成的方法或<xref:System.Object.GetType%2A>构造创建从同一个泛型类型的任何方法使用相同的类型参数的类型定义。</span><span class="sxs-lookup"><span data-stu-id="6240b-4130">The <xref:System.Type> object returned by <xref:System.Type.MakeGenericType%2A> is the same as the <xref:System.Type> obtained by calling the <xref:System.Object.GetType%2A> method of the resulting constructed type, or the <xref:System.Object.GetType%2A> method of any constructed type that was created from the same generic type definition using the same type arguments.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6240b-4131">泛型类型的数组本身不是泛型类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-4131">An array of generic types is not itself a generic type.</span></span> <span data-ttu-id="6240b-4132">不能调用<xref:System.Type.MakeGenericType%2A>阵列上键入，如`C<T>[]`(`Dim ac() As C(Of T)`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="6240b-4132">You cannot call <xref:System.Type.MakeGenericType%2A> on an array type such as `C<T>[]` (`Dim ac() As C(Of T)` in Visual Basic).</span></span> <span data-ttu-id="6240b-4133">若要构造从封闭式泛型类型`C<T>[]`，调用<xref:System.Type.GetElementType%2A>获取泛型类型定义`C<T>`; 调用<xref:System.Type.MakeGenericType%2A>泛型类型定义，以创建构造的类型; 最后调用<xref:System.Type.MakeArrayType%2A>方法要创建的数组类型的构造的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-4133">To construct a closed generic type from `C<T>[]`, call <xref:System.Type.GetElementType%2A> to obtain the generic type definition `C<T>`; call <xref:System.Type.MakeGenericType%2A> on the generic type definition to create the constructed type; and finally call the <xref:System.Type.MakeArrayType%2A> method on the constructed type to create the array type.</span></span> <span data-ttu-id="6240b-4134">也是如此的指针类型和`ref`类型 (`ByRef`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="6240b-4134">The same is true of pointer types and `ref` types (`ByRef` in Visual Basic).</span></span>  
  
 <span data-ttu-id="6240b-4135">有关泛型反射中使用的术语的固定条件列表，请参阅 <xref:System.Type.IsGenericType%2A> 属性注解。</span><span class="sxs-lookup"><span data-stu-id="6240b-4135">For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.</span></span>  
  
## <a name="nested-types"></a><span data-ttu-id="6240b-4136">嵌套类型</span><span class="sxs-lookup"><span data-stu-id="6240b-4136">Nested Types</span></span>  
 <span data-ttu-id="6240b-4137">如果使用 C#、 c + + 或 Visual Basic 定义泛型类型，则其嵌套的类型是所有通用。</span><span class="sxs-lookup"><span data-stu-id="6240b-4137">If a generic type is defined using C#, C++, or Visual Basic, then its nested types are all generic.</span></span> <span data-ttu-id="6240b-4138">即使嵌套的类型拥有自己的任何类型参数，因为所有这三种语言包含的嵌套类型的类型参数列表在封闭类型的类型参数，这是如此。</span><span class="sxs-lookup"><span data-stu-id="6240b-4138">This is true even if the nested types have no type parameters of their own, because all three languages include the type parameters of enclosing types in the type parameter lists of nested types.</span></span> <span data-ttu-id="6240b-4139">请考虑以下类：</span><span class="sxs-lookup"><span data-stu-id="6240b-4139">Consider the following classes:</span></span>  
  
 [!code-cpp[System.Type.MakeGenericType#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.makegenerictype/cpp/remarks.cpp#2)]
 [!code-csharp[System.Type.MakeGenericType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.makegenerictype/cs/remarks.cs#2)]
 [!code-vb[System.Type.MakeGenericType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.makegenerictype/vb/remarks.vb#2)]  
  
 <span data-ttu-id="6240b-4140">嵌套类的类型参数列表`Inner`具有两个类型参数，`T`和`U`，其中第一个为其封闭类的类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-4140">The type parameter list of the nested class `Inner` has two type parameters, `T` and `U`, the first of which is the type parameter of its enclosing class.</span></span> <span data-ttu-id="6240b-4141">同样，类型参数列表的嵌套类`Innermost1`有三个类型参数， `T`， `U`，和`V`，与`T`和`U`来自其封闭类。</span><span class="sxs-lookup"><span data-stu-id="6240b-4141">Similarly, the type parameter list of the nested class `Innermost1` has three type parameters, `T`, `U`, and `V`, with `T` and `U` coming from its enclosing classes.</span></span> <span data-ttu-id="6240b-4142">嵌套的类`Innermost2`具有两个类型参数，`T`和`U`，它们都来自其封闭类。</span><span class="sxs-lookup"><span data-stu-id="6240b-4142">The nested class `Innermost2` has two type parameters, `T` and `U`, which come from its enclosing classes.</span></span>  
  
 <span data-ttu-id="6240b-4143">如果封闭类型的参数列表有多个类型参数，在嵌套类型的类型参数列表中包含订单中的所有类型参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-4143">If the parameter list of the enclosing type has more than one type parameter, all the type parameters in order are included in the type parameter list of the nested type.</span></span>  
  
 <span data-ttu-id="6240b-4144">若要构造的嵌套类型的泛型类型定义中的泛型类型，请调用<xref:System.Type.MakeGenericType%2A>方法在阵列中的构成方法为串联类型参数数组的所有封闭类型、 最外面的泛型类型，以开头和结尾如果它具有自己的类型参数，请键入该嵌套类型本身的参数数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-4144">To construct a generic type from the generic type definition for a nested type, call the <xref:System.Type.MakeGenericType%2A> method with the array formed by concatenating the type argument arrays of all the enclosing types, beginning with the outermost generic type, and ending with the type argument array of the nested type itself, if it has type parameters of its own.</span></span> <span data-ttu-id="6240b-4145">若要创建的实例`Innermost1`，调用<xref:System.Type.MakeGenericType%2A>方法使用一个数组，包含三种类型，若要分配给 T、 U 和 V。若要创建的实例`Innermost2`，调用<xref:System.Type.MakeGenericType%2A>方法使用一个数组，包含两种类型，若要分配给 T 和 u。</span><span class="sxs-lookup"><span data-stu-id="6240b-4145">To create an instance of `Innermost1`, call the <xref:System.Type.MakeGenericType%2A> method with an array containing three types, to be assigned to T, U, and V. To create an instance of `Innermost2`, call the <xref:System.Type.MakeGenericType%2A> method with an array containing two types, to be assigned to T and U.</span></span>  
  
 <span data-ttu-id="6240b-4146">语言传播封闭类型以这种方式，因此可以使用封闭类型的类型参数来定义嵌套类型的字段的类型的参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-4146">The languages propagate the type parameters of enclosing types in this fashion so you can use the type parameters of an enclosing type to define fields of nested types.</span></span> <span data-ttu-id="6240b-4147">否则，类型参数不会在范围内的嵌套类型的正文中。</span><span class="sxs-lookup"><span data-stu-id="6240b-4147">Otherwise, the type parameters would not be in scope within the bodies of the nested types.</span></span> <span data-ttu-id="6240b-4148">可以定义嵌套的类型，而不传播的封闭类型，通过发出动态程序集中的代码或使用的类型参数[Ilasm.exe （IL 汇编程序）](~/docs/framework/tools/ilasm-exe-il-assembler.md)。</span><span class="sxs-lookup"><span data-stu-id="6240b-4148">It is possible to define nested types without propagating the type parameters of enclosing types, by emitting code in dynamic assemblies or by using the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).</span></span> <span data-ttu-id="6240b-4149">MSIL 汇编程序，请考虑以下代码：</span><span class="sxs-lookup"><span data-stu-id="6240b-4149">Consider the following code for the MSIL assembler:</span></span>  
  
```  
.class public Outer<T> {  
    .class nested public Inner<U> {  
        .class nested public Innermost {  
        }  
    }  
}  
```  
  
 <span data-ttu-id="6240b-4150">在此示例中，它不能定义类型的字段`T`或`U`类中`Innermost`，因为这些类型参数不在范围内。</span><span class="sxs-lookup"><span data-stu-id="6240b-4150">In this example, it is not possible to define a field of type `T` or `U` in class `Innermost`, because those type parameters are not in scope.</span></span> <span data-ttu-id="6240b-4151">下面的汇编程序代码定义的行为的方式会在 c + +、 Visual Basic 和 C# 中定义的嵌套的类：</span><span class="sxs-lookup"><span data-stu-id="6240b-4151">The following assembler code defines nested classes that behave the way they would if defined in C++, Visual Basic, and C#:</span></span>  
  
```  
.class public Outer<T> {  
    .class nested public Inner<T, U> {  
        .class nested public Innermost<T, U, V> {  
        }  
    }  
}  
```  
  
 <span data-ttu-id="6240b-4152">可以使用[Ildasm.exe （IL 反汇编程序）](~/docs/framework/tools/ildasm-exe-il-disassembler.md)检查高级语言中定义的嵌套的类，并遵循此命名方案。</span><span class="sxs-lookup"><span data-stu-id="6240b-4152">You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine nested classes defined in the high-level languages and observe this naming scheme.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-4153">下面的示例使用<xref:System.Type.MakeGenericType%2A>方法来创建构造的类型的泛型类型定义从<xref:System.Collections.Generic.Dictionary%602>类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-4153">The following example uses the <xref:System.Type.MakeGenericType%2A> method to create a constructed type from the generic type definition for the <xref:System.Collections.Generic.Dictionary%602> type.</span></span> <span data-ttu-id="6240b-4154">构造的类型表示<xref:System.Collections.Generic.Dictionary%602>的`Test`具有字符串键的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-4154">The constructed type represents a <xref:System.Collections.Generic.Dictionary%602> of `Test` objects with string keys.</span></span>  
  
 [!code-cpp[System.Type.BindGenericParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.BindGenericParameters/CPP/source.cpp#1)]
 [!code-csharp[System.Type.BindGenericParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.BindGenericParameters/CS/source.cs#1)]
 [!code-vb[System.Type.BindGenericParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.BindGenericParameters/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6240b-4155">当前的类型不表示泛型类型定义。</span><span class="sxs-lookup"><span data-stu-id="6240b-4155">The current type does not represent a generic type definition.</span></span> <span data-ttu-id="6240b-4156">也就是说，<see cref="P:System.Type.IsGenericTypeDefinition" /> 返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4156">That is, <see cref="P:System.Type.IsGenericTypeDefinition" /> returns <see langword="false" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-4157"><paramref name="typeArguments" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4157"><paramref name="typeArguments" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="6240b-4158">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-4158">-or-</span></span> 
<span data-ttu-id="6240b-4159"><paramref name="typeArguments" /> 的任意元素为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4159">Any element of <paramref name="typeArguments" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-4160"><paramref name="typeArguments" /> 中的元素数与当前泛型类型定义中的类型参数数不同。</span><span class="sxs-lookup"><span data-stu-id="6240b-4160">The number of elements in <paramref name="typeArguments" /> is not the same as the number of type parameters in the current generic type definition.</span></span>  
  
<span data-ttu-id="6240b-4161">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-4161">-or-</span></span> 
<span data-ttu-id="6240b-4162"><paramref name="typeArguments" /> 的所有元素都不满足为当前泛型类型的相应类型参数指定的约束。</span><span class="sxs-lookup"><span data-stu-id="6240b-4162">Any element of <paramref name="typeArguments" /> does not satisfy the constraints specified for the corresponding type parameter of the current generic type.</span></span>  
  
<span data-ttu-id="6240b-4163">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-4163">-or-</span></span> 
 <span data-ttu-id="6240b-4164"><paramref name="typeArguments" /> 包含一个元素，该元素是一个指针类型（<see cref="P:System.Type.IsPointer" /> 返回 <see langword="true" />）、by-ref 类型（<see cref="P:System.Type.IsByRef" /> 返回 <see langword="true" />）或 <see cref="T:System.Void" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4164"><paramref name="typeArguments" /> contains an element that is a pointer type (<see cref="P:System.Type.IsPointer" /> returns <see langword="true" />), a by-ref type (<see cref="P:System.Type.IsByRef" /> returns <see langword="true" />), or <see cref="T:System.Void" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6240b-4165">基类不支持调用的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-4165">The invoked method is not supported in the base class.</span></span> <span data-ttu-id="6240b-4166">派生类必须提供一个实现。</span><span class="sxs-lookup"><span data-stu-id="6240b-4166">Derived classes must provide an implementation.</span></span></exception>
        <altmember cref="P:System.Type.IsGenericTypeDefinition" />
        <altmember cref="M:System.Type.GetGenericTypeDefinition" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/reflection-and-generic-types.md"><span data-ttu-id="6240b-4167">反射类型和泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-4167">Reflection and Generic Types</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-examine-and-instantiate-generic-types-with-reflection.md"><span data-ttu-id="6240b-4168">如何：使用反射检查和实例化泛型类型</span><span class="sxs-lookup"><span data-stu-id="6240b-4168">How to: Examine and Instantiate Generic Types with Reflection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MakePointerType">
      <MemberSignature Language="C#" Value="public virtual Type MakePointerType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type MakePointerType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.MakePointerType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MakePointerType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ MakePointerType();" />
      <MemberSignature Language="F#" Value="abstract member MakePointerType : unit -&gt; Type&#xA;override this.MakePointerType : unit -&gt; Type" Usage="type.MakePointerType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-4169">返回表示指向当前类型的指针的 <see cref="T:System.Type" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-4169">Returns a <see cref="T:System.Type" /> object that represents a pointer to the current type.</span></span></summary>
        <returns><span data-ttu-id="6240b-4170">表示指向当前类型的指针的 <see cref="T:System.Type" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-4170">A <see cref="T:System.Type" /> object that represents a pointer to the current type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-4171"><xref:System.Type.MakePointerType%2A>方法提供了一种方法生成参数列表的指针类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-4171">The <xref:System.Type.MakePointerType%2A> method provides a way to generate pointer types for parameter lists.</span></span>  
  
 <span data-ttu-id="6240b-4172">使用 Microsoft 中间语言 (MSIL) 的语法，如果当前<xref:System.Type>对象表示<xref:System.Int32>，此方法返回<xref:System.Type>对象，表示`Int32*`。</span><span class="sxs-lookup"><span data-stu-id="6240b-4172">Using the syntax of Microsoft intermediate language (MSIL), if the current <xref:System.Type> object represents <xref:System.Int32>, this method returns a <xref:System.Type> object representing `Int32*`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-4173">下面的代码示例创建数组， `ref` (`ByRef`在 Visual Basic 中)，以及元素的指针类型`Test`类。</span><span class="sxs-lookup"><span data-stu-id="6240b-4173">The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.</span></span>  
  
 [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]
 [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]
 [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6240b-4174">基类不支持调用的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-4174">The invoked method is not supported in the base class.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="6240b-4175">当前的类型是 <see cref="T:System.TypedReference" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4175">The current type is <see cref="T:System.TypedReference" />.</span></span>  
  
<span data-ttu-id="6240b-4176">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-4176">-or-</span></span> 
<span data-ttu-id="6240b-4177">当前的类型是 <see langword="ByRef" /> 类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-4177">The current type is a <see langword="ByRef" /> type.</span></span> <span data-ttu-id="6240b-4178">也就是说，<see cref="P:System.Type.IsByRef" /> 返回 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4178">That is, <see cref="P:System.Type.IsByRef" /> returns <see langword="true" />.</span></span></exception>
        <altmember cref="M:System.Type.MakeByRefType" />
        <altmember cref="M:System.Type.MakeArrayType" />
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public override System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Type.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.MemberType : System.Reflection.MemberTypes" Usage="System.Type.MemberType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.MemberType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-4179">获取一个指示此成员是类型还是嵌套类型的 <see cref="T:System.Reflection.MemberTypes" /> 值。</span><span class="sxs-lookup"><span data-stu-id="6240b-4179">Gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</span></span></summary>
        <value><span data-ttu-id="6240b-4180">一个 <see cref="T:System.Reflection.MemberTypes" /> 值，指示此成员是类型还是嵌套类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-4180">A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-4181">此属性将替代<xref:System.Reflection.MemberInfo.MemberType%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-4181">This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="6240b-4182">因此，检查一系列<xref:System.Reflection.MemberInfo>对象，例如，返回的数组<xref:System.Type.GetMembers%2A>-<xref:System.Reflection.MemberInfo.MemberType%2A>属性返回<xref:System.Reflection.MemberTypes.NestedType?displayProperty=nameWithType>在给定的成员是嵌套的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-4182">Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects - for example, the array returned by <xref:System.Type.GetMembers%2A> - the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes.NestedType?displayProperty=nameWithType> when a given member is a nested type.</span></span>  
  
 <span data-ttu-id="6240b-4183">如果当前<xref:System.Type>表示构造泛型类型，此属性适用于从其构造类型的泛型类型定义。</span><span class="sxs-lookup"><span data-stu-id="6240b-4183">If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed.</span></span> <span data-ttu-id="6240b-4184">例如，如果当前<xref:System.Type>表示`MyGenericType<int>`(`MyGenericType(Of Integer)`在 Visual Basic 中)，此属性的值由`MyGenericType<T>`。</span><span class="sxs-lookup"><span data-stu-id="6240b-4184">For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.</span></span>  
  
 <span data-ttu-id="6240b-4185">如果当前<xref:System.Type>表示泛型类型或泛型方法定义中的类型参数，此属性始终返回<xref:System.Reflection.MemberTypes.TypeInfo?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="6240b-4185">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns <xref:System.Reflection.MemberTypes.TypeInfo?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-4186">下面的代码示例演示`MemberType`字段的参数作为`GetMember`方法：</span><span class="sxs-lookup"><span data-stu-id="6240b-4186">The following code example shows the `MemberType` field as a parameter to the `GetMember` method:</span></span>  
  
 [!code-cpp[Classic Type.MemberType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.MemberType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.MemberType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.MemberType Example/CS/source.cs#1)]
 [!code-vb[Classic Type.MemberType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.MemberType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberTypes" />
      </Docs>
    </Member>
    <Member MemberName="Missing">
      <MemberSignature Language="C#" Value="public static readonly object Missing;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object Missing" />
      <MemberSignature Language="DocId" Value="F:System.Type.Missing" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Missing As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ Missing;" />
      <MemberSignature Language="F#" Value=" staticval mutable Missing : obj" Usage="System.Type.Missing" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-4187">表示 <see cref="T:System.Type" /> 信息中的缺少值。</span><span class="sxs-lookup"><span data-stu-id="6240b-4187">Represents a missing value in the <see cref="T:System.Type" /> information.</span></span> <span data-ttu-id="6240b-4188">此字段为只读。</span><span class="sxs-lookup"><span data-stu-id="6240b-4188">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-4189">使用`Missing`字段通过反射来获取参数的默认值进行调用。</span><span class="sxs-lookup"><span data-stu-id="6240b-4189">Use the `Missing` field for invocation through reflection to obtain the default value of a parameter.</span></span> <span data-ttu-id="6240b-4190">如果`Missing`字段中输入参数值传递，并且没有为该参数，没有默认值<xref:System.ArgumentException>引发。</span><span class="sxs-lookup"><span data-stu-id="6240b-4190">If the `Missing` field is passed in for a parameter value and there is no default value for that parameter, an <xref:System.ArgumentException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-4191">下面的代码示例演示如何使用`Missing`字段来调用具有其默认参数的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-4191">The following code example shows the use of the `Missing` field to invoke a method with its default arguments.</span></span>  
  
 [!code-cpp[Classic Type.Missing Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.Missing Example/cpp/source.cpp#1)]
 [!code-csharp[Classic Type.Missing Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.Missing Example/cs/source.cs#1)]
 [!code-vb[Classic Type.Missing Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.Missing Example/VB/source.vb#1)]  
  
 <span data-ttu-id="6240b-4192">此代码生成以下输出：</span><span class="sxs-lookup"><span data-stu-id="6240b-4192">This code produces the following output:</span></span>  
  
 <span data-ttu-id="6240b-4193">= 10 b = 55.3 c = 12</span><span class="sxs-lookup"><span data-stu-id="6240b-4193">a = 10 b = 55.3 c = 12</span></span>  
  
 <span data-ttu-id="6240b-4194">= 10 b = 1.3 c = 1</span><span class="sxs-lookup"><span data-stu-id="6240b-4194">a = 10 b = 1.3 c = 1</span></span>  
  
 <span data-ttu-id="6240b-4195">= 10 b = 1.2 c = 1</span><span class="sxs-lookup"><span data-stu-id="6240b-4195">a = 10 b = 1.2 c = 1</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.Missing" />
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Type.Module" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Module : System.Reflection.Module" Usage="System.Type.Module" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Module</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-4196">获取在其中定义当前 <see cref="T:System.Type" /> 的模块 (DLL)。</span><span class="sxs-lookup"><span data-stu-id="6240b-4196">Gets the module (the DLL) in which the current <see cref="T:System.Type" /> is defined.</span></span></summary>
        <value><span data-ttu-id="6240b-4197">在其中定义当前 <see cref="T:System.Type" /> 的模块。</span><span class="sxs-lookup"><span data-stu-id="6240b-4197">The module in which the current <see cref="T:System.Type" /> is defined.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-4198">如果当前<xref:System.Type>表示构造泛型类型，此属性返回在其中定义的泛型类型定义的模块。</span><span class="sxs-lookup"><span data-stu-id="6240b-4198">If the current <xref:System.Type> represents a constructed generic type, this property returns the module in which the generic type definition was defined.</span></span> <span data-ttu-id="6240b-4199">例如，如果创建的实例`MyGenericStack<int>`，则<xref:System.Type.Module%2A>构造类型的属性返回的模块在其中`MyGenericStack<T>`定义。</span><span class="sxs-lookup"><span data-stu-id="6240b-4199">For example, if you create an instance of `MyGenericStack<int>`, the <xref:System.Type.Module%2A> property for the constructed type returns the module in which `MyGenericStack<T>` is defined.</span></span>  
  
 <span data-ttu-id="6240b-4200">同样，如果当前<xref:System.Type>表示泛型参数`T`，此属性返回包含定义泛型类型的程序集`T`。</span><span class="sxs-lookup"><span data-stu-id="6240b-4200">Similarly, if the current <xref:System.Type> represents a generic parameter `T`, this property returns the assembly that contains the generic type that defines `T`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-4201">下面的示例演示的一种用法<xref:System.Type.Namespace%2A>并`Module`属性和<xref:System.Type.ToString%2A>方法的<xref:System.Type>。</span><span class="sxs-lookup"><span data-stu-id="6240b-4201">This following example demonstrates a use of the <xref:System.Type.Namespace%2A> and `Module` properties and the <xref:System.Type.ToString%2A> method of <xref:System.Type>.</span></span>  
  
 [!code-cpp[Type_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_ToString/CPP/type_tostring.cpp#1)]
 [!code-csharp[Type_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_ToString/CS/type_tostring.cs#1)]
 [!code-vb[Type_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_ToString/VB/type_tostring.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.Module" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public abstract string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Type.Name" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Type.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-4202">在派生类中覆盖时，获取当前类型的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-4202">When overridden in a derived class, gets the name of the current type.</span></span></summary>
        <value><span data-ttu-id="6240b-4203">当前类型的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-4203">The name of the current type.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public abstract string Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Type.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Namespace { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string" Usage="System.Type.Namespace" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.Namespace</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-4204">获取 <see cref="T:System.Type" /> 的命名空间。</span><span class="sxs-lookup"><span data-stu-id="6240b-4204">Gets the namespace of the <see cref="T:System.Type" />.</span></span></summary>
        <value><span data-ttu-id="6240b-4205"><see cref="T:System.Type" /> 的命名空间；如果当前实例没有命名空间或表示泛型参数，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4205">The namespace of the <see cref="T:System.Type" />; <see langword="null" /> if the current instance has no namespace or represents a generic parameter.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-4206">命名空间是逻辑设计时命名方便起见，主要用于应用程序中定义作用域和组织类和单个层次结构中的其他类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-4206">A namespace is a logical design-time naming convenience, used mainly to define scope in an application and organize classes and other types in a single hierarchical structure.</span></span> <span data-ttu-id="6240b-4207">从运行时的角度来看，没有命名空间。</span><span class="sxs-lookup"><span data-stu-id="6240b-4207">From the viewpoint of the runtime, there are no namespaces.</span></span>  
  
 <span data-ttu-id="6240b-4208">如果当前<xref:System.Type>表示构造的泛型类型，则此属性返回包含泛型类型定义的命名空间。</span><span class="sxs-lookup"><span data-stu-id="6240b-4208">If the current <xref:System.Type> represents a constructed generic type, this property returns the namespace that contains the generic type definition.</span></span> <span data-ttu-id="6240b-4209">同样，如果当前<xref:System.Type>表示泛型参数`T`，此属性返回包含定义泛型类型定义的命名空间`T`。</span><span class="sxs-lookup"><span data-stu-id="6240b-4209">Similarly, if the current <xref:System.Type> represents a generic parameter `T`, this property returns the namespace that contains the generic type definition that defines `T`.</span></span>  
  
 <span data-ttu-id="6240b-4210">如果当前<xref:System.Type>对象表示泛型参数，则此属性返回`null`。</span><span class="sxs-lookup"><span data-stu-id="6240b-4210">If the current <xref:System.Type> object represents a generic parameter, this property returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-4211">下面的示例演示的一种用法`Namespace`并<xref:System.Type.Module%2A>属性和<xref:System.Type.ToString%2A>方法的<xref:System.Type>。</span><span class="sxs-lookup"><span data-stu-id="6240b-4211">This following example demonstrates a use of the `Namespace` and <xref:System.Type.Module%2A> properties and the <xref:System.Type.ToString%2A> method of <xref:System.Type>.</span></span>  
  
 [!code-cpp[Type_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_ToString/CPP/type_tostring.cpp#1)]
 [!code-csharp[Type_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_ToString/CS/type_tostring.cs#1)]
 [!code-vb[Type_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_ToString/VB/type_tostring.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="P:System.Type.FullName" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md"><span data-ttu-id="6240b-4212">指定完全限定的类型名称</span><span class="sxs-lookup"><span data-stu-id="6240b-4212">Specifying Fully Qualified Type Names</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (Type left, Type right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Type left, class System.Type right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.op_Equality(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Type, right As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(Type ^ left, Type ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : Type * Type -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Type" />
        <Parameter Name="right" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="6240b-4213">要比较的第一个对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-4213">The first object to compare.</span></span></param>
        <param name="right"><span data-ttu-id="6240b-4214">要比较的第二个对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-4214">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="6240b-4215">指示两个 <see cref="T:System.Type" /> 对象是否相等。</span><span class="sxs-lookup"><span data-stu-id="6240b-4215">Indicates whether two <see cref="T:System.Type" /> objects are equal.</span></span></summary>
        <returns><span data-ttu-id="6240b-4216">如果 <see langword="true" /> 等于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4216"><see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (Type left, Type right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Type left, class System.Type right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.op_Inequality(System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Type, right As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(Type ^ left, Type ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : Type * Type -&gt; bool" Usage="System.Type.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-2.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Type" />
        <Parameter Name="right" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="6240b-4217">要比较的第一个对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-4217">The first object to compare.</span></span></param>
        <param name="right"><span data-ttu-id="6240b-4218">要比较的第二个对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-4218">The second object to compare.</span></span></param>
        <summary><span data-ttu-id="6240b-4219">指示两个 <see cref="T:System.Type" /> 对象是否不相等。</span><span class="sxs-lookup"><span data-stu-id="6240b-4219">Indicates whether two <see cref="T:System.Type" /> objects are not equal.</span></span></summary>
        <returns><span data-ttu-id="6240b-4220">如果 <see langword="true" /> 不等于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4220"><see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public override Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Type.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReflectedType : Type" Usage="System.Type.ReflectedType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.ReflectedType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-4221">获取用于获取该成员的类对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-4221">Gets the class object that was used to obtain this member.</span></span></summary>
        <value><span data-ttu-id="6240b-4222"><see langword="Type" /> 对象，通过它获取了此 <see cref="T:System.Type" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-4222">The <see langword="Type" /> object through which this <see cref="T:System.Type" /> object was obtained.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-4223">有关<xref:System.Type>对象，此属性的值始终是相同的值<xref:System.Type.DeclaringType%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-4223">For <xref:System.Type> objects, the value of this property is always the same as the value of the <xref:System.Type.DeclaringType%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-4224">此示例显示嵌套类的反射的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-4224">This example displays the reflected type of a nested class.</span></span>  
  
 [!code-cpp[Classic Type.ReflectedType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.ReflectedType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Type.ReflectedType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.ReflectedType Example/CS/source.cs#1)]
 [!code-vb[Classic Type.ReflectedType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.ReflectedType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="P:System.Type.DeclaringType" />
      </Docs>
    </Member>
    <Member MemberName="ReflectionOnlyGetType">
      <MemberSignature Language="C#" Value="public static Type ReflectionOnlyGetType (string typeName, bool throwIfNotFound, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type ReflectionOnlyGetType(string typeName, bool throwIfNotFound, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReflectionOnlyGetType (typeName As String, throwIfNotFound As Boolean, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ ReflectionOnlyGetType(System::String ^ typeName, bool throwIfNotFound, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="static member ReflectionOnlyGetType : string * bool * bool -&gt; Type" Usage="System.Type.ReflectionOnlyGetType (typeName, throwIfNotFound, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="throwIfNotFound" Type="System.Boolean" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="6240b-4225">要获取的 <see cref="T:System.Type" /> 的程序集限定名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-4225">The assembly-qualified name of the <see cref="T:System.Type" /> to get.</span></span></param>
        <param name="throwIfNotFound"><span data-ttu-id="6240b-4226">如果为 <see langword="true" />，则会在找不到该类型时引发 <see cref="T:System.TypeLoadException" />；如果为 <see langword="false" />，则在找不到该类型时返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4226"><see langword="true" /> to throw a <see cref="T:System.TypeLoadException" /> if the type cannot be found; <see langword="false" /> to return <see langword="null" /> if the type cannot be found.</span></span> <span data-ttu-id="6240b-4227">指定 <see langword="false" /> 还会取消某些其他异常条件，但并不取消所有条件。</span><span class="sxs-lookup"><span data-stu-id="6240b-4227">Specifying <see langword="false" /> also suppresses some other exception conditions, but not all of them.</span></span> <span data-ttu-id="6240b-4228">请参见“异常”部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-4228">See the Exceptions section.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="6240b-4229">如果为 <see langword="true" />，则执行不区分大小写的 <paramref name="typeName" /> 搜索；如果为 <see langword="false" />，则执行区分大小写的 <paramref name="typeName" /> 搜索。</span><span class="sxs-lookup"><span data-stu-id="6240b-4229"><see langword="true" /> to perform a case-insensitive search for <paramref name="typeName" />; <see langword="false" /> to perform a case-sensitive search for <paramref name="typeName" />.</span></span></param>
        <summary><span data-ttu-id="6240b-4230">获取具有指定名称的 <see cref="T:System.Type" />，指定是否执行区分大小写的搜索，以及在找不到类型时是否引发异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-4230">Gets the <see cref="T:System.Type" /> with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found.</span></span> <span data-ttu-id="6240b-4231">该类型只为反射加载，而不为执行加载。</span><span class="sxs-lookup"><span data-stu-id="6240b-4231">The type is loaded for reflection only, not for execution.</span></span></summary>
        <returns><span data-ttu-id="6240b-4232">具有指定名称的类型（如果找到的话）；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4232">The type with the specified name, if found; otherwise, <see langword="null" />.</span></span> <span data-ttu-id="6240b-4233">如果找不到该类型，则 <paramref name="throwIfNotFound" /> 参数指定是返回 <see langword="null" /> 还是引发异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-4233">If the type is not found, the <paramref name="throwIfNotFound" /> parameter specifies whether <see langword="null" /> is returned or an exception is thrown.</span></span> <span data-ttu-id="6240b-4234">在某些情况下，将引发异常，而不考虑 <paramref name="throwIfNotFound" /> 的值。</span><span class="sxs-lookup"><span data-stu-id="6240b-4234">In some cases, an exception is thrown regardless of the value of <paramref name="throwIfNotFound" />.</span></span> <span data-ttu-id="6240b-4235">请参见“异常”部分。</span><span class="sxs-lookup"><span data-stu-id="6240b-4235">See the Exceptions section.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-4236">如果包含类型的程序集尚未加载到仅反射上下文中，使用<xref:System.Type.ReflectionOnlyGetType%2A>方法是等效于第一个加载仅为反射程序集使用<xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A>方法，然后通过调用加载该类型程序集的<xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-4236">If the assembly containing the type is not already loaded into the reflection-only context, using the <xref:System.Type.ReflectionOnlyGetType%2A> method is equivalent to first loading the assembly for reflection only, using the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> method, and then loading the type by calling the assembly's <xref:System.Reflection.Assembly.GetType%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="6240b-4237">有关程序集限定名称的信息，请参阅<xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-4237">For information about assembly-qualified names, see the <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="6240b-4238">指定的类型名称的其他详细信息，请参阅<xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="6240b-4238">For additional details on specifying type names, see the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload.</span></span>  
  
 <span data-ttu-id="6240b-4239">如果已为执行加载的程序集，而另一个副本加载到只反射上下文中。</span><span class="sxs-lookup"><span data-stu-id="6240b-4239">If the assembly is already loaded for execution, another copy is loaded into the reflection-only context.</span></span>  
  
 <span data-ttu-id="6240b-4240">`throwIfNotFound`参数指定并发生什么类型未找到，也抑制了某些其他异常条件，如异常部分中所述。</span><span class="sxs-lookup"><span data-stu-id="6240b-4240">The `throwIfNotFound` parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section.</span></span> <span data-ttu-id="6240b-4241">而不考虑值引发一些异常`throwIfNotFound`。</span><span class="sxs-lookup"><span data-stu-id="6240b-4241">Some exceptions are thrown regardless of the value of `throwIfNotFound`.</span></span> <span data-ttu-id="6240b-4242">例如，如果该程序集不是有效的<xref:System.BadImageFormatException>引发即使`throwIfNotFound`是`false`。</span><span class="sxs-lookup"><span data-stu-id="6240b-4242">For example, if the assembly is not valid, a <xref:System.BadImageFormatException> is thrown even if `throwIfNotFound` is `false`.</span></span>  
  
 <span data-ttu-id="6240b-4243">有关使用仅限反射上下文的详细信息，请参阅[如何：将程序集加载到仅反射上下文中](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)。</span><span class="sxs-lookup"><span data-stu-id="6240b-4243">For more information about using the reflection-only context, see [How to: Load Assemblies into the Reflection-Only Context](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="6240b-4244"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4244"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Reflection.TargetInvocationException"><span data-ttu-id="6240b-4245">调用了类初始值设定项，且该项引发了异常。</span><span class="sxs-lookup"><span data-stu-id="6240b-4245">A class initializer is invoked and throws an exception.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="6240b-4246"><paramref name="throwIfNotFound" /> 是 <see langword="true" />，且找不到该类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-4246"><paramref name="throwIfNotFound" /> is <see langword="true" /> and the type is not found.</span></span>  
  
<span data-ttu-id="6240b-4247">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-4247">-or-</span></span> 
 <span data-ttu-id="6240b-4248"><paramref name="throwIfNotFound" /> 的值为 <see langword="true" />，且 <paramref name="typeName" /> 包含无效字符，例如嵌入的制表符。</span><span class="sxs-lookup"><span data-stu-id="6240b-4248"><paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid characters, such as an embedded tab.</span></span> 
<span data-ttu-id="6240b-4249">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-4249">-or-</span></span> 
 <span data-ttu-id="6240b-4250"><paramref name="throwIfNotFound" /> 的值为 <see langword="true" />，且 <paramref name="typeName" /> 为空字符串。</span><span class="sxs-lookup"><span data-stu-id="6240b-4250"><paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> is an empty string.</span></span>  
  
<span data-ttu-id="6240b-4251">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-4251">-or-</span></span> 
 <span data-ttu-id="6240b-4252"><paramref name="throwIfNotFound" /> 的值为 <see langword="true" />，且 <paramref name="typeName" /> 表示大小无效的数组类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-4252"><paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> represents an array type with an invalid size.</span></span>  
  
<span data-ttu-id="6240b-4253">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-4253">-or-</span></span> 
 <span data-ttu-id="6240b-4254"><paramref name="typeName" /> 表示 <see cref="T:System.TypedReference" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-4254"><paramref name="typeName" /> represents an array of <see cref="T:System.TypedReference" /> objects.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6240b-4255"><paramref name="typeName" /> 不包括程序集名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-4255"><paramref name="typeName" /> does not include the assembly name.</span></span>  
  
<span data-ttu-id="6240b-4256">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-4256">-or-</span></span> 
 <span data-ttu-id="6240b-4257"><paramref name="throwIfNotFound" /> 为 <see langword="true" />，且 <paramref name="typeName" /> 包含无效的语法（例如 "MyType[,\*,]"）。</span><span class="sxs-lookup"><span data-stu-id="6240b-4257"><paramref name="throwIfNotFound" /> is <see langword="true" /> and <paramref name="typeName" /> contains invalid syntax; for example, "MyType[,\*,]".</span></span>  
  
<span data-ttu-id="6240b-4258">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-4258">-or-</span></span> 
 <span data-ttu-id="6240b-4259"><paramref name="typeName" /> 表示将指针类型、<see langword="ByRef" /> 类型或 <see cref="T:System.Void" /> 作为其类型参数之一的泛型类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-4259"><paramref name="typeName" /> represents a generic type that has a pointer type, a <see langword="ByRef" /> type, or <see cref="T:System.Void" /> as one of its type arguments.</span></span>  
  
<span data-ttu-id="6240b-4260">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-4260">-or-</span></span> 
 <span data-ttu-id="6240b-4261"><paramref name="typeName" /> 表示具有错误的类型参数数目的泛型类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-4261"><paramref name="typeName" /> represents a generic type that has an incorrect number of type arguments.</span></span>  
  
<span data-ttu-id="6240b-4262">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-4262">-or-</span></span> 
 <span data-ttu-id="6240b-4263"><paramref name="typeName" /> 表示泛型类型，并且其类型参数之一不满足相应类型参数的约束。</span><span class="sxs-lookup"><span data-stu-id="6240b-4263"><paramref name="typeName" /> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="6240b-4264"><paramref name="throwIfNotFound" /> 的值为 <see langword="true" />，且未找到程序集或程序集的某个依赖项。</span><span class="sxs-lookup"><span data-stu-id="6240b-4264"><paramref name="throwIfNotFound" /> is <see langword="true" /> and the assembly or one of its dependencies was not found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="6240b-4265">找到了程序集或其依赖项之一，但无法加载它们。</span><span class="sxs-lookup"><span data-stu-id="6240b-4265">The assembly or one of its dependencies was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="6240b-4266">程序集或其依赖项之一无效。</span><span class="sxs-lookup"><span data-stu-id="6240b-4266">The assembly or one of its dependencies is not valid.</span></span>  
  
<span data-ttu-id="6240b-4267">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6240b-4267">-or-</span></span> 
<span data-ttu-id="6240b-4268">此程序集使用高于当前所加载版本的公共语言运行时版本编译而成。</span><span class="sxs-lookup"><span data-stu-id="6240b-4268">The assembly was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.TypeLoadException" />
        <altmember cref="P:System.Type.AssemblyQualifiedName" />
        <altmember cref="M:System.Reflection.Assembly.GetAssembly(System.Type)" />
        <altmember cref="M:System.Reflection.Assembly.GetType(System.String)" />
        <altmember cref="T:System.Reflection.AssemblyName" />
        <related type="Article" href="~/docs/framework/reflection-and-codedom/specifying-fully-qualified-type-names.md"><span data-ttu-id="6240b-4269">指定完全限定的类型名称</span><span class="sxs-lookup"><span data-stu-id="6240b-4269">Specifying Fully Qualified Type Names</span></span></related>
        <related type="Article" href="~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md"><span data-ttu-id="6240b-4270">如何：将程序集加载到仅反射上下文中</span><span class="sxs-lookup"><span data-stu-id="6240b-4270">How to: Load Assemblies into the Reflection-Only Context</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="StructLayoutAttribute">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.InteropServices.StructLayoutAttribute StructLayoutAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.InteropServices.StructLayoutAttribute StructLayoutAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Type.StructLayoutAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property StructLayoutAttribute As StructLayoutAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Runtime::InteropServices::StructLayoutAttribute ^ StructLayoutAttribute { System::Runtime::InteropServices::StructLayoutAttribute ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StructLayoutAttribute : System.Runtime.InteropServices.StructLayoutAttribute" Usage="System.Type.StructLayoutAttribute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.StructLayoutAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-4271">获取一个描述当前类型的布局的 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4271">Gets a <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> that describes the layout of the current type.</span></span></summary>
        <value><span data-ttu-id="6240b-4272">获取一个描述当前类型的大致布局特性的 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4272">Gets a <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> that describes the gross layout features of the current type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-4273"><xref:System.Runtime.InteropServices.StructLayoutAttribute> 不返回<xref:System.Reflection.MemberInfo.GetCustomAttributes%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-4273"><xref:System.Runtime.InteropServices.StructLayoutAttribute> is not returned by the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method.</span></span> <span data-ttu-id="6240b-4274">相反，使用此属性以获取它。</span><span class="sxs-lookup"><span data-stu-id="6240b-4274">Instead, use this property to get it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-4275">下面的代码示例首先定义一个类、 结构和具有特殊的布局属性 （结构嵌套的类中） 的结构。</span><span class="sxs-lookup"><span data-stu-id="6240b-4275">The following code example first defines a class, a structure, and a structure with special layout attributes (the structures are nested within the class).</span></span> <span data-ttu-id="6240b-4276">该示例然后使用<xref:System.Type.StructLayoutAttribute%2A>属性来获取<xref:System.Runtime.InteropServices.StructLayoutAttribute>为每个类型，并显示特性的属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-4276">The example then uses the <xref:System.Type.StructLayoutAttribute%2A> property to obtain a <xref:System.Runtime.InteropServices.StructLayoutAttribute> for each type, and displays the properties of the attributes.</span></span>  
  
 [!code-cpp[Type.StructLayoutAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type.StructLayoutAttribute/CPP/Type.StructLayoutAttribute.cpp#1)]
 [!code-csharp[Type.StructLayoutAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type.StructLayoutAttribute/CS/source.cs#1)]
 [!code-vb[Type.StructLayoutAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type.StructLayoutAttribute/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6240b-4277">基类不支持调用的方法。</span><span class="sxs-lookup"><span data-stu-id="6240b-4277">The invoked method is not supported in the base class.</span></span></exception>
        <altmember cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _Type.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _Type.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_Type::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="6240b-4278">留待将来使用。</span><span class="sxs-lookup"><span data-stu-id="6240b-4278">Reserved for future use.</span></span> <span data-ttu-id="6240b-4279">必须为 IID_NULL。</span><span class="sxs-lookup"><span data-stu-id="6240b-4279">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="6240b-4280">要映射的名称的传入数组。</span><span class="sxs-lookup"><span data-stu-id="6240b-4280">Passed-in array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="6240b-4281">要映射的名称的计数。</span><span class="sxs-lookup"><span data-stu-id="6240b-4281">Count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="6240b-4282">要在其中解释名称的区域设置上下文。</span><span class="sxs-lookup"><span data-stu-id="6240b-4282">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="6240b-4283">调用方分配的数组，用于接收与名称对应的 ID。</span><span class="sxs-lookup"><span data-stu-id="6240b-4283">Caller-allocated array which receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="6240b-4284">将一组名称映射为对应的一组调度标识符。</span><span class="sxs-lookup"><span data-stu-id="6240b-4284">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-4285">此方法用于访问托管类到从非托管代码，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="6240b-4285">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="6240b-4286">有关详细信息`IDispatch::GetIDsOfNames`，请参阅 MSDN 库。</span><span class="sxs-lookup"><span data-stu-id="6240b-4286">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="6240b-4287">不支持使用 COM <c>IDispatch</c> 接口的后期绑定访问。</span><span class="sxs-lookup"><span data-stu-id="6240b-4287">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _Type.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _Type.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_Type::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="6240b-4288">要返回的类型信息。</span><span class="sxs-lookup"><span data-stu-id="6240b-4288">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="6240b-4289">类型信息的区域设置标识符。</span><span class="sxs-lookup"><span data-stu-id="6240b-4289">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="6240b-4290">指向请求的类型信息对象的指针。</span><span class="sxs-lookup"><span data-stu-id="6240b-4290">A pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="6240b-4291">检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</span><span class="sxs-lookup"><span data-stu-id="6240b-4291">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-4292">此方法用于访问托管类到从非托管代码，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="6240b-4292">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="6240b-4293">有关详细信息`IDispatch::GetTypeInfo`，请参阅 MSDN 库。</span><span class="sxs-lookup"><span data-stu-id="6240b-4293">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="6240b-4294">不支持使用 COM <c>IDispatch</c> 接口的后期绑定访问。</span><span class="sxs-lookup"><span data-stu-id="6240b-4294">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _Type.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _Type.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_Type::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="6240b-4295">指向一个位置，该位置接收对象提供的类型信息接口的数量。</span><span class="sxs-lookup"><span data-stu-id="6240b-4295">Points to a location that receives the number of type information interfaces provided by the object.</span></span></param>
        <summary><span data-ttu-id="6240b-4296">检索对象提供的类型信息接口的数量（0 或 1）。</span><span class="sxs-lookup"><span data-stu-id="6240b-4296">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-4297">此方法用于访问托管类到从非托管代码，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="6240b-4297">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="6240b-4298">有关详细信息`IDispatch::GetTypeInfoCount`，请参阅 MSDN 库。</span><span class="sxs-lookup"><span data-stu-id="6240b-4298">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="6240b-4299">不支持使用 COM <c>IDispatch</c> 接口的后期绑定访问。</span><span class="sxs-lookup"><span data-stu-id="6240b-4299">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Type.Invoke">
      <MemberSignature Language="C#" Value="void _Type.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Type.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.System#Runtime#InteropServices#_Type#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _Type.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._Type.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_Type::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="6240b-4300">标识成员。</span><span class="sxs-lookup"><span data-stu-id="6240b-4300">Identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="6240b-4301">留待将来使用。</span><span class="sxs-lookup"><span data-stu-id="6240b-4301">Reserved for future use.</span></span> <span data-ttu-id="6240b-4302">必须为 IID_NULL。</span><span class="sxs-lookup"><span data-stu-id="6240b-4302">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="6240b-4303">要在其中解释参数的区域设置上下文。</span><span class="sxs-lookup"><span data-stu-id="6240b-4303">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="6240b-4304">描述调用的上下文的标志。</span><span class="sxs-lookup"><span data-stu-id="6240b-4304">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="6240b-4305">指向一个结构的指针，该结构包含一个自变量数组、一个命名自变量的 DISPID 自变量数组和数组中元素数的计数。</span><span class="sxs-lookup"><span data-stu-id="6240b-4305">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="6240b-4306">指向要存储结果的位置的指针。</span><span class="sxs-lookup"><span data-stu-id="6240b-4306">Pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="6240b-4307">指向一个包含异常信息的结构的指针。</span><span class="sxs-lookup"><span data-stu-id="6240b-4307">Pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="6240b-4308">第一个出错自变量的索引。</span><span class="sxs-lookup"><span data-stu-id="6240b-4308">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="6240b-4309">提供对某一对象公开的属性和方法的访问。</span><span class="sxs-lookup"><span data-stu-id="6240b-4309">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-4310">此方法用于访问托管类到从非托管代码，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="6240b-4310">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="6240b-4311">有关详细信息`IDispatch::Invoke`，请参阅 MSDN 库。</span><span class="sxs-lookup"><span data-stu-id="6240b-4311">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="6240b-4312">不支持使用 COM <c>IDispatch</c> 接口的后期绑定访问。</span><span class="sxs-lookup"><span data-stu-id="6240b-4312">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Type.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="type.ToString " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._Type.ToString</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6240b-4313">返回表示当前 <see langword="String" /> 的名称的 <see langword="Type" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4313">Returns a <see langword="String" /> representing the name of the current <see langword="Type" />.</span></span></summary>
        <returns><span data-ttu-id="6240b-4314">表示当前 <see cref="T:System.String" /> 的名称的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="6240b-4314">A <see cref="T:System.String" /> representing the name of the current <see cref="T:System.Type" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-4315">此方法返回的完全限定的公共语言运行时命名空间和所有基元类型的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-4315">This method returns the fully qualified common language runtime namespace and name for all primitive types.</span></span> <span data-ttu-id="6240b-4316">例如，C# 指令`(long)0.Type().ToString()`返回"System.Int64"而不是只是"Int64"。</span><span class="sxs-lookup"><span data-stu-id="6240b-4316">For example, the C# instruction, `(long)0.Type().ToString()` returns "System.Int64" instead of merely "Int64".</span></span>  
  
 <span data-ttu-id="6240b-4317">如果当前<xref:System.Type>表示泛型类型、 类型和其类型参数都限定命名空间和嵌套类型，而不是由程序集。</span><span class="sxs-lookup"><span data-stu-id="6240b-4317">If the current <xref:System.Type> represents a generic type, the type and its type arguments are qualified by namespace and by nested type, but not by assembly.</span></span> <span data-ttu-id="6240b-4318">如果当前<xref:System.Type>表示泛型类型或泛型方法，则此方法的定义中的类型参数返回的类型参数的非限定的名称。</span><span class="sxs-lookup"><span data-stu-id="6240b-4318">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method returns the unqualified name of the type parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-4319">下面的示例演示的一种用法<xref:System.Type.Namespace%2A>并<xref:System.Type.Module%2A>属性和`ToString`方法的<xref:System.Type>。</span><span class="sxs-lookup"><span data-stu-id="6240b-4319">This following example demonstrates a use of the <xref:System.Type.Namespace%2A> and <xref:System.Type.Module%2A> properties and the `ToString` method of <xref:System.Type>.</span></span>  
  
 [!code-cpp[Type_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_ToString/CPP/type_tostring.cpp#1)]
 [!code-csharp[Type_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_ToString/CS/type_tostring.cs#1)]
 [!code-vb[Type_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_ToString/VB/type_tostring.vb#1)]  
  
 <span data-ttu-id="6240b-4320">下面的示例将返回的字符串进行比较<xref:System.Type.ToString%2A>方法和`Name`， <xref:System.Type.FullName%2A>，和<xref:System.Type.AssemblyQualifiedName%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-4320">The following example compares the strings returned by the <xref:System.Type.ToString%2A> method and the `Name`, <xref:System.Type.FullName%2A>, and <xref:System.Type.AssemblyQualifiedName%2A> properties.</span></span>  
  
 [!code-csharp[System.Type.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.tostring/cs/fullname1.cs#1)]
 [!code-vb[System.Type.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.tostring/vb/fullname1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="TypeHandle">
      <MemberSignature Language="C#" Value="public virtual RuntimeTypeHandle TypeHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeTypeHandle TypeHandle" />
      <MemberSignature Language="DocId" Value="P:System.Type.TypeHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TypeHandle As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property RuntimeTypeHandle TypeHandle { RuntimeTypeHandle get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeHandle : RuntimeTypeHandle" Usage="System.Type.TypeHandle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.TypeHandle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-4321">获取当前 <see cref="T:System.Type" /> 的句柄。</span><span class="sxs-lookup"><span data-stu-id="6240b-4321">Gets the handle for the current <see cref="T:System.Type" />.</span></span></summary>
        <value><span data-ttu-id="6240b-4322">当前 <see cref="T:System.Type" /> 的句柄。</span><span class="sxs-lookup"><span data-stu-id="6240b-4322">The handle for the current <see cref="T:System.Type" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-4323">`TypeHandle` 封装指向表示的类型的内部数据结构的指针。</span><span class="sxs-lookup"><span data-stu-id="6240b-4323">`TypeHandle` encapsulates a pointer to an internal data structure that represents the type.</span></span> <span data-ttu-id="6240b-4324">此句柄在进程生存期内是唯一的。</span><span class="sxs-lookup"><span data-stu-id="6240b-4324">This handle is unique during the process lifetime.</span></span> <span data-ttu-id="6240b-4325">仅在已获取的应用程序域中是有效句柄。</span><span class="sxs-lookup"><span data-stu-id="6240b-4325">The handle is valid only in the application domain in which it was obtained.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6240b-4326">以下示例返回相应的类型的句柄，并将该句柄传递给一个方法，获取从句柄的类型并将其显示。</span><span class="sxs-lookup"><span data-stu-id="6240b-4326">The following example returns the handle of the corresponding type and passes the handle to a method that gets the type from the handle and displays it.</span></span>  
  
 [!code-cpp[Type_TypeHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_TypeHandle/CPP/type_typehandle.cpp#1)]
 [!code-csharp[Type_TypeHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_TypeHandle/CS/type_typehandle.cs#1)]
 [!code-vb[Type_TypeHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_TypeHandle/VB/type_typehandle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="6240b-4327">.NET Compact Framework 当前不支持此属性。</span><span class="sxs-lookup"><span data-stu-id="6240b-4327">The .NET Compact Framework does not currently support this property.</span></span></exception>
        <altmember cref="T:System.RuntimeTypeHandle" />
        <altmember cref="M:System.Type.GetTypeHandle(System.Object)" />
        <altmember cref="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)" />
      </Docs>
    </Member>
    <Member MemberName="TypeInitializer">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo TypeInitializer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ConstructorInfo TypeInitializer" />
      <MemberSignature Language="DocId" Value="P:System.Type.TypeInitializer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeInitializer As ConstructorInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::ConstructorInfo ^ TypeInitializer { System::Reflection::ConstructorInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeInitializer : System.Reflection.ConstructorInfo" Usage="System.Type.TypeInitializer" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.TypeInitializer</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-4328">获取该类型的初始值设定项。</span><span class="sxs-lookup"><span data-stu-id="6240b-4328">Gets the initializer for the type.</span></span></summary>
        <value><span data-ttu-id="6240b-4329">包含 <see cref="T:System.Type" /> 的类构造函数的名称的对象。</span><span class="sxs-lookup"><span data-stu-id="6240b-4329">An object that contains the name of the class constructor for the <see cref="T:System.Type" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6240b-4330">类初始值设定项，还提供通过<xref:System.Type.FindMembers%2A>方法，或通过重载<xref:System.Type.GetMember%2A>， <xref:System.Type.GetMembers%2A>， <xref:System.Type.GetConstructor%2A>，并<xref:System.Type.GetConstructors%2A>采用的方法<xref:System.Reflection.BindingFlags>作为参数。</span><span class="sxs-lookup"><span data-stu-id="6240b-4330">Class initializers are also available through the <xref:System.Type.FindMembers%2A> method, or through overloads of the <xref:System.Type.GetMember%2A>, <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetConstructor%2A>, and <xref:System.Type.GetConstructors%2A> methods that take <xref:System.Reflection.BindingFlags> as a parameter.</span></span>  
  
 <span data-ttu-id="6240b-4331">如果当前<xref:System.Type>表示泛型类型或泛型方法定义中的类型参数，此属性返回`null`。</span><span class="sxs-lookup"><span data-stu-id="6240b-4331">If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ConstructorInfo" />
      </Docs>
    </Member>
    <Member MemberName="UnderlyingSystemType">
      <MemberSignature Language="C#" Value="public abstract Type UnderlyingSystemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingSystemType" />
      <MemberSignature Language="DocId" Value="P:System.Type.UnderlyingSystemType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property UnderlyingSystemType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ UnderlyingSystemType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnderlyingSystemType : Type" Usage="System.Type.UnderlyingSystemType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.InteropServices._Type.UnderlyingSystemType</InterfaceMember>
        <InterfaceMember>P:System.Reflection.IReflect.UnderlyingSystemType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6240b-4332">指示表示该类型的公共语言运行时提供的类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-4332">Indicates the type provided by the common language runtime that represents this type.</span></span></summary>
        <value><span data-ttu-id="6240b-4333"><see cref="T:System.Type" /> 的基础系统类型。</span><span class="sxs-lookup"><span data-stu-id="6240b-4333">The underlying system type for the <see cref="T:System.Type" />.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Type.BaseType" />
      </Docs>
    </Member>
  </Members>
</Type>