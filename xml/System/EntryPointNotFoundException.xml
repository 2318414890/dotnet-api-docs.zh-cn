<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="EntryPointNotFoundException.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5a06cde606e85e1cdc19126bb4c29455a8086c2a1.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a06cde606e85e1cdc19126bb4c29455a8086c2a1</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.EntryPointNotFoundException">
          <source>The exception that is thrown when an attempt to load a class fails due to the absence of an entry method.</source>
          <target state="translated">因不存在项方法而导致加载类的尝试失败时引发的异常。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>An <ph id="ph1">&lt;xref:System.EntryPointNotFoundException&gt;</ph> exception is thrown when the common language runtime is unable to load an assembly because it cannot identify the assembly's entry point.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.EntryPointNotFoundException&gt;</ph>公共语言运行时无法加载程序集，因为它不能确定程序集的入口点时将引发异常。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>This exception can be thrown under the following conditions:</source>
          <target state="translated">在以下情况下，可能引发此异常：</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>The common language runtime is unable to locate an application entry point (typically a <ph id="ph1">`Main`</ph> method) in an executable assembly.</source>
          <target state="translated">公共语言运行时找不到应用程序入口点 (通常<ph id="ph1">`Main`</ph>方法) 中可执行程序集。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>The application entry point must be a global or <ph id="ph1">`static`</ph> method that has either no parameters or a string array as its only parameter.</source>
          <target state="translated">应用程序入口点必须是全局或<ph id="ph1">`static`</ph>具有任何参数或作为其唯一参数的字符串数组的方法。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>The entry point can return <ph id="ph1">`void`</ph>, or it can return an <ph id="ph2">&lt;xref:System.Int32&gt;</ph> or <ph id="ph3">&lt;xref:System.UInt32&gt;</ph> exit code.</source>
          <target state="translated">入口点可以返回<ph id="ph1">`void`</ph>，或者它可以返回<ph id="ph2">&lt;xref:System.Int32&gt;</ph>或<ph id="ph3">&lt;xref:System.UInt32&gt;</ph>退出代码。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>An application assembly cannot define more than one entry point.</source>
          <target state="translated">应用程序程序集不能定义多个入口点。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>The call to a function in a Windows DLL cannot be resolved because the function cannot be found.</source>
          <target state="translated">无法解析对 Windows DLL 中的函数的调用，因为找不到函数。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>In the following example, an <ph id="ph1">&lt;xref:System.EntryPointNotFoundException&gt;</ph> exception is thrown because User32.dll does not include a function named <ph id="ph2">`GetMyNumber`</ph>.</source>
          <target state="translated">在下面的示例中，<ph id="ph1">&lt;xref:System.EntryPointNotFoundException&gt;</ph>因为 User32.dll 中不包含一个名为函数引发异常<ph id="ph2">`GetMyNumber`</ph>。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>The call to a function in a Windows DLL cannot be resolved because the name used in the method call does not match a name found in the assembly.</source>
          <target state="translated">无法解析对 Windows DLL 中的函数的调用，因为该方法调用中使用的名称与在程序集中找到的名称不匹配。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>Frequently, this occurs because the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling?displayProperty=nameWithType&gt;</ph> field is either implicitly or explicitly set to <ph id="ph2">`true`</ph>, the called method includes one or more string parameters and has both an ANSI and a Unicode version, and the name used in the method call does not correspond to the name of this ANSI or Unicode version.</source>
          <target state="translated">通常情况下，这是因为<ph id="ph1">&lt;xref:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling?displayProperty=nameWithType&gt;</ph>字段隐式或显式设置为<ph id="ph2">`true`</ph>、 被调用的方法包括一个或多个字符串参数，并且有 ANSI 和 Unicode 版本，和方法调用中使用的名称不对应于此 ANSI 或 Unicode 版本的名称。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>The following example provides an illustration by attempting to call the Windows <ph id="ph1">`MessageBox`</ph> function in User32.dll.</source>
          <target state="translated">下面的示例通过尝试调用 Windows 提供方面的演示<ph id="ph1">`MessageBox`</ph>User32.dll 中的函数。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>Because the first method definition specifies <ph id="ph1">&lt;xref:System.Runtime.InteropServices.CharSet.Unicode?displayProperty=nameWithType&gt;</ph> for string marshaling, the common language looks for the wide-character version of the function, <ph id="ph2">`MessageBoxW`</ph>, instead of the name used in the method call, <ph id="ph3">`MessageBox`</ph>.</source>
          <target state="translated">因为第一个方法定义指定<ph id="ph1">&lt;xref:System.Runtime.InteropServices.CharSet.Unicode?displayProperty=nameWithType&gt;</ph>封送处理字符串，公共语言查找函数的宽字符版本<ph id="ph2">`MessageBoxW`</ph>，而不是调用方法中使用的名称<ph id="ph3">`MessageBox`</ph>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>The second method definition corrects this problem by calling the <ph id="ph1">`MessageBoxW`</ph> instead of the <ph id="ph2">`MessageBox`</ph> function.</source>
          <target state="translated">第二个方法定义可以解决此问题，通过调用<ph id="ph1">`MessageBoxW`</ph>而不是<ph id="ph2">`MessageBox`</ph>函数。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>You are trying to call a function in a dynamic link library by its simple name rather than its decorated name.</source>
          <target state="translated">您正试图通过其简单的名称，而不是其修饰的名动态链接库中调用的函数。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>Typically, the C++ compiler generates a decorated name for DLL functions.</source>
          <target state="translated">通常情况下，c + + 编译器将生成 DLL 函数的修饰的名称。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>For example, the following C++ code defines a function named <ph id="ph1">`Double`</ph> in a library named TestDll.dll.</source>
          <target state="translated">例如，下面的 c + + 代码定义一个名为函数<ph id="ph1">`Double`</ph>名为 TestDll.dll 库中。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>When the code in the following example tries to call the function, an <ph id="ph1">&lt;xref:System.EntryPointNotFoundException&gt;</ph> exception is thrown because the <ph id="ph2">`Double`</ph> function cannot be found.</source>
          <target state="translated">当尝试调用函数，下面的示例中的代码时<ph id="ph1">&lt;xref:System.EntryPointNotFoundException&gt;</ph>引发异常，因为<ph id="ph2">`Double`</ph>找不到函数。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>However, if the function is called by using its decorated name (in this case, <ph id="ph1">`?Double@@YAHH@Z`</ph>), the function call succeeds, as the following example shows.</source>
          <target state="translated">但是，如果该函数称为通过其修饰的名 (在这种情况下， <ph id="ph1">`?Double@@YAHH@Z`</ph>)，函数调用成功，如以下示例所示。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>You can find the decorated names of functions exported by a DLL by using a utility such as Dumpbin.exe.</source>
          <target state="translated">你可以找到由 DLL 导出的使用 Dumpbin.exe 之类的实用工具函数的修饰的名。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>You are attempting to call a method in a managed assembly as if it were an unmanaged dynamic link library.</source>
          <target state="translated">您试图从中调用中的托管程序集的方法，就像它是托管动态链接库。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>To see this in action, compile the following example to an assembly named StringUtilities.dll.</source>
          <target state="translated">若要查看此操作中，编译的程序集名为 StringUtilities.dll 下面的示例。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>Then compile and execute the following example, which attempts to call the <ph id="ph1">`StringUtilities.SayGoodMorning`</ph> method in the StringUtilities.dll dynamic link library as if it were unmanaged code.</source>
          <target state="translated">然后编译并执行下面的示例，它会尝试调用<ph id="ph1">`StringUtilities.SayGoodMorning`</ph>StringUtilities.dll 动态链接库中的方法就像它是非托管的代码。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>The result is an <ph id="ph1">&lt;xref:System.EntryPointNotFoundException&gt;</ph> exception.</source>
          <target state="translated">结果是<ph id="ph1">&lt;xref:System.EntryPointNotFoundException&gt;</ph>异常。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>To eliminate the exception, add a reference to the managed assembly and access the <ph id="ph1">`StringUtilities.SayGoodMorning`</ph> method just as you would access any other method in managed code, as the following example does.</source>
          <target state="translated">若要消除此异常，添加到托管程序集并访问引用<ph id="ph1">`StringUtilities.SayGoodMorning`</ph>就像你将访问在托管代码中的任何其他方法，如以下示例执行的方法。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>You are trying to call a method in a COM DLL as if it were a Windows DLL.</source>
          <target state="translated">您正试图 COM DLL 中调用的方法，就像它是 Windows DLL。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>To access a COM DLL, select the <bpt id="p1">**</bpt>Add Reference<ept id="p1">**</ept> option in Visual Studio to add a reference to the project, and then select the type library from the <bpt id="p2">**</bpt>COM<ept id="p2">**</ept> tab.</source>
          <target state="translated">若要访问 COM DLL，请选择<bpt id="p1">**</bpt>添加引用<ept id="p1">**</ept>Visual Studio 添加到项目中，引用，然后选择从类型库中的选项<bpt id="p2">**</bpt>COM<ept id="p2">**</ept>选项卡。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.EntryPointNotFoundException">
          <source>For a list of initial property values for an instance of <ph id="ph1">&lt;xref:System.EntryPointNotFoundException&gt;</ph>, see the <ph id="ph2">&lt;xref:System.EntryPointNotFoundException.%23ctor%2A&gt;</ph> constructors.</source>
          <target state="translated">有关的实例的初始属性值的列表<ph id="ph1">&lt;xref:System.EntryPointNotFoundException&gt;</ph>，请参阅<ph id="ph2">&lt;xref:System.EntryPointNotFoundException.%23ctor%2A&gt;</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="T:System.EntryPointNotFoundException">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.EntryPointNotFoundException" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.EntryPointNotFoundException" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.EntryPointNotFoundException.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.EntryPointNotFoundException" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.EntryPointNotFoundException" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> property of the new instance to a system-supplied message that describes the error, such as "Entry point was not found."</source>
          <target state="translated">此构造函数初始化<ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph>为系统提供的消息的描述错误，如"未找到入口点。"的新实例的属性</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor">
          <source>This message takes into account the current system culture.</source>
          <target state="translated">此消息将当前系统区域性考虑在内。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.EntryPointNotFoundException&gt;</ph>.</source>
          <target state="translated">下表显示 <ph id="ph1">&lt;xref:System.EntryPointNotFoundException&gt;</ph> 的实例的初始属性值。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor">
          <source>Property</source>
          <target state="translated">Property</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor">
          <source>Value</source>
          <target state="translated">“值”</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor">
          <source>A null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).</source>
          <target state="translated">空引用（在 Visual Basic 中为 <ph id="ph1">`Nothing`</ph>）。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor">
          <source>The localized error message string.</source>
          <target state="translated">本地化的错误消息字符串。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.EntryPointNotFoundException.#ctor(System.String)">
          <source>The error message that explains the reason for the exception.</source>
          <target state="translated">解释异常原因的错误消息。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.EntryPointNotFoundException.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.EntryPointNotFoundException" /&gt;</ph> class with a specified error message.</source>
          <target state="translated">用指定的错误消息初始化 <ph id="ph1">&lt;see cref="T:System.EntryPointNotFoundException" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor(System.String)">
          <source>The content of <ph id="ph1">`message`</ph> is intended to be understood by humans.</source>
          <target state="translated"><ph id="ph1">`message`</ph> 的内容被设计为人可理解的形式。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor(System.String)">
          <source>The caller of this constructor is required to ensure that this string has been localized for the current system culture.</source>
          <target state="translated">此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor(System.String)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.EntryPointNotFoundException&gt;</ph>.</source>
          <target state="translated">下表显示 <ph id="ph1">&lt;xref:System.EntryPointNotFoundException&gt;</ph> 的实例的初始属性值。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor(System.String)">
          <source>Property</source>
          <target state="translated">Property</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor(System.String)">
          <source>Value</source>
          <target state="translated">“值”</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor(System.String)">
          <source>A null reference (<ph id="ph1">`Nothing`</ph> in Visual Basic).</source>
          <target state="translated">空引用（在 Visual Basic 中为 <ph id="ph1">`Nothing`</ph>）。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor(System.String)">
          <source>The error message string.</source>
          <target state="translated">错误消息字符串。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.EntryPointNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The object that holds the serialized object data.</source>
          <target state="translated">承载序列化对象数据的对象。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.EntryPointNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The contextual information about the source or destination.</source>
          <target state="translated">关于来源和目标的上下文信息</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.EntryPointNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.EntryPointNotFoundException" /&gt;</ph> class with serialized data.</source>
          <target state="translated">用序列化数据初始化 <ph id="ph1">&lt;see cref="T:System.EntryPointNotFoundException" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</source>
          <target state="translated">此构造函数在反序列化过程中调用，以便重建通过流传输的异常对象。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.EntryPointNotFoundException.#ctor(System.String,System.Exception)">
          <source>The error message that explains the reason for the exception.</source>
          <target state="translated">解释异常原因的错误消息。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.EntryPointNotFoundException.#ctor(System.String,System.Exception)">
          <source>The exception that is the cause of the current exception.</source>
          <target state="translated">导致当前异常的异常。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.EntryPointNotFoundException.#ctor(System.String,System.Exception)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>inner<ept id="p1">&lt;/c&gt;</ept> parameter is not a null reference (<ph id="ph1">&lt;see langword="Nothing" /&gt;</ph> in Visual Basic), the current exception is raised in a <ph id="ph2">&lt;see langword="catch" /&gt;</ph> block that handles the inner exception.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>inner<ept id="p1">&lt;/c&gt;</ept> 参数不是空引用（在 Visual Basic 中为 <ph id="ph1">&lt;see langword="Nothing" /&gt;</ph>），则在处理内部异常的 <ph id="ph2">&lt;see langword="catch" /&gt;</ph> 块中引发当前异常。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.EntryPointNotFoundException.#ctor(System.String,System.Exception)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.EntryPointNotFoundException" /&gt;</ph> class with a specified error message and a reference to the inner exception that is the cause of this exception.</source>
          <target state="translated">使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <ph id="ph1">&lt;see cref="T:System.EntryPointNotFoundException" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor(System.String,System.Exception)">
          <source>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.</source>
          <target state="translated">因前一个异常而直接引发的异常应在 <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 属性中包含对前一个异常的引用。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor(System.String,System.Exception)">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property returns the same value that is passed into the constructor, or a null reference (<ph id="ph2">`Nothing`</ph> in Visual Basic) if the <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property does not supply the inner exception value to the constructor.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 属性返回传递到构造函数中的相同值，或者如果 <ph id="ph2">`Nothing`</ph> 属性不向构造函数提供内部异常值，则为空引用（在 Visual Basic 中为 <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph>）。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor(System.String,System.Exception)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.EntryPointNotFoundException&gt;</ph>.</source>
          <target state="translated">下表显示 <ph id="ph1">&lt;xref:System.EntryPointNotFoundException&gt;</ph> 的实例的初始属性值。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor(System.String,System.Exception)">
          <source>Property</source>
          <target state="translated">Property</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor(System.String,System.Exception)">
          <source>Value</source>
          <target state="translated">“值”</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor(System.String,System.Exception)">
          <source>The inner exception reference.</source>
          <target state="translated">内部异常引用。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.EntryPointNotFoundException.#ctor(System.String,System.Exception)">
          <source>The error message string.</source>
          <target state="translated">错误消息字符串。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>