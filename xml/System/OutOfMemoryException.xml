<Type Name="OutOfMemoryException" FullName="System.OutOfMemoryException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7b05f4026a0945a8550337ea6763feda0be457fd" /><Meta Name="ms.sourcegitcommit" Value="8bc3ac200cc1c4fb5daa8f9787e66801575530d2" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="02/21/2019" /><Meta Name="ms.locfileid" Value="56583038" /></Metadata><TypeSignature Language="C#" Value="public class OutOfMemoryException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit OutOfMemoryException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.OutOfMemoryException" />
  <TypeSignature Language="VB.NET" Value="Public Class OutOfMemoryException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class OutOfMemoryException : SystemException" />
  <TypeSignature Language="F#" Value="type OutOfMemoryException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>没有足够的内存继续执行程序时引发的异常。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks

<xref:System.OutOfMemoryException> 使用 HRESULT `COR_E_OUTOFMEMORY`，其中包含已用完 0x8007000E 的值。  
  
有关实例的初始属性值的列表<xref:System.OutOfMemoryException>，请参阅<xref:System.OutOfMemoryException.%23ctor%2A>构造函数。  
  
> [!NOTE]
>  值继承<xref:System.Exception.Data%2A>属性始终为`null`。  
  
<xref:System.OutOfMemoryException>异常有两个主要原因：  
  
-   尝试展开<xref:System.Text.StringBuilder>对象定义的长度超出其<xref:System.Text.StringBuilder.MaxCapacity%2A?displayProperty=nameWithType>属性。  
  
-   公共语言运行时无法分配连续内存不足，无法成功执行操作。 可以由任何需要的内存分配的属性赋值或方法调用引发此异常。 有关详细信息的原因<xref:System.OutOfMemoryException>异常，请参阅["内存不足"不是指物理内存](https://blogs.msdn.com/b/ericlippert/archive/2009/06/08/out-of-memory-does-not-refer-to-physical-memory.aspx)。  
  
     这种类型的<xref:System.OutOfMemoryException>异常表示发生灾难性故障。 如果您选择要处理的异常，应包括`catch`块调用<xref:System.Environment.FailFast%2A?displayProperty=nameWithType>方法来终止您的应用程序并向系统事件日志中，添加一个条目，如以下示例所示。  
  
     [!code-csharp[System.OutOfMemoryException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/failfast1.cs#2)]
     [!code-vb[System.OutOfMemoryException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/failfast1.vb#2)]  
  
 某些在其下引发异常，并且可用于消除它的操作包括以下条件：  
  
**正在调用<xref:System.Text.StringBuilder.Insert%2A?displayProperty=nameWithType>方法。**  

尝试增加的长度<xref:System.Text.StringBuilder>对象指定的大小超出其<xref:System.Text.StringBuilder.MaxCapacity%2A?displayProperty=nameWithType>属性。 下面的示例阐释<xref:System.OutOfMemoryException>通过调用引发异常<xref:System.Text.StringBuilder.Insert%28System.Int32%2CSystem.String%2CSystem.Int32%29?displayProperty=nameWithType>方法时此示例尝试将导致对象的字符串插入<xref:System.Text.StringBuilder.Length%2A>属性超过其最大容量。  
  
[!code-csharp[System.OutOfMemoryException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/sb_example1.cs#1)]
[!code-vb[System.OutOfMemoryException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/sb_example1.vb#1)]  
  
您可以执行以下操作来解决此错误：  
  
-   替换为调用<xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType>构造函数通过调用任何其他<xref:System.Text.StringBuilder>构造函数重载。 最大容量为你<xref:System.Text.StringBuilder>对象将设置为其默认值，即<xref:System.Int32.MaxValue?displayProperty=nameWithType>。  

-   调用<xref:System.Text.StringBuilder.%23ctor%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType>构造函数与`maxCapacity`该值是否足够大以容纳任何扩展到<xref:System.Text.StringBuilder>对象。  
  
**您的应用程序以 32 位进程形式运行。**

32 位进程可以分配最多 2 GB 的 32 位系统上的虚拟用户模式内存，4 GB 的 64 位系统上的用户模式虚拟内存。 这会使公共语言运行时根据需要分配大量的分配足够的连续内存更困难。 与此相反，64 位进程可以分配多达 8 TB 的虚拟内存。 若要解决此异常，请重新编译您的应用程序以面向 64 位平台。 针对 Visual Studio 中的特定平台的信息，请参阅[如何：将项目配置为面向平台](https://msdn.microsoft.com/library/845302fc-273d-4f81-820a-7296ce91bd76)。  
  
**应用正在泄露非托管的资源** 

虽然垃圾回收器可以释放内存分配给托管类型，它不会管理分配给非托管资源，如操作系统处理 （包括文件、 内存映射文件、 管道、 注册表项和等待句柄的句柄） 的内存和直接由 Windows API 调用或对内存分配函数的调用如分配内存块`malloc`。 使用非托管的资源的类型可实现<xref:System.IDisposable>接口。  

如果您正在使用使用非托管的资源的类型，您应确保调用其<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>方法使用它完成。 (某些类型还实现`Close`方法在功能上与相同`Dispose`方法。)有关详细信息，请参阅[使用对象，实现 IDisposable](~/docs/standard/garbage-collection/using-objects.md)主题。  

如果已创建使用非托管的资源的类型，请确保你已实现 Dispose 模式并，如有必要，提供终结器。 有关详细信息，请参阅[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)和<xref:System.Object.Finalize%2A?displayProperty=nameWithType>。  
  
**您尝试在 64 位进程中创建一个大型数组**

默认情况下，在.NET Framework 公共语言运行时不允许其大小超过 2 GB 的单个对象。 若要覆盖此默认设置，可以使用[ \<gcAllowVeryLargeObjects >](~/docs/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element.md)配置文件设置以启用总大小超过 2 GB 的数组。 在.NET Core 上支持大于 2 GB 默认情况下启用的数组。 
  
**你正在使用非常大 （如数组、 集合或数据库的数据集） 的数据集在内存中。**

当数据结构或驻留在内存中的数据集变得太大，公共语言运行时无法为它们分配连续内存不足时<xref:System.OutOfMemoryException>异常结果。  

若要防止<xref:System.OutOfMemoryException>异常，则必须修改应用程序，以便更少的数据驻留在内存中，或将数据划分成需要的较小的内存分配的段。 例如:  

-   如果是从数据库检索的所有数据，然后对其进行筛选以最大程度减少往返服务器应用程序中，您应修改查询以返回仅应用所需的数据子集。 使用大型表时，多个查询时，几乎总是的详细信息比检索所有单个表中的数据，然后对其进行处理的效率高。  

-   如果在执行用户动态创建的查询，应确保由查询返回的记录数会受到限制。  

-   如果使用的大型数组或对象的其他集合中的其大小结果<xref:System.OutOfMemoryException>异常，则应修改应用程序能够将数据子集而不是一次性全部使用它。  
  
以下示例将获取一个数组，其中包括 200 万个浮点值，然后计算其平均值。 该示例的输出显示，因为该示例在内存中存储整个数组，它会计算平均值之前,<xref:System.OutOfMemoryException>是引发。  

[!code-csharp[System.OutOfMemoryException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/data1.cs#3)]
[!code-vb[System.OutOfMemoryException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/data1.vb#3)]  
  
下面的示例可消除<xref:System.OutOfMemoryException>由处理传入的数据，而不是将整个数据集存储在内存中，序列化到文件数据，如有必要以允许进一步处理 （这些行中注释掉示例中，异常由于这种情况下它们生成一个文件，其大小是大于 1 GB），并将计算的平均值和事例数返回到调用例程。  

[!code-csharp[System.OutOfMemoryException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.outofmemoryexception/cs/data2.cs#4)]
[!code-vb[System.OutOfMemoryException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.outofmemoryexception/vb/data2.vb#4)]  
  
**重复连接长字符串。** 

由于字符串是不可变，每个字符串串联操作将创建一个新字符串。 对于小字符串，或对于串联操作中，较少数量的影响可以忽略不计。 但对于大型字符串或非常大量的串联操作中，字符串串联可能会导致大量的内存分配和内存碎片，性能不佳，并可能<xref:System.OutOfMemoryException>异常。  

当连接长字符串，或执行大量的串联操作中，您应使用<xref:System.Text.StringBuilder>类而不是<xref:System.String>类。 完成操作字符串后，将转换<xref:System.Text.StringBuilder>实例与通过调用字符串<xref:System.Text.StringBuilder.ToString%2A?displayProperty=nameWithType>方法。  
  
**将大量对象固定在内存中。**  
 
很长一段固定内存中的大量对象可以使难以垃圾回收器分配的内存的连续块。 如果已将固定大量对象在内存中，例如通过使用`fixed`语句在 C# 或通过调用<xref:System.Runtime.InteropServices.GCHandle.Alloc%28System.Object%2CSystem.Runtime.InteropServices.GCHandleType%29?displayProperty=nameWithType>方法的句柄类型替换<xref:System.Runtime.InteropServices.GCHandleType.Pinned?displayProperty=nameWithType>，您可以执行以下操作为地址<xref:System.OutOfMemoryException>异常。  
  
-   评估是否真的需要固定，每个对象  

-   请确保每个对象已取消固定越早越好。  

-   请确保每个调用到<xref:System.Runtime.InteropServices.GCHandle.Alloc%28System.Object%2CSystem.Runtime.InteropServices.GCHandleType%29?displayProperty=nameWithType>pin 内存的方法具有相应地调用<xref:System.Runtime.InteropServices.GCHandle.Free%2A?displayProperty=nameWithType>方法来取消固定的内存。  

以下 Microsoft 中间 (MSIL) 指令引发<xref:System.OutOfMemoryException>异常：  
  
-   [box](https://msdn.microsoft.com/library/system.reflection.emit.opcodes.box.aspx)  
-   [newarr](https://msdn.microsoft.com/library/system.reflection.emit.opcodes.newarr.aspx)  

-   [newobj](https://msdn.microsoft.com/library/system.reflection.emit.opcodes.newobj.aspx)newobj  


 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <related type="Article" href="~/docs/standard/exceptions/index.md">处理和引发异常</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.OutOfMemoryException" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutOfMemoryException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutOfMemoryException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.OutOfMemoryException" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数初始化<xref:System.Exception.Message%2A>为系统提供的错误进行描述，如"没有足够的内存来继续执行程序。"的消息的新实例的属性 此消息将当前系统区域性考虑在内。  
  
 下表显示 <xref:System.OutOfMemoryException> 的实例的初始属性值。  
  
|Property|值|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|`null`。|  
|<xref:System.Exception.Message%2A>|本地化的错误消息字符串。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutOfMemoryException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutOfMemoryException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new OutOfMemoryException : string -&gt; OutOfMemoryException" Usage="new System.OutOfMemoryException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">描述错误的消息。</param>
        <summary>用指定的错误消息初始化 <see cref="T:System.OutOfMemoryException" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `message` 参数的内容应为人所理解。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。  
  
 下表显示 <xref:System.OutOfMemoryException> 的实例的初始属性值。  
  
|Property|“值”|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|空引用（在 Visual Basic 中为 `Nothing`）。|  
|<xref:System.Exception.Message%2A>|错误消息字符串。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OutOfMemoryException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; OutOfMemoryException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new OutOfMemoryException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; OutOfMemoryException" Usage="new System.OutOfMemoryException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">承载序列化对象数据的对象。</param>
        <param name="context">关于来源和目标的上下文信息</param>
        <summary>用序列化数据初始化 <see cref="T:System.OutOfMemoryException" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数在反序列化过程中调用，以便重建通过流传输的异常对象。 有关详细信息，请参阅[XML 和 SOAP 序列化](~/docs/standard/serialization/xml-and-soap-serialization.md)。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md">XML 和 SOAP 序列化</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutOfMemoryException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.OutOfMemoryException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutOfMemoryException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new OutOfMemoryException : string * Exception -&gt; OutOfMemoryException" Usage="new System.OutOfMemoryException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">解释异常原因的错误消息。</param>
        <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不是 null 引用（在 Visual Basic 中为 <see langword="Nothing" />），则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
        <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.OutOfMemoryException" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因前一个异常而直接引发的异常可以在 <xref:System.Exception.InnerException%2A> 属性中包含对前一个异常的引用。 <xref:System.Exception.InnerException%2A> 属性返回传递到构造函数中的相同值，或者如果 `Nothing` 属性不向构造函数提供内部异常值，则为空引用（在 Visual Basic 中为 <xref:System.Exception.InnerException%2A>）。  
  
 下表显示 <xref:System.OutOfMemoryException> 的实例的初始属性值。  
  
|Property|“值”|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|内部异常引用。|  
|<xref:System.Exception.Message%2A>|错误消息字符串。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
        <related type="Article" href="~/docs/standard/exceptions/index.md">处理和引发异常</related>
      </Docs>
    </Member>
  </Members>
</Type>