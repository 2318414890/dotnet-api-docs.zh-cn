<Type Name="Lazy&lt;T&gt;" FullName="System.Lazy&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="11826166fef32f2564da98bcfb9954709a20fbc7" /><Meta Name="ms.sourcegitcommit" Value="42a3c35677e9d87eeb503607ae50c9d39827d414" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="12/17/2018" /><Meta Name="ms.locfileid" Value="53524014" /></Metadata><TypeSignature Language="C#" Value="public class Lazy&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Lazy`1&lt;T&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Lazy`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Lazy(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Lazy" />
  <TypeSignature Language="F#" Value="type Lazy&lt;'T&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.System_LazyDebugView`1))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">正在延迟初始化的对象的类型。</typeparam>
    <summary>提供对延迟初始化的支持。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用延迟初始化来延迟创建大型或占用大量资源的对象或执行资源密集型任务，尤其是在此类会创建或执行可能不会出现在程序的生存期内时。  
  
 若要准备迟缓初始化，您创建的实例<xref:System.Lazy%601>。 类型参数<xref:System.Lazy%601>你创建的对象指定要延迟初始化的对象的类型。 构造函数用来创建<xref:System.Lazy%601>对象确定特性的初始化。 首次访问 <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> 属性时出现延迟初始化。  
  
 在大多数情况下，选择一个构造函数取决于两个问题的回答：  
  
-   将从多个线程访问的延迟初始化的对象？ 如果是这样，<xref:System.Lazy%601>对象可能在任何线程上创建它。 可以使用其默认行为是创建一个线程安全的简单构造函数之一<xref:System.Lazy%601>对象，因此只有一个实例的延迟实例化的对象创建无论多少线程尝试访问它。 若要创建<xref:System.Lazy%601>不是线程安全的对象，必须使用的构造函数，可用于指定不具有线程安全性。  
  
    > [!CAUTION]
    >  使<xref:System.Lazy%601>对象线程安全不会保护延迟初始化的对象。 如果多个线程可以访问的延迟初始化的对象，其属性和方法必须进行安全的多线程访问。  
  
-   迟缓初始化是否需要大量的代码，或延迟初始化的对象是否具有执行所有操作需要和不会引发异常的默认构造函数？ 如果您需要自己编写初始化代码或异常需要进行处理，使用采用的工厂方法的构造函数之一。 工厂方法中编写初始化代码。  
  
 下表显示了哪个构造函数来选择，基于这两个因素：  
  
|将访问对象|如果不不需要任何初始化代码 （默认构造函数） 使用|如果需要初始化代码，使用|  
|--------------------------------|------------------------------------------------------------------------|---------------------------------------------|  
|多个线程|<xref:System.Lazy%601.%23ctor>|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>|  
|一个线程|<xref:System.Lazy%601.%23ctor%28System.Boolean%29> 与`isThreadSafe`设置为`false`。|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> 与`isThreadSafe`设置为`false`。|  
  
 可以使用 lambda 表达式来指定的工厂方法。 这会将所有初始化代码都保持在一个位置。 Lambda 表达式捕获的上下文，包括向延迟初始化的对象的构造函数传递任何参数。  
  
 **异常缓存**时使用工厂方法时，会缓存异常。 也就是说，如果工厂方法将引发异常的第一次一个线程尝试访问<xref:System.Lazy%601.Value%2A>属性的<xref:System.Lazy%601>对象，每个后续尝试引发相同的异常。 这可确保每次调用<xref:System.Lazy%601.Value%2A>属性生成相同的结果，并可避免不同的线程获得不同的结果时可能引发的细微错误。 <xref:System.Lazy%601>代表实际`T`，否则会初始化后在某些较早的时候，通常在启动过程。 通常严重故障时该早时间点。 如果恢复失败的可能，我们建议构建重试逻辑 （在此情况下，在工厂方法），初始化例程到，只需像未在使用延迟初始化。  
  
 **替代锁定**在某些情况下，你可能想要避免产生的开销<xref:System.Lazy%601>对象的默认锁定行为。 在极少数情况下，可能会潜在死锁。 在这种情况下，可以使用<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>或<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>构造函数，并指定<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>。 这使得<xref:System.Lazy%601>对象来创建延迟初始化对象的副本在每个多个线程上，如果线程调用<xref:System.Lazy%601.Value%2A>属性同时。 <xref:System.Lazy%601>对象，可以确保所有线程使用延迟初始化对象的相同实例，并放弃未使用的实例。 因此，减少锁定开销的成本是您的程序有时可能会创建和丢弃的高开销对象的额外副本。 在大多数情况下，这是不可能。 有关示例<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>和<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>构造函数演示此行为。  
  
> [!IMPORTANT]
>  当指定<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>，永远不会缓存异常，即使您指定的工厂方法。  
  
 **等效的构造函数**除了允许使用<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>，则<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>和<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>构造函数可以复制其他构造函数的功能。 下表显示了生成等效的行为的参数值。  
  
|若要创建<xref:System.Lazy%601>对象，该对象|对于具有的构造函数`LazyThreadSafetyMode``mode`参数，设置`mode`到|对于具有一个布尔值的构造函数`isThreadSafe`参数，设置`isThreadSafe`到|对于不带任何线程安全性参数的构造函数|  
|-------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------|-------------------------------------------------------|  
|完全线程安全;使用以下锁定确保只有一个线程初始化的值。|<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication>|`true`|所有此类构造函数是完全线程安全的。|  
|非线程安全。|<xref:System.Threading.LazyThreadSafetyMode.None>|`false`|不适用。|  
|完全线程安全;线程争用来初始化的值。|<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>|不适用。|不适用。|  
  
 **其他功能**有关的使用信息<xref:System.Lazy%601>使用线程静态字段或属性的后备存储，请参阅[迟缓初始化](~/docs/framework/performance/lazy-initialization.md)。  
  
   
  
## Examples  
 下面的示例演示如何将<xref:System.Lazy%601>类以提供从多个线程访问迟缓初始化。  
  
> [!NOTE]
>  该示例使用<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>构造函数。 它还演示如何使用<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>构造函数 (指定`true`有关`isThreadSafe`) 和<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>构造函数 (指定<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>为`mode`)。 若要切换到不同的构造函数，只需更改的构造函数已被注释掉。  
>   
>  有关演示异常的示例，缓存使用的相同的构造函数，请参阅<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>构造函数。  
  
 此示例定义一个将由多个线程之一延迟初始化的 `LargeObject` 类。 代码的四个主要部分说明的初始值设定项、 工厂方法，实际的初始化和的构造函数创建`LargeObject`类，该类创建对象时显示一条消息。 在 `Main` 方法的开头，该示例为 `LargeObject` 创建线程安全的延迟初始值:   
  
 [!code-csharp[System.Lazy\`1#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#newlazy)]  
  
 工厂方法演示如何创建对象，其占位符用于进一步初始化：  
  
 [!code-csharp[System.Lazy\`1#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#factoryfunc)]  
  
 请注意前, 两个代码部分可以组合使用 lambda 函数中，如下所示：  
  
 [!code-csharp[System.Lazy\`1#InitWithLambda](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/lambda.cs#initwithlambda)]
 [!code-vb[System.Lazy\`1#InitWithLambda](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/lambda.vb#initwithlambda)]  
  
 该示例暂停，以指示延迟初始化发生之前，可能需要一个不确定的时间段。 当您按下**Enter**密钥，该示例创建并启动三个线程。 `ThreadProc`方法，由所有三个线程调用<xref:System.Lazy%601.Value%2A>属性。 第一次发生这种情况，`LargeObject`创建实例：  
  
 [!code-csharp[System.Lazy\`1#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#valueprop)]  
  
 构造函数`LargeObject`类，其中包含代码的最后一个关键部分，显示一条消息，并记录正在初始化的线程的标识。 程序的输出将显示完整代码列表的末尾。  
  
 [!code-csharp[System.Lazy\`1#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#largector)]  
  
> [!NOTE]
>  为简单起见，此示例使用 <xref:System.Lazy%601> 的全局实例，所有方法都是 `static` (在 Visual Basic 中`Shared` )。 使用延迟初始化没有要求。  
  
 [!code-csharp[System.Lazy\`1#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#all)]  
  
 ]]></format>
    </remarks>
    <threadsafe>默认情况下的所有公共和受保护成员<see cref="T:System.Lazy`1" />类都是线程安全的可能从多个线程同时使用。 （可选） 和每个实例，使用该类型的构造函数的参数，则可能会删除这些线程安全性保证。</threadsafe>
    <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
    <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">延迟初始化</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例。 当发生延迟初始化时，使用目标类型的默认构造函数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此构造函数创建一个实例可能从多个线程同时使用。  
  
 线程安全模式的<xref:System.Lazy%601>使用此构造函数初始化的实例是<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>。 线程安全模式介绍多个线程尝试初始化时的行为<xref:System.Lazy%601>实例。  
  
 一个<xref:System.Lazy%601>使用此构造函数创建的实例不会缓存异常。 有关更多信息，请参见 <xref:System.Lazy%601> 类或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 枚举。  
  
   
  
## Examples  
 下面的示例演示如何使用此构造函数。 它还演示如何使用<xref:System.Lazy%601.%23ctor%28System.Boolean%29>构造函数 (指定`true`有关`isThreadSafe`) 和<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>构造函数 (指定<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>为`mode`)。 若要切换到不同的构造函数，只需更改的构造函数已被注释掉。  
  
 此示例定义一个将由多个线程之一延迟初始化的 `LargeObject` 类。 在此示例中的两个关键代码行是代码的在创建的初始值设定项和实际初始化。 在 `Main` 方法的开头，该示例为 `LargeObject` 创建线程安全的延迟初始值:   
  
 [!code-csharp[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#newlazy)]  
  
 该示例创建并启动三个线程的阻止<xref:System.Threading.ManualResetEvent>对象，以便该示例可以一次性全部释放线程。 `ThreadProc`方法，由所有三个线程调用<xref:System.Lazy%601.Value%2A>属性获取`LargeObject`实例：  
  
 [!code-csharp[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#valueprop)]  
  
 <xref:System.Lazy%601>类提供锁定，以便只有一个线程允许创建`LargeObject`实例。 该示例演示所有线程均都获得同一实例。  
  
> [!NOTE]
>  为简单起见，此示例使用 <xref:System.Lazy%601> 的全局实例，所有方法都是 `static` (在 Visual Basic 中`Shared` )。 使用延迟初始化没有要求。  
  
 [!code-csharp[System.Lazy\`1.ctor#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctor#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">延迟初始化</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; isThreadSafe" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isThreadSafe">若要使此实例可同时由多个线程使用，则为 <see langword="true" />；若要使实例一次只能由一个线程使用，则为 <see langword="false" />。</param>
        <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例。 当延迟初始化发生时，将使用目标类型的默认构造函数和指定初始化模式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 线程安全模式的<xref:System.Lazy%601>使用此构造函数初始化的实例是<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>如果`isThreadSafe`是`true`; 否则为该模式是<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>。 线程安全模式介绍多个线程尝试初始化时的行为<xref:System.Lazy%601>实例。 若要指定<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>模式下，使用<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>或<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>构造函数。  
  
 一个<xref:System.Lazy%601>使用此构造函数创建的实例不会缓存异常。 有关更多信息，请参见 <xref:System.Lazy%601> 类或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 枚举。  
  
   
  
## Examples  
 下面的示例演示如何将此构造函数可创建不是线程安全的适合对延迟初始化对象的所有访问都发生在同一线程上的延迟初始值设定项。 它还演示如何使用<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>构造函数 (指定<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>为`mode`。 若要切换到不同的构造函数，只需更改哪个构造函数已被注释掉。  
  
> [!NOTE]
>  有关演示如何在多线程方案中使用此构造函数的代码 (指定`true`有关`isThreadSafe`)，有关示例，请参阅<xref:System.Lazy%601.%23ctor>构造函数。  
  
 该示例定义了`LargeObject`将延迟初始化的类。 在中`Main`方法，该示例创建<xref:System.Lazy%601>实例然后暂停。 当您按下**Enter**键，该示例访问<xref:System.Lazy%601.Value%2A>属性的<xref:System.Lazy%601>实例，这会导致发生的初始化。 构造函数`LargeObject`类将显示一条控制台消息。  
  
> [!NOTE]
>  为简单起见，此示例使用 <xref:System.Lazy%601> 的全局实例，所有方法都是 `static` (在 Visual Basic 中`Shared` )。 使用延迟初始化没有要求。  
  
 [!code-csharp[System.Lazy\`1.ctorBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">延迟初始化</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; valueFactory" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="valueFactory">调用用于在需要时生成延迟初始化值的委托。</param>
        <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例。 出现迟缓初始化时，将使用指定的初始化函数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此构造函数创建一个实例可能从多个线程同时使用。  
  
 线程安全模式的<xref:System.Lazy%601>使用此构造函数初始化的实例是<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>。 线程安全模式介绍多个线程尝试初始化时的行为<xref:System.Lazy%601>实例。  
  
 引发的异常`valueFactory`缓存。 有关更多信息，请参见 <xref:System.Lazy%601> 类或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 枚举。  
  
   
  
## Examples  
 下面的示例演示如何将此构造函数可提供与异常缓存延迟初始化。 它还演示如何使用<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>构造函数 (指定`true`有关`isThreadSafe`) 和<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>构造函数 (指定<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>为`mode`)。 若要切换到不同的构造函数，只需更改的构造函数已被注释掉。  
  
 此示例定义一个将由多个线程之一延迟初始化的 `LargeObject` 类。 代码的三个主要部分说明的初始值设定项、 实际的初始化和的构造函数创建`LargeObject`类，该示例演示了异常缓存。 在 `Main` 方法的开头，该示例为 `LargeObject` 创建线程安全的延迟初始值:   
  
 [!code-csharp[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#newlazy)]  
  
 该示例创建并启动三个线程。 `ThreadProc`方法，由所有三个线程调用<xref:System.Lazy%601.Value%2A>属性获取`LargeObject`实例：  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#valueprop)]  
  
 中的构造函数`LargeObject`类，代码的第三个关键部分将引发异常的第一个时间`LargeObject`实例创建后，但此后允许创建实例发生：  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#largector)]  
  
 运行示例时，尝试创建的实例的第一个线程`LargeObject`捕获将失败，并且该异常。 您所料下, 一个线程会成功创建实例，但<xref:System.Lazy%601>对象已缓存了异常。 因此，所有三个线程引发的异常。  
  
> [!NOTE]
>  为简单起见，此示例使用 <xref:System.Lazy%601> 的全局实例，所有方法都是 `static` (在 Visual Basic 中`Shared` )。 使用延迟初始化没有要求。  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFunc#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="valueFactory" /> 为 <see langword="null" />。</exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">延迟初始化</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; mode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" />
      </Parameters>
      <Docs>
        <param name="mode">一个枚举值，用于指定线程安全模式。</param>
        <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例，它使用 <paramref name="T" /> 的默认构造函数和指定的线程安全模式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 线程安全模式的<xref:System.Lazy%601>实例描述的行为，当多个线程尝试初始化<xref:System.Lazy%601>实例。  
  
 一个<xref:System.Lazy%601>使用此构造函数创建的实例不会缓存异常。 有关更多信息，请参见 <xref:System.Lazy%601> 类或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 枚举。  
  
   
  
## Examples  
 下面的示例演示如何将此构造函数以创建允许多个线程争相延迟创建对象的延迟初始值设定项。 多个线程可能会成功地创建实例，但所有线程都使用首次创建的实例。  
  
> [!NOTE]
>  有关示例，演示如何在单线程方案中使用此构造函数 (指定<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>有关`mode`)，请参阅<xref:System.Lazy%601.%23ctor%28System.Boolean%29>构造函数。 有关示例，演示如何使用此构造函数提供锁定而不多线程方案中的争用条件 (指定<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>有关`mode`)，请参阅<xref:System.Lazy%601.%23ctor>构造函数。  
  
 该示例定义了`LargeObject`将由多个线程的任何延迟初始化的类。 代码的三个主要部分说明了初始值设定项、 和的创建实际的初始化，构造函数和终结器的`LargeObject`类。 在开头`Main`方法，该示例将创建<xref:System.Lazy%601>执行的延迟初始化对象`LargeObject`:  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#newlazy)]  
  
 该示例创建并启动三个线程的阻止<xref:System.Threading.ManualResetEvent>对象，以便该示例可以一次性全部释放线程。 在中`ThreadProc`方法，由所有三个线程，调用<xref:System.Lazy%601.Value%2A>属性所产生的`LargeObject`实例：  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#valueprop)]  
  
 因为的构造函数<xref:System.Lazy%601>指定的实例<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>，允许所有三个线程的创建`LargeObject`实例。 通过在构造函数和终结器的显示控制台消息的示例演示这`LargeObject`类：  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#ctorfinalizer)]  
  
 但是，<xref:System.Lazy%601>对象可确保只有一个实例使用的所有线程。 该示例的输出显示了所有三个线程使用同一个实例，同时还显示其他两个实例可以被垃圾回收。  
  
> [!NOTE]
>  为简单起见，此示例使用 <xref:System.Lazy%601> 的全局实例，所有方法都是 `static` (在 Visual Basic 中`Shared` )。 使用延迟初始化没有要求。  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> 包含无效值。</exception>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">延迟初始化</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(T value);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : 'T -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, isThreadSafe)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="valueFactory">调用用于在需要时生成延迟初始化值的委托。</param>
        <param name="isThreadSafe">若要使此实例可同时由多个线程使用，则为 <see langword="true" />；若要使此实例一次只能由一个线程使用，则为  <see langword="false" />。</param>
        <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例。 当延迟初始化发生时，将使用指定的初始化函数和初始化模式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 线程安全模式的<xref:System.Lazy%601>使用此构造函数初始化的实例是<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>如果`isThreadSafe`是`true`; 否则为该模式是<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>。 线程安全模式介绍多个线程尝试初始化时的行为<xref:System.Lazy%601>实例。  
  
 若要指定<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>模式下，使用<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>或<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>构造函数。  
  
 引发的异常`valueFactory`缓存。 有关更多信息，请参见 <xref:System.Lazy%601> 类或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 枚举。  
  
   
  
## Examples  
 下面的示例演示如何将此构造函数可与异常缓存，在方案中使用单个线程提供迟缓初始化。 它还演示如何使用<xref:System.Lazy%601.%23ctor%2A>构造函数 (指定<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>为`mode`)。 若要切换到该构造函数，只需更改哪个构造函数已被注释掉。  
  
> [!NOTE]
>  有关演示如何在多线程方案中使用此构造函数的代码 (指定`true`有关`isThreadSafe`)，有关示例，请参阅<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>构造函数。  
  
 此示例定义一个将由多个线程之一延迟初始化的 `LargeObject` 类。 代码的三个主要部分说明的初始值设定项、 实际的初始化和的构造函数创建`LargeObject`类，该示例演示了异常缓存。 在 `Main` 方法的开头，该示例为 `LargeObject` 创建线程安全的延迟初始值:   
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#newlazy)]  
  
 在构造函数中，调用`isThreadSafe`参数是`false`，因此<xref:System.Lazy%601>不是线程安全。 因为它不是线程安全，该示例将调用<xref:System.Lazy%601.Value%2A>三次在同一线程上的属性：  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#valueprop)]  
  
 中的构造函数`LargeObject`类，代码的第三个关键部分将引发异常的第一个时间`LargeObject`实例创建后，但此后允许创建实例发生：  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#largector)]  
  
 运行示例时，第一次尝试创建的实例`LargeObject`捕获将失败，并且该异常。 您所料下, 一次尝试都会成功，但<xref:System.Lazy%601>对象已缓存了异常。 因此，所有三个尝试引发的异常。  
  
> [!NOTE]
>  为简单起见，此示例使用 <xref:System.Lazy%601> 的全局实例，所有方法都是 `static` (在 Visual Basic 中`Shared` )。 使用延迟初始化没有要求。  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="valueFactory" /> 为 <see langword="null" />。</exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">延迟初始化</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, mode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" />
      </Parameters>
      <Docs>
        <param name="valueFactory">调用用于在需要时生成延迟初始化值的委托。</param>
        <param name="mode">一个枚举值，用于指定线程安全模式。</param>
        <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例，它使用指定的初始化函数和线程安全模式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 线程安全模式的<xref:System.Lazy%601>实例描述的行为，当多个线程尝试初始化<xref:System.Lazy%601>实例。  
  
 引发的异常`valueFactory`缓存，除非`mode`是<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>。 有关更多信息，请参见 <xref:System.Lazy%601> 类或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 枚举。  
  
   
  
## Examples  
 下面的示例演示如何将此构造函数以创建允许多个线程争相延迟创建对象的延迟初始值设定项。 多个线程可能会成功地创建实例，但所有线程都使用首次创建的实例。 此外，该示例演示指定时，永远不会缓存异常<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>，即使由函数而不是惰式创建的类型的默认构造函数通过执行初始化。  
  
> [!NOTE]
>  有关示例，演示如何在单线程方案中使用此构造函数 (指定<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>有关`mode`)，请参阅<xref:System.Lazy%601.%23ctor%28System.Boolean%29>构造函数。 有关示例，演示如何使用此构造函数提供锁定而不多线程方案中的争用条件 (指定<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>有关`mode`)，请参阅<xref:System.Lazy%601.%23ctor>构造函数。  
  
 该示例定义了`LargeObject`将由多个线程的任何延迟初始化的类。 代码的四个主要部分说明的初始值设定项、 实际初始化、 初始化函数和构造函数创建和终结器的`LargeObject`类。 在开头`Main`方法，该示例将创建<xref:System.Lazy%601>执行的延迟初始化对象`LargeObject`:  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#newlazy)]  
  
 延迟初始值设定项使用一个函数来执行初始化。 在这种情况下，函数是必需的因为没有默认构造函数`LargeObject`类。  
  
 该示例创建并启动三个线程的阻止<xref:System.Threading.ManualResetEvent>对象，以便该示例可以一次性全部释放线程。 在中`ThreadProc`方法，由所有三个线程，调用<xref:System.Lazy%601.Value%2A>属性所产生的`LargeObject`实例：  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#valueprop)]  
  
 在代码的第三个关键部分，延迟初始化函数调用以创建`LargeObject`实例。 该函数将引发异常的第一次调用时：  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#factoryfunc)]  
  
 与任何其他<xref:System.Threading.LazyThreadSafetyMode>设置，就会缓存初始化函数中未经处理的异常。 但是，<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>禁止显示异常缓存。 示例输出演示的后续尝试将对象初始化成功。  
  
> [!NOTE]
>  通常，该值指示其他线程已成功初始化该对象的消息后，会显示异常消息。 这是因为引入引发和捕获异常的延迟。  
  
 因为的构造函数<xref:System.Lazy%601>指定的实例<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>，允许所有三个线程的创建`LargeObject`实例。 通过在构造函数和终结器的显示控制台消息的示例演示这`LargeObject`类：  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#ctorfinalizer)]  
  
 <xref:System.Lazy%601>对象可确保只有一个实例使用的所有线程 （除了其中的初始化函数将引发异常的线程）。 示例输出演示了这一点。  
  
> [!NOTE]
>  为简单起见，此示例使用 <xref:System.Lazy%601> 的全局实例，所有方法都是 `static` (在 Visual Basic 中`Shared` )。 使用延迟初始化没有要求。  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> 包含无效值。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="valueFactory" /> 为 <see langword="null" />。</exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">延迟初始化</related>
      </Docs>
    </Member>
    <Member MemberName="IsValueCreated">
      <MemberSignature Language="C#" Value="public bool IsValueCreated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueCreated" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.IsValueCreated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueCreated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueCreated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueCreated : bool" Usage="System.Lazy&lt;'T&gt;.IsValueCreated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值表示是否为该 <see cref="T:System.Lazy`1" /> 实例创建了值。</summary>
        <value>如果为此 <see cref="T:System.Lazy`1" /> 实例创建了值，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当延迟初始化发生<xref:System.Lazy%601>实例，它可能会导致引发异常或正在创建的值。 如果异常则引发该异常，后续的行为的<xref:System.Lazy%601>实例取决于异常缓存是否有效。 如果<xref:System.Lazy%601>实例已通过使用构造函数不指定初始化函数，则异常缓存不起作用。 若要初始化的后续尝试<xref:System.Lazy%601>可能会成功，且成功初始化后<xref:System.Lazy%601.IsValueCreated%2A>属性返回`true`。 如果<xref:System.Lazy%601>与初始化函数创建实例 (通过指定`valueFactory`参数的<xref:System.Lazy%601>构造函数)，然后异常缓存控制的线程安全模式。  
  
-   如果模式为<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>或<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>，则没有第二次机会来初始化<xref:System.Lazy%601>实例。 如果发生了异常，但在初始化函数中未经处理，该异常将缓存并在后续访问再次引发<xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>属性。 如果引发异常，因此，在这种情况下，不创建任何值<xref:System.Lazy%601.IsValueCreated%2A>返回`false`。  
  
-   如果模式为<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>，成功运行初始化函数 （或默认构造函数） 中的第一个线程创建的值为<xref:System.Lazy%601>实例。 如果初始化函数在一个线程上引发了异常，其他线程仍可以尝试初始化<xref:System.Lazy%601>实例。 创建值，直到<xref:System.Lazy%601.IsValueCreated%2A>属性返回`false`。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">延迟初始化</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="lazy.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建并返回此实例的 <see cref="P:System.Lazy`1.Value" /> 属性的字符串表示形式。</summary>
        <returns>针对此实例调用 <see cref="P:System.Lazy`1.Value" /> 属性上的 <see cref="M:System.Object.ToString" /> 方法的结果（如果已创建该值的话，即，如果 <see cref="P:System.Lazy`1.IsValueCreated" /> 属性返回 <see langword="true" />）。 否则，则为一个指示该值尚未创建的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法不会导致初始化。  
  
 <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>属性可以是`null`后迟缓初始化工厂方法是否为指定`valueFactory`参数<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>， <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>，或<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>构造函数将返回`null`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><see cref="P:System.Lazy`1.Value" /> 属性为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public T Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Value" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Value { T get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : 'T" Usage="System.Lazy&lt;'T&gt;.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前 <see cref="T:System.Lazy`1" /> 实例的延迟初始化值。</summary>
        <value>当前 <see cref="T:System.Lazy`1" /> 实例的延迟初始化值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType>属性是`false`，则访问<xref:System.Lazy%601.Value%2A>属性强制初始化。  
  
 除了所列出的异常<xref:System.Lazy%601.Value%2A>属性可能会引发由传递给工厂方法引发的任何未处理的异常`valueFactory`的参数<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>， <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>，或<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>构造函数。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException"><see cref="T:System.Lazy`1" /> 实例初始化为使用要延迟初始化的类型的默认构造函数，但缺少访问该构造函数的权限。</exception>
        <exception cref="T:System.MissingMemberException"><see cref="T:System.Lazy`1" /> 实例初始化为使用要延迟初始化的类型的默认构造函数，但该类型没有无参数的公共构造函数。</exception>
        <exception cref="T:System.InvalidOperationException">初始化函数尝试访问此实例上的 <see cref="P:System.Lazy`1.Value" />。</exception>
        <related type="Article" href="~/docs/framework/performance/lazy-initialization.md">延迟初始化</related>
      </Docs>
    </Member>
  </Members>
</Type>