<Type Name="Lazy&lt;T&gt;" FullName="System.Lazy&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="18f7acfe9be295d345b133ff0702748156b3ca30" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36429891" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Lazy&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Lazy`1&lt;T&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Lazy`1" />
  <TypeSignature Language="VB.NET" Value="Public Class Lazy(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class Lazy" />
  <TypeSignature Language="F#" Value="type Lazy&lt;'T&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.System_LazyDebugView`1))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="99eaf-101">正在延迟初始化的对象的类型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="99eaf-101">The type of object that is being lazily initialized.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="99eaf-102">提供对延迟初始化的支持。</span>
      <span class="sxs-lookup">
        <span data-stu-id="99eaf-102">Provides support for lazy initialization.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99eaf-103">使用延迟初始化来推迟创建大或占用大量资源的对象或资源密集型任务，执行，尤其是在此类创建或执行过程中可能不发生程序的生存期内存时。</span><span class="sxs-lookup"><span data-stu-id="99eaf-103">Use lazy initialization to defer the creation of a large or resource-intensive object, or the execution of a resource-intensive task, particularly when such creation or execution might not occur during the lifetime of the program.</span></span>  
  
 <span data-ttu-id="99eaf-104">若要准备对延迟初始化，你创建的实例<xref:System.Lazy%601>。</span><span class="sxs-lookup"><span data-stu-id="99eaf-104">To prepare for lazy initialization, you create an instance of <xref:System.Lazy%601>.</span></span> <span data-ttu-id="99eaf-105">参数的类型<xref:System.Lazy%601>你创建的对象指定你想要延迟初始化的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="99eaf-105">The type argument of the <xref:System.Lazy%601> object that you create specifies the type of the object that you want to initialize lazily.</span></span> <span data-ttu-id="99eaf-106">构造函数用于创建<xref:System.Lazy%601>对象确定特性的初始化。</span><span class="sxs-lookup"><span data-stu-id="99eaf-106">The constructor that you use to create the <xref:System.Lazy%601> object determines the characteristics of the initialization.</span></span> <span data-ttu-id="99eaf-107">首次访问 <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> 属性时出现延迟初始化。</span><span class="sxs-lookup"><span data-stu-id="99eaf-107">Lazy initialization occurs the first time the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property is accessed.</span></span>  
  
 <span data-ttu-id="99eaf-108">在大多数情况下，选择一个构造函数取决于两个问题的回答：</span><span class="sxs-lookup"><span data-stu-id="99eaf-108">In most cases, choosing a constructor depends on your answers to two questions:</span></span>  
  
-   <span data-ttu-id="99eaf-109">将从多个线程访问的延迟初始化的对象？</span><span class="sxs-lookup"><span data-stu-id="99eaf-109">Will the lazily initialized object be accessed from more than one thread?</span></span> <span data-ttu-id="99eaf-110">如果是这样，<xref:System.Lazy%601>对象可能在任何线程上创建它。</span><span class="sxs-lookup"><span data-stu-id="99eaf-110">If so, the <xref:System.Lazy%601> object might create it on any thread.</span></span> <span data-ttu-id="99eaf-111">你可以使用其默认行为是创建一个线程安全的简单构造函数之一<xref:System.Lazy%601>对象，因此只有一个实例惰式实例化的对象创建无论多少个线程尝试访问它。</span><span class="sxs-lookup"><span data-stu-id="99eaf-111">You can use one of the simple constructors whose default behavior is to create a thread-safe <xref:System.Lazy%601> object, so that only one instance of the lazily instantiated object is created no matter how many threads try to access it.</span></span> <span data-ttu-id="99eaf-112">若要创建<xref:System.Lazy%601>不是线程安全的对象，你必须使用构造函数，可用于指定不具有线程安全性。</span><span class="sxs-lookup"><span data-stu-id="99eaf-112">To create a <xref:System.Lazy%601> object that is not thread safe, you must use a constructor that enables you to specify no thread safety.</span></span>  
  
    > [!CAUTION]
    >  <span data-ttu-id="99eaf-113">使<xref:System.Lazy%601>对象线程安全不保护延迟初始化的对象。</span><span class="sxs-lookup"><span data-stu-id="99eaf-113">Making the <xref:System.Lazy%601> object thread safe does not protect the lazily initialized object.</span></span> <span data-ttu-id="99eaf-114">如果多个线程可以访问的延迟初始化的对象，其属性和方法必须进行多线程访问的安全。</span><span class="sxs-lookup"><span data-stu-id="99eaf-114">If multiple threads can access the lazily initialized object, you must make its properties and methods safe for multithreaded access.</span></span>  
  
-   <span data-ttu-id="99eaf-115">延迟初始化是否需要大量的代码，或延迟初始化的对象是否具有默认构造函数不需要并不会引发异常的所有内容？</span><span class="sxs-lookup"><span data-stu-id="99eaf-115">Does lazy initialization require a lot of code, or does the lazily initialized object have a default constructor that does everything you need and doesn't throw exceptions?</span></span> <span data-ttu-id="99eaf-116">如果你需要编写初始化代码或异常需要进行处理，则使用采用的工厂方法的构造函数之一。</span><span class="sxs-lookup"><span data-stu-id="99eaf-116">If you need to write initialization code or if exceptions need to be handled, use one of the constructors that takes a factory method.</span></span> <span data-ttu-id="99eaf-117">编写在工厂方法的初始化代码。</span><span class="sxs-lookup"><span data-stu-id="99eaf-117">Write your initialization code in the factory method.</span></span>  
  
 <span data-ttu-id="99eaf-118">下表显示哪个构造函数，若要选择，基于这两个因素：</span><span class="sxs-lookup"><span data-stu-id="99eaf-118">The following table shows which constructor to choose, based on these two factors:</span></span>  
  
|<span data-ttu-id="99eaf-119">通过将访问对象</span><span class="sxs-lookup"><span data-stu-id="99eaf-119">Object will be accessed by</span></span>|<span data-ttu-id="99eaf-120">如果不不需要任何初始化代码 （默认构造函数） 使用</span><span class="sxs-lookup"><span data-stu-id="99eaf-120">If no initialization code is required (default constructor), use</span></span>|<span data-ttu-id="99eaf-121">如果初始化代码是必需的使用</span><span class="sxs-lookup"><span data-stu-id="99eaf-121">If initialization code is required, use</span></span>|  
|--------------------------------|------------------------------------------------------------------------|---------------------------------------------|  
|<span data-ttu-id="99eaf-122">多个线程</span><span class="sxs-lookup"><span data-stu-id="99eaf-122">Multiple threads</span></span>|<xref:System.Lazy%601.%23ctor>|<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>|  
|<span data-ttu-id="99eaf-123">一个线程</span><span class="sxs-lookup"><span data-stu-id="99eaf-123">One thread</span></span>|<span data-ttu-id="99eaf-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> 与`isThreadSafe`设置为`false`。</span><span class="sxs-lookup"><span data-stu-id="99eaf-124"><xref:System.Lazy%601.%23ctor%28System.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|<span data-ttu-id="99eaf-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> 与`isThreadSafe`设置为`false`。</span><span class="sxs-lookup"><span data-stu-id="99eaf-125"><xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> with `isThreadSafe` set to `false`.</span></span>|  
  
 <span data-ttu-id="99eaf-126">Lambda 表达式可用于指定的工厂方法。</span><span class="sxs-lookup"><span data-stu-id="99eaf-126">You can use a lambda expression to specify the factory method.</span></span> <span data-ttu-id="99eaf-127">这会将所有初始化代码都保持在一个位置。</span><span class="sxs-lookup"><span data-stu-id="99eaf-127">This keeps all the initialization code in one place.</span></span> <span data-ttu-id="99eaf-128">Lambda 表达式捕获的上下文，包括向延迟初始化的对象的构造函数传递任何自变量。</span><span class="sxs-lookup"><span data-stu-id="99eaf-128">The lambda expression captures the context, including any arguments you pass to the lazily initialized object's constructor.</span></span>  
  
 <span data-ttu-id="99eaf-129">**异常缓存**使用工厂方法时，会缓存异常。</span><span class="sxs-lookup"><span data-stu-id="99eaf-129">**Exception caching** When you use factory methods, exceptions are cached.</span></span> <span data-ttu-id="99eaf-130">也就是说，如果该工厂方法将引发异常第一个时间线程试图访问<xref:System.Lazy%601.Value%2A>属性<xref:System.Lazy%601>对象，在每次后续尝试上引发同一异常。</span><span class="sxs-lookup"><span data-stu-id="99eaf-130">That is, if the factory method throws an exception the first time a thread tries to access the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> object, the same exception is thrown on every subsequent attempt.</span></span> <span data-ttu-id="99eaf-131">这样可确保对每个调用<xref:System.Lazy%601.Value%2A>属性产生的效果相同，并可避免细微不同的线程都获取不同的结果时可能引发的错误。</span><span class="sxs-lookup"><span data-stu-id="99eaf-131">This ensures that every call to the <xref:System.Lazy%601.Value%2A> property produces the same result and avoids subtle errors that might arise if different threads get different results.</span></span> <span data-ttu-id="99eaf-132"><xref:System.Lazy%601>代表实际`T`，否则是否已初始化在某些早期的时候，通常在启动过程。</span><span class="sxs-lookup"><span data-stu-id="99eaf-132">The <xref:System.Lazy%601> stands in for an actual `T` that otherwise would have been initialized at some earlier point, usually during startup.</span></span> <span data-ttu-id="99eaf-133">故障时该早期点是通常致命错误。</span><span class="sxs-lookup"><span data-stu-id="99eaf-133">A failure at that earlier point is usually fatal.</span></span> <span data-ttu-id="99eaf-134">如果没有可恢复的失败的可能，我们建议生成的重试逻辑到初始化例程 （在本例中的工厂方法），就像你不使用延迟初始化。</span><span class="sxs-lookup"><span data-stu-id="99eaf-134">If there is a potential for a recoverable failure, we recommend that you build the retry logic into the initialization routine (in this case, the factory method), just as you would if you weren’t using lazy initialization.</span></span>  
  
 <span data-ttu-id="99eaf-135">**与锁定的替代项**在某些情况下，你可能想要避免的开销<xref:System.Lazy%601>对象的默认锁定行为。</span><span class="sxs-lookup"><span data-stu-id="99eaf-135">**Alternative to locking** In certain situations, you might want to avoid the overhead of the <xref:System.Lazy%601> object's default locking behavior.</span></span> <span data-ttu-id="99eaf-136">在极少数情况下，可能有可能死锁。</span><span class="sxs-lookup"><span data-stu-id="99eaf-136">In rare situations, there might be a potential for deadlocks.</span></span> <span data-ttu-id="99eaf-137">在这种情况下，你可以使用<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>或<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>构造函数，并指定<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="99eaf-137">In such cases, you can use the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor, and specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="99eaf-138">这使<xref:System.Lazy%601>对象以创建多个线程的每个延迟初始化的对象的副本，如果线程调用<xref:System.Lazy%601.Value%2A>属性同时。</span><span class="sxs-lookup"><span data-stu-id="99eaf-138">This enables the <xref:System.Lazy%601> object to create a copy of the lazily initialized object on each of several threads if the threads call the <xref:System.Lazy%601.Value%2A> property simultaneously.</span></span> <span data-ttu-id="99eaf-139"><xref:System.Lazy%601>对象，可以确保所有线程使用延迟初始化的对象的同一个实例，并放弃未使用的实例。</span><span class="sxs-lookup"><span data-stu-id="99eaf-139">The <xref:System.Lazy%601> object ensures that all threads use the same instance of the lazily initialized object and discards the instances that are not used.</span></span> <span data-ttu-id="99eaf-140">因此，减少了锁定开销的成本是程序有时可能会创建并放弃的高开销对象的额外副本。</span><span class="sxs-lookup"><span data-stu-id="99eaf-140">Thus, the cost of reducing the locking overhead is that your program might sometimes create and discard extra copies of an expensive object.</span></span> <span data-ttu-id="99eaf-141">在大多数情况下，不太可能。</span><span class="sxs-lookup"><span data-stu-id="99eaf-141">In most cases, this is unlikely.</span></span> <span data-ttu-id="99eaf-142">有关示例<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>和<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>构造函数演示此行为。</span><span class="sxs-lookup"><span data-stu-id="99eaf-142">The examples for the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors demonstrate this behavior.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="99eaf-143">当指定<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>，永远不会缓存异常，即使指定的工厂方法。</span><span class="sxs-lookup"><span data-stu-id="99eaf-143">When you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, exceptions are never cached, even if you specify a factory method.</span></span>  
  
 <span data-ttu-id="99eaf-144">**等效的构造函数**另外还启用了利用<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>、<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>和<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>构造函数可以复制其他构造函数的功能。</span><span class="sxs-lookup"><span data-stu-id="99eaf-144">**Equivalent constructors** In addition to enabling the use of <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> and <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructors can duplicate the functionality of the other constructors.</span></span> <span data-ttu-id="99eaf-145">下表显示生成等效的行为的参数值。</span><span class="sxs-lookup"><span data-stu-id="99eaf-145">The following table shows the parameter values that produce equivalent behavior.</span></span>  
  
|<span data-ttu-id="99eaf-146">若要创建<xref:System.Lazy%601>对象，该对象</span><span class="sxs-lookup"><span data-stu-id="99eaf-146">To create a <xref:System.Lazy%601> object that is</span></span>|<span data-ttu-id="99eaf-147">构造函数具有`LazyThreadSafetyMode``mode`参数，设置`mode`到</span><span class="sxs-lookup"><span data-stu-id="99eaf-147">For constructors that have a `LazyThreadSafetyMode` `mode` parameter, set `mode` to</span></span>|<span data-ttu-id="99eaf-148">构造函数具有一个布尔值`isThreadSafe`参数，设置`isThreadSafe`到</span><span class="sxs-lookup"><span data-stu-id="99eaf-148">For constructors that have a Boolean `isThreadSafe` parameter, set `isThreadSafe` to</span></span>|<span data-ttu-id="99eaf-149">不带任何线程安全参数的构造函数</span><span class="sxs-lookup"><span data-stu-id="99eaf-149">For constructors with no thread safety parameters</span></span>|  
|-------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------|-------------------------------------------------------|  
|<span data-ttu-id="99eaf-150">完全线程安全的;使用锁定来确保只有一个线程初始化的值。</span><span class="sxs-lookup"><span data-stu-id="99eaf-150">Fully thread safe; uses locking to ensure that only one thread initializes the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication>|`true`|<span data-ttu-id="99eaf-151">所有此类构造函数都完全是线程安全。</span><span class="sxs-lookup"><span data-stu-id="99eaf-151">All such constructors are fully thread safe.</span></span>|  
|<span data-ttu-id="99eaf-152">非线程安全。</span><span class="sxs-lookup"><span data-stu-id="99eaf-152">Not thread safe.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.None>|`false`|<span data-ttu-id="99eaf-153">不适用。</span><span class="sxs-lookup"><span data-stu-id="99eaf-153">Not applicable.</span></span>|  
|<span data-ttu-id="99eaf-154">完全线程安全的;若要初始化值的线程争用。</span><span class="sxs-lookup"><span data-stu-id="99eaf-154">Fully thread safe; threads race to initialize the value.</span></span>|<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly>|<span data-ttu-id="99eaf-155">不适用。</span><span class="sxs-lookup"><span data-stu-id="99eaf-155">Not applicable.</span></span>|<span data-ttu-id="99eaf-156">不适用。</span><span class="sxs-lookup"><span data-stu-id="99eaf-156">Not applicable.</span></span>|  
  
 <span data-ttu-id="99eaf-157">**其他功能**使用有关的信息<xref:System.Lazy%601>与线程静态字段或属性的后备存储，请参阅[延迟初始化](~/docs/framework/performance/lazy-initialization.md)。</span><span class="sxs-lookup"><span data-stu-id="99eaf-157">**Other capabilities** For information about the use of <xref:System.Lazy%601> with thread-static fields, or as the backing store for properties, see [Lazy Initialization](~/docs/framework/performance/lazy-initialization.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99eaf-158">下面的示例演示了利用<xref:System.Lazy%601>类以提供与从多个线程访问的延迟初始化。</span><span class="sxs-lookup"><span data-stu-id="99eaf-158">The following example demonstrates the use of the <xref:System.Lazy%601> class to provide lazy initialization with access from multiple threads.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="99eaf-159">该示例使用<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="99eaf-159">The example uses the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="99eaf-160">它还演示如何使用<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>构造函数 (指定`true`为`isThreadSafe`) 和<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>构造函数 (指定<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>为`mode`)。</span><span class="sxs-lookup"><span data-stu-id="99eaf-160">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="99eaf-161">若要切换到另一个构造函数，只需更改的构造函数已被注释掉。</span><span class="sxs-lookup"><span data-stu-id="99eaf-161">To switch to a different constructor, just change which constructors are commented out.</span></span>  
>   
>  <span data-ttu-id="99eaf-162">有关演示异常的示例，缓存使用的相同的构造函数，请参阅<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="99eaf-162">For an example that demonstrates exception caching using the same constructors, see the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="99eaf-163">此示例定义一个将由多个线程之一延迟初始化的 `LargeObject` 类。</span><span class="sxs-lookup"><span data-stu-id="99eaf-163">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="99eaf-164">代码的四个主要部分说明的初始值设定项、 的工厂方法、 实际初始化和的构造函数创建`LargeObject`类，该类在创建对象时显示一条消息。</span><span class="sxs-lookup"><span data-stu-id="99eaf-164">The four key sections of code illustrate the creation of the initializer, the factory method, the actual initialization, and the constructor of the `LargeObject` class, which displays a message when the object is created.</span></span> <span data-ttu-id="99eaf-165">在 `Main` 方法的开头，该示例为 `LargeObject` 创建线程安全的延迟初始值: </span><span class="sxs-lookup"><span data-stu-id="99eaf-165">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="99eaf-166">工厂方法演示如何创建该对象，其占位符用于进一步初始化：</span><span class="sxs-lookup"><span data-stu-id="99eaf-166">The factory method shows the creation of the object, with a placeholder for further initialization:</span></span>  
  
 [!code-csharp[System.Lazy\`1#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="99eaf-167">请注意前, 两个代码段可以合并通过使用 lambda 函数，如下所示：</span><span class="sxs-lookup"><span data-stu-id="99eaf-167">Note that the first two code sections could be combined by using a lambda function, as shown here:</span></span>  
  
 [!code-csharp[System.Lazy\`1#InitWithLambda](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/lambda.cs#initwithlambda)]
 [!code-vb[System.Lazy\`1#InitWithLambda](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/lambda.vb#initwithlambda)]  
  
 <span data-ttu-id="99eaf-168">该示例暂停，以指示不确定内可能需要延迟初始化发生之前。</span><span class="sxs-lookup"><span data-stu-id="99eaf-168">The example pauses, to indicate that an indeterminate period may elapse before lazy initialization occurs.</span></span> <span data-ttu-id="99eaf-169">当你按**Enter**密钥，该示例创建并启动三个线程。</span><span class="sxs-lookup"><span data-stu-id="99eaf-169">When you press the **Enter** key, the example creates and starts three threads.</span></span> <span data-ttu-id="99eaf-170">`ThreadProc`由所有三个线程调用的方法<xref:System.Lazy%601.Value%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="99eaf-170">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property.</span></span> <span data-ttu-id="99eaf-171">第一次发生这种情况，`LargeObject`创建实例：</span><span class="sxs-lookup"><span data-stu-id="99eaf-171">The first time this happens, the `LargeObject` instance is created:</span></span>  
  
 [!code-csharp[System.Lazy\`1#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="99eaf-172">构造函数`LargeObject`类，该类包含代码的最后一个主要部分，显示一条消息，将记录初始化线程的标识。</span><span class="sxs-lookup"><span data-stu-id="99eaf-172">The constructor of the `LargeObject` class, which includes the last key section of code, displays a message and records the identity of the initializing thread.</span></span> <span data-ttu-id="99eaf-173">完整代码列表末尾显示来自程序的输出。</span><span class="sxs-lookup"><span data-stu-id="99eaf-173">The output from the program appears at the end of the full code listing.</span></span>  
  
 [!code-csharp[System.Lazy\`1#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#largector)]  
  
> [!NOTE]
>  <span data-ttu-id="99eaf-174">为简单起见，此示例使用 <xref:System.Lazy%601> 的全局实例，所有方法都是 `static` (在 Visual Basic 中`Shared` )。</span><span class="sxs-lookup"><span data-stu-id="99eaf-174">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="99eaf-175">使用延迟初始化没有要求。</span><span class="sxs-lookup"><span data-stu-id="99eaf-175">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1/vb/example.vb#all)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="99eaf-176">默认情况下，所有公共成员和受保护成员<see cref="T:System.Lazy`1" />类都是线程安全的可能会从多个线程同时使用。</span>
      <span class="sxs-lookup">
        <span data-stu-id="99eaf-176">By default, all public and protected members of the <see cref="T:System.Lazy`1" /> class are thread safe and may be used concurrently from multiple threads.</span>
      </span>
      <span data-ttu-id="99eaf-177">（可选） 和每个实例，使用对该类型的构造函数的参数，则可能会删除这些线程安全保证。</span>
      <span class="sxs-lookup">
        <span data-stu-id="99eaf-177">These thread-safety guarantees may be removed optionally and per instance, using parameters to the type's constructors.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="99eaf-178">初始化 <see cref="T:System.Lazy`1" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-178">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="99eaf-179">初始化 <see cref="T:System.Lazy`1" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-179">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
          <span data-ttu-id="99eaf-180">当发生延迟初始化时，使用目标类型的默认构造函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-180">When lazy initialization occurs, the default constructor of the target type is used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99eaf-181">使用此构造函数创建的实例可能从多个线程同时使用。</span><span class="sxs-lookup"><span data-stu-id="99eaf-181">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="99eaf-182">线程安全模式的<xref:System.Lazy%601>使用此构造函数初始化的实例是<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="99eaf-182">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="99eaf-183">线程安全模式描述的行为，当多个线程尝试初始化<xref:System.Lazy%601>实例。</span><span class="sxs-lookup"><span data-stu-id="99eaf-183">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="99eaf-184">A<xref:System.Lazy%601>使用此构造函数创建的实例不会缓存异常。</span><span class="sxs-lookup"><span data-stu-id="99eaf-184">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="99eaf-185">有关更多信息，请参见 <xref:System.Lazy%601> 类或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 枚举。</span><span class="sxs-lookup"><span data-stu-id="99eaf-185">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99eaf-186">下面的示例演示如何使用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="99eaf-186">The following example demonstrates the use of this constructor.</span></span> <span data-ttu-id="99eaf-187">它还演示如何使用<xref:System.Lazy%601.%23ctor%28System.Boolean%29>构造函数 (指定`true`为`isThreadSafe`) 和<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>构造函数 (指定<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>为`mode`)。</span><span class="sxs-lookup"><span data-stu-id="99eaf-187">It also illustrates the use of the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="99eaf-188">若要切换到另一个构造函数，只需更改的构造函数已被注释掉。</span><span class="sxs-lookup"><span data-stu-id="99eaf-188">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="99eaf-189">此示例定义一个将由多个线程之一延迟初始化的 `LargeObject` 类。</span><span class="sxs-lookup"><span data-stu-id="99eaf-189">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="99eaf-190">在此示例中的两个密钥行是代码的初始值设定项和实际初始化的创建。</span><span class="sxs-lookup"><span data-stu-id="99eaf-190">The two key lines of code in this example are the creation of the initializer and the actual initialization.</span></span> <span data-ttu-id="99eaf-191">在 `Main` 方法的开头，该示例为 `LargeObject` 创建线程安全的延迟初始值: </span><span class="sxs-lookup"><span data-stu-id="99eaf-191">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctor#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="99eaf-192">该示例创建并启动阻止的三个线程<xref:System.Threading.ManualResetEvent>对象，以便该示例可以在一次释放线程。</span><span class="sxs-lookup"><span data-stu-id="99eaf-192">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="99eaf-193">`ThreadProc`由所有三个线程调用的方法<xref:System.Lazy%601.Value%2A>属性来获取`LargeObject`实例：</span><span class="sxs-lookup"><span data-stu-id="99eaf-193">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctor#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="99eaf-194"><xref:System.Lazy%601>类提供锁定，以便只有一个线程能够创建`LargeObject`实例。</span><span class="sxs-lookup"><span data-stu-id="99eaf-194">The <xref:System.Lazy%601> class provides locking, so that only one thread is allowed to create the `LargeObject` instance.</span></span> <span data-ttu-id="99eaf-195">示例演示了所有线程均都获取的相同实例。</span><span class="sxs-lookup"><span data-stu-id="99eaf-195">The example demonstrates that the other threads all get the same instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="99eaf-196">为简单起见，此示例使用 <xref:System.Lazy%601> 的全局实例，所有方法都是 `static` (在 Visual Basic 中`Shared` )。</span><span class="sxs-lookup"><span data-stu-id="99eaf-196">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="99eaf-197">使用延迟初始化没有要求。</span><span class="sxs-lookup"><span data-stu-id="99eaf-197">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctor#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctor/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctor#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctor/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; isThreadSafe" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isThreadSafe">
          <span data-ttu-id="99eaf-198">
            <see langword="true" /> 表示此示例可由多个线程同时使用；<see langword="false" /> 表示此实例一次只能由一个线程使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-198">
              <see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make the instance usable by only one thread at a time.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="99eaf-199">初始化 <see cref="T:System.Lazy`1" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-199">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
          <span data-ttu-id="99eaf-200">当延迟初始化发生时，将使用目标类型的默认构造函数和指定初始化模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-200">When lazy initialization occurs, the default constructor of the target type and the specified initialization mode are used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99eaf-201">线程安全模式的<xref:System.Lazy%601>使用此构造函数初始化的实例是<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>如果`isThreadSafe`是`true`; 否则为的模式是<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="99eaf-201">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="99eaf-202">线程安全模式描述的行为，当多个线程尝试初始化<xref:System.Lazy%601>实例。</span><span class="sxs-lookup"><span data-stu-id="99eaf-202">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="99eaf-203">若要指定<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>模式，请使用<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>或<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="99eaf-203">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="99eaf-204">A<xref:System.Lazy%601>使用此构造函数创建的实例不会缓存异常。</span><span class="sxs-lookup"><span data-stu-id="99eaf-204">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="99eaf-205">有关更多信息，请参见 <xref:System.Lazy%601> 类或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 枚举。</span><span class="sxs-lookup"><span data-stu-id="99eaf-205">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99eaf-206">下面的示例演示如何将此构造函数来创建不是线程安全的用于对延迟初始化的对象的所有访问同一线程都出现的位置的方案的延迟初始值设定项。</span><span class="sxs-lookup"><span data-stu-id="99eaf-206">The following example demonstrates the use of this constructor to create a lazy initializer that is not thread safe, for scenarios where all access to the lazily initialized object occurs on the same thread.</span></span> <span data-ttu-id="99eaf-207">它还演示如何使用<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>构造函数 (指定<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>为`mode`。</span><span class="sxs-lookup"><span data-stu-id="99eaf-207">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`.</span></span> <span data-ttu-id="99eaf-208">若要切换到另一个构造函数，只需更改哪个构造函数已被注释掉。</span><span class="sxs-lookup"><span data-stu-id="99eaf-208">To switch to a different constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="99eaf-209">有关演示如何在多线程方案中使用此构造函数的代码 (指定`true`为`isThreadSafe`)，请参阅示例<xref:System.Lazy%601.%23ctor>构造函数。</span><span class="sxs-lookup"><span data-stu-id="99eaf-209">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="99eaf-210">该示例定义了`LargeObject`将延迟初始化的类。</span><span class="sxs-lookup"><span data-stu-id="99eaf-210">The example defines a `LargeObject` class that will be initialized lazily.</span></span> <span data-ttu-id="99eaf-211">在`Main`方法，该示例创建<xref:System.Lazy%601>实例，然后暂停。</span><span class="sxs-lookup"><span data-stu-id="99eaf-211">In the `Main` method, the example creates a <xref:System.Lazy%601> instance and then pauses.</span></span> <span data-ttu-id="99eaf-212">当你按**Enter**密钥，该示例访问<xref:System.Lazy%601.Value%2A>属性<xref:System.Lazy%601>实例，这会导致发生的初始化。</span><span class="sxs-lookup"><span data-stu-id="99eaf-212">When you press the **Enter** key, the example accesses the <xref:System.Lazy%601.Value%2A> property of the <xref:System.Lazy%601> instance, which causes initialization to occur.</span></span> <span data-ttu-id="99eaf-213">构造函数`LargeObject`类显示一条控制台消息。</span><span class="sxs-lookup"><span data-stu-id="99eaf-213">The constructor of the `LargeObject` class displays a console message.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="99eaf-214">为简单起见，此示例使用 <xref:System.Lazy%601> 的全局实例，所有方法都是 `static` (在 Visual Basic 中`Shared` )。</span><span class="sxs-lookup"><span data-stu-id="99eaf-214">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="99eaf-215">使用延迟初始化没有要求。</span><span class="sxs-lookup"><span data-stu-id="99eaf-215">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; valueFactory" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="valueFactory">
          <span data-ttu-id="99eaf-216">调用用于在需要时生成延迟初始化值的委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-216">The delegate that is invoked to produce the lazily initialized value when it is needed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="99eaf-217">初始化 <see cref="T:System.Lazy`1" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-217">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
          <span data-ttu-id="99eaf-218">出现迟缓初始化时，将使用指定的初始化函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-218">When lazy initialization occurs, the specified initialization function is used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99eaf-219">使用此构造函数创建的实例可能从多个线程同时使用。</span><span class="sxs-lookup"><span data-stu-id="99eaf-219">An instance that is created with this constructor may be used concurrently from multiple threads.</span></span>  
  
 <span data-ttu-id="99eaf-220">线程安全模式的<xref:System.Lazy%601>使用此构造函数初始化的实例是<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="99eaf-220">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>.</span></span> <span data-ttu-id="99eaf-221">线程安全模式描述的行为，当多个线程尝试初始化<xref:System.Lazy%601>实例。</span><span class="sxs-lookup"><span data-stu-id="99eaf-221">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="99eaf-222">引发的异常：`valueFactory`进行缓存。</span><span class="sxs-lookup"><span data-stu-id="99eaf-222">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="99eaf-223">有关更多信息，请参见 <xref:System.Lazy%601> 类或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 枚举。</span><span class="sxs-lookup"><span data-stu-id="99eaf-223">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99eaf-224">下面的示例演示如何使用此构造函数可提供与异常缓存的延迟初始化。</span><span class="sxs-lookup"><span data-stu-id="99eaf-224">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching.</span></span> <span data-ttu-id="99eaf-225">它还演示如何使用<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>构造函数 (指定`true`为`isThreadSafe`) 和<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>构造函数 (指定<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>为`mode`)。</span><span class="sxs-lookup"><span data-stu-id="99eaf-225">It also demonstrates the use of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor (specifying `true` for `isThreadSafe`) and the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="99eaf-226">若要切换到另一个构造函数，只需更改的构造函数已被注释掉。</span><span class="sxs-lookup"><span data-stu-id="99eaf-226">To switch to a different constructor, just change which constructors are commented out.</span></span>  
  
 <span data-ttu-id="99eaf-227">此示例定义一个将由多个线程之一延迟初始化的 `LargeObject` 类。</span><span class="sxs-lookup"><span data-stu-id="99eaf-227">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="99eaf-228">代码的三个主要部分说明的初始值设定项、 实际初始化和的构造函数创建`LargeObject`类，该类演示异常缓存。</span><span class="sxs-lookup"><span data-stu-id="99eaf-228">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="99eaf-229">在 `Main` 方法的开头，该示例为 `LargeObject` 创建线程安全的延迟初始值: </span><span class="sxs-lookup"><span data-stu-id="99eaf-229">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFunc#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="99eaf-230">该示例创建并启动三个线程。</span><span class="sxs-lookup"><span data-stu-id="99eaf-230">The example creates and starts three threads.</span></span> <span data-ttu-id="99eaf-231">`ThreadProc`由所有三个线程调用的方法<xref:System.Lazy%601.Value%2A>属性来获取`LargeObject`实例：</span><span class="sxs-lookup"><span data-stu-id="99eaf-231">The `ThreadProc` method that's used by all three threads calls the <xref:System.Lazy%601.Value%2A> property to get the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFunc#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="99eaf-232">构造函数中`LargeObject`类，代码的第三个主要部分，将引发异常的第一个时间`LargeObject`实例创建，但此后允许创建实例发生：</span><span class="sxs-lookup"><span data-stu-id="99eaf-232">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFunc#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#largector)]  
  
 <span data-ttu-id="99eaf-233">运行示例时，尝试创建的实例的第一个线程`LargeObject`捕获将失败，并且该异常。</span><span class="sxs-lookup"><span data-stu-id="99eaf-233">When the example is run, the first thread that tries to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="99eaf-234">你可能希望在下一个线程将成功创建实例，但<xref:System.Lazy%601>对象缓存了异常。</span><span class="sxs-lookup"><span data-stu-id="99eaf-234">You might expect that the next thread would successfully create an instance, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="99eaf-235">因此，所有三个线程引发异常。</span><span class="sxs-lookup"><span data-stu-id="99eaf-235">Because of this, all three threads throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="99eaf-236">为简单起见，此示例使用 <xref:System.Lazy%601> 的全局实例，所有方法都是 `static` (在 Visual Basic 中`Shared` )。</span><span class="sxs-lookup"><span data-stu-id="99eaf-236">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="99eaf-237">使用延迟初始化没有要求。</span><span class="sxs-lookup"><span data-stu-id="99eaf-237">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFunc#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFunc#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfunc/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="99eaf-238">
            <paramref name="valueFactory" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-238">
              <paramref name="valueFactory" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; mode" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" />
      </Parameters>
      <Docs>
        <param name="mode">
          <span data-ttu-id="99eaf-239">一个枚举值，用于指定线程安全模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-239">One of the enumeration values that specifies the thread safety mode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="99eaf-240">初始化 <see cref="T:System.Lazy`1" /> 类的新实例，其中使用 <paramref name="T" /> 的默认构造函数和指定的线程安全性模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-240">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the default constructor of <paramref name="T" /> and the specified thread-safety mode.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99eaf-241">线程安全模式的<xref:System.Lazy%601>实例描述的行为，当多个线程尝试初始化<xref:System.Lazy%601>实例。</span><span class="sxs-lookup"><span data-stu-id="99eaf-241">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="99eaf-242">A<xref:System.Lazy%601>使用此构造函数创建的实例不会缓存异常。</span><span class="sxs-lookup"><span data-stu-id="99eaf-242">A <xref:System.Lazy%601> instance that is created with this constructor does not cache exceptions.</span></span> <span data-ttu-id="99eaf-243">有关更多信息，请参见 <xref:System.Lazy%601> 类或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 枚举。</span><span class="sxs-lookup"><span data-stu-id="99eaf-243">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99eaf-244">下面的示例演示如何将此构造函数来创建使多个线程能够争用惰式创建的对象的延迟初始值设定项。</span><span class="sxs-lookup"><span data-stu-id="99eaf-244">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="99eaf-245">多个线程可能会成功地创建实例，但所有线程都使用第一次创建的实例。</span><span class="sxs-lookup"><span data-stu-id="99eaf-245">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="99eaf-246">有关示例，演示如何在单线程方案中使用此构造函数 (指定<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>为`mode`)，请参阅<xref:System.Lazy%601.%23ctor%28System.Boolean%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="99eaf-246">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="99eaf-247">有关示例，演示如何使用此构造函数提供锁定而不多线程方案中的争用条件 (指定<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>为`mode`)，请参阅<xref:System.Lazy%601.%23ctor>构造函数。</span><span class="sxs-lookup"><span data-stu-id="99eaf-247">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="99eaf-248">该示例定义了`LargeObject`将由多个线程任何延迟初始化的类。</span><span class="sxs-lookup"><span data-stu-id="99eaf-248">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="99eaf-249">代码的三个主要部分说明创建初始值设定项、 实际初始化和构造函数和终结器`LargeObject`类。</span><span class="sxs-lookup"><span data-stu-id="99eaf-249">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="99eaf-250">开头的`Main`方法，该示例创建<xref:System.Lazy%601>执行的延迟初始化的对象`LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="99eaf-250">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="99eaf-251">该示例创建并启动阻止的三个线程<xref:System.Threading.ManualResetEvent>对象，以便该示例可以在一次释放线程。</span><span class="sxs-lookup"><span data-stu-id="99eaf-251">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="99eaf-252">在`ThreadProc`由所有三个线程，调用的方法<xref:System.Lazy%601.Value%2A>属性创建`LargeObject`实例：</span><span class="sxs-lookup"><span data-stu-id="99eaf-252">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="99eaf-253">因为的构造函数<xref:System.Lazy%601>指定实例<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>，允许所有三个线程创建`LargeObject`实例。</span><span class="sxs-lookup"><span data-stu-id="99eaf-253">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="99eaf-254">通过显示控制台消息，在构造函数和终结器中的示例演示这`LargeObject`类：</span><span class="sxs-lookup"><span data-stu-id="99eaf-254">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="99eaf-255">但是，<xref:System.Lazy%601>对象，可以确保只有一个实例使用的所有线程。</span><span class="sxs-lookup"><span data-stu-id="99eaf-255">However, the <xref:System.Lazy%601> object ensures that only one instance is used by all threads.</span></span> <span data-ttu-id="99eaf-256">示例输出显示所有三个线程使用同一个实例，以及显示其他两个实例可以通过垃圾回收来回收。</span><span class="sxs-lookup"><span data-stu-id="99eaf-256">The output from the example shows that all three threads use the same instance, and also shows that the other two instances can be reclaimed by garbage collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="99eaf-257">为简单起见，此示例使用 <xref:System.Lazy%601> 的全局实例，所有方法都是 `static` (在 Visual Basic 中`Shared` )。</span><span class="sxs-lookup"><span data-stu-id="99eaf-257">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="99eaf-258">使用延迟初始化没有要求。</span><span class="sxs-lookup"><span data-stu-id="99eaf-258">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="99eaf-259">
            <paramref name="mode" /> 包含无效值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-259">
              <paramref name="mode" /> contains an invalid value.</span>
          </span>
        </exception>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(T value);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : 'T -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, bool isThreadSafe) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), isThreadSafe As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, bool isThreadSafe);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * bool -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, isThreadSafe)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="valueFactory">
          <span data-ttu-id="99eaf-260">调用用于在需要时生成延迟初始化值的委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-260">The delegate that is invoked to produce the lazily initialized value when it is needed.</span>
          </span>
        </param>
        <param name="isThreadSafe">
          <span data-ttu-id="99eaf-261">
            <see langword="true" /> 表示此示例可由多个线程同时使用；<see langword="false" /> 表示此实例一次只能由一个线程使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-261">
              <see langword="true" /> to make this instance usable concurrently by multiple threads; <see langword="false" /> to make this instance usable by only one thread at a time.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="99eaf-262">初始化 <see cref="T:System.Lazy`1" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-262">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class.</span>
          </span>
          <span data-ttu-id="99eaf-263">当延迟初始化发生时，将使用指定的初始化函数和初始化模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-263">When lazy initialization occurs, the specified initialization function and initialization mode are used.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99eaf-264">线程安全模式的<xref:System.Lazy%601>使用此构造函数初始化的实例是<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>如果`isThreadSafe`是`true`; 否则为的模式是<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="99eaf-264">The thread safety mode of a <xref:System.Lazy%601> instance that is initialized with this constructor is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> if `isThreadSafe` is `true`; otherwise, the mode is <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>.</span></span> <span data-ttu-id="99eaf-265">线程安全模式描述的行为，当多个线程尝试初始化<xref:System.Lazy%601>实例。</span><span class="sxs-lookup"><span data-stu-id="99eaf-265">The thread safety mode describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="99eaf-266">若要指定<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>模式，请使用<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>或<xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="99eaf-266">To specify the <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> mode, use the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29> or <xref:System.Lazy%601.%23ctor%28System.Threading.LazyThreadSafetyMode%29> constructor.</span></span>  
  
 <span data-ttu-id="99eaf-267">引发的异常：`valueFactory`进行缓存。</span><span class="sxs-lookup"><span data-stu-id="99eaf-267">Exceptions that are thrown by `valueFactory` are cached.</span></span> <span data-ttu-id="99eaf-268">有关更多信息，请参见 <xref:System.Lazy%601> 类或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 枚举。</span><span class="sxs-lookup"><span data-stu-id="99eaf-268">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99eaf-269">下面的示例演示如何使用此构造函数，为缓存，在与单个线程方案中的异常中提供延迟初始化。</span><span class="sxs-lookup"><span data-stu-id="99eaf-269">The following example demonstrates the use of this constructor to provide lazy initialization with exception caching, in a scenario with a single thread.</span></span> <span data-ttu-id="99eaf-270">它还演示如何使用<xref:System.Lazy%601.%23ctor%2A>构造函数 (指定<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>为`mode`)。</span><span class="sxs-lookup"><span data-stu-id="99eaf-270">It also demonstrates the use of the  <xref:System.Lazy%601.%23ctor%2A> constructor (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`).</span></span> <span data-ttu-id="99eaf-271">若要切换到该构造函数，只需更改哪个构造函数已被注释掉。</span><span class="sxs-lookup"><span data-stu-id="99eaf-271">To switch to that constructor, just change which constructor is commented out.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="99eaf-272">有关演示如何在多线程方案中使用此构造函数的代码 (指定`true`为`isThreadSafe`)，请参阅示例<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="99eaf-272">For code that demonstrates how to use this constructor in multithreaded scenarios (specifying `true` for `isThreadSafe`), see the example for the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29> constructor.</span></span>  
  
 <span data-ttu-id="99eaf-273">此示例定义一个将由多个线程之一延迟初始化的 `LargeObject` 类。</span><span class="sxs-lookup"><span data-stu-id="99eaf-273">The example defines a `LargeObject` class that will be initialized lazily by one of several threads.</span></span> <span data-ttu-id="99eaf-274">代码的三个主要部分说明的初始值设定项、 实际初始化和的构造函数创建`LargeObject`类，该类演示异常缓存。</span><span class="sxs-lookup"><span data-stu-id="99eaf-274">The three key sections of code illustrate the creation of the initializer, the actual initialization, and the constructor of the `LargeObject` class, which demonstrates exception caching.</span></span> <span data-ttu-id="99eaf-275">在 `Main` 方法的开头，该示例为 `LargeObject` 创建线程安全的延迟初始值: </span><span class="sxs-lookup"><span data-stu-id="99eaf-275">At the beginning of the `Main` method, the example creates the thread-safe lazy initializer for `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="99eaf-276">在构造函数中，调用`isThreadSafe`参数是`false`，因此<xref:System.Lazy%601>不是线程安全。</span><span class="sxs-lookup"><span data-stu-id="99eaf-276">In the call to the constructor, the `isThreadSafe` parameter is `false`, so the <xref:System.Lazy%601> is not thread safe.</span></span> <span data-ttu-id="99eaf-277">因为它不是线程安全，该示例将调用<xref:System.Lazy%601.Value%2A>三次相同线程上的属性：</span><span class="sxs-lookup"><span data-stu-id="99eaf-277">Because it's not thread safe, the example calls the <xref:System.Lazy%601.Value%2A> property three times on the same thread:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="99eaf-278">构造函数中`LargeObject`类，代码的第三个主要部分，将引发异常的第一个时间`LargeObject`实例创建，但此后允许创建实例发生：</span><span class="sxs-lookup"><span data-stu-id="99eaf-278">In the constructor of the `LargeObject` class, the third key section of code throws an exception the first time a `LargeObject` instance is created, but thereafter allows instance creation to occur:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#largector)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#LargeCtor](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#largector)]  
  
 <span data-ttu-id="99eaf-279">运行示例时，第一次尝试创建的实例`LargeObject`捕获将失败，并且该异常。</span><span class="sxs-lookup"><span data-stu-id="99eaf-279">When the example is run, the first attempt to create an instance of `LargeObject` fails, and the exception is caught.</span></span> <span data-ttu-id="99eaf-280">你所料下, 一次尝试将成功，但<xref:System.Lazy%601>对象缓存了异常。</span><span class="sxs-lookup"><span data-stu-id="99eaf-280">You might expect that the next attempt would succeed, but the <xref:System.Lazy%601> object has cached the exception.</span></span> <span data-ttu-id="99eaf-281">因此，所有三个尝试引发异常。</span><span class="sxs-lookup"><span data-stu-id="99eaf-281">Because of this, all three attempts throw the exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="99eaf-282">为简单起见，此示例使用 <xref:System.Lazy%601> 的全局实例，所有方法都是 `static` (在 Visual Basic 中`Shared` )。</span><span class="sxs-lookup"><span data-stu-id="99eaf-282">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="99eaf-283">使用延迟初始化没有要求。</span><span class="sxs-lookup"><span data-stu-id="99eaf-283">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncBool#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncbool/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="99eaf-284">
            <paramref name="valueFactory" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-284">
              <paramref name="valueFactory" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Lazy (Func&lt;T&gt; valueFactory, System.Threading.LazyThreadSafetyMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;!T&gt; valueFactory, valuetype System.Threading.LazyThreadSafetyMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (valueFactory As Func(Of T), mode As LazyThreadSafetyMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Lazy(Func&lt;T&gt; ^ valueFactory, System::Threading::LazyThreadSafetyMode mode);" />
      <MemberSignature Language="F#" Value="new Lazy&lt;'T&gt; : Func&lt;'T&gt; * System.Threading.LazyThreadSafetyMode -&gt; Lazy&lt;'T&gt;" Usage="new System.Lazy&lt;'T&gt; (valueFactory, mode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="valueFactory" Type="System.Func&lt;T&gt;" />
        <Parameter Name="mode" Type="System.Threading.LazyThreadSafetyMode" />
      </Parameters>
      <Docs>
        <param name="valueFactory">
          <span data-ttu-id="99eaf-285">调用用于在需要时生成延迟初始化值的委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-285">The delegate that is invoked to produce the lazily initialized value when it is needed.</span>
          </span>
        </param>
        <param name="mode">
          <span data-ttu-id="99eaf-286">一个枚举值，用于指定线程安全模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-286">One of the enumeration values that specifies the thread safety mode.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="99eaf-287">初始化 <see cref="T:System.Lazy`1" /> 类的新实例，其中使用指定的初始化函数和线程安全性模式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-287">Initializes a new instance of the <see cref="T:System.Lazy`1" /> class that uses the specified initialization function and thread-safety mode.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99eaf-288">线程安全模式的<xref:System.Lazy%601>实例描述的行为，当多个线程尝试初始化<xref:System.Lazy%601>实例。</span><span class="sxs-lookup"><span data-stu-id="99eaf-288">The thread safety mode of a <xref:System.Lazy%601> instance describes the behavior when multiple threads try to initialize the <xref:System.Lazy%601> instance.</span></span>  
  
 <span data-ttu-id="99eaf-289">引发的异常：`valueFactory`将缓存，除非`mode`是<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="99eaf-289">Exceptions that are thrown by `valueFactory` are cached, unless `mode` is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>.</span></span> <span data-ttu-id="99eaf-290">有关更多信息，请参见 <xref:System.Lazy%601> 类或 <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> 枚举。</span><span class="sxs-lookup"><span data-stu-id="99eaf-290">For more information, see the <xref:System.Lazy%601> class or the <xref:System.Threading.LazyThreadSafetyMode?displayProperty=nameWithType> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="99eaf-291">下面的示例演示如何将此构造函数来创建使多个线程能够争用惰式创建的对象的延迟初始值设定项。</span><span class="sxs-lookup"><span data-stu-id="99eaf-291">The following example demonstrates the use of this constructor to create a lazy initializer that enables multiple threads to race to create an object lazily.</span></span> <span data-ttu-id="99eaf-292">多个线程可能会成功地创建实例，但所有线程都使用第一次创建的实例。</span><span class="sxs-lookup"><span data-stu-id="99eaf-292">Multiple threads might succeed in creating instances, but all threads use the instance that was created first.</span></span> <span data-ttu-id="99eaf-293">此外，该示例演示如何指定时永远不缓存异常<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>，即使由函数而不是惰式创建的类型的默认构造函数执行初始化。</span><span class="sxs-lookup"><span data-stu-id="99eaf-293">In addition, the example demonstrates that exceptions are never cached when you specify <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, even if initialization is performed by a function instead of by the default constructor of the lazily created type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="99eaf-294">有关示例，演示如何在单线程方案中使用此构造函数 (指定<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>为`mode`)，请参阅<xref:System.Lazy%601.%23ctor%28System.Boolean%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="99eaf-294">For an example that demonstrates how to use this constructor in single-threaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor%28System.Boolean%29> constructor.</span></span> <span data-ttu-id="99eaf-295">有关示例，演示如何使用此构造函数提供锁定而不多线程方案中的争用条件 (指定<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>为`mode`)，请参阅<xref:System.Lazy%601.%23ctor>构造函数。</span><span class="sxs-lookup"><span data-stu-id="99eaf-295">For an example that demonstrates how to use this constructor to provide locking instead of race conditions in multithreaded scenarios (specifying <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> for `mode`), see the <xref:System.Lazy%601.%23ctor> constructor.</span></span>  
  
 <span data-ttu-id="99eaf-296">该示例定义了`LargeObject`将由多个线程任何延迟初始化的类。</span><span class="sxs-lookup"><span data-stu-id="99eaf-296">The example defines a `LargeObject` class that will be initialized lazily by any of several threads.</span></span> <span data-ttu-id="99eaf-297">代码的四个主要部分说明创建初始值设定项、 实际初始化、 初始化函数和构造函数和终结器`LargeObject`类。</span><span class="sxs-lookup"><span data-stu-id="99eaf-297">The four key sections of code illustrate the creation of the initializer, the actual initialization, the initialization function, and the constructor and finalizer of the `LargeObject` class.</span></span> <span data-ttu-id="99eaf-298">开头的`Main`方法，该示例创建<xref:System.Lazy%601>执行的延迟初始化的对象`LargeObject`:</span><span class="sxs-lookup"><span data-stu-id="99eaf-298">At the beginning of the `Main` method, the example creates the <xref:System.Lazy%601> object that performs lazy initialization of the `LargeObject`:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#newlazy)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#NewLazy](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#newlazy)]  
  
 <span data-ttu-id="99eaf-299">延迟的初始值设定项使用函数来执行初始化。</span><span class="sxs-lookup"><span data-stu-id="99eaf-299">The lazy initializer uses a function to perform the initialization.</span></span> <span data-ttu-id="99eaf-300">在这种情况下，函数是必需的因为没有默认构造函数`LargeObject`类。</span><span class="sxs-lookup"><span data-stu-id="99eaf-300">In this case, a function is required because there is no default constructor for the `LargeObject` class.</span></span>  
  
 <span data-ttu-id="99eaf-301">该示例创建并启动阻止的三个线程<xref:System.Threading.ManualResetEvent>对象，以便该示例可以在一次释放线程。</span><span class="sxs-lookup"><span data-stu-id="99eaf-301">The example creates and starts three threads that block on a <xref:System.Threading.ManualResetEvent> object, so that the example can release the threads all at once.</span></span> <span data-ttu-id="99eaf-302">在`ThreadProc`由所有三个线程，调用的方法<xref:System.Lazy%601.Value%2A>属性创建`LargeObject`实例：</span><span class="sxs-lookup"><span data-stu-id="99eaf-302">In the `ThreadProc` method that's used by all three threads, calling the <xref:System.Lazy%601.Value%2A> property creates the `LargeObject` instance:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#valueprop)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#ValueProp](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#valueprop)]  
  
 <span data-ttu-id="99eaf-303">在代码的第三个主要部分，将调用延迟初始化函数来创建`LargeObject`实例。</span><span class="sxs-lookup"><span data-stu-id="99eaf-303">In the third key section of code, the lazy initialization function is called to create the `LargeObject` instance.</span></span> <span data-ttu-id="99eaf-304">该函数将引发异常第一次调用时：</span><span class="sxs-lookup"><span data-stu-id="99eaf-304">The function throws an exception the first time it's called:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#factoryfunc)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#FactoryFunc](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#factoryfunc)]  
  
 <span data-ttu-id="99eaf-305">与任何其他<xref:System.Threading.LazyThreadSafetyMode>设置，就将缓存初始化函数中未经处理的异常。</span><span class="sxs-lookup"><span data-stu-id="99eaf-305">With any other <xref:System.Threading.LazyThreadSafetyMode> setting, an unhandled exception in the initialization function would be cached.</span></span> <span data-ttu-id="99eaf-306">但是，<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>取消异常缓存。</span><span class="sxs-lookup"><span data-stu-id="99eaf-306">However, <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType> suppresses exception caching.</span></span> <span data-ttu-id="99eaf-307">示例输出所演示的后续尝试初始化该对象成功。</span><span class="sxs-lookup"><span data-stu-id="99eaf-307">The output from the example demonstrates that a subsequent attempt to initialize the object succeeds.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="99eaf-308">后，该值指示其他线程已成功初始化该对象的消息通常出现该异常消息。</span><span class="sxs-lookup"><span data-stu-id="99eaf-308">The exception message usually appears after messages indicating that other threads have successfully initialized the object.</span></span> <span data-ttu-id="99eaf-309">这是由于延迟引起引发和捕获异常。</span><span class="sxs-lookup"><span data-stu-id="99eaf-309">This is because of the delay introduced by throwing and catching the exception.</span></span>  
  
 <span data-ttu-id="99eaf-310">因为的构造函数<xref:System.Lazy%601>指定实例<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>，允许所有三个线程创建`LargeObject`实例。</span><span class="sxs-lookup"><span data-stu-id="99eaf-310">Because the constructor for the <xref:System.Lazy%601> instance specified <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, all three threads are allowed to create `LargeObject` instances.</span></span> <span data-ttu-id="99eaf-311">通过显示控制台消息，在构造函数和终结器中的示例演示这`LargeObject`类：</span><span class="sxs-lookup"><span data-stu-id="99eaf-311">The example demonstrates this by displaying console messages in the constructor and in the finalizer of the `LargeObject` class:</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#ctorfinalizer)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#CtorFinalizer](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#ctorfinalizer)]  
  
 <span data-ttu-id="99eaf-312"><xref:System.Lazy%601>对象，可以确保只有一个实例使用 （除了其中初始化函数引发异常的线程） 的所有线程。</span><span class="sxs-lookup"><span data-stu-id="99eaf-312">The <xref:System.Lazy%601> object ensures that only one instance is used by all threads (except the thread where the initialization function throws an exception).</span></span> <span data-ttu-id="99eaf-313">示例输出演示了此过程。</span><span class="sxs-lookup"><span data-stu-id="99eaf-313">The output from the example shows this.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="99eaf-314">为简单起见，此示例使用 <xref:System.Lazy%601> 的全局实例，所有方法都是 `static` (在 Visual Basic 中`Shared` )。</span><span class="sxs-lookup"><span data-stu-id="99eaf-314">For simplicity, this example uses a global instance of <xref:System.Lazy%601>, and all the methods are `static` (`Shared` in Visual Basic).</span></span> <span data-ttu-id="99eaf-315">使用延迟初始化没有要求。</span><span class="sxs-lookup"><span data-stu-id="99eaf-315">These are not requirements for the use of lazy initialization.</span></span>  
  
 [!code-csharp[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/cs/example.cs#all)]
 [!code-vb[System.Lazy\`1.ctorFuncLTSM#All](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.lazy`1.ctorfuncltsm/vb/example.vb#all)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="99eaf-316">
            <paramref name="mode" /> 包含无效值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-316">
              <paramref name="mode" /> contains an invalid value.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="99eaf-317">
            <paramref name="valueFactory" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-317">
              <paramref name="valueFactory" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsValueCreated">
      <MemberSignature Language="C#" Value="public bool IsValueCreated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueCreated" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.IsValueCreated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueCreated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueCreated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueCreated : bool" Usage="System.Lazy&lt;'T&gt;.IsValueCreated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="99eaf-318">获取一个值，该值指示是否已为此 <see cref="T:System.Lazy`1" /> 实例创建一个值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-318">Gets a value that indicates whether a value has been created for this <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="99eaf-319">如果已为此 <see cref="T:System.Lazy`1" /> 实例创建了一个值，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-319">
              <see langword="true" /> if a value has been created for this <see cref="T:System.Lazy`1" /> instance; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99eaf-320">当延迟初始化发生<xref:System.Lazy%601>实例，它可能会导致正在创建一个值或引发异常。</span><span class="sxs-lookup"><span data-stu-id="99eaf-320">When lazy initialization occurs for a <xref:System.Lazy%601> instance, it may result in either a value being created or an exception being thrown.</span></span> <span data-ttu-id="99eaf-321">如果引发的异常则引发该异常，因为在后续行为<xref:System.Lazy%601>实例依赖于异常高速缓存是否有效。</span><span class="sxs-lookup"><span data-stu-id="99eaf-321">If an exception is thrown, subsequent behavior of the <xref:System.Lazy%601> instance depends on whether exception caching is in effect.</span></span> <span data-ttu-id="99eaf-322">如果<xref:System.Lazy%601>实例已通过使用构造函数不指定初始化函数，创建然后异常缓存不起作用。</span><span class="sxs-lookup"><span data-stu-id="99eaf-322">If the <xref:System.Lazy%601> instance was created by using a constructor that does not specify an initialization function, then exception caching is not in effect.</span></span> <span data-ttu-id="99eaf-323">若要初始化的后续尝试<xref:System.Lazy%601>可能会成功，且成功初始化后<xref:System.Lazy%601.IsValueCreated%2A>属性返回`true`。</span><span class="sxs-lookup"><span data-stu-id="99eaf-323">A subsequent attempt to initialize the <xref:System.Lazy%601> might succeed, and after successful initialization the <xref:System.Lazy%601.IsValueCreated%2A> property returns `true`.</span></span> <span data-ttu-id="99eaf-324">如果<xref:System.Lazy%601>使用初始化函数创建实例 (指定的`valueFactory`参数<xref:System.Lazy%601>构造函数)，然后异常缓存由线程安全模式控制。</span><span class="sxs-lookup"><span data-stu-id="99eaf-324">If the <xref:System.Lazy%601> instance was created with an initialization function (specified by the `valueFactory` parameter of the <xref:System.Lazy%601> constructor), then exception caching is controlled by the thread safety mode.</span></span>  
  
-   <span data-ttu-id="99eaf-325">如果模式为<xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType>或<xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>，没有初始化没有第二个机会<xref:System.Lazy%601>实例。</span><span class="sxs-lookup"><span data-stu-id="99eaf-325">If the mode is <xref:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication?displayProperty=nameWithType> or <xref:System.Threading.LazyThreadSafetyMode.None?displayProperty=nameWithType>, there is no second chance to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="99eaf-326">如果发生了异常，但初始化函数中未处理，该异常将缓存，并在后续访问的上再次引发<xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="99eaf-326">If an exception occurs and is unhandled in the initialization function, that exception is cached and rethrown on subsequent accesses of the <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="99eaf-327">如果将引发异常，因此，在这种情况下，不创建任何值<xref:System.Lazy%601.IsValueCreated%2A>返回`false`。</span><span class="sxs-lookup"><span data-stu-id="99eaf-327">No value is created if an exception is thrown, so in such cases <xref:System.Lazy%601.IsValueCreated%2A> returns `false`.</span></span>  
  
-   <span data-ttu-id="99eaf-328">如果模式为<xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>，便可以成功运行初始化函数 （或默认构造函数） 的第一个线程创建的值<xref:System.Lazy%601>实例。</span><span class="sxs-lookup"><span data-stu-id="99eaf-328">If the mode is <xref:System.Threading.LazyThreadSafetyMode.PublicationOnly?displayProperty=nameWithType>, the first thread that succeeds in running the initialization function (or the default constructor) creates the value for the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="99eaf-329">如果初始化函数在一个线程上引发了异常，其他线程仍可以尝试初始化<xref:System.Lazy%601>实例。</span><span class="sxs-lookup"><span data-stu-id="99eaf-329">If the initialization function throws an exception on one thread, other threads can still try to initialize the <xref:System.Lazy%601> instance.</span></span> <span data-ttu-id="99eaf-330">在创建值之前<xref:System.Lazy%601.IsValueCreated%2A>属性返回`false`。</span><span class="sxs-lookup"><span data-stu-id="99eaf-330">Until the value is created, the <xref:System.Lazy%601.IsValueCreated%2A> property returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.LazyThreadSafetyMode" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Lazy`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="lazy.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="99eaf-331">创建并返回此实例的 <see cref="P:System.Lazy`1.Value" /> 属性的字符串表示形式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-331">Creates and returns a string representation of the <see cref="P:System.Lazy`1.Value" /> property for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="99eaf-332">如果已创建该值（即，如果 <see cref="M:System.Object.ToString" /> 属性返回 <see langword="true" />），则为对此实例的 <see cref="P:System.Lazy`1.Value" /> 属性调用 <see cref="P:System.Lazy`1.IsValueCreated" /> 方法所获得的结果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-332">The result of calling the <see cref="M:System.Object.ToString" /> method on the <see cref="P:System.Lazy`1.Value" /> property for this instance, if the value has been created (that is, if the <see cref="P:System.Lazy`1.IsValueCreated" /> property returns <see langword="true" />).</span>
          </span>
          <span data-ttu-id="99eaf-333">否则，则为一个指示该值尚未创建的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-333">Otherwise, a string indicating that the value has not been created.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99eaf-334">调用此方法不会导致初始化。</span><span class="sxs-lookup"><span data-stu-id="99eaf-334">Calling this method does not cause initialization.</span></span>  
  
 <span data-ttu-id="99eaf-335"><xref:System.Lazy%601.Value%2A?displayProperty=nameWithType>属性可以是`null`后延迟初始化的工厂方法是否为指定`valueFactory`参数<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>， <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>，或<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>构造函数将返回`null`。</span><span class="sxs-lookup"><span data-stu-id="99eaf-335">The <xref:System.Lazy%601.Value%2A?displayProperty=nameWithType> property can be `null` after lazy initialization if the factory method that was specified for the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="99eaf-336">
            <see cref="P:System.Lazy`1.Value" /> 属性为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-336">The <see cref="P:System.Lazy`1.Value" /> property is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public T Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Value" />
      <MemberSignature Language="DocId" Value="P:System.Lazy`1.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Value { T get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : 'T" Usage="System.Lazy&lt;'T&gt;.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="99eaf-337">获取当前 <see cref="T:System.Lazy`1" /> 实例的延迟初始化值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-337">Gets the lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="99eaf-338">当前 <see cref="T:System.Lazy`1" /> 实例的延迟初始化值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-338">The lazily initialized value of the current <see cref="T:System.Lazy`1" /> instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="99eaf-339">如果<xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType>属性是`false`，则访问<xref:System.Lazy%601.Value%2A>属性会强制初始化。</span><span class="sxs-lookup"><span data-stu-id="99eaf-339">If the <xref:System.Lazy%601.IsValueCreated%2A?displayProperty=nameWithType> property is `false`, accessing the <xref:System.Lazy%601.Value%2A> property forces initialization.</span></span>  
  
 <span data-ttu-id="99eaf-340">除了列出，异常<xref:System.Lazy%601.Value%2A>属性可以引发由传递到的工厂方法引发任何未处理的异常`valueFactory`参数<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>， <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>，或<xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="99eaf-340">In addition to the exceptions that are listed, the <xref:System.Lazy%601.Value%2A> property can throw any unhandled exception that is thrown by the factory method that was passed to the `valueFactory` parameter of the <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%29>, <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Threading.LazyThreadSafetyMode%29>, or <xref:System.Lazy%601.%23ctor%28System.Func%7B%600%7D%2CSystem.Boolean%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.MemberAccessException">
          <span data-ttu-id="99eaf-341">
            <see cref="T:System.Lazy`1" /> 实例初始化为使用正在延迟初始化的类型的默认构造函数，并且缺少访问该构造函数的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-341">The <see cref="T:System.Lazy`1" /> instance is initialized to use the default constructor of the type that is being lazily initialized, and permissions to access the constructor are missing.</span>
          </span>
        </exception>
        <exception cref="T:System.MissingMemberException">
          <span data-ttu-id="99eaf-342">
            <see cref="T:System.Lazy`1" /> 实例初始化为使用正在惰性初始化的类型的默认构造函数，并且该类型没有无参数的公共构造函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-342">The <see cref="T:System.Lazy`1" /> instance is initialized to use the default constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="99eaf-343">初始化函数尝试访问此实例上的 <see cref="P:System.Lazy`1.Value" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="99eaf-343">The initialization function tries to access <see cref="P:System.Lazy`1.Value" /> on this instance.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>