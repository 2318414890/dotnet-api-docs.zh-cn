<Type Name="CharEnumerator" FullName="System.CharEnumerator">
  <TypeSignature Language="C#" Value="public sealed class CharEnumerator : ICloneable, System.Collections.Generic.IEnumerator&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit CharEnumerator extends System.Object implements class System.Collections.Generic.IEnumerator`1&lt;char&gt;, class System.Collections.IEnumerator, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.CharEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CharEnumerator&#xA;Implements ICloneable, IEnumerator(Of Char)" />
  <TypeSignature Language="C++ CLI" Value="public ref class CharEnumerator sealed : ICloneable, System::Collections::Generic::IEnumerator&lt;char&gt;" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f7aa5-101">支持循环访问 <see cref="T:System.String" /> 对象并读取其各个字符。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-101">Supports iterating over a <see cref="T:System.String" /> object and reading its individual characters.</span></span> <span data-ttu-id="f7aa5-102">此类不能被继承。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7aa5-103">A<xref:System.CharEnumerator>提供对中的引用的字符的只读访问权限<xref:System.String>对象。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-103">A <xref:System.CharEnumerator> provides read-only access to the characters in a referenced <xref:System.String> object.</span></span> <span data-ttu-id="f7aa5-104">例如，`foreach`语句的 Microsoft Visual Basic 和 C# 的编程语言，它循环访问集合的元素，检索<xref:System.CharEnumerator>从<xref:System.String>以循环访问在于个字符的对象对象。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-104">For example, the `foreach` statement of the Microsoft Visual Basic and C# programming languages, which iterates through the elements of a collection, retrieves a <xref:System.CharEnumerator> from a <xref:System.String> object in order to iterate through the characters in that object.</span></span>  
  
 <span data-ttu-id="f7aa5-105">没有没有公共构造函数<xref:System.CharEnumerator>。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-105">There is no public constructor for <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="f7aa5-106">而应调用<xref:System.String>对象的<xref:System.String.GetEnumerator%2A>方法来获取<xref:System.CharEnumerator>以便经初始化引用字符串。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-106">Instead, call a <xref:System.String> object's <xref:System.String.GetEnumerator%2A> method to obtain a <xref:System.CharEnumerator> that is initialized to reference the string.</span></span>  
  
 <span data-ttu-id="f7aa5-107">A<xref:System.CharEnumerator>保持到字符串中字符的内部索引<xref:System.CharEnumerator>引用。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-107">A <xref:System.CharEnumerator> maintains an internal index to the characters in the string the <xref:System.CharEnumerator> references.</span></span> <span data-ttu-id="f7aa5-108">引用字符串内的字符时，索引的状态是无效的; 当它引用字符串中的字符位置逻辑上第一个字符之前或之后的最后一个字符和有效。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-108">The state of the index is invalid when it references a character position logically before the first character or after the last character in the string, and valid when it references a character within the string.</span></span> <span data-ttu-id="f7aa5-109">索引函数将初始化为逻辑上之前的第一个字符的位置，并设置到的位置后的最后一个字符迭代完成后。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-109">The index is initialized to a position logically before the first character, and is set to a position after the last character when the iteration is complete.</span></span> <span data-ttu-id="f7aa5-110">如果你尝试访问该字符，该索引无效时，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-110">An exception is thrown if you attempt to access a character while the index is invalid.</span></span>  
  
 <span data-ttu-id="f7aa5-111"><xref:System.CharEnumerator.MoveNext%2A>方法索引递增 1，因此反过来访问的第一个和后续字符。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-111">The <xref:System.CharEnumerator.MoveNext%2A> method increments the index by one, so the first and subsequent characters are accessed in turn.</span></span> <span data-ttu-id="f7aa5-112"><xref:System.CharEnumerator.Reset%2A>方法设置为逻辑上之前的第一个字符的位置的索引。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-112">The <xref:System.CharEnumerator.Reset%2A> method sets the index to a position logically before the first character.</span></span> <span data-ttu-id="f7aa5-113"><xref:System.CharEnumerator.Current%2A>属性检索当前引用的索引的字符。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-113">The <xref:System.CharEnumerator.Current%2A> property retrieves the character currently referenced by index.</span></span> <span data-ttu-id="f7aa5-114"><xref:System.CharEnumerator.Clone%2A>方法会创建一份<xref:System.CharEnumerator>。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-114">The <xref:System.CharEnumerator.Clone%2A> method creates a copy of the <xref:System.CharEnumerator>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f7aa5-115">几个独立实例<xref:System.CharEnumerator>跨一个或多个线程可以有权访问的单个实例<xref:System.String>。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-115">Several independent instances of <xref:System.CharEnumerator> across one or more threads can have access to a single instance of <xref:System.String>.</span></span> <span data-ttu-id="f7aa5-116">实现此类是为了支持<xref:System.Collections.IEnumerator>接口。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-116">This class is implemented to support the <xref:System.Collections.IEnumerator> interface.</span></span> <span data-ttu-id="f7aa5-117">有关使用枚举器的详细信息，请参阅<xref:System.Collections.IEnumerator>主题。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-117">For more information regarding the use of an enumerator, see the <xref:System.Collections.IEnumerator> topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f7aa5-118">下面的示例使用<xref:System.CharEnumerator>类来枚举字符串中的每个字符。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-118">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="f7aa5-119">它实例化<xref:System.CharEnumerator>对象通过调用<xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>方法，将从移动一个字符到下一步通过调用<xref:System.CharEnumerator.MoveNext%2A>方法，并通过检索的值的显示的当前字符<xref:System.CharEnumerator.Current%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-119">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="f7aa5-120">但请注意，可以通过使用某种程度上更直观地执行同一操作`foreach`（在 C# 中) 或`For Each`（在 Visual Basic 中)，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-120">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Collections.IEnumerator" />
    <altmember cref="T:System.Collections.IEnumerable" />
    <altmember cref="T:System.Collections.ICollection" />
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f7aa5-121">创建当前 <see cref="T:System.CharEnumerator" /> 对象的副本。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-121">Creates a copy of the current <see cref="T:System.CharEnumerator" /> object.</span></span></summary>
        <returns><span data-ttu-id="f7aa5-122"><see cref="T:System.Object" />，是当前 <see cref="T:System.CharEnumerator" /> 对象的副本。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-122">An <see cref="T:System.Object" /> that is a copy of the current <see cref="T:System.CharEnumerator" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7aa5-123">返回值是此实例的副本<xref:System.CharEnumerator>及其当前状态。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-123">The return value is a copy of this instance of <xref:System.CharEnumerator> and its current state.</span></span> <span data-ttu-id="f7aa5-124">这可用于循环访问时保存状态<xref:System.String>对象。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-124">This is useful for saving your state while iterating through a <xref:System.String> object.</span></span>  
  
 <span data-ttu-id="f7aa5-125">例如，假定你的应用程序使用的原始实例<xref:System.CharEnumerator>来循环访问中的每个字符<xref:System.String>。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-125">For example, suppose your application uses an original instance of <xref:System.CharEnumerator> to iterate through each character in a <xref:System.String>.</span></span> <span data-ttu-id="f7aa5-126">当遇到某些唯一字符时，你的应用程序暂停处理，并调用<xref:System.CharEnumerator.Clone%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-126">When some unique character is encountered, your application pauses processing and invokes the <xref:System.CharEnumerator.Clone%2A> method.</span></span> <span data-ttu-id="f7aa5-127">实际上，这将保存<xref:System.CharEnumerator>中的对象的索引<xref:System.String>。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-127">In effect, this saves the <xref:System.CharEnumerator> object's index in the <xref:System.String>.</span></span>  
  
 <span data-ttu-id="f7aa5-128">你的应用程序使用克隆导航到的另一部分`String`执行一些辅助处理。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-128">Your application uses the clone to navigate to another part of the `String` to perform some auxiliary processing.</span></span> <span data-ttu-id="f7aa5-129">此导航的副作用是位置的克隆会失去对跟踪的处理停止时所在。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-129">The side-effect of this navigation is the clone loses track of the position where processing stopped.</span></span> <span data-ttu-id="f7aa5-130">但是，辅助处理完成后，则你的应用程序将放弃克隆并使用原始<xref:System.CharEnumerator>实例继续处理<xref:System.String>原始处理停止的位置。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-130">However, when the auxiliary processing is complete, your application discards the clone and uses the original <xref:System.CharEnumerator> instance to resume working on the <xref:System.String> where the original processing stopped.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f7aa5-131">实现此方法是为了支持<xref:System.ICloneable>接口。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-131">This method is implemented to support the <xref:System.ICloneable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public char Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char Current { char get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f7aa5-132">获取由此 <see cref="T:System.CharEnumerator" /> 对象枚举的字符串中当前引用的字符。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-132">Gets the currently referenced character in the string enumerated by this <see cref="T:System.CharEnumerator" /> object.</span></span></summary>
        <value><span data-ttu-id="f7aa5-133">当前由此 <see cref="T:System.CharEnumerator" /> 对象引用的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-133">The Unicode character currently referenced by this <see cref="T:System.CharEnumerator" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7aa5-134"><xref:System.CharEnumerator>类维护的枚举字符串的内部索引和<xref:System.CharEnumerator.Current%2A>属性返回由索引当前引用的字符。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-134">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.Current%2A> property returns the character that is currently referenced by the index.</span></span> <span data-ttu-id="f7aa5-135">仅当此索引有效; 时，才应调用此属性否则，会引发异常。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-135">This property should be invoked only when the index is valid; otherwise, an exception is thrown.</span></span>  
  
 <span data-ttu-id="f7aa5-136">该索引无效始终为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-136">The index is always invalid for an empty string ("").</span></span> <span data-ttu-id="f7aa5-137">该索引无效也后<xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>或<xref:System.CharEnumerator.Reset%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-137">The index is also invalid after the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> or <xref:System.CharEnumerator.Reset%2A> method is called.</span></span> <span data-ttu-id="f7aa5-138">任一方法调用后，调用<xref:System.CharEnumerator.MoveNext%2A>方法调整到枚举字符串中的第一个字符的索引。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-138">After either of these methods is called, invoke the <xref:System.CharEnumerator.MoveNext%2A> method to adjust the index to the first character in the enumerated string.</span></span> <span data-ttu-id="f7aa5-139">此索引是否有效每当<xref:System.CharEnumerator.MoveNext%2A>方法返回`true`。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-139">The index is valid whenever the <xref:System.CharEnumerator.MoveNext%2A> method returns `true`.</span></span>  
  
 <span data-ttu-id="f7aa5-140"><xref:System.CharEnumerator.Current%2A> 不会移动的索引和对连续调用<xref:System.CharEnumerator.Current%2A>返回之前的相同字符<xref:System.CharEnumerator.MoveNext%2A>， <xref:System.CharEnumerator.Reset%2A>，或<xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>调用。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-140"><xref:System.CharEnumerator.Current%2A> does not move the index, and consecutive calls to <xref:System.CharEnumerator.Current%2A> return the same character until <xref:System.CharEnumerator.MoveNext%2A>, <xref:System.CharEnumerator.Reset%2A>, or <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f7aa5-141">下面的示例使用<xref:System.CharEnumerator>类来枚举字符串中的每个字符。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-141">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="f7aa5-142">它实例化<xref:System.CharEnumerator>对象通过调用<xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>方法，将从移动一个字符到下一步通过调用<xref:System.CharEnumerator.MoveNext%2A>方法，并通过检索的值的显示的当前字符<xref:System.CharEnumerator.Current%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-142">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="f7aa5-143">但请注意，可以通过使用某种程度上更直观地执行同一操作`foreach`（在 C# 中) 或`For Each`（在 Visual Basic 中)，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-143">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f7aa5-144">该索引无效；即它位于枚举字符串的第一个字符之前或最后一个字符之后。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-144">The index is invalid; that is, it is before the first or after the last character of the enumerated string.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f7aa5-145">释放 <see cref="T:System.CharEnumerator" /> 类的当前实例所使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-145">Releases all resources used by the current instance of the <see cref="T:System.CharEnumerator" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7aa5-146">在完成使用 <xref:System.CharEnumerator.Dispose%2A> 后，应调用 <xref:System.CharEnumerator>。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-146">Call <xref:System.CharEnumerator.Dispose%2A> when you are finished using the <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="f7aa5-147"><xref:System.CharEnumerator.Dispose%2A> 方法使 <xref:System.CharEnumerator> 处于不可用状态。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-147">The <xref:System.CharEnumerator.Dispose%2A> method leaves the <xref:System.CharEnumerator> in an unusable state.</span></span> <span data-ttu-id="f7aa5-148">在调用<xref:System.CharEnumerator.Dispose%2A>，必须释放对所有引用<xref:System.CharEnumerator>以便垃圾回收器才能回收的内存，<xref:System.CharEnumerator>占用。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-148">After calling <xref:System.CharEnumerator.Dispose%2A>, you must release all references to the <xref:System.CharEnumerator> so the garbage collector can reclaim the memory that the <xref:System.CharEnumerator> was occupying.</span></span>  
  
 <span data-ttu-id="f7aa5-149">有关详细信息，请参阅[清洗向上非托管资源](~/docs/standard/garbage-collection/unmanaged.md)和[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-149">For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f7aa5-150">每次释放对 <xref:System.CharEnumerator.Dispose%2A> 的最后一个引用前，均应调用 <xref:System.CharEnumerator>。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-150">Always call <xref:System.CharEnumerator.Dispose%2A> before you release your last reference to the <xref:System.CharEnumerator>.</span></span> <span data-ttu-id="f7aa5-151">否则，在垃圾回收器调用 <xref:System.CharEnumerator> 对象的 `Finalize` 方法之前，该对象正在使用的资源不会被释放。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-151">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.CharEnumerator> object's `Finalize` method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f7aa5-152">递增当前 <see cref="T:System.CharEnumerator" /> 对象的内部索引使其指向枚举的字符串的下一个字符。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-152">Increments the internal index of the current <see cref="T:System.CharEnumerator" /> object to the next character of the enumerated string.</span></span></summary>
        <returns>
          <span data-ttu-id="f7aa5-153">如果索引递增成功并且在枚举字符串内，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-153"><see langword="true" /> if the index is successfully incremented and within the enumerated string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7aa5-154"><xref:System.CharEnumerator>类维护的枚举字符串的内部索引和<xref:System.CharEnumerator.MoveNext%2A>方法索引递增 1。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-154">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.MoveNext%2A> method increments the index by one.</span></span> <span data-ttu-id="f7aa5-155">调用<xref:System.CharEnumerator.MoveNext%2A>之后调用<xref:System.String.GetEnumerator%2A>或<xref:System.CharEnumerator.Reset%2A>递增到第一个字符中的枚举字符串的当前字符位置。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-155">Call <xref:System.CharEnumerator.MoveNext%2A> after calling <xref:System.String.GetEnumerator%2A> or <xref:System.CharEnumerator.Reset%2A> to increment the current character position to the first character in the enumerated string.</span></span> <span data-ttu-id="f7aa5-156">检查返回的值是否`true`以确定当前字符位置是否有效。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-156">Check that the return value is `true` to determine that the current character position is valid.</span></span>  
  
 <span data-ttu-id="f7aa5-157">如果索引已超出枚举字符串的最后一个字符，不会更改索引和`false`返回。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-157">If the index is already beyond the last character of the enumerated string, the index is not changed and `false` is returned.</span></span>  
  
 <span data-ttu-id="f7aa5-158">请注意，如果枚举的字符串为空 ("")，则状态的<xref:System.CharEnumerator>始终无效。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-158">Notice that if the enumerated string is empty (""), the state of the <xref:System.CharEnumerator> is always invalid.</span></span> <span data-ttu-id="f7aa5-159">这是因为的内部索引<xref:System.CharEnumerator>最初之前枚举字符串的第一个字符，因此无效。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-159">This is because the internal index for the <xref:System.CharEnumerator> is initially before the first character of the enumerated string and is therefore invalid.</span></span> <span data-ttu-id="f7aa5-160"><xref:System.CharEnumerator.MoveNext%2A> 逻辑上也是无效的枚举字符串的最后一个 （不存在） 字符之后设置的索引。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-160"><xref:System.CharEnumerator.MoveNext%2A> logically sets the index after the last (nonexistent) character of the enumerated string which is also invalid.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f7aa5-161">下面的示例使用<xref:System.CharEnumerator>类来枚举字符串中的每个字符。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-161">The following example uses the <xref:System.CharEnumerator> class to enumerate the individual characters in a string.</span></span> <span data-ttu-id="f7aa5-162">它实例化<xref:System.CharEnumerator>对象通过调用<xref:System.String.GetEnumerator%2A?displayProperty=nameWithType>方法，将从移动一个字符到下一步通过调用<xref:System.CharEnumerator.MoveNext%2A>方法，并通过检索的值的显示的当前字符<xref:System.CharEnumerator.Current%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-162">It instantiates a <xref:System.CharEnumerator> object by calling the <xref:System.String.GetEnumerator%2A?displayProperty=nameWithType> method, moves from one character to the next by calling the <xref:System.CharEnumerator.MoveNext%2A> method, and displays the current character by retrieving the value of the <xref:System.CharEnumerator.Current%2A> property.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#1)]
 [!code-csharp[System.CharEnumerator.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#1)]
 [!code-vb[System.CharEnumerator.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#1)]  
  
 <span data-ttu-id="f7aa5-163">但请注意，可以通过使用某种程度上更直观地执行同一操作`foreach`（在 C# 中) 或`For Each`（在 Visual Basic 中)，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-163">Note, however, that the same operation can be performed somewhat more intuitively by using `foreach` (in C#) or `For Each` (in Visual Basic), as the following example shows.</span></span>  
  
 [!code-cpp[System.CharEnumerator.Class#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cpp/charenumerator1.cpp#2)]
 [!code-csharp[System.CharEnumerator.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.CharEnumerator.Class/cs/CharEnumerator1.cs#2)]
 [!code-vb[System.CharEnumerator.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.CharEnumerator.Class/vb/CharEnumerator1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CharEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f7aa5-164">将索引初始化为逻辑上位于枚举字符串的第一个字符之前的位置。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-164">Initializes the index to a position logically before the first character of the enumerated string.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7aa5-165"><xref:System.CharEnumerator>类维护的枚举字符串的内部索引和<xref:System.CharEnumerator.Reset%2A>方法设置为无效状态的索引。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-165">The <xref:System.CharEnumerator> class maintains an internal index to the enumerated string, and the <xref:System.CharEnumerator.Reset%2A> method sets the index to the invalid state.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.CharEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IEnumerator.Current { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f7aa5-166">获取由此 <see cref="T:System.CharEnumerator" /> 对象枚举的字符串中当前引用的字符。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-166">Gets the currently referenced character in the string enumerated by this <see cref="T:System.CharEnumerator" /> object.</span></span> <span data-ttu-id="f7aa5-167">有关此成员的说明，请参阅 <see cref="P:System.Collections.IEnumerator.Current" />。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-167">For a description of this member, see <see cref="P:System.Collections.IEnumerator.Current" />.</span></span></summary>
        <value><span data-ttu-id="f7aa5-168">当前由此 <see cref="T:System.CharEnumerator" /> 对象引用的已装箱 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-168">The boxed Unicode character currently referenced by this <see cref="T:System.CharEnumerator" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f7aa5-169">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-169">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="f7aa5-170">它只能在 <xref:System.CharEnumerator> 实例强制转换为 <xref:System.Collections.IEnumerator> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-170">It can be used only when the <xref:System.CharEnumerator> instance is cast to an <xref:System.Collections.IEnumerator> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f7aa5-171">枚举未启动。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-171">Enumeration has not started.</span></span>  
  
 <span data-ttu-id="f7aa5-172">或</span><span class="sxs-lookup"><span data-stu-id="f7aa5-172">-or-</span></span>  
  
 <span data-ttu-id="f7aa5-173">枚举已经终止。</span><span class="sxs-lookup"><span data-stu-id="f7aa5-173">Enumeration has ended.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>