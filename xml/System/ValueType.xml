<Type Name="ValueType" FullName="System.ValueType">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3b756fc1621dab1597966503a0af93b3c8478663" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ValueType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit ValueType extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ValueType" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueType" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueType abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="a2cef-101">为值类型提供基类。</span>
      <span class="sxs-lookup">
        <span data-stu-id="a2cef-101">Provides the base class for value types.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2cef-102"><xref:System.ValueType> 重写虚拟方法从<xref:System.Object>与更合适的值类型的实现。</span><span class="sxs-lookup"><span data-stu-id="a2cef-102"><xref:System.ValueType> overrides the virtual methods from <xref:System.Object> with more appropriate implementations for value types.</span></span> <span data-ttu-id="a2cef-103">另请参阅<xref:System.Enum>，它继承自<xref:System.ValueType>。</span><span class="sxs-lookup"><span data-stu-id="a2cef-103">See also <xref:System.Enum>, which inherits from <xref:System.ValueType>.</span></span>  
  
 <span data-ttu-id="a2cef-104">数据类型分为值类型和引用类型。</span><span class="sxs-lookup"><span data-stu-id="a2cef-104">Data types are separated into value types and reference types.</span></span> <span data-ttu-id="a2cef-105">值类型是堆栈分配，或者分配结构中的内联。</span><span class="sxs-lookup"><span data-stu-id="a2cef-105">Value types are either stack-allocated or allocated inline in a structure.</span></span> <span data-ttu-id="a2cef-106">引用类型是堆分配。</span><span class="sxs-lookup"><span data-stu-id="a2cef-106">Reference types are heap-allocated.</span></span> <span data-ttu-id="a2cef-107">引用和值类型都派生自的最终基类<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="a2cef-107">Both reference and value types are derived from the ultimate base class <xref:System.Object>.</span></span> <span data-ttu-id="a2cef-108">在其中是所需的行为类似于对象的值类型的情况下，包装器，可在堆上分配引用对象和值类型的值复制到它的外观的值类型。</span><span class="sxs-lookup"><span data-stu-id="a2cef-108">In cases where it is necessary for a value type to behave like an object, a wrapper that makes the value type look like a reference object is allocated on the heap, and the value type's value is copied into it.</span></span> <span data-ttu-id="a2cef-109">包装有标记，系统就会知道它包含值类型。</span><span class="sxs-lookup"><span data-stu-id="a2cef-109">The wrapper is marked so the system knows that it contains a value type.</span></span> <span data-ttu-id="a2cef-110">此过程称为装箱，和反向过程被称为取消装箱。</span><span class="sxs-lookup"><span data-stu-id="a2cef-110">This process is known as boxing, and the reverse process is known as unboxing.</span></span> <span data-ttu-id="a2cef-111">装箱和取消装箱允许任何类型被视为一个对象。</span><span class="sxs-lookup"><span data-stu-id="a2cef-111">Boxing and unboxing allow any type to be treated as an object.</span></span>  
  
 <span data-ttu-id="a2cef-112">尽管<xref:System.ValueType>是隐式基类对于值类型，无法创建继承自的类<xref:System.ValueType>直接。</span><span class="sxs-lookup"><span data-stu-id="a2cef-112">Although <xref:System.ValueType> is the implicit base class for value types, you cannot create a class that inherits from <xref:System.ValueType> directly.</span></span> <span data-ttu-id="a2cef-113">请改为单个编译器提供语言关键字，或者构造 (如`struct`在 C# 和`Structure`...`End Structure`</span><span class="sxs-lookup"><span data-stu-id="a2cef-113">Instead, individual compilers provide a language keyword or construct (such as `struct` in C# and `Structure`…`End Structure`</span></span> <span data-ttu-id="a2cef-114">在 Visual Basic 中) 以支持创建值类型。</span><span class="sxs-lookup"><span data-stu-id="a2cef-114">in Visual Basic) to support the creation of value types.</span></span>  
  
 <span data-ttu-id="a2cef-115">除了充当.NET Framework 中的值类型的基类<xref:System.ValueType>直接在代码中通常不使用结构。</span><span class="sxs-lookup"><span data-stu-id="a2cef-115">Aside from serving as the base class for value types in the .NET Framework, the <xref:System.ValueType> structure is generally not used directly in code.</span></span> <span data-ttu-id="a2cef-116">但是，它可以用作方法调用中的参数的可能自变量限制到值类型而不是所有对象，或者允许一个方法来处理许多不同的值类型。</span><span class="sxs-lookup"><span data-stu-id="a2cef-116">However, it can be used as a parameter in method calls to restrict possible arguments to value types instead of all objects, or to permit a method to handle a number of different value types.</span></span> <span data-ttu-id="a2cef-117">下面的示例演示如何<xref:System.ValueType>防止引用类型传递给方法。</span><span class="sxs-lookup"><span data-stu-id="a2cef-117">The following example illustrates how <xref:System.ValueType> prevents reference types from being passed to methods.</span></span> <span data-ttu-id="a2cef-118">它定义一个名为`Utility`包含四个方法： `IsNumeric`，指示其自变量是否是一个数字;`IsInteger`，指示其自变量是否为整数;`IsFloat`，指示其自变量是否是一个浮点数; 和`Compare`，指示两个数值之间的关系。</span><span class="sxs-lookup"><span data-stu-id="a2cef-118">It defines a class named `Utility` that contains four methods: `IsNumeric`, which indicates whether its argument is a number; `IsInteger`, which indicates whether its argument is an integer; `IsFloat`, which indicates whether its argument is a floating-point number; and `Compare`, which indicates the relationship between two numeric values.</span></span> <span data-ttu-id="a2cef-119">在每个情况下，方法参数属于类型<xref:System.ValueType>，并且阻止引用类型传递给方法。</span><span class="sxs-lookup"><span data-stu-id="a2cef-119">In each case, the method parameters are of type <xref:System.ValueType>, and reference types are prevented from being passed to the methods.</span></span>  
  
 [!code-csharp[System.ValueType.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#1)]
 [!code-vb[System.ValueType.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#1)]  
  
 <span data-ttu-id="a2cef-120">下面的示例演示对的方法的调用`Utility`类。</span><span class="sxs-lookup"><span data-stu-id="a2cef-120">The following example illustrates calls to the methods of the `Utility` class.</span></span>  
  
 [!code-csharp[System.ValueType.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#2)]
 [!code-vb[System.ValueType.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Object" />
    <altmember cref="T:System.Enum" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueType();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a2cef-121">初始化 <see cref="T:System.ValueType" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2cef-121">Initializes a new instance of the <see cref="T:System.ValueType" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="a2cef-122">要与当前实例进行比较的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2cef-122">The object to compare with the current instance.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="a2cef-123">指示此实例与指定对象是否相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2cef-123">Indicates whether this instance and a specified object are equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2cef-124">如果 <see langword="true" /> 和该实例具有相同的类型并表示相同的值，则为 <paramref name="obj" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2cef-124">
              <see langword="true" /> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2cef-125"><xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType>方法重写<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>和为.NET Framework 中的所有值类型提供的值是否相等的默认实现。</span><span class="sxs-lookup"><span data-stu-id="a2cef-125">The <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType> method overrides <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> and provides the default implementation of value equality for all value types in the .NET Framework.</span></span>  
  
 <span data-ttu-id="a2cef-126">如果当前实例的字段均不和`obj`是引用类型、<xref:System.ValueType.Equals%2A>方法在内存中执行逐字节比较的两个对象。</span><span class="sxs-lookup"><span data-stu-id="a2cef-126">If none of the fields of the current instance and `obj` are reference types, the <xref:System.ValueType.Equals%2A> method performs a byte-by-byte comparison of the two objects in memory.</span></span> <span data-ttu-id="a2cef-127">否则，它使用反射来比较的相应字段`obj`与此实例。</span><span class="sxs-lookup"><span data-stu-id="a2cef-127">Otherwise, it uses reflection to compare the corresponding fields of `obj` and this instance.</span></span>  
  
> [!TIP]
>  <span data-ttu-id="a2cef-128">尤其是值类型包含是引用类型的字段，则应重写<xref:System.ValueType.Equals%28System.Object%29>方法。</span><span class="sxs-lookup"><span data-stu-id="a2cef-128">Particularly if your value type contains fields that are reference types, you should override the <xref:System.ValueType.Equals%28System.Object%29> method.</span></span> <span data-ttu-id="a2cef-129">这可以改善性能，并使您能够更准确地表示的类型的相等性的含义。</span><span class="sxs-lookup"><span data-stu-id="a2cef-129">This can improve performance and enable you to more closely represent the meaning of equality for the type.</span></span>  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a><span data-ttu-id="a2cef-130">说明 [!INCLUDE[wrt](~/includes/wrt-md.md)]</span><span class="sxs-lookup"><span data-stu-id="a2cef-130">Notes for the [!INCLUDE[wrt](~/includes/wrt-md.md)]</span></span>  
 <span data-ttu-id="a2cef-131">当调用<xref:System.ValueType.Equals%2A>方法[!INCLUDE[wrt](~/includes/wrt-md.md)]结构，它为不会覆盖的值类型提供的默认行为<xref:System.ValueType.Equals%2A>。</span><span class="sxs-lookup"><span data-stu-id="a2cef-131">When you call the <xref:System.ValueType.Equals%2A> method on a [!INCLUDE[wrt](~/includes/wrt-md.md)] structure, it provides the default behavior for value types that don’t override <xref:System.ValueType.Equals%2A>.</span></span> <span data-ttu-id="a2cef-132">这是.NET Framework 提供的支持的一部分[!INCLUDE[wrt](~/includes/wrt-md.md)](请参阅[.NET Framework 支持为 Windows 应用商店应用和 Windows 运行时](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md))。</span><span class="sxs-lookup"><span data-stu-id="a2cef-132">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> [!INCLUDE[wrt](~/includes/wrt-md.md)]<span data-ttu-id="a2cef-133"> 结构不能重写<xref:System.ValueType.Equals%2A>，即使它们使用 C# 或 Visual Basic 中，因为它们不能具有方法编写。</span><span class="sxs-lookup"><span data-stu-id="a2cef-133"> structures can’t override <xref:System.ValueType.Equals%2A>, even if they’re written with C# or Visual Basic, because they can’t have methods.</span></span> <span data-ttu-id="a2cef-134">(此外，在结构[!INCLUDE[wrt](~/includes/wrt-md.md)]本身不继承<xref:System.ValueType>。)但是，它们会显示为具有<xref:System.ValueType.ToString%2A>， <xref:System.ValueType.Equals%2A>，和<xref:System.ValueType.GetHashCode%2A>方法在 C# 或 Visual Basic 代码中，使用它们以及.NET Framework 为这些方法提供的默认行为时。</span><span class="sxs-lookup"><span data-stu-id="a2cef-134">(In addition, structures in the [!INCLUDE[wrt](~/includes/wrt-md.md)] itself don’t inherit <xref:System.ValueType>.) However, they appear to have <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, and <xref:System.ValueType.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2cef-135">下面的示例演示如何<xref:System.ValueType.Equals%2A>派生的值类型可以重写方法。</span><span class="sxs-lookup"><span data-stu-id="a2cef-135">The following example demonstrates how the <xref:System.ValueType.Equals%2A> method can be overridden by a derived value type.</span></span>  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a2cef-136">返回此实例的哈希代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2cef-136">Returns the hash code for this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2cef-137">一个 32 位带符号整数，它是此实例的哈希代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2cef-137">A 32-bit signed integer that is the hash code for this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2cef-138"><xref:System.ValueType.GetHashCode%2A>方法适用于派生的类型<xref:System.ValueType>。</span><span class="sxs-lookup"><span data-stu-id="a2cef-138">The <xref:System.ValueType.GetHashCode%2A> method applies to types derived from <xref:System.ValueType>.</span></span> <span data-ttu-id="a2cef-139">派生类型的一个或多个字段用于计算的返回值。</span><span class="sxs-lookup"><span data-stu-id="a2cef-139">One or more fields of the derived type is used to calculate the return value.</span></span> <span data-ttu-id="a2cef-140">如果调用派生的类型的`GetHashCode`方法，返回的值不是可能是适合用作哈希表中的键。</span><span class="sxs-lookup"><span data-stu-id="a2cef-140">If you call the derived type's `GetHashCode` method, the return value is not likely to be suitable for use as a key in a hash table.</span></span> <span data-ttu-id="a2cef-141">此外，如果一个或多个这些字段的值发生更改，则返回值可能不适合用作哈希表中的键。</span><span class="sxs-lookup"><span data-stu-id="a2cef-141">Additionally, if the value of one or more of those fields changes, the return value might become unsuitable for use as a key in a hash table.</span></span> <span data-ttu-id="a2cef-142">在任一情况下，应考虑编写您自己的实现<xref:System.ValueType.GetHashCode%2A>更紧密地表示的概念类型的哈希代码的方法。</span><span class="sxs-lookup"><span data-stu-id="a2cef-142">In either case, consider writing your own implementation of the <xref:System.ValueType.GetHashCode%2A> method that more closely represents the concept of a hash code for the type.</span></span>  
  
 <span data-ttu-id="a2cef-143">有关详细信息，请参阅 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> 和<xref:System.Collections.Hashtable?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="a2cef-143">For more information, see <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>, and <xref:System.Collections.Hashtable?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a><span data-ttu-id="a2cef-144">说明 [!INCLUDE[wrt](~/includes/wrt-md.md)]</span><span class="sxs-lookup"><span data-stu-id="a2cef-144">Notes for the [!INCLUDE[wrt](~/includes/wrt-md.md)]</span></span>  
 <span data-ttu-id="a2cef-145">当调用<xref:System.ValueType.GetHashCode%2A>方法[!INCLUDE[wrt](~/includes/wrt-md.md)]结构，它为不会覆盖的值类型提供的默认行为<xref:System.ValueType.GetHashCode%2A>。</span><span class="sxs-lookup"><span data-stu-id="a2cef-145">When you call the <xref:System.ValueType.GetHashCode%2A> method on a [!INCLUDE[wrt](~/includes/wrt-md.md)] structure, it provides the default behavior for value types that don’t override <xref:System.ValueType.GetHashCode%2A>.</span></span> <span data-ttu-id="a2cef-146">这是.NET Framework 提供的支持的一部分[!INCLUDE[wrt](~/includes/wrt-md.md)](请参阅[.NET Framework 支持为 Windows 应用商店应用和 Windows 运行时](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md))。</span><span class="sxs-lookup"><span data-stu-id="a2cef-146">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> [!INCLUDE[wrt](~/includes/wrt-md.md)]<span data-ttu-id="a2cef-147"> 结构不能重写<xref:System.ValueType.GetHashCode%2A>，即使它们使用 C# 或 Visual Basic 中，因为它们不能具有方法编写。</span><span class="sxs-lookup"><span data-stu-id="a2cef-147"> structures can’t override <xref:System.ValueType.GetHashCode%2A>, even if they’re written with C# or Visual Basic, because they can’t have methods.</span></span> <span data-ttu-id="a2cef-148">(此外，在结构[!INCLUDE[wrt](~/includes/wrt-md.md)]本身不继承<xref:System.ValueType>。)但是，它们会显示为具有<xref:System.ValueType.ToString%2A>， <xref:System.ValueType.Equals%2A>，和<xref:System.ValueType.GetHashCode%2A>方法在 C# 或 Visual Basic 代码中，使用它们以及.NET Framework 为这些方法提供的默认行为时。</span><span class="sxs-lookup"><span data-stu-id="a2cef-148">(In addition, structures in the [!INCLUDE[wrt](~/includes/wrt-md.md)] itself don’t inherit <xref:System.ValueType>.) However, they appear to have <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, and <xref:System.ValueType.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2cef-149">下面的示例演示如何<xref:System.ValueType.GetHashCode%2A>派生的值类型可以重写方法。</span><span class="sxs-lookup"><span data-stu-id="a2cef-149">The following example demonstrates how the <xref:System.ValueType.GetHashCode%2A> method can be overridden by a derived value type.</span></span>  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="a2cef-150">返回此实例的完全限定类型名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2cef-150">Returns the fully qualified type name of this instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="a2cef-151">完全限定的类型名称</span>
          <span class="sxs-lookup">
            <span data-stu-id="a2cef-151">The fully qualified type name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2cef-152"><xref:System.ValueType.ToString%2A?displayProperty=nameWithType>方法重写<xref:System.Object.ToString%2A?displayProperty=nameWithType>方法并提供的默认实现`ToString`为值类型的方法。</span><span class="sxs-lookup"><span data-stu-id="a2cef-152">The <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> method overrides the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method and provides the default implementation of the `ToString` method for value types.</span></span> <span data-ttu-id="a2cef-153">(值类型是定义的类型`struct`关键字在 C# 中，并通过`Structure`...`End Structure`在 Visual Basic 中构造。)就功能而言，但是，实现是相同的时<xref:System.Object.ToString%2A?displayProperty=nameWithType>： 该方法返回的完全限定的类型名称。</span><span class="sxs-lookup"><span data-stu-id="a2cef-153">(Value types are types defined by the `struct` keyword in C#, and by the `Structure`...`End Structure` construct in Visual Basic.) Functionally, however, the implementation is that same as that of <xref:System.Object.ToString%2A?displayProperty=nameWithType>: the method returns the fully qualified type name.</span></span>  
  
 <span data-ttu-id="a2cef-154">值类型由定义`struct`C# 中的关键字和`Structure`...`End Structure`通常会在 Visual Basic 中的构造重写<xref:System.ValueType.ToString%2A?displayProperty=nameWithType>方法以提供更有意义的字符串表示形式的值类型。</span><span class="sxs-lookup"><span data-stu-id="a2cef-154">Value types defined by the `struct` keyword in C# and the `Structure`...`End Structure` construct in Visual Basic typically override the <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> method to provide a more meaningful string representation of the value type.</span></span> <span data-ttu-id="a2cef-155">以下示例演示了差异。</span><span class="sxs-lookup"><span data-stu-id="a2cef-155">The following example illustrates the difference.</span></span> <span data-ttu-id="a2cef-156">它定义了两个值类型，`EmployeeA`和`EmployeeB`，创建的每个实例并调用其`ToString`方法。</span><span class="sxs-lookup"><span data-stu-id="a2cef-156">It defines two value types, `EmployeeA` and `EmployeeB`, creates an instance of each, and calls its `ToString` method.</span></span> <span data-ttu-id="a2cef-157">因为`EmployeeA`结构不会覆盖<xref:System.ValueType.ToString%2A?displayProperty=nameWithType>方法，它仅显示的完全限定的类型名称。</span><span class="sxs-lookup"><span data-stu-id="a2cef-157">Because the `EmployeeA` structure does not override the <xref:System.ValueType.ToString%2A?displayProperty=nameWithType> method, it displays only the fully qualified type name.</span></span> <span data-ttu-id="a2cef-158">`EmployeeB.ToString`方法，另一方面，提供有关对象的有意义的信息。</span><span class="sxs-lookup"><span data-stu-id="a2cef-158">The `EmployeeB.ToString` method, on the other hand, provides meaningful information about the object.</span></span>  
  
 [!code-csharp[System.ValueType.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ValueType.ToString/cs/ToString2.cs#1)]
 [!code-vb[System.ValueType.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ValueType.ToString/vb/ToString2.vb#1)]  
  
 <span data-ttu-id="a2cef-159">请注意，尽管枚举类型也是值类型，但它们派生自<xref:System.Enum>类，该类会重写<xref:System.ValueType.ToString%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="a2cef-159">Note that, although enumeration types are also value types, they derive from the <xref:System.Enum> class, which overrides  <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>.</span></span>  
  
## <a name="notes-for-the-windows-runtime"></a><span data-ttu-id="a2cef-160">Windows 运行时的注意事项</span><span class="sxs-lookup"><span data-stu-id="a2cef-160">Notes for the Windows Runtime</span></span>  
 <span data-ttu-id="a2cef-161">当调用<xref:System.ValueType.ToString%2A>方法[!INCLUDE[wrt](~/includes/wrt-md.md)]结构，它为不会覆盖的值类型提供的默认行为<xref:System.ValueType.ToString%2A>。</span><span class="sxs-lookup"><span data-stu-id="a2cef-161">When you call the <xref:System.ValueType.ToString%2A> method on a [!INCLUDE[wrt](~/includes/wrt-md.md)] structure, it provides the default behavior for value types that don’t override <xref:System.ValueType.ToString%2A>.</span></span> <span data-ttu-id="a2cef-162">这是.NET Framework 提供的支持的一部分[!INCLUDE[wrt](~/includes/wrt-md.md)](请参阅[.NET Framework 支持为 Windows 应用商店应用和 Windows 运行时](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md))。</span><span class="sxs-lookup"><span data-stu-id="a2cef-162">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> [!INCLUDE[wrt](~/includes/wrt-md.md)]<span data-ttu-id="a2cef-163"> 结构不能重写<xref:System.ValueType.ToString%2A>，即使它们使用 C# 或 Visual Basic 中，因为它们不能具有方法编写。</span><span class="sxs-lookup"><span data-stu-id="a2cef-163"> structures can’t override <xref:System.ValueType.ToString%2A>, even if they’re written with C# or Visual Basic, because they can’t have methods.</span></span> <span data-ttu-id="a2cef-164">(此外，在结构[!INCLUDE[wrt](~/includes/wrt-md.md)]本身不继承<xref:System.ValueType>。)但是，它们会显示为具有<xref:System.ValueType.ToString%2A>， <xref:System.ValueType.Equals%2A>，和<xref:System.ValueType.GetHashCode%2A>方法在 C# 或 Visual Basic 代码中，使用它们以及.NET Framework 为这些方法提供的默认行为时。</span><span class="sxs-lookup"><span data-stu-id="a2cef-164">(In addition, structures in the [!INCLUDE[wrt](~/includes/wrt-md.md)] itself don’t inherit <xref:System.ValueType>.) However, they appear to have <xref:System.ValueType.ToString%2A>, <xref:System.ValueType.Equals%2A>, and <xref:System.ValueType.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>