<Type Name="ValueType" FullName="System.ValueType">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c24f4b0827545a4af826fce98ab3f9d80c19d91d" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48731472" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ValueType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit ValueType extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ValueType" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueType" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueType abstract" />
  <TypeSignature Language="F#" Value="type ValueType = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>为值类型提供基类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType> 重写虚拟方法从<xref:System.Object>与更合适的值类型实现。 另请参阅<xref:System.Enum>，后者又继承<xref:System.ValueType>。  
  
 数据类型分为值类型和引用类型。 值类型是堆栈分配，或者在结构中的以内联方式分配。 引用类型是堆分配。 引用和值类型都派生自的最终基类<xref:System.Object>。 在的行为就像一个对象的值类型所需的情况下，一个包装这样看起来像在堆上分配引用对象和值类型的值复制到它的值类型。 这样系统就会知道它包含值类型标记包装。 此过程称为装箱，和反向过程被称为取消装箱。 装箱和取消装箱允许使用任何类型被视为一个对象。  
  
 尽管<xref:System.ValueType>是隐式基类对于值类型，不能创建继承的类<xref:System.ValueType>直接。 相反，各个编译器提供语言关键字或构造 (如`struct`C# 中和`Structure`...`End Structure` 在 Visual Basic)，支持值类型的创建。  
  
 除了作为.NET Framework 中的值类型的基类<xref:System.ValueType>直接在代码中通常不使用结构。 但是，它可作为方法调用中的参数来限制对值类型，而不是所有对象的可能的参数或允许一个方法来处理多个不同的值类型。 下面的示例演示如何<xref:System.ValueType>阻止将引用类型传递到方法。 它定义一个名为`Utility`，其中包含四个方法： `IsNumeric`，指示其自变量是否是一个数字;`IsInteger`，指示其自变量是否是一个整数;`IsFloat`，指示其自变量是否是一个浮点数; 和`Compare`，指示两个数值之间的关系。 每种情况下，在方法参数属于类型<xref:System.ValueType>，并且阻止引用类型传递给方法。  
  
 [!code-csharp[System.ValueType.Structure#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#1)]
 [!code-vb[System.ValueType.Structure#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#1)]  
  
 下面的示例演示如何调用的方法`Utility`类。  
  
 [!code-csharp[System.ValueType.Structure#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.valuetype.structure/cs/example1.cs#2)]
 [!code-vb[System.ValueType.Structure#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.valuetype.structure/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Object" />
    <altmember cref="T:System.Enum" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueType();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.ValueType" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="valueType.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">要与当前实例进行比较的对象。</param>
        <summary>指示此实例与指定对象是否相等。</summary>
        <returns>如果 <see langword="true" /> 和该实例具有相同的类型并表示相同的值，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType.Equals%28System.Object%29?displayProperty=nameWithType>方法重写<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>和.NET Framework 中的所有值类型都提供的值相等性的默认实现。  
  
 如果没有当前实例的字段和`obj`是引用类型，<xref:System.ValueType.Equals%2A>方法执行逐字节比较的两个对象在内存中。 否则，它使用反射要比较的相应字段`obj`和此实例。  
  
> [!TIP]
>  尤其是值类型包含所引用类型的字段，则应重写<xref:System.ValueType.Equals%28System.Object%29>方法。 这可以提高性能并使您能够更好地表示的类型的相等性的含义。  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a>说明 [!INCLUDE[wrt](~/includes/wrt-md.md)]  
 当您调用<xref:System.ValueType.Equals%2A>方法[!INCLUDE[wrt](~/includes/wrt-md.md)]结构，它不会覆盖的值类型提供的默认行为<xref:System.ValueType.Equals%2A>。 这是.NET Framework 提供了有关支持的一部分[!INCLUDE[wrt](~/includes/wrt-md.md)](请参阅[.NET Framework 支持的 Windows 应用商店应用程序和 Windows 运行时](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md))。 [!INCLUDE[wrt](~/includes/wrt-md.md)] 结构不能重写<xref:System.ValueType.Equals%2A>，即使它们编写使用 C# 或 Visual Basic 中，因为它们不能包含方法。 (此外，结构中[!INCLUDE[wrt](~/includes/wrt-md.md)]本身不继承<xref:System.ValueType>。)但是，它们显示为具有<xref:System.ValueType.ToString%2A>， <xref:System.ValueType.Equals%2A>，和<xref:System.ValueType.GetHashCode%2A>方法在 C# 或 Visual Basic 代码中，使用它们以及.NET Framework 提供的默认行为，这些方法时。  
  
   
  
## Examples  
 下面的示例演示如何将<xref:System.ValueType.Equals%2A>派生的值的类型可以重写方法。  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="valueType.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回此实例的哈希代码。</summary>
        <returns>一个 32 位带符号整数，它是此实例的哈希代码。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType.GetHashCode%2A>方法将应用于派生自的类型<xref:System.ValueType>。 派生类型的一个或多个字段用于计算返回值。 如果调用派生的类型的`GetHashCode`方法，返回值不是，可能需要适合用作哈希表中的键。 此外，如果一个或多个这些字段的值发生更改，则返回值可能不适合用作哈希表中的键。 在任一情况下，应考虑编写您自己的实现的<xref:System.ValueType.GetHashCode%2A>方法更紧密地表示类型的哈希代码的概念。  
  
 有关详细信息，请参阅 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> 和<xref:System.Collections.Hashtable?displayProperty=nameWithType>。  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a>说明 [!INCLUDE[wrt](~/includes/wrt-md.md)]  
 当您调用<xref:System.ValueType.GetHashCode%2A>方法[!INCLUDE[wrt](~/includes/wrt-md.md)]结构，它不会覆盖的值类型提供的默认行为<xref:System.ValueType.GetHashCode%2A>。 这是.NET Framework 提供了有关支持的一部分[!INCLUDE[wrt](~/includes/wrt-md.md)](请参阅[.NET Framework 支持的 Windows 应用商店应用程序和 Windows 运行时](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md))。 [!INCLUDE[wrt](~/includes/wrt-md.md)] 结构不能重写<xref:System.ValueType.GetHashCode%2A>，即使它们编写使用 C# 或 Visual Basic 中，因为它们不能包含方法。 (此外，结构中[!INCLUDE[wrt](~/includes/wrt-md.md)]本身不继承<xref:System.ValueType>。)但是，它们显示为具有<xref:System.ValueType.ToString%2A>， <xref:System.ValueType.Equals%2A>，和<xref:System.ValueType.GetHashCode%2A>方法在 C# 或 Visual Basic 代码中，使用它们以及.NET Framework 提供的默认行为，这些方法时。  
  
   
  
## Examples  
 下面的示例演示如何将<xref:System.ValueType.GetHashCode%2A>派生的值的类型可以重写方法。  
  
 [!code-cpp[ValueType.Equals Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/ValueType.Equals Example/CPP/source.cpp#1)]
 [!code-csharp[ValueType.Equals Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/ValueType.Equals Example/CS/source.cs#1)]
 [!code-vb[ValueType.Equals Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ValueType.Equals Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ValueType.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="valueType.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回此实例的完全限定类型名称。</summary>
        <returns>完全限定的类型名称</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ValueType.ToString%2A?displayProperty=nameWithType>方法重写<xref:System.Object.ToString%2A?displayProperty=nameWithType>方法，并提供的默认实现`ToString`对于值类型的方法。 (值类型是定义的类型`struct`关键字在 C# 中，并通过`Structure`...`End Structure`在 Visual Basic 中构造。)就功能而言，但是，实现是为与该相同时<xref:System.Object.ToString%2A?displayProperty=nameWithType>： 该方法返回的完全限定的类型名称。  
  
 值定义的类型`struct`C# 中的关键字和`Structure`...`End Structure`通常，在 Visual Basic 中的构造重写<xref:System.ValueType.ToString%2A?displayProperty=nameWithType>方法以提供更有意义的字符串表示形式的值类型。 以下示例演示了差异。 它定义了两个值类型，`EmployeeA`并`EmployeeB`，创建各自的实例并调用其`ToString`方法。 因为`EmployeeA`结构不重写<xref:System.ValueType.ToString%2A?displayProperty=nameWithType>方法，它仅显示的完全限定的类型名称。 `EmployeeB.ToString`方法，但是，提供了有关对象的有意义信息。  
  
 [!code-csharp[System.ValueType.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.ValueType.ToString/cs/ToString2.cs#1)]
 [!code-vb[System.ValueType.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.ValueType.ToString/vb/ToString2.vb#1)]  
  
 请注意，尽管枚举类型也是值类型，它们派生自<xref:System.Enum>类，该类会重写<xref:System.ValueType.ToString%2A?displayProperty=nameWithType>。  
  
## <a name="notes-for-the-windows-runtime"></a>Windows 运行时的注意事项  
 当您调用<xref:System.ValueType.ToString%2A>方法[!INCLUDE[wrt](~/includes/wrt-md.md)]结构，它不会覆盖的值类型提供的默认行为<xref:System.ValueType.ToString%2A>。 这是.NET Framework 提供了有关支持的一部分[!INCLUDE[wrt](~/includes/wrt-md.md)](请参阅[.NET Framework 支持的 Windows 应用商店应用程序和 Windows 运行时](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md))。 [!INCLUDE[wrt](~/includes/wrt-md.md)] 结构不能重写<xref:System.ValueType.ToString%2A>，即使它们编写使用 C# 或 Visual Basic 中，因为它们不能包含方法。 (此外，结构中[!INCLUDE[wrt](~/includes/wrt-md.md)]本身不继承<xref:System.ValueType>。)但是，它们显示为具有<xref:System.ValueType.ToString%2A>， <xref:System.ValueType.Equals%2A>，和<xref:System.ValueType.GetHashCode%2A>方法在 C# 或 Visual Basic 代码中，使用它们以及.NET Framework 提供的默认行为，这些方法时。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>