<Type Name="IEquatable&lt;T&gt;" FullName="System.IEquatable&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f169ba3e3ec57eac1b6bb82d978c55c2b059e3fb" />
    <Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="12/01/2018" />
    <Meta Name="ms.locfileid" Value="52737424" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEquatable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEquatable`1&lt;T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IEquatable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEquatable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEquatable" />
  <TypeSignature Language="F#" Value="type IEquatable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">要比较的对象的类型。</typeparam>
    <summary>定义由值类型或类实现的通用方法，旨在创建特定于类型的方法以确定实例的质量。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此接口实现由其值可以等同 （对于示例、 数字和字符串类） 的类型。 值类型或类实现<xref:System.IEquatable%601.Equals%2A>方法来创建特定于类型的方法适用于确定实例的质量。  
  
> [!NOTE]
>  <xref:System.IComparable%601>接口定义<xref:System.IComparable%601.CompareTo%2A>方法，用于确定的实现类型实例的排序顺序。 <xref:System.IEquatable%601>接口定义<xref:System.IEquatable%601.Equals%2A>方法，这可确定的相等性的实现类型的实例。  
  
 <xref:System.IEquatable%601>接口如由泛型集合对象<xref:System.Collections.Generic.Dictionary%602>， <xref:System.Collections.Generic.List%601>，和<xref:System.Collections.Generic.LinkedList%601>作为此类方法中的相等性测试时`Contains`， `IndexOf`， `LastIndexOf`，和`Remove`。 它应实现的任何对象，可能会存储在泛型集合。  
  
   
  
## Examples  
 有关示例，请参阅<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>方法。  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>替换为的类型参数<see cref="T:System.IEquatable`1" />接口与实现此接口的类型。  
  
如果你实现了<see cref="T:System.IEquatable`1" />，还应该重写的基类实现<see cref="M:System.Object.Equals(System.Object)" />并<see cref="M:System.Object.GetHashCode" />，使其行为与保持一致<see cref="M:System.IEquatable`1.Equals(`0)" />方法。 如果你重写<see cref="M:System.Object.Equals(System.Object)" />，重写的实现也称为中调用静态<see langword="Equals(System.Object, System.Object)" />在类上的方法。 此外，您应重载<see langword="op_Equality" />和<see langword="op_Inequality" />运算符。 这可确保所有测试相等，都返回一致的结果。  
  
 <block subset="none" type="note"><para>  
 有关信息重写<see cref="M:System.Object.Equals(System.Object)" />，请参阅<see cref="M:System.Object.Equals(System.Object)" />一文。  
  
</para></block>  
  
 对于值类型，您应该始终实现<see cref="T:System.IEquatable`1" />并重写<see cref="M:System.Object.Equals(System.Object)" />以提高性能。 <see cref="M:System.Object.Equals(System.Object)" /> 框的值类型和依赖于反射来比较两个值相等。 这两个实现的<see cref="M:System.IEquatable`1.Equals(`0)" />的重写和<see cref="M:System.Object.Equals(System.Object)" />应返回一致的结果。  
  
如果你实现了<see cref="T:System.IEquatable`1" />，还应实现<see cref="T:System.IComparable`1" />如果类型的实例可以有序或排序。 如果您的类型实现<see cref="T:System.IComparable`1" />，几乎总是还实现<see cref="T:System.IEquatable`1" />。</para>
      <para>请注意，有一些设计其中某个类型支持的顺序关系，但可能不同于排序关系相等。 请考虑`Person`类，其中按字母顺序排序。 具有相同名称的两名人员排序相同，但不是同一个人。</para>
    </block>
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.IComparable" />
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IEquatable`1.Equals(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(T other);" />
      <MemberSignature Language="F#" Value="abstract member Equals : 'T -&gt; bool" Usage="iEquatable.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">一个与此对象进行比较的对象。</param>
        <summary>指示当前对象是否等于同一类型的另一个对象。</summary>
        <returns>如果当前对象等于 <paramref name="other" /> 参数，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实现<xref:System.IEquatable%601.Equals%2A>方法用于执行与类型的另一个对象是否相等的测试`T`，与当前对象相同的类型。 <xref:System.IEquatable%601.Equals(%600)>在以下情况下调用方法：  
  
-   当`Equals`调用方法和`other`自变量是类型的强类型化对象`T`。 (如果`other`的类型不是`T`，基<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>调用方法。 两种方法，<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>产品/服务稍有更好的性能。)  
  
-   许多泛型集合的对象的搜索方法调用时。 这些类型和类的方法的一些因素包括：  
  
    -   一些的泛型重载<xref:System.Array.BinarySearch%2A>方法。  
  
    -   搜索方法<xref:System.Collections.Generic.List%601>类，其中包括<xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType>， <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>， <xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType>，和<xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType>。  
  
    -   搜索方法<xref:System.Collections.Generic.Dictionary%602>类，其中包括<xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A>和<xref:System.Collections.Generic.IDictionary%602.Remove%2A>。  
  
    -   搜索方法的泛型<xref:System.Collections.Generic.LinkedList%601>类，其中包括<xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType>和<xref:System.Collections.Generic.LinkedList%601.Remove%2A>。  
  
 换而言之，若要处理类的对象，将存储在数组或泛型集合对象的可能性，它是实现一个好办法<xref:System.IEquatable%601>，以便可以轻松地标识和操作该对象。  
  
 在实现时<xref:System.IEquatable%601.Equals%2A>方法，相应地为指定的泛型类型参数的类型定义相等性。 例如，如果类型参数是<xref:System.Int32>，定义的两个 32 位有符号整数进行比较的相等性。  
  
   
  
## Examples  
 下面的示例演示的部分实现`Person`类，该类实现<xref:System.IEquatable%601>有两个属性，并`LastName`和`SSN`。 <xref:System.IEquatable%601.Equals%2A>方法将返回`True`如果`SSN`属性的两个`Person`对象完全相同; 否则，它将返回`False`。  
  
 [!code-csharp[System.GenericIEquatable.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/EqualsEx2.cs#3)]
 [!code-vb[System.GenericIEquatable.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/EqualsEx2.vb#3)]  
  
 `Person` 然后可以将对象存储在<xref:System.Collections.Generic.List%601>对象，并可以由标识`Contains`方法，如以下示例所示。  
  
 [!code-csharp[System.GenericIEquatable.Equals#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/Snippet12.cs#12)]
 [!code-vb[System.GenericIEquatable.Equals#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/Snippet12.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>如果你实现了<see cref="M:System.IEquatable`1.Equals(`0)" />，还应该重写的基类实现<see cref="M:System.Object.Equals(System.Object)" />并<see cref="M:System.Object.GetHashCode" />，使其行为与保持一致<see cref="M:System.IEquatable`1.Equals(`0)" />方法。 如果你重写<see cref="M:System.Object.Equals(System.Object)" />，重写的实现也称为中调用静态<see langword="Equals(System.Object, System.Object)" />在类上的方法。 此外，您应重载<see langword="op_Equality" />和<see langword="op_Inequality" />运算符。 这可确保所有测试相等，都返回一致的结果的示例所示。</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>