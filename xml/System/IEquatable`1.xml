<Type Name="IEquatable&lt;T&gt;" FullName="System.IEquatable&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c71b1ce8bef586f2453604f33dc3ca2e6f5af9bc" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37728034" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEquatable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEquatable`1&lt;T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.IEquatable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEquatable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEquatable" />
  <TypeSignature Language="F#" Value="type IEquatable&lt;'T&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="dee93-101">要比较的对象的类型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="dee93-101">The type of objects to compare.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="dee93-102">定义由值类型或类实现的通用方法，旨在创建特定于类型的方法以确定实例的质量。</span>
      <span class="sxs-lookup">
        <span data-stu-id="dee93-102">Defines a generalized method that a value type or class implements to create a type-specific method for determining equality of instances.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dee93-103">此接口实现由其值可以等同 （对于示例、 数字和字符串类） 的类型。</span><span class="sxs-lookup"><span data-stu-id="dee93-103">This interface is implemented by types whose values can be equated (for example, the numeric and string classes).</span></span> <span data-ttu-id="dee93-104">值类型或类实现<xref:System.IEquatable%601.Equals%2A>方法来创建特定于类型的方法适用于确定实例的质量。</span><span class="sxs-lookup"><span data-stu-id="dee93-104">A value type or class implements the <xref:System.IEquatable%601.Equals%2A> method to create a type-specific method suitable for determining equality of instances.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="dee93-105"><xref:System.IComparable%601>接口定义<xref:System.IComparable%601.CompareTo%2A>方法，用于确定的实现类型实例的排序顺序。</span><span class="sxs-lookup"><span data-stu-id="dee93-105">The <xref:System.IComparable%601> interface defines the <xref:System.IComparable%601.CompareTo%2A> method, which determines the sort order of instances of the implementing type.</span></span> <span data-ttu-id="dee93-106"><xref:System.IEquatable%601>接口定义<xref:System.IEquatable%601.Equals%2A>方法，这可确定的相等性的实现类型的实例。</span><span class="sxs-lookup"><span data-stu-id="dee93-106">The <xref:System.IEquatable%601> interface defines the <xref:System.IEquatable%601.Equals%2A> method, which determines the equality of instances of the implementing type.</span></span>  
  
 <span data-ttu-id="dee93-107"><xref:System.IEquatable%601>接口如由泛型集合对象<xref:System.Collections.Generic.Dictionary%602>， <xref:System.Collections.Generic.List%601>，和<xref:System.Collections.Generic.LinkedList%601>作为此类方法中的相等性测试时`Contains`， `IndexOf`， `LastIndexOf`，和`Remove`。</span><span class="sxs-lookup"><span data-stu-id="dee93-107">The <xref:System.IEquatable%601> interface is used by generic collection objects such as <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.Generic.List%601>, and <xref:System.Collections.Generic.LinkedList%601> when testing for equality in such methods as `Contains`, `IndexOf`, `LastIndexOf`, and `Remove`.</span></span> <span data-ttu-id="dee93-108">它应实现的任何对象，可能会存储在泛型集合。</span><span class="sxs-lookup"><span data-stu-id="dee93-108">It should be implemented for any object that might be stored in a generic collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dee93-109">有关示例，请参阅<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="dee93-109">See the example for the <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="dee93-110">
        <para>替换为的类型参数<see cref="T:System.IEquatable`1" />接口与实现此接口的类型。如果你实现了<see cref="T:System.IEquatable`1" />，还应该重写的基类实现<see cref="M:System.Object.Equals(System.Object)" />并<see cref="M:System.Object.GetHashCode" />，使其行为与保持一致<see cref="M:System.IEquatable`1.Equals(`0)" />方法。如果你重写<see cref="M:System.Object.Equals(System.Object)" />，重写的实现也称为中调用静态<see langword="Equals(System.Object, System.Object)" />在类上的方法。此外，您应重载<see langword="op_Equality" />和<see langword="op_Inequality" />运算符。这可确保所有测试相等，都返回一致的结果。<block subset="none" type="note"><para> 有关信息重写<see cref="M:System.Object.Equals(System.Object)" />，请参阅<see cref="M:System.Object.Equals(System.Object)" />一文。</para></block>  对于值类型，您应该始终实现<see cref="T:System.IEquatable`1" />并重写<see cref="M:System.Object.Equals(System.Object)" />以提高性能。<see cref="M:System.Object.Equals(System.Object)" />框值类型，并依赖于反射来比较两个值是否相等。这两个实现的<see cref="M:System.IEquatable`1.Equals(`0)" />的重写和<see cref="M:System.Object.Equals(System.Object)" />应返回一致的结果。如果你实现了<see cref="T:System.IEquatable`1" />，还应实现<see cref="T:System.IComparable`1" />如果类型的实例可以有序或排序。如果您的类型实现<see cref="T:System.IComparable`1" />，几乎总是还实现<see cref="T:System.IEquatable`1" />。</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="dee93-110">
          <para>Replace the type parameter of the <see cref="T:System.IEquatable`1" /> interface with the type that is implementing this interface.  If you implement <see cref="T:System.IEquatable`1" />, you should also override the base class implementations of <see cref="M:System.Object.Equals(System.Object)" /> and <see cref="M:System.Object.GetHashCode" /> so that their behavior is consistent with that of the <see cref="M:System.IEquatable`1.Equals(`0)" /> method. If you do override <see cref="M:System.Object.Equals(System.Object)" />, your overridden implementation is also called in calls to the static <see langword="Equals(System.Object, System.Object)" /> method on your class. In addition, you should overload the <see langword="op_Equality" /> and <see langword="op_Inequality" /> operators. This ensures that all tests for equality return consistent results.  <block subset="none" type="note"><para> For information on overriding <see cref="M:System.Object.Equals(System.Object)" />, see the <see cref="M:System.Object.Equals(System.Object)" /> article.  </para></block>  For a value type, you should always implement <see cref="T:System.IEquatable`1" /> and override <see cref="M:System.Object.Equals(System.Object)" /> for better performance. <see cref="M:System.Object.Equals(System.Object)" /> boxes value types and relies on reflection to compare two values for equality. Both your implementation of <see cref="M:System.IEquatable`1.Equals(`0)" /> and your override of <see cref="M:System.Object.Equals(System.Object)" /> should return consistent results.  If you implement <see cref="T:System.IEquatable`1" />, you should also implement <see cref="T:System.IComparable`1" /> if instances of your type can be ordered or sorted. If your type implements <see cref="T:System.IComparable`1" />, you almost always also implement <see cref="T:System.IEquatable`1" />.</para>
        </span>
      </span>
      <span data-ttu-id="dee93-111">
        <para>请注意，有一些设计其中某个类型支持的顺序关系，但可能不同于排序关系相等。请考虑按字母顺序排序其中一个 Person 类。具有相同名称的两名人员排序相同，但不是同一个人。</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="dee93-111">
          <para>Note that there are some designs where a type supports an order relation, but equality may be distinct from an ordering relation. Consider a `Person` class where you sort alphabetically. Two people with the same name sort the same, but are not the same person.</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.IComparable`1" />
    <altmember cref="T:System.IComparable" />
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (T other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(!T other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IEquatable`1.Equals(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(T other);" />
      <MemberSignature Language="F#" Value="abstract member Equals : 'T -&gt; bool" Usage="iEquatable.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="T" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="dee93-112">一个与此对象进行比较的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="dee93-112">An object to compare with this object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="dee93-113">指示当前对象是否等于同一类型的另一个对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="dee93-113">Indicates whether the current object is equal to another object of the same type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="dee93-114">如果当前对象等于 <paramref name="other" /> 参数，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="dee93-114">
              <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dee93-115">实现<xref:System.IEquatable%601.Equals%2A>方法用于执行与类型的另一个对象是否相等的测试`T`，与当前对象相同的类型。</span><span class="sxs-lookup"><span data-stu-id="dee93-115">The implementation of the <xref:System.IEquatable%601.Equals%2A> method is intended to perform a test for equality with another object of type `T`, the same type as the current object.</span></span> <span data-ttu-id="dee93-116"><xref:System.IEquatable%601.Equals(%600)>在以下情况下调用方法：</span><span class="sxs-lookup"><span data-stu-id="dee93-116">The <xref:System.IEquatable%601.Equals(%600)> method is called in the following circumstances:</span></span>  
  
-   <span data-ttu-id="dee93-117">当`Equals`调用方法和`other`自变量是类型的强类型化对象`T`。</span><span class="sxs-lookup"><span data-stu-id="dee93-117">When the `Equals` method is called and the `other` argument is a strongly-typed object of type `T`.</span></span> <span data-ttu-id="dee93-118">(如果`other`的类型不是`T`，基<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>调用方法。</span><span class="sxs-lookup"><span data-stu-id="dee93-118">(If `other` is not of type `T`, the base <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="dee93-119">两种方法，<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>产品/服务稍有更好的性能。)</span><span class="sxs-lookup"><span data-stu-id="dee93-119">Of the two methods, <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> offers slightly better performance.)</span></span>  
  
-   <span data-ttu-id="dee93-120">许多泛型集合的对象的搜索方法调用时。</span><span class="sxs-lookup"><span data-stu-id="dee93-120">When the search methods of a number of generic collection objects are called.</span></span> <span data-ttu-id="dee93-121">这些类型和类的方法的一些因素包括：</span><span class="sxs-lookup"><span data-stu-id="dee93-121">Some of these types and their methods include the following:</span></span>  
  
    -   <span data-ttu-id="dee93-122">一些的泛型重载<xref:System.Array.BinarySearch%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="dee93-122">Some of the generic overloads of the <xref:System.Array.BinarySearch%2A> method.</span></span>  
  
    -   <span data-ttu-id="dee93-123">搜索方法<xref:System.Collections.Generic.List%601>类，其中包括<xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType>， <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>， <xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType>，和<xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="dee93-123">The search methods of the <xref:System.Collections.Generic.List%601> class, including <xref:System.Collections.Generic.List%601.Contains%28%600%29?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A?displayProperty=nameWithType>, and <xref:System.Collections.Generic.List%601.Remove%2A?displayProperty=nameWithType>.</span></span>  
  
    -   <span data-ttu-id="dee93-124">搜索方法<xref:System.Collections.Generic.Dictionary%602>类，其中包括<xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A>和<xref:System.Collections.Generic.IDictionary%602.Remove%2A>。</span><span class="sxs-lookup"><span data-stu-id="dee93-124">The search methods of the <xref:System.Collections.Generic.Dictionary%602> class, including <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> and <xref:System.Collections.Generic.IDictionary%602.Remove%2A>.</span></span>  
  
    -   <span data-ttu-id="dee93-125">搜索方法的泛型<xref:System.Collections.Generic.LinkedList%601>类，其中包括<xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType>和<xref:System.Collections.Generic.LinkedList%601.Remove%2A>。</span><span class="sxs-lookup"><span data-stu-id="dee93-125">The search methods of the generic <xref:System.Collections.Generic.LinkedList%601> class, including <xref:System.Collections.Generic.LinkedList%601.Contains%2A?displayProperty=nameWithType> and <xref:System.Collections.Generic.LinkedList%601.Remove%2A>.</span></span>  
  
 <span data-ttu-id="dee93-126">换而言之，若要处理类的对象，将存储在数组或泛型集合对象的可能性，它是实现一个好办法<xref:System.IEquatable%601>，以便可以轻松地标识和操作该对象。</span><span class="sxs-lookup"><span data-stu-id="dee93-126">In other words, to handle the possibility that objects of a class will be stored in an array or a generic collection object, it is a good idea to implement <xref:System.IEquatable%601> so that the object can be easily identified and manipulated.</span></span>  
  
 <span data-ttu-id="dee93-127">在实现时<xref:System.IEquatable%601.Equals%2A>方法，相应地为指定的泛型类型参数的类型定义相等性。</span><span class="sxs-lookup"><span data-stu-id="dee93-127">When implementing the <xref:System.IEquatable%601.Equals%2A> method, define equality appropriately for the type specified by the generic type argument.</span></span> <span data-ttu-id="dee93-128">例如，如果类型参数是<xref:System.Int32>，定义的两个 32 位有符号整数进行比较的相等性。</span><span class="sxs-lookup"><span data-stu-id="dee93-128">For example, if the type argument is <xref:System.Int32>, define equality appropriately for the comparison of two 32-bit signed integers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dee93-129">下面的示例演示的部分实现`Person`类，该类实现<xref:System.IEquatable%601>有两个属性，并`LastName`和`SSN`。</span><span class="sxs-lookup"><span data-stu-id="dee93-129">The following example shows the partial implementation of a `Person` class that implements <xref:System.IEquatable%601> and has two properties, `LastName` and `SSN`.</span></span> <span data-ttu-id="dee93-130"><xref:System.IEquatable%601.Equals%2A>方法将返回`True`如果`SSN`属性的两个`Person`对象完全相同; 否则，它将返回`False`。</span><span class="sxs-lookup"><span data-stu-id="dee93-130">The <xref:System.IEquatable%601.Equals%2A> method returns `True` if the `SSN` property of two `Person` objects is identical; otherwise, it returns `False`.</span></span>  
  
 [!code-csharp[System.GenericIEquatable.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/EqualsEx2.cs#3)]
 [!code-vb[System.GenericIEquatable.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/EqualsEx2.vb#3)]  
  
 <span data-ttu-id="dee93-131">`Person` 然后可以将对象存储在<xref:System.Collections.Generic.List%601>对象，并可以由标识`Contains`方法，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="dee93-131">`Person` objects can then be stored in a <xref:System.Collections.Generic.List%601> object and can be identified by the `Contains` method, as the following example shows.</span></span>  
  
 [!code-csharp[System.GenericIEquatable.Equals#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/cs/Snippet12.cs#12)]
 [!code-vb[System.GenericIEquatable.Equals#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GenericIEquatable.Equals/vb/Snippet12.vb#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="dee93-132">
            <para>如果你实现了<see cref="M:System.IEquatable`1.Equals(`0)" />，还应该重写的基类实现<see cref="M:System.Object.Equals(System.Object)" />并<see cref="M:System.Object.GetHashCode" />，使其行为与保持一致<see cref="M:System.IEquatable`1.Equals(`0)" />方法。如果你重写<see cref="M:System.Object.Equals(System.Object)" />，重写的实现也称为中调用静态<see langword="Equals(System.Object, System.Object)" />在类上的方法。此外，您应重载<see langword="op_Equality" />和<see langword="op_Inequality" />运算符。这可确保所有测试相等，都返回一致的结果的示例所示。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="dee93-132">
              <para>If you implement <see cref="M:System.IEquatable`1.Equals(`0)" />, you should also override the base class implementations of <see cref="M:System.Object.Equals(System.Object)" /> and <see cref="M:System.Object.GetHashCode" /> so that their behavior is consistent with that of the <see cref="M:System.IEquatable`1.Equals(`0)" /> method. If you do override <see cref="M:System.Object.Equals(System.Object)" />, your overridden implementation is also called in calls to the static <see langword="Equals(System.Object, System.Object)" /> method on your class. In addition, you should overload the <see langword="op_Equality" /> and <see langword="op_Inequality" /> operators. This ensures that all tests for equality return consistent results, which the example illustrates.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>