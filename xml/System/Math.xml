<Type Name="Math" FullName="System.Math">
  <TypeSignature Language="C#" Value="public static class Math" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Math extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Math" />
  <TypeSignature Language="VB.NET" Value="Public Class Math" />
  <TypeSignature Language="C++ CLI" Value="public ref class Math abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="fa7eb-101">为三角函数、对数函数和其他通用数学函数提供常数和静态方法。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-101">Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-102">下面的示例使用多个数学和三角函数函数从<xref:System.Math>类来计算梯形内部角度。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-102">The following example uses several mathematical and trigonometric functions from the <xref:System.Math> class to calculate the inner angles of a trapezoid.</span></span>  
  
 [!code-cpp[MathSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MathSample/CPP/mathsample.cpp#1)]
 [!code-csharp[MathSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MathSample/CS/mathsample.cs#1)]
 [!code-vb[MathSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MathSample/VB/mathsample.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Abs">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fa7eb-103">返回指定数字的绝对值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-103">Returns the absolute value of a specified number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static decimal Abs (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Abs(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Abs(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="fa7eb-104">一个大于或等于 <see cref="F:System.Decimal.MinValue" /> 但小于或等于 <see cref="F:System.Decimal.MaxValue" /> 的数字。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-104">A number that is greater than or equal to <see cref="F:System.Decimal.MinValue" />, but less than or equal to <see cref="F:System.Decimal.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="fa7eb-105">返回 <see cref="T:System.Decimal" /> 数字的绝对值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-105">Returns the absolute value of a <see cref="T:System.Decimal" /> number.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-106">十进制数 x，满足 0 ≤ x ≤ <see cref="F:System.Decimal.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-106">A decimal number, x, such that 0 ≤ x ≤<see cref="F:System.Decimal.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-107">绝对值的数值的<xref:System.Decimal>为不带符号的数值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-107">The absolute value of a <xref:System.Decimal> is its numeric value without its sign.</span></span> <span data-ttu-id="fa7eb-108">例如，绝对值的数值的 1.2 和-为 1.2。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-108">For example, the absolute value of both 1.2 and -1.2 is 1.2.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa7eb-109">下面的示例使用<xref:System.Math.Abs%28System.Decimal%29>方法以获取数的绝对值的数值<xref:System.Decimal>值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-109">The following example uses the <xref:System.Math.Abs%28System.Decimal%29> method to get the absolute value of a number of <xref:System.Decimal> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/Abs1.cs#1)]
 [!code-vb[System.Math.Abs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/Abs1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static double Abs (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Abs(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Abs(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="fa7eb-110">一个大于或等于 <see cref="F:System.Double.MinValue" /> 但小于或等于 <see cref="F:System.Double.MaxValue" /> 的数字。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-110">A number that is greater than or equal to <see cref="F:System.Double.MinValue" />, but less than or equal to <see cref="F:System.Double.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="fa7eb-111">返回双精度浮点数字的绝对值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-111">Returns the absolute value of a double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-112">双精度浮点数 x，满足 0 ≤ x ≤ <see cref="F:System.Double.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-112">A double-precision floating-point number, x, such that 0 ≤ x ≤<see cref="F:System.Double.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-113">绝对值的数值的<xref:System.Double>为不带符号的数值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-113">The absolute value of a <xref:System.Double> is its numeric value without its sign.</span></span> <span data-ttu-id="fa7eb-114">例如，同时 1.2 e 03 和-1.2 e 03 绝对值的数值是 1.2 e 03。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-114">For example, the absolute value of both 1.2e03 and -1.2e03 is 1.2e03.</span></span>  
  
 <span data-ttu-id="fa7eb-115">如果`value`等同于<xref:System.Double.NegativeInfinity>或<xref:System.Double.PositiveInfinity>，则返回值是<xref:System.Double.PositiveInfinity>。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-115">If `value` is equal to <xref:System.Double.NegativeInfinity> or <xref:System.Double.PositiveInfinity>, the return value is <xref:System.Double.PositiveInfinity>.</span></span> <span data-ttu-id="fa7eb-116">如果`value`等同于<xref:System.Double.NaN>，则返回值是<xref:System.Double.NaN>。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-116">If `value` is equal to <xref:System.Double.NaN>, the return value is <xref:System.Double.NaN>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa7eb-117">下面的示例使用<xref:System.Math.Abs%28System.Double%29>方法以获取数的绝对值的数值<xref:System.Double>值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-117">The following example uses the <xref:System.Math.Abs%28System.Double%29> method to get the absolute value of a number of <xref:System.Double> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs2.cs#2)]
 [!code-vb[System.Math.Abs#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static short Abs (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Abs(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Abs(short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="fa7eb-118">一个大于 <see cref="F:System.Int16.MinValue" /> 但小于或等于 <see cref="F:System.Int16.MaxValue" /> 的数字。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-118">A number that is greater than <see cref="F:System.Int16.MinValue" />, but less than or equal to <see cref="F:System.Int16.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="fa7eb-119">返回 16 位有符号整数的绝对值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-119">Returns the absolute value of a 16-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-120">16 位有符号整数 x，满足 0 ≤ x ≤ <see cref="F:System.Int16.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-120">A 16-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.Int16.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-121">绝对值的数值的<xref:System.Int16>为不带符号的数值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-121">The absolute value of an <xref:System.Int16> is its numeric value without its sign.</span></span> <span data-ttu-id="fa7eb-122">例如，123 和-绝对值为 123。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-122">For example, the absolute value of both 123 and -123 is 123.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa7eb-123">下面的示例使用<xref:System.Math.Abs%28System.Int16%29>方法以获取数的绝对值的数值<xref:System.Int16>值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-123">The following example uses the <xref:System.Math.Abs%28System.Int16%29> method to get the absolute value of a number of <xref:System.Int16> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs3.cs#3)]
 [!code-vb[System.Math.Abs#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="fa7eb-124"><paramref name="value" /> 等于 <see cref="F:System.Int16.MinValue" />。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-124"><paramref name="value" /> equals <see cref="F:System.Int16.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static int Abs (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Abs(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Abs(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="fa7eb-125">一个大于 <see cref="F:System.Int32.MinValue" /> 但小于或等于 <see cref="F:System.Int32.MaxValue" /> 的数字。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-125">A number that is greater than <see cref="F:System.Int32.MinValue" />, but less than or equal to <see cref="F:System.Int32.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="fa7eb-126">返回 32 位有符号整数的绝对值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-126">Returns the absolute value of a 32-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-127">32 位有符号整数 x，满足 0 ≤ x ≤ <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-127">A 32-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.Int32.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-128">绝对值的数值的<xref:System.Int32>为不带符号的数值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-128">The absolute value of an <xref:System.Int32> is its numeric value without its sign.</span></span> <span data-ttu-id="fa7eb-129">例如，123 和-绝对值为 123。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-129">For example, the absolute value of both 123 and -123 is 123.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa7eb-130">下面的示例使用<xref:System.Math.Abs%28System.Int32%29>方法以获取数的绝对值的数值<xref:System.Int32>值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-130">The following example uses the <xref:System.Math.Abs%28System.Int32%29> method to get the absolute value of a number of <xref:System.Int32> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs4.cs#4)]
 [!code-vb[System.Math.Abs#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="fa7eb-131"><paramref name="value" /> 等于 <see cref="F:System.Int32.MinValue" />。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-131"><paramref name="value" /> equals <see cref="F:System.Int32.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static long Abs (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Abs(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Abs(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="fa7eb-132">一个大于 <see cref="F:System.Int64.MinValue" /> 但小于或等于 <see cref="F:System.Int64.MaxValue" /> 的数字。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-132">A number that is greater than <see cref="F:System.Int64.MinValue" />, but less than or equal to <see cref="F:System.Int64.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="fa7eb-133">返回 64 位有符号整数的绝对值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-133">Returns the absolute value of a 64-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-134">64 位有符号整数 x，满足 0 ≤ x ≤ <see cref="F:System.Int64.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-134">A 64-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.Int64.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-135">绝对值的数值的<xref:System.Int64>为不带符号的数值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-135">The absolute value of an <xref:System.Int64> is its numeric value without its sign.</span></span> <span data-ttu-id="fa7eb-136">例如，123 和-绝对值为 123。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-136">For example, the absolute value of both 123 and -123 is 123.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa7eb-137">下面的示例使用<xref:System.Math.Abs%28System.Int64%29>方法以获取数的绝对值的数值<xref:System.Int64>值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-137">The following example uses the <xref:System.Math.Abs%28System.Int64%29> method to get the absolute value of a number of <xref:System.Int64> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs5.cs#5)]
 [!code-vb[System.Math.Abs#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs5.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="fa7eb-138"><paramref name="value" /> 等于 <see cref="F:System.Int64.MinValue" />。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-138"><paramref name="value" /> equals <see cref="F:System.Int64.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static sbyte Abs (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Abs(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte Abs(System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="fa7eb-139">一个大于 <see cref="F:System.SByte.MinValue" /> 但小于或等于 <see cref="F:System.SByte.MaxValue" /> 的数字。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-139">A number that is greater than <see cref="F:System.SByte.MinValue" />, but less than or equal to <see cref="F:System.SByte.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="fa7eb-140">返回 8 位有符号整数的绝对值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-140">Returns the absolute value of an 8-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-141">8 位有符号整数 x，满足 0 ≤ x ≤ <see cref="F:System.SByte.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-141">An 8-bit signed integer, x, such that 0 ≤ x ≤<see cref="F:System.SByte.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-142">有符号字节的绝对值的数值为不带符号的数值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-142">The absolute value of a signed byte is its numeric value without its sign.</span></span> <span data-ttu-id="fa7eb-143">例如，12 和-12 的绝对值的数值为 12。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-143">For example, the absolute value of both 12 and -12 is 12.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa7eb-144">下面的示例使用<xref:System.Math.Abs%28System.SByte%29>方法以获取数的绝对值的数值<xref:System.SByte>值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-144">The following example uses the <xref:System.Math.Abs%28System.SByte%29> method to get the absolute value of a number of <xref:System.SByte> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs6.cs#6)]
 [!code-vb[System.Math.Abs#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="fa7eb-145"><paramref name="value" /> 等于 <see cref="F:System.SByte.MinValue" />。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-145"><paramref name="value" /> equals <see cref="F:System.SByte.MinValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Abs">
      <MemberSignature Language="C#" Value="public static float Abs (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Abs(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Abs(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Abs (value As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Abs(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="fa7eb-146">一个大于或等于 <see cref="F:System.Single.MinValue" /> 但小于或等于 <see cref="F:System.Single.MaxValue" /> 的数字。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-146">A number that is greater than or equal to <see cref="F:System.Single.MinValue" />, but less than or equal to <see cref="F:System.Single.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="fa7eb-147">返回单精度浮点数字的绝对值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-147">Returns the absolute value of a single-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-148">单精度浮点数 x，满足 0 ≤ x ≤ <see cref="F:System.Single.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-148">A single-precision floating-point number, x, such that 0 ≤ x ≤<see cref="F:System.Single.MaxValue" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-149">绝对值的数值的<xref:System.Single>为不带符号的数值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-149">The absolute value of a <xref:System.Single> is its numeric value without its sign.</span></span> <span data-ttu-id="fa7eb-150">例如，这两个 1.2 e 绝对值-03 和 1.2 e 03 是 1.2 e 03。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-150">For example, the absolute value of both 1.2e-03 and -1.2e03 is 1.2e03.</span></span>  
  
 <span data-ttu-id="fa7eb-151">如果`value`等同于<xref:System.Single.NegativeInfinity>或<xref:System.Single.PositiveInfinity>，则返回值是<xref:System.Single.PositiveInfinity>。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-151">If `value` is equal to <xref:System.Single.NegativeInfinity> or <xref:System.Single.PositiveInfinity>, the return value is <xref:System.Single.PositiveInfinity>.</span></span> <span data-ttu-id="fa7eb-152">如果`value`等同于<xref:System.Single.NaN>，则返回值是<xref:System.Single.NaN>。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-152">If `value` is equal to <xref:System.Single.NaN>, the return value is <xref:System.Single.NaN>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa7eb-153">下面的示例使用<xref:System.Math.Abs%28System.Single%29>方法以获取数的绝对值的数值<xref:System.Single>值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-153">The following example uses the <xref:System.Math.Abs%28System.Single%29> method to get the absolute value of a number of <xref:System.Single> values.</span></span>  
  
 [!code-csharp[System.Math.Abs#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Abs/cs/abs7.cs#7)]
 [!code-vb[System.Math.Abs#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Abs/vb/abs7.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acos">
      <MemberSignature Language="C#" Value="public static double Acos (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Acos(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Acos(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Acos (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Acos(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="fa7eb-154">表示余弦值的数字，其中 <c>d</c> 必须大于或等于 -1 但小于或等于 1。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-154">A number representing a cosine, where <c>d</c> must be greater than or equal to -1, but less than or equal to 1.</span></span></param>
        <summary><span data-ttu-id="fa7eb-155">返回余弦值为指定数字的角度。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-155">Returns the angle whose cosine is the specified number.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-156">角度 θ，以弧度为单位，满足 0 ≤θ≤π</span><span class="sxs-lookup"><span data-stu-id="fa7eb-156">An angle, θ, measured in radians, such that 0 ≤θ≤π</span></span>  
  
 <span data-ttu-id="fa7eb-157">或</span><span class="sxs-lookup"><span data-stu-id="fa7eb-157">-or-</span></span>  
  
 <span data-ttu-id="fa7eb-158">如果 <paramref name="d" /> &lt; -1 或 <paramref name="d" /> &gt; 1 或 <paramref name="d" /> 等于 <see cref="F:System.Double.NaN" />，则为 <see cref="F:System.Double.NaN" />。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-158"><see cref="F:System.Double.NaN" /> if <paramref name="d" /> &lt; -1 or <paramref name="d" /> &gt; 1 or <paramref name="d" /> equals <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-159">返回的值乘以 180 /<xref:System.Math.PI?displayProperty=nameWithType>将从弧度转换为度。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-159">Multiply the return value by 180/<xref:System.Math.PI?displayProperty=nameWithType> to convert from radians to degrees.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa7eb-160">下面的示例使用<xref:System.Math.Acos%2A>方法有助于在给定梯形内部角度计算。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-160">The following example uses the <xref:System.Math.Acos%2A> method to assist in the computation of the inner angles of a given trapezoid.</span></span>  
  
 [!code-cpp[MathSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MathSample/CPP/mathsample.cpp#1)]
 [!code-csharp[MathSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MathSample/CS/mathsample.cs#1)]
 [!code-vb[MathSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MathSample/VB/mathsample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Acosh">
      <MemberSignature Language="C#" Value="public static double Acosh (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Acosh(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Acosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Acosh (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Acosh(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Asin">
      <MemberSignature Language="C#" Value="public static double Asin (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Asin(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Asin(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Asin (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Asin(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="fa7eb-161">表示正弦值的数字，其中 <c>d</c> 必须大于或等于 -1 但小于或等于 1。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-161">A number representing a sine, where <c>d</c> must be greater than or equal to -1, but less than or equal to 1.</span></span></param>
        <summary><span data-ttu-id="fa7eb-162">返回正弦值为指定数字的角度。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-162">Returns the angle whose sine is the specified number.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-163">角度 θ，以弧度为单位，满足 -π/2 ≤θ≤π/2</span><span class="sxs-lookup"><span data-stu-id="fa7eb-163">An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2</span></span>  
  
 <span data-ttu-id="fa7eb-164">或</span><span class="sxs-lookup"><span data-stu-id="fa7eb-164">-or-</span></span>  
  
 <span data-ttu-id="fa7eb-165">如果 <paramref name="d" /> &lt; -1 或 <paramref name="d" /> &gt; 1 或 <paramref name="d" /> 等于 <see cref="F:System.Double.NaN" />，则为 <see cref="F:System.Double.NaN" />。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-165"><see cref="F:System.Double.NaN" /> if <paramref name="d" /> &lt; -1 or <paramref name="d" /> &gt; 1 or <paramref name="d" /> equals <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-166">返回值为正从 x 轴; 表示逆时针旋转的角度返回值为负表示顺时针旋转的角度。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-166">A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle.</span></span>  
  
 <span data-ttu-id="fa7eb-167">返回的值乘以 180 /<xref:System.Math.PI?displayProperty=nameWithType>将从弧度转换为度。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-167">Multiply the return value by 180/<xref:System.Math.PI?displayProperty=nameWithType> to convert from radians to degrees.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa7eb-168">下面的示例使用<xref:System.Math.Asin%2A>有助于在给定梯形内部角度计算。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-168">The following example uses <xref:System.Math.Asin%2A> to assist in the computation of the inner angles of a given trapezoid.</span></span>  
  
 [!code-cpp[MathSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MathSample/CPP/mathsample.cpp#1)]
 [!code-csharp[MathSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MathSample/CS/mathsample.cs#1)]
 [!code-vb[MathSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MathSample/VB/mathsample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Asinh">
      <MemberSignature Language="C#" Value="public static double Asinh (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Asinh(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Asinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Asinh (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Asinh(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan">
      <MemberSignature Language="C#" Value="public static double Atan (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Atan(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Atan(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atan (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Atan(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="fa7eb-169">表示正切值的数字。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-169">A number representing a tangent.</span></span></param>
        <summary><span data-ttu-id="fa7eb-170">返回正切值为指定数字的角度。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-170">Returns the angle whose tangent is the specified number.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-171">角度 θ，以弧度为单位，满足 -π/2 ≤θ≤π/2。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-171">An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2.</span></span>  
  
 <span data-ttu-id="fa7eb-172">或</span><span class="sxs-lookup"><span data-stu-id="fa7eb-172">-or-</span></span>  
  
 <span data-ttu-id="fa7eb-173">如果 <paramref name="d" /> 等于 <see cref="F:System.Double.NaN" />，则为 <see cref="F:System.Double.NaN" />；如果 <paramref name="d" /> 等于 <see cref="F:System.Double.NegativeInfinity" />，则 -π/2 舍入为双精度值 (-1.5707963267949)；或者如果 <paramref name="d" /> 等于 <see cref="F:System.Double.PositiveInfinity" />，则 π/2 舍入为双精度值 (1.5707963267949)。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-173"><see cref="F:System.Double.NaN" /> if <paramref name="d" /> equals <see cref="F:System.Double.NaN" />, -π/2 rounded to double precision (-1.5707963267949) if <paramref name="d" /> equals <see cref="F:System.Double.NegativeInfinity" />, or π/2 rounded to double precision (1.5707963267949) if <paramref name="d" /> equals <see cref="F:System.Double.PositiveInfinity" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-174">返回值为正从 x 轴; 表示逆时针旋转的角度返回值为负表示顺时针旋转的角度。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-174">A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle.</span></span>  
  
 <span data-ttu-id="fa7eb-175">返回的值乘以 180 /<xref:System.Math.PI?displayProperty=nameWithType>将从弧度转换为度。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-175">Multiply the return value by 180/<xref:System.Math.PI?displayProperty=nameWithType> to convert from radians to degrees.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa7eb-176">下面的示例演示如何计算一个值的反正切值并将其显示到控制台。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-176">The following example demonstrates how to calculate the arctangent of a value and display it to the console.</span></span>  
  
 [!code-cpp[math.atanx#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.atanx/CPP/atan.cpp#1)]
 [!code-csharp[math.atanx#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.atanx/CS/atan.cs#1)]
 [!code-vb[math.atanx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.atanx/VB/atan.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Atan2">
      <MemberSignature Language="C#" Value="public static double Atan2 (double y, double x);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Atan2(float64 y, float64 x) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Atan2(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atan2 (y As Double, x As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Atan2(double y, double x);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="y" Type="System.Double" />
        <Parameter Name="x" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="y"><span data-ttu-id="fa7eb-177">点的 y 坐标。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-177">The y coordinate of a point.</span></span></param>
        <param name="x"><span data-ttu-id="fa7eb-178">点的 x 坐标。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-178">The x coordinate of a point.</span></span></param>
        <summary><span data-ttu-id="fa7eb-179">返回正切值为两个指定数字的商的角度。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-179">Returns the angle whose tangent is the quotient of two specified numbers.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-180">角度 θ，以弧度为单位，满足 -π≤θ≤π，且 tan(θ) = <paramref name="y" /> / <paramref name="x" />，其中 (<paramref name="x" />, <paramref name="y" />) 是笛卡尔平面中的点。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-180">An angle, θ, measured in radians, such that -π≤θ≤π, and tan(θ) = <paramref name="y" /> / <paramref name="x" />, where (<paramref name="x" />, <paramref name="y" />) is a point in the Cartesian plane.</span></span> <span data-ttu-id="fa7eb-181">请看下面：</span><span class="sxs-lookup"><span data-stu-id="fa7eb-181">Observe the following:</span></span>  
  
-   <span data-ttu-id="fa7eb-182">由于 (<paramref name="x" />, <paramref name="y" />) 在第 1 象限，因此 0 &lt; θ &lt; π/2。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-182">For (<paramref name="x" />, <paramref name="y" />) in quadrant 1, 0 &lt; θ &lt; π/2.</span></span>  
  
-   <span data-ttu-id="fa7eb-183">由于 (<paramref name="x" />, <paramref name="y" />) 在第 2 象限，因此 π/2 &lt; θ≤π。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-183">For (<paramref name="x" />, <paramref name="y" />) in quadrant 2, π/2 &lt; θ≤π.</span></span>  
  
-   <span data-ttu-id="fa7eb-184">由于 (<paramref name="x" />, <paramref name="y" />) 在第 3 象限，因此 -π &lt; θ &lt; -π/2。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-184">For (<paramref name="x" />, <paramref name="y" />) in quadrant 3, -π &lt; θ &lt; -π/2.</span></span>  
  
-   <span data-ttu-id="fa7eb-185">由于 (<paramref name="x" />, <paramref name="y" />) 在第 4 象限，因此 -π/2 &lt; θ &lt; 0。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-185">For (<paramref name="x" />, <paramref name="y" />) in quadrant 4, -π/2 &lt; θ &lt; 0.</span></span>  
  
 <span data-ttu-id="fa7eb-186">如果点在象限的边界上，则返回值如下：</span><span class="sxs-lookup"><span data-stu-id="fa7eb-186">For points on the boundaries of the quadrants, the return value is the following:</span></span>  
  
-   <span data-ttu-id="fa7eb-187">如果 y 为 0 并且 x 不为负值，则 θ = 0。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-187">If y is 0 and x is not negative, θ = 0.</span></span>  
  
-   <span data-ttu-id="fa7eb-188">如果 y 为 0 并且 x 为负值，则 θ = π。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-188">If y is 0 and x is negative, θ = π.</span></span>  
  
-   <span data-ttu-id="fa7eb-189">如果 y 为正值并且 x 为 0，则 θ = π/2。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-189">If y is positive and x is 0, θ = π/2.</span></span>  
  
-   <span data-ttu-id="fa7eb-190">如果 y 为负值并且 x 为 0，则 θ = -π/2。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-190">If y is negative and x is 0, θ = -π/2.</span></span>  
  
-   <span data-ttu-id="fa7eb-191">如果 y 为 0 并且 x 为 0，则 θ = 0。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-191">If y is 0 and x is 0, θ = 0.</span></span>  
  
 <span data-ttu-id="fa7eb-192">如果 <paramref name="x" /> 或 <paramref name="y" /> 为 <see cref="F:System.Double.NaN" />，或者如果 <paramref name="x" /> 和 <paramref name="y" /> 为 <see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" />，则该方法返回 <see cref="F:System.Double.NaN" />。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-192">If <paramref name="x" /> or <paramref name="y" /> is <see cref="F:System.Double.NaN" />, or if <paramref name="x" /> and <paramref name="y" /> are either <see cref="F:System.Double.PositiveInfinity" /> or <see cref="F:System.Double.NegativeInfinity" />, the method returns <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-193">返回值是由 x 轴和一个向量，从原点 (0，0)，启动和终止在点 （x，y） 形成笛卡尔平面中的角度。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-193">The return value is the angle in the Cartesian plane formed by the x-axis, and a vector starting from the origin, (0,0), and terminating at the point, (x,y).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa7eb-194">下面的示例演示如何计算角度和向量的反正切值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-194">The following example demonstrates how to calculate the arctangent of an angle and a vector.</span></span> <span data-ttu-id="fa7eb-195">生成的值显示在控制台中。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-195">The resulting value is displayed in the console.</span></span>  
  
 [!code-cpp[math.atanx#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.atanx/CPP/atan.cpp#1)]
 [!code-csharp[math.atanx#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.atanx/CS/atan.cs#1)]
 [!code-vb[math.atanx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.atanx/VB/atan.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Atanh">
      <MemberSignature Language="C#" Value="public static double Atanh (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Atanh(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Atanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Atanh (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Atanh(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BigMul">
      <MemberSignature Language="C#" Value="public static long BigMul (int a, int b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 BigMul(int32 a, int32 b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.BigMul(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function BigMul (a As Integer, b As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long BigMul(int a, int b);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int32" />
        <Parameter Name="b" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="fa7eb-196">要相乘的第一个数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-196">The first number to multiply.</span></span></param>
        <param name="b"><span data-ttu-id="fa7eb-197">要相乘的第二个数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-197">The second number to multiply.</span></span></param>
        <summary><span data-ttu-id="fa7eb-198">生成两个 32 位数字的完整乘积。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-198">Produces the full product of two 32-bit numbers.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-199">包含指定数字乘积的数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-199">The number containing the product of the specified numbers.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-200">下面的示例演示了利用<xref:System.Math.BigMul%2A>方法来计算两个整数值的乘积。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-200">The following example demonstrates the use of the <xref:System.Math.BigMul%2A> method to calculate the product of two integer values.</span></span>  
  
 [!code-cpp[math.bigmul#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.bigmul/CPP/bigmul.cpp#1)]
 [!code-csharp[math.bigmul#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.bigmul/CS/bigmul.cs#1)]
 [!code-vb[math.bigmul#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.bigmul/VB/bigmul.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cbrt">
      <MemberSignature Language="C#" Value="public static double Cbrt (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Cbrt(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Cbrt(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cbrt (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Cbrt(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Ceiling">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fa7eb-201">返回大于或等于指定数字的最小整数值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-201">Returns the smallest integral value greater than or equal to the specified number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-202">此方法的行为遵循 IEEE 标准 754，第 4 部分。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-202">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="fa7eb-203">这种舍入有时称为向正无穷舍入。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-203">This kind of rounding is sometimes called rounding toward positive infinity.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public static decimal Ceiling (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Ceiling(valuetype System.Decimal d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Ceiling(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Ceiling (d As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Ceiling(System::Decimal d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="fa7eb-204">十进制数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-204">A decimal number.</span></span></param>
        <summary><span data-ttu-id="fa7eb-205">返回大于或等于指定的十进制数的最小整数值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-205">Returns the smallest integral value that is greater than or equal to the specified decimal number.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-206">大于或等于 <paramref name="d" /> 的最小整数值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-206">The smallest integral value that is greater than or equal to <paramref name="d" />.</span></span> <span data-ttu-id="fa7eb-207">请注意，此方法返回 <see cref="T:System.Decimal" />，而不是整数类型。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-207">Note that this method returns a <see cref="T:System.Decimal" /> instead of an integral type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-208">此方法的行为遵循 IEEE 标准 754，第 4 部分。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-208">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="fa7eb-209">这种舍入有时称为向正无穷舍入。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-209">This kind of rounding is sometimes called rounding toward positive infinity.</span></span> <span data-ttu-id="fa7eb-210">换而言之，如果`d`为正，是否存在任何小数部分导致`d`被舍入到下一步的最大整数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-210">In other words, if `d` is positive, the presence of any fractional component causes `d` to be rounded to the next highest integer.</span></span> <span data-ttu-id="fa7eb-211">如果`d`为负，则舍入运算会导致任何小数部分`d`被丢弃。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-211">If `d` is negative, the rounding operation causes any fractional component of `d` to be discarded.</span></span> <span data-ttu-id="fa7eb-212">此方法的操作不同于<xref:System.Math.Floor%28System.Decimal%29>方法，支持向负无穷舍入。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-212">The operation of this method differs from the <xref:System.Math.Floor%28System.Decimal%29> method, which supports rounding toward negative infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa7eb-213">下面的示例演示<xref:System.Math.Ceiling%28System.Decimal%29?displayProperty=nameWithType>方法并将其与进行比较<xref:System.Math.Floor%28System.Decimal%29>方法。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-213">The following example illustrates the <xref:System.Math.Ceiling%28System.Decimal%29?displayProperty=nameWithType> method and contrasts it with the <xref:System.Math.Floor%28System.Decimal%29> method.</span></span>  
  
 [!code-csharp[System.Math.Ceiling#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Ceiling/cs/Ceiling1.cs#1)]
 [!code-vb[System.Math.Ceiling#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Ceiling/vb/Ceiling1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Floor(System.Decimal)" />
      </Docs>
    </Member>
    <Member MemberName="Ceiling">
      <MemberSignature Language="C#" Value="public static double Ceiling (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Ceiling(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Ceiling(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Ceiling (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Ceiling(double a);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="fa7eb-214">一个双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-214">A double-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="fa7eb-215">返回大于或等于指定的双精度浮点数的最小整数值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-215">Returns the smallest integral value that is greater than or equal to the specified double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-216">大于或等于 <paramref name="a" /> 的最小整数值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-216">The smallest integral value that is greater than or equal to <paramref name="a" />.</span></span> <span data-ttu-id="fa7eb-217">如果 <paramref name="a" /> 等于 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，则返回该值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-217">If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, that value is returned.</span></span> <span data-ttu-id="fa7eb-218">请注意，此方法返回 <see cref="T:System.Double" />，而不是整数类型。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-218">Note that this method returns a <see cref="T:System.Double" /> instead of an integral type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-219">此方法的行为遵循 IEEE 标准 754，第 4 部分。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-219">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="fa7eb-220">这种舍入有时称为向正无穷舍入。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-220">This kind of rounding is sometimes called rounding toward positive infinity.</span></span> <span data-ttu-id="fa7eb-221">换而言之，如果`a`为正，是否存在任何小数部分导致`a`被舍入到下一步的最大整数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-221">In other words, if `a` is positive, the presence of any fractional component causes `a` to be rounded to the next highest integer.</span></span> <span data-ttu-id="fa7eb-222">如果`a`为负，则舍入运算会导致任何小数部分`a`被丢弃。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-222">If `a` is negative, the rounding operation causes any fractional component of `a` to be discarded.</span></span> <span data-ttu-id="fa7eb-223">此方法的操作不同于<xref:System.Math.Floor%28System.Double%29>方法，支持向负无穷舍入。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-223">The operation of this method differs from the <xref:System.Math.Floor%28System.Double%29> method, which supports rounding toward negative infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa7eb-224">下面的示例演示<xref:System.Math.Ceiling%28System.Double%29?displayProperty=nameWithType>方法并将其与进行比较<xref:System.Math.Floor%28System.Double%29>方法。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-224">The following example illustrates the <xref:System.Math.Ceiling%28System.Double%29?displayProperty=nameWithType> method and contrasts it with the <xref:System.Math.Floor%28System.Double%29> method.</span></span>  
  
 [!code-csharp[System.Math.Ceiling#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Ceiling/cs/Ceiling1.cs#2)]
 [!code-vb[System.Math.Ceiling#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Ceiling/vb/Ceiling1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static byte Clamp (byte value, byte min, byte max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 Clamp(unsigned int8 value, unsigned int8 min, unsigned int8 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Byte,System.Byte,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Byte, min As Byte, max As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte Clamp(System::Byte value, System::Byte min, System::Byte max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="min" Type="System.Byte" />
        <Parameter Name="max" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static decimal Clamp (decimal value, decimal min, decimal max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Clamp(valuetype System.Decimal value, valuetype System.Decimal min, valuetype System.Decimal max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Decimal,System.Decimal,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Decimal, min As Decimal, max As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Clamp(System::Decimal value, System::Decimal min, System::Decimal max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="min" Type="System.Decimal" />
        <Parameter Name="max" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static double Clamp (double value, double min, double max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Clamp(float64 value, float64 min, float64 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Double, min As Double, max As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Clamp(double value, double min, double max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="min" Type="System.Double" />
        <Parameter Name="max" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static short Clamp (short value, short min, short max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Clamp(int16 value, int16 min, int16 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Int16,System.Int16,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Short, min As Short, max As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Clamp(short value, short min, short max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
        <Parameter Name="min" Type="System.Int16" />
        <Parameter Name="max" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static int Clamp (int value, int min, int max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Clamp(int32 value, int32 min, int32 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Integer, min As Integer, max As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Clamp(int value, int min, int max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="min" Type="System.Int32" />
        <Parameter Name="max" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static long Clamp (long value, long min, long max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Clamp(int64 value, int64 min, int64 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Int64,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Long, min As Long, max As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Clamp(long value, long min, long max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="min" Type="System.Int64" />
        <Parameter Name="max" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static sbyte Clamp (sbyte value, sbyte min, sbyte max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Clamp(int8 value, int8 min, int8 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.SByte,System.SByte,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As SByte, min As SByte, max As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte Clamp(System::SByte value, System::SByte min, System::SByte max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
        <Parameter Name="min" Type="System.SByte" />
        <Parameter Name="max" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static float Clamp (float value, float min, float max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Clamp(float32 value, float32 min, float32 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.Single,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As Single, min As Single, max As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Clamp(float value, float min, float max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="min" Type="System.Single" />
        <Parameter Name="max" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static ushort Clamp (ushort value, ushort min, ushort max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 Clamp(unsigned int16 value, unsigned int16 min, unsigned int16 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.UInt16,System.UInt16,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As UShort, min As UShort, max As UShort) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 Clamp(System::UInt16 value, System::UInt16 min, System::UInt16 max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
        <Parameter Name="min" Type="System.UInt16" />
        <Parameter Name="max" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static uint Clamp (uint value, uint min, uint max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 Clamp(unsigned int32 value, unsigned int32 min, unsigned int32 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.UInt32,System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As UInteger, min As UInteger, max As UInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 Clamp(System::UInt32 value, System::UInt32 min, System::UInt32 max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="min" Type="System.UInt32" />
        <Parameter Name="max" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clamp">
      <MemberSignature Language="C#" Value="public static ulong Clamp (ulong value, ulong min, ulong max);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 Clamp(unsigned int64 value, unsigned int64 min, unsigned int64 max) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Clamp(System.UInt64,System.UInt64,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Clamp (value As ULong, min As ULong, max As ULong) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 Clamp(System::UInt64 value, System::UInt64 min, System::UInt64 max);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="min" Type="System.UInt64" />
        <Parameter Name="max" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="min">To be added.</param>
        <param name="max">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cos">
      <MemberSignature Language="C#" Value="public static double Cos (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Cos(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Cos(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cos (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Cos(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="fa7eb-225">以弧度计量的角度。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-225">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="fa7eb-226">返回指定角度的余弦值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-226">Returns the cosine of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-227"><paramref name="d" /> 的余弦值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-227">The cosine of <paramref name="d" />.</span></span> <span data-ttu-id="fa7eb-228">如果 <paramref name="d" /> 等于 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，此方法将返回 <see cref="F:System.Double.NaN" />。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-228">If <paramref name="d" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-229">表示的角度`d`，必须以弧度为单位。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-229">The angle, `d`, must be in radians.</span></span> <span data-ttu-id="fa7eb-230">乘以 <xref:System.Math.PI?displayProperty=nameWithType> /180 将度数转换成弧度。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-230">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
 <span data-ttu-id="fa7eb-231">可接受的值的`d`约-9223372036854775295 到约 9223372036854775295 范围。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-231">Acceptable values of `d` range from approximately -9223372036854775295 to approximately 9223372036854775295.</span></span> <span data-ttu-id="fa7eb-232">此范围之外的值为<xref:System.Math.Cos%2A>方法返回`d`不变，而不是引发异常。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-232">For values outside this range, the <xref:System.Math.Cos%2A> method returns `d` unchanged rather than throwing an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa7eb-233">下面的示例使用<xref:System.Math.Cos%2A>评估作为所选的角度某些三角函数标识。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-233">The following example uses <xref:System.Math.Cos%2A> to evaluate certain trigonometric identities for selected angles.</span></span>  
  
 [!code-cpp[System.Math.SinCos#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.SinCos/CPP/sincos.cpp#1)]
 [!code-csharp[System.Math.SinCos#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.SinCos/CS/sincos.cs#1)]
 [!code-vb[System.Math.SinCos#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.SinCos/VB/sincos.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cosh">
      <MemberSignature Language="C#" Value="public static double Cosh (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Cosh(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Cosh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cosh (value As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Cosh(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="fa7eb-234">以弧度计量的角度。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-234">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="fa7eb-235">返回指定角度的双曲余弦值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-235">Returns the hyperbolic cosine of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-236"><paramref name="value" /> 的双曲余弦值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-236">The hyperbolic cosine of <paramref name="value" />.</span></span> <span data-ttu-id="fa7eb-237">如果 <paramref name="value" /> 等于 <see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，则返回 <see cref="F:System.Double.PositiveInfinity" />。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-237">If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" /> or <see cref="F:System.Double.PositiveInfinity" />, <see cref="F:System.Double.PositiveInfinity" /> is returned.</span></span> <span data-ttu-id="fa7eb-238">如果 <paramref name="value" /> 等于 <see cref="F:System.Double.NaN" />，则返回 <see cref="F:System.Double.NaN" />。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-238">If <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-239">表示的角度`value`，必须以弧度为单位。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-239">The angle, `value`, must be in radians.</span></span> <span data-ttu-id="fa7eb-240">乘以 <xref:System.Math.PI?displayProperty=nameWithType> /180 将度数转换成弧度。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-240">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa7eb-241">下面的示例使用<xref:System.Math.Cosh%2A>评估所选值的某些双曲标识。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-241">The following example uses <xref:System.Math.Cosh%2A> to evaluate certain hyperbolic identities for selected values.</span></span>  
  
 [!code-cpp[System.Math.SinhCosh#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.SinhCosh/CPP/sinhcosh.cpp#1)]
 [!code-csharp[System.Math.SinhCosh#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.SinhCosh/CS/sinhcosh.cs#1)]
 [!code-vb[System.Math.SinhCosh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.SinhCosh/VB/sinhcosh.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DivRem">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fa7eb-242">计算两个数字的商，并在输出参数中返回余数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-242">Calculates the quotient of two numbers and also returns the remainder in an output parameter.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DivRem">
      <MemberSignature Language="C#" Value="public static int DivRem (int a, int b, out int result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DivRem(int32 a, int32 b, [out] int32&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.DivRem(System.Int32,System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivRem (a As Integer, b As Integer, ByRef result As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int DivRem(int a, int b, [Runtime::InteropServices::Out] int % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int32" />
        <Parameter Name="b" Type="System.Int32" />
        <Parameter Name="result" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="fa7eb-243">被除数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-243">The dividend.</span></span></param>
        <param name="b"><span data-ttu-id="fa7eb-244">除数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-244">The divisor.</span></span></param>
        <param name="result"><span data-ttu-id="fa7eb-245">余数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-245">The remainder.</span></span></param>
        <summary><span data-ttu-id="fa7eb-246">计算两个 32 位有符号整数的商，并通过输出参数返回余数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-246">Calculates the quotient of two 32-bit signed integers and also returns the remainder in an output parameter.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-247">指定数字的商。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-247">The quotient of the specified numbers.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-248">通过使用取模运算计算余数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-248">The remainder is calculated by using the modulus operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa7eb-249">下面的示例演示<xref:System.Math.DivRem%28System.Int32%2CSystem.Int32%2CSystem.Int32%40%29>方法。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-249">The following example demonstrates the <xref:System.Math.DivRem%28System.Int32%2CSystem.Int32%2CSystem.Int32%40%29> method.</span></span>  
  
 [!code-csharp[System.Math.DivRem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.divrem/cs/divrem1.cs#1)]
 [!code-vb[System.Math.DivRem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.divrem/vb/divrem1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException">
          <span data-ttu-id="fa7eb-250"><paramref name="b" /> 为零。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-250"><paramref name="b" /> is zero.</span></span></exception>
        <altmember cref="M:System.Math.IEEERemainder(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="DivRem">
      <MemberSignature Language="C#" Value="public static long DivRem (long a, long b, out long result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 DivRem(int64 a, int64 b, [out] int64&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.DivRem(System.Int64,System.Int64,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivRem (a As Long, b As Long, ByRef result As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long DivRem(long a, long b, [Runtime::InteropServices::Out] long % result);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Int64" />
        <Parameter Name="b" Type="System.Int64" />
        <Parameter Name="result" Type="System.Int64&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="fa7eb-251">被除数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-251">The dividend.</span></span></param>
        <param name="b"><span data-ttu-id="fa7eb-252">除数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-252">The divisor.</span></span></param>
        <param name="result"><span data-ttu-id="fa7eb-253">余数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-253">The remainder.</span></span></param>
        <summary><span data-ttu-id="fa7eb-254">计算两个 64 位有符号整数的商，并通过输出参数返回余数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-254">Calculates the quotient of two 64-bit signed integers and also returns the remainder in an output parameter.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-255">指定数字的商。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-255">The quotient of the specified numbers.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-256">通过使用取模运算计算余数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-256">The remainder is calculated by using the modulus operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa7eb-257">下面的示例演示<xref:System.Math.DivRem%28System.Int64%2CSystem.Int64%2CSystem.Int64%40%29>方法。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-257">The following example demonstrates the <xref:System.Math.DivRem%28System.Int64%2CSystem.Int64%2CSystem.Int64%40%29> method.</span></span>  
  
 [!code-csharp[System.Math.DivRem#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.divrem/cs/divrem2.cs#2)]
 [!code-vb[System.Math.DivRem#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.divrem/vb/divrem2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.DivideByZeroException">
          <span data-ttu-id="fa7eb-258"><paramref name="b" /> 为零。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-258"><paramref name="b" /> is zero.</span></span></exception>
        <altmember cref="M:System.Math.IEEERemainder(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="E">
      <MemberSignature Language="C#" Value="public const double E = 2.71828182845905;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 E = (2.71828182845905)" />
      <MemberSignature Language="DocId" Value="F:System.Math.E" />
      <MemberSignature Language="VB.NET" Value="Public Const E As Double  = 2.71828182845905" />
      <MemberSignature Language="C++ CLI" Value="public: double E = 2.71828182845905;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>2.71828182845905</MemberValue>
      <Docs>
        <summary><span data-ttu-id="fa7eb-259">表示自然对数的底，它由常数 <see langword="e" /> 指定。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-259">Represents the natural logarithmic base, specified by the constant, <see langword="e" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-260">此字段的值为 2.7182818284590452354。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-260">The value of this field is 2.7182818284590452354.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa7eb-261">下面的示例比较<xref:System.Math.E>与从幂级数计算的值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-261">The following example compares <xref:System.Math.E> with the value calculated from a power series.</span></span>  
  
 [!code-cpp[System.Math.E#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.E/CPP/efield.cpp#1)]
 [!code-csharp[System.Math.E#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.E/CS/efield.cs#1)]
 [!code-vb[System.Math.E#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.E/VB/efield.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exp">
      <MemberSignature Language="C#" Value="public static double Exp (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Exp(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Exp(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exp (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Exp(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="fa7eb-262">指定幂的数字。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-262">A number specifying a power.</span></span></param>
        <summary><span data-ttu-id="fa7eb-263">返回 <see langword="e" /> 的指定次幂。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-263">Returns <see langword="e" /> raised to the specified power.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-264">数字 <see langword="e" /> 的 <paramref name="d" /> 次幂。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-264">The number <see langword="e" /> raised to the power <paramref name="d" />.</span></span> <span data-ttu-id="fa7eb-265">如果 <paramref name="d" /> 等于 <see cref="F:System.Double.NaN" /> 或 <see cref="F:System.Double.PositiveInfinity" />，则返回该值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-265">If <paramref name="d" /> equals <see cref="F:System.Double.NaN" /> or <see cref="F:System.Double.PositiveInfinity" />, that value is returned.</span></span> <span data-ttu-id="fa7eb-266">如果 <paramref name="d" /> 等于 <see cref="F:System.Double.NegativeInfinity" />，则返回 0。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-266">If <paramref name="d" /> equals <see cref="F:System.Double.NegativeInfinity" />, 0 is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-267">`e` 为其值是大约 2.71828 数学常数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-267">`e` is a mathematical constant whose value is approximately 2.71828.</span></span>  
  
 <span data-ttu-id="fa7eb-268">使用<xref:System.Math.Pow%2A>方法来计算其他底数的幂。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-268">Use the <xref:System.Math.Pow%2A> method to calculate powers of other bases.</span></span>  
  
 <span data-ttu-id="fa7eb-269"><xref:System.Math.Exp%2A> 是函数的反函数<xref:System.Math.Log%2A>。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-269"><xref:System.Math.Exp%2A> is the inverse of <xref:System.Math.Log%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa7eb-270">下面的示例使用<xref:System.Math.Exp%2A>评估所选值的某些指数和对数标识。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-270">The following example uses <xref:System.Math.Exp%2A> to evaluate certain exponential and logarithmic identities for selected values.</span></span>  
  
 [!code-cpp[System.Math.Exp#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.Exp/CPP/exp.cpp#1)]
 [!code-csharp[System.Math.Exp#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Exp/CS/exp.cs#1)]
 [!code-vb[System.Math.Exp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Exp/VB/exp.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Math.E" />
        <altmember cref="M:System.Math.Pow(System.Double,System.Double)" />
        <altmember cref="M:System.Math.Log(System.Double)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Floor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fa7eb-271">返回小于或等于指定数字的最大整数值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-271">Returns the largest integral value less than or equal to the specified number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-272">此方法的行为遵循 IEEE 标准 754，第 4 部分。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-272">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="fa7eb-273">这种舍入有时称为向负无穷舍入。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-273">This kind of rounding is sometimes called rounding toward negative infinity.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public static decimal Floor (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Floor(valuetype System.Decimal d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Floor(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Floor (d As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Floor(System::Decimal d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="fa7eb-274">十进制数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-274">A decimal number.</span></span></param>
        <summary><span data-ttu-id="fa7eb-275">返回小于或等于指定小数的最大整数值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-275">Returns the largest integral value less than or equal to the specified decimal number.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-276">小于或等于 <paramref name="d" /> 的最大整数值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-276">The largest integral value less than or equal to <paramref name="d" />.</span></span>  <span data-ttu-id="fa7eb-277">请注意，该方法将返回 <see cref="T:System.Decimal" /> 类型的整数值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-277">Note that the method returns an integral value of type <see cref="T:System.Decimal" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-278">此方法的行为遵循 IEEE 标准 754，第 4 部分。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-278">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="fa7eb-279">这种舍入有时称为向负无穷舍入。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-279">This kind of rounding is sometimes called rounding toward negative infinity.</span></span> <span data-ttu-id="fa7eb-280">换而言之，如果`d`为正，任何小数部分将被截断。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-280">In other words, if `d` is positive, any fractional component is truncated.</span></span> <span data-ttu-id="fa7eb-281">如果`d`为负，则任何小数部分的存在导致它被舍入到较小的整数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-281">If `d` is negative, the presence of any fractional component causes it to be rounded to the smaller integer.</span></span> <span data-ttu-id="fa7eb-282">此方法的操作不同于<xref:System.Math.Ceiling%2A>方法，支持向正无穷舍入。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-282">The operation of this method differs from the <xref:System.Math.Ceiling%2A> method, which supports rounding toward positive infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa7eb-283">下面的示例演示<xref:System.Math.Floor%28System.Decimal%29?displayProperty=nameWithType>方法并将其与进行比较<xref:System.Math.Ceiling%28System.Decimal%29>方法。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-283">The following example illustrates the <xref:System.Math.Floor%28System.Decimal%29?displayProperty=nameWithType> method and contrasts it with the <xref:System.Math.Ceiling%28System.Decimal%29> method.</span></span>  
  
 [!code-csharp[System.Math.Ceiling#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Ceiling/cs/Ceiling1.cs#1)]
 [!code-vb[System.Math.Ceiling#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Ceiling/vb/Ceiling1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Ceiling(System.Decimal)" />
        <altmember cref="M:System.Decimal.Floor(System.Decimal)" />
      </Docs>
    </Member>
    <Member MemberName="Floor">
      <MemberSignature Language="C#" Value="public static double Floor (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Floor(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Floor(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Floor (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Floor(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="fa7eb-284">一个双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-284">A double-precision floating-point number.</span></span></param>
        <summary><span data-ttu-id="fa7eb-285">返回小于或等于指定双精度浮点数的最大整数值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-285">Returns the largest integral value less than or equal to the specified double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-286">小于或等于 <paramref name="d" /> 的最大整数值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-286">The largest integral value less than or equal to <paramref name="d" />.</span></span> <span data-ttu-id="fa7eb-287">如果 <paramref name="d" /> 等于 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，则返回该值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-287">If <paramref name="d" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, that value is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-288">此方法的行为遵循 IEEE 标准 754，第 4 部分。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-288">The behavior of this method follows IEEE Standard 754, section 4.</span></span> <span data-ttu-id="fa7eb-289">这种舍入有时称为向负无穷舍入。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-289">This kind of rounding is sometimes called rounding toward negative infinity.</span></span> <span data-ttu-id="fa7eb-290">换而言之，如果`d`为正，任何小数部分将被截断。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-290">In other words, if `d` is positive, any fractional component is truncated.</span></span> <span data-ttu-id="fa7eb-291">如果`d`为负，则任何小数部分的存在导致它被舍入到较小的整数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-291">If `d` is negative, the presence of any fractional component causes it to be rounded to the smaller integer.</span></span> <span data-ttu-id="fa7eb-292">此方法的操作不同于<xref:System.Math.Ceiling%2A>方法，支持向正无穷舍入。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-292">The operation of this method differs from the <xref:System.Math.Ceiling%2A> method, which supports rounding toward positive infinity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa7eb-293">下面的示例演示<xref:System.Math.Floor%28System.Double%29?displayProperty=nameWithType>方法并将其与进行比较<xref:System.Math.Ceiling%28System.Double%29>方法。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-293">The following example illustrates the <xref:System.Math.Floor%28System.Double%29?displayProperty=nameWithType> method and contrasts it with the <xref:System.Math.Ceiling%28System.Double%29> method.</span></span>  
  
 [!code-csharp[System.Math.Ceiling#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Ceiling/cs/Ceiling1.cs#2)]
 [!code-vb[System.Math.Ceiling#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Ceiling/vb/Ceiling1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="IEEERemainder">
      <MemberSignature Language="C#" Value="public static double IEEERemainder (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 IEEERemainder(float64 x, float64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.IEEERemainder(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IEEERemainder (x As Double, y As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double IEEERemainder(double x, double y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="fa7eb-294">被除数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-294">A dividend.</span></span></param>
        <param name="y"><span data-ttu-id="fa7eb-295">除数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-295">A divisor.</span></span></param>
        <summary><span data-ttu-id="fa7eb-296">返回一指定数字被另一指定数字相除的余数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-296">Returns the remainder resulting from the division of a specified number by another specified number.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-297">等于 <paramref name="x" /> - (<paramref name="y" /> Q) 的数，其中 Q 是 <paramref name="x" /> / <paramref name="y" /> 的商的最接近整数（如果 <paramref name="x" /> / <paramref name="y" /> 在两个整数中间，则返回偶数）。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-297">A number equal to <paramref name="x" /> - (<paramref name="y" /> Q), where Q is the quotient of <paramref name="x" /> / <paramref name="y" /> rounded to the nearest integer (if <paramref name="x" /> / <paramref name="y" /> falls halfway between two integers, the even integer is returned).</span></span>  
  
 <span data-ttu-id="fa7eb-298">如果 <paramref name="x" /> - (<paramref name="y" /> Q) 为零，则在 <paramref name="x" /> 为正时返回值 +0，而在 <paramref name="x" /> 为负时返回 -0。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-298">If <paramref name="x" /> - (<paramref name="y" /> Q) is zero, the value +0 is returned if <paramref name="x" /> is positive, or -0 if <paramref name="x" /> is negative.</span></span>  
  
 <span data-ttu-id="fa7eb-299">如果 <paramref name="y" /> = 0，则返回 <see cref="F:System.Double.NaN" />。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-299">If <paramref name="y" /> = 0, <see cref="F:System.Double.NaN" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-300">此操作符合 ANSI/IEEE Std 754-1985; 第 5.1 节中定义的余数运算IEEE 标准，用于二进制浮点算术;电气和电子工程师，Inc;1985。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-300">This operation complies with the remainder operation defined in Section 5.1 of ANSI/IEEE Std 754-1985; IEEE Standard for Binary Floating-Point Arithmetic; Institute of Electrical and Electronics Engineers, Inc; 1985.</span></span>  
  
 <span data-ttu-id="fa7eb-301"><xref:System.Math.IEEERemainder%2A>方法不是取模运算符相同。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-301">The <xref:System.Math.IEEERemainder%2A> method is not the same as the modulus operator.</span></span> <span data-ttu-id="fa7eb-302">虽然两者都返回相除后的余数，它们使用的公式将有不同。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-302">Although both return the remainder after division, the formulas they use are different.</span></span> <span data-ttu-id="fa7eb-303">公式<xref:System.Math.IEEERemainder%2A>方法是：</span><span class="sxs-lookup"><span data-stu-id="fa7eb-303">The formula for the <xref:System.Math.IEEERemainder%2A> method is:</span></span>  
  
```  
IEEERemainder = dividend - (divisor * Math.Round(dividend / divisor))  
```  
  
 <span data-ttu-id="fa7eb-304">与此相反，取模运算符的公式为：</span><span class="sxs-lookup"><span data-stu-id="fa7eb-304">In contrast, the formula for the modulus operator is:</span></span>  
  
```  
Modulus = (Math.Abs(dividend) - (Math.Abs(divisor) *   
          (Math.Floor(Math.Abs(dividend) / Math.Abs(divisor))))) *   
          Math.Sign(dividend)  
```  
  
   
  
## Examples  
 <span data-ttu-id="fa7eb-305">下面的示例将返回的其余部分进行比较<xref:System.Math.IEEERemainder%2A>而模数除法运算符返回的其余部分的方法。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-305">The following example contrasts the remainder returned by the <xref:System.Math.IEEERemainder%2A> method with the remainder returned by the modulus division operator.</span></span>  
  
 [!code-csharp[System.Math.IEEERemainder#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.ieeeremainder/cs/ieeeremainder1.cs#1)]
 [!code-vb[System.Math.IEEERemainder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.ieeeremainder/vb/ieeeremainder1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Log">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fa7eb-306">返回指定数字的对数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-306">Returns the logarithm of a specified number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static double Log (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Log(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="fa7eb-307">要查找其对数的数字。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-307">The number whose logarithm is to be found.</span></span></param>
        <summary><span data-ttu-id="fa7eb-308">返回指定数字的自然对数（底为 <see langword="e" />）。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-308">Returns the natural (base <see langword="e" />) logarithm of a specified number.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-309">下表中的值之一。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-309">One of the values in the following table.</span></span>  
  
 <span data-ttu-id="fa7eb-310"><list type="table"><listheader><term><paramref name="d" /> 参数</span><span class="sxs-lookup"><span data-stu-id="fa7eb-310"><list type="table"><listheader><term><paramref name="d" /> parameter</span></span>  
  
 <span data-ttu-id="fa7eb-311"></term><description> 返回值</span><span class="sxs-lookup"><span data-stu-id="fa7eb-311"></term><description> Return value</span></span>  
  
 <span data-ttu-id="fa7eb-312"></description></listheader><item><term> 正数</span><span class="sxs-lookup"><span data-stu-id="fa7eb-312"></description></listheader><item><term> Positive</span></span>  
  
 <span data-ttu-id="fa7eb-313"></term><description><paramref name="d" /> 的自然对数，即 ln <paramref name="d" /> 或 log e<paramref name="d" /></description></item><item><term> 零</span><span class="sxs-lookup"><span data-stu-id="fa7eb-313"></term><description> The natural logarithm of <paramref name="d" />; that is, ln <paramref name="d" />, or log e <paramref name="d" /></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="fa7eb-314"></term><description><see cref="F:System.Double.NegativeInfinity" /></description></item><item><term> 负数</span><span class="sxs-lookup"><span data-stu-id="fa7eb-314"></term><description><see cref="F:System.Double.NegativeInfinity" /></description></item><item><term> Negative</span></span>  
  
 <span data-ttu-id="fa7eb-315"></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> 等于 <see cref="F:System.Double.NaN" /></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> 等于 <see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></span><span class="sxs-lookup"><span data-stu-id="fa7eb-315"></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Equal to <see cref="F:System.Double.NaN" /></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Equal to <see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-316">参数`d`指定为底数 10。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-316">Parameter `d` is specified as a base 10 number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa7eb-317">下面的示例演示<xref:System.Math.Log%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-317">The following example illustrates the <xref:System.Math.Log%2A> method.</span></span>  
  
 [!code-csharp[System.Math.Log_Overloads#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Log_Overloads/CS/log1.cs#2)]
 [!code-vb[System.Math.Log_Overloads#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Log_Overloads/VB/log1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Math.E" />
        <altmember cref="M:System.Math.Exp(System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public static double Log (double a, double newBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log(float64 a, float64 newBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Log(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log (a As Double, newBase As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log(double a, double newBase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
        <Parameter Name="newBase" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="fa7eb-318">要查找其对数的数字。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-318">The number whose logarithm is to be found.</span></span></param>
        <param name="newBase"><span data-ttu-id="fa7eb-319">对数的底。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-319">The base of the logarithm.</span></span></param>
        <summary><span data-ttu-id="fa7eb-320">返回指定数字在使用指定底时的对数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-320">Returns the logarithm of a specified number in a specified base.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-321">下表中的值之一。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-321">One of the values in the following table.</span></span> <span data-ttu-id="fa7eb-322">（+Infinity 表示 <see cref="F:System.Double.PositiveInfinity" />，-Infinity 表示 <see cref="F:System.Double.NegativeInfinity" />，NaN 表示 <see cref="F:System.Double.NaN" />。）</span><span class="sxs-lookup"><span data-stu-id="fa7eb-322">(+Infinity denotes <see cref="F:System.Double.PositiveInfinity" />, -Infinity denotes <see cref="F:System.Double.NegativeInfinity" />, and NaN denotes <see cref="F:System.Double.NaN" />.)</span></span>  
  
 <span data-ttu-id="fa7eb-323"><list type="table"><listheader><term><paramref name="a" /></term><description><paramref name="newBase" /></description><description> 返回值</span><span class="sxs-lookup"><span data-stu-id="fa7eb-323"><list type="table"><listheader><term><paramref name="a" /></term><description><paramref name="newBase" /></description><description> Return value</span></span>  
  
 <span data-ttu-id="fa7eb-324"></description></listheader><item><term><paramref name="a" />&gt; 0</span><span class="sxs-lookup"><span data-stu-id="fa7eb-324"></description></listheader><item><term><paramref name="a" />&gt; 0</span></span>  
  
 <span data-ttu-id="fa7eb-325"></term><description> (0 &lt;<paramref name="newBase" />&lt; 1) 或 (<paramref name="newBase" />&gt; 1)</span><span class="sxs-lookup"><span data-stu-id="fa7eb-325"></term><description> (0 &lt;<paramref name="newBase" />&lt; 1) -or-(<paramref name="newBase" />&gt; 1)</span></span>  
  
 <span data-ttu-id="fa7eb-326"></description><description> lognewBase(a)</span><span class="sxs-lookup"><span data-stu-id="fa7eb-326"></description><description> lognewBase(a)</span></span>  
  
 <span data-ttu-id="fa7eb-327"></description></item><item><term><paramref name="a" />&lt; 0</span><span class="sxs-lookup"><span data-stu-id="fa7eb-327"></description></item><item><term><paramref name="a" />&lt; 0</span></span>  
  
 <span data-ttu-id="fa7eb-328"></term><description>（任意值）</span><span class="sxs-lookup"><span data-stu-id="fa7eb-328"></term><description> (any value)</span></span>  
  
 <span data-ttu-id="fa7eb-329"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="fa7eb-329"></description><description> NaN</span></span>  
  
 <span data-ttu-id="fa7eb-330"></description></item><item><term>（任意值）</span><span class="sxs-lookup"><span data-stu-id="fa7eb-330"></description></item><item><term> (any value)</span></span>  
  
 <span data-ttu-id="fa7eb-331"></term><description><paramref name="newBase" />&lt; 0</span><span class="sxs-lookup"><span data-stu-id="fa7eb-331"></term><description><paramref name="newBase" />&lt; 0</span></span>  
  
 <span data-ttu-id="fa7eb-332"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="fa7eb-332"></description><description> NaN</span></span>  
  
 <span data-ttu-id="fa7eb-333"></description></item><item><term><paramref name="a" /> != 1</span><span class="sxs-lookup"><span data-stu-id="fa7eb-333"></description></item><item><term><paramref name="a" /> != 1</span></span>  
  
 <span data-ttu-id="fa7eb-334"></term><description><paramref name="newBase" /> = 0</span><span class="sxs-lookup"><span data-stu-id="fa7eb-334"></term><description><paramref name="newBase" /> = 0</span></span>  
  
 <span data-ttu-id="fa7eb-335"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="fa7eb-335"></description><description> NaN</span></span>  
  
 <span data-ttu-id="fa7eb-336"></description></item><item><term><paramref name="a" /> != 1</span><span class="sxs-lookup"><span data-stu-id="fa7eb-336"></description></item><item><term><paramref name="a" /> != 1</span></span>  
  
 <span data-ttu-id="fa7eb-337"></term><description><paramref name="newBase" /> = 正无穷</span><span class="sxs-lookup"><span data-stu-id="fa7eb-337"></term><description><paramref name="newBase" /> = +Infinity</span></span>  
  
 <span data-ttu-id="fa7eb-338"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="fa7eb-338"></description><description> NaN</span></span>  
  
 <span data-ttu-id="fa7eb-339"></description></item><item><term><paramref name="a" /> = NaN</span><span class="sxs-lookup"><span data-stu-id="fa7eb-339"></description></item><item><term><paramref name="a" /> = NaN</span></span>  
  
 <span data-ttu-id="fa7eb-340"></term><description>（任意值）</span><span class="sxs-lookup"><span data-stu-id="fa7eb-340"></term><description> (any value)</span></span>  
  
 <span data-ttu-id="fa7eb-341"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="fa7eb-341"></description><description> NaN</span></span>  
  
 <span data-ttu-id="fa7eb-342"></description></item><item><term>（任意值）</span><span class="sxs-lookup"><span data-stu-id="fa7eb-342"></description></item><item><term> (any value)</span></span>  
  
 <span data-ttu-id="fa7eb-343"></term><description><paramref name="newBase" /> = NaN</span><span class="sxs-lookup"><span data-stu-id="fa7eb-343"></term><description><paramref name="newBase" /> = NaN</span></span>  
  
 <span data-ttu-id="fa7eb-344"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="fa7eb-344"></description><description> NaN</span></span>  
  
 <span data-ttu-id="fa7eb-345"></description></item><item><term>（任意值）</span><span class="sxs-lookup"><span data-stu-id="fa7eb-345"></description></item><item><term> (any value)</span></span>  
  
 <span data-ttu-id="fa7eb-346"></term><description><paramref name="newBase" /> = 1</span><span class="sxs-lookup"><span data-stu-id="fa7eb-346"></term><description><paramref name="newBase" /> = 1</span></span>  
  
 <span data-ttu-id="fa7eb-347"></description><description> NaN</span><span class="sxs-lookup"><span data-stu-id="fa7eb-347"></description><description> NaN</span></span>  
  
 <span data-ttu-id="fa7eb-348"></description></item><item><term><paramref name="a" /> = 0</span><span class="sxs-lookup"><span data-stu-id="fa7eb-348"></description></item><item><term><paramref name="a" /> = 0</span></span>  
  
 <span data-ttu-id="fa7eb-349"></term><description> 0 &lt;<paramref name="newBase" />&lt; 1</span><span class="sxs-lookup"><span data-stu-id="fa7eb-349"></term><description> 0 &lt;<paramref name="newBase" />&lt; 1</span></span>  
  
 <span data-ttu-id="fa7eb-350"></description><description> 正无穷</span><span class="sxs-lookup"><span data-stu-id="fa7eb-350"></description><description> +Infinity</span></span>  
  
 <span data-ttu-id="fa7eb-351"></description></item><item><term><paramref name="a" /> = 0</span><span class="sxs-lookup"><span data-stu-id="fa7eb-351"></description></item><item><term><paramref name="a" /> = 0</span></span>  
  
 <span data-ttu-id="fa7eb-352"></term><description><paramref name="newBase" />&gt; 1</span><span class="sxs-lookup"><span data-stu-id="fa7eb-352"></term><description><paramref name="newBase" />&gt; 1</span></span>  
  
 <span data-ttu-id="fa7eb-353"></description><description> 负无穷</span><span class="sxs-lookup"><span data-stu-id="fa7eb-353"></description><description> -Infinity</span></span>  
  
 <span data-ttu-id="fa7eb-354"></description></item><item><term><paramref name="a" /> = 正无穷</span><span class="sxs-lookup"><span data-stu-id="fa7eb-354"></description></item><item><term><paramref name="a" /> =  +Infinity</span></span>  
  
 <span data-ttu-id="fa7eb-355"></term><description> 0 &lt;<paramref name="newBase" />&lt; 1</span><span class="sxs-lookup"><span data-stu-id="fa7eb-355"></term><description> 0 &lt;<paramref name="newBase" />&lt; 1</span></span>  
  
 <span data-ttu-id="fa7eb-356"></description><description> 负无穷</span><span class="sxs-lookup"><span data-stu-id="fa7eb-356"></description><description> -Infinity</span></span>  
  
 <span data-ttu-id="fa7eb-357"></description></item><item><term><paramref name="a" /> = 正无穷</span><span class="sxs-lookup"><span data-stu-id="fa7eb-357"></description></item><item><term><paramref name="a" /> =  +Infinity</span></span>  
  
 <span data-ttu-id="fa7eb-358"></term><description><paramref name="newBase" />&gt; 1</span><span class="sxs-lookup"><span data-stu-id="fa7eb-358"></term><description><paramref name="newBase" />&gt; 1</span></span>  
  
 <span data-ttu-id="fa7eb-359"></description><description> 正无穷</span><span class="sxs-lookup"><span data-stu-id="fa7eb-359"></description><description> +Infinity</span></span>  
  
 <span data-ttu-id="fa7eb-360"></description></item><item><term><paramref name="a" /> = 1</span><span class="sxs-lookup"><span data-stu-id="fa7eb-360"></description></item><item><term><paramref name="a" /> = 1</span></span>  
  
 <span data-ttu-id="fa7eb-361"></term><description><paramref name="newBase" /> = 0</span><span class="sxs-lookup"><span data-stu-id="fa7eb-361"></term><description><paramref name="newBase" /> = 0</span></span>  
  
 <span data-ttu-id="fa7eb-362"></description><description> 0</span><span class="sxs-lookup"><span data-stu-id="fa7eb-362"></description><description> 0</span></span>  
  
 <span data-ttu-id="fa7eb-363"></description></item><item><term><paramref name="a" /> = 1</span><span class="sxs-lookup"><span data-stu-id="fa7eb-363"></description></item><item><term><paramref name="a" /> = 1</span></span>  
  
 <span data-ttu-id="fa7eb-364"></term><description><paramref name="newBase" /> = 正无穷</span><span class="sxs-lookup"><span data-stu-id="fa7eb-364"></term><description><paramref name="newBase" /> = +Infinity</span></span>  
  
 <span data-ttu-id="fa7eb-365"></description><description> 0</span><span class="sxs-lookup"><span data-stu-id="fa7eb-365"></description><description> 0</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-366">下面的示例使用<xref:System.Math.Log%2A>评估所选值的某些对数标识。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-366">The following example uses <xref:System.Math.Log%2A> to evaluate certain logarithmic identities for selected values.</span></span>  
  
 [!code-cpp[System.Math.Log_Overloads#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.Log_Overloads/CPP/loggen.cpp#1)]
 [!code-csharp[System.Math.Log_Overloads#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Log_Overloads/CS/loggen.cs#1)]
 [!code-vb[System.Math.Log_Overloads#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Log_Overloads/VB/loggen.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Log10">
      <MemberSignature Language="C#" Value="public static double Log10 (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Log10(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Log10(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Log10 (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Log10(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="fa7eb-367">要查找其对数的数字。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-367">A number whose logarithm is to be found.</span></span></param>
        <summary><span data-ttu-id="fa7eb-368">返回指定数字以 10 为底的对数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-368">Returns the base 10 logarithm of a specified number.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-369">下表中的值之一。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-369">One of the values in the following table.</span></span>  
  
 <span data-ttu-id="fa7eb-370"><list type="table"><listheader><term><paramref name="d" /> 参数</span><span class="sxs-lookup"><span data-stu-id="fa7eb-370"><list type="table"><listheader><term><paramref name="d" /> parameter</span></span>  
  
 <span data-ttu-id="fa7eb-371"></term><description> 返回值</span><span class="sxs-lookup"><span data-stu-id="fa7eb-371"></term><description> Return value</span></span>  
  
 <span data-ttu-id="fa7eb-372"></description></listheader><item><term> 正数</span><span class="sxs-lookup"><span data-stu-id="fa7eb-372"></description></listheader><item><term> Positive</span></span>  
  
 <span data-ttu-id="fa7eb-373"></term><description><paramref name="d" /> 的以 10 为底的对数，即 log 10<paramref name="d" />。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-373"></term><description> The base 10 log of <paramref name="d" />; that is, log 10<paramref name="d" />.</span></span>  
  
 <span data-ttu-id="fa7eb-374"></description></item><item><term> 零</span><span class="sxs-lookup"><span data-stu-id="fa7eb-374"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="fa7eb-375"></term><description><see cref="F:System.Double.NegativeInfinity" /></description></item><item><term> 负数</span><span class="sxs-lookup"><span data-stu-id="fa7eb-375"></term><description><see cref="F:System.Double.NegativeInfinity" /></description></item><item><term> Negative</span></span>  
  
 <span data-ttu-id="fa7eb-376"></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> 等于 <see cref="F:System.Double.NaN" /></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> 等于 <see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></span><span class="sxs-lookup"><span data-stu-id="fa7eb-376"></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Equal to <see cref="F:System.Double.NaN" /></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Equal to <see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-377">参数`d`指定为底数 10。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-377">Parameter `d` is specified as a base 10 number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa7eb-378">下面的示例使用<xref:System.Math.Log10%2A>方法以返回所选值的 10 为底数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-378">The following example uses the <xref:System.Math.Log10%2A> method to return the base 10 logarithm for selected values.</span></span>  
  
 [!code-csharp[System.Math.Log10#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Log10/CS/log10.cs#1)]
 [!code-vb[System.Math.Log10#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Log10/VB/log10.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Max">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fa7eb-379">返回两个指定数字中较大的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-379">Returns the larger of two specified numbers.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static byte Max (byte val1, byte val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 Max(unsigned int8 val1, unsigned int8 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Byte,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Byte, val2 As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte Max(System::Byte val1, System::Byte val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Byte" />
        <Parameter Name="val2" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="fa7eb-380">要比较的两个 8 位无符号整数中的第一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-380">The first of two 8-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="fa7eb-381">要比较的两个 8 位无符号整数中的第二个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-381">The second of two 8-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="fa7eb-382">返回两个 8 位无符号整数中较大的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-382">Returns the larger of two 8-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-383"><paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-383">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-384">下面的示例演示如何使用<xref:System.Math.Max%2A>方法返回并显示较大的两个变量。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-384">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static decimal Max (decimal val1, decimal val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Max(valuetype System.Decimal val1, valuetype System.Decimal val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Decimal,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Decimal, val2 As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Max(System::Decimal val1, System::Decimal val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Decimal" />
        <Parameter Name="val2" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="fa7eb-385">要比较的两个十进制数字中的第一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-385">The first of two decimal numbers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="fa7eb-386">要比较的两个十进制数字中的第二个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-386">The second of two decimal numbers to compare.</span></span></param>
        <summary><span data-ttu-id="fa7eb-387">返回两个十进制数中较大的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-387">Returns the larger of two decimal numbers.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-388"><paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-388">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-389">下面的示例演示如何使用<xref:System.Math.Max%2A>方法返回并显示较大的两个变量。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-389">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static double Max (double val1, double val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Max(float64 val1, float64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Double, val2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Max(double val1, double val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Double" />
        <Parameter Name="val2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="fa7eb-390">要比较的两个双精度浮点数中的第一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-390">The first of two double-precision floating-point numbers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="fa7eb-391">要比较的两个双精度浮点数中的第二个</span><span class="sxs-lookup"><span data-stu-id="fa7eb-391">The second of two double-precision floating-point numbers to compare.</span></span></param>
        <summary><span data-ttu-id="fa7eb-392">返回两个双精度浮点数字中较大的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-392">Returns the larger of two double-precision floating-point numbers.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-393"><paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-393">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span> <span data-ttu-id="fa7eb-394">如果 <paramref name="val1" /> 或 <paramref name="val2" /> 或者 <paramref name="val1" /> 和 <paramref name="val2" /> 都等于 <see cref="F:System.Double.NaN" />，则返回 <see cref="F:System.Double.NaN" />。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-394">If <paramref name="val1" />, <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-395">下面的示例演示如何使用<xref:System.Math.Max%2A>方法返回并显示较大的两个变量。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-395">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static short Max (short val1, short val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Max(int16 val1, int16 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Int16,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Short, val2 As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Max(short val1, short val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int16" />
        <Parameter Name="val2" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="fa7eb-396">要比较的两个 16 位有符号整数中的第一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-396">The first of two 16-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="fa7eb-397">要比较的两个 16 位有符号整数中的第二个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-397">The second of two 16-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="fa7eb-398">返回两个 16 位有符号的整数中较大的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-398">Returns the larger of two 16-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-399"><paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-399">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-400">下面的示例演示如何使用<xref:System.Math.Max%2A>方法返回并显示较大的两个变量。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-400">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static int Max (int val1, int val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Max(int32 val1, int32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Integer, val2 As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Max(int val1, int val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int32" />
        <Parameter Name="val2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="fa7eb-401">要比较的两个 32 位有符号整数中的第一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-401">The first of two 32-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="fa7eb-402">要比较的两个 32 位有符号整数中的第二个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-402">The second of two 32-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="fa7eb-403">返回两个 32 位有符号的整数中较大的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-403">Returns the larger of two 32-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-404"><paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-404">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-405">下面的示例演示如何使用<xref:System.Math.Max%2A>方法返回并显示较大的两个变量。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-405">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static long Max (long val1, long val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Max(int64 val1, int64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Long, val2 As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Max(long val1, long val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int64" />
        <Parameter Name="val2" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="fa7eb-406">要比较的两个 64 位有符号整数中的第一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-406">The first of two 64-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="fa7eb-407">要比较的两个 64 位有符号整数中的第二个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-407">The second of two 64-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="fa7eb-408">返回两个 64 位有符号的整数中较大的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-408">Returns the larger of two 64-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-409"><paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-409">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-410">下面的示例演示如何使用<xref:System.Math.Max%2A>方法返回并显示较大的两个变量。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-410">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static sbyte Max (sbyte val1, sbyte val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Max(int8 val1, int8 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.SByte,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As SByte, val2 As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte Max(System::SByte val1, System::SByte val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.SByte" />
        <Parameter Name="val2" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="fa7eb-411">要比较的两个 8 位有符号整数中的第一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-411">The first of two 8-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="fa7eb-412">要比较的两个 8 位有符号整数中的第二个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-412">The second of two 8-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="fa7eb-413">返回两个 8 位有符号的整数中较大的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-413">Returns the larger of two 8-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-414"><paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-414">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-415">下面的示例演示如何使用<xref:System.Math.Max%2A>方法返回并显示较大的两个变量。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-415">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static float Max (float val1, float val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Max(float32 val1, float32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As Single, val2 As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Max(float val1, float val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Single" />
        <Parameter Name="val2" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="fa7eb-416">要比较的两个单精度浮点数中的第一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-416">The first of two single-precision floating-point numbers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="fa7eb-417">要比较的两个单精度浮点数中的第二个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-417">The second of two single-precision floating-point numbers to compare.</span></span></param>
        <summary><span data-ttu-id="fa7eb-418">返回两个单精度浮点数字中较大的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-418">Returns the larger of two single-precision floating-point numbers.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-419"><paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-419">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span> <span data-ttu-id="fa7eb-420">如果 <paramref name="val1" /> 或 <paramref name="val2" /> 或者 <paramref name="val1" /> 和 <paramref name="val2" /> 都等于 <see cref="F:System.Single.NaN" />，则返回 <see cref="F:System.Single.NaN" />。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-420">If <paramref name="val1" />, or <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-421">下面的示例演示如何使用<xref:System.Math.Max%2A>方法返回并显示较大的两个变量。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-421">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static ushort Max (ushort val1, ushort val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 Max(unsigned int16 val1, unsigned int16 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.UInt16,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As UShort, val2 As UShort) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 Max(System::UInt16 val1, System::UInt16 val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt16" />
        <Parameter Name="val2" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="fa7eb-422">要比较的两个 16 位无符号整数中的第一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-422">The first of two 16-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="fa7eb-423">要比较的两个 16 位无符号整数中的第二个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-423">The second of two 16-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="fa7eb-424">返回两个 16 位无符号整数中较大的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-424">Returns the larger of two 16-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-425"><paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-425">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-426">下面的示例演示如何使用<xref:System.Math.Max%2A>方法返回并显示较大的两个变量。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-426">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static uint Max (uint val1, uint val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 Max(unsigned int32 val1, unsigned int32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As UInteger, val2 As UInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 Max(System::UInt32 val1, System::UInt32 val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt32" />
        <Parameter Name="val2" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="fa7eb-427">要比较的两个 32 位无符号整数中的第一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-427">The first of two 32-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="fa7eb-428">要比较的两个 32 位无符号整数中的第二个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-428">The second of two 32-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="fa7eb-429">返回两个 32 位无符号整数中较大的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-429">Returns the larger of two 32-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-430"><paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-430">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-431">下面的示例演示如何使用<xref:System.Math.Max%2A>方法返回并显示较大的两个变量。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-431">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static ulong Max (ulong val1, ulong val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 Max(unsigned int64 val1, unsigned int64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Max(System.UInt64,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Max (val1 As ULong, val2 As ULong) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 Max(System::UInt64 val1, System::UInt64 val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt64" />
        <Parameter Name="val2" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="fa7eb-432">要比较的两个 64 位无符号整数中的第一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-432">The first of two 64-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="fa7eb-433">要比较的两个 64 位无符号整数中的第二个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-433">The second of two 64-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="fa7eb-434">返回两个 64 位无符号整数中较大的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-434">Returns the larger of two 64-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-435"><paramref name="val1" /> 或 <paramref name="val2" /> 参数中较大的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-435">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is larger.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-436">下面的示例演示如何使用<xref:System.Math.Max%2A>方法返回并显示较大的两个变量。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-436">The following example demonstrates how to use the <xref:System.Math.Max%2A> method to return and display the greater of two variables.</span></span>  
  
 [!code-cpp[Math.Max#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.max/CPP/max.cpp#1)]
 [!code-csharp[Math.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.max/CS/max.cs#1)]
 [!code-vb[Math.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.max/VB/max.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Min">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fa7eb-437">返回两个数字中较小的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-437">Returns the smaller of two numbers.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static byte Min (byte val1, byte val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 Min(unsigned int8 val1, unsigned int8 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Byte,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Byte, val2 As Byte) As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Byte Min(System::Byte val1, System::Byte val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Byte" />
        <Parameter Name="val2" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="fa7eb-438">要比较的两个 8 位无符号整数中的第一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-438">The first of two 8-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="fa7eb-439">要比较的两个 8 位无符号整数中的第二个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-439">The second of two 8-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="fa7eb-440">返回两个 8 位无符号整数中较小的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-440">Returns the smaller of two 8-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-441"><paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-441">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-442">下面的示例演示如何使用<xref:System.Math.Min%2A>方法以返回并显示较小的两个变量。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-442">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static decimal Min (decimal val1, decimal val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Min(valuetype System.Decimal val1, valuetype System.Decimal val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Decimal,System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Decimal, val2 As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Min(System::Decimal val1, System::Decimal val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Decimal" />
        <Parameter Name="val2" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="fa7eb-443">要比较的两个十进制数字中的第一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-443">The first of two decimal numbers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="fa7eb-444">要比较的两个十进制数字中的第二个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-444">The second of two decimal numbers to compare.</span></span></param>
        <summary><span data-ttu-id="fa7eb-445">返回两个十进制数中较小的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-445">Returns the smaller of two decimal numbers.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-446"><paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-446">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-447">下面的示例演示如何使用<xref:System.Math.Min%2A>方法以返回并显示较小的两个变量。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-447">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static double Min (double val1, double val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Min(float64 val1, float64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Double, val2 As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Min(double val1, double val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Double" />
        <Parameter Name="val2" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="fa7eb-448">要比较的两个双精度浮点数中的第一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-448">The first of two double-precision floating-point numbers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="fa7eb-449">要比较的两个双精度浮点数中的第二个</span><span class="sxs-lookup"><span data-stu-id="fa7eb-449">The second of two double-precision floating-point numbers to compare.</span></span></param>
        <summary><span data-ttu-id="fa7eb-450">返回两个双精度浮点数字中较小的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-450">Returns the smaller of two double-precision floating-point numbers.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-451"><paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-451">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span> <span data-ttu-id="fa7eb-452">如果 <paramref name="val1" /> 或 <paramref name="val2" /> 或者 <paramref name="val1" /> 和 <paramref name="val2" /> 都等于 <see cref="F:System.Double.NaN" />，则返回 <see cref="F:System.Double.NaN" />。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-452">If <paramref name="val1" />, <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NaN" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-453">下面的示例演示如何使用<xref:System.Math.Min%2A>方法以返回并显示较小的两个变量。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-453">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static short Min (short val1, short val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 Min(int16 val1, int16 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Int16,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Short, val2 As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Min(short val1, short val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int16" />
        <Parameter Name="val2" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="fa7eb-454">要比较的两个 16 位有符号整数中的第一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-454">The first of two 16-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="fa7eb-455">要比较的两个 16 位有符号整数中的第二个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-455">The second of two 16-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="fa7eb-456">返回两个 16 位有符号整数中较小的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-456">Returns the smaller of two 16-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-457"><paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-457">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-458">下面的示例演示如何使用<xref:System.Math.Min%2A>方法以返回并显示较小的两个变量。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-458">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static int Min (int val1, int val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Min(int32 val1, int32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Integer, val2 As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Min(int val1, int val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int32" />
        <Parameter Name="val2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="fa7eb-459">要比较的两个 32 位有符号整数中的第一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-459">The first of two 32-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="fa7eb-460">要比较的两个 32 位有符号整数中的第二个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-460">The second of two 32-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="fa7eb-461">返回两个 32 位有符号整数中较小的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-461">Returns the smaller of two 32-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-462"><paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-462">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-463">下面的示例演示如何使用<xref:System.Math.Min%2A>方法以返回并显示较小的两个变量。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-463">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static long Min (long val1, long val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Min(int64 val1, int64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Long, val2 As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Min(long val1, long val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Int64" />
        <Parameter Name="val2" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="fa7eb-464">要比较的两个 64 位有符号整数中的第一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-464">The first of two 64-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="fa7eb-465">要比较的两个 64 位有符号整数中的第二个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-465">The second of two 64-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="fa7eb-466">返回两个 64 位有符号整数中较小的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-466">Returns the smaller of two 64-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-467"><paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-467">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-468">下面的示例演示如何使用<xref:System.Math.Min%2A>方法以返回并显示较小的两个变量。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-468">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static sbyte Min (sbyte val1, sbyte val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 Min(int8 val1, int8 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.SByte,System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As SByte, val2 As SByte) As SByte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::SByte Min(System::SByte val1, System::SByte val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.SByte" />
        <Parameter Name="val2" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="fa7eb-469">要比较的两个 8 位有符号整数中的第一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-469">The first of two 8-bit signed integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="fa7eb-470">要比较的两个 8 位有符号整数中的第二个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-470">The second of two 8-bit signed integers to compare.</span></span></param>
        <summary><span data-ttu-id="fa7eb-471">返回两个 8 位有符号整数中较小的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-471">Returns the smaller of two 8-bit signed integers.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-472"><paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-472">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-473">下面的示例演示如何使用<xref:System.Math.Min%2A>方法以返回并显示较小的两个变量。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-473">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static float Min (float val1, float val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Min(float32 val1, float32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As Single, val2 As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Min(float val1, float val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.Single" />
        <Parameter Name="val2" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="fa7eb-474">要比较的两个单精度浮点数中的第一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-474">The first of two single-precision floating-point numbers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="fa7eb-475">要比较的两个单精度浮点数中的第二个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-475">The second of two single-precision floating-point numbers to compare.</span></span></param>
        <summary><span data-ttu-id="fa7eb-476">返回两个单精度浮点数字中较小的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-476">Returns the smaller of two single-precision floating-point numbers.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-477"><paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-477">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span> <span data-ttu-id="fa7eb-478">如果 <paramref name="val1" /> 或 <paramref name="val2" /> 或者 <paramref name="val1" /> 和 <paramref name="val2" /> 都等于 <see cref="F:System.Single.NaN" />，则返回 <see cref="F:System.Single.NaN" />。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-478">If <paramref name="val1" />, <paramref name="val2" />, or both <paramref name="val1" /> and <paramref name="val2" /> are equal to <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NaN" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-479">下面的示例演示如何使用<xref:System.Math.Min%2A>方法以返回并显示较小的两个变量。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-479">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static ushort Min (ushort val1, ushort val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 Min(unsigned int16 val1, unsigned int16 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.UInt16,System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As UShort, val2 As UShort) As UShort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt16 Min(System::UInt16 val1, System::UInt16 val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt16" />
        <Parameter Name="val2" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="fa7eb-480">要比较的两个 16 位无符号整数中的第一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-480">The first of two 16-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="fa7eb-481">要比较的两个 16 位无符号整数中的第二个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-481">The second of two 16-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="fa7eb-482">返回两个 16 位无符号整数中较小的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-482">Returns the smaller of two 16-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-483"><paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-483">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-484">下面的示例演示如何使用<xref:System.Math.Min%2A>方法以返回并显示较小的两个变量。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-484">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static uint Min (uint val1, uint val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 Min(unsigned int32 val1, unsigned int32 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.UInt32,System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As UInteger, val2 As UInteger) As UInteger" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt32 Min(System::UInt32 val1, System::UInt32 val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt32" />
        <Parameter Name="val2" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="fa7eb-485">要比较的两个 32 位无符号整数中的第一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-485">The first of two 32-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="fa7eb-486">要比较的两个 32 位无符号整数中的第二个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-486">The second of two 32-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="fa7eb-487">返回两个 32 位无符号整数中较小的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-487">Returns the smaller of two 32-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-488"><paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-488">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-489">下面的示例演示如何使用<xref:System.Math.Min%2A>方法以返回并显示较小的两个变量。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-489">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static ulong Min (ulong val1, ulong val2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 Min(unsigned int64 val1, unsigned int64 val2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Min(System.UInt64,System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Min (val1 As ULong, val2 As ULong) As ULong" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::UInt64 Min(System::UInt64 val1, System::UInt64 val2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="val1" Type="System.UInt64" />
        <Parameter Name="val2" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="val1"><span data-ttu-id="fa7eb-490">要比较的两个 64 位无符号整数中的第一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-490">The first of two 64-bit unsigned integers to compare.</span></span></param>
        <param name="val2"><span data-ttu-id="fa7eb-491">要比较的两个 64 位无符号整数中的第二个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-491">The second of two 64-bit unsigned integers to compare.</span></span></param>
        <summary><span data-ttu-id="fa7eb-492">返回两个 64 位无符号整数中较小的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-492">Returns the smaller of two 64-bit unsigned integers.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-493"><paramref name="val1" /> 或 <paramref name="val2" /> 参数中较小的一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-493">Parameter <paramref name="val1" /> or <paramref name="val2" />, whichever is smaller.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-494">下面的示例演示如何使用<xref:System.Math.Min%2A>方法以返回并显示较小的两个变量。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-494">The following example demonstrates how to use the <xref:System.Math.Min%2A> method to return and display the smaller of two variables.</span></span>  
  
 [!code-cpp[Math.Min#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.min/CPP/min.cpp#1)]
 [!code-csharp[Math.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.min/CS/min.cs#1)]
 [!code-vb[Math.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.min/VB/min.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PI">
      <MemberSignature Language="C#" Value="public const double PI = 3.14159265358979;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 PI = (3.14159265358979)" />
      <MemberSignature Language="DocId" Value="F:System.Math.PI" />
      <MemberSignature Language="VB.NET" Value="Public Const PI As Double  = 3.14159265358979" />
      <MemberSignature Language="C++ CLI" Value="public: double PI = 3.14159265358979;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>3.14159265358979</MemberValue>
      <Docs>
        <summary><span data-ttu-id="fa7eb-495">表示圆的周长与其直径的比值，由常数 π 指定。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-495">Represents the ratio of the circumference of a circle to its diameter, specified by the constant, π.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-496">此字段的值为 3.14159265358979323846。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-496">The value of this field is 3.14159265358979323846.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa7eb-497">下面的示例使用<xref:System.Math.PI>有助于在给定梯形内部角度计算。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-497">The following example uses <xref:System.Math.PI> to assist in the computation of the inner angles of a given trapezoid.</span></span>  
  
 [!code-cpp[MathSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/MathSample/CPP/mathsample.cpp#1)]
 [!code-csharp[MathSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/MathSample/CS/mathsample.cs#1)]
 [!code-vb[MathSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MathSample/VB/mathsample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pow">
      <MemberSignature Language="C#" Value="public static double Pow (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Pow(float64 x, float64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Pow(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Pow (x As Double, y As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Pow(double x, double y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="fa7eb-498">要乘幂的双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-498">A double-precision floating-point number to be raised to a power.</span></span></param>
        <param name="y"><span data-ttu-id="fa7eb-499">指定幂的双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-499">A double-precision floating-point number that specifies a power.</span></span></param>
        <summary><span data-ttu-id="fa7eb-500">返回指定数字的指定次幂。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-500">Returns a specified number raised to the specified power.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-501">数字 <paramref name="x" /> 的 <paramref name="y" /> 次幂。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-501">The number <paramref name="x" /> raised to the power <paramref name="y" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-502">下表指示返回的值，用于指定不同值的范围时`x`和`y`参数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-502">The following table indicates the return value when various values or ranges of values are specified for the `x` and `y` parameters.</span></span> <span data-ttu-id="fa7eb-503">有关详细信息，请参阅<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>、<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>和<xref:System.Double.NaN?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-503">For more information, see <xref:System.Double.PositiveInfinity?displayProperty=nameWithType>, <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, and <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span>  
  
|<span data-ttu-id="fa7eb-504">参数</span><span class="sxs-lookup"><span data-stu-id="fa7eb-504">Parameters</span></span>|<span data-ttu-id="fa7eb-505">返回值</span><span class="sxs-lookup"><span data-stu-id="fa7eb-505">Return value</span></span>|  
|----------------|------------------|  
|<span data-ttu-id="fa7eb-506">`x` 或`y`  =  `NaN`。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-506">`x` or `y` = `NaN`.</span></span>|`NaN`|  
|<span data-ttu-id="fa7eb-507">`x` = 除任一值`NaN`;`y` = 0。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-507">`x` = Any value except `NaN`; `y` = 0.</span></span>|<span data-ttu-id="fa7eb-508">1</span><span class="sxs-lookup"><span data-stu-id="fa7eb-508">1</span></span>|  
|<span data-ttu-id="fa7eb-509">`x` = `NegativeInfinity`; `y` < 0.</span><span class="sxs-lookup"><span data-stu-id="fa7eb-509">`x` = `NegativeInfinity`; `y` < 0.</span></span>|<span data-ttu-id="fa7eb-510">0</span><span class="sxs-lookup"><span data-stu-id="fa7eb-510">0</span></span>|  
|<span data-ttu-id="fa7eb-511">`x` = `NegativeInfinity`;`y`是奇数正整数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-511">`x` = `NegativeInfinity`; `y` is a positive odd integer.</span></span>|`NegativeInfinity`|  
|<span data-ttu-id="fa7eb-512">`x` = `NegativeInfinity`;`y`正但不是奇数的整数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-512">`x` = `NegativeInfinity`; `y` is positive but not an odd integer.</span></span>|`PositiveInfinity`|  
|<span data-ttu-id="fa7eb-513">`x` < 0 但不是`NegativeInfinity`;`y`不是一个整数， `NegativeInfinity`，或`PositiveInfinity`。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-513">`x` < 0 but not `NegativeInfinity`; `y` is not an integer, `NegativeInfinity`, or `PositiveInfinity`.</span></span>|`NaN`|  
|<span data-ttu-id="fa7eb-514">`x` =-1;`y`  =  `NegativeInfinity`或`PositiveInfinity`。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-514">`x` = -1; `y` = `NegativeInfinity` or `PositiveInfinity`.</span></span>|`NaN`|  
|<span data-ttu-id="fa7eb-515">-1 < `x` < 1; `y` = `NegativeInfinity`.</span><span class="sxs-lookup"><span data-stu-id="fa7eb-515">-1 < `x` < 1; `y` = `NegativeInfinity`.</span></span>|`PositiveInfinity`|  
|<span data-ttu-id="fa7eb-516">-1 < `x` < 1; `y` = `PositiveInfinity`.</span><span class="sxs-lookup"><span data-stu-id="fa7eb-516">-1 < `x` < 1; `y` = `PositiveInfinity`.</span></span>|<span data-ttu-id="fa7eb-517">0</span><span class="sxs-lookup"><span data-stu-id="fa7eb-517">0</span></span>|  
|<span data-ttu-id="fa7eb-518">`x` <-1 或`x`> 1;`y` = `NegativeInfinity`.</span><span class="sxs-lookup"><span data-stu-id="fa7eb-518">`x` < -1 or `x` > 1; `y` = `NegativeInfinity`.</span></span>|<span data-ttu-id="fa7eb-519">0</span><span class="sxs-lookup"><span data-stu-id="fa7eb-519">0</span></span>|  
|<span data-ttu-id="fa7eb-520">`x` <-1 或`x`> 1;`y` = `PositiveInfinity`.</span><span class="sxs-lookup"><span data-stu-id="fa7eb-520">`x` < -1 or `x` > 1; `y` = `PositiveInfinity`.</span></span>|`PositiveInfinity`|  
|<span data-ttu-id="fa7eb-521">`x` = 0; `y` < 0.</span><span class="sxs-lookup"><span data-stu-id="fa7eb-521">`x` = 0; `y` < 0.</span></span>|`PositiveInfinity`|  
|<span data-ttu-id="fa7eb-522">`x` = 0; `y` > 0.</span><span class="sxs-lookup"><span data-stu-id="fa7eb-522">`x` = 0; `y` > 0.</span></span>|<span data-ttu-id="fa7eb-523">0</span><span class="sxs-lookup"><span data-stu-id="fa7eb-523">0</span></span>|  
|<span data-ttu-id="fa7eb-524">`x` = 1;`y`是以外的任何值`NaN`。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-524">`x` = 1; `y` is any value except `NaN`.</span></span>|<span data-ttu-id="fa7eb-525">1</span><span class="sxs-lookup"><span data-stu-id="fa7eb-525">1</span></span>|  
|<span data-ttu-id="fa7eb-526">`x` = `PositiveInfinity`; `y` < 0.</span><span class="sxs-lookup"><span data-stu-id="fa7eb-526">`x` = `PositiveInfinity`; `y` < 0.</span></span>|<span data-ttu-id="fa7eb-527">0</span><span class="sxs-lookup"><span data-stu-id="fa7eb-527">0</span></span>|  
|<span data-ttu-id="fa7eb-528">`x` = `PositiveInfinity`; `y` > 0.</span><span class="sxs-lookup"><span data-stu-id="fa7eb-528">`x` = `PositiveInfinity`; `y` > 0.</span></span>|`PositiveInfinity`|  
  
   
  
## Examples  
 <span data-ttu-id="fa7eb-529">下面的示例使用<xref:System.Math.Pow%2A>方法计算的结果引发 2 的范围从 0 到 32 次幂的值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-529">The following example uses the <xref:System.Math.Pow%2A> method to calculate the value that results from raising 2 to a power ranging from 0 to 32.</span></span>  
  
 [!code-csharp[System.Math.Pow#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.pow/cs/pow1.cs#1)]
 [!code-vb[System.Math.Pow#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.pow/vb/pow1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Sqrt(System.Double)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Round">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fa7eb-530">将值舍入到最接近的整数或指定的小数位数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-530">Rounds a value to the nearest integer or to the specified number of fractional digits.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-531">本节内容：</span><span class="sxs-lookup"><span data-stu-id="fa7eb-531">In this section:</span></span>  
  
 <span data-ttu-id="fa7eb-532">[重载的方法语法](#Syntax) </span><span class="sxs-lookup"><span data-stu-id="fa7eb-532">[Overloaded method syntax](#Syntax) </span></span>  
 <span data-ttu-id="fa7eb-533">[参数](#Params) </span><span class="sxs-lookup"><span data-stu-id="fa7eb-533">[Parameters](#Params) </span></span>  
 <span data-ttu-id="fa7eb-534">[返回值](#Returns) </span><span class="sxs-lookup"><span data-stu-id="fa7eb-534">[Return value](#Returns) </span></span>  
 <span data-ttu-id="fa7eb-535">[异常](#Exceptions) </span><span class="sxs-lookup"><span data-stu-id="fa7eb-535">[Exceptions](#Exceptions) </span></span>  
 <span data-ttu-id="fa7eb-536">[请勿调用的方法？](#Tasks) </span><span class="sxs-lookup"><span data-stu-id="fa7eb-536">[Which method do I call?](#Tasks) </span></span>  
 <span data-ttu-id="fa7eb-537">[中点值和舍入约定](#Midpoint) </span><span class="sxs-lookup"><span data-stu-id="fa7eb-537">[Midpoint values and rounding conventions](#Midpoint) </span></span>  
 <span data-ttu-id="fa7eb-538">[舍入和精度](#Precision) </span><span class="sxs-lookup"><span data-stu-id="fa7eb-538">[Rounding and precision](#Precision) </span></span>  
 <span data-ttu-id="fa7eb-539">[舍入和单精度浮点值](#Single) </span><span class="sxs-lookup"><span data-stu-id="fa7eb-539">[Rounding and single-precision floating-point values](#Single) </span></span>  
 <span data-ttu-id="fa7eb-540">示例：</span><span class="sxs-lookup"><span data-stu-id="fa7eb-540">Examples:</span></span>   
 [<span data-ttu-id="fa7eb-541">Math.Round(Decimal)</span><span class="sxs-lookup"><span data-stu-id="fa7eb-541">Math.Round(Decimal)</span></span>](#Round1_Example)  
 [<span data-ttu-id="fa7eb-542">Math.Round(Double)</span><span class="sxs-lookup"><span data-stu-id="fa7eb-542">Math.Round(Double)</span></span>](#Round2_Example)  
 [<span data-ttu-id="fa7eb-543">Math.Round （十进制，Int32）</span><span class="sxs-lookup"><span data-stu-id="fa7eb-543">Math.Round(Decimal, Int32)</span></span>](#Round3_Example)  
 [<span data-ttu-id="fa7eb-544">Math.Round （十进制，MidpointRounding）</span><span class="sxs-lookup"><span data-stu-id="fa7eb-544">Math.Round(Decimal, MidpointRounding)</span></span>](#Round4_Example)  
 [<span data-ttu-id="fa7eb-545">Math.Round （双精度型，Int32）</span><span class="sxs-lookup"><span data-stu-id="fa7eb-545">Math.Round(Double, Int32)</span></span>](#Round5_Example)  
 [<span data-ttu-id="fa7eb-546">Math.Round(Double, MidpointRounding)</span><span class="sxs-lookup"><span data-stu-id="fa7eb-546">Math.Round(Double, MidpointRounding)</span></span>](#Round6_Example)  
 [<span data-ttu-id="fa7eb-547">Math.Round (Decimal、 Int32，MidpointRounding)</span><span class="sxs-lookup"><span data-stu-id="fa7eb-547">Math.Round(Decimal, Int32, MidpointRounding)</span></span>](#Round7_Example)  
 [<span data-ttu-id="fa7eb-548">Math.Round (双精度型，Int32，MidpointRounding)</span><span class="sxs-lookup"><span data-stu-id="fa7eb-548">Math.Round(Double, Int32, MidpointRounding)</span></span>](#Round8_Example)  
[<span data-ttu-id="fa7eb-549">版本信息</span><span class="sxs-lookup"><span data-stu-id="fa7eb-549">Version information</span></span>](#Round_Versions)  
  
<a name="Syntax"></a>   
## <a name="overloaded-method-syntax"></a><span data-ttu-id="fa7eb-550">重载的方法语法</span><span class="sxs-lookup"><span data-stu-id="fa7eb-550">Overloaded method syntax</span></span>  
 <span data-ttu-id="fa7eb-551">选择重载方法的其他指南，请参阅[请勿调用的方法？](#Tasks)</span><span class="sxs-lookup"><span data-stu-id="fa7eb-551">For additional guidance on choosing an overload, see [Which method do I call?](#Tasks)</span></span>  
  
 <span data-ttu-id="fa7eb-552">`Decimal Math.Round(Decimal` `d` `)`</span><span class="sxs-lookup"><span data-stu-id="fa7eb-552">`Decimal Math.Round(Decimal` `d` `)`</span></span>  
 <span data-ttu-id="fa7eb-553">将舍入为最接近的整数，十进制值并且将舍入到最接近的偶数的点值 ([示例](#Round1_Example))。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-553">Rounds a decimal value to the nearest integer, and rounds midpoint values to the nearest even number ([example](#Round1_Example)).</span></span>  
  
 <span data-ttu-id="fa7eb-554">`Double Math.Round(Double` `a` `)`</span><span class="sxs-lookup"><span data-stu-id="fa7eb-554">`Double Math.Round(Double` `a` `)`</span></span>  
 <span data-ttu-id="fa7eb-555">将舍入为最接近的整数，双精度浮点值并且将舍入到最接近的偶数的点值 ([示例](#Round2_Example))。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-555">Rounds a double-precision floating-point value to the nearest integer, and rounds midpoint values to the nearest even number ([example](#Round2_Example)).</span></span>  
  
 <span data-ttu-id="fa7eb-556">`Decimal Math.Round(Decimal` `d` `, Int32`  `decimals` `)`</span><span class="sxs-lookup"><span data-stu-id="fa7eb-556">`Decimal Math.Round(Decimal` `d` `, Int32`  `decimals` `)`</span></span>  
 <span data-ttu-id="fa7eb-557">将舍入到指定的小数位数，十进制值并且将舍入到最接近的偶数的点值 ([示例](#Round3_Example))。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-557">Rounds a decimal value to a specified number of fractional digits, and rounds midpoint values to the nearest even number ([example](#Round3_Example)).</span></span>  
  
 <span data-ttu-id="fa7eb-558">`Double Math.Round(Double` `value` `, Int32`  `digits` `)`</span><span class="sxs-lookup"><span data-stu-id="fa7eb-558">`Double Math.Round(Double` `value` `, Int32`  `digits` `)`</span></span>  
 <span data-ttu-id="fa7eb-559">双精度浮点值指定的小数位数舍入，并将舍入到最接近的偶数的点值 ([示例](#Round4_Example))。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-559">Rounds a double-precision floating-point value to a specified number of fractional digits, and rounds midpoint values to the nearest even number ([example](#Round4_Example)).</span></span>  
  
 <span data-ttu-id="fa7eb-560">`Decimal Math.Round(Decimal` `d` `, MidpointRounding`  `mode` `)`</span><span class="sxs-lookup"><span data-stu-id="fa7eb-560">`Decimal Math.Round(Decimal` `d` `, MidpointRounding`  `mode` `)`</span></span>  
 <span data-ttu-id="fa7eb-561">将舍入为最接近的整数，十进制值，并使用指定的舍入约定中点值 ([示例](#Round5_Example))。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-561">Rounds a decimal value to the nearest integer, and uses the specified rounding convention for midpoint values ([example](#Round5_Example)).</span></span>  
  
 <span data-ttu-id="fa7eb-562">`Double Math.Round(Double` `value` `, MidpointRounding`  `mode` `)`</span><span class="sxs-lookup"><span data-stu-id="fa7eb-562">`Double Math.Round(Double` `value` `, MidpointRounding`  `mode` `)`</span></span>  
 <span data-ttu-id="fa7eb-563">最接近的整数，双精度浮点值舍入，并使用指定的舍入约定中点值 ([示例](#Round6_Example))。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-563">Rounds a double-precision floating-point value to the nearest integer, and uses the specified rounding convention for midpoint values ([example](#Round6_Example)).</span></span>  
  
 <span data-ttu-id="fa7eb-564">`Decimal Math.Round(Decimal` `d` `, Int32`  `decimals` `, MidpointRounding`  `mode` `)`</span><span class="sxs-lookup"><span data-stu-id="fa7eb-564">`Decimal Math.Round(Decimal` `d` `, Int32`  `decimals` `, MidpointRounding`  `mode` `)`</span></span>  
 <span data-ttu-id="fa7eb-565">指定数目的小数位，十进制值舍入，并使用指定的舍入约定中点值 ([示例](#Round7_Example))。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-565">Rounds a decimal value to a specified number of fractional digits, and uses the specified rounding convention for midpoint values ([example](#Round7_Example)).</span></span>  
  
 <span data-ttu-id="fa7eb-566">`Double Math.Round(Double` `value` `, Int32`  `digits` `, MidpointRounding`  `mode` `)`</span><span class="sxs-lookup"><span data-stu-id="fa7eb-566">`Double Math.Round(Double` `value` `, Int32`  `digits` `, MidpointRounding`  `mode` `)`</span></span>  
 <span data-ttu-id="fa7eb-567">双精度浮点值指定的小数位数舍入，并使用指定的舍入约定中点值 ([示例](#Round8_Example))。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-567">Rounds a double-precision floating-point value to a specified number of fractional digits, and uses the specified rounding convention for midpoint values ([example](#Round8_Example)).</span></span>  
  
<a name="Params"></a>   
## <a name="parameters"></a><span data-ttu-id="fa7eb-568">参数</span><span class="sxs-lookup"><span data-stu-id="fa7eb-568">Parameters</span></span>  
 <span data-ttu-id="fa7eb-569">这是用于参数的完整列表<xref:System.Math.Round%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-569">This is a complete list of parameters for the <xref:System.Math.Round%2A> method.</span></span> <span data-ttu-id="fa7eb-570">有关使用每个重载的参数，请参阅上面的重载语法。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-570">For the parameters used by each overload, see the overload syntax above.</span></span>  
  
|<span data-ttu-id="fa7eb-571">参数</span><span class="sxs-lookup"><span data-stu-id="fa7eb-571">Parameter</span></span>|<span data-ttu-id="fa7eb-572">类型</span><span class="sxs-lookup"><span data-stu-id="fa7eb-572">Type</span></span>|<span data-ttu-id="fa7eb-573">描述</span><span class="sxs-lookup"><span data-stu-id="fa7eb-573">Description</span></span>|  
|---------------|----------|-----------------|  
|`d`|<xref:System.Decimal>|<span data-ttu-id="fa7eb-574">要舍入的数字。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-574">A number to be rounded.</span></span>|  
|`a`<br /><br /> <span data-ttu-id="fa7eb-575">或</span><span class="sxs-lookup"><span data-stu-id="fa7eb-575">-or-</span></span><br /><br /> `value`|<xref:System.Double>|<span data-ttu-id="fa7eb-576">要舍入的双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-576">A double-precision floating-point number to be rounded.</span></span>|  
|`decimals`<br /><br /> <span data-ttu-id="fa7eb-577">或</span><span class="sxs-lookup"><span data-stu-id="fa7eb-577">-or-</span></span><br /><br /> `digits`|<xref:System.Int32>|<span data-ttu-id="fa7eb-578">返回值中的小数数字。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-578">The number of fractional digits in the return value.</span></span> <span data-ttu-id="fa7eb-579">有关<xref:System.Decimal>值，它可以介于 0 到 28。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-579">For <xref:System.Decimal> values, it can range from 0 to 28.</span></span> <span data-ttu-id="fa7eb-580">有关<xref:System.Double>值，它可以介于 0 到 15。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-580">For <xref:System.Double> values, it can range from 0 to 15.</span></span> <span data-ttu-id="fa7eb-581">请注意 15，最多的支持的整数和小数位数<xref:System.Double>类型。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-581">Note that 15 is the maximum number of integral and fractional digits supported by the <xref:System.Double> type.</span></span><br /><br /> <span data-ttu-id="fa7eb-582">默认值： 0，它将舍入为整数</span><span class="sxs-lookup"><span data-stu-id="fa7eb-582">Default value: 0, which rounds to an integer</span></span>|  
|`mode`|<xref:System.MidpointRounding>|<span data-ttu-id="fa7eb-583">一个标志，指定要使用的中点值舍入的约定。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-583">A flag that specifies the convention to use for rounding midpoint values.</span></span> <span data-ttu-id="fa7eb-584">请参阅[中点值和舍入约定](#Midpoint)。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-584">See [Midpoint values and rounding conventions](#Midpoint).</span></span><br /><br /> <span data-ttu-id="fa7eb-585">默认值： <xref:System.MidpointRounding.ToEven?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="fa7eb-585">Default value: <xref:System.MidpointRounding.ToEven?displayProperty=nameWithType></span></span>|  
  
<a name="Returns"></a>   
## <a name="return-value"></a><span data-ttu-id="fa7eb-586">返回值</span><span class="sxs-lookup"><span data-stu-id="fa7eb-586">Return value</span></span>  
 <span data-ttu-id="fa7eb-587">类型：<xref:System.Decimal>或<xref:System.Double>，具体取决于要舍入的值的类型。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-587">Type: <xref:System.Decimal> or <xref:System.Double>, depending on the type of the value to be rounded.</span></span>   
<span data-ttu-id="fa7eb-588">与相同类型的数值`d`， `a`，或`value`，但舍入为整数或到指定的十进制位数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-588">A numeric value of the same type as `d`, `a`, or `value`, but rounded either to an integer or to the specified number of decimal digits.</span></span> <span data-ttu-id="fa7eb-589">请参阅[中点值和舍入约定](#Midpoint)有关舍入数与中点值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-589">See [Midpoint values and rounding conventions](#Midpoint) for information about rounding numbers with midpoint values.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="fa7eb-590">时点值舍入，舍入算法会执行相等性测试。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-590">When rounding midpoint values, the rounding algorithm performs an equality test.</span></span> <span data-ttu-id="fa7eb-591">由于的二进制表示形式和精度浮点格式的问题，该方法返回的值可以是意外。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-591">Because of problems of binary representation and precision in the floating-point format, the value returned by the method can be unexpected.</span></span> <span data-ttu-id="fa7eb-592">有关详细信息，请参阅[舍入和精度](#Precision)。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-592">For more information, see [Rounding and precision](#Precision).</span></span>  
  
 <span data-ttu-id="fa7eb-593">如果使用的重载<xref:System.Double>参数调用与<xref:System.Double.NaN?displayProperty=nameWithType>，该方法返回<xref:System.Double.NaN?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-593">If an overload with a <xref:System.Double> parameter is called with <xref:System.Double.NaN?displayProperty=nameWithType>, the method returns <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span> <span data-ttu-id="fa7eb-594">如果使用调用<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>或<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>，该方法返回<xref:System.Double.PositiveInfinity?displayProperty=nameWithType>或<xref:System.Double.NegativeInfinity?displayProperty=nameWithType>分别。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-594">If it is called with <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, the method returns <xref:System.Double.PositiveInfinity?displayProperty=nameWithType> or <xref:System.Double.NegativeInfinity?displayProperty=nameWithType>, respectively.</span></span>  
  
<a name="Exceptions"></a>   
## <a name="exceptions"></a><span data-ttu-id="fa7eb-595">异常</span><span class="sxs-lookup"><span data-stu-id="fa7eb-595">Exceptions</span></span>  
  
|<span data-ttu-id="fa7eb-596">例外</span><span class="sxs-lookup"><span data-stu-id="fa7eb-596">Exception</span></span>|<span data-ttu-id="fa7eb-597">条件</span><span class="sxs-lookup"><span data-stu-id="fa7eb-597">Condition</span></span>|<span data-ttu-id="fa7eb-598">由引发</span><span class="sxs-lookup"><span data-stu-id="fa7eb-598">Thrown by</span></span>|  
|---------------|---------------|---------------|  
|<xref:System.OverflowException>|<span data-ttu-id="fa7eb-599">结果超出了范围<xref:System.Decimal>类型。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-599">The result is outside the range of the <xref:System.Decimal> type.</span></span>|<xref:System.Math.Round%28System.Decimal%29><br /><br /> <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%29><br /><br /> <xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29><br /><br /> <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29>|  
|<xref:System.ArgumentOutOfRangeException>|<span data-ttu-id="fa7eb-600">`decimals` 小于 0 或大于 28。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-600">`decimals` is less than 0 or greater than 28.</span></span><br /><br /> <span data-ttu-id="fa7eb-601">或</span><span class="sxs-lookup"><span data-stu-id="fa7eb-601">-or-</span></span><br /><br /> <span data-ttu-id="fa7eb-602">`digits` 小于 0 或大于 15。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-602">`digits` is less than 0 or greater than 15.</span></span>|<xref:System.Math.Round%28System.Decimal%2CSystem.Int32%29><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.Int32%29><br /><br /> <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29>|  
|<xref:System.ArgumentException>|<span data-ttu-id="fa7eb-603">`mode` 不是有效的 <xref:System.MidpointRounding> 值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-603">`mode` is not a valid value of <xref:System.MidpointRounding>.</span></span>|<xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29><br /><br /> <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29>|  
  
<a name="Tasks"></a>   
## <a name="which-method-do-i-call"></a><span data-ttu-id="fa7eb-604">请勿调用的方法？</span><span class="sxs-lookup"><span data-stu-id="fa7eb-604">Which method do I call?</span></span>  
  
|<span data-ttu-id="fa7eb-605">到</span><span class="sxs-lookup"><span data-stu-id="fa7eb-605">To</span></span>|<span data-ttu-id="fa7eb-606">Call</span><span class="sxs-lookup"><span data-stu-id="fa7eb-606">Call</span></span>|  
|--------|----------|  
|<span data-ttu-id="fa7eb-607">为整数数字舍入通过舍入为最接近的约定。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-607">Round a number to an integer by using the rounding to nearest convention.</span></span>|<xref:System.Math.Round%28System.Decimal%29><br /><br /> <span data-ttu-id="fa7eb-608">或</span><span class="sxs-lookup"><span data-stu-id="fa7eb-608">-or-</span></span><br /><br /> <xref:System.Math.Round%28System.Double%29>|  
|<span data-ttu-id="fa7eb-609">舍入为使用指定的整数的数字舍入约定。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-609">Round a number to an integer by using a specified rounding convention.</span></span>|<xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29><br /><br /> <span data-ttu-id="fa7eb-610">或</span><span class="sxs-lookup"><span data-stu-id="fa7eb-610">-or-</span></span><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29>|  
|<span data-ttu-id="fa7eb-611">通过使用舍入为最接近的约定舍入到指定的小数位数的数字。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-611">Round a number to a specified number of fractional digits by using the rounding to nearest convention.</span></span>|<xref:System.Math.Round%28System.Decimal%2CSystem.Int32%29><br /><br /> <span data-ttu-id="fa7eb-612">或</span><span class="sxs-lookup"><span data-stu-id="fa7eb-612">-or-</span></span><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.Int32%29>|  
|<span data-ttu-id="fa7eb-613">舍入到指定的使用指定的小数位数舍入约定。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-613">Round a number to a specified number of fractional digits by using a specified rounding convention.</span></span>|<xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29><br /><br /> <span data-ttu-id="fa7eb-614">或</span><span class="sxs-lookup"><span data-stu-id="fa7eb-614">-or-</span></span><br /><br /> <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29>|  
|<span data-ttu-id="fa7eb-615">Round<xref:System.Single>限于指定数目的通过指定舍入约定和最大程度减少丢失精度的小数位数的值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-615">Round a <xref:System.Single> value to a specified number of fractional digits by using a specified rounding convention and minimizing the loss of precision.</span></span>|<span data-ttu-id="fa7eb-616">将转换<xref:System.Single>到<xref:System.Decimal>并调用<xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29>。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-616">Convert the <xref:System.Single> to a <xref:System.Decimal> and call <xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29>.</span></span>|  
|<span data-ttu-id="fa7eb-617">到指定的小数位数的数字舍入同时可尽量减少的中点值舍入精度的问题。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-617">Round a number to a specified number of fractional digits while minimizing problems of precision in rounding midpoint values.</span></span>|<span data-ttu-id="fa7eb-618">调用实现"大于或大约等于"比较舍入方法。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-618">Call a rounding method that implements a "greater than or approximately equal to" comparison.</span></span> <span data-ttu-id="fa7eb-619">请参阅[舍入和精度](#Precision)。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-619">See [Rounding and precision](#Precision).</span></span>|  
|<span data-ttu-id="fa7eb-620">舍入为整数分数值大于的小数部分值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-620">Round a fractional value to an integer that is greater than the fractional value.</span></span> <span data-ttu-id="fa7eb-621">例如，舍入 3.1 到 4。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-621">For example, round 3.1 to 4.</span></span>|<xref:System.Math.Ceiling%2A>|  
|<span data-ttu-id="fa7eb-622">Round 小数部分为整数值小于的小数部分值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-622">Round a fractional value to an integer that is less than the fractional value.</span></span> <span data-ttu-id="fa7eb-623">例如，舍入 3.9 到 3。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-623">For example, round 3.9 to 3.</span></span>|<xref:System.Math.Floor%2A>|  
  
<a name="Midpoint"></a>   
## <a name="midpoint-values-and-rounding-conventions"></a><span data-ttu-id="fa7eb-624">中点值和舍入约定</span><span class="sxs-lookup"><span data-stu-id="fa7eb-624">Midpoint values and rounding conventions</span></span>  
 <span data-ttu-id="fa7eb-625">舍入涉及将具有指定的精度的数字值转换为精度较低的最接近的值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-625">Rounding involves converting a numeric value with a specified precision to the nearest value with less precision.</span></span> <span data-ttu-id="fa7eb-626">例如，你可以使用<xref:System.Math.Round%28System.Double%29>方法要舍入到 3.0 3.4，值与<xref:System.Math.Round%28System.Double%2CSystem.Int32%29>方法要舍入到 3.58 3.579 一个值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-626">For example, you can use the <xref:System.Math.Round%28System.Double%29> method to round a value of 3.4 to 3.0, and the <xref:System.Math.Round%28System.Double%2CSystem.Int32%29> method to round a value of 3.579 to 3.58.</span></span>  
  
 <span data-ttu-id="fa7eb-627">在点值，结果中的最低有效位数后的值是两个数字之间精确的一半。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-627">In a midpoint value, the value after the least significant digit in the result is precisely half way between two numbers.</span></span> <span data-ttu-id="fa7eb-628">例如，3.47500 是如果它是由一个点值舍入两个小数位，而且 7.500 为点值是要舍入为整数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-628">For example, 3.47500 is a midpoint value if it is to be rounded two decimal places, and 7.500 is a midpoint value if it is to be rounded to an integer.</span></span> <span data-ttu-id="fa7eb-629">在这些情况下，最接近的值不能轻松地标识而无需舍入的约定。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-629">In these cases, the nearest value can't be easily identified without a rounding convention.</span></span>  
  
 <span data-ttu-id="fa7eb-630"><xref:System.Math.Round%2A>方法用于处理中点值支持两个舍入约定：</span><span class="sxs-lookup"><span data-stu-id="fa7eb-630">The <xref:System.Math.Round%2A> method supports two rounding conventions for handling midpoint values:</span></span>  
  
 <span data-ttu-id="fa7eb-631">**向远离零舍入**</span><span class="sxs-lookup"><span data-stu-id="fa7eb-631">**Rounding away from zero**</span></span>  
 <span data-ttu-id="fa7eb-632">中点值舍入为从零开始的下一个编号。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-632">Midpoint values are rounded to the next number away from zero.</span></span> <span data-ttu-id="fa7eb-633">例如，3.75 舍入到 3.8，3.85 舍入到 3.9，-3.75 舍入到-3.8，和-3.85 舍入到-3.9。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-633">For example, 3.75 rounds to 3.8, 3.85 rounds to 3.9, -3.75 rounds to -3.8, and -3.85 rounds to -3.9.</span></span> <span data-ttu-id="fa7eb-634">这种形式的舍入由<xref:System.MidpointRounding.AwayFromZero?displayProperty=nameWithType>枚举成员。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-634">This form of rounding is represented by the <xref:System.MidpointRounding.AwayFromZero?displayProperty=nameWithType> enumeration member.</span></span>  
  
 <span data-ttu-id="fa7eb-635">向远离零舍入是舍入最广为人知的窗体。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-635">Rounding away from zero is the most widely known form of rounding.</span></span>  
  
 <span data-ttu-id="fa7eb-636">**舍入到最接近，或银行家舍入**</span><span class="sxs-lookup"><span data-stu-id="fa7eb-636">**Rounding to nearest, or banker's rounding**</span></span>  
 <span data-ttu-id="fa7eb-637">中点值舍入为最接近的偶数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-637">Midpoint values are rounded to the nearest even number.</span></span> <span data-ttu-id="fa7eb-638">例如，3.75 和 3.85 舍入到 3.8，和-3.75 和-3.85 舍入到-3.8。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-638">For example, both 3.75 and 3.85 round to 3.8, and both -3.75 and -3.85 round to -3.8.</span></span> <span data-ttu-id="fa7eb-639">这种形式的舍入由<xref:System.MidpointRounding.ToEven?displayProperty=nameWithType>枚举成员。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-639">This form of rounding is represented by the <xref:System.MidpointRounding.ToEven?displayProperty=nameWithType> enumeration member.</span></span>  
  
 <span data-ttu-id="fa7eb-640">舍入到最接近是舍入财务和统计操作中使用的标准形式。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-640">Rounding to nearest is the standard form of rounding used in financial and statistical operations.</span></span> <span data-ttu-id="fa7eb-641">它符合 IEEE 标准 754，第 4 部分。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-641">It conforms to IEEE Standard 754, section 4.</span></span> <span data-ttu-id="fa7eb-642">多个舍入操作中使用时，它减少了引起持续舍入的一个方向的中点值则舍入误差。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-642">When used in multiple rounding operations, it reduces the rounding error that is caused by consistently rounding midpoint values in a single direction.</span></span> <span data-ttu-id="fa7eb-643">在某些情况下，此舍入误差非常显著。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-643">In some cases, this rounding error can be significant.</span></span>  
  
 <span data-ttu-id="fa7eb-644">下面的示例演示可能会导致持续舍入的一个方向的中点值的偏差放大。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-644">The following example illustrates the bias that can result from consistently rounding midpoint values in a single direction.</span></span> <span data-ttu-id="fa7eb-645">该示例计算的数组的 true 平均值<xref:System.Decimal>值，并当通过使用两个约定舍入数组中的值时，然后计算平均值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-645">The example computes the true mean of an array of <xref:System.Decimal> values, and then computes the mean when the values in the array are rounded by using the two conventions.</span></span> <span data-ttu-id="fa7eb-646">在此示例中，则返回 true 的平均值和结果时舍入到最接近的平均值是相同的。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-646">In this example, the true mean and the mean that results when rounding to nearest are the same.</span></span> <span data-ttu-id="fa7eb-647">但是，当舍入为零会产生的平均值不同.05 （或 3.6%） 于 true 的平均值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-647">However, the mean that results when rounding away from zero differs by .05 (or by 3.6%) from the true mean.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/mean1.cs#2)]
 [!code-vb[System.Math.Round.Overload#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/mean1.vb#2)]  
  
 <span data-ttu-id="fa7eb-648">默认情况下，<xref:System.Math.Round%2A>方法使用舍入为最接近的约定。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-648">By default, the <xref:System.Math.Round%2A> method uses the rounding to nearest convention.</span></span> <span data-ttu-id="fa7eb-649">下表列出的重载<xref:System.Math.Round%2A>方法和舍入的约定，每个使用。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-649">The following table lists the overloads of the <xref:System.Math.Round%2A> method and the rounding convention that each uses.</span></span>  
  
|<span data-ttu-id="fa7eb-650">重载</span><span class="sxs-lookup"><span data-stu-id="fa7eb-650">Overload</span></span>|<span data-ttu-id="fa7eb-651">舍入约定</span><span class="sxs-lookup"><span data-stu-id="fa7eb-651">Rounding convention</span></span>|  
|--------------|-------------------------|  
|<xref:System.Math.Round%28System.Decimal%29>|<xref:System.MidpointRounding.ToEven>|  
|<xref:System.Math.Round%28System.Double%29>|<xref:System.MidpointRounding.ToEven>|  
|<xref:System.Math.Round%28System.Decimal%2CSystem.Int32%29>|<xref:System.MidpointRounding.ToEven>|  
|<xref:System.Math.Round%28System.Double%2CSystem.Int32%29>|<xref:System.MidpointRounding.ToEven>|  
|<xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29>|<span data-ttu-id="fa7eb-652">由`mode`参数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-652">Determined by `mode` parameter.</span></span>|  
|<xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29>|<span data-ttu-id="fa7eb-653">由`mode`参数</span><span class="sxs-lookup"><span data-stu-id="fa7eb-653">Determined by `mode` parameter</span></span>|  
|<xref:System.Math.Round%28System.Decimal%2CSystem.Int32%2CSystem.MidpointRounding%29>|<span data-ttu-id="fa7eb-654">由`mode`参数</span><span class="sxs-lookup"><span data-stu-id="fa7eb-654">Determined by `mode` parameter</span></span>|  
|<xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29>|<span data-ttu-id="fa7eb-655">由`mode`参数</span><span class="sxs-lookup"><span data-stu-id="fa7eb-655">Determined by `mode` parameter</span></span>|  
  
<a name="Precision"></a>   
## <a name="rounding-and-precision"></a><span data-ttu-id="fa7eb-656">舍入和精度</span><span class="sxs-lookup"><span data-stu-id="fa7eb-656">Rounding and precision</span></span>  
 <span data-ttu-id="fa7eb-657">若要确定是否舍入运算涉及点值，<xref:System.Math.Round%2A>方法乘以原始值被舍入 10<sup>n</sup>，其中*n*是所需的小数部分组成数在返回的值中，数字，然后确定剩余的小数部分的值是否大于或等于.5。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-657">In order to determine whether a rounding operation involves a midpoint value, the <xref:System.Math.Round%2A> method multiplies the original value to be rounded by 10<sup>n</sup>, where *n* is the desired number of fractional digits in the return value, and then determines whether the remaining fractional portion of the value is greater than or equal to .5.</span></span> <span data-ttu-id="fa7eb-658">这是稍有变化的"测试相等"部分中的测试相等性，和所讨论的那样<xref:System.Double>参考主题，具有浮点值的相等性测试存在问题因浮点格式的二进制文件的问题表示形式和精度。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-658">This is a slight variation on a test for equality, and as discussed in the "Testing for Equality" section of the <xref:System.Double> reference topic, tests for equality with floating-point values are problematic because of the floating-point format's issues with binary representation and precision.</span></span> <span data-ttu-id="fa7eb-659">这意味着，略小于.5 （由于精度损失） 数的任何小数部分将不会舍入向上。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-659">This means that any fractional portion of a number that is slightly less than .5 (because of a loss of precision) will not be rounded upward.</span></span>  
  
 <span data-ttu-id="fa7eb-660">以下示例演示了该问题。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-660">The following example illustrates the problem.</span></span> <span data-ttu-id="fa7eb-661">它重复添加.1 为 11.0 和舍入到最接近的整数结果。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-661">It repeatedly adds .1 to 11.0 and rounds the result to the nearest integer.</span></span> <span data-ttu-id="fa7eb-662">舍入的约定，无论 11.5 应舍入到 12。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-662">Regardless of the rounding convention, 11.5 should round to 12.</span></span> <span data-ttu-id="fa7eb-663">但是，如示例所示输出，事实并非如此。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-663">However, as the output from the example shows, it does not.</span></span> <span data-ttu-id="fa7eb-664">该示例使用"R"[标准数字格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)要显示的浮点值的完整精度，并显示值被舍入具有期间重复添加内容，丢失精度和其值实际是11.499999999999998。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-664">The example uses the "R" [standard numeric format string](~/docs/standard/base-types/standard-numeric-format-strings.md) to display the floating point value's full precision, and shows that the value to be rounded has lost precision during repeated additions, and its value is actually 11.499999999999998.</span></span> <span data-ttu-id="fa7eb-665">因为.499999999999998 小于.5，值不进行舍入为下一步的最大整数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-665">Because .499999999999998 is less than .5, the value is not rounded to the next highest integer.</span></span> <span data-ttu-id="fa7eb-666">如该示例还演示，此问题不会发生如果我们只需将分配到的常量值 11.5<xref:System.Double>变量。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-666">As the example also shows, this problem does not occur if we simply assign the constant value 11.5 to a <xref:System.Double> variable.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/precision1.cs#7)]
 [!code-vb[System.Math.Round.Overload#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/precision1.vb#7)]  
  
 <span data-ttu-id="fa7eb-667">问题的中点值舍入精度是最有可能在下列情况下发生：</span><span class="sxs-lookup"><span data-stu-id="fa7eb-667">Problems of precision in rounding midpoint values are most likely to arise in the following conditions:</span></span>  
  
-   <span data-ttu-id="fa7eb-668">当分数值不能以表示精确的浮点类型的二进制格式。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-668">When a fractional value cannot be expressed precisely in the floating-point type's binary format.</span></span>  
  
-   <span data-ttu-id="fa7eb-669">从一个或多个浮点运算计算时要舍入的值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-669">When the value to be rounded is calculated from one or more floating-point operations.</span></span>  
  
-   <span data-ttu-id="fa7eb-670">要舍入的值时<xref:System.Single>而不是<xref:System.Double>或<xref:System.Decimal>。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-670">When the value to be rounded is a <xref:System.Single> rather than a <xref:System.Double> or <xref:System.Decimal>.</span></span> <span data-ttu-id="fa7eb-671">有关详细信息，请参阅下一部分中，[舍入和单精度浮点值](#Single)。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-671">For more information, see the next section, [Rounding and single-precision floating-point values](#Single).</span></span>  
  
 <span data-ttu-id="fa7eb-672">在中舍入操作的精度缺乏是有问题的情况下，可以执行以下操作：</span><span class="sxs-lookup"><span data-stu-id="fa7eb-672">In cases where the lack of precision in rounding operations is problematic, you can do the following:</span></span>  
  
-   <span data-ttu-id="fa7eb-673">如果舍入运算调用的重载，将舍入<xref:System.Double>值，你可以更改<xref:System.Double>到<xref:System.Decimal>值和调用的重载，将舍入<xref:System.Decimal>值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-673">If the rounding operation calls an overload that rounds a <xref:System.Double> value, you can change the <xref:System.Double> to a <xref:System.Decimal> value and call an overload that rounds a <xref:System.Decimal> value instead.</span></span> <span data-ttu-id="fa7eb-674">尽管<xref:System.Decimal>数据类型还具有表示形式的问题和精度损失，更为常见的这些问题。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-674">Although the <xref:System.Decimal> data type also has problems of representation and loss of precision, these issues are far less common.</span></span>  
  
-   <span data-ttu-id="fa7eb-675">定义自定义的舍入算法来执行"几乎相等"测试以确定要舍入的值是可以接受是否接近点值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-675">Define a custom rounding algorithm that performs a "nearly equal" test to determine whether the value to be rounded is acceptably close to a midpoint value.</span></span> <span data-ttu-id="fa7eb-676">下面的示例定义`RoundApproximate`检查小数部分的值是否充分点值要进行舍入中点附近的方法。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-676">The following example defines a `RoundApproximate` method that examines whether a fractional value is sufficiently near to a midpoint value to be subject to midpoint rounding.</span></span> <span data-ttu-id="fa7eb-677">如示例输出所示，它解决了上一示例中所示舍入问题。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-677">As the output from the example shows, it corrects the rounding problem shown in the previous example.</span></span>  
  
     [!code-csharp[System.Math.Round.Overload#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/precision2.cs#8)]
     [!code-vb[System.Math.Round.Overload#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/precision2.vb#8)]  
  
<a name="Single"></a>   
## <a name="rounding-and-single-precision-floating-point-values"></a><span data-ttu-id="fa7eb-678">舍入和单精度浮点值</span><span class="sxs-lookup"><span data-stu-id="fa7eb-678">Rounding and single-precision floating-point values</span></span>  
 <span data-ttu-id="fa7eb-679"><xref:System.Math.Round%2A>方法包含接受的类型自变量的重载<xref:System.Decimal>和<xref:System.Double>。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-679">The <xref:System.Math.Round%2A> method includes overloads that accept arguments of type <xref:System.Decimal> and <xref:System.Double>.</span></span> <span data-ttu-id="fa7eb-680">舍入的类型的值没有方法<xref:System.Single>。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-680">There are no methods that round values of type <xref:System.Single>.</span></span> <span data-ttu-id="fa7eb-681">如果你通过<xref:System.Single>值的重载之一<xref:System.Math.Round%2A>方法，它是强制转换 （在 C# 中) 或 （在 Visual Basic 中) 转换为<xref:System.Double>，和相应<xref:System.Math.Round%2A>重载<xref:System.Double>调用参数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-681">If you pass a <xref:System.Single> value to one of the overloads of the <xref:System.Math.Round%2A> method, it is cast (in C#) or converted (in Visual Basic) to a <xref:System.Double>, and the corresponding <xref:System.Math.Round%2A> overload with a <xref:System.Double> parameter is called.</span></span> <span data-ttu-id="fa7eb-682">虽然这是一个的扩大转换，它通常会涉及丢失精度，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-682">Although this is a widening conversion, it often involves a loss of precision, as the following example illustrates.</span></span> <span data-ttu-id="fa7eb-683">当<xref:System.Single>16.325 的值传递给<xref:System.Math.Round%2A>方法并且舍入为两位小数使用舍入为最接近的约定，结果为 16.32 16.33 和不预期结果。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-683">When a <xref:System.Single> value of 16.325 is passed to the <xref:System.Math.Round%2A> method and rounded to two decimal places using the rounding to nearest convention, the result is 16.33 and not the expected result of 16.32.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/single1.cs#1)]
 [!code-vb[System.Math.Round.Overload#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/single1.vb#1)]  
  
 <span data-ttu-id="fa7eb-684">此意外的结果是由于在转换中的精度损失<xref:System.Single>值赋给<xref:System.Double>。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-684">This unexpected result is due to a loss of precision in the conversion of the <xref:System.Single> value to a <xref:System.Double>.</span></span> <span data-ttu-id="fa7eb-685">因为生成<xref:System.Double>16.325000762939453 值不是点值并大于 16.325，总向上消耗量。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-685">Because the resulting <xref:System.Double> value of 16.325000762939453 is not a midpoint value and is greater than 16.325, it is always rounded upward.</span></span>  
  
 <span data-ttu-id="fa7eb-686">在许多情况下，如示例所示，精度损失可以最小化或消除了转换或转换<xref:System.Single>值赋给<xref:System.Decimal>。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-686">In many cases, as the example illustrates, the loss of precision can be minimized or eliminated by casting or converting the <xref:System.Single> value to a <xref:System.Decimal>.</span></span> <span data-ttu-id="fa7eb-687">请注意，由于这是收缩转换，它需要使用转换运算符或调用转换方法。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-687">Note that, because this is a narrowing conversion, it requires using a cast operator or calling a conversion method.</span></span>  
  
<a name="Round1_Example"></a>   
## <a name="mathrounddecimal-example"></a><span data-ttu-id="fa7eb-688">Math.Round(Decimal) 示例</span><span class="sxs-lookup"><span data-stu-id="fa7eb-688">Math.Round(Decimal) example</span></span>  
 <span data-ttu-id="fa7eb-689">下面的示例演示<xref:System.Math.Round%28System.Decimal%29>方法。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-689">The following example demonstrates the <xref:System.Math.Round%28System.Decimal%29> method.</span></span> <span data-ttu-id="fa7eb-690">请注意， <xref:System.Decimal> 4.5 的值将舍入为 4，而不是 5，因为此重载使用默认值<xref:System.MidpointRounding.ToEven>约定。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-690">Note that the <xref:System.Decimal> value of 4.5 rounds to 4 rather than 5, because this overload uses the default <xref:System.MidpointRounding.ToEven> convention.</span></span>  
  
 [!code-csharp[System.Math.Round#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/rounddecimal1.cs#6)]
 [!code-vb[System.Math.Round#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/rounddecimal1.vb#6)]  
  
<a name="Round2_Example"></a>   
## <a name="mathrounddouble-example"></a><span data-ttu-id="fa7eb-691">Math.Round(Double) 示例</span><span class="sxs-lookup"><span data-stu-id="fa7eb-691">Math.Round(Double) example</span></span>  
 <span data-ttu-id="fa7eb-692">下面的示例演示了舍入为最接近的整数值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-692">The following example demonstrates rounding to the nearest integer value.</span></span>  
  
 [!code-cpp[Classic Math.Round Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Math.Round Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Math.Round Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Math.Round Example/CS/source.cs#1)]
 [!code-vb[Classic Math.Round Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Math.Round Example/VB/source.vb#1)]  
  
<a name="Round3_Example"></a>   
## <a name="mathrounddecimal-int32-example"></a><span data-ttu-id="fa7eb-693">Math.Round （十进制，Int32） 示例</span><span class="sxs-lookup"><span data-stu-id="fa7eb-693">Math.Round(Decimal, Int32) example</span></span>  
 <span data-ttu-id="fa7eb-694">下面的示例将舍入到具有单个的小数位的值的两个小数位带有的十进制值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-694">The following example rounds decimal values with two fractional digits to values that have a single fractional digit.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/source.cs#3)]
 [!code-vb[System.Math.Round.Overload#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/source.vb#3)]  
  
<a name="Round4_Example"></a>   
## <a name="mathrounddouble-int32-example"></a><span data-ttu-id="fa7eb-695">Math.Round （双精度型，Int32） 示例</span><span class="sxs-lookup"><span data-stu-id="fa7eb-695">Math.Round(Double, Int32) example</span></span>  
 <span data-ttu-id="fa7eb-696">下面的示例将使用为具有单个的小数位的双精度的两个小数位的双精度值舍入。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-696">The following example rounds double values with two fractional digits to doubles that have a single fractional digit.</span></span>  
  
 [!code-cpp[Classic Math.Round2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Math.Round2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Math.Round2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Math.Round2 Example/CS/source.cs#1)]
 [!code-vb[Classic Math.Round2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Math.Round2 Example/VB/source.vb#1)]  
  
<a name="Round5_Example"></a>   
## <a name="mathrounddecimal-midpointrounding-example"></a><span data-ttu-id="fa7eb-697">Math.Round （十进制，MidpointRounding） 示例</span><span class="sxs-lookup"><span data-stu-id="fa7eb-697">Math.Round(Decimal, MidpointRounding) example</span></span>  
 <span data-ttu-id="fa7eb-698">下面的示例显示返回的值<xref:System.Math.Round%28System.Decimal%29>方法，<xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29>方法替换`mode`参数<xref:System.MidpointRounding.ToEven>，和<xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29>方法替换`mode`参数<xref:System.MidpointRounding.AwayFromZero>。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-698">The following example displays values returned by the <xref:System.Math.Round%28System.Decimal%29> method, the <xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29> method with a `mode` argument of <xref:System.MidpointRounding.ToEven>, and the <xref:System.Math.Round%28System.Decimal%2CSystem.MidpointRounding%29> method with a `mode` argument of <xref:System.MidpointRounding.AwayFromZero>.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/midpoint1.cs#5)]
 [!code-vb[System.Math.Round.Overload#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/midpoint1.vb#5)]  
  
<a name="Round6_Example"></a>   
## <a name="mathrounddouble-midpointrounding-example"></a><span data-ttu-id="fa7eb-699">Math.Round （双精度型，MidpointRounding） 示例</span><span class="sxs-lookup"><span data-stu-id="fa7eb-699">Math.Round(Double, MidpointRounding) example</span></span>  
 <span data-ttu-id="fa7eb-700">下面的示例显示返回的值<xref:System.Math.Round%28System.Double%29>方法，<xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29>方法替换`mode`参数<xref:System.MidpointRounding.ToEven>，和<xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29>方法替换`mode`参数<xref:System.MidpointRounding.AwayFromZero>。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-700">The following example displays values returned by the <xref:System.Math.Round%28System.Double%29> method, the <xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29> method with a `mode` argument of <xref:System.MidpointRounding.ToEven>, and the <xref:System.Math.Round%28System.Double%2CSystem.MidpointRounding%29> method with a `mode` argument of <xref:System.MidpointRounding.AwayFromZero>.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/midpoint2.cs#6)]
 [!code-vb[System.Math.Round.Overload#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/midpoint2.vb#6)]  
  
<a name="Round7_Example"></a>   
## <a name="mathrounddecimal-int32-midpointrounding-example"></a><span data-ttu-id="fa7eb-701">Math.Round (Decimal、 Int32，MidpointRounding) 示例</span><span class="sxs-lookup"><span data-stu-id="fa7eb-701">Math.Round(Decimal, Int32, MidpointRounding) example</span></span>  
 <span data-ttu-id="fa7eb-702">下面的示例演示如何使用<xref:System.Math.Round%2A>方法替换<xref:System.MidpointRounding>枚举。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-702">The following example demonstrates how to use the <xref:System.Math.Round%2A> method with the <xref:System.MidpointRounding> enumeration.</span></span>  
  
 [!code-cpp[math.midpointrounding#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.midpointrounding/cpp/mpr.cpp#1)]
 [!code-csharp[math.midpointrounding#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.midpointrounding/CS/mpr.cs#1)]
 [!code-vb[math.midpointrounding#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.midpointrounding/VB/mpr.vb#1)]  
  
<a name="Round8_Example"></a>   
## <a name="mathrounddouble-int32-midpointrounding-example"></a><span data-ttu-id="fa7eb-703">Math.Round (双精度型，Int32，MidpointRounding) 示例</span><span class="sxs-lookup"><span data-stu-id="fa7eb-703">Math.Round(Double, Int32, MidpointRounding) example</span></span>  
 <span data-ttu-id="fa7eb-704">下面的示例演示如何使用<xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29>方法替换<xref:System.MidpointRounding>枚举。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-704">The following example demonstrates how to use the <xref:System.Math.Round%28System.Double%2CSystem.Int32%2CSystem.MidpointRounding%29> method with the <xref:System.MidpointRounding> enumeration.</span></span>  
  
 [!code-csharp[System.Math.Round.Overload#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round.overload/cs/mpr.cs#4)]
 [!code-vb[System.Math.Round.Overload#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round.overload/vb/mpr.vb#4)]  
  
<a name="Round_Versions"></a>   
## <a name="version-information"></a><span data-ttu-id="fa7eb-705">版本信息</span><span class="sxs-lookup"><span data-stu-id="fa7eb-705">Version information</span></span>  
 <span data-ttu-id="fa7eb-706">.NET Framework</span><span class="sxs-lookup"><span data-stu-id="fa7eb-706">.NET Framework</span></span>  
 <span data-ttu-id="fa7eb-707">重载，而无需<xref:System.MidpointRounding>中支持参数： 4.5、 4、 3.5、 3.0、 2.0、 1.1、 1.0</span><span class="sxs-lookup"><span data-stu-id="fa7eb-707">Overloads without a <xref:System.MidpointRounding> parameter are supported in: 4.5, 4, 3.5, 3.0, 2.0, 1.1, 1.0</span></span>  
<span data-ttu-id="fa7eb-708">与重载<xref:System.MidpointRounding>中支持参数： 4.5、 4、 3.5、 3.0、 2.0</span><span class="sxs-lookup"><span data-stu-id="fa7eb-708">Overloads with a <xref:System.MidpointRounding> parameter are supported in: 4.5, 4, 3.5, 3.0, 2.0</span></span>  
  
 <span data-ttu-id="fa7eb-709">.NET Framework Client Profile</span><span class="sxs-lookup"><span data-stu-id="fa7eb-709">.NET Framework Client Profile</span></span>  
 <span data-ttu-id="fa7eb-710">中支持所有重载： 4、 3.5 SP1</span><span class="sxs-lookup"><span data-stu-id="fa7eb-710">All overloads are supported in: 4, 3.5 SP1</span></span>  
  
 <span data-ttu-id="fa7eb-711">可移植类库</span><span class="sxs-lookup"><span data-stu-id="fa7eb-711">Portable Class Library</span></span>  
 <span data-ttu-id="fa7eb-712">所有重载都受都支持</span><span class="sxs-lookup"><span data-stu-id="fa7eb-712">All overloads are supported</span></span>  
  
 <span data-ttu-id="fa7eb-713">用于 Windows 应用商店应用的 .NET</span><span class="sxs-lookup"><span data-stu-id="fa7eb-713">.NET for Windows Store apps</span></span>  
 <span data-ttu-id="fa7eb-714">中支持所有重载： Windows 8</span><span class="sxs-lookup"><span data-stu-id="fa7eb-714">All overloads are supported in: Windows 8</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Ceiling(System.Decimal)" />
        <altmember cref="M:System.Math.Floor(System.Decimal)" />
        <altmember cref="M:System.Math.Truncate(System.Decimal)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static decimal Round (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Round(valuetype System.Decimal d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (d As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Round(System::Decimal d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="fa7eb-715">要舍入的小数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-715">A decimal number to be rounded.</span></span></param>
        <summary><span data-ttu-id="fa7eb-716">将小数值舍入到最接近的整数值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-716">Rounds a decimal value to the nearest integral value.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-717">最接近参数 <paramref name="d" /> 的整数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-717">The integer nearest parameter <paramref name="d" />.</span></span> <span data-ttu-id="fa7eb-718">如果 <paramref name="d" /> 的小数部分正好处于两个整数中间，其中一个整数为偶数，另一个整数为奇数，则返回偶数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-718">If the fractional component of <paramref name="d" /> is halfway between two integers, one of which is even and the other odd, the even number is returned.</span></span> <span data-ttu-id="fa7eb-719">请注意，此方法返回 <see cref="T:System.Decimal" />，而不是整数类型。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-719">Note that this method returns a <see cref="T:System.Decimal" /> instead of an integral type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="fa7eb-720">有关示例和全面的使用情况信息关于此以及的其他重载`Round`方法，请参阅<xref:System.Math.Round%2A>引用页。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-720">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="fa7eb-721">结果超出了 <see cref="T:System.Decimal" /> 的范围。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-721">The result is outside the range of a <see cref="T:System.Decimal" />.</span></span></exception>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static double Round (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Round(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Round(double a);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="fa7eb-722">要舍入的双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-722">A double-precision floating-point number to be rounded.</span></span></param>
        <summary><span data-ttu-id="fa7eb-723">将双精度浮点值舍入为最接近的整数值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-723">Rounds a double-precision floating-point value to the nearest integral value.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-724">最接近 <paramref name="a" /> 的整数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-724">The integer nearest <paramref name="a" />.</span></span> <span data-ttu-id="fa7eb-725">如果 <paramref name="a" /> 的小数部分正好处于两个整数中间，其中一个整数为偶数，另一个整数为奇数，则返回偶数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-725">If the fractional component of <paramref name="a" /> is halfway between two integers, one of which is even and the other odd, then the even number is returned.</span></span> <span data-ttu-id="fa7eb-726">请注意，此方法返回 <see cref="T:System.Double" />，而不是整数类型。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-726">Note that this method returns a <see cref="T:System.Double" /> instead of an integral type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="fa7eb-727">有关示例和全面的使用情况信息关于此以及的其他重载`Round`方法，请参阅<xref:System.Math.Round%2A>引用页。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-727">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para><span data-ttu-id="fa7eb-728">由于可以来源于表示十进制值为浮点数，或在某些情况下执行浮点值的算术运算的精度损失<see cref="M:System.Math.Round(System.Double)" />方法可能不会舍入到的中点值接近的偶数整数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-728">Because of the loss of precision that can result from representing decimal values as floating-point numbers or performing arithmetic operations on floating-point values, in some cases the <see cref="M:System.Math.Round(System.Double)" /> method may not appear to round midpoint values to the nearest even integer.</span></span> <span data-ttu-id="fa7eb-729">在下面的示例中，因为浮点值.1 没有任何有限的二进制表示形式，第一次调用到<see cref="M:System.Math.Round(System.Double)" />带有 11.5 值方法返回而不是 12 11。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-729">In the following example, because the floating-point value .1 has no finite binary representation, the first call to the <see cref="M:System.Math.Round(System.Double)" /> method with a value of 11.5 returns 11 instead of 12.</span></span>  
  
 [!code-csharp[System.Math.Round#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/round2.cs#1)]
 [!code-vb[System.Math.Round#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/round2.vb#1)]</para>
        </block>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static decimal Round (decimal d, int decimals);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Round(valuetype System.Decimal d, int32 decimals) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Decimal,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (d As Decimal, decimals As Integer) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Round(System::Decimal d, int decimals);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
        <Parameter Name="decimals" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="fa7eb-730">要舍入的小数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-730">A decimal number to be rounded.</span></span></param>
        <param name="decimals"><span data-ttu-id="fa7eb-731">返回值中的小数位数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-731">The number of decimal places in the return value.</span></span></param>
        <summary><span data-ttu-id="fa7eb-732">将小数值按指定的小数位数舍入。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-732">Rounds a decimal value to a specified number of fractional digits.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-733">最接近 <paramref name="d" /> 的 <paramref name="decimals" /> 位小数的数字。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-733">The number nearest to <paramref name="d" /> that contains a number of fractional digits equal to <paramref name="decimals" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="fa7eb-734">有关示例和全面的使用情况信息关于此以及的其他重载`Round`方法，请参阅<xref:System.Math.Round%2A>引用页。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-734">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="fa7eb-735"><paramref name="decimals" /> 小于 0 或大于 28。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-735"><paramref name="decimals" /> is less than 0 or greater than 28.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="fa7eb-736">结果超出了 <see cref="T:System.Decimal" /> 的范围。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-736">The result is outside the range of a <see cref="T:System.Decimal" />.</span></span></exception>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static decimal Round (decimal d, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Round(valuetype System.Decimal d, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Decimal,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (d As Decimal, mode As MidpointRounding) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Round(System::Decimal d, MidpointRounding mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="fa7eb-737">要舍入的小数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-737">A decimal number to be rounded.</span></span></param>
        <param name="mode"><span data-ttu-id="fa7eb-738"><c>d</c> 在两个数字之间时的舍入规范。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-738">Specification for how to round <c>d</c> if it is midway between two other numbers.</span></span></param>
        <summary><span data-ttu-id="fa7eb-739">将小数值舍入到最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-739">Rounds a decimal value to the nearest integer.</span></span> <span data-ttu-id="fa7eb-740">一个参数，指定当一个值正好处于两个数中间时如何舍入这个值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-740">A parameter specifies how to round the value if it is midway between two numbers.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-741">最接近 <paramref name="d" /> 的整数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-741">The integer nearest <paramref name="d" />.</span></span> <span data-ttu-id="fa7eb-742">如果 <paramref name="d" /> 是两个数字的中值，这两个数字一个为偶数，另一个为奇数，则 <paramref name="mode" /> 确定返回两个数字中的哪一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-742">If <paramref name="d" /> is halfway between two numbers, one of which is even and the other odd, then <paramref name="mode" /> determines which of the two is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="fa7eb-743">有关示例和全面的使用情况信息关于此以及的其他重载`Round`方法，请参阅<xref:System.Math.Round%2A>引用页。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-743">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fa7eb-744"><paramref name="mode" /> 不是有效的 <see cref="T:System.MidpointRounding" /> 值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-744"><paramref name="mode" /> is not a valid value of <see cref="T:System.MidpointRounding" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="fa7eb-745">结果超出了 <see cref="T:System.Decimal" /> 的范围。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-745">The result is outside the range of a <see cref="T:System.Decimal" />.</span></span></exception>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.MidpointRounding)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static double Round (double value, int digits);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Round(float64 value, int32 digits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Double,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (value As Double, digits As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Round(double value, int digits);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="digits" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="fa7eb-746">要舍入的双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-746">A double-precision floating-point number to be rounded.</span></span></param>
        <param name="digits"><span data-ttu-id="fa7eb-747">返回值中的小数数字。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-747">The number of fractional digits in the return value.</span></span></param>
        <summary><span data-ttu-id="fa7eb-748">将双精度浮点值按指定的小数位数舍入。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-748">Rounds a double-precision floating-point value to a specified number of fractional digits.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-749">最接近 <paramref name="value" /> 的 <paramref name="digits" /> 位小数的数字。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-749">The number nearest to <paramref name="value" /> that contains a number of fractional digits equal to <paramref name="digits" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="fa7eb-750">有关示例和全面的使用情况信息关于此以及的其他重载`Round`方法，请参阅<xref:System.Math.Round%2A>引用页。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-750">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="fa7eb-751"><paramref name="digits" /> 小于 0 或大于 15。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-751"><paramref name="digits" /> is less than 0 or greater than 15.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="fa7eb-752">由于可以来源于表示十进制值为浮点数，或在某些情况下执行浮点值的算术运算的精度损失<see cref="M:System.Math.Round(System.Double,System.Int32)" />方法可能不会舍入到的中点值最接近的偶数值中<paramref name="digits" />小数位。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-752">Because of the loss of precision that can result from representing decimal values as floating-point numbers or performing arithmetic operations on floating-point values, in some cases the <see cref="M:System.Math.Round(System.Double,System.Int32)" /> method may not appear to round midpoint values to the nearest even value in the <paramref name="digits" /> decimal position.</span></span> <span data-ttu-id="fa7eb-753">下面的示例，其中 2.135 将舍入为而不是 2.14 2.13 对此进行了阐释。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-753">This is illustrated in the following example, where 2.135 is rounded to 2.13 instead of 2.14.</span></span> <span data-ttu-id="fa7eb-754">这是因为内部方法乘以<paramref name="value" />10<sup>数字</sup>，并且从精度损失的这种情况下遭到乘法运算。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-754">This occurs because internally the method multiplies <paramref name="value" /> by 10<sup>digits</sup>, and the multiplication operation in this case suffers from a loss of precision.</span></span>  
  
 [!code-csharp[System.Math.Round#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/round3.cs#2)]
 [!code-vb[System.Math.Round#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/round3.vb#2)]</para>
        </block>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static double Round (double value, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Round(float64 value, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Double,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (value As Double, mode As MidpointRounding) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Round(double value, MidpointRounding mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="fa7eb-755">要舍入的双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-755">A double-precision floating-point number to be rounded.</span></span></param>
        <param name="mode"><span data-ttu-id="fa7eb-756"><c>value</c> 在两个数字之间时的舍入规范。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-756">Specification for how to round <c>value</c> if it is midway between two other numbers.</span></span></param>
        <summary><span data-ttu-id="fa7eb-757">将双精度浮点值舍入为最接近的整数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-757">Rounds a double-precision floating-point value to the nearest integer.</span></span> <span data-ttu-id="fa7eb-758">一个参数，指定当一个值正好处于两个数中间时如何舍入这个值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-758">A parameter specifies how to round the value if it is midway between two numbers.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-759">最接近 <paramref name="value" /> 的整数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-759">The integer nearest <paramref name="value" />.</span></span> <span data-ttu-id="fa7eb-760">如果 <paramref name="value" /> 是两个整数的中值，这两个整数一个为偶数，另一个为奇数，则 <paramref name="mode" /> 确定返回两个整数中的哪一个。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-760">If <paramref name="value" /> is halfway between two integers, one of which is even and the other odd, then <paramref name="mode" /> determines which of the two is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="fa7eb-761">有关示例和全面的使用情况信息关于此以及的其他重载`Round`方法，请参阅<xref:System.Math.Round%2A>引用页。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-761">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fa7eb-762"><paramref name="mode" /> 不是有效的 <see cref="T:System.MidpointRounding" /> 值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-762"><paramref name="mode" /> is not a valid value of <see cref="T:System.MidpointRounding" />.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="fa7eb-763">由于可以来源于表示十进制值为浮点数，或在某些情况下执行浮点值的算术运算的精度损失<see cref="M:System.Math.Round(System.Double,System.MidpointRounding)" />方法可能不会舍入到的中点值接近的偶数整数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-763">Because of the loss of precision that can result from representing decimal values as floating-point numbers or performing arithmetic operations on floating-point values, in some cases the <see cref="M:System.Math.Round(System.Double,System.MidpointRounding)" /> method may not appear to round midpoint values to the nearest even integer.</span></span> <span data-ttu-id="fa7eb-764">在下面的示例中，因为浮点值.1 没有任何有限的二进制表示形式，第一次调用到<see cref="M:System.Math.Round(System.Double)" />带有 11.5 值方法返回而不是 12 11。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-764">In the following example, because the floating-point value .1 has no finite binary representation, the first call to the <see cref="M:System.Math.Round(System.Double)" /> method with a value of 11.5 returns 11 instead of 12.</span></span>  
  
 [!code-csharp[System.Math.Round#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/round5.cs#4)]
 [!code-vb[System.Math.Round#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/round5.vb#4)]</para>
        </block>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.MidpointRounding)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static decimal Round (decimal d, int decimals, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Round(valuetype System.Decimal d, int32 decimals, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (d As Decimal, decimals As Integer, mode As MidpointRounding) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Round(System::Decimal d, int decimals, MidpointRounding mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
        <Parameter Name="decimals" Type="System.Int32" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="fa7eb-765">要舍入的小数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-765">A decimal number to be rounded.</span></span></param>
        <param name="decimals"><span data-ttu-id="fa7eb-766">返回值中的小数位数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-766">The number of decimal places in the return value.</span></span></param>
        <param name="mode"><span data-ttu-id="fa7eb-767"><c>d</c> 在两个数字之间时的舍入规范。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-767">Specification for how to round <c>d</c> if it is midway between two other numbers.</span></span></param>
        <summary><span data-ttu-id="fa7eb-768">将小数值按指定的小数位数舍入。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-768">Rounds a decimal value to a specified number of fractional digits.</span></span> <span data-ttu-id="fa7eb-769">一个参数，指定当一个值正好处于两个数中间时如何舍入这个值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-769">A parameter specifies how to round the value if it is midway between two numbers.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-770">最接近 <paramref name="d" /> 的 <paramref name="decimals" /> 位小数的数字。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-770">The number nearest to <paramref name="d" /> that contains a number of fractional digits equal to <paramref name="decimals" />.</span></span> <span data-ttu-id="fa7eb-771">如果 <paramref name="d" /> 比 <paramref name="decimals" /> 少部分数字，<paramref name="d" /> 原样返回。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-771">If <paramref name="d" /> has fewer fractional digits than <paramref name="decimals" />, <paramref name="d" /> is returned unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="fa7eb-772">有关示例和全面的使用情况信息关于此以及的其他重载`Round`方法，请参阅<xref:System.Math.Round%2A>引用页。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-772">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="fa7eb-773"><paramref name="decimals" /> 小于 0 或大于 28。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-773"><paramref name="decimals" /> is less than 0 or greater than 28.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fa7eb-774"><paramref name="mode" /> 不是有效的 <see cref="T:System.MidpointRounding" /> 值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-774"><paramref name="mode" /> is not a valid value of <see cref="T:System.MidpointRounding" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="fa7eb-775">结果超出了 <see cref="T:System.Decimal" /> 的范围。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-775">The result is outside the range of a <see cref="T:System.Decimal" />.</span></span></exception>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.Int32,System.MidpointRounding)" />
      </Docs>
    </Member>
    <Member MemberName="Round">
      <MemberSignature Language="C#" Value="public static double Round (double value, int digits, MidpointRounding mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Round(float64 value, int32 digits, valuetype System.MidpointRounding mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Round (value As Double, digits As Integer, mode As MidpointRounding) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Round(double value, int digits, MidpointRounding mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="digits" Type="System.Int32" />
        <Parameter Name="mode" Type="System.MidpointRounding" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="fa7eb-776">要舍入的双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-776">A double-precision floating-point number to be rounded.</span></span></param>
        <param name="digits"><span data-ttu-id="fa7eb-777">返回值中的小数数字。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-777">The number of fractional digits in the return value.</span></span></param>
        <param name="mode"><span data-ttu-id="fa7eb-778"><c>value</c> 在两个数字之间时的舍入规范。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-778">Specification for how to round <c>value</c> if it is midway between two other numbers.</span></span></param>
        <summary><span data-ttu-id="fa7eb-779">将双精度浮点值按指定的小数位数舍入。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-779">Rounds a double-precision floating-point value to a specified number of fractional digits.</span></span> <span data-ttu-id="fa7eb-780">一个参数，指定当一个值正好处于两个数中间时如何舍入这个值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-780">A parameter specifies how to round the value if it is midway between two numbers.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-781">最接近 <paramref name="value" /> 的 <paramref name="digits" /> 位小数的数字。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-781">The number nearest to <paramref name="value" /> that has a number of fractional digits equal to <paramref name="digits" />.</span></span> <span data-ttu-id="fa7eb-782">如果 <paramref name="value" /> 比 <paramref name="digits" /> 少部分数字，<paramref name="value" /> 原样返回。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-782">If <paramref name="value" /> has fewer fractional digits than <paramref name="digits" />, <paramref name="value" /> is returned unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="fa7eb-783">有关示例和全面的使用情况信息关于此以及的其他重载`Round`方法，请参阅<xref:System.Math.Round%2A>引用页。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-783">For examples and comprehensive usage information about this and other overloads of the `Round` method, see the <xref:System.Math.Round%2A> reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="fa7eb-784"><paramref name="digits" /> 小于 0 或大于 15。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-784"><paramref name="digits" /> is less than 0 or greater than 15.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="fa7eb-785"><paramref name="mode" /> 不是有效的 <see cref="T:System.MidpointRounding" /> 值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-785"><paramref name="mode" /> is not a valid value of <see cref="T:System.MidpointRounding" />.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="fa7eb-786">由于可以来源于表示十进制值为浮点数，或在某些情况下执行浮点值的算术运算的精度损失<see cref="M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)" />方法可能不会舍入为指定的中点值通过<paramref name="mode" />参数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-786">Because of the loss of precision that can result from representing decimal values as floating-point numbers or performing arithmetic operations on floating-point values, in some cases the <see cref="M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)" /> method may not appear to round midpoint values as specified by the <paramref name="mode" /> parameter.</span></span> <span data-ttu-id="fa7eb-787">下面的示例，其中 2.135 将舍入为而不是 2.14 2.13 对此进行了阐释。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-787">This is illustrated in the following example, where 2.135 is rounded to 2.13 instead of 2.14.</span></span> <span data-ttu-id="fa7eb-788">这是因为内部方法乘以<paramref name="value" />10<sup>数字</sup>，并且从精度损失的这种情况下遭到乘法运算。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-788">This occurs because internally the method multiplies <paramref name="value" /> by 10<sup>digits</sup>, and the multiplication operation in this case suffers from a loss of precision.</span></span>  
  
 [!code-csharp[System.Math.Round#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.round/cs/round4.cs#3)]
 [!code-vb[System.Math.Round#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.round/vb/round4.vb#3)]</para>
        </block>
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
        <altmember cref="M:System.Decimal.Round(System.Decimal,System.Int32,System.MidpointRounding)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Sign">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fa7eb-789">返回指示数字符号的整数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-789">Returns an integer that indicates the sign of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="fa7eb-790">已签名的十进制数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-790">A signed decimal number.</span></span></param>
        <summary><span data-ttu-id="fa7eb-791">返回表示十进制数符号的整数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-791">Returns an integer that indicates the sign of a decimal number.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-792">一个指示 <paramref name="value" /> 的符号的数字，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-792">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="fa7eb-793"><list type="table"><listheader><term> 返回值</span><span class="sxs-lookup"><span data-stu-id="fa7eb-793"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="fa7eb-794"></term><description> 含义</span><span class="sxs-lookup"><span data-stu-id="fa7eb-794"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="fa7eb-795"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="fa7eb-795"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="fa7eb-796"></term><description><paramref name="value" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-796"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="fa7eb-797"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="fa7eb-797"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="fa7eb-798"></term><description><paramref name="value" /> 等于零。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-798"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="fa7eb-799"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="fa7eb-799"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="fa7eb-800"></term><description><paramref name="value" /> 大于零。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-800"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-801">下面的示例演示如何使用<xref:System.Math.Sign%28System.Decimal%29>方法来确定的登录<xref:System.Decimal>值并将其显示到控制台。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-801">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Decimal%29> method to determine the sign of a <xref:System.Decimal> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="fa7eb-802">有符号的数字。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-802">A signed number.</span></span></param>
        <summary><span data-ttu-id="fa7eb-803">返回一个整数，该整数表示双精度浮点数字的符号。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-803">Returns an integer that indicates the sign of a double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-804">一个指示 <paramref name="value" /> 的符号的数字，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-804">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="fa7eb-805"><list type="table"><listheader><term> 返回值</span><span class="sxs-lookup"><span data-stu-id="fa7eb-805"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="fa7eb-806"></term><description> 含义</span><span class="sxs-lookup"><span data-stu-id="fa7eb-806"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="fa7eb-807"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="fa7eb-807"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="fa7eb-808"></term><description><paramref name="value" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-808"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="fa7eb-809"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="fa7eb-809"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="fa7eb-810"></term><description><paramref name="value" /> 等于零。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-810"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="fa7eb-811"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="fa7eb-811"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="fa7eb-812"></term><description><paramref name="value" /> 大于零。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-812"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-813">下面的示例演示如何使用<xref:System.Math.Sign%28System.Double%29>方法来确定的登录<xref:System.Double>值并将其显示到控制台。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-813">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Double%29> method to determine the sign of a <xref:System.Double> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArithmeticException">
          <span data-ttu-id="fa7eb-814"><paramref name="value" /> 等于 <see cref="F:System.Double.NaN" />。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-814"><paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(short value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="fa7eb-815">有符号的数字。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-815">A signed number.</span></span></param>
        <summary><span data-ttu-id="fa7eb-816">返回表示 16 位带符号整数的整数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-816">Returns an integer that indicates the sign of a 16-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-817">一个指示 <paramref name="value" /> 的符号的数字，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-817">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="fa7eb-818"><list type="table"><listheader><term> 返回值</span><span class="sxs-lookup"><span data-stu-id="fa7eb-818"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="fa7eb-819"></term><description> 含义</span><span class="sxs-lookup"><span data-stu-id="fa7eb-819"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="fa7eb-820"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="fa7eb-820"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="fa7eb-821"></term><description><paramref name="value" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-821"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="fa7eb-822"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="fa7eb-822"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="fa7eb-823"></term><description><paramref name="value" /> 等于零。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-823"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="fa7eb-824"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="fa7eb-824"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="fa7eb-825"></term><description><paramref name="value" /> 大于零。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-825"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-826">下面的示例演示如何使用<xref:System.Math.Sign%28System.Int16%29>方法来确定的登录<xref:System.Int16>值并将其显示到控制台。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-826">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Int16%29> method to determine the sign of an <xref:System.Int16> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="fa7eb-827">有符号的数字。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-827">A signed number.</span></span></param>
        <summary><span data-ttu-id="fa7eb-828">返回表示 32 位带符号整数的整数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-828">Returns an integer that indicates the sign of a 32-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-829">一个指示 <paramref name="value" /> 的符号的数字，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-829">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="fa7eb-830"><list type="table"><listheader><term> 返回值</span><span class="sxs-lookup"><span data-stu-id="fa7eb-830"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="fa7eb-831"></term><description> 含义</span><span class="sxs-lookup"><span data-stu-id="fa7eb-831"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="fa7eb-832"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="fa7eb-832"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="fa7eb-833"></term><description><paramref name="value" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-833"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="fa7eb-834"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="fa7eb-834"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="fa7eb-835"></term><description><paramref name="value" /> 等于零。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-835"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="fa7eb-836"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="fa7eb-836"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="fa7eb-837"></term><description><paramref name="value" /> 大于零。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-837"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-838">下面的示例演示如何使用<xref:System.Math.Sign%28System.Int32%29>方法来确定的登录<xref:System.Int32>值并将其显示到控制台。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-838">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Int32%29> method to determine the sign of an <xref:System.Int32> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="fa7eb-839">有符号的数字。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-839">A signed number.</span></span></param>
        <summary><span data-ttu-id="fa7eb-840">返回一个整数，该整数指示 64 位带符号整数的符号。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-840">Returns an integer that indicates the sign of a 64-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-841">一个指示 <paramref name="value" /> 的符号的数字，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-841">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="fa7eb-842"><list type="table"><listheader><term> 返回值</span><span class="sxs-lookup"><span data-stu-id="fa7eb-842"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="fa7eb-843"></term><description> 含义</span><span class="sxs-lookup"><span data-stu-id="fa7eb-843"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="fa7eb-844"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="fa7eb-844"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="fa7eb-845"></term><description><paramref name="value" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-845"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="fa7eb-846"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="fa7eb-846"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="fa7eb-847"></term><description><paramref name="value" /> 等于零。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-847"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="fa7eb-848"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="fa7eb-848"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="fa7eb-849"></term><description><paramref name="value" /> 大于零。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-849"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-850">下面的示例演示如何使用<xref:System.Math.Sign%28System.Int64%29>方法来确定的登录<xref:System.Int64>值并将其显示到控制台。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-850">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Int64%29> method to determine the sign of an <xref:System.Int64> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(System::SByte value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="fa7eb-851">有符号的数字。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-851">A signed number.</span></span></param>
        <summary><span data-ttu-id="fa7eb-852">返回一个整数，该整数指示 8 位带符号整数的符号。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-852">Returns an integer that indicates the sign of an 8-bit signed integer.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-853">一个指示 <paramref name="value" /> 的符号的数字，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-853">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="fa7eb-854"><list type="table"><listheader><term> 返回值</span><span class="sxs-lookup"><span data-stu-id="fa7eb-854"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="fa7eb-855"></term><description> 含义</span><span class="sxs-lookup"><span data-stu-id="fa7eb-855"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="fa7eb-856"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="fa7eb-856"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="fa7eb-857"></term><description><paramref name="value" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-857"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="fa7eb-858"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="fa7eb-858"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="fa7eb-859"></term><description><paramref name="value" /> 等于零。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-859"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="fa7eb-860"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="fa7eb-860"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="fa7eb-861"></term><description><paramref name="value" /> 大于零。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-861"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-862">下面的示例演示如何使用<xref:System.Math.Sign%28System.SByte%29>方法来确定的登录<xref:System.SByte>值并将其显示到控制台。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-862">The following example demonstrates how to use the <xref:System.Math.Sign%28System.SByte%29> method to determine the sign of an <xref:System.SByte> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public static int Sign (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sign(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sign(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sign (value As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Sign(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="fa7eb-863">有符号的数字。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-863">A signed number.</span></span></param>
        <summary><span data-ttu-id="fa7eb-864">返回一个整数，该整数表示单精度浮点数字的符号。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-864">Returns an integer that indicates the sign of a single-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-865">一个指示 <paramref name="value" /> 的符号的数字，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-865">A number that indicates the sign of <paramref name="value" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="fa7eb-866"><list type="table"><listheader><term> 返回值</span><span class="sxs-lookup"><span data-stu-id="fa7eb-866"><list type="table"><listheader><term> Return value</span></span>  
  
 <span data-ttu-id="fa7eb-867"></term><description> 含义</span><span class="sxs-lookup"><span data-stu-id="fa7eb-867"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="fa7eb-868"></description></listheader><item><term> -1</span><span class="sxs-lookup"><span data-stu-id="fa7eb-868"></description></listheader><item><term> -1</span></span>  
  
 <span data-ttu-id="fa7eb-869"></term><description><paramref name="value" /> 小于零。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-869"></term><description><paramref name="value" /> is less than zero.</span></span>  
  
 <span data-ttu-id="fa7eb-870"></description></item><item><term> 0</span><span class="sxs-lookup"><span data-stu-id="fa7eb-870"></description></item><item><term> 0</span></span>  
  
 <span data-ttu-id="fa7eb-871"></term><description><paramref name="value" /> 等于零。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-871"></term><description><paramref name="value" /> is equal to zero.</span></span>  
  
 <span data-ttu-id="fa7eb-872"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="fa7eb-872"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="fa7eb-873"></term><description><paramref name="value" /> 大于零。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-873"></term><description><paramref name="value" /> is greater than zero.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-874">下面的示例演示如何使用<xref:System.Math.Sign%28System.Single%29>方法来确定的登录<xref:System.Single>值并将其显示到控制台。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-874">The following example demonstrates how to use the <xref:System.Math.Sign%28System.Single%29> method to determine the sign of a <xref:System.Single> value and display it to the console.</span></span>  
  
 [!code-cpp[Math.Sign#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.sign/CPP/sign.cpp#1)]
 [!code-csharp[Math.Sign#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.sign/CS/sign.cs#1)]
 [!code-vb[Math.Sign#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.sign/VB/sign.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArithmeticException">
          <span data-ttu-id="fa7eb-875"><paramref name="value" /> 等于 <see cref="F:System.Single.NaN" />。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-875"><paramref name="value" /> is equal to <see cref="F:System.Single.NaN" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Sin">
      <MemberSignature Language="C#" Value="public static double Sin (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sin(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sin(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sin (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Sin(double a);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="fa7eb-876">以弧度计量的角度。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-876">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="fa7eb-877">返回指定角度的正弦值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-877">Returns the sine of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-878"><paramref name="a" /> 的正弦值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-878">The sine of <paramref name="a" />.</span></span> <span data-ttu-id="fa7eb-879">如果 <paramref name="a" /> 等于 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，此方法将返回 <see cref="F:System.Double.NaN" />。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-879">If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-880">表示的角度`a`，必须以弧度为单位。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-880">The angle, `a`, must be in radians.</span></span> <span data-ttu-id="fa7eb-881">乘以 <xref:System.Math.PI?displayProperty=nameWithType> /180 将度数转换成弧度。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-881">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
 <span data-ttu-id="fa7eb-882">可接受的值的`a`约-9223372036854775295 到约 9223372036854775295 范围。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-882">Acceptable values of `a` range from approximately -9223372036854775295 to approximately 9223372036854775295.</span></span> <span data-ttu-id="fa7eb-883">在此范围之外的值<xref:System.Math.Sin%2A>方法返回`a`不变，而不是引发异常。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-883">For values outside of this range, the <xref:System.Math.Sin%2A> method returns `a` unchanged rather than throwing an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa7eb-884">下面的示例使用<xref:System.Math.Sin%2A>评估作为所选的角度某些三角函数标识。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-884">The following example uses <xref:System.Math.Sin%2A> to evaluate certain trigonometric identities for selected angles.</span></span>  
  
 [!code-cpp[System.Math.SinCos#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.SinCos/CPP/sincos.cpp#1)]
 [!code-csharp[System.Math.SinCos#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.SinCos/CS/sincos.cs#1)]
 [!code-vb[System.Math.SinCos#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.SinCos/VB/sincos.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sinh">
      <MemberSignature Language="C#" Value="public static double Sinh (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sinh(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sinh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sinh (value As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Sinh(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="fa7eb-885">以弧度计量的角度。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-885">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="fa7eb-886">返回指定角度的双曲正弦值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-886">Returns the hyperbolic sine of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-887"><paramref name="value" /> 的双曲正弦值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-887">The hyperbolic sine of <paramref name="value" />.</span></span> <span data-ttu-id="fa7eb-888">如果 <paramref name="value" /> 等于 <see cref="F:System.Double.NegativeInfinity" />、<see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NaN" />，则此方法返回等于 <paramref name="value" /> 的 <see cref="T:System.Double" />。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-888">If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" />, <see cref="F:System.Double.PositiveInfinity" />, or <see cref="F:System.Double.NaN" />, this method returns a <see cref="T:System.Double" /> equal to <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-889">表示的角度`value`，必须以弧度为单位。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-889">The angle, `value`, must be in radians.</span></span> <span data-ttu-id="fa7eb-890">乘以 <xref:System.Math.PI?displayProperty=nameWithType> /180 将度数转换成弧度。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-890">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa7eb-891">下面的示例使用<xref:System.Math.Sinh%2A>评估所选值的某些双曲标识。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-891">The following example uses <xref:System.Math.Sinh%2A> to evaluate certain hyperbolic identities for selected values.</span></span>  
  
 [!code-cpp[System.Math.SinhCosh#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.SinhCosh/CPP/sinhcosh.cpp#1)]
 [!code-csharp[System.Math.SinhCosh#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.SinhCosh/CS/sinhcosh.cs#1)]
 [!code-vb[System.Math.SinhCosh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.SinhCosh/VB/sinhcosh.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sqrt">
      <MemberSignature Language="C#" Value="public static double Sqrt (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sqrt(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Sqrt(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Sqrt (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Sqrt(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="fa7eb-892">将查找其平方根的数字。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-892">The number whose square root is to be found.</span></span></param>
        <summary><span data-ttu-id="fa7eb-893">返回指定数字的平方根。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-893">Returns the square root of a specified number.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-894">下表中的值之一。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-894">One of the values in the following table.</span></span>  
  
 <span data-ttu-id="fa7eb-895"><list type="table"><listheader><term><paramref name="d" /> 参数</span><span class="sxs-lookup"><span data-stu-id="fa7eb-895"><list type="table"><listheader><term><paramref name="d" /> parameter</span></span>  
  
 <span data-ttu-id="fa7eb-896"></term><description> 返回值</span><span class="sxs-lookup"><span data-stu-id="fa7eb-896"></term><description> Return value</span></span>  
  
 <span data-ttu-id="fa7eb-897"></description></listheader><item><term> 零或正数</span><span class="sxs-lookup"><span data-stu-id="fa7eb-897"></description></listheader><item><term> Zero or positive</span></span>  
  
 <span data-ttu-id="fa7eb-898"></term><description><paramref name="d" /> 的正平方根。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-898"></term><description> The positive square root of <paramref name="d" />.</span></span>  
  
 <span data-ttu-id="fa7eb-899"></description></item><item><term> 负数</span><span class="sxs-lookup"><span data-stu-id="fa7eb-899"></description></item><item><term> Negative</span></span>  
  
 <span data-ttu-id="fa7eb-900"></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> 等于 <see cref="F:System.Double.NaN" /></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> 等于 <see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></span><span class="sxs-lookup"><span data-stu-id="fa7eb-900"></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Equals <see cref="F:System.Double.NaN" /></term><description><see cref="F:System.Double.NaN" /></description></item><item><term> Equals <see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="fa7eb-901">正方形的面积平方根表示该方形的任何一侧的长度。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-901">The square root of the area of a square represents the length of any side of the square.</span></span> <span data-ttu-id="fa7eb-902">下面的示例在美国国内显示某些城市的区域，并使展示了每个城市的大小，如果它已由一个正方形。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-902">The following example displays the area of some cities in the United States and gives an impression of each city's size if it were represented by a square.</span></span>  
  
 [!code-csharp[System.Math.Sqrt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.math.sqrt/cs/sqrt1.cs#1)]
 [!code-vb[System.Math.Sqrt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.math.sqrt/vb/sqrt1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Math.Pow(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Tan">
      <MemberSignature Language="C#" Value="public static double Tan (double a);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Tan(float64 a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Tan(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Tan (a As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Tan(double a);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="a"><span data-ttu-id="fa7eb-903">以弧度计量的角度。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-903">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="fa7eb-904">返回指定角度的正切值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-904">Returns the tangent of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-905"><paramref name="a" /> 的正切值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-905">The tangent of <paramref name="a" />.</span></span> <span data-ttu-id="fa7eb-906">如果 <paramref name="a" /> 等于 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.NegativeInfinity" /> 或 <see cref="F:System.Double.PositiveInfinity" />，此方法将返回 <see cref="F:System.Double.NaN" />。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-906">If <paramref name="a" /> is equal to <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" />, or <see cref="F:System.Double.PositiveInfinity" />, this method returns <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-907">表示的角度`a`，必须以弧度为单位。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-907">The angle, `a`, must be in radians.</span></span> <span data-ttu-id="fa7eb-908">乘以 <xref:System.Math.PI?displayProperty=nameWithType> /180 将度数转换成弧度。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-908">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa7eb-909">下面的示例演示如何计算的角度的正切值并将其显示到控制台。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-909">The following example demonstrates how to calculate the tangent of an angle and display it to the console.</span></span>  
  
 [!code-cpp[math.atanx#1](~/samples/snippets/cpp/VS_Snippets_CLR/math.atanx/CPP/atan.cpp#1)]
 [!code-csharp[math.atanx#1](~/samples/snippets/csharp/VS_Snippets_CLR/math.atanx/CS/atan.cs#1)]
 [!code-vb[math.atanx#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/math.atanx/VB/atan.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tanh">
      <MemberSignature Language="C#" Value="public static double Tanh (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Tanh(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Tanh(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Tanh (value As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Tanh(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="fa7eb-910">以弧度计量的角度。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-910">An angle, measured in radians.</span></span></param>
        <summary><span data-ttu-id="fa7eb-911">返回指定角度的双曲正切值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-911">Returns the hyperbolic tangent of the specified angle.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-912"><paramref name="value" /> 的双曲正切值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-912">The hyperbolic tangent of <paramref name="value" />.</span></span> <span data-ttu-id="fa7eb-913">如果 <paramref name="value" /> 等于 <see cref="F:System.Double.NegativeInfinity" />，则此方法返回 -1。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-913">If <paramref name="value" /> is equal to <see cref="F:System.Double.NegativeInfinity" />, this method returns -1.</span></span> <span data-ttu-id="fa7eb-914">如果值等于 <see cref="F:System.Double.PositiveInfinity" />，则此方法返回 1。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-914">If value is equal to <see cref="F:System.Double.PositiveInfinity" />, this method returns 1.</span></span> <span data-ttu-id="fa7eb-915">如果 <paramref name="value" /> 等于 <see cref="F:System.Double.NaN" />，则此方法返回 <see cref="F:System.Double.NaN" />。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-915">If <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />, this method returns <see cref="F:System.Double.NaN" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-916">表示的角度`value`，必须以弧度为单位。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-916">The angle, `value`, must be in radians.</span></span> <span data-ttu-id="fa7eb-917">乘以 <xref:System.Math.PI?displayProperty=nameWithType> /180 将度数转换成弧度。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-917">Multiply by <xref:System.Math.PI?displayProperty=nameWithType>/180 to convert degrees to radians.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa7eb-918">下面的示例使用<xref:System.Math.Tanh%2A>评估所选值的某些双曲正切标识。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-918">The following example uses <xref:System.Math.Tanh%2A> to evaluate certain hyperbolic tangent identities for selected values.</span></span>  
  
 [!code-cpp[System.Math.Tanh#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Math.Tanh/CPP/tanh.cpp#1)]
 [!code-csharp[System.Math.Tanh#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Tanh/CS/tanh.cs#1)]
 [!code-vb[System.Math.Tanh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Tanh/VB/tanh.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Truncate">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="fa7eb-919">计算一个数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-919">Calculates the integral part of a number.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-920">为最接近的整数向零舍入数。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-920">The number is rounded to the nearest integer towards zero.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Truncate">
      <MemberSignature Language="C#" Value="public static decimal Truncate (decimal d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Truncate(valuetype System.Decimal d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Truncate(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Truncate (d As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Truncate(System::Decimal d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="fa7eb-921">要截断的数字。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-921">A number to truncate.</span></span></param>
        <summary><span data-ttu-id="fa7eb-922">计算一个数字的整数部分。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-922">Calculates the integral part of a specified decimal number.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-923"><paramref name="d" /> 的整数部分（即舍弃小数位后剩余的数）。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-923">The integral part of <paramref name="d" />; that is, the number that remains after any fractional digits have been discarded.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-924"><xref:System.Math.Truncate%2A> 将舍入`d`到最接近的整数向零。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-924"><xref:System.Math.Truncate%2A> rounds `d` to the nearest integer towards zero.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa7eb-925">下面的示例调用<xref:System.Math.Truncate%28System.Decimal%29>方法截断一个正数和负数<xref:System.Decimal>值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-925">The following example calls the <xref:System.Math.Truncate%28System.Decimal%29> method to truncate both a positive and a negative <xref:System.Decimal> value.</span></span>  
  
 [!code-csharp[System.Math.Truncate#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Truncate/cs/Truncate1.cs#2)]
 [!code-vb[System.Math.Truncate#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Truncate/vb/Truncate1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Ceiling(System.Decimal)" />
        <altmember cref="M:System.Math.Floor(System.Decimal)" />
      </Docs>
    </Member>
    <Member MemberName="Truncate">
      <MemberSignature Language="C#" Value="public static double Truncate (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Truncate(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Math.Truncate(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Truncate (d As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Truncate(double d);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d"><span data-ttu-id="fa7eb-926">要截断的数字。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-926">A number to truncate.</span></span></param>
        <summary><span data-ttu-id="fa7eb-927">计算指定双精度浮点数的整数部分。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-927">Calculates the integral part of a specified double-precision floating-point number.</span></span></summary>
        <returns><span data-ttu-id="fa7eb-928"><paramref name="d" /> 的整数部分（即舍弃小数位后剩余的数或下表所列出的值之一）。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-928">The integral part of <paramref name="d" />; that is, the number that remains after any fractional digits have been discarded, or one of the values listed in the following table.</span></span>  
  
 <span data-ttu-id="fa7eb-929"><list type="table"><listheader><term><paramref name="d" /></term><description> 返回值</span><span class="sxs-lookup"><span data-stu-id="fa7eb-929"><list type="table"><listheader><term><paramref name="d" /></term><description> Return value</span></span>  
  
 </description></listheader><item><term><see cref="F:System.Double.NaN" /></term><description><see cref="F:System.Double.NaN" /></description></item><item><term><see cref="F:System.Double.NegativeInfinity" /></term><description><see cref="F:System.Double.NegativeInfinity" /></description></item><item><term><see cref="F:System.Double.PositiveInfinity" /></term><description><see cref="F:System.Double.PositiveInfinity" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="fa7eb-930"><xref:System.Math.Truncate%2A> 将舍入`d`到最接近的整数向零。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-930"><xref:System.Math.Truncate%2A> rounds `d` to the nearest integer towards zero.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="fa7eb-931">下面的示例调用<xref:System.Math.Truncate%28System.Double%29>方法截断一个正数和负数<xref:System.Double>值。</span><span class="sxs-lookup"><span data-stu-id="fa7eb-931">The following example calls the <xref:System.Math.Truncate%28System.Double%29> method to truncate both a positive and a negative <xref:System.Double> value.</span></span>  
  
 [!code-csharp[System.Math.Truncate#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Math.Truncate/cs/Truncate1.cs#1)]
 [!code-vb[System.Math.Truncate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Math.Truncate/vb/Truncate1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Math.Round" />
        <altmember cref="M:System.Math.Ceiling(System.Double)" />
        <altmember cref="M:System.Math.Floor(System.Double)" />
      </Docs>
    </Member>
  </Members>
</Type>