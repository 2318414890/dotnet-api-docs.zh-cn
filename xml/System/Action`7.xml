<Type Name="Action&lt;T1,T2,T3,T4,T5,T6,T7&gt;" FullName="System.Action&lt;T1,T2,T3,T4,T5,T6,T7&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="99c7a5bba3a0ab30fe43a01eb29326ddc29f6000" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30727221" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void Action&lt;in T1,in T2,in T3,in T4,in T5,in T6,in T7&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`7&lt;- T1, - T2, - T3, - T4, - T5, - T6, - T7&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`7" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T1, In T2, In T3, In T4, In T5, In T6, In T7)(arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5, arg6 As T6, arg7 As T7)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7&gt;&#xA;public delegate void Action(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7);" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T4">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T5">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T6">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T7">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
    <Parameter Name="arg4" Type="T4" />
    <Parameter Name="arg5" Type="T5" />
    <Parameter Name="arg6" Type="T6" />
    <Parameter Name="arg7" Type="T7" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
    <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
    <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
    <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
    <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
    <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
    <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
    <param name="arg1">此委托封装的方法的第一个参数。</param>
    <param name="arg2">此委托封装的方法的第二个参数。</param>
    <param name="arg3">此委托封装的方法的第三个参数。</param>
    <param name="arg4">此委托封装的方法的第四个参数。</param>
    <param name="arg5">此委托封装的方法的第五个参数。</param>
    <param name="arg6">此委托封装的方法的第六个参数。</param>
    <param name="arg7">此委托封装的方法的第七个参数。</param>
    <summary>封装一个方法，该方法具有七个参数且不返回值。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用<xref:System.Action%607>委托作为参数传递方法，而不用显式声明自定义委托。 封装的方法必须对应于此委托定义方法签名。 这意味着，封装的方法必须具有七个参数是通过值传递给它，并且不能返回值。 (在 C# 中，该方法必须返回`void`。 在 Visual Basic 中，它必须由定义`Sub`...`End Sub` 构造。 它还可返回一个值，将被忽略的方法。）通常，这种方法用于执行操作。  
  
> [!NOTE]
>  若要引用的方法具有七个参数并返回一个值，使用泛型<xref:System.Func%608>委托。  
  
 你还可以使用<xref:System.Action%607>委托以及匿名方法和 lambda 表达式。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`8" />
  </Docs>
</Type>