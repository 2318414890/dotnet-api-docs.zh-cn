<Type Name="Func&lt;T1,T2,T3,T4,T5,TResult&gt;" FullName="System.Func&lt;T1,T2,T3,T4,T5,TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d1be2de79ce0a49df8ff4e96c2a0f25d2b03ce3a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30728121" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T1,in T2,in T3,in T4,in T5,out TResult&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`6&lt;- T1, - T2, - T3, - T4, - T5, + TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`6" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of In T1, In T2, In T3, In T4, In T5, Out TResult)(arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5) As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename TResult&gt;&#xA;public delegate TResult Func(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T4">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T5">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
    <Parameter Name="arg4" Type="T4" />
    <Parameter Name="arg5" Type="T5" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">
      <span data-ttu-id="bdbbf-101">此委托封装的方法的第一个参数的类型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="bdbbf-101">The type of the first parameter of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <typeparam name="T2">
      <span data-ttu-id="bdbbf-102">此委托封装的方法的第二个参数的类型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="bdbbf-102">The type of the second parameter of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <typeparam name="T3">
      <span data-ttu-id="bdbbf-103">此委托封装的方法的第三个参数的类型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="bdbbf-103">The type of the third parameter of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <typeparam name="T4">
      <span data-ttu-id="bdbbf-104">此委托封装的方法的第四个参数的类型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="bdbbf-104">The type of the fourth parameter of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <typeparam name="T5">
      <span data-ttu-id="bdbbf-105">此委托封装的方法的第五个参数的类型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="bdbbf-105">The type of the fifth parameter of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <typeparam name="TResult">
      <span data-ttu-id="bdbbf-106">此委托封装的方法的返回值类型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="bdbbf-106">The type of the return value of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <param name="arg1">
      <span data-ttu-id="bdbbf-107">此委托封装的方法的第一个参数。</span>
      <span class="sxs-lookup">
        <span data-stu-id="bdbbf-107">The first parameter of the method that this delegate encapsulates.</span>
      </span>
    </param>
    <param name="arg2">
      <span data-ttu-id="bdbbf-108">此委托封装的方法的第二个参数。</span>
      <span class="sxs-lookup">
        <span data-stu-id="bdbbf-108">The second parameter of the method that this delegate encapsulates.</span>
      </span>
    </param>
    <param name="arg3">
      <span data-ttu-id="bdbbf-109">此委托封装的方法的第三个参数。</span>
      <span class="sxs-lookup">
        <span data-stu-id="bdbbf-109">The third parameter of the method that this delegate encapsulates.</span>
      </span>
    </param>
    <param name="arg4">
      <span data-ttu-id="bdbbf-110">此委托封装的方法的第四个参数。</span>
      <span class="sxs-lookup">
        <span data-stu-id="bdbbf-110">The fourth parameter of the method that this delegate encapsulates.</span>
      </span>
    </param>
    <param name="arg5">
      <span data-ttu-id="bdbbf-111">此委托封装的方法的第五个参数。</span>
      <span class="sxs-lookup">
        <span data-stu-id="bdbbf-111">The fifth parameter of the method that this delegate encapsulates.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="bdbbf-112">封装一个方法，该方法具有五个参数，并返回 <typeparamref name="TResult" /> 参数所指定的类型的值。</span>
      <span class="sxs-lookup">
        <span data-stu-id="bdbbf-112">Encapsulates a method that has five parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span>
      </span>
    </summary>
    <returns>
      <span data-ttu-id="bdbbf-113">此委托封装的方法的返回值。</span>
      <span class="sxs-lookup">
        <span data-stu-id="bdbbf-113">The return value of the method that this delegate encapsulates.</span>
      </span>
    </returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bdbbf-114">可以使用此委托来表示可以作为参数传递而不用显式声明自定义委托的方法。</span><span class="sxs-lookup"><span data-stu-id="bdbbf-114">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="bdbbf-115">封装的方法必须对应于此委托定义方法签名。</span><span class="sxs-lookup"><span data-stu-id="bdbbf-115">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="bdbbf-116">这意味着，封装的方法必须具有五个参数，其中每个通过值传递给它，并且它必须返回一个值。</span><span class="sxs-lookup"><span data-stu-id="bdbbf-116">This means that the encapsulated method must have five parameters, each of which is passed to it by value, and that it must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="bdbbf-117">若要引用的方法具有五个参数并返回`void`(或在 Visual Basic 中，声明为`Sub`而不是`Function`)，使用泛型<xref:System.Action%605>委托。</span><span class="sxs-lookup"><span data-stu-id="bdbbf-117">To reference a method that has five parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the generic <xref:System.Action%605> delegate instead.</span></span>  
  
 <span data-ttu-id="bdbbf-118">你还可以使用<xref:System.Func%606>委托以及匿名方法和 lambda 表达式。</span><span class="sxs-lookup"><span data-stu-id="bdbbf-118">You can also use the <xref:System.Func%606> delegate with anonymous methods and lambda expressions.</span></span>  
  
 <span data-ttu-id="bdbbf-119">Lambda 表达式的基础类型是一个泛型`Func`委托。</span><span class="sxs-lookup"><span data-stu-id="bdbbf-119">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="bdbbf-120">这使它可以将 lambda 表达式作为参数传递而不显式将其分配给委托。</span><span class="sxs-lookup"><span data-stu-id="bdbbf-120">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Action`5" />
  </Docs>
</Type>