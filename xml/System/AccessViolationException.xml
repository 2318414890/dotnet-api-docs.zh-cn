<Type Name="AccessViolationException" FullName="System.AccessViolationException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="eb360adfc3670886a06c5f3ab2daa2470318896a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30727771" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class AccessViolationException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit AccessViolationException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.AccessViolationException" />
  <TypeSignature Language="VB.NET" Value="Public Class AccessViolationException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class AccessViolationException : SystemException" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="64d61-101">在试图读写受保护内存时引发的异常。</span>
      <span class="sxs-lookup">
        <span data-stu-id="64d61-101">The exception that is thrown when there is an attempt to read or write protected memory.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64d61-102">访问冲突发生在非托管或不安全代码中，当代码尝试读取或写入到尚未分配的或不能访问的内存。</span><span class="sxs-lookup"><span data-stu-id="64d61-102">An access violation occurs in unmanaged or unsafe code when the code attempts to read or write to memory that has not been allocated, or to which it does not have access.</span></span> <span data-ttu-id="64d61-103">这通常是因为指针具有错误的值。</span><span class="sxs-lookup"><span data-stu-id="64d61-103">This usually occurs because a pointer has a bad value.</span></span> <span data-ttu-id="64d61-104">并非所有通过无效指针的读或写操作都会导致访问冲突，所以访问冲突通常指示已经通过无效指针进行多次读或写操作，并且内存内容可能已损坏。</span><span class="sxs-lookup"><span data-stu-id="64d61-104">Not all reads or writes through bad pointers lead to access violations, so an access violation usually indicates that several reads or writes have occurred through bad pointers, and that memory might be corrupted.</span></span> <span data-ttu-id="64d61-105">因此，访问冲突总是指示严重的编程错误。</span><span class="sxs-lookup"><span data-stu-id="64d61-105">Thus, access violations almost always indicate serious programming errors.</span></span> <span data-ttu-id="64d61-106"><xref:System.AccessViolationException>清楚地标识这些严重错误。</span><span class="sxs-lookup"><span data-stu-id="64d61-106">An <xref:System.AccessViolationException> clearly identifies these serious errors.</span></span>  
  
 <span data-ttu-id="64d61-107">在完全包含可验证的托管代码的程序中，所有引用或者有效或者为 null，也不可能出现访问冲突。</span><span class="sxs-lookup"><span data-stu-id="64d61-107">In programs consisting entirely of verifiable managed code, all references are either valid or null, and access violations are impossible.</span></span> <span data-ttu-id="64d61-108">尝试引用中可验证代码引发的空引用的任何操作<xref:System.NullReferenceException>异常。</span><span class="sxs-lookup"><span data-stu-id="64d61-108">Any operation that attempts to reference a null reference in verifiable code throws a <xref:System.NullReferenceException> exception.</span></span> <span data-ttu-id="64d61-109"><xref:System.AccessViolationException>发生仅当可验证托管的代码交互，与非托管代码或使用不安全的托管代码。</span><span class="sxs-lookup"><span data-stu-id="64d61-109">An <xref:System.AccessViolationException> occurs only when verifiable managed code interacts with unmanaged code or with unsafe managed code.</span></span>  
  
## <a name="troubleshooting-accessviolationexception-exceptions"></a><span data-ttu-id="64d61-110">关于 AccessViolationException 异常的疑难解答</span><span class="sxs-lookup"><span data-stu-id="64d61-110">Troubleshooting AccessViolationException exceptions</span></span>  
 <span data-ttu-id="64d61-111"><xref:System.AccessViolationException>只能在不安全的托管代码中会发生异常或可验证管理时的代码与非托管代码进行交互：</span><span class="sxs-lookup"><span data-stu-id="64d61-111">An <xref:System.AccessViolationException> exception can occur only in unsafe managed code or when verifiable managed code interacts with unmanaged code:</span></span>  
  
-   <span data-ttu-id="64d61-112">不安全的托管代码中发生的访问冲突可以表示为<xref:System.NullReferenceException>异常或<xref:System.AccessViolationException>异常，具体取决于平台。</span><span class="sxs-lookup"><span data-stu-id="64d61-112">An access violation that occurs in unsafe managed code can be expressed as either a <xref:System.NullReferenceException> exception or an <xref:System.AccessViolationException> exception, depending on the platform.</span></span>  
  
-   <span data-ttu-id="64d61-113">冒泡到托管代码的非托管代码中访问冲突总是包装在<xref:System.AccessViolationException>异常。</span><span class="sxs-lookup"><span data-stu-id="64d61-113">An access violation in unmanaged code that bubbles up to managed code is always wrapped in an <xref:System.AccessViolationException> exception.</span></span>  
  
 <span data-ttu-id="64d61-114">在任一情况下，你可以确定并更正的原因<xref:System.AccessViolationException>异常，如下所示：</span><span class="sxs-lookup"><span data-stu-id="64d61-114">In either case, you can identify and correct the cause of the <xref:System.AccessViolationException> exception as follows:</span></span>  
  
 <span data-ttu-id="64d61-115">确保您尝试访问的内存已分配。</span><span class="sxs-lookup"><span data-stu-id="64d61-115">Make sure that the memory that you are attempting to access has been allocated.</span></span>  
 <span data-ttu-id="64d61-116"><xref:System.AccessViolationException>试图访问受保护的内存-也就是说，以访问的内存，并且不分配或不归进程始终引发异常。</span><span class="sxs-lookup"><span data-stu-id="64d61-116">An <xref:System.AccessViolationException> exception is always thrown by an attempt to access protected memory -- that is, to access memory that is not allocated or that is not owned by a process.</span></span>  
  
 <span data-ttu-id="64d61-117">自动内存管理是公共语言运行时提供的服务之一。</span><span class="sxs-lookup"><span data-stu-id="64d61-117">Automatic memory management is one of the services that the common language runtime provides.</span></span> <span data-ttu-id="64d61-118">如果托管的代码提供了与 unmanagede 代码相同的功能，你可能希望移至托管代码以便利用此功能。</span><span class="sxs-lookup"><span data-stu-id="64d61-118">If managed code provides the same functionality as your unmanagede code, you may wish to move to managed code to take advantage of this functionality.</span></span> <span data-ttu-id="64d61-119">有关详细信息，请参阅[自动内存管理](~/docs/standard/automatic-memory-management.md)。</span><span class="sxs-lookup"><span data-stu-id="64d61-119">For more information, see [Automatic Memory Management](~/docs/standard/automatic-memory-management.md).</span></span>  
  
 <span data-ttu-id="64d61-120">确保您尝试访问的内存未损坏。</span><span class="sxs-lookup"><span data-stu-id="64d61-120">Make sure that the memory that you are attempting to access has not been corrupted.</span></span>  
 <span data-ttu-id="64d61-121">如果多次读或写操作时都遇到无效指针，则内存可能已损坏。</span><span class="sxs-lookup"><span data-stu-id="64d61-121">If several read or write operations have occurred through bad pointers, memory may be corrupted.</span></span> <span data-ttu-id="64d61-122">读取或写入到外部的预定义的缓冲区的地址时通常会发生这种情况。</span><span class="sxs-lookup"><span data-stu-id="64d61-122">This typically occurs when reading or writing to addresses outside of a predefined buffer.</span></span>  
  
## <a name="accessviolationexception-and-trycatch-blocks"></a><span data-ttu-id="64d61-123">AccessViolationException 和 try/catch 块</span><span class="sxs-lookup"><span data-stu-id="64d61-123">AccessViolationException and try/catch blocks</span></span>  
 <span data-ttu-id="64d61-124">从开始[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，<xref:System.AccessViolationException>由公共语言运行时引发的异常未由`catch`中如果异常发生在公共语言保留的内存外的结构化的异常处理语句运行时。</span><span class="sxs-lookup"><span data-stu-id="64d61-124">Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.AccessViolationException> exceptions thrown by the common language runtime are not handled by the `catch` statement in a structured exception handler if the exception occurs outside of the memory reserved by the common language runtime.</span></span> <span data-ttu-id="64d61-125">若要处理此类<xref:System.AccessViolationException>异常，则应该应用<xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute>属性引发异常的方法。</span><span class="sxs-lookup"><span data-stu-id="64d61-125">To handle such an <xref:System.AccessViolationException> exception, you should apply the  <xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute> attribute to the method in which the exception is thrown.</span></span> <span data-ttu-id="64d61-126">此更改不会影响<xref:System.AccessViolationException>可以继续由捕获的用户代码引发的异常`catch`语句。</span><span class="sxs-lookup"><span data-stu-id="64d61-126">This change does not affect <xref:System.AccessViolationException> exceptions thrown by user code, which can continue to be caught by a `catch` statement.</span></span> <span data-ttu-id="64d61-127">对于你想要重新编译和运行时没有修改上的.NET framework 的早期版本编写的代码[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，你可以添加[ \<legacyCorruptedStateExceptionsPolicy >](~/docs/framework/configure-apps/file-schema/runtime/legacycorruptedstateexceptionspolicy-element.md)元素到你应用程序的配置文件。</span><span class="sxs-lookup"><span data-stu-id="64d61-127">For code written for previous versions of the .NET Framework that you want to recompile and run without modification on the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], you can add the [\<legacyCorruptedStateExceptionsPolicy>](~/docs/framework/configure-apps/file-schema/runtime/legacycorruptedstateexceptionspolicy-element.md) element to your app's configuration file.</span></span> <span data-ttu-id="64d61-128">请注意，是否已定义的处理程序，您可以也收到的异常通知<xref:System.AppDomain.FirstChanceException?displayProperty=nameWithType>或<xref:System.AppDomain.UnhandledException?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="64d61-128">Note that you can also receive notification of the exceptions if you have defined a handler for the <xref:System.AppDomain.FirstChanceException?displayProperty=nameWithType> or <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> event.</span></span>  
  
## <a name="version-information"></a><span data-ttu-id="64d61-129">版本信息</span><span class="sxs-lookup"><span data-stu-id="64d61-129">Version Information</span></span>  
 <span data-ttu-id="64d61-130">在.NET Framework 2.0 和更高版本中，将引发此异常。</span><span class="sxs-lookup"><span data-stu-id="64d61-130">This exception is thrown in the .NET Framework 2.0 and later versions.</span></span> <span data-ttu-id="64d61-131">在.NET framework 的早期版本，由非托管的代码或不安全的托管的代码的访问冲突<xref:System.NullReferenceException>在托管代码中。</span><span class="sxs-lookup"><span data-stu-id="64d61-131">In earlier versions of the .NET Framework, an access violation in unmanaged code or unsafe managed code is represented by a <xref:System.NullReferenceException> in managed code.</span></span> <span data-ttu-id="64d61-132">A<xref:System.NullReferenceException>还在托管代码中可验证，不涉及数据损坏的发生次数取消引用 null 引用，并且没有方法来区分版本 1.0 或 1.1 中的两种情况时引发。</span><span class="sxs-lookup"><span data-stu-id="64d61-132">A <xref:System.NullReferenceException> is also thrown when a null reference is dereferenced in verifiable managed code, an occurrence that does not involve data corruption, and there is no way to distinguish between the two situations in versions 1.0 or 1.1.</span></span>  
  
 <span data-ttu-id="64d61-133">管理员可以允许所选的应用程序，以恢复到.NET Framework 1.1 版的行为。</span><span class="sxs-lookup"><span data-stu-id="64d61-133">Administrators can allow selected applications to revert to the behavior of the .NET Framework version 1.1.</span></span> <span data-ttu-id="64d61-134">将以下行中的放[&lt;运行时&gt;元素](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)的应用程序的配置文件的部分：</span><span class="sxs-lookup"><span data-stu-id="64d61-134">Place the following line in the [&lt;runtime&gt; Element](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of the configuration file for the application:</span></span>  
  
```  
<legacyNullReferenceExceptionPolicy enabled = "1"/>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="64d61-135">初始化 <see cref="T:System.AccessViolationException" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="64d61-135">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AccessViolationException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AccessViolationException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="64d61-136">使用由系统提供的用于描述错误的消息初始化 <see cref="T:System.AccessViolationException" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="64d61-136">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a system-supplied message that describes the error.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64d61-137">此构造函数初始化<xref:System.Exception.Message%2A>属性的新实例为系统提供的消息的描述错误，如"试图读或写受保护的内存。</span><span class="sxs-lookup"><span data-stu-id="64d61-137">This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as "Attempted to read or write protected memory.</span></span> <span data-ttu-id="64d61-138">这是通常指示其他内存已损坏。"</span><span class="sxs-lookup"><span data-stu-id="64d61-138">This is often an indication that other memory has been corrupted."</span></span> <span data-ttu-id="64d61-139">此消息将当前系统区域性考虑在内。</span><span class="sxs-lookup"><span data-stu-id="64d61-139">This message takes into account the current system culture.</span></span>  
  
 <span data-ttu-id="64d61-140">下表显示 <xref:System.AccessViolationException> 的实例的初始属性值。</span><span class="sxs-lookup"><span data-stu-id="64d61-140">The following table shows the initial property values for an instance of <xref:System.AccessViolationException>.</span></span>  
  
|<span data-ttu-id="64d61-141">Property</span><span class="sxs-lookup"><span data-stu-id="64d61-141">Property</span></span>|<span data-ttu-id="64d61-142">“值”</span><span class="sxs-lookup"><span data-stu-id="64d61-142">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="64d61-143">`null`。</span><span class="sxs-lookup"><span data-stu-id="64d61-143">`null`.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="64d61-144">本地化的错误消息字符串。</span><span class="sxs-lookup"><span data-stu-id="64d61-144">The localized error message string.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AccessViolationException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AccessViolationException(System::String ^ message);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="64d61-145">描述该异常的消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="64d61-145">The message that describes the exception.</span>
          </span>
          <span data-ttu-id="64d61-146">此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="64d61-146">The caller of this constructor is required to ensure that this string has been localized for the current system culture.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="64d61-147">使用指定的描述错误的消息初始化 <see cref="T:System.AccessViolationException" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="64d61-147">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a specified message that describes the error.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64d61-148">下表显示 <xref:System.AccessViolationException> 的实例的初始属性值。</span><span class="sxs-lookup"><span data-stu-id="64d61-148">The following table shows the initial property values for an instance of <xref:System.AccessViolationException>.</span></span>  
  
|<span data-ttu-id="64d61-149">Property</span><span class="sxs-lookup"><span data-stu-id="64d61-149">Property</span></span>|<span data-ttu-id="64d61-150">“值”</span><span class="sxs-lookup"><span data-stu-id="64d61-150">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="64d61-151">`null`。</span><span class="sxs-lookup"><span data-stu-id="64d61-151">`null`.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="64d61-152">`message` 中指定的错误消息字符串。</span><span class="sxs-lookup"><span data-stu-id="64d61-152">The error message string specified in `message`.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AccessViolationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; AccessViolationException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">
          <span data-ttu-id="64d61-153">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，用于保存序列化对象数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="64d61-153">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data.</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="64d61-154">
            <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="64d61-154">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="64d61-155">用序列化数据初始化 <see cref="T:System.AccessViolationException" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="64d61-155">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with serialized data.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64d61-156">此构造函数在反序列化过程中调用，以便重建通过流传输的异常对象。</span><span class="sxs-lookup"><span data-stu-id="64d61-156">This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</span></span> <span data-ttu-id="64d61-157">有关详细信息，请参阅[XML 和 SOAP 序列化](~/docs/standard/serialization/xml-and-soap-serialization.md)。</span><span class="sxs-lookup"><span data-stu-id="64d61-157">For more information, see [XML and SOAP Serialization](~/docs/standard/serialization/xml-and-soap-serialization.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AccessViolationException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AccessViolationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AccessViolationException(System::String ^ message, Exception ^ innerException);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="64d61-158">描述该异常的消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="64d61-158">The message that describes the exception.</span>
          </span>
          <span data-ttu-id="64d61-159">此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="64d61-159">The caller of this constructor is required to ensure that this string has been localized for the current system culture.</span>
          </span>
        </param>
        <param name="innerException">
          <span data-ttu-id="64d61-160">导致当前异常的异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="64d61-160">The exception that is the cause of the current exception.</span>
          </span>
          <span data-ttu-id="64d61-161">如果 <c>innerException</c> 参数不为 <see langword="null" />，则当前异常会在处理内部异常的 <see langword="catch" /> 块中引发。</span>
          <span class="sxs-lookup">
            <span data-stu-id="64d61-161">If the <c>innerException</c> parameter is not <see langword="null" />, the current exception is raised in a <see langword="catch" /> block that handles the inner exception.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="64d61-162">使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.AccessViolationException" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="64d61-162">Initializes a new instance of the <see cref="T:System.AccessViolationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64d61-163">因前一个异常而直接引发的异常应在 <xref:System.Exception.InnerException%2A> 属性中包含对前一个异常的引用。</span><span class="sxs-lookup"><span data-stu-id="64d61-163">An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property.</span></span> <span data-ttu-id="64d61-164"><xref:System.Exception.InnerException%2A> 属性返回的值与传递到构造函数中的值相同；或者，如果 `null` 属性没有向构造函数提供内部异常值，则为 <xref:System.Exception.InnerException%2A>。</span><span class="sxs-lookup"><span data-stu-id="64d61-164">The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or `null` if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.</span></span>  
  
 <span data-ttu-id="64d61-165">下表显示 <xref:System.AccessViolationException> 的实例的初始属性值。</span><span class="sxs-lookup"><span data-stu-id="64d61-165">The following table shows the initial property values for an instance of <xref:System.AccessViolationException>.</span></span>  
  
|<span data-ttu-id="64d61-166">Property</span><span class="sxs-lookup"><span data-stu-id="64d61-166">Property</span></span>|<span data-ttu-id="64d61-167">“值”</span><span class="sxs-lookup"><span data-stu-id="64d61-167">Value</span></span>|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|<span data-ttu-id="64d61-168">`null`。</span><span class="sxs-lookup"><span data-stu-id="64d61-168">`null`.</span></span>|  
|<xref:System.Exception.Message%2A>|<span data-ttu-id="64d61-169">`message` 中指定的错误消息字符串。</span><span class="sxs-lookup"><span data-stu-id="64d61-169">The error message string specified in `message`.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>