<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AccessViolationException.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5eb360adfc3670886a06c5f3ab2daa2470318896a.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eb360adfc3670886a06c5f3ab2daa2470318896a</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.AccessViolationException">
          <source>The exception that is thrown when there is an attempt to read or write protected memory.</source>
          <target state="translated">在试图读写受保护内存时引发的异常。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>An access violation occurs in unmanaged or unsafe code when the code attempts to read or write to memory that has not been allocated, or to which it does not have access.</source>
          <target state="translated">访问冲突发生在非托管或不安全代码中，当代码尝试读取或写入到尚未分配的或不能访问的内存。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>This usually occurs because a pointer has a bad value.</source>
          <target state="translated">这通常是因为指针具有错误的值。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>Not all reads or writes through bad pointers lead to access violations, so an access violation usually indicates that several reads or writes have occurred through bad pointers, and that memory might be corrupted.</source>
          <target state="translated">并非所有通过无效指针的读或写操作都会导致访问冲突，所以访问冲突通常指示已经通过无效指针进行多次读或写操作，并且内存内容可能已损坏。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>Thus, access violations almost always indicate serious programming errors.</source>
          <target state="translated">因此，访问冲突总是指示严重的编程错误。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>An <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph> clearly identifies these serious errors.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph>清楚地标识这些严重错误。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>In programs consisting entirely of verifiable managed code, all references are either valid or null, and access violations are impossible.</source>
          <target state="translated">在完全包含可验证的托管代码的程序中，所有引用或者有效或者为 null，也不可能出现访问冲突。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>Any operation that attempts to reference a null reference in verifiable code throws a <ph id="ph1">&lt;xref:System.NullReferenceException&gt;</ph> exception.</source>
          <target state="translated">尝试引用中可验证代码引发的空引用的任何操作<ph id="ph1">&lt;xref:System.NullReferenceException&gt;</ph>异常。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>An <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph> occurs only when verifiable managed code interacts with unmanaged code or with unsafe managed code.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph>发生仅当可验证托管的代码交互，与非托管代码或使用不安全的托管代码。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>Troubleshooting AccessViolationException exceptions</source>
          <target state="translated">关于 AccessViolationException 异常的疑难解答</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>An <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph> exception can occur only in unsafe managed code or when verifiable managed code interacts with unmanaged code:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph>只能在不安全的托管代码中会发生异常或可验证管理时的代码与非托管代码进行交互：</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>An access violation that occurs in unsafe managed code can be expressed as either a <ph id="ph1">&lt;xref:System.NullReferenceException&gt;</ph> exception or an <ph id="ph2">&lt;xref:System.AccessViolationException&gt;</ph> exception, depending on the platform.</source>
          <target state="translated">不安全的托管代码中发生的访问冲突可以表示为<ph id="ph1">&lt;xref:System.NullReferenceException&gt;</ph>异常或<ph id="ph2">&lt;xref:System.AccessViolationException&gt;</ph>异常，具体取决于平台。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>An access violation in unmanaged code that bubbles up to managed code is always wrapped in an <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph> exception.</source>
          <target state="translated">冒泡到托管代码的非托管代码中访问冲突总是包装在<ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph>异常。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>In either case, you can identify and correct the cause of the <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph> exception as follows:</source>
          <target state="translated">在任一情况下，你可以确定并更正的原因<ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph>异常，如下所示：</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>Make sure that the memory that you are attempting to access has been allocated.</source>
          <target state="translated">确保您尝试访问的内存已分配。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>An <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph> exception is always thrown by an attempt to access protected memory -- that is, to access memory that is not allocated or that is not owned by a process.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph>试图访问受保护的内存-也就是说，以访问的内存，并且不分配或不归进程始终引发异常。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>Automatic memory management is one of the services that the common language runtime provides.</source>
          <target state="translated">自动内存管理是公共语言运行时提供的服务之一。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>If managed code provides the same functionality as your unmanagede code, you may wish to move to managed code to take advantage of this functionality.</source>
          <target state="translated">如果托管的代码提供了与 unmanagede 代码相同的功能，你可能希望移至托管代码以便利用此功能。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>For more information, see <bpt id="p1">[</bpt>Automatic Memory Management<ept id="p1">](~/docs/standard/automatic-memory-management.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>自动内存管理<ept id="p1">](~/docs/standard/automatic-memory-management.md)</ept>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>Make sure that the memory that you are attempting to access has not been corrupted.</source>
          <target state="translated">确保您尝试访问的内存未损坏。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>If several read or write operations have occurred through bad pointers, memory may be corrupted.</source>
          <target state="translated">如果多次读或写操作时都遇到无效指针，则内存可能已损坏。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>This typically occurs when reading or writing to addresses outside of a predefined buffer.</source>
          <target state="translated">读取或写入到外部的预定义的缓冲区的地址时通常会发生这种情况。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>AccessViolationException and try/catch blocks</source>
          <target state="translated">AccessViolationException 和 try/catch 块</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>Starting with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, <ph id="ph2">&lt;xref:System.AccessViolationException&gt;</ph> exceptions thrown by the common language runtime are not handled by the <ph id="ph3">`catch`</ph> statement in a structured exception handler if the exception occurs outside of the memory reserved by the common language runtime.</source>
          <target state="translated">从开始<ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>，<ph id="ph2">&lt;xref:System.AccessViolationException&gt;</ph>由公共语言运行时引发的异常未由<ph id="ph3">`catch`</ph>中如果异常发生在公共语言保留的内存外的结构化的异常处理语句运行时。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>To handle such an <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph> exception, you should apply the  <ph id="ph2">&lt;xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute&gt;</ph> attribute to the method in which the exception is thrown.</source>
          <target state="translated">若要处理此类<ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph>异常，则应该应用<ph id="ph2">&lt;xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute&gt;</ph>属性引发异常的方法。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>This change does not affect <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph> exceptions thrown by user code, which can continue to be caught by a <ph id="ph2">`catch`</ph> statement.</source>
          <target state="translated">此更改不会影响<ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph>可以继续由捕获的用户代码引发的异常<ph id="ph2">`catch`</ph>语句。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>For code written for previous versions of the .NET Framework that you want to recompile and run without modification on the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, you can add the <bpt id="p1">[</bpt><ph id="ph2">\&lt;</ph>legacyCorruptedStateExceptionsPolicy&gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/legacycorruptedstateexceptionspolicy-element.md)</ept> element to your app's configuration file.</source>
          <target state="translated">对于你想要重新编译和运行时没有修改上的.NET framework 的早期版本编写的代码<ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>，你可以添加<bpt id="p1">[</bpt> <ph id="ph2">\&lt;</ph>legacyCorruptedStateExceptionsPolicy &gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/legacycorruptedstateexceptionspolicy-element.md)</ept>元素到你应用程序的配置文件。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>Note that you can also receive notification of the exceptions if you have defined a handler for the <ph id="ph1">&lt;xref:System.AppDomain.FirstChanceException?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.AppDomain.UnhandledException?displayProperty=nameWithType&gt;</ph> event.</source>
          <target state="translated">请注意，是否已定义的处理程序，您可以也收到的异常通知<ph id="ph1">&lt;xref:System.AppDomain.FirstChanceException?displayProperty=nameWithType&gt;</ph>或<ph id="ph2">&lt;xref:System.AppDomain.UnhandledException?displayProperty=nameWithType&gt;</ph>事件。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>Version Information</source>
          <target state="translated">版本信息</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>This exception is thrown in the .NET Framework 2.0 and later versions.</source>
          <target state="translated">在.NET Framework 2.0 和更高版本中，将引发此异常。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>In earlier versions of the .NET Framework, an access violation in unmanaged code or unsafe managed code is represented by a <ph id="ph1">&lt;xref:System.NullReferenceException&gt;</ph> in managed code.</source>
          <target state="translated">在.NET framework 的早期版本，由非托管的代码或不安全的托管的代码的访问冲突<ph id="ph1">&lt;xref:System.NullReferenceException&gt;</ph>在托管代码中。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>A <ph id="ph1">&lt;xref:System.NullReferenceException&gt;</ph> is also thrown when a null reference is dereferenced in verifiable managed code, an occurrence that does not involve data corruption, and there is no way to distinguish between the two situations in versions 1.0 or 1.1.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.NullReferenceException&gt;</ph>还在托管代码中可验证，不涉及数据损坏的发生次数取消引用 null 引用，并且没有方法来区分版本 1.0 或 1.1 中的两种情况时引发。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>Administrators can allow selected applications to revert to the behavior of the .NET Framework version 1.1.</source>
          <target state="translated">管理员可以允许所选的应用程序，以恢复到.NET Framework 1.1 版的行为。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AccessViolationException">
          <source>Place the following line in the <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>runtime<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept> section of the configuration file for the application:</source>
          <target state="translated">将以下行中的放<bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>运行时<ph id="ph2">&amp;gt;</ph>元素<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)</ept>的应用程序的配置文件的部分：</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="T:System.AccessViolationException">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.AccessViolationException" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.AccessViolationException" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.AccessViolationException.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.AccessViolationException" /&gt;</ph> class with a system-supplied message that describes the error.</source>
          <target state="translated">使用由系统提供的用于描述错误的消息初始化 <ph id="ph1">&lt;see cref="T:System.AccessViolationException" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor">
          <source>This constructor initializes the <ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph> property of the new instance to a system-supplied message that describes the error, such as "Attempted to read or write protected memory.</source>
          <target state="translated">此构造函数初始化<ph id="ph1">&lt;xref:System.Exception.Message%2A&gt;</ph>属性的新实例为系统提供的消息的描述错误，如"试图读或写受保护的内存。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor">
          <source>This is often an indication that other memory has been corrupted."</source>
          <target state="translated">这是通常指示其他内存已损坏。"</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor">
          <source>This message takes into account the current system culture.</source>
          <target state="translated">此消息将当前系统区域性考虑在内。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph>.</source>
          <target state="translated">下表显示 <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph> 的实例的初始属性值。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor">
          <source>Property</source>
          <target state="translated">Property</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor">
          <source>Value</source>
          <target state="translated">“值”</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor">
          <source><ph id="ph1">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor">
          <source>The localized error message string.</source>
          <target state="translated">本地化的错误消息字符串。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.AccessViolationException.#ctor(System.String)">
          <source>The message that describes the exception.</source>
          <target state="translated">描述该异常的消息。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.AccessViolationException.#ctor(System.String)">
          <source>The caller of this constructor is required to ensure that this string has been localized for the current system culture.</source>
          <target state="translated">此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.AccessViolationException.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.AccessViolationException" /&gt;</ph> class with a specified message that describes the error.</source>
          <target state="translated">使用指定的描述错误的消息初始化 <ph id="ph1">&lt;see cref="T:System.AccessViolationException" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor(System.String)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph>.</source>
          <target state="translated">下表显示 <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph> 的实例的初始属性值。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor(System.String)">
          <source>Property</source>
          <target state="translated">Property</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor(System.String)">
          <source>Value</source>
          <target state="translated">“值”</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor(System.String)">
          <source><ph id="ph1">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor(System.String)">
          <source>The error message string specified in <ph id="ph1">`message`</ph>.</source>
          <target state="translated"><ph id="ph1">`message`</ph> 中指定的错误消息字符串。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.AccessViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> that holds the serialized object data.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph>，用于保存序列化对象数据。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.AccessViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> that contains contextual information about the source or destination.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph>，它包含关于源或目标的上下文信息。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.AccessViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.AccessViolationException" /&gt;</ph> class with serialized data.</source>
          <target state="translated">用序列化数据初始化 <ph id="ph1">&lt;see cref="T:System.AccessViolationException" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.</source>
          <target state="translated">此构造函数在反序列化过程中调用，以便重建通过流传输的异常对象。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>For more information, see <bpt id="p1">[</bpt>XML and SOAP Serialization<ept id="p1">](~/docs/standard/serialization/xml-and-soap-serialization.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>XML 和 SOAP 序列化<ept id="p1">](~/docs/standard/serialization/xml-and-soap-serialization.md)</ept>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.AccessViolationException.#ctor(System.String,System.Exception)">
          <source>The message that describes the exception.</source>
          <target state="translated">描述该异常的消息。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.AccessViolationException.#ctor(System.String,System.Exception)">
          <source>The caller of this constructor is required to ensure that this string has been localized for the current system culture.</source>
          <target state="translated">此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.AccessViolationException.#ctor(System.String,System.Exception)">
          <source>The exception that is the cause of the current exception.</source>
          <target state="translated">导致当前异常的异常。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.AccessViolationException.#ctor(System.String,System.Exception)">
          <source>If the <bpt id="p1">&lt;c&gt;</bpt>innerException<ept id="p1">&lt;/c&gt;</ept> parameter is not <ph id="ph1">&lt;see langword="null" /&gt;</ph>, the current exception is raised in a <ph id="ph2">&lt;see langword="catch" /&gt;</ph> block that handles the inner exception.</source>
          <target state="translated">如果 <bpt id="p1">&lt;c&gt;</bpt>innerException<ept id="p1">&lt;/c&gt;</ept> 参数不为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>，则当前异常会在处理内部异常的 <ph id="ph2">&lt;see langword="catch" /&gt;</ph> 块中引发。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.AccessViolationException.#ctor(System.String,System.Exception)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.AccessViolationException" /&gt;</ph> class with a specified error message and a reference to the inner exception that is the cause of this exception.</source>
          <target state="translated">使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <ph id="ph1">&lt;see cref="T:System.AccessViolationException" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor(System.String,System.Exception)">
          <source>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.</source>
          <target state="translated">因前一个异常而直接引发的异常应在 <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 属性中包含对前一个异常的引用。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor(System.String,System.Exception)">
          <source>The <ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property returns the same value that is passed into the constructor, or <ph id="ph2">`null`</ph> if the <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property does not supply the inner exception value to the constructor.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Exception.InnerException%2A&gt;</ph> 属性返回的值与传递到构造函数中的值相同；或者，如果 <ph id="ph2">`null`</ph> 属性没有向构造函数提供内部异常值，则为 <ph id="ph3">&lt;xref:System.Exception.InnerException%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor(System.String,System.Exception)">
          <source>The following table shows the initial property values for an instance of <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph>.</source>
          <target state="translated">下表显示 <ph id="ph1">&lt;xref:System.AccessViolationException&gt;</ph> 的实例的初始属性值。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor(System.String,System.Exception)">
          <source>Property</source>
          <target state="translated">Property</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor(System.String,System.Exception)">
          <source>Value</source>
          <target state="translated">“值”</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor(System.String,System.Exception)">
          <source><ph id="ph1">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AccessViolationException.#ctor(System.String,System.Exception)">
          <source>The error message string specified in <ph id="ph1">`message`</ph>.</source>
          <target state="translated"><ph id="ph1">`message`</ph> 中指定的错误消息字符串。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>