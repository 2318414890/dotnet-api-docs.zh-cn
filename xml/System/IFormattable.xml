<Type Name="IFormattable" FullName="System.IFormattable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f1ee32cae285a624ff6ceecaa94663848cf18034" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30728561" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.IFormattable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFormattable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供一种功能，用以将对象的值格式化为字符串表示形式。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormattable>接口将对象转换为其基于一个格式字符串和格式提供程序的字符串表示形式。  
  
 一个格式字符串通常定义一个对象的总体外观。 例如，.NET Framework 支持以下功能：  
  
-   用于枚举值的格式的标准格式字符串 (请参阅[枚举格式字符串](~/docs/standard/base-types/enumeration-format-strings.md))。  
  
-   用于格式化数值的标准和自定义格式字符串 (请参阅[标准数字格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)和[自定义数字格式字符串](~/docs/standard/base-types/custom-numeric-format-strings.md))。  
  
-   用于格式化日期和时间值的标准和自定义格式字符串 (请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md))。  
  
-   时间间隔格式设置的标准和自定义格式字符串 (请参阅[标准 TimeSpan 格式字符串](~/docs/standard/base-types/standard-timespan-format-strings.md)和[自定义 TimeSpan 格式字符串](~/docs/standard/base-types/custom-timespan-format-strings.md))。  
  
 你还可以定义自己的格式字符串来支持你应用程序定义的类型的格式设置。  
  
 格式提供程序返回的格式化对象，通常在将对象转换为其字符串表示形式定义使用的符号。 例如时将数字转换为货币值中，, 格式提供程序会定义结果字符串中显示的货币符号。 .NET Framework 定义三个格式提供程序：  
  
-   <xref:System.Globalization.CultureInfo?displayProperty=nameWithType>类，该类返回<xref:System.Globalization.NumberFormatInfo>用于数字值的格式的对象或<xref:System.Globalization.DateTimeFormatInfo>格式化日期和时间值的对象。  
  
-   <xref:System.Globalization.NumberFormatInfo?displayProperty=nameWithType>类，该类返回用于格式化数值自身的实例。  
  
-   <xref:System.Globalization.DateTimeFormatInfo?displayProperty=nameWithType>类，该类返回自身的实例用于日期和时间值的格式。  
  
 此外，你可以定义你自己的自定义格式提供程序，提供区域性特定，专业性特有的或设置格式时使用特定于行业的信息。 有关实现通过使用自定义格式提供程序自定义格式设置的详细信息，请参阅<xref:System.ICustomFormatter>。  
  
 <xref:System.IFormattable>接口定义单个方法<xref:System.IFormattable.ToString%2A>，，它提供的实现类型的格式设置服务。 <xref:System.IFormattable.ToString%2A>可以直接调用方法。 此外，它自动调用<xref:System.Convert.ToString%28System.Object%29?displayProperty=nameWithType>和<xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType>方法，并通过使用方法[复合格式设置功能](~/docs/standard/base-types/composite-formatting.md).NET Framework 中。 此类方法包括<xref:System.Console.WriteLine%28System.String%2CSystem.Object%29?displayProperty=nameWithType>， <xref:System.String.Format%2A?displayProperty=nameWithType>，和<xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%29?displayProperty=nameWithType>，等等。 <xref:System.IFormattable.ToString%2A>针对方法的格式字符串中每个格式项中调用方法。  
  
 <xref:System.IFormattable>接口的基本数据类型由实现。  
  
   
  
## Examples  
 下面的示例定义一个实现 `Temperature` 接口的 <xref:System.IFormattable> 类。 类支持四个格式说明符:"G"和"C"，指示得的温度摄氏度; 中显示"F"，指示得的温度华氏度; 显示和"K"，指示得的温度开氏显示。 此外，<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>实现还可以处理是一个格式字符串`null`或为空。 与其他两个`ToString`由定义方法`Temperature`类只需将调用包装到<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>实现。  
  
 [!code-csharp[System.IFormattable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#1)]
 [!code-vb[System.IFormattable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#1)]  
  
 下面的示例然后调用<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>实现直接或通过使用复合格式字符串。  
  
 [!code-csharp[System.IFormattable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#2)]
 [!code-vb[System.IFormattable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>需要更好地控制比字符串的格式设置类<see cref="M:System.Object.ToString" />提供应实现<see cref="T:System.IFormattable" />。  
  
 一个类以实现<see cref="T:System.IFormattable" />必须支持"G"（常规） 格式说明符。 除了使用"G"说明符，该类还可以定义它支持的格式说明符的列表。 此外，类必须准备好处理的格式说明符<see langword="null" />。 有关格式设置和格式设置代码的详细信息，请参阅[格式化类型](~/docs/standard/base-types/formatting-types.md)</para>
    </block>
    <altmember cref="T:System.IFormatProvider" />
    <altmember cref="M:System.Object.ToString" />
    <altmember cref="P:System.Threading.Thread.CurrentCulture" />
  </Docs>
  <Members>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (format As String, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(System::String ^ format, IFormatProvider ^ formatProvider);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">要使用的格式。  
  
 或  
  
 null 引用（Visual Basic 中为 <see langword="Nothing" />）将使用为 <see cref="T:System.IFormattable" /> 实现的类型所定义的默认格式。</param>
        <param name="formatProvider">要用于对值设置格式的提供程序。  
  
 或  
  
 null 引用（Visual Basic 中为 <see langword="Nothing" />）将从操作系统的当前区域设置中获取数字格式信息。</param>
        <summary>使用指定格式对当前实例的值设置格式。</summary>
        <returns>采用指定格式的当前实例的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormattable.ToString%2A>方法将值转换为可以采用多种方式表示的字符串表示形式。 其确切格式取决于特定符号或由特定区域性、 专业或行业定义以指定的顺序。 你可以直接调用该方法。 它还自动调用<xref:System.Convert.ToString%28System.Object%29?displayProperty=nameWithType>和<xref:System.Convert.ToString%28System.Object%2CSystem.IFormatProvider%29?displayProperty=nameWithType>方法，并由方法，使用复合格式功能在.NET Framework 中，如<xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>， <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>，和<xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>。 (有关详细信息，请参阅[复合格式设置](~/docs/standard/base-types/composite-formatting.md)。)  
  
 复合格式设置方法调用<xref:System.IFormattable.ToString%2A>一次的格式字符串中每个格式项的方法。 传递给方法的参数取决于调用的特定格式设置方法的格式项的内容，如下所示：  
  
-   如果格式项不包含一个格式字符串 (例如，如果格式项只是`{0}`)，它便开始`null`的值作为<xref:System.String?displayProperty=nameWithType>参数。  
  
-   如果格式项包含一个格式字符串 (例如， `{0:G}`)，格式字符串传递的值作为<xref:System.String?displayProperty=nameWithType>参数。  
  
-   如果原始的方法调用不包括<xref:System.IFormatProvider?displayProperty=nameWithType>参数，<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>的值作为传递<xref:System.IFormatProvider?displayProperty=nameWithType>参数。  
  
-   如果原始的方法调用包括<xref:System.IFormatProvider?displayProperty=nameWithType>方法调用中提供的提供程序传递的值作为参数，<xref:System.IFormatProvider?displayProperty=nameWithType>参数。  
  
> [!NOTE]
>  对象的<xref:System.IFormattable.ToString%2A>实现由复合格式设置方法，仅当它们不会传递<xref:System.ICustomFormatter>格式提供程序，或者如果<xref:System.ICustomFormatter.Format%2A>方法的自定义格式提供程序返回`null`。  
  
 .NET Framework 包括三个格式提供程序，所有这些实现<xref:System.IFormatProvider>接口：  
  
-   <xref:System.Globalization.NumberFormatInfo> 提供数字格式设置信息，如用于小数和组分隔符字符以及拼写和货币值中的货币符号的位置。  
  
-   <xref:System.Globalization.DateTimeFormatInfo> 提供与日期相关的和与时间有关格式设置信息，如月、 日和年的日期模式中的位置。  
  
-   <xref:System.Globalization.CultureInfo> 包含的默认格式以特定的区域性，包括数值的格式信息的信息和与日期相关以及与时间相关的格式设置信息。  
  
 此外，你可以定义自己的自定义格式提供程序。  
  
   
  
## Examples  
 下面的示例演示`Temperature`类，该类实现<xref:System.IFormattable.ToString%2A>方法。 此代码示例摘自更大的示例为提供<xref:System.IFormattable>类。  
  
 [!code-csharp[System.IFormattable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.iformattable/cs/example1.cs#1)]
 [!code-vb[System.IFormattable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.iformattable/vb/example1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />方法必须支持"G"（常规） 格式说明符。 除了使用"G"说明符，该类还可以定义它支持的格式说明符的列表。 此外，类必须准备好处理的格式说明符<see langword="null" />。 有关格式设置和格式设置代码的详细信息，请参阅[格式化类型](~/docs/standard/base-types/formatting-types.md)。</para>
        </block>
        <altmember cref="T:System.String" />
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
  </Members>
</Type>