<Type Name="IFormatProvider" FullName="System.IFormatProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="380cd37c1402c4dcf42f0e57f7d4df8be500b69c" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36430869" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.IFormatProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IFormatProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IFormatProvider" />
  <TypeSignature Language="F#" Value="type IFormatProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供一种机制，用于检索对象以控制格式化。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormatProvider>接口提供提供的格式设置和分析操作中使用格式设置信息的对象。 格式设置操作的一种类型的值转换为的字符串表示形式该值。 典型的格式设置方法包括`ToString`方法的类型，以及<xref:System.String.Format%2A>。 分析操作将字符串值的表示形式转换为具有该值的类型。 典型的分析方法包括`Parse`和`TryParse`。  
  
 <xref:System.IFormatProvider>接口包含一个方法， <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>。 <xref:System.IFormatProvider.GetFormat%2A> 是一个回调方法： 分析或格式设置方法调用它，并将其传递<xref:System.Type>表示的格式设置或分析方法需要的对象的类型的对象将提供的格式设置信息。 <xref:System.IFormatProvider.GetFormat%2A>方法负责返回该类型的对象。  
  
 <xref:System.IFormatProvider> 实现常用隐式的格式设置和分析方法。 例如，<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>方法隐式使用<xref:System.IFormatProvider>表示系统的当前区域性的实现。 <xref:System.IFormatProvider> 实现还可以指定显式由拥有类型的参数的方法<xref:System.IFormatProvider>，如<xref:System.Int32.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>和<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>。  
  
 .NET Framework 包括下列三个预定义<xref:System.IFormatProvider>实现提供区域性特定格式设置或分析数字和日期和时间值中使用的信息：  
  
-   <xref:System.Globalization.NumberFormatInfo>类，该类提供信息用于格式化数字，如货币、 千位分隔符和特定区域性的小数分隔符符号。 有关识别的预定义的格式字符串信息<xref:System.Globalization.NumberFormatInfo>对象，并在数字格式设置操作中使用，请参阅[标准数字格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)和[自定义数字格式字符串](~/docs/standard/base-types/custom-numeric-format-strings.md).  
  
-   <xref:System.Globalization.DateTimeFormatInfo>类，该类提供用于设置日期和时间，例如特定区域性或顺序和日期的年、 月和日部分的格式的日期和时间分隔符符号格式的信息。 有关识别的预定义的格式字符串信息<xref:System.Globalization.DateTimeFormatInfo>对象，并在数字格式设置操作中使用，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md).  
  
-   <xref:System.Globalization.CultureInfo>类，该类表示特定区域性。 其<xref:System.IFormatProvider.GetFormat%2A>方法返回特定于区域性的<xref:System.Globalization.NumberFormatInfo>或<xref:System.Globalization.DateTimeFormatInfo>对象，具体取决于是否<xref:System.Globalization.CultureInfo>对象使用的格式设置或分析涉及数字或日期和时间的操作中。  
  
 .NET Framework 还支持自定义格式设置。 这通常涉及到同时实现的格式设置类创建<xref:System.IFormatProvider>和<xref:System.ICustomFormatter>。 此类的实例然后作为参数传递给如执行的自定义的格式设置操作的方法<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>示例进行了说明设置为 12 位数字的帐号数字格式的此类的自定义实现。  
  
   
  
## Examples  
 下面的示例演示如何<xref:System.IFormatProvider>实现可以更改日期和时间值的表示形式。 在这种情况下，通过使用显示单个日期<xref:System.Globalization.CultureInfo>代表四个不同区域的对象。  
  
 [!code-csharp[System.IFormatProvider.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/provider2.cs#3)]
 [!code-vb[System.IFormatProvider.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/provider2.vb#3)]  
  
 下面的示例演示如何实现的类使用<xref:System.IFormatProvider>接口和<xref:System.IFormatProvider.GetFormat%2A>方法。 `AcctNumberFormat`类将<xref:System.Int64>值，该值表示设置格式的 12 位数字帐号帐号。 其`GetFormat`方法返回对当前的引用`AcctNumberFormat`实例如果`formatType`参数是指一个类以实现<xref:System.ICustomFormatter>; 否则为`GetFormat`返回`null`。  
  
 [!code-csharp[System.IFormatProvider.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#2)]
 [!code-vb[System.IFormatProvider.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#2)]  
  
 实现的类<xref:System.IFormatProvider>随后可对的格式设置和分析操作的调用中。 例如，下面的代码调用<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>方法来生成一个字符串，包含设置了格式的 12 位数字帐号。  
  
 [!code-csharp[System.IFormatProvider.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#1)]
 [!code-vb[System.IFormatProvider.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ICustomFormatter" />
    <altmember cref="T:System.IFormattable" />
  </Docs>
  <Members>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IFormatProvider.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj" Usage="iFormatProvider.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">一个对象，该对象指定要返回的格式对象的类型。</param>
        <summary>返回一个对象，该对象为指定类型提供格式设置服务。</summary>
        <returns>如果 <see cref="T:System.IFormatProvider" /> 实现能够提供该类型的对象，则为 <paramref name="formatType" /> 所指定对象的实例；否则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IFormatProvider.GetFormat%2A> 为回调方法，以格式设置和分析方法调用来检索有关格式的输入字符串在分析操作或在格式设置操作的输出字符串的格式的信息。 在`formatType`参数中，将格式设置或分析方法传递的对象执行其操作所需的类型。 如果<xref:System.IFormatProvider>实现可提供该格式设置或分析对象，它将返回该对象。 如果不是，它返回`null`。  
  
 例如，在调用<xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>方法，该方法的参数是<xref:System.IFormatProvider>对象，提供有关如何可能设置格式的字符串表示形式的当前整数实例的信息。 当运行时执行该方法时，它将调用<xref:System.IFormatProvider>对象的<xref:System.IFormatProvider.GetFormat%2A>方法并将其传递<xref:System.Type>对象，表示<xref:System.Globalization.NumberFormatInfo>类型。 如果<xref:System.IFormatProvider>对象可以提供<xref:System.Globalization.NumberFormatInfo>对象，它将返回该对象。 如果它不能提供该类型的对象，它将返回`null`。  
  
 你可以实现<xref:System.IFormatProvider>接口和<xref:System.IFormatProvider.GetFormat%2A>提供自定义格式设置或分析服务的类中的方法。 <xref:System.IFormatProvider>实现然后作为参数传递给分析或格式设置方法的类型的参数的任何重载<xref:System.IFormatProvider>，如<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>， <xref:System.Int32.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>，或<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下面的示例演示如何实现的类使用<xref:System.IFormatProvider>接口和<xref:System.IFormatProvider.GetFormat%2A>方法。 `AcctNumberFormat`类将<xref:System.Int64>值，该值表示设置格式的 12 位数字帐号帐号。 其`GetFormat`方法返回对自身的引用，如果`formatType`参数是指一个类以实现<xref:System.ICustomFormatter>; 否则为`GetFormat`返回`null`。  
  
 [!code-csharp[System.IFormatProvider.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#2)]
 [!code-vb[System.IFormatProvider.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#2)]  
  
 实例`AcctNumberFormat`类到一个提供格式设置或分析服务方法然后传递作为自变量。 例如，下面的代码传递`AcctNumberFormat`类到<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>方法来生成设置了格式的 12 位数字帐号。  
  
 [!code-csharp[System.IFormatProvider.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IFormatProvider.Class/cs/Provider.cs#1)]
 [!code-vb[System.IFormatProvider.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IFormatProvider.Class/vb/Provider.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>