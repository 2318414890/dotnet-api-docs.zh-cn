<Type Name="FlagsAttribute" FullName="System.FlagsAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="00bc57fe4b751be39835f14d9bafaaef66b41c8d" />
    <Meta Name="ms.sourcegitcommit" Value="6f3d3181d9ca22a1ab46a7f61f3ee152f2b844ea" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="10/27/2018" />
    <Meta Name="ms.locfileid" Value="50172954" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FlagsAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit FlagsAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.FlagsAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class FlagsAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class FlagsAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type FlagsAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Enum, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>指示可将枚举视为位域（即一组标志）。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 位域一般用于结合使用，可能会出现的元素的列表而枚举常量一般用于互相排斥的元素的列表。 因此，位域旨在组合使用位或运算来生成未命名的值，而不是枚举的常量。 语言差异在相比枚举常量的位域的使用。  
  
## <a name="attributes-of-the-flagsattribute"></a>FlagsAttribute 特性  
 <xref:System.AttributeUsageAttribute> 应用于此类，并将其<xref:System.AttributeUsageAttribute.Inherited%2A>属性指定`false`。 此属性只能应用于枚举。  
  
## <a name="guidelines-for-flagsattribute-and-enum"></a>FlagsAttribute 和枚举的准则  
  
-   使用<xref:System.FlagsAttribute>仅当对数字值执行按位运算 （AND、 OR、 异或） 是一个枚举的自定义属性。  
  
-   定义中为 2 的幂，即 1、 2、 4、 8 和等等的枚举常量。 这意味着在组合的枚举常量中的各个标志不会重叠。  
  
-   请考虑创建常用的标志组合一个枚举的常量。 例如，如果有用于文件 I/O 操作的枚举，包含枚举的常量`Read = 1`并`Write = 2`，请考虑创建的枚举的常量`ReadWrite = Read OR Write`，它结合`Read`和`Write`标志。 此外，用于组合标志的按位 OR 操作可能被视为一种高级的概念在某些情况下，不应要求对简单的任务。  
  
-   如果为标志枚举常量中定义为负数，因为很多标志位置可能会设置为 1，这可能会使您的代码令人困惑并鼓励编码错误，请格外小心。  
  
-   测试是否设置了标志中的数字值的简便方法是执行按位 AND 运算之间的数字值和标志枚举的常量，它为不对应于该标志的零的数字值中的所有位都设置然后测试该操作的结果是否等于标志枚举常量。  
  
-   使用`None`用作枚举值为零的常量标志的名称。 不能使用`None`按位运算中，若要测试一个标志，因为结果始终为零的枚举的常数。 但是，你可以执行的逻辑不之间的数字值的按位、 比较和`None`枚举的常数，以确定是否设置在数值中的任何位。  
  
     如果您创建的而不是标志枚举值枚举，则仍有必要创建`None`枚举的常数。 原因是，默认情况下为该枚举所使用的内存初始化为零的公共语言运行时。 因此，如果未定义其值为零的常量，枚举将包含非法值时创建它。  
  
     如果你的应用程序需要表示明显默认情况下，请考虑使用其值为零来表示默认值的枚举的常量。 如果没有默认情况下，请考虑使用值为零的枚举的常数意味着不由任何其他枚举常量的用例。  
  
-   未定义的枚举值，只是为了反映该枚举本身的状态。 例如，未定义的枚举的常量的只是表示枚举的结尾。 如果您需要确定枚举的最后一个值，请显式检查值。 此外，可以为第一个和最后一个枚举常量执行范围检查的范围内的所有值是否为有效。  
  
-   不要指定保留供将来使用的枚举的常量。  
  
-   在定义的方法或属性，它采用一个值作为一个枚举的常量时，请考虑验证值。 原因是，即使该数字的值未定义的枚举中，您可以强制转换为枚举类型的数字值。  
  
   
  
## Examples  
 下面的示例演示如何使用`FlagsAttribute`特性，并在显示效果<xref:System.Enum.ToString%2A>使用的方法`FlagsAttribute`上<xref:System.Enum>声明。  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 下面的示例定义两个颜色相关枚举`SingleHue`和`MultiHue`。 后一种具有`FlagsAttribute`属性; 前者却没有。 范围的整数，其中包括不表示枚举类型的基础值的整数转换为枚举类型和显示其字符串表示形式时，示例将演示行为的差异。   例如，请注意 3 不能表示为`SingleHue`值，因为 3 不是基础值的任何`SingleHue`成员，而`FlagsAttribute`属性使可能表示 3 一样`MultiHue`的值`Black, Red`。  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FlagsAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FlagsAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FlagsAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.FlagsAttribute" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例定义`PhoneService`枚举，它表示形式的通信提供的电话公司。 它初始化表示提供给三个不同家庭的服务的三个变量，然后指示哪些家庭具有任何服务的家庭有只有移动电话服务，而哪些家庭有移动电话和 land 行服务。 最后，它隐式调用<xref:System.Enum.ToString%28System.String%29?displayProperty=nameWithType>方法以显示用于每个家庭的服务的类型。  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 下面的示例演示如何使用`FlagsAttribute`特性，并在显示效果<xref:System.Enum.ToString%2A>使用的方法`FlagsAttribute`上<xref:System.Enum>声明。  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>