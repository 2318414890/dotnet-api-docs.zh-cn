<Type Name="FlagsAttribute" FullName="System.FlagsAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4b2417901d3ec970c72a2c6cc0524b2108855ce0" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36431659" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FlagsAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit FlagsAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.FlagsAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class FlagsAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class FlagsAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type FlagsAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Enum, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="d5d9b-101">指示可将枚举视为位域（即一组标志）。</span>
      <span class="sxs-lookup">
        <span data-stu-id="d5d9b-101">Indicates that an enumeration can be treated as a bit field; that is, a set of flags.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5d9b-102">位域一般用于在组合中，可能出现的元素的列表而枚举常量一般用于互相排斥的元素的列表。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-102">Bit fields are generally used for lists of elements that might occur in combination, whereas enumeration constants are generally used for lists of mutually exclusive elements.</span></span> <span data-ttu-id="d5d9b-103">因此，位域旨在结合生成未命名的值的按位 OR 操作，而不是枚举的常数。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-103">Therefore, bit fields are designed to be combined with a bitwise OR operation to generate unnamed values, whereas enumerated constants are not.</span></span> <span data-ttu-id="d5d9b-104">其使用位域相比枚举常量在不同语言。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-104">Languages vary in their use of bit fields compared to enumeration constants.</span></span>  
  
## <a name="attributes-of-the-flagsattribute"></a><span data-ttu-id="d5d9b-105">FlagsAttribute 特性</span><span class="sxs-lookup"><span data-stu-id="d5d9b-105">Attributes of the FlagsAttribute</span></span>  
 <span data-ttu-id="d5d9b-106"><xref:System.AttributeUsageAttribute> 应用于此类，并将其<xref:System.AttributeUsageAttribute.Inherited%2A>属性指定`false`。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-106"><xref:System.AttributeUsageAttribute> is applied to this class, and its <xref:System.AttributeUsageAttribute.Inherited%2A> property specifies `false`.</span></span> <span data-ttu-id="d5d9b-107">此属性仅可以应用于枚举。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-107">This attribute can only be applied to enumerations.</span></span>  
  
## <a name="guidelines-for-flagsattribute-and-enum"></a><span data-ttu-id="d5d9b-108">FlagsAttribute 和枚举准则</span><span class="sxs-lookup"><span data-stu-id="d5d9b-108">Guidelines for FlagsAttribute and Enum</span></span>  
  
-   <span data-ttu-id="d5d9b-109">使用<xref:System.FlagsAttribute>枚举才是对数字值执行按位运算 （AND、 OR 独占或） 的自定义属性。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-109">Use the <xref:System.FlagsAttribute> custom attribute for an enumeration only if a bitwise operation (AND, OR, EXCLUSIVE OR) is to be performed on a numeric value.</span></span>  
  
-   <span data-ttu-id="d5d9b-110">在 2 的幂，即 1、 2、 4、 8 等中定义枚举常量。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-110">Define enumeration constants in powers of two, that is, 1, 2, 4, 8, and so on.</span></span> <span data-ttu-id="d5d9b-111">这意味着不重叠中组合的枚举常量的各个标志。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-111">This means the individual flags in combined enumeration constants do not overlap.</span></span>  
  
-   <span data-ttu-id="d5d9b-112">请考虑创建针对常用的标志组合的枚举的常数。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-112">Consider creating an enumerated constant for commonly used flag combinations.</span></span> <span data-ttu-id="d5d9b-113">例如，如果你有用于文件 I/O 操作的枚举包含枚举的常数`Read = 1`和`Write = 2`，请考虑创建枚举的常数`ReadWrite = Read OR Write`，它结合`Read`和`Write`标志。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-113">For example, if you have an enumeration used for file I/O operations that contains the enumerated constants `Read = 1` and `Write = 2`, consider creating the enumerated constant `ReadWrite = Read OR Write`, which combines the `Read` and `Write` flags.</span></span> <span data-ttu-id="d5d9b-114">此外，可用于组合标志的按位 OR 操作视为在某些情况下，不应为用于简单任务所需的一个高级的概念。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-114">In addition, the bitwise OR operation used to combine the flags might be considered an advanced concept in some circumstances that should not be required for simple tasks.</span></span>  
  
-   <span data-ttu-id="d5d9b-115">如果为标志枚举常量中定义为负数，因为很多标志位置可能会设置为 1，这可能会使你的代码的混乱，并鼓励编码错误，请务必小心。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-115">Use caution if you define a negative number as a flag enumerated constant because many flag positions might be set to 1, which might make your code confusing and encourage coding errors.</span></span>  
  
-   <span data-ttu-id="d5d9b-116">测试是否在数值中设置一个标志一种简便方式是执行按位与运算，之间的数字值和标志枚举的常数，它将所有位都设置为不对应于标志的零的数字值在然后测试该操作的结果是否等于该标志枚举常量。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-116">A convenient way to test whether a flag is set in a numeric value is to perform a bitwise AND operation between the numeric value and the flag enumerated constant, which sets all bits in the numeric value to zero that do not correspond to the flag, then test whether the result of that operation is equal to the flag enumerated constant.</span></span>  
  
-   <span data-ttu-id="d5d9b-117">使用`None`用作枚举其值为零的常量的标志名称。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-117">Use `None` as the name of the flag enumerated constant whose value is zero.</span></span> <span data-ttu-id="d5d9b-118">不能使用`None`按位运算中，来测试一个标志，因为结果始终为零的枚举的常数。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-118">You cannot use the `None` enumerated constant in a bitwise AND operation to test for a flag because the result is always zero.</span></span> <span data-ttu-id="d5d9b-119">但是，你可以执行的逻辑不之间的数字值的按位、 比较和`None`枚举的常量，以确定是否已设置在数值中的任何位。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-119">However, you can perform a logical, not a bitwise, comparison between the numeric value and the `None` enumerated constant to determine whether any bits in the numeric value are set.</span></span>  
  
     <span data-ttu-id="d5d9b-120">如果你创建而不是标志枚举的值枚举，它是仍必要创建`None`枚举的常数。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-120">If you create a value enumeration instead of a flags enumeration, it is still worthwhile to create a `None` enumerated constant.</span></span> <span data-ttu-id="d5d9b-121">原因是，默认情况下用于枚举的内存初始化为零的公共语言运行时。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-121">The reason is that by default the memory used for the enumeration is initialized to zero by the common language runtime.</span></span> <span data-ttu-id="d5d9b-122">因此，如果未定义其值为零的常量，枚举将包含在创建时非法值。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-122">Consequently, if you do not define a constant whose value is zero, the enumeration will contain an illegal value when it is created.</span></span>  
  
     <span data-ttu-id="d5d9b-123">如果你的应用程序需要表示明显默认情况下，请考虑使用其值为零表示默认值的枚举的常数。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-123">If there is an obvious default case your application needs to represent, consider using an enumerated constant whose value is zero to represent the default.</span></span> <span data-ttu-id="d5d9b-124">如果没有任何默认情况下，请考虑使用其值为零的枚举的常数意味着不由任何其他枚举常量表示这种情况。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-124">If there is no default case, consider using an enumerated constant whose value is zero that means the case that is not represented by any of the other enumerated constants.</span></span>  
  
-   <span data-ttu-id="d5d9b-125">未定义一个枚举值，只是为了镜像与枚举本身的状态。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-125">Do not define an enumeration value solely to mirror the state of the enumeration itself.</span></span> <span data-ttu-id="d5d9b-126">例如，不定义仅用于枚举的结束标记的枚举的常数。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-126">For example, do not define an enumerated constant that merely marks the end of the enumeration.</span></span> <span data-ttu-id="d5d9b-127">如果你需要确定在枚举的最后一个值，请显式检查该值。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-127">If you need to determine the last value of the enumeration, check for that value explicitly.</span></span> <span data-ttu-id="d5d9b-128">此外，你可以执行范围检查第一个和最后一个枚举常量，如果范围内的所有值都是有效。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-128">In addition, you can perform a range check for the first and last enumerated constant if all values within the range are valid.</span></span>  
  
-   <span data-ttu-id="d5d9b-129">不要指定保留供将来使用的枚举的常数。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-129">Do not specify enumerated constants that are reserved for future use.</span></span>  
  
-   <span data-ttu-id="d5d9b-130">当你定义的方法或属性，它采用作为值的枚举的常数时，请考虑验证值。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-130">When you define a method or property that takes an enumerated constant as a value, consider validating the value.</span></span> <span data-ttu-id="d5d9b-131">原因是，即使该数值不在枚举中定义，你可以强制转换为枚举类型的数字值。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-131">The reason is that you can cast a numeric value to the enumeration type even if that numeric value is not defined in the enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5d9b-132">下面的示例演示如何使用`FlagsAttribute`特性，并显示效果上<xref:System.Enum.ToString%2A>的使用方法`FlagsAttribute`上<xref:System.Enum>声明。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-132">The following example illustrates the use of the `FlagsAttribute` attribute and shows the effect on the <xref:System.Enum.ToString%2A> method of using `FlagsAttribute` on an <xref:System.Enum> declaration.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 <span data-ttu-id="d5d9b-133">下面的示例定义两个颜色相关枚举`SingleHue`和`MultiHue`。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-133">The following example defines two color-related enumerations, `SingleHue` and `MultiHue`.</span></span> <span data-ttu-id="d5d9b-134">后者具有`FlagsAttribute`属性; 前者却没有。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-134">The latter has the `FlagsAttribute` attribute; the former does not.</span></span> <span data-ttu-id="d5d9b-135">当范围的整数，包括不表示枚举类型的基础值的整数转换为枚举类型和显示其字符串表示形式时，该示例显示行为的差异。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-135">The example shows the difference in behavior when a range of integers, including integers that do not represent underlying values of the enumeration type, are cast to the enumeration type and their string representations displayed.</span></span>   <span data-ttu-id="d5d9b-136">例如，请注意 3 不能表示为`SingleHue`值因为 3 不是基础值的任何`SingleHue`成员，而`FlagsAttribute`特性使可以表示为 3`MultiHue`值`Black, Red`。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-136">For example, note that 3 cannot be represented as a `SingleHue` value because 3 is not the underlying value of any `SingleHue` member, whereas the `FlagsAttribute` attribute makes it possible to represent 3 as a `MultiHue` value of `Black, Red`.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FlagsAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FlagsAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FlagsAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d5d9b-137">初始化 <see cref="T:System.FlagsAttribute" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5d9b-137">Initializes a new instance of the <see cref="T:System.FlagsAttribute" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d5d9b-138">下面的示例定义`PhoneService`表示形式的通信提供电话公司的枚举。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-138">The following example defines a `PhoneService` enumeration that represents forms of communication provided by a telephone company.</span></span> <span data-ttu-id="d5d9b-139">它将初始化表示到三个不同的家庭，提供的服务的三个变量，然后指示哪些家庭具有任何服务，哪些家庭具有只移动电话服务，并且哪些家庭具有移动电话和上关于领土行服务。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-139">It initializes three variables representing the service provided to three different households, and then indicates which households have no service, which households have only cell phone service, and which households have both cell phone and land line service.</span></span> <span data-ttu-id="d5d9b-140">最后，它隐式调用<xref:System.Enum.ToString%28System.String%29?displayProperty=nameWithType>方法以显示提供给每个全体服务的类型。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-140">Finally, it implicitly calls the <xref:System.Enum.ToString%28System.String%29?displayProperty=nameWithType> method to display the types of service provided to each household.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 <span data-ttu-id="d5d9b-141">下面的示例演示如何使用`FlagsAttribute`特性，并显示效果上<xref:System.Enum.ToString%2A>的使用方法`FlagsAttribute`上<xref:System.Enum>声明。</span><span class="sxs-lookup"><span data-stu-id="d5d9b-141">The following example illustrates the use of the `FlagsAttribute` attribute and shows the effect on the <xref:System.Enum.ToString%2A> method of using `FlagsAttribute` on an <xref:System.Enum> declaration.</span></span>  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>