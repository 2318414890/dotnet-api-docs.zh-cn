<Type Name="Random" FullName="System.Random">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4ad7a7caff000dc43adcd1a90679ce6c6f419bc0" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34174121" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Random" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Random extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Random" />
  <TypeSignature Language="VB.NET" Value="Public Class Random" />
  <TypeSignature Language="C++ CLI" Value="public ref class Random" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="e2961-101">表示伪随机数生成器，这是一种能够产生满足某些随机性统计需求的数字序列的设备。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e2961-101">Represents a pseudo-random number generator, which is a device that produces a sequence of numbers that meet certain statistical requirements for randomness.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2961-102">伪随机数字从一组有限的数字选择以相同的概率。</span><span class="sxs-lookup"><span data-stu-id="e2961-102">Pseudo-random numbers are chosen with equal probability from a finite set of numbers.</span></span> <span data-ttu-id="e2961-103">因为数学算法用于选择它们，但它们是充分随机实用的角度而言，所选的数字不完全随机的。</span><span class="sxs-lookup"><span data-stu-id="e2961-103">The chosen numbers are not completely random because a mathematical algorithm is used to select them, but they are sufficiently random for practical purposes.</span></span> <span data-ttu-id="e2961-104">当前实现<xref:System.Random>类是否基于 Donald E.Knuth 减随机数生成器算法的修改版本。</span><span class="sxs-lookup"><span data-stu-id="e2961-104">The current implementation of the <xref:System.Random> class is based on a modified version of Donald E. Knuth's subtractive random number generator algorithm.</span></span> <span data-ttu-id="e2961-105">有关详细信息，请参阅 D.e。</span><span class="sxs-lookup"><span data-stu-id="e2961-105">For more information, see D. E.</span></span> <span data-ttu-id="e2961-106">Knuth。</span><span class="sxs-lookup"><span data-stu-id="e2961-106">Knuth.</span></span> <span data-ttu-id="e2961-107">*编程，卷 2 的计算机的技巧： Seminumerical 算法*。</span><span class="sxs-lookup"><span data-stu-id="e2961-107">*The Art of Computer Programming, Volume 2: Seminumerical Algorithms*.</span></span> <span data-ttu-id="e2961-108">Addison Wesley，读取，MA，第三个版本，1997年。</span><span class="sxs-lookup"><span data-stu-id="e2961-108">Addison-Wesley, Reading, MA, third edition, 1997.</span></span>  
  
 <span data-ttu-id="e2961-109">若要生成加密性极安全的随机数字，例如适用于创建随机密码，使用<xref:System.Security.Cryptography.RNGCryptoServiceProvider>类或从派生类<xref:System.Security.Cryptography.RandomNumberGenerator?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e2961-109">To generate a cryptographically secure random number, such as one that's suitable for creating a random password, use the <xref:System.Security.Cryptography.RNGCryptoServiceProvider> class or derive a class from <xref:System.Security.Cryptography.RandomNumberGenerator?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="e2961-110">本主题内容：</span><span class="sxs-lookup"><span data-stu-id="e2961-110">In this topic:</span></span>  
  
 <span data-ttu-id="e2961-111">[实例化的随机数生成器](#Instantiate) </span><span class="sxs-lookup"><span data-stu-id="e2961-111">[Instantiating the random number generator](#Instantiate) </span></span>  
 <span data-ttu-id="e2961-112">[避免多个实例化](#Multiple) </span><span class="sxs-lookup"><span data-stu-id="e2961-112">[Avoiding multiple instantiations](#Multiple) </span></span>  
 <span data-ttu-id="e2961-113">[System.Random 类和线程安全](#ThreadSafety) </span><span class="sxs-lookup"><span data-stu-id="e2961-113">[The System.Random class and thread safety](#ThreadSafety) </span></span>  
 <span data-ttu-id="e2961-114">[生成不同类型的随机数字](#Functionality) </span><span class="sxs-lookup"><span data-stu-id="e2961-114">[Generating different types of random numbers](#Functionality) </span></span>  
 <span data-ttu-id="e2961-115">[替换为您自己的算法](#Overriding) </span><span class="sxs-lookup"><span data-stu-id="e2961-115">[Substituting your own algorithm](#Overriding) </span></span>  
 <span data-ttu-id="e2961-116">[如何使用到 System.Random...](#Operations) </span><span class="sxs-lookup"><span data-stu-id="e2961-116">[How do you use System.Random to…](#Operations) </span></span>  
 [<span data-ttu-id="e2961-117">检索相同的随机值序列</span><span class="sxs-lookup"><span data-stu-id="e2961-117">Retrieve the same sequence of random values</span></span>](#Same)  
 [<span data-ttu-id="e2961-118">检索随机值的唯一的序列</span><span class="sxs-lookup"><span data-stu-id="e2961-118">Retrieve unique sequences of random values</span></span>](#Unique)  
 [<span data-ttu-id="e2961-119">检索指定的范围内的整数</span><span class="sxs-lookup"><span data-stu-id="e2961-119">Retrieve integers in a specified range</span></span>](#Range)  
 [<span data-ttu-id="e2961-120">检索与指定位数的数字的整数</span><span class="sxs-lookup"><span data-stu-id="e2961-120">Retrieve integers with a specified number of digits</span></span>](#Digits)  
 [<span data-ttu-id="e2961-121">检索指定范围中的浮点值</span><span class="sxs-lookup"><span data-stu-id="e2961-121">Retrieve floating-point values in a specified range</span></span>](#Floats)  
 [<span data-ttu-id="e2961-122">生成随机的布尔值</span><span class="sxs-lookup"><span data-stu-id="e2961-122">Generate random Boolean values</span></span>](#Boolean)  
 [<span data-ttu-id="e2961-123">生成随机的 64 位整数</span><span class="sxs-lookup"><span data-stu-id="e2961-123">Generate random 64-bit integers</span></span>](#Long)  
 [<span data-ttu-id="e2961-124">检索指定范围中的字节数</span><span class="sxs-lookup"><span data-stu-id="e2961-124">Retrieve bytes in a specified range</span></span>](#Bytes)  
 [<span data-ttu-id="e2961-125">随机从数组或集合检索某个元素</span><span class="sxs-lookup"><span data-stu-id="e2961-125">Retrieve an element from an array or collection at random</span></span>](#Array)  
 [<span data-ttu-id="e2961-126">从数组或集合中检索的唯一元素</span><span class="sxs-lookup"><span data-stu-id="e2961-126">Retrieve a unique element from an array or collection</span></span>](#UniqueArray)  
  
<a name="Instantiate"></a>   
## <a name="instantiating-the-random-number-generator"></a><span data-ttu-id="e2961-127">实例化的随机数生成器</span><span class="sxs-lookup"><span data-stu-id="e2961-127">Instantiating the random number generator</span></span>  
 <span data-ttu-id="e2961-128">您通过实例化的随机数生成器提供的种子值 （的伪随机数生成算法的起始值） 到<xref:System.Random.%23ctor%2A>类构造函数。</span><span class="sxs-lookup"><span data-stu-id="e2961-128">You instantiate the random number generator by providing a seed value (a starting value for the pseudo-random number generation algorithm) to a <xref:System.Random.%23ctor%2A> class constructor.</span></span>  <span data-ttu-id="e2961-129">你可以显式或隐式提供的种子值：</span><span class="sxs-lookup"><span data-stu-id="e2961-129">You can supply the seed value either explicitly or implicitly:</span></span>  
  
-   <span data-ttu-id="e2961-130"><xref:System.Random.%23ctor%28System.Int32%29>构造函数使用你提供一个显式的种子值。</span><span class="sxs-lookup"><span data-stu-id="e2961-130">The <xref:System.Random.%23ctor%28System.Int32%29> constructor uses an explicit seed value that you supply.</span></span>  
  
-   <span data-ttu-id="e2961-131"><xref:System.Random.%23ctor>构造函数使用的系统时钟提供的种子值。</span><span class="sxs-lookup"><span data-stu-id="e2961-131">The <xref:System.Random.%23ctor> constructor uses the system clock to provide a seed value.</span></span> <span data-ttu-id="e2961-132">这是实例化的随机数生成器的最常见方法。</span><span class="sxs-lookup"><span data-stu-id="e2961-132">This is the most common way of instantiating the random number generator.</span></span>  
  
 <span data-ttu-id="e2961-133">如果相同的种子用于单独<xref:System.Random>对象，则它们将生成相同的一系列随机数字。</span><span class="sxs-lookup"><span data-stu-id="e2961-133">If the same seed is used for separate <xref:System.Random> objects, they will generate the same series of random numbers.</span></span> <span data-ttu-id="e2961-134">这很有用，创建测试套件，以处理随机值，或重播派生随机数字，其数据的游戏。</span><span class="sxs-lookup"><span data-stu-id="e2961-134">This can be useful for creating a test suite that processes random values, or for replaying games that derive their data from random numbers.</span></span> <span data-ttu-id="e2961-135">但请注意，<xref:System.Random>中在不同版本的.NET framework 下运行的进程的对象可能会返回不同系列的随机数字，即使它们在具有相同的种子值实例化。</span><span class="sxs-lookup"><span data-stu-id="e2961-135">However, note that <xref:System.Random> objects in processes running under different versions of the .NET Framework may return different series of random numbers even if they're instantiated with identical seed values.</span></span>  
  
 <span data-ttu-id="e2961-136">若要生成的随机数字的不同序列，你可以将种子值依赖于时间，从而生成具有每个新实例的不同系列<xref:System.Random>。</span><span class="sxs-lookup"><span data-stu-id="e2961-136">To produce different sequences of random numbers, you can make the seed value time-dependent, thereby producing a different series with each new instance of <xref:System.Random>.</span></span> <span data-ttu-id="e2961-137">参数化<xref:System.Random.%23ctor%28System.Int32%29>构造函数可以采用<xref:System.Int32>值基于计时周期数中的当前时间，而无参数<xref:System.Random.%23ctor>构造函数使用的系统时钟来生成其种子值。</span><span class="sxs-lookup"><span data-stu-id="e2961-137">The parameterized <xref:System.Random.%23ctor%28System.Int32%29> constructor can take an <xref:System.Int32> value based on the number of ticks in the current time, whereas the parameterless <xref:System.Random.%23ctor> constructor uses the system clock to generate its seed value.</span></span> <span data-ttu-id="e2961-138">但是，由于时钟具有有限的解决方法，使用无参数构造函数创建不同<xref:System.Random>关闭连续的对象创建随机数生成器生成相同序列的随机数字。</span><span class="sxs-lookup"><span data-stu-id="e2961-138">However, because the clock has finite resolution, using the parameterless constructor to create different <xref:System.Random> objects in close succession creates random number generators that produce identical sequences of random numbers.</span></span> <span data-ttu-id="e2961-139">下面的示例演示了两个<xref:System.Random>关闭连续中实例化的对象生成随机数的相同序列。</span><span class="sxs-lookup"><span data-stu-id="e2961-139">The following example illustrates how two <xref:System.Random> objects that are instantiated in close succession generate an identical series of random numbers.</span></span> <span data-ttu-id="e2961-140">在大多数 Windows 系统，<xref:System.Random>在相互之间的 15 毫秒内创建的对象很可能会有相同的种子值。</span><span class="sxs-lookup"><span data-stu-id="e2961-140">On most Windows systems, <xref:System.Random> objects created within 15 milliseconds of one another are likely to have identical seed values.</span></span>  
  
 [!code-cpp[System.Random#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/random1.cpp#1)]
 [!code-csharp[System.Random#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/Random1.cs#1)]
 [!code-vb[System.Random#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/Random1.vb#1)]  
  
 <span data-ttu-id="e2961-141">若要避免此问题，创建单个<xref:System.Random>对象而不是多个对象。</span><span class="sxs-lookup"><span data-stu-id="e2961-141">To avoid this problem, create a single <xref:System.Random> object instead of multiple objects.</span></span>  
  
<a name="Multiple"></a>   
## <a name="avoiding-multiple-instantiations"></a><span data-ttu-id="e2961-142">避免多个实例化</span><span class="sxs-lookup"><span data-stu-id="e2961-142">Avoiding multiple instantiations</span></span>  
 <span data-ttu-id="e2961-143">初始化两个随机数生成器在紧凑循环中或在短期内创建两个随机数生成器可以生成相同序列的随机数字。</span><span class="sxs-lookup"><span data-stu-id="e2961-143">Initializing two random number generators in a tight loop or in rapid succession creates two random number generators that can produce identical sequences of random numbers.</span></span> <span data-ttu-id="e2961-144">在大多数情况下，这不是开发人员的意图并会导致性能问题，因为实例化和初始化的随机数生成器是一个代价相对较大的过程。</span><span class="sxs-lookup"><span data-stu-id="e2961-144">In most cases, this is not the developer's intent and can lead to performance issues, because instantiating and initializing a random number generator is a relatively expensive process.</span></span>  
  
 <span data-ttu-id="e2961-145">同时若要提高性能并避免无意中创建单独生成相同的数字序列的随机数字生成器，我们建议你创建一个<xref:System.Random>对象随着时间推移，而不是创建生成许多随机数新<xref:System.Random>对象生成一个随机数。</span><span class="sxs-lookup"><span data-stu-id="e2961-145">Both to improve performance and to avoid inadvertently creating separate random number generators that generate identical numeric sequences, we recommend that you create one <xref:System.Random> object to generate many random numbers over time, instead of creating new <xref:System.Random> objects to generate one random number.</span></span>  
  
 <span data-ttu-id="e2961-146">但是，<xref:System.Random>类不是线程安全。</span><span class="sxs-lookup"><span data-stu-id="e2961-146">However, the <xref:System.Random> class isn't thread safe.</span></span> <span data-ttu-id="e2961-147">如果调用<xref:System.Random>方法从多个线程，请遵循下一节所述的准则。</span><span class="sxs-lookup"><span data-stu-id="e2961-147">If you call <xref:System.Random> methods from multiple threads, follow the guidelines discussed in the next section.</span></span>  
  
<a name="ThreadSafety"></a>   
## <a name="the-systemrandom-class-and-thread-safety"></a><span data-ttu-id="e2961-148">System.Random 类和线程安全</span><span class="sxs-lookup"><span data-stu-id="e2961-148">The System.Random class and thread safety</span></span>  
 <span data-ttu-id="e2961-149">而不是实例化单个<xref:System.Random>对象，我们建议你创建单个<xref:System.Random>实例生成你的应用程序所需的所有随机数。</span><span class="sxs-lookup"><span data-stu-id="e2961-149">Instead of instantiating individual <xref:System.Random> objects, we recommend that you create a single <xref:System.Random> instance to generate all the random numbers needed by your app.</span></span> <span data-ttu-id="e2961-150">但是，<xref:System.Random>对象不是线程安全。</span><span class="sxs-lookup"><span data-stu-id="e2961-150">However, <xref:System.Random> objects are not thread safe.</span></span> <span data-ttu-id="e2961-151">如果你的应用调用<xref:System.Random>从多个线程的方法，你必须使用的同步对象以确保只有一个线程可以访问一次的随机数生成器。</span><span class="sxs-lookup"><span data-stu-id="e2961-151">If your app calls <xref:System.Random> methods from multiple threads, you must use a synchronization object to ensure that only one thread can access the random number generator at a time.</span></span> <span data-ttu-id="e2961-152">如果你不确保<xref:System.Random>以线程安全的方式访问对象时，对返回随机数的方法的调用返回 0。</span><span class="sxs-lookup"><span data-stu-id="e2961-152">If you don't ensure that the <xref:System.Random> object is accessed in a thread-safe way, calls to methods that return random numbers return 0.</span></span>  
  
 <span data-ttu-id="e2961-153">下面的示例使用 C#[锁定语句](~/docs/csharp/language-reference/keywords/lock-statement.md)和 Visual Basic [SyncLock 语句](~/docs/visual-basic/language-reference/statements/synclock-statement.md)以确保单个随机数生成器由 11 线程访问以线程安全的方式。</span><span class="sxs-lookup"><span data-stu-id="e2961-153">The following example uses the C# [lock Statement](~/docs/csharp/language-reference/keywords/lock-statement.md) and the Visual Basic [SyncLock statement](~/docs/visual-basic/language-reference/statements/synclock-statement.md) to ensure that a single random number generator is accessed by 11 threads in a thread-safe manner.</span></span> <span data-ttu-id="e2961-154">每个线程生成 200 万个随机数字、 对生成的随机数字的数量进行计数和计算其总和，并执行完后，然后更新的所有线程的总数。</span><span class="sxs-lookup"><span data-stu-id="e2961-154">Each thread generates 2 million random numbers, counts the number of random numbers generated and calculates their sum, and then updates the totals for all threads when it finishes executing.</span></span>  
  
 [!code-cpp[System.Random#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/threadsafeex1.cpp#3)]
 [!code-csharp[System.Random#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/threadsafeex1.cs#3)]
 [!code-vb[System.Random#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/threadsafeex1.vb#3)]  
  
 <span data-ttu-id="e2961-155">该示例通过以下方式将确保线程安全性：</span><span class="sxs-lookup"><span data-stu-id="e2961-155">The example ensures thread-safety in the following ways:</span></span>  
  
-   <span data-ttu-id="e2961-156"><xref:System.ThreadStaticAttribute>属性用于定义用于跟踪生成的随机数字和其总和为每个线程的总数的线程本地变量。</span><span class="sxs-lookup"><span data-stu-id="e2961-156">The <xref:System.ThreadStaticAttribute> attribute is used to define thread-local variables that track the total number of random numbers generated and their sum for each thread.</span></span>  
  
-   <span data-ttu-id="e2961-157">锁 ( `lock` C# 中的语句和`SyncLock`在 Visual Basic 中的语句) 保护对变量的总计数和生成在所有线程上的所有随机数字之和的访问。</span><span class="sxs-lookup"><span data-stu-id="e2961-157">A lock (the `lock` statement in C# and the `SyncLock` statement in Visual Basic) protects access to the variables for the total count and sum of all random numbers generated on all threads.</span></span>  
  
-   <span data-ttu-id="e2961-158">信号量 (<xref:System.Threading.CountdownEvent>对象) 用于确保主线程阻塞，直到所有其他线程完成执行。</span><span class="sxs-lookup"><span data-stu-id="e2961-158">A semaphore (the <xref:System.Threading.CountdownEvent> object) is used to ensure that the main thread blocks until all other threads complete execution.</span></span>  
  
-   <span data-ttu-id="e2961-159">该示例将检查是否随机数生成器已损坏通过确定是否对随机数字生成方法的两个连续调用返回 0。</span><span class="sxs-lookup"><span data-stu-id="e2961-159">The example checks whether the random number generator has become corrupted by determining whether two consecutive calls to random number generation methods return 0.</span></span> <span data-ttu-id="e2961-160">如果检测到损坏时，该示例使用<xref:System.Threading.CancellationTokenSource>对象发出信号，应取消所有线程。</span><span class="sxs-lookup"><span data-stu-id="e2961-160">If corruption is detected, the example uses the <xref:System.Threading.CancellationTokenSource> object to signal that all threads should be canceled.</span></span>  
  
-   <span data-ttu-id="e2961-161">在生成之前每个随机数字，每个线程检查的状态<xref:System.Threading.CancellationToken>对象。</span><span class="sxs-lookup"><span data-stu-id="e2961-161">Before generating each random number, each thread checks the state of the <xref:System.Threading.CancellationToken> object.</span></span> <span data-ttu-id="e2961-162">如果请求取消，则该示例将调用<xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType>方法来取消线程。</span><span class="sxs-lookup"><span data-stu-id="e2961-162">If cancellation is requested, the example calls the <xref:System.Threading.CancellationToken.ThrowIfCancellationRequested%2A?displayProperty=nameWithType> method to cancel the thread.</span></span>  
  
 <span data-ttu-id="e2961-163">下面的示例是第一个，相同，但它使用<xref:System.Threading.Tasks.Task>对象和而不是 lambda 表达式<xref:System.Threading.Thread>对象。</span><span class="sxs-lookup"><span data-stu-id="e2961-163">The following example is identical to the first, except that it uses a <xref:System.Threading.Tasks.Task> object and a lambda expression instead of <xref:System.Threading.Thread> objects.</span></span>  
  
 [!code-csharp[System.Random#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/threadsafeex2.cs#4)]
 [!code-vb[System.Random#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/threadsafeex2.vb#4)]  
  
 <span data-ttu-id="e2961-164">它在以下方面不同于第一个示例：</span><span class="sxs-lookup"><span data-stu-id="e2961-164">It differs from the first example in the following ways:</span></span>  
  
-   <span data-ttu-id="e2961-165">跟踪生成的随机数字数和每个任务中的其结果相加值的变量仅用于该任务，因此无需使用<xref:System.ThreadStaticAttribute>属性。</span><span class="sxs-lookup"><span data-stu-id="e2961-165">The variables to keep track of the number of random numbers generated and their sum in each task are local to the task, so there is no need to use the <xref:System.ThreadStaticAttribute> attribute.</span></span>  
  
-   <span data-ttu-id="e2961-166">静态<xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType>方法用于确保在所有任务都完成之前，不会完成主线程。</span><span class="sxs-lookup"><span data-stu-id="e2961-166">The static <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> method is used to ensure that the main thread doesn't complete before all tasks have finished.</span></span> <span data-ttu-id="e2961-167">有关无需<xref:System.Threading.CountdownEvent>对象。</span><span class="sxs-lookup"><span data-stu-id="e2961-167">There is no need for the <xref:System.Threading.CountdownEvent> object.</span></span>  
  
-   <span data-ttu-id="e2961-168">从任务取消生成的异常显示在<xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="e2961-168">The exception that results from task cancellation is surfaced in the <xref:System.Threading.Tasks.Task.WaitAll%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="e2961-169">在前面的示例中，它是由每个线程进行处理。</span><span class="sxs-lookup"><span data-stu-id="e2961-169">In the previous example, it is handled by each thread.</span></span>  
  
<a name="Functionality"></a>   
## <a name="generating-different-types-of-random-numbers"></a><span data-ttu-id="e2961-170">生成不同类型的随机数字</span><span class="sxs-lookup"><span data-stu-id="e2961-170">Generating different types of random numbers</span></span>  
 <span data-ttu-id="e2961-171">随机数生成器提供了让你生成随机数的以下类型的方法：</span><span class="sxs-lookup"><span data-stu-id="e2961-171">The random number generator provides methods that let you generate the following kinds of random numbers:</span></span>  
  
-   <span data-ttu-id="e2961-172">一系列<xref:System.Byte>值。</span><span class="sxs-lookup"><span data-stu-id="e2961-172">A series of <xref:System.Byte> values.</span></span> <span data-ttu-id="e2961-173">通过将传递数组初始化为你想要返回到的方法的元素的数目确定字节值的数目<xref:System.Random.NextBytes%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e2961-173">You determine the number of byte values by passing an array initialized to the number of elements you want the method to return to the <xref:System.Random.NextBytes%2A> method.</span></span> <span data-ttu-id="e2961-174">下面的示例生成 20 个字节。</span><span class="sxs-lookup"><span data-stu-id="e2961-174">The following example generates 20 bytes.</span></span>  
  
     [!code-cpp[System.Random#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/nextbytes1.cpp#5)]
     [!code-csharp[System.Random#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/nextbytes1.cs#5)]
     [!code-vb[System.Random#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/nextbytes1.vb#5)]  
  
-   <span data-ttu-id="e2961-175">单个的整数。</span><span class="sxs-lookup"><span data-stu-id="e2961-175">A single integer.</span></span> <span data-ttu-id="e2961-176">你可以选择是否想从 0 到最大值的整数 (<xref:System.Int32.MaxValue?displayProperty=nameWithType> – 1) 通过调用<xref:System.Random.Next>方法、 0 到通过调用特定值之间的整数<xref:System.Random.Next%28System.Int32%29>方法或通过调用的值的范围之内的整数<xref:System.Random.Next%28System.Int32%2CSystem.Int32%29>方法。</span><span class="sxs-lookup"><span data-stu-id="e2961-176">You can choose whether you want an integer from 0 to a maximum value (<xref:System.Int32.MaxValue?displayProperty=nameWithType> – 1) by calling the <xref:System.Random.Next> method, an integer between 0 and a specific value by calling the <xref:System.Random.Next%28System.Int32%29> method, or an integer within a range of values by calling the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> method.</span></span> <span data-ttu-id="e2961-177">参数化的重载中的指定最大值是独占的;也就是说，生成的实际最大数目是小于指定值。</span><span class="sxs-lookup"><span data-stu-id="e2961-177">In the parameterized overloads, the specified maximum value is exclusive; that is, the actual maximum number generated is one less than the specified value.</span></span>  
  
     <span data-ttu-id="e2961-178">下面的示例调用<xref:System.Random.Next%28System.Int32%2CSystem.Int32%29>方法生成 10-10 到 10 之间的随机数。</span><span class="sxs-lookup"><span data-stu-id="e2961-178">The following example calls the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> method to generate 10 random numbers between -10 and 10.</span></span> <span data-ttu-id="e2961-179">请注意，该方法的第二个自变量指定的方法返回的随机值的范围不含上限。</span><span class="sxs-lookup"><span data-stu-id="e2961-179">Note that the second argument to the method specifies the exclusive upper bound of the range of random values returned by the method.</span></span> <span data-ttu-id="e2961-180">换而言之，该方法可以返回一个的最大整数少于此值。</span><span class="sxs-lookup"><span data-stu-id="e2961-180">In other words, the largest integer that the method can return is one less than this value.</span></span>  
  
     [!code-cpp[System.Random#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/nextex1.cpp#6)]
     [!code-csharp[System.Random#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/nextex1.cs#6)]
     [!code-vb[System.Random#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/nextex1.vb#6)]  
  
-   <span data-ttu-id="e2961-181">介于 0.0 和小于 1.0 通过调用的单个浮点值<xref:System.Random.NextDouble%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e2961-181">A single floating-point value from 0.0 to less than 1.0 by calling the <xref:System.Random.NextDouble%2A> method.</span></span> <span data-ttu-id="e2961-182">方法返回的随机数字含上限为 1，因此其实际的上限是 0.99999999999999978。</span><span class="sxs-lookup"><span data-stu-id="e2961-182">The exclusive upper bound of the random number returned by the method is 1, so its actual upper bound is 0.99999999999999978.</span></span> <span data-ttu-id="e2961-183">下面的示例生成 10 个随机浮点数。</span><span class="sxs-lookup"><span data-stu-id="e2961-183">The following example generates 10 random floating-point numbers.</span></span>  
  
     [!code-cpp[System.Random#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/nextdoubleex1.cpp#7)]
     [!code-csharp[System.Random#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/nextdoubleex1.cs#7)]
     [!code-vb[System.Random#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/nextdoubleex1.vb#7)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="e2961-184"><xref:System.Random.Next%28System.Int32%2CSystem.Int32%29>方法允许你指定的返回随机数的范围。</span><span class="sxs-lookup"><span data-stu-id="e2961-184">The <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> method allows you to specify the range of the returned random number.</span></span> <span data-ttu-id="e2961-185">但是，`maxValue`参数，指定的上限范围返回数字，该参数为排他，不含值。</span><span class="sxs-lookup"><span data-stu-id="e2961-185">However, the `maxValue` parameter, which specifies the upper range returned number, is an exclusive, not an inclusive, value.</span></span> <span data-ttu-id="e2961-186">这意味着如果方法调用`Next(0, 100)`返回一个值介于 0 和 99 之间，之间并不介于 0 和 100 之间。</span><span class="sxs-lookup"><span data-stu-id="e2961-186">This means that the method call `Next(0, 100)` returns a value between 0 and 99, and not between 0 and 100.</span></span>  
  
 <span data-ttu-id="e2961-187">你还可以使用<xref:System.Random>任务，如生成的类[随机转换值](#Boolean)、 生成[随机浮点值的范围以外 0 到 1](#Floats)，生成[随机 64 位整数](#Long)，和[随机来自数组或集合中检索的唯一元素](#UniqueArray)。</span><span class="sxs-lookup"><span data-stu-id="e2961-187">You can also use the <xref:System.Random> class for such tasks as generating [random T:System.Boolean values](#Boolean), generating [random floating point values with a range other than 0 to 1](#Floats), generating [random 64-bit integers](#Long), and [randomly retrieving a unique element from an array or collection](#UniqueArray).</span></span> <span data-ttu-id="e2961-188">有关这些和其他常见任务，请参阅[如何使用到 System.Random...](#Operations)</span><span class="sxs-lookup"><span data-stu-id="e2961-188">For these and other common tasks, see the [How do you use System.Random to…](#Operations)</span></span> <span data-ttu-id="e2961-189">部分。</span><span class="sxs-lookup"><span data-stu-id="e2961-189">section.</span></span>  
  
<a name="Overriding"></a>   
## <a name="substituting-your-own-algorithm"></a><span data-ttu-id="e2961-190">替换为您自己的算法</span><span class="sxs-lookup"><span data-stu-id="e2961-190">Substituting your own algorithm</span></span>  
 <span data-ttu-id="e2961-191">你可以通过继承来实现你自己随机数生成器<xref:System.Random>类并提供你随机数生成算法。</span><span class="sxs-lookup"><span data-stu-id="e2961-191">You can implement your own random number generator by inheriting from the <xref:System.Random> class and supplying your random number generation algorithm.</span></span> <span data-ttu-id="e2961-192">若要提供您自己的算法，必须重写<xref:System.Random.Sample%2A>方法，实现的随机数生成算法。</span><span class="sxs-lookup"><span data-stu-id="e2961-192">To supply your own algorithm, you must override the <xref:System.Random.Sample%2A> method, which implements the random number generation algorithm.</span></span> <span data-ttu-id="e2961-193">你还应重写<xref:System.Random.Next>， <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29>，和<xref:System.Random.NextBytes%2A>方法以确保它们调用重写<xref:System.Random.Sample%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e2961-193">You should also override the <xref:System.Random.Next>, <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29>, and <xref:System.Random.NextBytes%2A> methods to ensure that they call your overridden <xref:System.Random.Sample%2A> method.</span></span> <span data-ttu-id="e2961-194">无需重写<xref:System.Random.Next%28System.Int32%29>和<xref:System.Random.NextDouble%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e2961-194">You don't have to override the <xref:System.Random.Next%28System.Int32%29> and <xref:System.Random.NextDouble%2A> methods.</span></span>  
  
 <span data-ttu-id="e2961-195">有关示例，派生自<xref:System.Random>类并修改其默认伪随机数生成器，请参阅<xref:System.Random.Sample%2A>引用页。</span><span class="sxs-lookup"><span data-stu-id="e2961-195">For an example that derives from the <xref:System.Random> class and modifies its default pseudo-random number generator, see the <xref:System.Random.Sample%2A> reference page.</span></span>  
  
<a name="Operations"></a>   
## <a name="how-do-you-use-systemrandom-to"></a><span data-ttu-id="e2961-196">如何使用到 System.Random...</span><span class="sxs-lookup"><span data-stu-id="e2961-196">How do you use System.Random to…</span></span>  
 <span data-ttu-id="e2961-197">下列各节讨论，并提供几种你可能想要在应用中使用的随机数的示例代码。</span><span class="sxs-lookup"><span data-stu-id="e2961-197">The following sections discuss and provide sample code for some of the ways you might want to use random numbers in your app.</span></span>  
  
<a name="Same"></a>   
### <a name="retrieve-the-same-sequence-of-random-values"></a><span data-ttu-id="e2961-198">检索相同的随机值序列</span><span class="sxs-lookup"><span data-stu-id="e2961-198">Retrieve the same sequence of random values</span></span>  
 <span data-ttu-id="e2961-199">有时你想要在软件测试方案和玩游戏中生成相同的随机数字序列。</span><span class="sxs-lookup"><span data-stu-id="e2961-199">Sometimes you want to generate the same sequence of random numbers in software test scenarios and in game playing.</span></span> <span data-ttu-id="e2961-200">使用相同的随机数字序列进行测试，可检测回归，并确认 bug 修复。</span><span class="sxs-lookup"><span data-stu-id="e2961-200">Testing with the same sequence of random numbers allows you to detect regressions and confirm bug fixes.</span></span> <span data-ttu-id="e2961-201">在游戏中使用相同的随机数字序列，可重播以前的游戏。</span><span class="sxs-lookup"><span data-stu-id="e2961-201">Using the same sequence of random number in games allows you to replay previous games.</span></span>  
  
 <span data-ttu-id="e2961-202">你可以通过提供相同的种子值生成相同的随机数字序列<xref:System.Random.%23ctor%28System.Int32%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="e2961-202">You can generate the same sequence of random numbers by providing the same seed value to the <xref:System.Random.%23ctor%28System.Int32%29> constructor.</span></span> <span data-ttu-id="e2961-203">种子值提供的伪随机数生成算法的起始值。</span><span class="sxs-lookup"><span data-stu-id="e2961-203">The seed value provides a starting value for the pseudo-random number generation algorithm.</span></span> <span data-ttu-id="e2961-204">下面的示例使用 100100 作为任意种子值来实例化<xref:System.Random>对象，显示 20 个的随机浮点值，并且仍然存在种子值。</span><span class="sxs-lookup"><span data-stu-id="e2961-204">The following example uses 100100 as an arbitrary seed value to instantiate the <xref:System.Random> object, displays 20 random floating-point values, and persists the seed value.</span></span> <span data-ttu-id="e2961-205">它然后还原种子值、 实例化新的随机数字生成器，并显示相同的 20 个随机浮点值。</span><span class="sxs-lookup"><span data-stu-id="e2961-205">It then restores the seed value, instantiates a new random number generator, and displays the same 20 random floating-point values.</span></span>  <span data-ttu-id="e2961-206">请注意，是否在不同版本的.NET Framework 上运行，该示例可能生成不同序列的随机数字。</span><span class="sxs-lookup"><span data-stu-id="e2961-206">Note that the example may produce different sequences of random numbers if run on different versions of the .NET Framework.</span></span>  
  
 [!code-cpp[System.Random#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/same1.cpp#12)]
 [!code-csharp[System.Random#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/same1.cs#12)]
 [!code-vb[System.Random#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/same1.vb#12)]  
  
<a name="Unique"></a>   
### <a name="retrieve-unique-sequences-of-random-numbers"></a><span data-ttu-id="e2961-207">检索随机数的唯一的序列</span><span class="sxs-lookup"><span data-stu-id="e2961-207">Retrieve unique sequences of random numbers</span></span>  
 <span data-ttu-id="e2961-208">提供的实例的不同的种子值<xref:System.Random>类将导致每个随机数生成器来生成的值不同的序列。</span><span class="sxs-lookup"><span data-stu-id="e2961-208">Providing different seed values to instances of the <xref:System.Random> class causes each random number generator to produce a different sequence of values.</span></span> <span data-ttu-id="e2961-209">你可以提供的种子值显式通过调用<xref:System.Random.%23ctor%28System.Int32%29>构造函数，或隐式调用<xref:System.Random.%23ctor>构造函数。</span><span class="sxs-lookup"><span data-stu-id="e2961-209">You can provide a seed value either explicitly by calling the <xref:System.Random.%23ctor%28System.Int32%29> constructor, or implicitly by calling the <xref:System.Random.%23ctor> constructor.</span></span> <span data-ttu-id="e2961-210">大多数开发人员调用使用系统时钟的无参数构造函数。</span><span class="sxs-lookup"><span data-stu-id="e2961-210">Most developers call the parameterless constructor, which uses the system clock.</span></span> <span data-ttu-id="e2961-211">下面的示例使用这种方法来实例化两个<xref:System.Random>实例。</span><span class="sxs-lookup"><span data-stu-id="e2961-211">The following example uses this approach to instantiate two <xref:System.Random> instances.</span></span> <span data-ttu-id="e2961-212">每个实例显示一系列的 10 个随机整数。</span><span class="sxs-lookup"><span data-stu-id="e2961-212">Each instance displays a series of 10 random integers.</span></span>  
  
 [!code-cpp[System.Random#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/unique.cpp#13)]
 [!code-csharp[System.Random#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/unique.cs#13)]
 [!code-vb[System.Random#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/unique.vb#13)]  
  
 <span data-ttu-id="e2961-213">但是，由于其有限的解决方法，系统时钟不会检测不到大约 15 毫秒的时间差异。</span><span class="sxs-lookup"><span data-stu-id="e2961-213">However, because of its finite resolution, the system clock doesn't detect time differences that are less than approximately 15 milliseconds.</span></span> <span data-ttu-id="e2961-214">因此，如果你的代码调用<xref:System.Random.%23ctor>要实例化两个重载<xref:System.Random>中连续，你可能会无意中提供的对象具有相同的种子值的对象。</span><span class="sxs-lookup"><span data-stu-id="e2961-214">Therefore, if your code calls the <xref:System.Random.%23ctor> overload to instantiate two <xref:System.Random> objects in succession, you might inadvertently be providing the objects with identical seed values.</span></span> <span data-ttu-id="e2961-215">若要查看此上一示例中，注释掉<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>方法调用时，和编译并再次运行该示例。</span><span class="sxs-lookup"><span data-stu-id="e2961-215">To see this in the previous example, comment out the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method call, and compile and run the example again.</span></span>  
  
 <span data-ttu-id="e2961-216">若要防止此类情况发生，我们建议您实例化单个<xref:System.Random>对象而不是多个快照。</span><span class="sxs-lookup"><span data-stu-id="e2961-216">To prevent this from happening, we recommend that you instantiate a single <xref:System.Random> object rather than multiple ones.</span></span> <span data-ttu-id="e2961-217">但是，由于<xref:System.Random>不是线程安全的你必须使用某些同步设备，如果你访问<xref:System.Random>实例从多个线程; 有关详细信息，请参阅[随机的类和线程安全](#ThreadSafety)前面的这主题。</span><span class="sxs-lookup"><span data-stu-id="e2961-217">However, since <xref:System.Random> isn't thread safe, you must use some synchronization device if you access a <xref:System.Random> instance from multiple threads; for more information, see [The Random class and thread safety](#ThreadSafety) earlier in this topic.</span></span> <span data-ttu-id="e2961-218">或者，可以使用延迟机制，如<xref:System.Threading.Thread.Sleep%2A>使用在前面的示例中，以确保实例化会超过 15 毫秒相隔的方法。</span><span class="sxs-lookup"><span data-stu-id="e2961-218">Alternately, you can use a delay mechanism, such as the <xref:System.Threading.Thread.Sleep%2A> method used in the previous example, to ensure that the instantiations occur more than 15 millisecond apart.</span></span>  
  
<a name="Range"></a>   
### <a name="retrieve-integers-in-a-specified-range"></a><span data-ttu-id="e2961-219">检索指定的范围内的整数</span><span class="sxs-lookup"><span data-stu-id="e2961-219">Retrieve integers in a specified range</span></span>  
 <span data-ttu-id="e2961-220">你可以通过调用来检索指定的范围内的整数<xref:System.Random.Next%28System.Int32%2CSystem.Int32%29>方法，可以指定你想要返回的随机数生成器的编号的上限和较低。</span><span class="sxs-lookup"><span data-stu-id="e2961-220">You can retrieve integers in a specified range by calling the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> method, which lets you specify both the lower and the upper bound of the numbers you'd like the random number generator to return.</span></span> <span data-ttu-id="e2961-221">上限为排他，不含值。</span><span class="sxs-lookup"><span data-stu-id="e2961-221">The upper bound is an exclusive, not an inclusive, value.</span></span> <span data-ttu-id="e2961-222">也就是说，不会包括在该方法返回的值的范围。</span><span class="sxs-lookup"><span data-stu-id="e2961-222">That is, it isn't included in the range of values returned by the method.</span></span> <span data-ttu-id="e2961-223">下面的示例使用此方法来生成-10 到 10 之间的随机整数。</span><span class="sxs-lookup"><span data-stu-id="e2961-223">The following example uses this method to generate random integers between -10 and 10.</span></span> <span data-ttu-id="e2961-224">请注意，它指定 11 中，这是一个大于所需的值，作为值的`maxValue`方法调用中的自变量。</span><span class="sxs-lookup"><span data-stu-id="e2961-224">Note that it specifies 11, which is one greater than the desired value, as the value of the `maxValue` argument in the method call.</span></span>  
  
 [!code-cpp[System.Random#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/range1.cpp#15)]
 [!code-csharp[System.Random#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/range1.cs#15)]
 [!code-vb[System.Random#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/range1.vb#15)]  
  
<a name="Digits"></a>   
### <a name="retrieve-integers-with-a-specified-number-of-digits"></a><span data-ttu-id="e2961-225">检索与指定位数的数字的整数</span><span class="sxs-lookup"><span data-stu-id="e2961-225">Retrieve integers with a specified number of digits</span></span>  
 <span data-ttu-id="e2961-226">你可以调用<xref:System.Random.Next%28System.Int32%2CSystem.Int32%29>方法来检索具有指定位数的数字的数字。</span><span class="sxs-lookup"><span data-stu-id="e2961-226">You can call the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> method to retrieve numbers with a specified number of digits.</span></span> <span data-ttu-id="e2961-227">例如，若要检索具有四个数字 （也就是说，范围为 1000年至 9999 的数字） 的数字，你调用<xref:System.Random.Next%28System.Int32%2CSystem.Int32%29>方法替换`minValue`值为 1000年和`maxValue`10000，如以下示例所示的值。</span><span class="sxs-lookup"><span data-stu-id="e2961-227">For example, to retrieve numbers with four digits (that is, numbers that range from 1000 to 9999), you call the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> method with a `minValue` value of 1000 and a `maxValue` value of 10000, as the following example shows.</span></span>  
  
 [!code-cpp[System.Random#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/range2.cpp#16)]
 [!code-csharp[System.Random#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/range2.cs#16)]
 [!code-vb[System.Random#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/range2.vb#16)]  
  
<a name="Floats"></a>   
### <a name="retrieve-floating-point-values-in-a-specified-range"></a><span data-ttu-id="e2961-228">检索指定范围中的浮点值</span><span class="sxs-lookup"><span data-stu-id="e2961-228">Retrieve floating-point values in a specified range</span></span>  
 <span data-ttu-id="e2961-229"><xref:System.Random.NextDouble%2A>方法返回随机浮点值的范围介于 0 到小于 1。</span><span class="sxs-lookup"><span data-stu-id="e2961-229">The <xref:System.Random.NextDouble%2A> method returns random floating-point values that range from 0 to less than 1.</span></span> <span data-ttu-id="e2961-230">但是，你通常将想要在另一个范围中生成随机值。</span><span class="sxs-lookup"><span data-stu-id="e2961-230">However, you'll often want to generate random values in some other range.</span></span>  
  
 <span data-ttu-id="e2961-231">如果所需值最小和最大值之间的间隔为 1 时，可以将所需的起始间隔和 0 之间的差异添加到返回的版本号<xref:System.Random.NextDouble%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e2961-231">If the interval between the minimum and maximum desired values is 1, you can add the difference between the desired starting interval and 0 to the number returned by the <xref:System.Random.NextDouble%2A> method.</span></span> <span data-ttu-id="e2961-232">下面的示例这样做是为了生成 10 个随机数字之间-1 和 0。</span><span class="sxs-lookup"><span data-stu-id="e2961-232">The following example does this to generate 10 random numbers between -1 and 0.</span></span>  
  
 [!code-cpp[System.Random#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/doublerange2.cpp#17)]
 [!code-csharp[System.Random#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/doublerange2.cs#17)]
 [!code-vb[System.Random#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/doublerange2.vb#17)]  
  
 <span data-ttu-id="e2961-233">要生成随机浮点数字，其下限为 0，但上限大于 1 （或者，对于负数，其下限为小于-1，上限为 0），再乘以非零值绑定的随机数字。</span><span class="sxs-lookup"><span data-stu-id="e2961-233">To generate random floating-point numbers whose lower bound is 0 but upper bound is greater than 1 (or, in the case of negative numbers, whose lower bound is less than -1 and upper bound is 0), multiply the random number by the non-zero bound.</span></span> <span data-ttu-id="e2961-234">下面的示例这样做是为了生成 20 亿个随机浮点数该范围从 0 到<xref:System.Int64.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e2961-234">The following example does this to generate 20 million random floating-point numbers that range from 0 to <xref:System.Int64.MaxValue?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e2961-235">在还显示的方法生成的随机值的分布。</span><span class="sxs-lookup"><span data-stu-id="e2961-235">In also displays the distribution of the random values generated by the method.</span></span>  
  
 [!code-cpp[System.Random#18](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/doublerange1.cpp#18)]
 [!code-csharp[System.Random#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/doublerange1.cs#18)]
 [!code-vb[System.Random#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/doublerange1.vb#18)]  
  
 <span data-ttu-id="e2961-236">若要生成两个的任意值之间的随机浮点数，如<xref:System.Random.Next%28System.Int32%2CSystem.Int32%29>方法不为整数，可使用以下公式：</span><span class="sxs-lookup"><span data-stu-id="e2961-236">To generate random floating-point numbers between two arbitrary values, like the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> method does for integers, use the following formula:</span></span>  
  
```csharp  
Random.NextDouble() * (maxValue – minValue) + minValue  
```  
  
 <span data-ttu-id="e2961-237">下面的示例为 11.0，从 10.0 生成范围的 100 万个随机数，并显示其分发。</span><span class="sxs-lookup"><span data-stu-id="e2961-237">The following example generates 1 million random numbers that range from 10.0 to 11.0, and displays their distribution.</span></span>  
  
 [!code-cpp[System.Random#19](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/doublerange3.cpp#19)]
 [!code-csharp[System.Random#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/doublerange3.cs#19)]
 [!code-vb[System.Random#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/doublerange3.vb#19)]  
  
<a name="Boolean"></a>   
### <a name="generate-random-boolean-values"></a><span data-ttu-id="e2961-238">生成随机的布尔值</span><span class="sxs-lookup"><span data-stu-id="e2961-238">Generate random Boolean values</span></span>  
 <span data-ttu-id="e2961-239"><xref:System.Random>类不提供生成的方法<xref:System.Boolean>值。</span><span class="sxs-lookup"><span data-stu-id="e2961-239">The <xref:System.Random> class doesn't provide methods that generate <xref:System.Boolean> values.</span></span> <span data-ttu-id="e2961-240">但是，你可以定义自己的类或方法来执行该操作。</span><span class="sxs-lookup"><span data-stu-id="e2961-240">However, you can define your own class or method to do that.</span></span> <span data-ttu-id="e2961-241">下面的示例定义了一个类`BooleanGenerator`，与一个方法， `NextBoolean`。</span><span class="sxs-lookup"><span data-stu-id="e2961-241">The following example defines a class, `BooleanGenerator`, with a single method, `NextBoolean`.</span></span> <span data-ttu-id="e2961-242">`BooleanGenerator`类存储<xref:System.Random>对象作为私有变量。</span><span class="sxs-lookup"><span data-stu-id="e2961-242">The `BooleanGenerator` class stores a <xref:System.Random> object as a private variable.</span></span> <span data-ttu-id="e2961-243">`NextBoolean`方法调用<xref:System.Random.Next%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType>方法，并将传递到结果<xref:System.Convert.ToBoolean%28System.Int32%29?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="e2961-243">The `NextBoolean` method calls the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method and passes the result to the <xref:System.Convert.ToBoolean%28System.Int32%29?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="e2961-244">请注意，使用 2 作为参数来指定随机数的上限。</span><span class="sxs-lookup"><span data-stu-id="e2961-244">Note that 2 is used as the argument to specify the upper bound of the random number.</span></span> <span data-ttu-id="e2961-245">由于这是独占的值，方法调用将返回 0 或 1。</span><span class="sxs-lookup"><span data-stu-id="e2961-245">Since this is an exclusive value, the method call returns either 0 or 1.</span></span>  
  
 [!code-cpp[System.Random#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/booleans1.cpp#8)]
 [!code-csharp[System.Random#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/booleans1.cs#8)]
 [!code-vb[System.Random#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/booleans1.vb#8)]  
  
 <span data-ttu-id="e2961-246">而不是创建一个单独的类来生成随机<xref:System.Boolean>值，则无法只需定义一种方法。</span><span class="sxs-lookup"><span data-stu-id="e2961-246">Instead of creating a separate class to generate random <xref:System.Boolean> values, the example could simply have defined a single method.</span></span> <span data-ttu-id="e2961-247">在此情况下，但是，<xref:System.Random>对象应已定义为一个类级变量来避免实例化一个新<xref:System.Random>中每个方法调用的实例。</span><span class="sxs-lookup"><span data-stu-id="e2961-247">In that case, however, the <xref:System.Random> object should have been defined as a class-level variable to avoid instantiating a new <xref:System.Random> instance in each method call.</span></span> <span data-ttu-id="e2961-248">在 Visual Basic 中，随机实例可以定义为[静态](~/docs/visual-basic/language-reference/modifiers/static.md)变量中`NextBoolean`方法。</span><span class="sxs-lookup"><span data-stu-id="e2961-248">In Visual Basic, the Random instance can be defined as a [Static](~/docs/visual-basic/language-reference/modifiers/static.md) variable in the `NextBoolean` method.</span></span>  <span data-ttu-id="e2961-249">下面的示例提供实现。</span><span class="sxs-lookup"><span data-stu-id="e2961-249">The following example provides an implementation.</span></span>  
  
 [!code-cpp[System.Random#20](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/booleans2.cpp#20)]
 [!code-csharp[System.Random#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/booleans2.cs#20)]
 [!code-vb[System.Random#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/booleans2.vb#20)]  
  
<a name="Long"></a>   
### <a name="generate-random-64-bit-integers"></a><span data-ttu-id="e2961-250">生成随机的 64 位整数</span><span class="sxs-lookup"><span data-stu-id="e2961-250">Generate random 64-bit integers</span></span>  
 <span data-ttu-id="e2961-251">重载<xref:System.Random.Next%2A>方法返回 32 位整数。</span><span class="sxs-lookup"><span data-stu-id="e2961-251">The overloads of the <xref:System.Random.Next%2A> method return 32-bit integers.</span></span> <span data-ttu-id="e2961-252">但是，在某些情况下，你可能想要使用 64 位整数。</span><span class="sxs-lookup"><span data-stu-id="e2961-252">However, in some cases, you might want to work with 64-bit integers.</span></span> <span data-ttu-id="e2961-253">你可以按如下所示进行操作：</span><span class="sxs-lookup"><span data-stu-id="e2961-253">You can do this as follows:</span></span>  
  
1.  <span data-ttu-id="e2961-254">调用<xref:System.Random.NextDouble%2A>方法来检索双精度浮点点值。</span><span class="sxs-lookup"><span data-stu-id="e2961-254">Call the <xref:System.Random.NextDouble%2A> method to retrieve a double-precision floating point value.</span></span>  
  
2.  <span data-ttu-id="e2961-255">该值相乘<xref:System.Int64.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e2961-255">Multiply that value by <xref:System.Int64.MaxValue?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="e2961-256">下面的示例使用该技术来生成 20 亿个随机长整数，并对其进行分类 10 个相等组中。</span><span class="sxs-lookup"><span data-stu-id="e2961-256">The following example uses this technique to generate 20 million random long integers and categorizes them in 10 equal groups.</span></span> <span data-ttu-id="e2961-257">它随后通过计算从 0 到每个组中的数量计算分布的随机数字<xref:System.Int64.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e2961-257">It then evaluates the distribution of the random numbers by counting the number in each group from 0 to <xref:System.Int64.MaxValue?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e2961-258">如示例输出所示，公式的长整数范围更多或更少均匀地分布的数字。</span><span class="sxs-lookup"><span data-stu-id="e2961-258">As the output from the example shows, the numbers are distributed more or less equally through the range of a long integer.</span></span>  
  
 [!code-cpp[System.Random#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/long1.cpp#14)]
 [!code-csharp[System.Random#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/long1.cs#14)]
 [!code-vb[System.Random#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/long1.vb#14)]  
  
 <span data-ttu-id="e2961-259">使用位操作不会生成真正的随机数字另一种方法。</span><span class="sxs-lookup"><span data-stu-id="e2961-259">An alternative technique that uses bit manipulation does not generate truly random numbers.</span></span> <span data-ttu-id="e2961-260">此方法调用<xref:System.Random.Next>生成两个整数、 左移一个由 32 位和 or 的情况下在一起。</span><span class="sxs-lookup"><span data-stu-id="e2961-260">This technique calls <xref:System.Random.Next> to generate two integers, left-shifts one by 32 bits, and ORs them together.</span></span> <span data-ttu-id="e2961-261">此方法具有两个限制：</span><span class="sxs-lookup"><span data-stu-id="e2961-261">This technique has two limitations:</span></span>  
  
1.  <span data-ttu-id="e2961-262">由于第 31 位是符号位，在第 31 位所产生的长整数的值始终是 0。</span><span class="sxs-lookup"><span data-stu-id="e2961-262">Because bit 31 is the sign bit, the value in bit 31 of the resulting long integer is always 0.</span></span>  <span data-ttu-id="e2961-263">这可以通过生成随机的 0 或 1，左移 31 位为单位和监视寻址它与原始随机的长整型。</span><span class="sxs-lookup"><span data-stu-id="e2961-263">This can be addressed by generating a random 0 or 1, left-shifting it 31 bits, and ORing it with the original random long integer.</span></span>  
  
2.  <span data-ttu-id="e2961-264">更严格来讲，因为返回的值的概率<xref:System.Random.Next>将为 0，则将随机数字，如果有几个范围 0x0 0x00000000FFFFFFFF 中。</span><span class="sxs-lookup"><span data-stu-id="e2961-264">More seriously, because the probability that the value returned by <xref:System.Random.Next> will be 0, there will be few if any random numbers in the range 0x0-0x00000000FFFFFFFF.</span></span>  
  
<a name="Bytes"></a>   
### <a name="retrieve-bytes-in-a-specified-range"></a><span data-ttu-id="e2961-265">检索指定范围中的字节数</span><span class="sxs-lookup"><span data-stu-id="e2961-265">Retrieve bytes in a specified range</span></span>  
 <span data-ttu-id="e2961-266">重载<xref:System.Random.Next%2A>方法允许你指定的随机数字范围但<xref:System.Random.NextBytes%2A>方法不执行。</span><span class="sxs-lookup"><span data-stu-id="e2961-266">The overloads of the <xref:System.Random.Next%2A> method allow you to specify the range of random numbers, but the <xref:System.Random.NextBytes%2A> method does not.</span></span> <span data-ttu-id="e2961-267">下面的示例实现`NextBytes`允许您指定的返回的字节范围的方法。</span><span class="sxs-lookup"><span data-stu-id="e2961-267">The following example implements a `NextBytes` method that lets you specify the range of the returned bytes.</span></span> <span data-ttu-id="e2961-268">它定义`Random2`派生自的类<xref:System.Random>和重载其`NextBytes`方法。</span><span class="sxs-lookup"><span data-stu-id="e2961-268">It defines a `Random2` class that derives from <xref:System.Random> and overloads its `NextBytes` method.</span></span>  
  
 [!code-cpp[System.Random#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/bytes1.cpp#9)]
 [!code-csharp[System.Random#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/bytes1.cs#9)]
 [!code-vb[System.Random#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/bytes1.vb#9)]  
  
 <span data-ttu-id="e2961-269">`NextBytes(Byte[], Byte, Byte)`方法包装对的调用<xref:System.Random.Next%28System.Int32%2CSystem.Int32%29>方法并指定最小值和一个大于最大值 (在这种情况下，0 和 101) 我们希望返回的字节数组中。</span><span class="sxs-lookup"><span data-stu-id="e2961-269">The `NextBytes(Byte[], Byte, Byte)` method wraps a call to the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> method and specifies the minimum value and one greater than the maximum value (in this case, 0 and 101) that we want returned in the byte array.</span></span> <span data-ttu-id="e2961-270">因为我们可以确保返回的整数值<xref:System.Random.Next%2A>方法进入的范围<xref:System.Byte>数据类型，我们可以安全地将其强制转换 （在 C# 中) 或将它们 （在 Visual Basic 中) 从整数转换为字节。</span><span class="sxs-lookup"><span data-stu-id="e2961-270">Because we are sure that the integer values returned by the <xref:System.Random.Next%2A> method are within the range of the <xref:System.Byte> data type, we can safely cast them (in C#) or convert them (in Visual Basic) from integers to bytes.</span></span>  
  
<a name="Array"></a>   
### <a name="retrieve-an-element-from-an-array-or-collection-at-random"></a><span data-ttu-id="e2961-271">随机从数组或集合检索某个元素</span><span class="sxs-lookup"><span data-stu-id="e2961-271">Retrieve an element from an array or collection at random</span></span>  
 <span data-ttu-id="e2961-272">随机数通常用作要从数组或集合中检索值的索引。</span><span class="sxs-lookup"><span data-stu-id="e2961-272">Random numbers often serve as indexes to retrieve values from arrays or collections.</span></span> <span data-ttu-id="e2961-273">若要检索的随机索引值，你可以调用<xref:System.Random.Next%28System.Int32%2CSystem.Int32%29>方法，并使用的下限数组的值作为其`minValue`自变量和一个大于上限的数组的值作为其`maxValue`自变量。</span><span class="sxs-lookup"><span data-stu-id="e2961-273">To retrieve a random index value, you can call the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> method, and use the lower bound of the array as the value of its `minValue` argument and one greater than the upper bound of the array as the value of its `maxValue` argument.</span></span> <span data-ttu-id="e2961-274">从零开始的数组，它等效于其<xref:System.Array.Length%2A>属性，或一个返回的值大于<xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="e2961-274">For a zero-based array, this is equivalent to its <xref:System.Array.Length%2A> property, or one greater than the value returned by the <xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="e2961-275">下面的示例随机从一个城市数组检索在美国国内的城市的名称。</span><span class="sxs-lookup"><span data-stu-id="e2961-275">The following example randomly retrieves the name of a city in the United States from an array of cities.</span></span>  
  
 [!code-cpp[System.Random#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/array1.cpp#10)]
 [!code-csharp[System.Random#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/array1.cs#10)]
 [!code-vb[System.Random#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/array1.vb#10)]  
  
<a name="UniqueArray"></a>   
### <a name="retrieve-a-unique-element-from-an-array-or-collection"></a><span data-ttu-id="e2961-276">从数组或集合中检索的唯一元素</span><span class="sxs-lookup"><span data-stu-id="e2961-276">Retrieve a unique element from an array or collection</span></span>  
 <span data-ttu-id="e2961-277">随机数生成器始终可以返回重复值。</span><span class="sxs-lookup"><span data-stu-id="e2961-277">A random number generator can always return duplicate values.</span></span> <span data-ttu-id="e2961-278">当的数字范围变得更小或生成的值的数目变得更大，就会增加重复项的概率。</span><span class="sxs-lookup"><span data-stu-id="e2961-278">As the range of numbers becomes smaller or the number of values generated becomes larger, the probability of duplicates grows.</span></span> <span data-ttu-id="e2961-279">如果随机值必须是唯一的其他号码会生成来补偿重复项，导致越来越不佳的性能。</span><span class="sxs-lookup"><span data-stu-id="e2961-279">If random values must be unique, more numbers are generated to compensate for duplicates, resulting in increasingly poor performance.</span></span>  
  
 <span data-ttu-id="e2961-280">有大量的技术，可解决这种情况。</span><span class="sxs-lookup"><span data-stu-id="e2961-280">There are a number of techniques to handle this scenario.</span></span> <span data-ttu-id="e2961-281">一个常见的解决方案是创建数组或集合，其中包含要检索的值并包含随机浮点数的并行数组。</span><span class="sxs-lookup"><span data-stu-id="e2961-281">One common solution is to create an array or collection that contains the values to be retrieved, and a parallel array that contains random floating-point numbers.</span></span> <span data-ttu-id="e2961-282">在创建第一个数组，次使用随机数填充第二个数组和<xref:System.Array.Sort%28System.Array%2CSystem.Array%29?displayProperty=nameWithType>方法用于通过使用并行数组中的值排序的第一个数组。</span><span class="sxs-lookup"><span data-stu-id="e2961-282">The second array is populated with random numbers at the time the first array is created, and the <xref:System.Array.Sort%28System.Array%2CSystem.Array%29?displayProperty=nameWithType> method is used to sort the first array by using the values in the parallel array.</span></span>  
  
 <span data-ttu-id="e2961-283">例如，如果你要开发纸牌游戏，你想要确保每个卡使用仅一次。</span><span class="sxs-lookup"><span data-stu-id="e2961-283">For example, if you're developing a Solitaire game, you want to ensure that each card is used only once.</span></span> <span data-ttu-id="e2961-284">而不是生成随机数字，以检索卡和跟踪是否已处理该卡，你可以创建可用于排序牌的随机数的并行数组。</span><span class="sxs-lookup"><span data-stu-id="e2961-284">Instead of generating random numbers to retrieve a card and tracking whether that card has already been dealt, you can create a parallel array of random numbers that can be used to sort the deck.</span></span> <span data-ttu-id="e2961-285">一旦按的卡片组，你的应用程序可以维护一个指针来指示的卡片组上的下一步卡的索引。</span><span class="sxs-lookup"><span data-stu-id="e2961-285">Once the deck is sorted, your app can maintain a pointer to indicate the index of the next card on the deck.</span></span>  
  
 <span data-ttu-id="e2961-286">下面的示例阐释了这种方法。</span><span class="sxs-lookup"><span data-stu-id="e2961-286">The following example illustrates this approach.</span></span> <span data-ttu-id="e2961-287">它定义`Card`类表示一个游戏卡的和一的`Dealer`处理一副牌组成无序的类。</span><span class="sxs-lookup"><span data-stu-id="e2961-287">It defines a `Card` class that represents a playing card and a `Dealer` class that deals a deck of shuffled cards.</span></span> <span data-ttu-id="e2961-288">`Dealer`类构造函数填充两个数组：`deck`数组具有类范围和表示牌; 和本地中的所有卡`order`具有相同数量的元素作为数组的`deck`数组并填充使用随机生成<xref:System.Double>值。</span><span class="sxs-lookup"><span data-stu-id="e2961-288">The `Dealer` class constructor populates two arrays: a `deck` array that has class scope and that represents all the cards in the deck; and a local `order` array that has the same number of elements as the `deck` array and is populated with randomly generated <xref:System.Double> values.</span></span>  <span data-ttu-id="e2961-289"><xref:System.Array.Sort%28System.Array%2CSystem.Array%29?displayProperty=nameWithType>方法然后，调用排序`deck`数组中的值基于`order`数组。</span><span class="sxs-lookup"><span data-stu-id="e2961-289">The <xref:System.Array.Sort%28System.Array%2CSystem.Array%29?displayProperty=nameWithType> method is then called to sort the `deck` array based on the values in the `order` array.</span></span>  
  
 [!code-cpp[System.Random#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/uniquearray1.cpp#11)]
 [!code-csharp[System.Random#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/uniquearray1.cs#11)]
 [!code-vb[System.Random#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/uniquearray1.vb#11)]  
  
   
  
## Examples  
 <span data-ttu-id="e2961-290">下面的示例创建单个随机数生成器，并调用其<xref:System.Random.NextBytes%2A>， <xref:System.Random.Next%2A>，和<xref:System.Random.NextDouble%2A>方法来生成不同的范围内的随机数字序列。</span><span class="sxs-lookup"><span data-stu-id="e2961-290">The following example creates a single random number generator and calls its <xref:System.Random.NextBytes%2A>, <xref:System.Random.Next%2A>, and <xref:System.Random.NextDouble%2A> methods to generate sequences of random numbers within different ranges.</span></span>  
  
 [!code-cpp[System.Random#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random/cpp/random2.cpp#2)]
 [!code-csharp[System.Random#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random/cs/Random2.cs#2)]
 [!code-vb[System.Random#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random/vb/Random2.vb#2)]  
  
 <span data-ttu-id="e2961-291">下面的示例生成一个随机整数，它用作索引以检索数组的字符串值。</span><span class="sxs-lookup"><span data-stu-id="e2961-291">The following example generates a random integer that it uses as an index to retrieve a string value from an array.</span></span>  
  
 [!code-cpp[System.Random.Next#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random.Next/CPP/next1.cpp#3)]
 [!code-csharp[System.Random.Next#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Next/CS/next1.cs#3)]
 [!code-vb[System.Random.Next#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Next/VB/next1.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="e2961-292">
        <para>在.NET Framework 1.0 和 1.1 中，类的一个最小实现派生自<see cref="T:System.Random" />所需重写<see cref="M:System.Random.Sample" />方法以定义使用新的或已修改的算法来生成随机数字。派生的类无法然后依赖于的基类实现<see cref="M:System.Random.Next" />， <see cref="M:System.Random.Next(System.Int32)" />， <see cref="M:System.Random.Next(System.Int32,System.Int32)" />， <see cref="M:System.Random.NextBytes(System.Byte[])" />，和<see cref="M:System.Random.NextDouble" />方法来调用的派生的类实现<see cref="M:System.Random.Sample" />方法。在.NET Framework 2.0 和更高版本的行为<see cref="M:System.Random.Next" />， <see cref="M:System.Random.Next(System.Int32,System.Int32)" />，和<see cref="M:System.Random.NextBytes(System.Byte[])" />方法已更改，以便这些方法不一定调用的派生的类实现<see cref="M:System.Random.Sample" />方法。因此，类派生自<see cref="T:System.Random" />，面向.NET Framework 2.0 和更高版本应该还重写这三种方法。</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="e2961-292">
          <para>In the .NET Framework 1.0 and 1.1, a minimum implementation of a class derived from <see cref="T:System.Random" /> required overriding the <see cref="M:System.Random.Sample" /> method to define a new or modified algorithm for generating random numbers. The derived class could then rely on the base class implementation of the <see cref="M:System.Random.Next" />, <see cref="M:System.Random.Next(System.Int32)" />, <see cref="M:System.Random.Next(System.Int32,System.Int32)" />, <see cref="M:System.Random.NextBytes(System.Byte[])" />, and <see cref="M:System.Random.NextDouble" /> methods to call the derived class implementation of the <see cref="M:System.Random.Sample" /> method.  In the .NET Framework 2.0 and later, the behavior of the <see cref="M:System.Random.Next" />, <see cref="M:System.Random.Next(System.Int32,System.Int32)" />, and <see cref="M:System.Random.NextBytes(System.Byte[])" /> methods have changed so that these methods do not necessarily call the derived class implementation of the <see cref="M:System.Random.Sample" /> method. As a result, classes derived from <see cref="T:System.Random" /> that target the .NET Framework 2.0 and later should also override these three methods.</para>
        </span>
      </span>
    </block>
    <block subset="none" type="usage">
      <span data-ttu-id="e2961-293">
        <para>中的随机数生成器的实现<see cref="T:System.Random" />类并不能保证在.NET framework 的主版本之间保持不变。因此，不应假定相同的种子将导致.NET Framework 的不同版本中相同的伪随机序列。</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="e2961-293">
          <para>The implementation of the random number generator in the <see cref="T:System.Random" /> class isn't guaranteed to remain the same across major versions of the .NET Framework. As a result, you shouldn't assume that the same seed will result in the same pseudo-random sequence in different versions of the .NET Framework.</para>
        </span>
      </span>
    </block>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2961-294">初始化 <see cref="T:System.Random" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2961-294">Initializes a new instance of the <see cref="T:System.Random" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Random ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Random.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Random();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e2961-295">使用与时间相关的默认种子值，初始化 <see cref="T:System.Random" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2961-295">Initializes a new instance of the <see cref="T:System.Random" /> class, using a time-dependent default seed value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2961-296">默认种子值派生自系统时钟，具有有限的解决方法。</span><span class="sxs-lookup"><span data-stu-id="e2961-296">The default seed value is derived from the system clock and has finite resolution.</span></span> <span data-ttu-id="e2961-297">因此，不同<xref:System.Random>的默认构造函数的调用在关闭连续中创建的对象将具有相同的默认种子值，并因此，将生成的随机数的相同集。</span><span class="sxs-lookup"><span data-stu-id="e2961-297">As a result, different <xref:System.Random> objects that are created in close succession by a call to the default constructor will have identical default seed values and, therefore, will produce identical sets of random numbers.</span></span> <span data-ttu-id="e2961-298">可避免此问题，只需使用单个<xref:System.Random>对象生成所有随机数。</span><span class="sxs-lookup"><span data-stu-id="e2961-298">This problem can be avoided by using a single <xref:System.Random> object to generate all random numbers.</span></span> <span data-ttu-id="e2961-299">您还可以在其周围通过修改返回的系统时钟的种子值，然后显式提供此新的种子值改<xref:System.Random.%23ctor%28System.Int32%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="e2961-299">You can also work around it by modifying the seed value returned by the system clock and then explicitly providing this new seed value to the <xref:System.Random.%23ctor%28System.Int32%29> constructor.</span></span> <span data-ttu-id="e2961-300">有关详细信息，请参阅<xref:System.Random.%23ctor%28System.Int32%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="e2961-300">For more information, see the <xref:System.Random.%23ctor%28System.Int32%29> constructor.</span></span>  
  
 <span data-ttu-id="e2961-301">如果你想要生成随机数字序列的你随机数生成器，请调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="e2961-301">Call this constructor if you want your random number generator to generate a random sequence of numbers.</span></span> <span data-ttu-id="e2961-302">若要生成固定的数字序列的随机将相同的不同随机数生成器，请调用<xref:System.Random.%23ctor%28System.Int32%29>使用固定的种子值的构造函数。</span><span class="sxs-lookup"><span data-stu-id="e2961-302">To generate a fixed  sequence of random numbers that will be the same for different random number generators, call the <xref:System.Random.%23ctor%28System.Int32%29> constructor with a fixed seed value .</span></span> <span data-ttu-id="e2961-303">这<xref:System.Random>测试应用程序使用随机数字时，经常使用构造函数重载。</span><span class="sxs-lookup"><span data-stu-id="e2961-303">This <xref:System.Random> constructor overload is frequently used when testing apps that use random numbers.</span></span>  
  
 <span data-ttu-id="e2961-304">一旦你已实例化的随机数生成器，就调用单个<xref:System.Random>方法，如<xref:System.Random.Next>或<xref:System.Random.NextDouble>，以便生成随机数字。</span><span class="sxs-lookup"><span data-stu-id="e2961-304">Once you've instantiated the random number generator, you call individual <xref:System.Random> methods, such as <xref:System.Random.Next> or <xref:System.Random.NextDouble>, to generate random numbers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2961-305">下面的示例使用默认构造函数来实例化三个<xref:System.Random>对象，并显示每个五个随机整数的序列。</span><span class="sxs-lookup"><span data-stu-id="e2961-305">The following example uses the default constructor to instantiate three <xref:System.Random> objects and displays a sequence of five random integers for each.</span></span> <span data-ttu-id="e2961-306">由于前两个<xref:System.Random>关闭连续创建对象，使用基于系统时钟的相同的种子值实例化，并因此，它们将生成相同的随机数字序列。</span><span class="sxs-lookup"><span data-stu-id="e2961-306">Because the first two <xref:System.Random> objects are created in close succession, they are instantiated using identical seed values based on the system clock and, therefore, they produce an identical sequence of random numbers.</span></span> <span data-ttu-id="e2961-307">另一方面，默认构造函数的第三个<xref:System.Random>对象称为后通过调用导致了两个秒钟的延迟<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="e2961-307">On the other hand, the default constructor of the third <xref:System.Random> object is called after a two-second delay caused by calling the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="e2961-308">因为这将生成第三个不同的种子值<xref:System.Random>对象，它会生成不同的随机数字序列。</span><span class="sxs-lookup"><span data-stu-id="e2961-308">Because this produces a different seed value for the third <xref:System.Random> object, it produces a different sequence of random numbers.</span></span>  
  
 [!code-csharp[System.Random.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Ctor/CS/ctor1.cs#2)]
 [!code-vb[System.Random.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Ctor/VB/ctor1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Random (int Seed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 Seed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Random.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Seed As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Random(int Seed);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="Seed" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Seed">
          <span data-ttu-id="e2961-309">用来计算伪随机数序列起始值的数字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2961-309">A number used to calculate a starting value for the pseudo-random number sequence.</span>
          </span>
          <span data-ttu-id="e2961-310">如果指定的是负数，则使用其绝对值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2961-310">If a negative number is specified, the absolute value of the number is used.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2961-311">使用指定的种子值初始化 <see cref="T:System.Random" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2961-311">Initializes a new instance of the <see cref="T:System.Random" /> class, using the specified seed value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2961-312">提供相同的种子值到不同<xref:System.Random>对象会导致每个实例以生成随机数的相同随机数序列。</span><span class="sxs-lookup"><span data-stu-id="e2961-312">Providing an identical seed value to different <xref:System.Random> objects causes each instance to produce identical sequences of random numbers.</span></span> <span data-ttu-id="e2961-313">这通常是测试应用程序依赖于随机数生成器时。</span><span class="sxs-lookup"><span data-stu-id="e2961-313">This is often done when testing apps that rely on random number generators.</span></span>  
  
 <span data-ttu-id="e2961-314">如果你的应用程序需要不同的随机数序列，则调用此构造函数重复用于不同的种子值。</span><span class="sxs-lookup"><span data-stu-id="e2961-314">If your application requires different random number sequences, invoke this constructor repeatedly with different seed values.</span></span> <span data-ttu-id="e2961-315">为生成的唯一种子值的一种方法是使其依赖于时间。</span><span class="sxs-lookup"><span data-stu-id="e2961-315">One way to produce a unique seed value is to make it time-dependent.</span></span> <span data-ttu-id="e2961-316">例如，作为派生自系统时钟的种子值<xref:System.Random.%23ctor>未重载。</span><span class="sxs-lookup"><span data-stu-id="e2961-316">For example, derive the seed value from the system clock, as the <xref:System.Random.%23ctor> overload does.</span></span> <span data-ttu-id="e2961-317">但是，系统时钟可能没有足够的分辨率，以提供不同调用此构造函数使用不同的种子值。</span><span class="sxs-lookup"><span data-stu-id="e2961-317">However, the system clock might not have sufficient resolution to provide different invocations of this constructor with a different seed value.</span></span> <span data-ttu-id="e2961-318">这会导致生成相同序列的伪随机数字生成器所示的前两个<xref:System.Random>下面的示例中的对象。</span><span class="sxs-lookup"><span data-stu-id="e2961-318">This results in random number generators that generate identical sequences of pseudo-random numbers, as illustrated by the first two <xref:System.Random> objects in the following example.</span></span> <span data-ttu-id="e2961-319">若要防止此情况，应用某种算法来区分每个调用或调用中的种子值<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>方法，以确保为每个构造函数提供不同的种子值。</span><span class="sxs-lookup"><span data-stu-id="e2961-319">To prevent this, apply an algorithm to differentiate the seed value in each invocation, or call the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method to ensure that you provide each constructor with a different seed value.</span></span>  
  
 [!code-csharp[System.Random.Ctor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Ctor/CS/ctor4.cs#4)]
 [!code-vb[System.Random.Ctor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Ctor/VB/ctor4.vb#4)]  
  
 <span data-ttu-id="e2961-320">另一个选项是实例化单个<xref:System.Random>对象用于在你的应用程序中生成的随机数。</span><span class="sxs-lookup"><span data-stu-id="e2961-320">Another option is to instantiate a single <xref:System.Random> object that you use to generate all the random numbers in your application.</span></span> <span data-ttu-id="e2961-321">这会生成略有更好的性能，因为实例化的随机数生成器是非常耗费资源。</span><span class="sxs-lookup"><span data-stu-id="e2961-321">This yields slightly better performance, since instantiating a random number generator is fairly expensive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2961-322">下面的示例创建<xref:System.Random>使用类构造函数，它接受种子参数并生成随机整数和双精度型值的序列的对象。</span><span class="sxs-lookup"><span data-stu-id="e2961-322">The following example creates <xref:System.Random> objects with the class constructor that takes a seed parameter and generates a sequence of random integers and doubles.</span></span> <span data-ttu-id="e2961-323">此示例阐释了所生成相同的序列时<xref:System.Random>使用构造函数和种子参数重新创建对象。</span><span class="sxs-lookup"><span data-stu-id="e2961-323">The example illustrates that the same sequence is generated when the <xref:System.Random> object is created again with the constructor and seed parameter.</span></span>  
  
 [!code-cpp[System.Random.Ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random.Ctor/CPP/ctor.cpp#1)]
 [!code-csharp[System.Random.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Ctor/CS/ctor.cs#1)]
 [!code-vb[System.Random.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Ctor/VB/ctor.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Next">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e2961-324">返回一个随机整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2961-324">Returns a random integer.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Next">
      <MemberSignature Language="C#" Value="public virtual int Next ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Next() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Random.Next" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Next () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Next();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e2961-325">返回一个非负随机整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2961-325">Returns a non-negative random integer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2961-326">大于或等于 0 且小于 <see cref="F:System.Int32.MaxValue" /> 的 32 位有符号整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2961-326">A 32-bit signed integer that is greater than or equal to 0 and less than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2961-327"><xref:System.Random.Next%2A?displayProperty=nameWithType> 生成一个随机数字，其值范围从 0 到小于<xref:System.Int32.MaxValue?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e2961-327"><xref:System.Random.Next%2A?displayProperty=nameWithType> generates a random number whose value ranges from 0 to less than <xref:System.Int32.MaxValue?displayProperty=nameWithType>.</span></span> <span data-ttu-id="e2961-328">若要生成随机数字其值范围从 0 到其他某个正数，使用<xref:System.Random.Next%28System.Int32%29?displayProperty=nameWithType>方法重载。</span><span class="sxs-lookup"><span data-stu-id="e2961-328">To generate a random number whose value ranges from 0 to some other positive number, use the <xref:System.Random.Next%28System.Int32%29?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="e2961-329">若要生成一个随机数不同范围内的，使用<xref:System.Random.Next%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType>方法重载。</span><span class="sxs-lookup"><span data-stu-id="e2961-329">To generate a random number within a different range, use the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2961-330">下面的示例调用重复<xref:System.Random.Next%2A>方法来生成特定数量的用户请求的随机数字。</span><span class="sxs-lookup"><span data-stu-id="e2961-330">The following example makes repeated calls to the <xref:System.Random.Next%2A> method to generate a specific number of random numbers requested by the user.</span></span> <span data-ttu-id="e2961-331"><xref:System.Console.ReadLine%2A?displayProperty=nameWithType>方法用于获取客户输入。</span><span class="sxs-lookup"><span data-stu-id="e2961-331">The <xref:System.Console.ReadLine%2A?displayProperty=nameWithType> method is used to get customer input.</span></span>  
  
 [!code-cpp[System.Random.Next#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random.Next/CPP/next3.cpp#5)]
 [!code-csharp[System.Random.Next#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Next/CS/next3.cs#5)]
 [!code-vb[System.Random.Next#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Next/VB/next3.vb#5)]  
  
 <span data-ttu-id="e2961-332">下面的示例派生了从一个类<xref:System.Random>从生成的均匀分布生成其分发不同的随机数字序列的<xref:System.Random.Sample%2A>基本类的方法。</span><span class="sxs-lookup"><span data-stu-id="e2961-332">The following example derives a class from <xref:System.Random> to generate a sequence of random numbers whose distribution differs from the uniform distribution generated by the <xref:System.Random.Sample%2A> method of the base class.</span></span> <span data-ttu-id="e2961-333">它将重写<xref:System.Random.Sample%2A>方法以提供的随机数字，并重写分发<xref:System.Random.Next%2A?displayProperty=nameWithType>要使用的随机数序列方法。</span><span class="sxs-lookup"><span data-stu-id="e2961-333">It overrides the <xref:System.Random.Sample%2A> method to provide the distribution of random numbers, and overrides the <xref:System.Random.Next%2A?displayProperty=nameWithType> method to use series of random numbers.</span></span>  
  
 [!code-cpp[System.Random.Sample#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random.Sample/cpp/sampleex.cpp#1)]
 [!code-csharp[System.Random.Sample#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Sample/CS/sample.cs#1)]
 [!code-vb[System.Random.Sample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Sample/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="e2961-334">
            <para>从.NET Framework 2.0 版本开始，如果派生的类从<see cref="T:System.Random" />，并重写<see cref="M:System.Random.Sample" />方法，提供的派生的类实现的分布<see cref="M:System.Random.Sample" />给基类的调用中不使用方法实现<see cref="M:System.Random.Next" />方法。均匀分布相反，返回由基<see cref="T:System.Random" />使用类。此行为能改善的总体性能<see cref="T:System.Random" />类。若要修改此行为，以调用<see cref="M:System.Random.Sample" />派生类中的方法，你还必须重写<see cref="M:System.Random.Next" />方法。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="e2961-334">
              <para>Starting with the .NET Framework version 2.0, if you derive a class from <see cref="T:System.Random" /> and override the <see cref="M:System.Random.Sample" /> method, the distribution provided by the derived class implementation of the <see cref="M:System.Random.Sample" /> method is not used in calls to the base class implementation of the <see cref="M:System.Random.Next" /> method. Instead, the uniform distribution returned by the base <see cref="T:System.Random" /> class is used. This behavior improves the overall performance of the <see cref="T:System.Random" /> class. To modify this behavior to call the <see cref="M:System.Random.Sample" /> method in the derived class, you must also override the <see cref="M:System.Random.Next" /> method.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="Next">
      <MemberSignature Language="C#" Value="public virtual int Next (int maxValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Next(int32 maxValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Random.Next(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Next (maxValue As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Next(int maxValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="maxValue">
          <span data-ttu-id="e2961-335">要生成的随机数的上限（随机数不能取该上限值）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2961-335">The exclusive upper bound of the random number to be generated.</span>
          </span>
          <span data-ttu-id="e2961-336">
            <c>maxValue</c> 值必须大于或等于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2961-336">
              <c>maxValue</c> must be greater than or equal to 0.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2961-337">返回一个小于所指定最大值的非负随机整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2961-337">Returns a non-negative random integer that is less than the specified maximum.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2961-338">大于或等于零且小于 <paramref name="maxValue" /> 的 32 位有符号整数，即：返回值的范围通常包括零但不包括 <paramref name="maxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2961-338">A 32-bit signed integer that is greater than or equal to 0, and less than <paramref name="maxValue" />; that is, the range of return values ordinarily includes 0 but not <paramref name="maxValue" />.</span>
          </span>
          <span data-ttu-id="e2961-339">但是，如果 <paramref name="maxValue" /> 等于 0，则返回 <paramref name="maxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2961-339">However, if <paramref name="maxValue" /> equals 0, <paramref name="maxValue" /> is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2961-340"><xref:System.Random.Next%28System.Int32%29>重载方法返回随机整数该范围从 0 到`maxValue`– 1。</span><span class="sxs-lookup"><span data-stu-id="e2961-340">The <xref:System.Random.Next%28System.Int32%29> overload returns random integers that range from 0 to `maxValue` – 1.</span></span> <span data-ttu-id="e2961-341">但是，如果`maxValue`为 0，则该方法返回 0。</span><span class="sxs-lookup"><span data-stu-id="e2961-341">However, if `maxValue` is 0, the method returns 0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2961-342">下面的示例生成使用的不同重载的随机整数<xref:System.Random.Next%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e2961-342">The following example generates random integers with various overloads of the <xref:System.Random.Next%2A> method.</span></span>  
  
 [!code-cpp[System.Random.Next#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random.Next/CPP/next.cpp#1)]
 [!code-csharp[System.Random.Next#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Next/CS/next.cs#1)]
 [!code-vb[System.Random.Next#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Next/VB/next.vb#1)]  
  
 <span data-ttu-id="e2961-343">下面的示例生成一个随机整数，它用作索引以检索数组的字符串值。</span><span class="sxs-lookup"><span data-stu-id="e2961-343">The following example generates a random integer that it uses as an index to retrieve a string value from an array.</span></span> <span data-ttu-id="e2961-344">因为数组的最高的索引是一个小于其长度、 的值<xref:System.Array.Length%2A?displayProperty=nameWithType>作为提供属性`maxValue`参数。</span><span class="sxs-lookup"><span data-stu-id="e2961-344">Because the highest index of the array is one less than its length, the value of the <xref:System.Array.Length%2A?displayProperty=nameWithType> property is supplied as a the `maxValue` parameter.</span></span>  
  
 [!code-cpp[System.Random.Next#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random.Next/CPP/next1.cpp#3)]
 [!code-csharp[System.Random.Next#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Next/CS/next1.cs#3)]
 [!code-vb[System.Random.Next#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Next/VB/next1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e2961-345">
            <paramref name="maxValue" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2961-345">
              <paramref name="maxValue" /> is less than 0.</span>
          </span>
        </exception>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="Next">
      <MemberSignature Language="C#" Value="public virtual int Next (int minValue, int maxValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Next(int32 minValue, int32 maxValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Random.Next(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Next (minValue As Integer, maxValue As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Next(int minValue, int maxValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="minValue" Type="System.Int32" />
        <Parameter Name="maxValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="minValue">
          <span data-ttu-id="e2961-346">返回的随机数的下界（随机数可取该下界值）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2961-346">The inclusive lower bound of the random number returned.</span>
          </span>
        </param>
        <param name="maxValue">
          <span data-ttu-id="e2961-347">返回的随机数的上界（随机数不能取该上界值）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2961-347">The exclusive upper bound of the random number returned.</span>
          </span>
          <span data-ttu-id="e2961-348">
            <c>maxValue</c> 必须大于或等于 <c>minValue</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2961-348">
              <c>maxValue</c> must be greater than or equal to <c>minValue</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2961-349">返回在指定范围内的任意整数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2961-349">Returns a random integer that is within a specified range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2961-350">一个大于等于 <paramref name="minValue" /> 且小于 <paramref name="maxValue" /> 的 32 位带符号整数，即：返回的值范围包括 <paramref name="minValue" /> 但不包括 <paramref name="maxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2961-350">A 32-bit signed integer greater than or equal to <paramref name="minValue" /> and less than <paramref name="maxValue" />; that is, the range of return values includes <paramref name="minValue" /> but not <paramref name="maxValue" />.</span>
          </span>
          <span data-ttu-id="e2961-351">如果 <paramref name="minValue" /> 等于 <paramref name="maxValue" />，则返回 <paramref name="minValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2961-351">If <paramref name="minValue" /> equals <paramref name="maxValue" />, <paramref name="minValue" /> is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2961-352"><xref:System.Random.Next%28System.Int32%2CSystem.Int32%29>重载方法返回随机整数，频率范围介于`minValue`到`maxValue`– 1。</span><span class="sxs-lookup"><span data-stu-id="e2961-352">The <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29> overload returns random integers that range from `minValue` to `maxValue` – 1.</span></span> <span data-ttu-id="e2961-353">但是，如果`maxValue`等于`minValue`，该方法返回`minValue`。</span><span class="sxs-lookup"><span data-stu-id="e2961-353">However, if `maxValue` equals `minValue`, the method returns `minValue`.</span></span>  
  
 <span data-ttu-id="e2961-354">与其他重载不同<xref:System.Random.Next%2A>方法，它返回仅非负值，此方法可以返回负随机整数。</span><span class="sxs-lookup"><span data-stu-id="e2961-354">Unlike the other overloads of the <xref:System.Random.Next%2A> method, which return only non-negative values, this method can return a negative random integer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2961-355">下面的示例使用<xref:System.Random.Next%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType>方法来生成三个不同范围的随机整数。</span><span class="sxs-lookup"><span data-stu-id="e2961-355">The following example uses the <xref:System.Random.Next%28System.Int32%2CSystem.Int32%29?displayProperty=nameWithType> method to generate random integers with three distinct ranges.</span></span> <span data-ttu-id="e2961-356">请注意，该示例的确切输出取决于传递给的系统提供的种子值<xref:System.Random>类构造函数。</span><span class="sxs-lookup"><span data-stu-id="e2961-356">Note that the exact output from the example depends on the system-supplied seed value passed to the <xref:System.Random> class constructor.</span></span>  
  
 [!code-cpp[System.Random.Next#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random.Next/CPP/next2.cpp#2)]
 [!code-csharp[System.Random.Next#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Next/CS/Next2.cs#2)]
 [!code-vb[System.Random.Next#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Next/VB/next2.vb#2)]  
  
 <span data-ttu-id="e2961-357">下面的示例生成一个随机整数，它用作索引以检索数组的字符串值。</span><span class="sxs-lookup"><span data-stu-id="e2961-357">The following example generates a random integer that it uses as an index to retrieve a string value from an array.</span></span> <span data-ttu-id="e2961-358">因为数组的最高的索引是一个小于其长度、 的值<xref:System.Array.Length%2A?displayProperty=nameWithType>作为提供属性`maxValue`参数。</span><span class="sxs-lookup"><span data-stu-id="e2961-358">Because the highest index of the array is one less than its length, the value of the <xref:System.Array.Length%2A?displayProperty=nameWithType> property is supplied as a the `maxValue` parameter.</span></span>  
  
 [!code-cpp[System.Random.Next#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random.Next/CPP/next4.cpp#4)]
 [!code-csharp[System.Random.Next#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Next/CS/next4.cs#4)]
 [!code-vb[System.Random.Next#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Next/VB/next4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e2961-359">
            <paramref name="minValue" /> 大于 <paramref name="maxValue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2961-359">
              <paramref name="minValue" /> is greater than <paramref name="maxValue" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="e2961-360">
            <para>从.NET Framework 2.0 版本开始，如果派生的类从<see cref="T:System.Random" />，并重写<see cref="M:System.Random.Sample" />方法，提供的派生的类实现的分布<see cref="M:System.Random.Sample" />给基类的调用中不使用方法实现<see cref="M:System.Random.Next(System.Int32,System.Int32)" />方法重载如果之间的差异<paramref name="minValue" />和<paramref name="maxValue" />参数大于<see cref="F:System.Int32.MaxValue" />。均匀分布相反，返回由基<see cref="T:System.Random" />使用类。此行为能改善的总体性能<see cref="T:System.Random" />类。若要修改此行为，以调用<see cref="M:System.Random.Sample" />派生类中的方法，你还必须重写<see cref="M:System.Random.Next(System.Int32,System.Int32)" />方法重载。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="e2961-360">
              <para>Starting with the .NET Framework version 2.0, if you derive a class from <see cref="T:System.Random" /> and override the <see cref="M:System.Random.Sample" /> method, the distribution provided by the derived class implementation of the <see cref="M:System.Random.Sample" /> method is not used in calls to the base class implementation of the <see cref="M:System.Random.Next(System.Int32,System.Int32)" /> method overload if the difference between the <paramref name="minValue" /> and <paramref name="maxValue" /> parameters is greater than <see cref="F:System.Int32.MaxValue" />. Instead, the uniform distribution returned by the base <see cref="T:System.Random" /> class is used. This behavior improves the overall performance of the <see cref="T:System.Random" /> class. To modify this behavior to call the <see cref="M:System.Random.Sample" /> method in the derived class, you must also override the <see cref="M:System.Random.Next(System.Int32,System.Int32)" /> method overload.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Int32" />
      </Docs>
    </Member>
    <Member MemberName="NextBytes">
      <MemberSignature Language="C#" Value="public virtual void NextBytes (byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NextBytes(unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Random.NextBytes(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub NextBytes (buffer As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void NextBytes(cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="e2961-361">包含随机数的字节数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2961-361">An array of bytes to contain random numbers.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e2961-362">用随机数填充指定字节数组的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2961-362">Fills the elements of a specified array of bytes with random numbers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2961-363">字节数组的每个元素设置为随机数字大于或等于 0，并且小于或等于<xref:System.Byte.MaxValue>。</span><span class="sxs-lookup"><span data-stu-id="e2961-363">Each element of the array of bytes is set to a random number greater than or equal to 0, and less than or equal to <xref:System.Byte.MaxValue>.</span></span>  
  
 <span data-ttu-id="e2961-364">例如，若要生成适用于创建随机密码加密型安全的随机数，请使用一种方法如<xref:System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="e2961-364">For example, to generate a cryptographically secured random number suitable for creating a random password, use a method such as <xref:System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2961-365">下面的示例演示如何使用<xref:System.Random.NextBytes%2A>方法以用随机字节值填充的字节数组。</span><span class="sxs-lookup"><span data-stu-id="e2961-365">The following example demonstrates how to use the <xref:System.Random.NextBytes%2A> method to fill an array of bytes with random byte values.</span></span>  
  
 [!code-cpp[Classic Random.NextBytes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Random.NextBytes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Random.NextBytes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Random.NextBytes Example/CS/source.cs#1)]
 [!code-vb[Classic Random.NextBytes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Random.NextBytes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e2961-366">
            <paramref name="buffer" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2961-366">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="e2961-367">
            <para>从.NET Framework 2.0 版本开始，如果派生的类从<see cref="T:System.Random" />，并重写<see cref="M:System.Random.Sample" />方法，提供的派生的类实现的分布<see cref="M:System.Random.Sample" />给基类的调用中不使用方法实现<see cref="M:System.Random.NextBytes(System.Byte[])" />方法。均匀分布相反，返回由基<see cref="T:System.Random" />使用类。此行为能改善的总体性能<see cref="T:System.Random" />类。若要修改此行为，以调用<see cref="M:System.Random.Sample" />派生类中的方法，你还必须重写<see cref="M:System.Random.NextBytes(System.Byte[])" />方法。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="e2961-367">
              <para>Starting with the .NET Framework version 2.0, if you derive a class from <see cref="T:System.Random" /> and override the <see cref="M:System.Random.Sample" /> method, the distribution provided by the derived class implementation of the <see cref="M:System.Random.Sample" /> method is not used in calls to the base class implementation of the <see cref="M:System.Random.NextBytes(System.Byte[])" /> method. Instead, the uniform distribution returned by the base <see cref="T:System.Random" /> class is used. This behavior improves the overall performance of the <see cref="T:System.Random" /> class. To modify this behavior to call the <see cref="M:System.Random.Sample" /> method in the derived class, you must also override the <see cref="M:System.Random.NextBytes(System.Byte[])" /> method.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Byte" />
      </Docs>
    </Member>
    <Member MemberName="NextBytes">
      <MemberSignature Language="C#" Value="public virtual void NextBytes (Span&lt;byte&gt; buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NextBytes(valuetype System.Span`1&lt;unsigned int8&gt; buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Random.NextBytes(System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub NextBytes (buffer As Span(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void NextBytes(Span&lt;System::Byte&gt; buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Span&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NextDouble">
      <MemberSignature Language="C#" Value="public virtual double NextDouble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 NextDouble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Random.NextDouble" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function NextDouble () As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual double NextDouble();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e2961-368">返回一个大于或等于 0.0 且小于 1.0 的随机浮点数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2961-368">Returns a random floating-point number that is greater than or equal to 0.0, and less than 1.0.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2961-369">大于或等于 0.0 且小于 1.0 的双精度浮点数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2961-369">A double-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2961-370">此方法返回的随机数字实际上限是 0.99999999999999978。</span><span class="sxs-lookup"><span data-stu-id="e2961-370">The actual upper bound of the random number returned by this method is 0.99999999999999978.</span></span>  
  
 <span data-ttu-id="e2961-371">若要检索以外介于 0.0 和 1.0 范围内的随机浮点值，请参阅的"检索在指定范围中的浮点值"部分<xref:System.Random>类主题。</span><span class="sxs-lookup"><span data-stu-id="e2961-371">To retrieve random floating-point values within a range other than 0.0 and 1.0, see the "Retrieve floating-point values in a specified range" section of the <xref:System.Random> class topic.</span></span>  
  
 <span data-ttu-id="e2961-372">此方法是受保护的方法的公共版本<xref:System.Random.Sample%2A>。</span><span class="sxs-lookup"><span data-stu-id="e2961-372">This method is the public version of the protected method, <xref:System.Random.Sample%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2961-373">下面的示例使用<xref:System.Random.NextDouble%2A>方法来生成的随机双精度型值的序列。</span><span class="sxs-lookup"><span data-stu-id="e2961-373">The following example uses the <xref:System.Random.NextDouble%2A> method to generate sequences of random doubles.</span></span>  
  
 [!code-cpp[System.Random.Ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random.Ctor/CPP/ctor.cpp#1)]
 [!code-csharp[System.Random.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Ctor/CS/ctor.cs#1)]
 [!code-vb[System.Random.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Ctor/VB/ctor.vb#1)]  
  
 <span data-ttu-id="e2961-374">下面的示例调用<xref:System.Random.NextDouble%2A>方法以生成随机的 100 个数字并显示其频率分发。</span><span class="sxs-lookup"><span data-stu-id="e2961-374">The following example calls the <xref:System.Random.NextDouble%2A> method to generate 100 random numbers and displays their frequency distribution.</span></span>  
  
 [!code-csharp[System.Random.NextDouble#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.random.nextdouble/cs/nextdouble1.cs#2)]
 [!code-vb[System.Random.NextDouble#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.random.nextdouble/vb/nextdouble1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Sample">
      <MemberSignature Language="C#" Value="protected virtual double Sample ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance float64 Sample() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Random.Sample" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Sample () As Double" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual double Sample();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e2961-375">返回一个介于 0.0 和 1.0 之间的随机浮点数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2961-375">Returns a random floating-point number between 0.0 and 1.0.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e2961-376">大于或等于 0.0 且小于 1.0 的双精度浮点数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e2961-376">A double-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e2961-377">若要生成一个随机分布或不同的随机数字生成器原则，从派生类<xref:System.Random>类并重写<xref:System.Random.Sample%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e2961-377">To produce a different random distribution or a different random number generator principle, derive a class from the <xref:System.Random> class and override the <xref:System.Random.Sample%2A> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e2961-378"><xref:System.Random.Sample%2A>方法是`protected`，这意味着它是只能在内部访问<xref:System.Random>类和派生的类。</span><span class="sxs-lookup"><span data-stu-id="e2961-378">The <xref:System.Random.Sample%2A> method is `protected`, which means that it is accessible only within the <xref:System.Random> class and its derived classes.</span></span> <span data-ttu-id="e2961-379">若要生成介于 0 和 1 之间的随机数<xref:System.Random>实例时，调用<xref:System.Random.NextDouble%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="e2961-379">To generate a random number between 0 and 1 from a <xref:System.Random> instance, call the <xref:System.Random.NextDouble%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e2961-380">下面的示例派生了从一个类<xref:System.Random>和替代<xref:System.Random.Sample%2A>方法以生成一个分布的随机数。</span><span class="sxs-lookup"><span data-stu-id="e2961-380">The following example derives a class from <xref:System.Random> and overrides the <xref:System.Random.Sample%2A> method to generate a distribution of random numbers.</span></span> <span data-ttu-id="e2961-381">此分布是不同于生成的均匀分布<xref:System.Random.Sample%2A>基本类的方法。</span><span class="sxs-lookup"><span data-stu-id="e2961-381">This distribution is different than the uniform distribution generated by the <xref:System.Random.Sample%2A> method of the base class.</span></span>  
  
 [!code-cpp[System.Random.Sample#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Random.Sample/cpp/sampleex.cpp#1)]
 [!code-csharp[System.Random.Sample#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Random.Sample/CS/sample.cs#1)]
 [!code-vb[System.Random.Sample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Random.Sample/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="e2961-382">
            <para>从.NET Framework 2.0 版本开始，如果派生的类从<see cref="T:System.Random" />，并重写<see cref="M:System.Random.Sample" />方法，提供的派生的类实现的分布<see cref="M:System.Random.Sample" />给基类的调用中不使用方法以下方法实现:-<see cref="M:System.Random.NextBytes(System.Byte[])" />方法。 -<see cref="M:System.Random.Next" />方法。 -<see cref="M:System.Random.Next(System.Int32,System.Int32)" />方法，如果 (<paramref name="maxValue" /> - <paramref name="minValue" />) 大于<see cref="F:System.Int32.MaxValue" />。相反，由基类提供的统一分布<see cref="T:System.Random" />使用类。此行为能改善的总体性能<see cref="T:System.Random" />类。若要修改此行为，以调用的实现<see cref="M:System.Random.Sample" />方法在派生类中，你还必须重写这些三个成员的行为。示例进行了说明。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="e2961-382">
              <para>Starting with the .NET Framework version 2.0, if you derive a class from <see cref="T:System.Random" /> and override the <see cref="M:System.Random.Sample" /> method, the distribution provided by the derived class implementation of the <see cref="M:System.Random.Sample" /> method is not used in calls to the base class implementation of the following methods:  -   The <see cref="M:System.Random.NextBytes(System.Byte[])" /> method.  -   The <see cref="M:System.Random.Next" /> method.  -   The <see cref="M:System.Random.Next(System.Int32,System.Int32)" /> method, if (<paramref name="maxValue" /> - <paramref name="minValue" />) is greater than <see cref="F:System.Int32.MaxValue" />.  Instead, the uniform distribution provided by the base <see cref="T:System.Random" /> class is used. This behavior improves the overall performance of the <see cref="T:System.Random" /> class. To modify this behavior to call the implementation of the <see cref="M:System.Random.Sample" /> method in the derived class, you must also override the behavior of these three members. The example provides an illustration.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Random.NextDouble" />
      </Docs>
    </Member>
  </Members>
</Type>