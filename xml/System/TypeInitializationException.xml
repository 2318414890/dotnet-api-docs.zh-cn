<Type Name="TypeInitializationException" FullName="System.TypeInitializationException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="34c9e1f470bbf319f8b231e4cc6e738c41ed568b" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39900687" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class TypeInitializationException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TypeInitializationException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.TypeInitializationException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TypeInitializationException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeInitializationException sealed : SystemException" />
  <TypeSignature Language="F#" Value="type TypeInitializationException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>作为类初始值设定项引发的异常的包装器而引发的异常。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当类初始值设定项初始化类型失败时，将创建一个 <xref:System.TypeInitializationException>，并向其传递对由该类型的类初始值设定项引发的异常的引用。 <xref:System.Exception.InnerException%2A>属性的<xref:System.TypeInitializationException>保存着基础异常。  
  
 通常情况下，<xref:System.TypeInitializationException>异常反映了灾难性条件 （运行时无法实例化一个类型），阻止应用程序继续执行。  大多数情况下，<xref:System.TypeInitializationException>引发响应应用程序的执行环境中的某些更改。 因此，而不可能进行故障排除调试代码中，异常应不以处理`try` / `catch`块。 相反，应调查和消除异常的原因。  
  
 <xref:System.TypeInitializationException> 使用 HRESULT COR_E_TYPEINITIALIZATION，其值 0x80131534。  
  
 有关实例的初始属性值的列表<xref:System.TypeInitializationException>，请参阅<xref:System.TypeInitializationException.%23ctor%2A>构造函数。  
  
 以下部分介绍一些情况下，<xref:System.TypeInitializationException>引发异常。  
  
- [静态构造函数和 TypeInitializationException 异常](#Static)   
- [正则表达式匹配超时值](#Timeout)   
- [日历和区域性的数据](#Calendars)  
  
<a name="Static"></a>   
## <a name="static-constructors-and-the-typeinitializationexception"></a>静态构造函数和 TypeInitializationException

 静态构造函数，如果存在，自动调用由运行时之前创建的一种类型的新实例。 开发人员可以显式定义静态构造函数。 如果未显式定义静态构造函数，编译器会自动创建一个用来初始化任何`static`（在 C# 中) 或`Shared`（在 Visual Basic) 类型的成员。  静态构造函数的详细信息，请参阅[静态构造函数](~/docs/csharp/programming-guide/classes-and-structs/static-constructors.md)。  
  
 大多数情况下，<xref:System.TypeInitializationException>当静态构造函数不能实例化一个类型时引发异常。  <xref:System.Exception.InnerException%2A>属性指示为何无法实例化类型的静态构造函数。 一些更常见的原因<xref:System.TypeInitializationException>异常是：  
  
- 静态构造函数中未经处理的异常  
 
   如果静态构造函数中引发异常，该异常包装在<xref:System.TypeInitializationException>异常，并且该类型不能实例化。  
  
   通常使此异常难以进行疑难解答的是静态构造函数没有始终显式定义在源代码中。 如果静态构造函数存在问题的一种类型：  
  
   -   它已被显式定义为一种类型的成员。  
  
   -   该类型具有`static`（在 C# 中) 或`Shared`（在 Visual Basic 中) 是声明并在单个语句中初始化的变量。 在这种情况下，语言编译器将生成类型的静态构造函数。 可以通过使用一个实用程序，如来检查[IL 反汇编程序](~/docs/framework/tools/ildasm-exe-il-disassembler.md)。 例如，当 C# 和 VB 编译器编译下面的示例，它们生成类似于以下的静态构造函数的 IL:  
  
   ```  
   .method private specialname rtspecialname static   
           void  .cctor() cil managed  
   {  
     // Code size       12 (0xc)  
     .maxstack  8  
     IL_0000:  ldc.i4.3  
     IL_0001:  newobj     instance void TestClass::.ctor(int32)  
     IL_0006:  stsfld     class TestClass Example::test  
     IL_000b:  ret  
   } // end of method Example::.cctor  
   ```  
  
   下面的示例演示<xref:System.TypeInitializationException>由编译器生成的静态构造函数引发异常。 `Example`类包括`static`（在 C# 中) 或`Shared`（在 Visual Basic) 字段类型的`TestClass`通过将值 3 传递给其类构造函数实例化。  值，但是，是非法的;允许仅为 0 或 1 的值。 因此，`TestClass`类构造函数将引发<xref:System.ArgumentOutOfRangeException>。 由于未处理此异常，它将包装在<xref:System.TypeInitializationException>异常。  
  
   [!code-csharp[System.TypeInitializationException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/ctorException1.cs#3)]
   [!code-vb[System.TypeInitializationException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/CtorException1.vb#3)]  
  
   请注意异常消息，显示有关的信息<xref:System.Exception.InnerException%2A>属性。  
  
- 缺少程序集或数据文件  
 
   一个常见原因<xref:System.TypeInitializationException>例外情况是其运行时环境中缺少应用程序的开发和测试环境中已存在的程序集或数据文件。 例如，可以编译到程序集使用此命令行语法来命名 Missing1a.dll 下面的示例：  
  
   ```csharp  
   csc -t:library Missing1a.cs  
   ```  
  
   ```vb  
   vbc Missing1a.vb -t:library  
   ```  
  
   [!code-csharp[System.TypeInitializationException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1a.cs#1)]
   [!code-vb[System.TypeInitializationException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1a.vb#1)]  
  
   然后可以编译到可执行文件包括对 Missing1a.dll 的引用名为 Missing1.exe 下面的示例：  
  
   ```csharp
   csc Missing1.cs /r:Missing1a.dll  
   ```  
  
   ```vb
   vbc Missing1.vb /r:Missing1a.dll  
   ```  
  
   但是，如果重命名、 移动或删除 Missing1a.dll 和运行示例，则会引发<xref:System.TypeInitializationException>异常并显示在示例中所示的输出。  请注意，异常消息包含信息有关<xref:System.Exception.InnerException%2A>属性。 在这种情况下，内部异常是<xref:System.IO.FileNotFoundException>因为运行时找不到依赖程序集引发。  
  
   [!code-csharp[System.TypeInitializationException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1.cs#2)]
   [!code-vb[System.TypeInitializationException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1.vb#2)]  
  
   > [!NOTE]
   >  在此示例中，<xref:System.TypeInitializationException>已引发异常，因为无法加载程序集。 如果静态构造函数尝试打开数据文件，如配置文件、 XML 文件，或一个文件，其中包含序列化： 找不到的数据，也可以引发异常。  
  
<a name="Timeout"></a>   
## <a name="regular-expression-match-timeout-values"></a>正则表达式匹配超时值  
 可以设置正则表达式模式匹配的每个应用程序域基础上操作的默认超时值。 通过指定定义超时<xref:System.TimeSpan>到"REGEX_DEFAULT_MATCH_TIMEOUT"属性值为<xref:System.AppDomain.SetData%2A?displayProperty=nameWithType>方法。 必须是有效的时间间隔<xref:System.TimeSpan>对象，它是大于零且小于大约 24 天。 如果不满足这些要求，尝试设置的默认超时值将引发<xref:System.ArgumentOutOfRangeException>，这又包装在<xref:System.TypeInitializationException>异常。  
  
 下面的示例演示<xref:System.TypeInitializationException>分配给"REGEX_DEFAULT_MATCH_TIMEOUT"属性的值无效时引发。 若要消除此异常，请将"REGEX_DEFAULT_MATCH_TIMEOUT"属性设置为<xref:System.TimeSpan>大于零且小于大约 24 天的值。  
  
 [!code-csharp[System.TypeInitializationException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Regex1.cs#4)]
 [!code-vb[System.TypeInitializationException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Regex1.vb#4)]  
  
<a name="Calendars"></a>   
## <a name="calendars-and-cultural-data"></a>日历和区域性的数据  
 如果尝试实例化一个日历，但运行时无法实例化<xref:System.Globalization.CultureInfo>对象，它对应于该日历，则会引发<xref:System.TypeInitializationException>异常。 可以通过以下日历类构造函数引发此异常：  
  
-   默认构造函数<xref:System.Globalization.JapaneseCalendar>类。  
  
-   默认构造函数<xref:System.Globalization.KoreanCalendar>类。  
  
-   默认构造函数<xref:System.Globalization.TaiwanCalendar>类。  
  
 由于这些区域性的区域性数据应是适用于所有系统，您应该很少，如果有过，遇到此异常。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeInitializationException (string fullTypeName, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fullTypeName, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TypeInitializationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fullTypeName As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeInitializationException(System::String ^ fullTypeName, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new TypeInitializationException : string * Exception -&gt; TypeInitializationException" Usage="new System.TypeInitializationException (fullTypeName, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fullTypeName" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="fullTypeName">未能初始化类型的完全限定名。</param>
        <param name="innerException">导致当前异常的异常。 如果 <c>innerException</c> 参数不是空引用（在 Visual Basic 中为 <see langword="Nothing" />），则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
        <summary>用默认错误消息、指定的类型名称和对内部异常（为该异常的根源）的引用来初始化 <see cref="T:System.TypeInitializationException" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因前一个异常而直接引发的异常可以在 <xref:System.Exception.InnerException%2A> 属性中包含对前一个异常的引用。 <xref:System.Exception.InnerException%2A> 属性返回传递到构造函数中的相同值，或者如果 `Nothing` 属性不向构造函数提供内部异常值，则为空引用（在 Visual Basic 中为 <xref:System.Exception.InnerException%2A>）。  
  
 下表显示 <xref:System.TypeInitializationException> 的实例的初始属性值。  
  
|Property|“值”|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|内部异常引用。|  
|<xref:System.Exception.Message%2A>|本地化的错误消息字符串。|  
|<xref:System.TypeInitializationException.TypeName%2A>|类型的名称。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="typeInitializationException.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">包含有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
        <param name="context">
          <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
        <summary>设置带有文件名和附加异常信息的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直接调用方需要完全信任。 不能由部分受信任的或透明的代码使用此成员。</permission>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.TypeInitializationException.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeName : string" Usage="System.TypeInitializationException.TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取未能初始化类型的完全限定名。</summary>
        <value>未能初始化类型的完全限定名。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>