<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Environment.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b8f2716206a0d7c4bbbc8310b3ec10e214e0d3af.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b8f2716206a0d7c4bbbc8310b3ec10e214e0d3af</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Environment">
          <source>Provides information about, and means to manipulate, the current environment and platform.</source>
          <target state="translated">提供有关当前环境和平台的信息以及操作它们的方法。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Environment">
          <source>This class cannot be inherited.</source>
          <target state="translated">此类不能被继承。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Environment">
          <source>Use the <ph id="ph1">&lt;xref:System.Environment&gt;</ph> class to retrieve information such as command-line arguments, the exit code, environment variable settings, contents of the call stack, time since last system boot, and the version of the common language runtime.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Environment&gt;</ph>类中检索信息，如命令行自变量，退出代码、 环境变量设置，内容的调用堆栈、 时间由于上一次系统启动和公共语言运行时的版本。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Environment">
          <source>The following example demonstrates displays a list of information about the current environment.</source>
          <target state="translated">下面的示例演示显示有关当前环境的信息的列表。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="P:System.Environment.CommandLine">
          <source>Gets the command line for this process.</source>
          <target state="translated">获取该进程的命令行。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.CommandLine">
          <source>A string containing command-line arguments.</source>
          <target state="translated">包含命令行自变量的字符串。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.CommandLine">
          <source>This property provides access to the program name and any arguments specified on the command line when the current process was started.</source>
          <target state="translated">此属性提供访问权限的程序名称和当前进程启动时在命令行上指定的任何参数。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.CommandLine">
          <source>The program name can  include path information, but is not required to do so.</source>
          <target state="translated">程序名称可以包含路径信息，但不需要这样做。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.CommandLine">
          <source>Use the <ph id="ph1">&lt;xref:System.Environment.GetCommandLineArgs%2A&gt;</ph> method to retrieve the command-line information parsed and stored in an array of strings.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Environment.GetCommandLineArgs%2A&gt;</ph>方法来检索命令行的信息中分析和存储的字符串数组。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.CommandLine">
          <source>The maximum size of the command-line buffer is not set to a specific number of characters; it varies depending on the Windows operating system that is running on the computer.</source>
          <target state="translated">命令行的缓冲区的最大大小未设置为特定数目的字符;它根据计算机运行的 Windows 操作系统而异。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.CommandLine">
          <source>The following example displays its own command line.</source>
          <target state="translated">下面的示例显示了其自己的命令行。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.CommandLine">
          <source>for read access to the PATH environment variable.</source>
          <target state="translated">用于到 PATH 环境变量的读访问。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.CommandLine">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="P:System.Environment.CurrentDirectory">
          <source>Gets or sets the fully qualified path of the current working directory.</source>
          <target state="translated">获取或设置当前工作目录的完全限定路径。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.CurrentDirectory">
          <source>A string containing a directory path.</source>
          <target state="translated">包含目录路径的字符串。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.CurrentDirectory">
          <source>By definition, if this process starts in the root directory of a local or network drive, the value of this property is the drive name followed by a trailing slash (for example, "C:<ph id="ph1">\\</ph>").</source>
          <target state="translated">根据定义，此过程即开始在根目录下的本地或网络驱动器，此属性的值是否尾部反斜杠后接的驱动器名称 (例如，"c:<ph id="ph1">\\</ph>")。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.CurrentDirectory">
          <source>If this process starts in a subdirectory, the value of this property is the drive and subdirectory path, without a trailing slash (for example, "C:\mySubDirectory").</source>
          <target state="translated">如果此过程开始时的子目录，则此属性的值是的驱动器和子目录的路径，而无需尾部反斜杠 (例如，"C:\mySubDirectory")。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.CurrentDirectory">
          <source>The following example demonstrates setting the <ph id="ph1">&lt;xref:System.Environment.CurrentDirectory%2A&gt;</ph> property.</source>
          <target state="translated">下面的示例演示了如何设置<ph id="ph1">&lt;xref:System.Environment.CurrentDirectory%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="P:System.Environment.CurrentDirectory">
          <source>Attempted to set to an empty string ("").</source>
          <target state="translated">已尝试设置为空字符串 ("")。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="P:System.Environment.CurrentDirectory">
          <source>Attempted to set to <ph id="ph1">&lt;see langword="null." /&gt;</ph></source>
          <target state="translated">已尝试设置为 <ph id="ph1">&lt;see langword="null." /&gt;</ph></target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="P:System.Environment.CurrentDirectory">
          <source>An I/O error occurred.</source>
          <target state="translated">出现 I/O 错误。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="P:System.Environment.CurrentDirectory">
          <source>Attempted to set a local path that cannot be found.</source>
          <target state="translated">已尝试设置一个找不到的本地路径。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="P:System.Environment.CurrentDirectory">
          <source>The caller does not have the appropriate permission.</source>
          <target state="translated">调用方没有相应的权限。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.CurrentDirectory">
          <source>for writing to files or directories in a set operation.</source>
          <target state="translated">用于写入到文件或目录在集运算中。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.CurrentDirectory">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.CurrentDirectory">
          <source>for access to the information in the path itself in a get operation.</source>
          <target state="translated">用于访问路径本身在获取操作中的信息。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.CurrentDirectory">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="P:System.Environment.CurrentManagedThreadId">
          <source>Gets a unique identifier for the current managed thread.</source>
          <target state="translated">获取当前托管线程的唯一标识符。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.CurrentManagedThreadId">
          <source>An integer that represents a unique identifier for this managed thread.</source>
          <target state="translated">一个整数，表示此托管线程的唯一标识符。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Environment.Exit(System.Int32)">
          <source>The exit code to return to the operating system.</source>
          <target state="translated">返回到操作系统的退出代码。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Environment.Exit(System.Int32)">
          <source>Use 0 (zero) to indicate that the process completed successfully.</source>
          <target state="translated">使用 0（零）指示处理已成功完成。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Environment.Exit(System.Int32)">
          <source>Terminates this process and returns an exit code to the operating system.</source>
          <target state="translated">终止此进程，并将退出代码返回到操作系统。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.Exit(System.Int32)">
          <source>For the <ph id="ph1">`exitCode`</ph> parameter, use a non-zero number to indicate an error.</source>
          <target state="translated">有关<ph id="ph1">`exitCode`</ph>参数，使用非零编号，以指示错误。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.Exit(System.Int32)">
          <source>In your application, you can define your own error codes in an enumeration, and return the appropriate error code based on the scenario.</source>
          <target state="translated">在你的应用程序，你可以在枚举中定义你自己的错误代码，并返回基于方案的相应的错误代码。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.Exit(System.Int32)">
          <source>For example, return a value of 1 to indicate that the required file is not present, and a value of 2 to indicate that the file is in the wrong format.</source>
          <target state="translated">例如，返回值为 1 以指示所需的文件不存在，以及值为 2，以指示该文件位于错误的格式。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.Exit(System.Int32)">
          <source>For a list of exit codes used by the Windows operating system, see <bpt id="p1">[</bpt>System Error Codes<ept id="p1">](http://msdn.microsoft.com/library/ms681381.aspx)</ept> in the Windows documentation.</source>
          <target state="translated">有关使用 Windows 操作系统的退出代码的列表，请参阅<bpt id="p1">[</bpt>系统错误代码<ept id="p1">](http://msdn.microsoft.com/library/ms681381.aspx)</ept>Windows 文档中。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.Exit(System.Int32)">
          <source>Calling the <ph id="ph1">&lt;xref:System.Environment.Exit%2A&gt;</ph> method differs from using your programming language's <ph id="ph2">`return`</ph> statement in the following ways:</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Environment.Exit%2A&gt;</ph>方法不同于使用您的编程语言的<ph id="ph2">`return`</ph>语句通过以下方式：</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.Exit(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Environment.Exit%2A&gt;</ph> always terminates an application.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Environment.Exit%2A&gt;</ph> 始终终止应用程序。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.Exit(System.Int32)">
          <source>Using the <ph id="ph1">`return`</ph> statement may terminate an application only if it is used in the application entry point, such as in the <ph id="ph2">`Main`</ph> method.</source>
          <target state="translated">使用<ph id="ph1">`return`</ph>语句可能会终止应用程序，仅当在使用该应用程序入口点，如在<ph id="ph2">`Main`</ph>方法。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.Exit(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Environment.Exit%2A&gt;</ph> terminates an application immediately, even if other threads are running.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Environment.Exit%2A&gt;</ph> 应用程序将立即终止，即使其他线程正在运行。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.Exit(System.Int32)">
          <source>If the <ph id="ph1">`return`</ph> statement is called in the application entry point, it causes an application to terminate only after all foreground threads have terminated.</source>
          <target state="translated">如果<ph id="ph1">`return`</ph>语句调用的应用程序入口点，这会导致应用程序终止只有在所有前台线程已都终止后。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.Exit(System.Int32)">
          <source><ph id="ph1">&lt;xref:System.Environment.Exit%2A&gt;</ph> requires the caller to have permission to call unmanaged code.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Environment.Exit%2A&gt;</ph> 要求调用方有权调用非托管的代码。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.Exit(System.Int32)">
          <source>The <ph id="ph1">`return`</ph> statement does not.</source>
          <target state="translated"><ph id="ph1">`return`</ph>语句却没有。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.Exit(System.Int32)">
          <source>If <ph id="ph1">&lt;xref:System.Environment.Exit%2A&gt;</ph> is called from a <ph id="ph2">`try`</ph> or <ph id="ph3">`catch`</ph> block, the code in any <ph id="ph4">`finally`</ph> block does not execute.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Environment.Exit%2A&gt;</ph>从调用<ph id="ph2">`try`</ph>或<ph id="ph3">`catch`</ph>阻止，请在任何代码<ph id="ph4">`finally`</ph>块不会执行。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.Exit(System.Int32)">
          <source>If the <ph id="ph1">`return`</ph> statement is used, the code in the <ph id="ph2">`finally`</ph> block does execute.</source>
          <target state="translated">如果<ph id="ph1">`return`</ph>使用语句中的代码<ph id="ph2">`finally`</ph>块会执行。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.Exit(System.Int32)">
          <source>If <ph id="ph1">&lt;xref:System.Environment.Exit%2A&gt;</ph> is called when code in a <bpt id="p1">[</bpt>constrained execution region<ept id="p1">](~/docs/framework/performance/constrained-execution-regions.md)</ept> (CER) is running, the CER will not complete execution.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Environment.Exit%2A&gt;</ph>时，将调用中的代码<bpt id="p1">[</bpt>受约束的执行区域<ept id="p1">](~/docs/framework/performance/constrained-execution-regions.md)</ept>(CER) 正在运行，CER 将不会完成执行。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.Exit(System.Int32)">
          <source>If the <ph id="ph1">`return`</ph> statement is used, the CER completes execution.</source>
          <target state="translated">如果<ph id="ph1">`return`</ph>使用语句后，CER 完成执行。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Environment.Exit(System.Int32)">
          <source>The caller does not have sufficient security permission to perform this function.</source>
          <target state="translated">调用方没有足够的安全权限来执行此函数。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.Exit(System.Int32)">
          <source>for the ability to call unmanaged code.</source>
          <target state="translated">表示调用非托管的代码的能力。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.Exit(System.Int32)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="P:System.Environment.ExitCode">
          <source>Gets or sets the exit code of the process.</source>
          <target state="translated">获取或设置进程的退出代码。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.ExitCode">
          <source>A 32-bit signed integer containing the exit code.</source>
          <target state="translated">包含退出代码的 32 位有符号整数。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.ExitCode">
          <source>The default value is 0 (zero), which indicates that the process completed successfully.</source>
          <target state="translated">默认值为 0（零），这指示已成功完成处理。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.ExitCode">
          <source>If the <ph id="ph1">`Main`</ph> method returns <ph id="ph2">`void`</ph>, you can use this property to set the exit code that will be returned to the calling environment.</source>
          <target state="translated">如果<ph id="ph1">`Main`</ph>方法返回<ph id="ph2">`void`</ph>，你可以使用此属性设置将返回到调用的环境的退出代码。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.ExitCode">
          <source>If <ph id="ph1">`Main`</ph> does not return <ph id="ph2">`void`</ph>, this property is ignored.</source>
          <target state="translated">如果<ph id="ph1">`Main`</ph>不返回<ph id="ph2">`void`</ph>，将忽略此属性。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.ExitCode">
          <source>The initial value of this property is zero.</source>
          <target state="translated">此属性的初始值为零。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.ExitCode">
          <source>The <ph id="ph1">&lt;xref:System.Environment.ExitCode%2A&gt;</ph> property is a signed 32-bit integer.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Environment.ExitCode%2A&gt;</ph>属性是一个带符号的 32 位整数。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.ExitCode">
          <source>To prevent the property from returning a negative exit code, you should not use values greater than or equal to 0x80000000.</source>
          <target state="translated">若要防止该属性返回负的退出代码，不应使用的值大于或等于 0x80000000。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.ExitCode">
          <source>Use a non-zero number to indicate an error.</source>
          <target state="translated">使用非零数字以指示错误。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.ExitCode">
          <source>In your application, you can define your own error codes in an enumeration, and return the appropriate error code based on the scenario.</source>
          <target state="translated">在你的应用程序，你可以在枚举中定义你自己的错误代码，并返回基于方案的相应的错误代码。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.ExitCode">
          <source>For example, return a value of 1 to indicate that the required file is not present and a value of 2 to indicate that the file is in the wrong format.</source>
          <target state="translated">例如，返回值为 1 以指示所需的文件不存在和值为 2，以指示该文件位于错误的格式。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.ExitCode">
          <source>For a list of exit codes used by the Windows operating system, see <bpt id="p1">[</bpt>System Error Codes<ept id="p1">](http://msdn.microsoft.com/library/ms681381\(v=vs.85\))</ept> in the Windows documentation.</source>
          <target state="translated">有关使用 Windows 操作系统的退出代码的列表，请参阅<bpt id="p1">[</bpt>系统错误代码<ept id="p1">](http://msdn.microsoft.com/library/ms681381\(v=vs.85\))</ept>Windows 文档中。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.ExitCode">
          <source>The following is a simple app named Double.exe that doubles an integer value passed to it as a command-line argument.</source>
          <target state="translated">下面是名为 Double.exe 两倍，作为命令行自变量传递给它的整数值的简单应用程序。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.ExitCode">
          <source>The value assigns error codes to the <ph id="ph1">&lt;xref:System.Environment.ExitCode%2A&gt;</ph> property to indicate error conditions.</source>
          <target state="translated">值将分配到的错误代码<ph id="ph1">&lt;xref:System.Environment.ExitCode%2A&gt;</ph>属性以指示错误条件。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.ExitCode">
          <source>Note that you must add a reference to the System.Numerics.dll assembly to successfully compile the example.</source>
          <target state="translated">请注意，您必须添加对要成功编译此示例的 System.Numerics.dll 程序集的引用。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.ExitCode">
          <source>The example can then be invoked from a batch file such as the following, which makes its error codes accessible by using the <ph id="ph1">`ERRORLEVEL`</ph> command.</source>
          <target state="translated">然后可以从批处理文件，如下所示，使其错误代码可访问通过调用该示例<ph id="ph1">`ERRORLEVEL`</ph>命令。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.ExitCode">
          <source>The following shows some sample output produced by invoking the batch file.</source>
          <target state="translated">下图显示产生通过调用批处理文件的一些示例输出。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.ExitCode">
          <source>Note that code for Double.exe is identical in function to the following example, except that the former defines an entry point named <ph id="ph1">`Main`</ph> that has no return value, whereas this example defines an entry point named <ph id="ph2">`Main`</ph> that returns an integer.</source>
          <target state="translated">请注意该代码，Double.exe 为与以下示例中，函数相同，只不过前者定义名为的入口点<ph id="ph1">`Main`</ph>，其没有返回值，而此示例定义了名为的入口点<ph id="ph2">`Main`</ph>返回一个整数。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Environment.ExpandEnvironmentVariables(System.String)">
          <source>A string containing the names of zero or more environment variables.</source>
          <target state="translated">包含零个或多个环境变量名的字符串。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Environment.ExpandEnvironmentVariables(System.String)">
          <source>Each environment variable is quoted with the percent sign character (%).</source>
          <target state="translated">每个环境变量都用百分号 (%) 引起来。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Environment.ExpandEnvironmentVariables(System.String)">
          <source>Replaces the name of each environment variable embedded in the specified string with the string equivalent of the value of the variable, then returns the resulting string.</source>
          <target state="translated">将嵌入到指定字符串中的每个环境变量的名称替换为该变量的值的等效字符串，然后返回结果字符串。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Environment.ExpandEnvironmentVariables(System.String)">
          <source>A string with each environment variable replaced by its value.</source>
          <target state="translated">一个字符串，其中的每个环境变量均被替换为该变量的值。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.ExpandEnvironmentVariables(System.String)">
          <source>COM interop is used to retrieve the environment variables from the operating system.</source>
          <target state="translated">COM 互操作用于从操作系统中检索环境变量。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.ExpandEnvironmentVariables(System.String)">
          <source>If the environment variables cannot be retrieved due to a COM error, the HRESULT that explains the cause of the failure is used to generate one of several possible exceptions; that is, the exception depends on the HRESULT.</source>
          <target state="translated">生成一个几个可能的异常; 如果由于 COM 错误，无法检索环境变量，用于说明失败的原因的 HRESULT也就是说，异常取决于相应的 HRESULT。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.ExpandEnvironmentVariables(System.String)">
          <source>For more information about how the HRESULT is processed, see the Remarks section of the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">有关如何处理 HRESULT 的详细信息，请参阅备注部分的<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.ExpandEnvironmentVariables(System.String)">
          <source>Replacement only occurs for environment variables that are set.</source>
          <target state="translated">环境变量设置才会被替换。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.ExpandEnvironmentVariables(System.String)">
          <source>For example, suppose <ph id="ph1">`name`</ph> is "MyENV = %MyENV%".</source>
          <target state="translated">例如，假设<ph id="ph1">`name`</ph>是"MyENV = %myenv%"。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.ExpandEnvironmentVariables(System.String)">
          <source>If the environment variable, MyENV, is set to 42, this method returns "MyENV = 42".</source>
          <target state="translated">如果环境变量，MyENV，设置为 42，则此方法将返回"MyENV = 42"。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.ExpandEnvironmentVariables(System.String)">
          <source>If MyENV is not set, no change occurs; this method returns "MyENV = %MyENV%".</source>
          <target state="translated">如果未设置 MyENV，不会发生更改;此方法返回"MyENV = %myenv%"。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.ExpandEnvironmentVariables(System.String)">
          <source>The size of the return value is limited to 32K.</source>
          <target state="translated">返回值的大小被限制为 32k。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.ExpandEnvironmentVariables(System.String)">
          <source>The following example shows how to obtain the system drive and system root variables.</source>
          <target state="translated">下面的示例演示如何获取系统驱动器和系统根变量。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Environment.ExpandEnvironmentVariables(System.String)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.ExpandEnvironmentVariables(System.String)">
          <source>for the ability to access the environment variables in <ph id="ph1">&lt;paramref name="name" /&gt;</ph>.</source>
          <target state="translated">它能够访问中的环境变量<ph id="ph1">&lt;paramref name="name" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.ExpandEnvironmentVariables(System.String)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="T:System.Environment">
          <source>Immediately terminates a process after writing a message to the Windows Application event log, and then includes the message and optional exception information in error reporting to Microsoft.</source>
          <target state="translated">向 Windows 的应用程序事件日志写入消息后立即终止进程，然后在发往 Microsoft 的错误报告中加入该消息和可选的异常信息。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Environment.FailFast(System.String)">
          <source>A message that explains why the process was terminated, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no explanation is provided.</source>
          <target state="translated">一条解释进程终止原因的消息；如果未提供解释，则为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Environment.FailFast(System.String)">
          <source>Immediately terminates a process after writing a message to the Windows Application event log, and then includes the message in error reporting to Microsoft.</source>
          <target state="translated">向 Windows 的应用程序事件日志写入消息后立即终止进程，然后在发往 Microsoft 的错误报告中加入该消息。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.FailFast(System.String)">
          <source>This method terminates a process without running any active <ph id="ph1">`try`</ph><ph id="ph2">/</ph><ph id="ph3">`finally`</ph> blocks or finalizers.</source>
          <target state="translated">此方法终止进程，而无需运行任何活动<ph id="ph1">`try`</ph> <ph id="ph2">/</ph> <ph id="ph3">`finally`</ph>块或终结器。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.FailFast(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Environment.FailFast%2A&gt;</ph> method writes the <ph id="ph2">`message`</ph> string to the Windows Application event log, creates a dump of your application, and then terminates the current process.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Environment.FailFast%2A&gt;</ph>方法写入<ph id="ph2">`message`</ph>字符串保存到 Windows 应用程序事件日志中，创建你的应用程序的转储，然后终止当前进程。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.FailFast(System.String)">
          <source>The <ph id="ph1">`message`</ph> string is also included in error reporting to Microsoft.</source>
          <target state="translated"><ph id="ph1">`message`</ph>字符串还包含在向 Microsoft 报告的错误。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.FailFast(System.String)">
          <source>Use the <ph id="ph1">&lt;xref:System.Environment.FailFast%2A&gt;</ph> method instead of the <ph id="ph2">&lt;xref:System.Environment.Exit%2A&gt;</ph> method to terminate your application if the state of your application is damaged beyond repair, and executing your application's <ph id="ph3">`try`</ph><ph id="ph4">/</ph><ph id="ph5">`finally`</ph> blocks and finalizers will corrupt program resources.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Environment.FailFast%2A&gt;</ph>方法而不是<ph id="ph2">&lt;xref:System.Environment.Exit%2A&gt;</ph>方法终止你的应用程序，如果你的应用程序的状态已损坏并且无法修复，并执行应用程序的<ph id="ph3">`try`</ph> <ph id="ph4">/</ph> <ph id="ph5">`finally`</ph>块和终结器将损坏程序资源。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.FailFast(System.String)">
          <source>Information is reported to Microsoft by using Windows Error Reporting.</source>
          <target state="translated">通过使用 Windows 错误报告情况下，信息报告给 Microsoft。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.FailFast(System.String)">
          <source>For more information, see <bpt id="p1">[</bpt>Windows Error Reporting: Getting Started<ept id="p1">](http://msdn.microsoft.com/library/windows/hardware/dn641144.aspx)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>Windows 错误报告： 入门<ept id="p1">](http://msdn.microsoft.com/library/windows/hardware/dn641144.aspx)</ept>。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.FailFast(System.String)">
          <source>The following example writes a log entry to the Windows Application event log and terminates the current process.</source>
          <target state="translated">下面的示例日志条目写入 Windows 应用程序事件日志，并终止当前进程。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.FailFast(System.String)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.FailFast(System.String)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Environment.FailFast(System.String,System.Exception)">
          <source>A message that explains why the process was terminated, or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no explanation is provided.</source>
          <target state="translated">一条解释进程终止原因的消息；如果未提供解释，则为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Environment.FailFast(System.String,System.Exception)">
          <source>An exception that represents the error that caused the termination.</source>
          <target state="translated">一个异常，表示导致终止的错误。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Environment.FailFast(System.String,System.Exception)">
          <source>This is typically the exception in a <ph id="ph1">&lt;see langword="catch" /&gt;</ph> block.</source>
          <target state="translated">通常这是 <ph id="ph1">&lt;see langword="catch" /&gt;</ph> 块中的异常。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.Environment.FailFast(System.String,System.Exception)">
          <source>Immediately terminates a process after writing a message to the Windows Application event log, and then includes the message and exception information in error reporting to Microsoft.</source>
          <target state="translated">向 Windows 的应用程序事件日志写入消息后立即终止进程，然后在发往 Microsoft 的错误报告中加入该消息和异常信息。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.FailFast(System.String,System.Exception)">
          <source>This method terminates the process without running any active <ph id="ph1">`try`</ph><ph id="ph2">/</ph><ph id="ph3">`finally`</ph> blocks or finalizers.</source>
          <target state="translated">此方法会终止进程，而无需运行任何活动<ph id="ph1">`try`</ph> <ph id="ph2">/</ph> <ph id="ph3">`finally`</ph>块或终结器。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.FailFast(System.String,System.Exception)">
          <source>The <ph id="ph1">&lt;xref:System.Environment.FailFast%2A&gt;</ph> method writes the <ph id="ph2">`message`</ph> string to the Windows Application event log, creates a dump of your application, and then terminates the current process.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Environment.FailFast%2A&gt;</ph>方法写入<ph id="ph2">`message`</ph>字符串保存到 Windows 应用程序事件日志中，创建你的应用程序的转储，然后终止当前进程。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.FailFast(System.String,System.Exception)">
          <source>Information is reported to Microsoft by using Windows Error Reporting.</source>
          <target state="translated">通过使用 Windows 错误报告情况下，信息报告给 Microsoft。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.FailFast(System.String,System.Exception)">
          <source>For more information, see <bpt id="p1">[</bpt>Windows Error Reporting: Getting Started<ept id="p1">](http://msdn.microsoft.com/library/windows/hardware/dn641144.aspx)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>Windows 错误报告： 入门<ept id="p1">](http://msdn.microsoft.com/library/windows/hardware/dn641144.aspx)</ept>。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.FailFast(System.String,System.Exception)">
          <source>Error reporting to Microsoft includes <ph id="ph1">`message`</ph> and <ph id="ph2">`exception`</ph> information, which provides details used to classify the error.</source>
          <target state="translated">向 Microsoft 报告的错误包括<ph id="ph1">`message`</ph>和<ph id="ph2">`exception`</ph>提供用于对分类错误的详细信息的信息。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.FailFast(System.String,System.Exception)">
          <source>Although <ph id="ph1">`exception`</ph> is not handled because the process is terminated, the contextual information that raised the exception is still obtained.</source>
          <target state="translated">尽管<ph id="ph1">`exception`</ph>不是处理，因为该进程将终止，仍获取引发异常的上下文信息。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.FailFast(System.String,System.Exception)">
          <source>If <ph id="ph1">`exception`</ph> is <ph id="ph2">`null`</ph>, or if <ph id="ph3">`exception`</ph> is not thrown, this method operates the same as the <ph id="ph4">&lt;xref:System.Environment.FailFast%28System.String%29&gt;</ph> method overload.</source>
          <target state="translated">如果<ph id="ph1">`exception`</ph>是<ph id="ph2">`null`</ph>，或者如果<ph id="ph3">`exception`</ph>是不会引发，此方法的操作与相同<ph id="ph4">&lt;xref:System.Environment.FailFast%28System.String%29&gt;</ph>方法重载。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.FailFast(System.String,System.Exception)">
          <source>Use the <ph id="ph1">&lt;xref:System.Environment.FailFast%2A&gt;</ph> method instead of the <ph id="ph2">&lt;xref:System.Environment.Exit%2A&gt;</ph> method to terminate your application if the state of your application is damaged beyond repair, and executing your application's <ph id="ph3">`try`</ph><ph id="ph4">/</ph><ph id="ph5">`finally`</ph> blocks and finalizers will corrupt program resources.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Environment.FailFast%2A&gt;</ph>方法而不是<ph id="ph2">&lt;xref:System.Environment.Exit%2A&gt;</ph>方法终止你的应用程序，如果你的应用程序的状态已损坏并且无法修复，并执行应用程序的<ph id="ph3">`try`</ph> <ph id="ph4">/</ph> <ph id="ph5">`finally`</ph>块和终结器将损坏程序资源。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.FailFast(System.String,System.Exception)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.FailFast(System.String,System.Exception)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Environment.GetCommandLineArgs">
          <source>Returns a string array containing the command-line arguments for the current process.</source>
          <target state="translated">返回包含当前进程的命令行自变量的字符串数组。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Environment.GetCommandLineArgs">
          <source>An array of string where each element contains a command-line argument.</source>
          <target state="translated">字符串数组，其中的每个元素都包含一个命令行自变量。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Environment.GetCommandLineArgs">
          <source>The first element is the executable file name, and the following zero or more elements contain the remaining command-line arguments.</source>
          <target state="translated">第一个元素是可执行文件名，后面的零个或多个元素包含其余的命令行自变量。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetCommandLineArgs">
          <source>The first element in the array contains the file name of the executing program.</source>
          <target state="translated">数组中的第一个元素包含执行程序的文件的名称。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetCommandLineArgs">
          <source>If the file name is not available, the first element is equal to <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">如果文件名称不可用，则第一个元素等同于<ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetCommandLineArgs">
          <source>The remaining elements contain any additional tokens entered on the command line.</source>
          <target state="translated">剩余的元素包含在命令行中输入任何其他令牌。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetCommandLineArgs">
          <source>The program file name can, but is not required to, include path information.</source>
          <target state="translated">程序文件名称可以但不是需要，包含路径信息。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetCommandLineArgs">
          <source>Command line arguments are delimited by spaces.</source>
          <target state="translated">命令行参数由空格分隔。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetCommandLineArgs">
          <source>You can use double quotation marks (") to include spaces within an argument.</source>
          <target state="translated">可以使用两个双引号 （"） 包含在参数中的空格。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetCommandLineArgs">
          <source>The single quotation mark ('), however, does not provide this functionality.</source>
          <target state="translated">单引号 （'），但是，不提供此功能。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetCommandLineArgs">
          <source>If a double quotation mark follows two or an even number of backslashes, each proceeding backslash pair is replaced with one backslash and the double quotation mark is removed.</source>
          <target state="translated">如果两个或偶数个反斜杠后跟双引号，每个继续反斜杠对将被替换为一个反斜杠，并且双引号被删除。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetCommandLineArgs">
          <source>If a double quotation mark follows an odd number of backslashes, including just one, each preceding pair is replaced with one backslash and the remaining backslash is removed; however, in this case the double quotation mark is not removed.</source>
          <target state="translated">如果双引号遵循奇数数目的反斜杠，包括仅仅是一个，每个前面对将被替换为一个反斜杠，并且会删除其余的反斜杠;但是，在这种情况下双引号不删除。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetCommandLineArgs">
          <source>The following table shows how command line arguments can be delimited, and assumes <ph id="ph1">`MyApp`</ph> as the current executing application.</source>
          <target state="translated">下表演示了如何命令行自变量可以进行分隔，并假定<ph id="ph1">`MyApp`</ph>作为当前正在执行的应用程序。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetCommandLineArgs">
          <source>Input at the command line</source>
          <target state="translated">在命令行输入</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetCommandLineArgs">
          <source>Resulting command line arguments</source>
          <target state="translated">生成命令行参数</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetCommandLineArgs">
          <source>To obtain the command line as a single string, use the <ph id="ph1">&lt;xref:System.Environment.CommandLine%2A&gt;</ph> property.</source>
          <target state="translated">若要获取作为单个字符串的命令行，使用<ph id="ph1">&lt;xref:System.Environment.CommandLine%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetCommandLineArgs">
          <source>The following example displays the application's command line arguments.</source>
          <target state="translated">下面的示例显示了应用程序的命令行自变量。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Environment.GetCommandLineArgs">
          <source>The system does not support command-line arguments.</source>
          <target state="translated">系统不支持命令行参数。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetCommandLineArgs">
          <source>for read access to the PATH environment variable.</source>
          <target state="translated">用于到 PATH 环境变量的读访问。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetCommandLineArgs">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="T:System.Environment">
          <source>Retrieves the value of an environment variable.</source>
          <target state="translated">检索环境变量的值。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Environment.GetEnvironmentVariable(System.String)">
          <source>The name of the environment variable.</source>
          <target state="translated">环境变量名。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Environment.GetEnvironmentVariable(System.String)">
          <source>Retrieves the value of an environment variable from the current process.</source>
          <target state="translated">从当前进程检索环境变量的值。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Environment.GetEnvironmentVariable(System.String)">
          <source>The value of the environment variable specified by <ph id="ph1">&lt;paramref name="variable" /&gt;</ph>, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the environment variable is not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="variable" /&gt;</ph> 指定的环境变量的值；或者如果找不到环境变量，则返回 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariable(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Environment.GetEnvironmentVariable%28System.String%29&gt;</ph> method retrieves an environment variable from the environment block of the current process only.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Environment.GetEnvironmentVariable%28System.String%29&gt;</ph>方法从当前进程的环境块检索环境变量。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariable(System.String)">
          <source>It is equivalent to calling the <ph id="ph1">&lt;xref:System.Environment.GetEnvironmentVariable%28System.String%2CSystem.EnvironmentVariableTarget%29&gt;</ph> method with a <ph id="ph2">`target`</ph> value of <ph id="ph3">&lt;xref:System.EnvironmentVariableTarget.Process?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">它等效于调用<ph id="ph1">&lt;xref:System.Environment.GetEnvironmentVariable%28System.String%2CSystem.EnvironmentVariableTarget%29&gt;</ph>方法替换<ph id="ph2">`target`</ph>值<ph id="ph3">&lt;xref:System.EnvironmentVariableTarget.Process?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariable(System.String)">
          <source>The environment block of the current process includes the following environment variables:</source>
          <target state="translated">当前进程的环境块包括以下环境变量：</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariable(System.String)">
          <source>All per-machine environment variables that are defined at the time the process is created, along with their values.</source>
          <target state="translated">所有每台计算机在创建的过程，以及它们的值时定义的环境变量。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariable(System.String)">
          <source>All per-user environment variables that are defined at the time the process is created, along with their values.</source>
          <target state="translated">该过程被创建时定义的所有用户每个环境变量，以及它们的值。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariable(System.String)">
          <source>Any variables added to the process block while the process is running by calling either the <ph id="ph1">&lt;xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%29&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%2CSystem.EnvironmentVariableTarget%29&gt;</ph> method with a <ph id="ph3">`target`</ph> value of <ph id="ph4">&lt;xref:System.EnvironmentVariableTarget.Process?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">添加到的处理块中，当进程运行时通过调用任何变量<ph id="ph1">&lt;xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%29&gt;</ph>方法或<ph id="ph2">&lt;xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%2CSystem.EnvironmentVariableTarget%29&gt;</ph>方法替换<ph id="ph3">`target`</ph>值<ph id="ph4">&lt;xref:System.EnvironmentVariableTarget.Process?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariable(System.String)">
          <source>If environment variables are created after the process has started, you can use this method to retrieve only those variables that were created by calling the <ph id="ph1">&lt;xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%29&gt;</ph> method or the <ph id="ph2">&lt;xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%2CSystem.EnvironmentVariableTarget%29&gt;</ph> method with a <ph id="ph3">`target`</ph> value of .<ph id="ph4">&lt;xref:System.EnvironmentVariableTarget.Process?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">如果进程启动后创建环境变量，你可以使用此方法来检索已通过调用创建的这些变量<ph id="ph1">&lt;xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%29&gt;</ph>方法或<ph id="ph2">&lt;xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%2CSystem.EnvironmentVariableTarget%29&gt;</ph>方法替换<ph id="ph3">`target`</ph>的值。<ph id="ph4">&lt;xref:System.EnvironmentVariableTarget.Process?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariable(System.String)">
          <source>To retrieve all environment variables along with their values, call the <ph id="ph1">&lt;xref:System.Environment.GetEnvironmentVariables%2A&gt;</ph> method.</source>
          <target state="translated">若要检索所有环境变量，以及它们的值，调用<ph id="ph1">&lt;xref:System.Environment.GetEnvironmentVariables%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariable(System.String)">
          <source>Environment variable names are not case-sensitive.</source>
          <target state="translated">环境变量名不区分大小写。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariable(System.String)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Environment.GetEnvironmentVariable%2A&gt;</ph> method to retrieve the <ph id="ph2">`windir`</ph> environment variable, which contains the path of the Windows directory.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.Environment.GetEnvironmentVariable%2A&gt;</ph>方法来检索<ph id="ph2">`windir`</ph>环境变量，其中包含 Windows 目录的路径。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariable(System.String)">
          <source>The following example attempts to retrieve the value of an environment variable named <ph id="ph1">`Test1`</ph> from the process environment block.</source>
          <target state="translated">以下示例尝试检索名为的环境变量的值<ph id="ph1">`Test1`</ph>从进程环境块。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariable(System.String)">
          <source>If the variable doesn't exist, the example creates its and retrieves its value.</source>
          <target state="translated">如果不存在该变量，该示例将创建其并检索其值。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariable(System.String)">
          <source>The example displays the value of the variable.</source>
          <target state="translated">此示例显示变量的值。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariable(System.String)">
          <source>If the example created the variable, it also calls the <ph id="ph1">&lt;xref:System.Environment.GetEnvironmentVariables%28System.EnvironmentVariableTarget%29&gt;</ph> method with each member of the <ph id="ph2">&lt;xref:System.EnvironmentVariableTarget&gt;</ph> enumeration to establish that the variable can be retrieved only from the current process environment block.</source>
          <target state="translated">如果该示例创建变量，它还会调用<ph id="ph1">&lt;xref:System.Environment.GetEnvironmentVariables%28System.EnvironmentVariableTarget%29&gt;</ph>方法的每个成员<ph id="ph2">&lt;xref:System.EnvironmentVariableTarget&gt;</ph>枚举，以建立只能从当前进程环境块中，可以检索该变量。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariable(System.String)">
          <source>Finally, if the example created the variable, it deletes it.</source>
          <target state="translated">最后，如果该示例创建变量，将其删除。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Environment.GetEnvironmentVariable(System.String)">
          <source><ph id="ph1">&lt;paramref name="variable" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="variable" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Environment.GetEnvironmentVariable(System.String)">
          <source>The caller does not have the required permission to perform this operation.</source>
          <target state="translated">调用方没有执行此操作所需的权限。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariable(System.String)">
          <source>for the ability to read the value of <ph id="ph1">&lt;paramref name="variable" /&gt;</ph>.</source>
          <target state="translated">它能够读取的值<ph id="ph1">&lt;paramref name="variable" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariable(System.String)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)">
          <source>The name of an environment variable.</source>
          <target state="translated">环境变量名。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.EnvironmentVariableTarget" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.EnvironmentVariableTarget" /&gt;</ph> 值之一。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)">
          <source>Retrieves the value of an environment variable from the current process or from the Windows operating system registry key for the current user or local machine.</source>
          <target state="translated">从当前进程或者从当前用户或本地计算机的 Windows 操作系统注册表项检索环境变量的值。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)">
          <source>The value of the environment variable specified by the <ph id="ph1">&lt;paramref name="variable" /&gt;</ph> and <ph id="ph2">&lt;paramref name="target" /&gt;</ph> parameters, or <ph id="ph3">&lt;see langword="null" /&gt;</ph> if the environment variable is not found.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="variable" /&gt;</ph> 和 <ph id="ph2">&lt;paramref name="target" /&gt;</ph> 参数指定的环境变量的值；或者如果找不到环境变量，则返回 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)">
          <source>The <ph id="ph1">`target`</ph> parameter specifies whether the environment variable is retrieved from the current process or from the Windows operating system registry key for the current user or local machine.</source>
          <target state="translated"><ph id="ph1">`target`</ph>参数指定是否从当前进程或者从当前用户或本地计算机的 Windows 操作系统注册表项检索环境变量。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)">
          <source>All per-user and per-machine environment variables are automatically copied into the environment block of the current process.</source>
          <target state="translated">每用户扩展和每台计算机的所有环境变量会自动都复制到当前进程的环境块。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)">
          <source>However, environment variables added only to the environment block of the current process  persist only for the duration of the process.</source>
          <target state="translated">但是，环境变量添加到当前进程的环境块仅保持不变仅过程的持续时间。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)">
          <source>To retrieve all environment variables along with their values, call the <ph id="ph1">&lt;xref:System.Environment.GetEnvironmentVariables%2A&gt;</ph> method.</source>
          <target state="translated">若要检索所有环境变量，以及它们的值，调用<ph id="ph1">&lt;xref:System.Environment.GetEnvironmentVariables%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)">
          <source>Environment variable names are not case-sensitive.</source>
          <target state="translated">环境变量名不区分大小写。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)">
          <source>The following example creates environment variables for the Process, User, and Machine targets, checks whether the operating system registry contains the User and Machine environment variables, then deletes the environment variables.</source>
          <target state="translated">下面的示例创建的过程、 用户和计算机的目标的环境变量，检查是否操作系统注册表包含用户和计算机环境变量，则会删除的环境变量。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)">
          <source><ph id="ph1">&lt;paramref name="variable" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="variable" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)">
          <source><ph id="ph1">&lt;paramref name="target" /&gt;</ph> is not a valid <ph id="ph2">&lt;see cref="T:System.EnvironmentVariableTarget" /&gt;</ph> value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="target" /&gt;</ph> 不是有效的 <ph id="ph2">&lt;see cref="T:System.EnvironmentVariableTarget" /&gt;</ph> 值。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)">
          <source>The caller does not have the required permission to perform this operation.</source>
          <target state="translated">调用方没有执行此操作所需的权限。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)">
          <source>for the ability to read the value of <ph id="ph1">&lt;paramref name="variable" /&gt;</ph> if <ph id="ph2">&lt;paramref name="target" /&gt;</ph> is <ph id="ph3">&lt;see cref="F:System.EnvironmentVariableTarget.Process" /&gt;</ph> (Associated enumeration: <ph id="ph4">&lt;see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /&gt;</ph>),</source>
          <target state="translated">它能够读取的值<ph id="ph1">&lt;paramref name="variable" /&gt;</ph>如果<ph id="ph2">&lt;paramref name="target" /&gt;</ph>是<ph id="ph3">&lt;see cref="F:System.EnvironmentVariableTarget.Process" /&gt;</ph>(关联的枚举： <ph id="ph4">&lt;see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /&gt;</ph>)，</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)">
          <source>or</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)">
          <source>for full access to environment variables if <ph id="ph1">&lt;paramref name="target" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.EnvironmentVariableTarget.User" /&gt;</ph> or <ph id="ph3">&lt;see cref="F:System.EnvironmentVariableTarget.Machine" /&gt;</ph> (Associated enumeration: <ph id="ph4">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph>).</source>
          <target state="translated">对环境变量的完全访问权限如果<ph id="ph1">&lt;paramref name="target" /&gt;</ph>是<ph id="ph2">&lt;see cref="F:System.EnvironmentVariableTarget.User" /&gt;</ph>或<ph id="ph3">&lt;see cref="F:System.EnvironmentVariableTarget.Machine" /&gt;</ph>(关联的枚举： <ph id="ph4">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="T:System.Environment">
          <source>Retrieves all environment variable names and their values.</source>
          <target state="translated">检索所有环境变量名及其值。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Environment.GetEnvironmentVariables">
          <source>Retrieves all environment variable names and their values from the current process.</source>
          <target state="translated">从当前进程检索所有环境变量名及其值。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Environment.GetEnvironmentVariables">
          <source>A dictionary that contains all environment variable names and their values; otherwise, an empty dictionary if no environment variables are found.</source>
          <target state="translated">包含所有环境变量名及其值的字典；如果找不到任何环境变量，则返回空字典。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariables">
          <source>The names and values for the environment variables are stored as key-value pairs in the returned <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph>.</source>
          <target state="translated">名称和环境变量的值存储为在返回的键 / 值对<ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariables">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Environment.GetEnvironmentVariables%2A&gt;</ph> method.</source>
          <target state="translated">下面的示例演示<ph id="ph1">&lt;xref:System.Environment.GetEnvironmentVariables%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Environment.GetEnvironmentVariables">
          <source>The caller does not have the required permission to perform this operation.</source>
          <target state="translated">调用方没有执行此操作所需的权限。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Environment.GetEnvironmentVariables">
          <source>The buffer is out of memory.</source>
          <target state="translated">缓冲区内存不足。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariables">
          <source>for the ability to read the names and values of environment variables.</source>
          <target state="translated">它能够读取的名称和环境变量的值。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariables">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Environment.GetEnvironmentVariables(System.EnvironmentVariableTarget)">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.EnvironmentVariableTarget" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.EnvironmentVariableTarget" /&gt;</ph> 值之一。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Environment.GetEnvironmentVariables(System.EnvironmentVariableTarget)">
          <source>Retrieves all environment variable names and their values from the current process, or from the Windows operating system registry key for the current user or local machine.</source>
          <target state="translated">从当前进程或者从当前用户或本地计算机的 Windows 操作系统注册表项检索所有环境变量名及其值。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Environment.GetEnvironmentVariables(System.EnvironmentVariableTarget)">
          <source>A dictionary that contains all environment variable names and their values from the source specified by the <ph id="ph1">&lt;paramref name="target" /&gt;</ph> parameter; otherwise, an empty dictionary if no environment variables are found.</source>
          <target state="translated">包含 <ph id="ph1">&lt;paramref name="target" /&gt;</ph> 参数所指定的源中所有环境变量名及其值的字典；否则，如果找不到任何环境变量，则返回空字典。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariables(System.EnvironmentVariableTarget)">
          <source>The <ph id="ph1">`target`</ph> parameter specifies whether the source is the current process, the registry key for the current user, or the registry key for the local machine.</source>
          <target state="translated"><ph id="ph1">`target`</ph>参数指定的源是当前进程、 当前用户，注册表项或本地计算机的注册表项。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariables(System.EnvironmentVariableTarget)">
          <source>The names and values of the environment variables are stored as key/value pairs in the returned <ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph> object.</source>
          <target state="translated">名称和环境变量的值存储在返回的键/值对为<ph id="ph1">&lt;xref:System.Collections.IDictionary&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariables(System.EnvironmentVariableTarget)">
          <source>The following example creates environment variables for the Process, User, and Machine targets, checks whether the operating system registry contains the User and Machine environment variables, then deletes the environment variables.</source>
          <target state="translated">下面的示例创建的过程、 用户和计算机的目标的环境变量，检查是否操作系统注册表包含用户和计算机环境变量，则会删除的环境变量。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" uid="M:System.Environment.GetEnvironmentVariables(System.EnvironmentVariableTarget)">
          <source>The caller does not have the required permission to perform this operation for the specified value of <ph id="ph1">&lt;paramref name="target" /&gt;</ph>.</source>
          <target state="translated">调用方没有为 <ph id="ph1">&lt;paramref name="target" /&gt;</ph> 的指定值执行此操作所需具备的权限。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Environment.GetEnvironmentVariables(System.EnvironmentVariableTarget)">
          <source><ph id="ph1">&lt;paramref name="target" /&gt;</ph> contains an illegal value.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="target" /&gt;</ph> 包含非法值。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariables(System.EnvironmentVariableTarget)">
          <source>for the ability to read the names and values of environment variables if <ph id="ph1">&lt;paramref name="target" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.EnvironmentVariableTarget.Process" /&gt;</ph> (Associated enumeration: <ph id="ph3">&lt;see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /&gt;</ph>),</source>
          <target state="translated">它能够读取的名称和环境变量的值，如果<ph id="ph1">&lt;paramref name="target" /&gt;</ph>是<ph id="ph2">&lt;see cref="F:System.EnvironmentVariableTarget.Process" /&gt;</ph>(关联的枚举： <ph id="ph3">&lt;see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /&gt;</ph>)，</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariables(System.EnvironmentVariableTarget)">
          <source>or</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetEnvironmentVariables(System.EnvironmentVariableTarget)">
          <source>for full access to environment variables if <ph id="ph1">&lt;paramref name="target" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.EnvironmentVariableTarget.User" /&gt;</ph> or <ph id="ph3">&lt;see cref="F:System.EnvironmentVariableTarget.Machine" /&gt;</ph> (Associated enumeration: <ph id="ph4">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph>).</source>
          <target state="translated">对环境变量的完全访问权限如果<ph id="ph1">&lt;paramref name="target" /&gt;</ph>是<ph id="ph2">&lt;see cref="F:System.EnvironmentVariableTarget.User" /&gt;</ph>或<ph id="ph3">&lt;see cref="F:System.EnvironmentVariableTarget.Machine" /&gt;</ph>(关联的枚举： <ph id="ph4">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph>)。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="T:System.Environment">
          <source>Gets the path to the system special folder that is identified by the specified enumeration.</source>
          <target state="translated">获取由指定枚举标识的系统特殊文件夹的路径。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">
          <source>An enumerated constant that identifies a system special folder.</source>
          <target state="translated">标识系统特殊文件夹的枚举常数。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">
          <source>Gets the path to the system special folder that is identified by the specified enumeration.</source>
          <target state="translated">获取由指定枚举标识的系统特殊文件夹的路径。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">
          <source>The path to the specified system special folder, if that folder physically exists on your computer; otherwise, an empty string ("").</source>
          <target state="translated">如果指定的系统特殊文件夹实际存在于您的计算机上，则为到该文件夹的路径；否则为空字符串 ("")。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">
          <source>A folder will not physically exist if the operating system did not create it, the existing folder was deleted, or the folder is a virtual directory, such as My Computer, which does not correspond to a physical path.</source>
          <target state="translated">如果系统未创建文件夹、已删除现有文件夹，或者文件夹是不对应物理路径的虚拟目录（例如"我的电脑"），则该文件夹不会实际存在。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">
          <source>This method retrieves the path to a system special folder, such as Program Files, Programs, System, or Startup, which can be used to access common information.</source>
          <target state="translated">此方法检索系统特殊文件夹，例如 Program Files、 程序、 系统或启动时，可用来访问公共信息的路径。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">
          <source>Special folders are set by default by the system, or explicitly by the user, when installing a version of Windows.</source>
          <target state="translated">特殊文件夹时设置的默认系统，或显式由用户安装的 Windows 版本。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">
          <source>The <ph id="ph1">`folder`</ph> parameter designates the special folder to retrieve and must be one of the values in the <ph id="ph2">&lt;xref:System.Environment.SpecialFolder&gt;</ph> enumeration; any other value throws an exception.</source>
          <target state="translated"><ph id="ph1">`folder`</ph>参数指定要检索的特殊文件夹，并且必须位于中的值之一<ph id="ph2">&lt;xref:System.Environment.SpecialFolder&gt;</ph>枚举; 任何其他值将引发异常。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">
          <source>For more information about special folders, see the <bpt id="p1">[</bpt>CSIDL<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=116664)</ept> values topic.</source>
          <target state="translated">有关特殊文件夹的详细信息，请参阅<bpt id="p1">[</bpt>CSIDL<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=116664)</ept>值主题。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">
          <source>The following example demonstrates how to use the <ph id="ph1">&lt;xref:System.Environment.GetFolderPath%2A&gt;</ph> method to return and display the path associated with the <ph id="ph2">`folder`</ph> parameter.</source>
          <target state="translated">下面的示例演示如何使用<ph id="ph1">&lt;xref:System.Environment.GetFolderPath%2A&gt;</ph>方法以返回并显示与关联的路径<ph id="ph2">`folder`</ph>参数。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">
          <source><ph id="ph1">&lt;paramref name="folder" /&gt;</ph> is not a member of <ph id="ph2">&lt;see cref="T:System.Environment.SpecialFolder" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="folder" /&gt;</ph> 不是 <ph id="ph2">&lt;see cref="T:System.Environment.SpecialFolder" /&gt;</ph> 的成员。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">
          <source>The current platform is not supported.</source>
          <target state="translated">不支持当前平台。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">
          <source>for access to the information in the path itself.</source>
          <target state="translated">用于访问路径本身中的信息。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder,System.Environment.SpecialFolderOption)">
          <source>An enumerated constant that identifies a system special folder.</source>
          <target state="translated">标识系统特殊文件夹的枚举常数。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder,System.Environment.SpecialFolderOption)">
          <source>Specifies options to use for accessing a special folder.</source>
          <target state="translated">指定用于访问特殊文件夹的选项。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder,System.Environment.SpecialFolderOption)">
          <source>Gets the path to the system special folder that is identified by the specified enumeration, and uses a specified option for accessing special folders.</source>
          <target state="translated">获取由指定枚举标识的系统特殊文件夹的路径，并使用用于访问特殊文件夹的指定选项。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder,System.Environment.SpecialFolderOption)">
          <source>The path to the specified system special folder, if that folder physically exists on your computer; otherwise, an empty string ("").</source>
          <target state="translated">如果指定的系统特殊文件夹实际存在于您的计算机上，则为到该文件夹的路径；否则为空字符串 ("")。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder,System.Environment.SpecialFolderOption)">
          <source>A folder will not physically exist if the operating system did not create it, the existing folder was deleted, or the folder is a virtual directory, such as My Computer, which does not correspond to a physical path.</source>
          <target state="translated">如果系统未创建文件夹、已删除现有文件夹，或者文件夹是不对应物理路径的虚拟目录（例如"我的电脑"），则该文件夹不会实际存在。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder,System.Environment.SpecialFolderOption)">
          <source>This method retrieves the path to a system special folder, such as Program Files, Programs, System, or Startup, which can be used to access common information.</source>
          <target state="translated">此方法检索系统特殊文件夹，例如 Program Files、 程序、 系统或启动时，可用来访问公共信息的路径。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder,System.Environment.SpecialFolderOption)">
          <source>Special folders are set by default by the system, or explicitly by the user, when installing a version of Windows.</source>
          <target state="translated">特殊文件夹时设置的默认系统，或显式由用户安装的 Windows 版本。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder,System.Environment.SpecialFolderOption)">
          <source>The <ph id="ph1">`folder`</ph> parameter designates the special folder to retrieve and must be one of the values in the <ph id="ph2">&lt;xref:System.Environment.SpecialFolder&gt;</ph> enumeration; any other value throws an exception.</source>
          <target state="translated"><ph id="ph1">`folder`</ph>参数指定要检索的特殊文件夹，并且必须位于中的值之一<ph id="ph2">&lt;xref:System.Environment.SpecialFolder&gt;</ph>枚举; 任何其他值将引发异常。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder,System.Environment.SpecialFolderOption)">
          <source>For more information about special folders, see the <bpt id="p1">[</bpt>CSIDL<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=116664)</ept> values topic.</source>
          <target state="translated">有关特殊文件夹的详细信息，请参阅<bpt id="p1">[</bpt>CSIDL<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=116664)</ept>值主题。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder,System.Environment.SpecialFolderOption)">
          <source><ph id="ph1">&lt;paramref name="folder" /&gt;</ph> is not a member of <ph id="ph2">&lt;see cref="T:System.Environment.SpecialFolder" /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;paramref name="folder" /&gt;</ph> 不是 <ph id="ph2">&lt;see cref="T:System.Environment.SpecialFolder" /&gt;</ph> 的成员。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder,System.Environment.SpecialFolderOption)">
          <source>for access to the information in the path itself.</source>
          <target state="translated">用于访问路径本身中的信息。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder,System.Environment.SpecialFolderOption)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Environment.GetLogicalDrives">
          <source>Returns an array of string containing the names of the logical drives on the current computer.</source>
          <target state="translated">返回包含当前计算机中的逻辑驱动器名称的字符串数组。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Environment.GetLogicalDrives">
          <source>An array of strings where each element contains the name of a logical drive.</source>
          <target state="translated">字符串数组，其中的每个元素都包含逻辑驱动器名称。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" uid="M:System.Environment.GetLogicalDrives">
          <source>For example, if the computer's hard drive is the first logical drive, the first element returned is "C:<ph id="ph1">\\</ph>".</source>
          <target state="translated">例如，如果计算机的硬盘是第一个逻辑驱动器，则返回的第一个元素是“C:<ph id="ph1">\\</ph>”。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetLogicalDrives">
          <source>The following example shows how to display the logical drives of the current computer using the <ph id="ph1">&lt;xref:System.Environment.GetLogicalDrives%2A&gt;</ph> method.</source>
          <target state="translated">下面的示例演示如何显示当前的计算机使用的逻辑驱动器<ph id="ph1">&lt;xref:System.Environment.GetLogicalDrives%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Environment.GetLogicalDrives">
          <source>An I/O error occurs.</source>
          <target state="translated">出现 I/O 错误。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Environment.GetLogicalDrives">
          <source>The caller does not have the required permissions.</source>
          <target state="translated">调用方没有所需的权限。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetLogicalDrives">
          <source>for full access to the resource protected by this permission.</source>
          <target state="translated">用于对受此权限的资源的完全访问。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.GetLogicalDrives">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="P:System.Environment.HasShutdownStarted">
          <source>Gets a value that indicates whether the current application domain is being unloaded or the common language runtime (CLR) is shutting down.</source>
          <target state="translated">获取一个值，该值指示当前的应用程序域是否正在卸载或者公共语言运行时 (CLR) 是否正在关闭。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.HasShutdownStarted">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current application domain is being unloaded or the CLR is shutting down; otherwise, <ph id="ph2">&lt;see langword="false." /&gt;</ph></source>
          <target state="translated">如果当前的应用程序域正在卸载或者 CLR 正在关闭，为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则，为 <ph id="ph2">&lt;see langword="false." /&gt;</ph></target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.HasShutdownStarted">
          <source>When the CLR unloads an application domain, it runs the finalizers on all objects that have a finalizer method in that application domain.</source>
          <target state="translated">当 CLR 卸载应用程序域时，它将在该应用程序域中具有终结器方法的所有对象运行终结器。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.HasShutdownStarted">
          <source>When the CLR shuts down, it starts the finalizer thread on all objects that have a finalizer method.</source>
          <target state="translated">CLR 关闭时，它将启动终结器线程上的一个终结器方法的所有对象。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.HasShutdownStarted">
          <source>The <ph id="ph1">&lt;xref:System.Environment.HasShutdownStarted%2A&gt;</ph> property returns <ph id="ph2">`true`</ph> only after the finalizer thread has been started.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Environment.HasShutdownStarted%2A&gt;</ph>属性返回<ph id="ph2">`true`</ph>仅终结器线程已启动。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.HasShutdownStarted">
          <source>When the property returns <ph id="ph1">`true`</ph>, you can determine whether an application domain is being unloaded or the CLR itself is shutting down by calling the <ph id="ph2">&lt;xref:System.AppDomain.IsFinalizingForUnload%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">当该属性返回<ph id="ph1">`true`</ph>，你可以确定是否应用程序域是否正在卸载或者 CLR 自行正在通过调用关闭<ph id="ph2">&lt;xref:System.AppDomain.IsFinalizingForUnload%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.HasShutdownStarted">
          <source>This method returns <ph id="ph1">`true`</ph> if finalizers are called because the application domain is unloading or <ph id="ph2">`false`</ph> if the CLR is shutting down.</source>
          <target state="translated">此方法返回<ph id="ph1">`true`</ph>如果称为终结器，因为应用程序域正在卸载或<ph id="ph2">`false`</ph>如果 CLR 正在关闭。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.HasShutdownStarted">
          <source>The <ph id="ph1">&lt;xref:System.Environment.HasShutdownStarted%2A&gt;</ph> property returns <ph id="ph2">`false`</ph> if the finalizer thread has not been started.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Environment.HasShutdownStarted%2A&gt;</ph>属性返回<ph id="ph2">`false`</ph>如果尚未启动终结器线程。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.HasShutdownStarted">
          <source>By using this property, you can determine whether to access static variables in your finalization code.</source>
          <target state="translated">通过使用此属性，可以确定是否在终止代码中的静态变量的访问。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.HasShutdownStarted">
          <source>If either an application domain or the CLR is shutting down, you cannot reliably access any object that has a finalization method and that is referenced by a static field.</source>
          <target state="translated">如果应用程序域或者 CLR 正在关闭，不能可靠地访问具有完成方法并由静态字段引用的任何对象。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.HasShutdownStarted">
          <source>This is because these objects may have already been finalized.</source>
          <target state="translated">这是因为这些对象可能已终止。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="P:System.Environment.Is64BitOperatingSystem">
          <source>Determines whether the current operating system is a 64-bit operating system.</source>
          <target state="translated">确定当前操作系统是否为 64 位操作系统。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.Is64BitOperatingSystem">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the operating system is 64-bit; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果操作系统为 64 位操作系统，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="P:System.Environment.Is64BitProcess">
          <source>Determines whether the current process is a 64-bit process.</source>
          <target state="translated">确定当前进程是否为 64 位进程。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.Is64BitProcess">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the process is 64-bit; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果进程为 64 位进程，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="P:System.Environment.MachineName">
          <source>Gets the NetBIOS name of this local computer.</source>
          <target state="translated">获取此本地计算机的 NetBIOS 名称。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.MachineName">
          <source>A string containing the name of this computer.</source>
          <target state="translated">包含此计算机的名称的字符串。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.MachineName">
          <source>The name of this computer is established at system startup when the name is read from the registry.</source>
          <target state="translated">从注册表中读取名称时，将在系统启动时建立此计算机的名称。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.MachineName">
          <source>If this computer is a node in a cluster, the name of the node is returned.</source>
          <target state="translated">如果此计算机是群集中的节点，则返回节点的名称。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.MachineName">
          <source>The following example displays the name of the computer that runs the code example.</source>
          <target state="translated">下面的示例显示运行的代码示例的计算机的名称。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.MachineName">
          <source>(The machine name is omitted from the example output for security reasons.)</source>
          <target state="translated">（计算机名称中省略出于安全原因，示例输出。）</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="P:System.Environment.MachineName">
          <source>The name of this computer cannot be obtained.</source>
          <target state="translated">无法获取此计算机的名称。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.MachineName">
          <source>for read access to the COMPUTERNAME environment variable.</source>
          <target state="translated">用于到 COMPUTERNAME 环境变量的读访问。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.MachineName">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="P:System.Environment.NewLine">
          <source>Gets the newline string defined for this environment.</source>
          <target state="translated">获取为此环境定义的换行字符串。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.NewLine">
          <source>A string containing "\r\n" for non-Unix platforms, or a string containing "\n" for Unix platforms.</source>
          <target state="translated">对于非 Unix 平台为包含“\r\n”的字符串，对于 Unix 平台则为包含“\n”的字符串。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.NewLine">
          <source>The property value of <ph id="ph1">&lt;xref:System.Environment.NewLine%2A&gt;</ph> is a constant customized specifically for the current platform and implementation of the .NET Framework.</source>
          <target state="translated">属性值<ph id="ph1">&lt;xref:System.Environment.NewLine%2A&gt;</ph>是专门为的当前平台和.NET Framework 实现自定义的常量。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.NewLine">
          <source>For more information about the escape characters in the property value, see <bpt id="p1">[</bpt>Character Escapes<ept id="p1">](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)</ept>.</source>
          <target state="translated">有关中的属性值的转义字符的详细信息，请参阅<bpt id="p1">[</bpt>字符转义<ept id="p1">](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)</ept>。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.NewLine">
          <source>The functionality provided by <ph id="ph1">&lt;xref:System.Environment.NewLine%2A&gt;</ph> is often what is meant by the terms newline, line feed, line break, carriage return, CRLF, and end of line.</source>
          <target state="translated">提供的功能<ph id="ph1">&lt;xref:System.Environment.NewLine%2A&gt;</ph>通常是条款换行、 换行符、 换行符、 回车、 CRLF、 和行尾的含义。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.NewLine">
          <source><ph id="ph1">&lt;xref:System.Environment.NewLine%2A&gt;</ph> can be used in conjunction with language-specific newline support such as the escape characters '\r' and '\n' in Microsoft C# and C/C++, or <ph id="ph2">`vbCrLf`</ph> in Microsoft Visual Basic.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Environment.NewLine%2A&gt;</ph> 可以与特定于语言的换行符支持，例如的转义字符 '\r' 和 Microsoft C# 和 C/c + + 中的 \n 结合使用或<ph id="ph2">`vbCrLf`</ph>在 Microsoft Visual Basic。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.NewLine">
          <source><ph id="ph1">&lt;xref:System.Environment.NewLine%2A&gt;</ph> is automatically appended to text processed by the <ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph> and <ph id="ph3">&lt;xref:System.Text.StringBuilder.AppendLine%2A?displayProperty=nameWithType&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Environment.NewLine%2A&gt;</ph> 自动追加到文本处理<ph id="ph2">&lt;xref:System.Console.WriteLine%2A?displayProperty=nameWithType&gt;</ph>和<ph id="ph3">&lt;xref:System.Text.StringBuilder.AppendLine%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.NewLine">
          <source>The following example displays three lines separated by newlines.</source>
          <target state="translated">下面的示例显示三行由换行符分隔。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="P:System.Environment.OSVersion">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.OperatingSystem" /&gt;</ph> object that contains the current platform identifier and version number.</source>
          <target state="translated">获取包含当前平台标识符和版本号的 <ph id="ph1">&lt;see cref="T:System.OperatingSystem" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.OSVersion">
          <source>An object that contains the platform identifier and version number.</source>
          <target state="translated">一个包含平台标识符和版本号的对象。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.OSVersion">
          <source>Starting with Windows 8, the  <ph id="ph1">&lt;xref:System.Environment.OSVersion%2A&gt;</ph> property returns the same major and minor version numbers for all Windows platforms.</source>
          <target state="translated">从 Windows 8<ph id="ph1">&lt;xref:System.Environment.OSVersion%2A&gt;</ph>属性返回的相同主版本号和次版本号所有 Windows 平台。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.OSVersion">
          <source>Therefore, we do not recommend that you retrieve the value of this property to determine the operating system version.</source>
          <target state="translated">因此，我们不建议你检索此属性来确定操作系统版本的值。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.OSVersion">
          <source>Typically, the <ph id="ph1">&lt;xref:System.Environment.OSVersion%2A&gt;</ph> property is used to ensure that an app is running on some base version of an operating system in which a particular feature was introduced.</source>
          <target state="translated">通常情况下，<ph id="ph1">&lt;xref:System.Environment.OSVersion%2A&gt;</ph>属性用于确保在其中引入特定功能的操作系统的一些基础版本上运行应用。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.OSVersion">
          <source>When this is the case, you should perform a version check by testing whether the current operating system version returned by the <ph id="ph1">&lt;xref:System.Environment.OSVersion%2A&gt;</ph> property is the same as, or greater than, the base operating system version.</source>
          <target state="translated">在这种情况下，应进行测试，以返回当前的操作系统版本是否执行版本检查<ph id="ph1">&lt;xref:System.Environment.OSVersion%2A&gt;</ph>属性是相同，或大于基本操作系统版本。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.OSVersion">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.Version&gt;</ph> class topic.</source>
          <target state="translated">有关详细信息，请参阅<ph id="ph1">&lt;xref:System.Version&gt;</ph>类主题。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.OSVersion">
          <source>Through Windows 8, the <ph id="ph1">&lt;xref:System.Environment.OSVersion%2A&gt;</ph> property returns the version reported by the Windows <bpt id="p1">[</bpt>GetVersionEx<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724451\(v=vs.85\).aspx)</ept> function.</source>
          <target state="translated">通过 Windows 8<ph id="ph1">&lt;xref:System.Environment.OSVersion%2A&gt;</ph>属性返回报告的 Windows 版本<bpt id="p1">[</bpt>GetVersionEx<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724451\(v=vs.85\).aspx)</ept>函数。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.OSVersion">
          <source>For a list of Windows desktop operating system versions and their corresponding version numbers, see <bpt id="p1">[</bpt>Operating System Version<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms724832.aspx)</ept> in the Windows Dev Center.</source>
          <target state="translated">Windows 桌面操作系统版本和其相应的版本号的列表，请参阅<bpt id="p1">[</bpt>操作系统版本<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms724832.aspx)</ept>Windows 开发人员中心中。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.OSVersion">
          <source>The <ph id="ph1">&lt;xref:System.Environment.OSVersion%2A&gt;</ph> property reports the same version number (6.2.0.0) for both <ph id="ph2">[!INCLUDE[win8](~/includes/win8-md.md)]</ph> and <ph id="ph3">[!INCLUDE[win81](~/includes/win81-md.md)]</ph> and the same major and minor version number for Windows 10.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Environment.OSVersion%2A&gt;</ph>属性报告两个相同的版本号 (6.2.0.0)<ph id="ph2">[!INCLUDE[win8](~/includes/win8-md.md)]</ph>和<ph id="ph3">[!INCLUDE[win81](~/includes/win81-md.md)]</ph>和相同主版本号和次版本号适用于 Windows 10。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.OSVersion">
          <source>In some cases, the <ph id="ph1">&lt;xref:System.Environment.OSVersion%2A&gt;</ph> property may not return the operating system version that matches the version specified for the Windows Program Compatibility mode feature.</source>
          <target state="translated">在某些情况下，<ph id="ph1">&lt;xref:System.Environment.OSVersion%2A&gt;</ph>属性可能不会返回与匹配的 Windows 程序兼容性模式功能为指定的版本的操作系统版本。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.OSVersion">
          <source>The following example displays the platform identifier and version number of the computer that runs the code example.</source>
          <target state="translated">下面的示例显示平台标识符和版本号的计算机的运行的代码示例。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="P:System.Environment.OSVersion">
          <source>This property was unable to obtain the system version.</source>
          <target state="translated">此属性不能获得系统版本。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="P:System.Environment.OSVersion">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="P:System.Environment.OSVersion">
          <source>The obtained platform identifier is not a member of <ph id="ph1">&lt;see cref="T:System.PlatformID" /&gt;</ph></source>
          <target state="translated">获得的平台标识符不是 <ph id="ph1">&lt;see cref="T:System.PlatformID" /&gt;</ph> 的成员</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="P:System.Environment.ProcessorCount">
          <source>Gets the number of processors on the current machine.</source>
          <target state="translated">获取当前计算机上的处理器数。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.ProcessorCount">
          <source>The 32-bit signed integer that specifies the number of processors on the current machine.</source>
          <target state="translated">指定当前计算机上处理器个数的 32 位有符号整数。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.ProcessorCount">
          <source>There is no default.</source>
          <target state="translated">没有默认值。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.ProcessorCount">
          <source>If the current machine contains multiple processor groups, this property returns the number of logical processors that are available for use by the common language runtime (CLR).</source>
          <target state="translated">如果当前计算机包含多个处理器组，则此属性返回可用的逻辑处理器数以供公共语言运行时 (CLR) 使用。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.ProcessorCount">
          <source>For more information about processor groups and logical processors, see <bpt id="p1">[</bpt>Processor Groups<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd405503.aspx)</ept>.</source>
          <target state="translated">有关处理器组和逻辑处理器的详细信息，请参阅<bpt id="p1">[</bpt>处理器组<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd405503.aspx)</ept>。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.ProcessorCount">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Environment.ProcessorCount%2A&gt;</ph> property.</source>
          <target state="translated">下面的示例演示<ph id="ph1">&lt;xref:System.Environment.ProcessorCount%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" uid="T:System.Environment">
          <source>Creates, modifies, or deletes an environment variable.</source>
          <target state="translated">创建、修改或删除环境变量。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>The name of an environment variable.</source>
          <target state="translated">环境变量名。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>A value to assign to <bpt id="p1">&lt;c&gt;</bpt>variable<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">要分配给 <bpt id="p1">&lt;c&gt;</bpt>variable<ept id="p1">&lt;/c&gt;</ept> 的值。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>Creates, modifies, or deletes an environment variable stored in the current process.</source>
          <target state="translated">创建、修改或删除当前进程中存储的环境变量。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>Calling this method is equivalent to calling the <ph id="ph1">&lt;xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%2CSystem.EnvironmentVariableTarget%29&gt;</ph> overload with a value of <ph id="ph2">&lt;xref:System.EnvironmentVariableTarget.Process?displayProperty=nameWithType&gt;</ph> for the <ph id="ph3">`target`</ph> argument.</source>
          <target state="translated">调用此方法等效于调用<ph id="ph1">&lt;xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%2CSystem.EnvironmentVariableTarget%29&gt;</ph>值为重载<ph id="ph2">&lt;xref:System.EnvironmentVariableTarget.Process?displayProperty=nameWithType&gt;</ph>为<ph id="ph3">`target`</ph>自变量。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>If the <ph id="ph1">`value`</ph> argument is not empty (see the discussion of deleting an environment variable later in this section for the definition of an empty value) and the environment variable named by the <ph id="ph2">`variable`</ph> parameter does not exist, the environment variable is created and assigned the contents of <ph id="ph3">`value`</ph>.</source>
          <target state="translated">如果<ph id="ph1">`value`</ph>自变量不为空 （请参见删除空值的定义本部分中后面的环境变量的讨论） 和命名的环境变量<ph id="ph2">`variable`</ph>参数不存在，环境创建变量并将其分配的内容<ph id="ph3">`value`</ph>。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>If it does exist, its value is modified.</source>
          <target state="translated">如果文件确实存在，则会修改其值。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>Because the environment variable is defined in the environment block of the current process only, it does not persist after the process has ended.</source>
          <target state="translated">在当前进程的环境块中定义环境变量，因为它后未保留该过程已结束。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>If <ph id="ph1">`variable`</ph> contains a non-initial hexadecimal zero character, the characters before the zero character are considered the environment variable name and all subsequent characters are ignored.</source>
          <target state="translated">如果<ph id="ph1">`variable`</ph>包含非初始十六进制零字符的零个字符将被视为环境变量名称，并将忽略所有后续字符之前的字符。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>If <ph id="ph1">`value`</ph> contains a non-initial hexadecimal zero character, the characters before the zero character are assigned to the environment variable and all subsequent characters are ignored.</source>
          <target state="translated">如果<ph id="ph1">`value`</ph>包含非初始十六进制零字符的零个字符分配给环境变量并将忽略所有后续字符之前的字符。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>If <ph id="ph1">`value`</ph> is empty and the environment variable named by <ph id="ph2">`variable`</ph> exists, the environment variable is deleted.</source>
          <target state="translated">如果<ph id="ph1">`value`</ph>为空且命名的环境变量<ph id="ph2">`variable`</ph>存在，则删除该环境变量。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>If <ph id="ph1">`variable`</ph> does not exist, no error occurs even though the operation cannot be performed.</source>
          <target state="translated">如果<ph id="ph1">`variable`</ph>不存在，不会发生错误即使无法执行该操作。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source><ph id="ph1">`value`</ph> is considered empty under any of the following conditions:</source>
          <target state="translated"><ph id="ph1">`value`</ph> 被视为空任何以下条件下：</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>It is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">它是<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>It is <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">它是<ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>It consists of a single character whose value is U+0000.</source>
          <target state="translated">它包含单个字符，其值不在 U + 0000。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>The following example tests whether an environment variable named <ph id="ph1">`APPDOMAIN`</ph> exists in the current process.</source>
          <target state="translated">下面的示例测试是否名为的环境变量<ph id="ph1">`APPDOMAIN`</ph>存在于当前进程中。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>If it does not, it creates it and sets its value to "True".</source>
          <target state="translated">如果不存在，则它将创建它并设置其值为"True"。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>If the value of the <ph id="ph1">`APPDOMAIN`</ph> environment variable is "True", it calls the <ph id="ph2">`Message.Display`</ph> method in a new application domain.</source>
          <target state="translated">如果值<ph id="ph1">`APPDOMAIN`</ph>环境变量为"True"时，它调用<ph id="ph2">`Message.Display`</ph>新的应用程序域中的方法。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>Otherwise, it executes the <ph id="ph1">`Message.Display`</ph> method in the current application domain.</source>
          <target state="translated">否则，它会执行<ph id="ph1">`Message.Display`</ph>当前的应用程序域中的方法。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>If you run the example for the first time, the message "Executing in domain Domain2" displays to the console.</source>
          <target state="translated">如果首次运行该示例，该消息"正在执行域 Domain2 中的"显示到控制台。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>If you set the environment variable from the command line by using the command:</source>
          <target state="translated">如果使用命令，可以从命令行设置环境变量：</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>the example displays the message "Executing in domain <bpt id="p1">*</bpt>exeName<ept id="p1">*</ept>.exe", where <bpt id="p2">*</bpt>exeName<ept id="p2">*</ept> is the name of the executable.</source>
          <target state="translated">该示例显示消息"在域中执行<bpt id="p1">*</bpt>exeName<ept id="p1">*</ept>.exe"，其中<bpt id="p2">*</bpt>exeName<ept id="p2">*</ept>是可执行文件的名称。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>The following example attempts to retrieve the value of an environment variable named <ph id="ph1">`Test1`</ph> from the process environment block.</source>
          <target state="translated">以下示例尝试检索名为的环境变量的值<ph id="ph1">`Test1`</ph>从进程环境块。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>If the variable doesn't exist, the example creates the variable and retrieves its value.</source>
          <target state="translated">如果不存在该变量，该示例将创建该变量，并检索其值。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>The example displays the value of the variable.</source>
          <target state="translated">此示例显示变量的值。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>If the example created the variable, it also calls the <ph id="ph1">&lt;xref:System.Environment.GetEnvironmentVariables%28System.EnvironmentVariableTarget%29&gt;</ph> method with each member of the <ph id="ph2">&lt;xref:System.EnvironmentVariableTarget&gt;</ph> enumeration to establish that the variable can be retrieved only from the current process environment block.</source>
          <target state="translated">如果该示例创建变量，它还会调用<ph id="ph1">&lt;xref:System.Environment.GetEnvironmentVariables%28System.EnvironmentVariableTarget%29&gt;</ph>方法的每个成员<ph id="ph2">&lt;xref:System.EnvironmentVariableTarget&gt;</ph>枚举，以建立只能从当前进程环境块中，可以检索该变量。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>Finally, if the example created the variable, it deletes it.</source>
          <target state="translated">最后，如果该示例创建变量，将其删除。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="variable" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="variable" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="variable" /&gt;</ph> contains a zero-length string, an initial hexadecimal zero character (0x00), or an equal sign ("=").</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="variable" /&gt;</ph> 包含零长度字符串、起始十六进制零字符 (0x00) 或等号（“=”）。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>The length of <ph id="ph1">&lt;paramref name="variable" /&gt;</ph> or <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is greater than or equal to 32,767 characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="variable" /&gt;</ph> 或 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> 的长度大于等于 32,767 个字符。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>An error occurred during the execution of this operation.</source>
          <target state="translated">执行此操作期间出错。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>The caller does not have the required permission to perform this operation.</source>
          <target state="translated">调用方没有执行此操作所需的权限。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>for full access to environment variables.</source>
          <target state="translated">对环境变量的完全访问权限。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>The name of an environment variable.</source>
          <target state="translated">环境变量名。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>A value to assign to <bpt id="p1">&lt;c&gt;</bpt>variable<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">要分配给 <bpt id="p1">&lt;c&gt;</bpt>variable<ept id="p1">&lt;/c&gt;</ept> 的值。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>One of the enumeration values that specifies the location of the environment variable.</source>
          <target state="translated">一个用于指定环境变量的位置的枚举值。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>Creates, modifies, or deletes an environment variable stored in the current process or in the Windows operating system registry key reserved for the current user or local machine.</source>
          <target state="translated">创建、修改或删除当前进程中或者为当前用户或本地计算机保留的 Windows 操作系统注册表项中存储的环境变量。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>The <ph id="ph1">&lt;xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%2CSystem.EnvironmentVariableTarget%29&gt;</ph> method lets you define an environment variable that is available to all processes that run on a machine (the <ph id="ph2">&lt;xref:System.EnvironmentVariableTarget.Machine?displayProperty=nameWithType&gt;</ph> value), to all processes run by a user (the <ph id="ph3">&lt;xref:System.EnvironmentVariableTarget.User?displayProperty=nameWithType&gt;</ph> value), or to the current process (the <ph id="ph4">&lt;xref:System.EnvironmentVariableTarget.Process&gt;</ph> value).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%2CSystem.EnvironmentVariableTarget%29&gt;</ph>方法使你可以定义可供所有的计算机运行的进程的环境变量 (<ph id="ph2">&lt;xref:System.EnvironmentVariableTarget.Machine?displayProperty=nameWithType&gt;</ph>值) 到所有进程都运行报表的用户 (<ph id="ph3">&lt;xref:System.EnvironmentVariableTarget.User?displayProperty=nameWithType&gt;</ph>值)，或到当前进程 (<ph id="ph4">&lt;xref:System.EnvironmentVariableTarget.Process&gt;</ph>值)。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>Per-machine and per-user environment variables are copied into the environment block of the current process.</source>
          <target state="translated">每台计算机和每个用户环境变量将复制到当前进程的环境块。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>However, environment variables that are unique to the current process environment block persist only until the process ends.</source>
          <target state="translated">但是，仅在进程结束前，将保留对当前进程环境块是唯一的环境变量。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>If the <ph id="ph1">`value`</ph> argument is not empty (see the discussion of deleting an environment variable later in this section for the definition of an empty value) and the environment variable named by the <ph id="ph2">`variable`</ph> parameter does not exist, the environment variable is created and assigned the contents of <ph id="ph3">`value`</ph>.</source>
          <target state="translated">如果<ph id="ph1">`value`</ph>自变量不为空 （请参见删除空值的定义本部分中后面的环境变量的讨论） 和命名的环境变量<ph id="ph2">`variable`</ph>参数不存在，环境创建变量并将其分配的内容<ph id="ph3">`value`</ph>。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>If it does exist, its value is modified.</source>
          <target state="translated">如果文件确实存在，则会修改其值。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>If <ph id="ph1">`variable`</ph> contains a non-initial hexadecimal zero character, the characters before the zero character are considered the environment variable name and all subsequent characters are ignored.</source>
          <target state="translated">如果<ph id="ph1">`variable`</ph>包含非初始十六进制零字符的零个字符将被视为环境变量名称，并将忽略所有后续字符之前的字符。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>If <ph id="ph1">`value`</ph> contains a non-initial hexadecimal zero character, the characters before the zero character are assigned to the environment variable and all subsequent characters are ignored.</source>
          <target state="translated">如果<ph id="ph1">`value`</ph>包含非初始十六进制零字符的零个字符分配给环境变量并将忽略所有后续字符之前的字符。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>If <ph id="ph1">`value`</ph> is empty and the environment variable named by <ph id="ph2">`variable`</ph> exists, the environment variable is deleted.</source>
          <target state="translated">如果<ph id="ph1">`value`</ph>为空且命名的环境变量<ph id="ph2">`variable`</ph>存在，则删除该环境变量。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source><ph id="ph1">`value`</ph> is considered empty under any of the following conditions:</source>
          <target state="translated"><ph id="ph1">`value`</ph> 被视为空任何以下条件下：</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>It is <ph id="ph1">`null`</ph>.</source>
          <target state="translated">它是<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>It is <ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">它是<ph id="ph1">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>It consists of a single character whose value is U+0000.</source>
          <target state="translated">它包含单个字符，其值不在 U + 0000。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>If <ph id="ph1">`variable`</ph> does not exist, no error occurs although the operation cannot be performed.</source>
          <target state="translated">如果<ph id="ph1">`variable`</ph>不存在，不会发生错误尽管无法执行该操作。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>Be careful when <ph id="ph1">`target`</ph> is <ph id="ph2">&lt;xref:System.EnvironmentVariableTarget.Machine&gt;</ph>, because you can accidentally delete an environment variable that affects your entire local machine, not just the current process or user.</source>
          <target state="translated">请注意<ph id="ph1">`target`</ph>是<ph id="ph2">&lt;xref:System.EnvironmentVariableTarget.Machine&gt;</ph>，这是因为你可以不小心删除影响整个本地计算机，而不仅仅是当前进程或用户的环境变量。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>If <ph id="ph1">`target`</ph> is <ph id="ph2">&lt;xref:System.EnvironmentVariableTarget.User&gt;</ph>, the environment variable is stored in the HKEY_CURRENT_USER\Environment key of the local computer's registry.</source>
          <target state="translated">如果<ph id="ph1">`target`</ph>是<ph id="ph2">&lt;xref:System.EnvironmentVariableTarget.User&gt;</ph>，存储在本地计算机的注册表 HKEY_CURRENT_USER\Environment 项中的环境变量。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>It is also copied to instances of File Explorer that are running as the current user.</source>
          <target state="translated">它也会复制到当前用户身份运行的文件资源管理器实例。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>The environment variable is then inherited by any new processes that the user launches from File Explorer.</source>
          <target state="translated">然后，用户将从文件资源管理器启动任何新进程继承该环境变量。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>Similarly, if <ph id="ph1">`target`</ph> is <ph id="ph2">&lt;xref:System.EnvironmentVariableTarget.Machine?displayProperty=nameWithType&gt;</ph>, the environment variable is stored in the HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Control\Session Manager\Environment key of the local computer's registry.</source>
          <target state="translated">同样，如果<ph id="ph1">`target`</ph>是<ph id="ph2">&lt;xref:System.EnvironmentVariableTarget.Machine?displayProperty=nameWithType&gt;</ph>，存储在本地计算机的注册表 HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Control\Session Manager\Environment 项中的环境变量。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>It is also copied to all instances of File Explorer.</source>
          <target state="translated">它也会复制到文件资源管理器的所有实例。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>The environment variable is then inherited by any new processes that are launched from File Explorer.</source>
          <target state="translated">然后，从文件资源管理器启动任何新进程继承该环境变量。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>If <ph id="ph1">`target`</ph> is <ph id="ph2">&lt;xref:System.EnvironmentVariableTarget.User&gt;</ph> or <ph id="ph3">&lt;xref:System.EnvironmentVariableTarget.Machine&gt;</ph>, other applications are notified of the set operation by a Windows <ph id="ph4">`WM_SETTINGCHANGE`</ph> message.</source>
          <target state="translated">如果<ph id="ph1">`target`</ph>是<ph id="ph2">&lt;xref:System.EnvironmentVariableTarget.User&gt;</ph>或<ph id="ph3">&lt;xref:System.EnvironmentVariableTarget.Machine&gt;</ph>，其他应用程序会通知你的设置操作由 Windows<ph id="ph4">`WM_SETTINGCHANGE`</ph>消息。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>If <ph id="ph1">`target`</ph> is <ph id="ph2">&lt;xref:System.EnvironmentVariableTarget.User?displayProperty=nameWithType&gt;</ph> or <ph id="ph3">&lt;xref:System.EnvironmentVariableTarget.Machine?displayProperty=nameWithType&gt;</ph>, we recommend that the length of <ph id="ph4">`value`</ph> be less than 2048 characters.</source>
          <target state="translated">如果<ph id="ph1">`target`</ph>是<ph id="ph2">&lt;xref:System.EnvironmentVariableTarget.User?displayProperty=nameWithType&gt;</ph>或<ph id="ph3">&lt;xref:System.EnvironmentVariableTarget.Machine?displayProperty=nameWithType&gt;</ph>，我们建议的长度<ph id="ph4">`value`</ph>小于 2048年个字符。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>The following example creates environment variables for the <ph id="ph1">&lt;xref:System.EnvironmentVariableTarget.Process?displayProperty=nameWithType&gt;</ph>, <ph id="ph2">&lt;xref:System.EnvironmentVariableTarget.User?displayProperty=nameWithType&gt;</ph>, and <ph id="ph3">&lt;xref:System.EnvironmentVariableTarget.Machine&gt;</ph> targets, checks whether the operating system registry contains the user and machine environment variables, then deletes the environment variables.</source>
          <target state="translated">下面的示例创建的环境变量<ph id="ph1">&lt;xref:System.EnvironmentVariableTarget.Process?displayProperty=nameWithType&gt;</ph>， <ph id="ph2">&lt;xref:System.EnvironmentVariableTarget.User?displayProperty=nameWithType&gt;</ph>，和<ph id="ph3">&lt;xref:System.EnvironmentVariableTarget.Machine&gt;</ph>面向，检查是否操作系统注册表包含的用户和计算机环境变量，则删除环境变量。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source><ph id="ph1">&lt;paramref name="variable" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="variable" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source><ph id="ph1">&lt;paramref name="variable" /&gt;</ph> contains a zero-length string, an initial hexadecimal zero character (0x00), or an equal sign ("=").</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="variable" /&gt;</ph> 包含零长度字符串、起始十六进制零字符 (0x00) 或等号（“=”）。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>The length of <ph id="ph1">&lt;paramref name="variable" /&gt;</ph> is greater than or equal to 32,767 characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="variable" /&gt;</ph> 的长度大于等于 32,767 个字符。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source><ph id="ph1">&lt;paramref name="target" /&gt;</ph> is not a member of the <ph id="ph2">&lt;see cref="T:System.EnvironmentVariableTarget" /&gt;</ph> enumeration.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="target" /&gt;</ph> 不是 <ph id="ph2">&lt;see cref="T:System.EnvironmentVariableTarget" /&gt;</ph> 枚举的成员。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source><ph id="ph1">&lt;paramref name="target" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.EnvironmentVariableTarget.Machine" /&gt;</ph> or <ph id="ph3">&lt;see cref="F:System.EnvironmentVariableTarget.User" /&gt;</ph>, and the length of <ph id="ph4">&lt;paramref name="variable" /&gt;</ph> is greater than or equal to 255.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="target" /&gt;</ph> 为 <ph id="ph2">&lt;see cref="F:System.EnvironmentVariableTarget.Machine" /&gt;</ph> 或 <ph id="ph3">&lt;see cref="F:System.EnvironmentVariableTarget.User" /&gt;</ph>，并且 <ph id="ph4">&lt;paramref name="variable" /&gt;</ph> 的长度大于等于 255。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source><ph id="ph1">&lt;paramref name="target" /&gt;</ph> is <ph id="ph2">&lt;see cref="F:System.EnvironmentVariableTarget.Process" /&gt;</ph> and the length of <ph id="ph3">&lt;paramref name="value" /&gt;</ph> is greater than or equal to 32,767 characters.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="target" /&gt;</ph> 为 <ph id="ph2">&lt;see cref="F:System.EnvironmentVariableTarget.Process" /&gt;</ph>，并且 <ph id="ph3">&lt;paramref name="value" /&gt;</ph> 的长度大于等于 32,767 个字符。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>An error occurred during the execution of this operation.</source>
          <target state="translated">执行此操作期间出错。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>The caller does not have the required permission to perform this operation.</source>
          <target state="translated">调用方没有执行此操作所需的权限。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>for full access to environment variables.</source>
          <target state="translated">对环境变量的完全访问权限。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" uid="P:System.Environment.StackTrace">
          <source>Gets current stack trace information.</source>
          <target state="translated">获取当前的堆栈跟踪信息。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.StackTrace">
          <source>A string containing stack trace information.</source>
          <target state="translated">包含堆栈跟踪信息的字符串。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.StackTrace">
          <source>This value can be <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated">此值可为 <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.StackTrace">
          <source>The <ph id="ph1">&lt;xref:System.Environment.StackTrace%2A&gt;</ph> property lists method calls in reverse chronological order, that is, the most recent method call is described first, and one line of stack trace information is listed for each method call on the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Environment.StackTrace%2A&gt;</ph>属性列出顺序的逆序方法调用、，即首先，描述最新的方法调用和每个方法调用在堆栈上列出的堆栈跟踪信息的一行。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.StackTrace">
          <source>However, the <ph id="ph1">&lt;xref:System.Environment.StackTrace%2A&gt;</ph> property might not report as many method calls as expected due to code transformations that occur during optimization.</source>
          <target state="translated">但是，<ph id="ph1">&lt;xref:System.Environment.StackTrace%2A&gt;</ph>属性可能不报告任意多个方法调用预期由于优化期间发生代码转换。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.StackTrace">
          <source>For a hierarchical view of the stack trace information by class, use the <ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph> class.</source>
          <target state="translated">由类的堆栈跟踪信息的层次结构视图，使用<ph id="ph1">&lt;xref:System.Diagnostics.StackTrace&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.StackTrace">
          <source>The <ph id="ph1">&lt;xref:System.Environment.StackTrace%2A&gt;</ph> property formats the stack trace information for each method call as follows:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Environment.StackTrace%2A&gt;</ph>属性设置为每个方法调用的堆栈跟踪信息的格式，如下所示：</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.StackTrace">
          <source>"at <ph id="ph1">`FullClassName`</ph>.<ph id="ph2">`MethodName`</ph>(<ph id="ph3">`MethodParams`</ph>) in <ph id="ph4">`FileName`</ph> :line <ph id="ph5">`LineNumber`</ph> "</source>
          <target state="translated">"在<ph id="ph1">`FullClassName`</ph>。<ph id="ph2">`MethodName`</ph>(<ph id="ph3">`MethodParams`</ph>) 中<ph id="ph4">`FileName`</ph>： 行<ph id="ph5">`LineNumber`</ph>"</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.StackTrace">
          <source>The literal "at" is preceded by three spaces, and the entire substring starting with "in" is omitted if debug symbols are not available.</source>
          <target state="translated">"At"文本前面由三个空格，并且如果调试符号将不可用，则忽略"in"以开始将整个子字符串。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.StackTrace">
          <source>The placeholders, <ph id="ph1">`FullClassName`</ph>, <ph id="ph2">`MethodName`</ph>, <ph id="ph3">`MethodParams`</ph>, <ph id="ph4">`FileName`</ph>, and <ph id="ph5">`LineNumber`</ph>, are replaced by actual values, and are defined as follows:</source>
          <target state="translated">占位符， <ph id="ph1">`FullClassName`</ph>， <ph id="ph2">`MethodName`</ph>， <ph id="ph3">`MethodParams`</ph>， <ph id="ph4">`FileName`</ph>，和<ph id="ph5">`LineNumber`</ph>、 将替换为实际值和定义，如下所示：</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.StackTrace">
          <source>FullClassName</source>
          <target state="translated">FullClassName</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.StackTrace">
          <source>The full name of the class, including the namespace.</source>
          <target state="translated">类，包括命名空间的完整名称。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.StackTrace">
          <source>The name of the method.</source>
          <target state="translated">方法的名称。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.StackTrace">
          <source>The list of parameter type/name pairs.</source>
          <target state="translated">参数类型/名称对的列表。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.StackTrace">
          <source>Each pair is separated by a comma (",").</source>
          <target state="translated">用逗号分隔每个对 （"，"）。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.StackTrace">
          <source>This information is omitted if <ph id="ph1">`MethodName`</ph> takes no parameters.</source>
          <target state="translated">如果省略此信息<ph id="ph1">`MethodName`</ph>不带任何参数。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.StackTrace">
          <source>The name of the source file where the <ph id="ph1">`MethodName`</ph> method is declared.</source>
          <target state="translated">源的名称文件，其中<ph id="ph1">`MethodName`</ph>声明方法。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.StackTrace">
          <source>This information is omitted if debug symbols are not available.</source>
          <target state="translated">如果调试符号不可用，则省略此信息。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.StackTrace">
          <source>The number of the line in <ph id="ph1">`FileName`</ph> that contains the source code from <ph id="ph2">`MethodName`</ph> for the instruction that is on the call stack.</source>
          <target state="translated">中的行数<ph id="ph1">`FileName`</ph>，其中包含从源代码<ph id="ph2">`MethodName`</ph>指令调用堆栈上。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.StackTrace">
          <source>This information is omitted if debug symbols are not available.</source>
          <target state="translated">如果调试符号不可用，则省略此信息。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.StackTrace">
          <source>The <ph id="ph1">&lt;xref:System.Environment.NewLine%2A?displayProperty=nameWithType&gt;</ph> string terminates each line of the stack trace.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Environment.NewLine%2A?displayProperty=nameWithType&gt;</ph>字符串终止的堆栈跟踪每个行。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.StackTrace">
          <source>The following example demonstrates the <ph id="ph1">&lt;xref:System.Environment.StackTrace%2A&gt;</ph> property.</source>
          <target state="translated">下面的示例演示<ph id="ph1">&lt;xref:System.Environment.StackTrace%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.StackTrace">
          <source>for full access to the resource protected by the permission.</source>
          <target state="translated">用于对权限所保护的资源的完全访问。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.StackTrace">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="P:System.Environment.SystemDirectory">
          <source>Gets the fully qualified path of the system directory.</source>
          <target state="translated">获取系统目录的完全限定路径。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.SystemDirectory">
          <source>A string containing a directory path.</source>
          <target state="translated">包含目录路径的字符串。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.SystemDirectory">
          <source>An example of the value returned is the string "C:\WinNT\System32".</source>
          <target state="translated">返回的一个示例是值的"C:\WinNT\System32"的字符串。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.SystemDirectory">
          <source>The following example displays the system directory of the computer that runs the code example.</source>
          <target state="translated">下面的示例显示运行的代码示例的计算机的系统目录。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.SystemDirectory">
          <source>(The system directory is omitted from the example output for security reasons.)</source>
          <target state="translated">（系统目录中省略出于安全原因，示例输出。）</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.SystemDirectory">
          <source>for access to the information in the path itself.</source>
          <target state="translated">用于访问路径本身中的信息。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.SystemDirectory">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" uid="P:System.Environment.SystemPageSize">
          <source>Gets the number of bytes in the operating system's memory page.</source>
          <target state="translated">获取操作系统的内存页的字节数。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.SystemPageSize">
          <source>The number of bytes in the system memory page.</source>
          <target state="translated">系统内存页中的字节数。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.SystemPageSize">
          <source>This information can be useful when determining whether to use the <ph id="ph1">&lt;xref:System.IO.MemoryMappedFiles.MemoryMappedFileOptions.DelayAllocatePages?displayProperty=nameWithType&gt;</ph> option when you work with memory-mapped files.</source>
          <target state="translated">此信息很有用，在确定是否使用<ph id="ph1">&lt;xref:System.IO.MemoryMappedFiles.MemoryMappedFileOptions.DelayAllocatePages?displayProperty=nameWithType&gt;</ph>选项的内存映射文件时。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.SystemPageSize">
          <source>In Windows, this value is the <ph id="ph1">`dwPageSize`</ph> member in the <ph id="ph2">`SYSTEM_INFO`</ph> structure.</source>
          <target state="translated">在 Windows 中，此值是<ph id="ph1">`dwPageSize`</ph>中的成员<ph id="ph2">`SYSTEM_INFO`</ph>结构。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.SystemPageSize">
          <source>for access to system and user environment variables.</source>
          <target state="translated">用于访问系统和用户环境变量。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.SystemPageSize">
          <source>Associated exception:</source>
          <target state="translated">相关联的异常：</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="P:System.Environment.TickCount">
          <source>Gets the number of milliseconds elapsed since the system started.</source>
          <target state="translated">获取系统启动后经过的毫秒数。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.TickCount">
          <source>A 32-bit signed integer containing the amount of time in milliseconds that has passed since the last time the computer was started.</source>
          <target state="translated">一个 32 位带符号整数，它包含自上次启动计算机以来所经过的时间（以毫秒为单位）。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.TickCount">
          <source>The value of this property is derived from the system timer and is stored as a 32-bit signed integer.</source>
          <target state="translated">此属性的值派生自系统计时器，存储作为 32 位有符号整数。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.TickCount">
          <source>Note that, because it is derived from the system timer, the resolution of the <ph id="ph1">&lt;xref:System.Environment.TickCount%2A&gt;</ph> property is limited to the resolution of the system timer, which is typically in the range of 10 to 16 milliseconds.</source>
          <target state="translated">请注意，因为它从系统计时器的分辨率派生<ph id="ph1">&lt;xref:System.Environment.TickCount%2A&gt;</ph>属性仅限于系统计时器，这通常是在 10 到 16 毫秒的范围内的分辨率。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.TickCount">
          <source>Because the value of the <ph id="ph1">&lt;xref:System.Environment.TickCount%2A&gt;</ph> property value is a 32-bit signed integer, if the system runs continuously, <ph id="ph2">&lt;xref:System.Environment.TickCount%2A&gt;</ph> will increment from zero to <ph id="ph3">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph> for approximately 24.9 days, then jump to <ph id="ph4">&lt;xref:System.Int32.MinValue?displayProperty=nameWithType&gt;</ph>, which is a negative number, then increment back to zero during the next 24.9 days.</source>
          <target state="translated">因为的值<ph id="ph1">&lt;xref:System.Environment.TickCount%2A&gt;</ph>属性值是一个 32 位带符号的整数，如果系统连续运行，<ph id="ph2">&lt;xref:System.Environment.TickCount%2A&gt;</ph>从零到将递增<ph id="ph3">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph>约 24.9 天内，然后跳转到<ph id="ph4">&lt;xref:System.Int32.MinValue?displayProperty=nameWithType&gt;</ph>，这是负号，然后递增回在下一步 24.9 天内的零。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.TickCount">
          <source>You can work around this issue by calling the Windows <bpt id="p1">[</bpt>GetTickCount<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms724408.aspx)</ept> function, which resets to zero after approximately 49.7 days, or by calling the <bpt id="p2">[</bpt>GetTickCount64<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ms724411.aspx)</ept> function.</source>
          <target state="translated">可以通过调用 Windows 来解决此问题<bpt id="p1">[</bpt>GetTickCount<ept id="p1">](https://msdn.microsoft.com/library/windows/desktop/ms724408.aspx)</ept>函数，将重置为零后大约 49.7 天，或通过调用<bpt id="p2">[</bpt>GetTickCount64<ept id="p2">](https://msdn.microsoft.com/library/windows/desktop/ms724411.aspx)</ept>函数。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.TickCount">
          <source><ph id="ph1">&lt;xref:System.Environment.TickCount%2A&gt;</ph> is different from the <ph id="ph2">&lt;xref:System.DateTime.Ticks%2A?displayProperty=nameWithType&gt;</ph> property, which is the number of 100-nanosecond intervals that have elapsed since 1/1/0001, 12:00am.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Environment.TickCount%2A&gt;</ph> 不同于<ph id="ph2">&lt;xref:System.DateTime.Ticks%2A?displayProperty=nameWithType&gt;</ph>属性，它是 0001 年 1 月 1 日，上午 12:00 以来所经历的 100 毫微秒隔数。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.TickCount">
          <source>Use the <ph id="ph1">&lt;xref:System.DateTime.Now%2A?displayProperty=nameWithType&gt;</ph> property to obtain the current local date and time on this computer.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.DateTime.Now%2A?displayProperty=nameWithType&gt;</ph>属性来获取的当前日期和时间在此计算机上的。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.TickCount">
          <source>The following example demonstrates how to retrieve the positive range of values returned by the <ph id="ph1">&lt;xref:System.Environment.TickCount%2A&gt;</ph> property.</source>
          <target state="translated">下面的示例演示如何检索返回值的正范围<ph id="ph1">&lt;xref:System.Environment.TickCount%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.TickCount">
          <source>The <ph id="ph1">&lt;xref:System.Environment.TickCount%2A&gt;</ph> property cycles between <ph id="ph2">&lt;xref:System.Int32.MinValue?displayProperty=nameWithType&gt;</ph>, which is a negative number, and <ph id="ph3">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph> once every 49.8 days.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Environment.TickCount%2A&gt;</ph>属性周期之间<ph id="ph2">&lt;xref:System.Int32.MinValue?displayProperty=nameWithType&gt;</ph>，这是负数，和<ph id="ph3">&lt;xref:System.Int32.MaxValue?displayProperty=nameWithType&gt;</ph>49.8 天一次。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.TickCount">
          <source>This code sample removes the sign bit to yield a nonnegative number that cycles between zero and <ph id="ph1">&lt;xref:System.Int32.MaxValue&gt;</ph> once every 24.9 days.</source>
          <target state="translated">此代码示例中移除符号位来产生大量零之间循环的非负和<ph id="ph1">&lt;xref:System.Int32.MaxValue&gt;</ph>24.9 天。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" uid="P:System.Environment.UserDomainName">
          <source>Gets the network domain name associated with the current user.</source>
          <target state="translated">获取与当前用户关联的网络域名。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.UserDomainName">
          <source>The network domain name associated with the current user.</source>
          <target state="translated">与当前用户关联的网络域名。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.UserDomainName">
          <source>The domain account credentials for a user are formatted as the user's domain name, the '<ph id="ph1">\\</ph>' character, and user name.</source>
          <target state="translated">用户的域帐户凭据的格式设置为用户的域名称<ph id="ph1">\\</ph>字符，并且用户名称。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.UserDomainName">
          <source>Use the <ph id="ph1">&lt;xref:System.Environment.UserDomainName%2A&gt;</ph> property to obtain the user's domain name without the user name, and the <ph id="ph2">&lt;xref:System.Environment.UserName%2A&gt;</ph> property to obtain the user name without the domain name.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Environment.UserDomainName%2A&gt;</ph>属性来获取用户的域名，无需用户名称和<ph id="ph2">&lt;xref:System.Environment.UserName%2A&gt;</ph>属性来获取无需域名的用户名。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.UserDomainName">
          <source>For example, if a user's domain name and user name are CORPORATENETWORK\john, the <ph id="ph1">&lt;xref:System.Environment.UserDomainName%2A&gt;</ph> property returns "CORPORATENETWORK".</source>
          <target state="translated">例如，如果用户的域名和用户名都 CORPORATENETWORK\john，<ph id="ph1">&lt;xref:System.Environment.UserDomainName%2A&gt;</ph>属性返回"企业网络"。</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.UserDomainName">
          <source>The <ph id="ph1">&lt;xref:System.Environment.UserDomainName%2A&gt;</ph> property first attempts to get the domain name component of the Windows account name for the current user.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Environment.UserDomainName%2A&gt;</ph>属性第一次尝试获取当前用户的 Windows 帐户名称的域名称组件。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.UserDomainName">
          <source>If that attempt fails, this property attempts to get the domain name associated with the user name provided by the <ph id="ph1">&lt;xref:System.Environment.UserName%2A&gt;</ph> property.</source>
          <target state="translated">如果该尝试失败，此属性尝试获取由提供的用户名相关联的域名<ph id="ph1">&lt;xref:System.Environment.UserName%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.UserDomainName">
          <source>If that attempt fails because the host computer is not joined to a domain, then the host computer name is returned.</source>
          <target state="translated">如果该尝试失败，因为主机计算机未加入域，则返回的主机计算机名。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" uid="P:System.Environment.UserDomainName">
          <source>The operating system does not support retrieving the network domain name.</source>
          <target state="translated">操作系统不支持检索网络域名。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" uid="P:System.Environment.UserDomainName">
          <source>The network domain name cannot be retrieved.</source>
          <target state="translated">无法检索的网络域名。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.UserDomainName">
          <source>for read access to the USERDOMAIN environment variable.</source>
          <target state="translated">用于到 USERDOMAIN 环境变量的读访问。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.UserDomainName">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="P:System.Environment.UserInteractive">
          <source>Gets a value indicating whether the current process is running in user interactive mode.</source>
          <target state="translated">获取一个值，用以指示当前进程是否在用户交互模式中运行。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.UserInteractive">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current process is running in user interactive mode; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果当前进程在用户交互模式中运行，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.UserInteractive">
          <source>The <ph id="ph1">&lt;xref:System.Environment.UserInteractive%2A&gt;</ph> property reports <ph id="ph2">`false`</ph> for a Windows process or a service like IIS that runs without a user interface.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Environment.UserInteractive%2A&gt;</ph>属性报表<ph id="ph2">`false`</ph>Windows 进程或没有用户界面的情况下运行的 IIS 这样的服务。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.UserInteractive">
          <source>If this property is <ph id="ph1">`false`</ph>, do not display modal dialogs or message boxes because there is no graphical user interface for the user to interact with.</source>
          <target state="translated">如果此属性为<ph id="ph1">`false`</ph>、 不显示模式对话框或消息框，因为没有图形用户界面与进行交互的用户。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.UserInteractive">
          <source>The following example displays whether the current process is running in user interactive mode.</source>
          <target state="translated">下面的示例显示当前进程是否正运行在用户交互模式中。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="P:System.Environment.UserName">
          <source>Gets the user name of the person who is currently logged on to the Windows operating system.</source>
          <target state="translated">获取当前已登录到 Windows 操作系统的人员的用户名。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.UserName">
          <source>The user name of the person who is logged on to Windows.</source>
          <target state="translated">已登录到 Windows 的人员的用户名。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.UserName">
          <source>You can use the <ph id="ph1">&lt;xref:System.Environment.UserName%2A&gt;</ph> property to identify the user on the current thread, to the system and application for security or access purposes.</source>
          <target state="translated">你可以使用<ph id="ph1">&lt;xref:System.Environment.UserName%2A&gt;</ph>属性来标识当前线程，对系统和安全性或访问目的的应用程序上的用户。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.UserName">
          <source>It can also be used to customize a particular application for each user.</source>
          <target state="translated">它还可以用于自定义每个用户特定的应用程序。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.UserName">
          <source>The <ph id="ph1">&lt;xref:System.Environment.UserName%2A&gt;</ph> property wraps a call to the Windows <bpt id="p1">[</bpt>GetUserName<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724432.aspx)</ept> function.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Environment.UserName%2A&gt;</ph>属性包装对 Windows 的调用<bpt id="p1">[</bpt>GetUserName<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724432.aspx)</ept>函数。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.UserName">
          <source>The domain account credentials for a user are formatted as the user's domain name, the '<ph id="ph1">\\</ph>' character, and user name.</source>
          <target state="translated">用户的域帐户凭据的格式设置为用户的域名称<ph id="ph1">\\</ph>字符，并且用户名称。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.UserName">
          <source>Use the <ph id="ph1">&lt;xref:System.Environment.UserDomainName%2A&gt;</ph> property to obtain the user's domain name and the <ph id="ph2">&lt;xref:System.Environment.UserName%2A&gt;</ph> property to obtain the user name.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Environment.UserDomainName%2A&gt;</ph>属性来获取用户的域名和<ph id="ph2">&lt;xref:System.Environment.UserName%2A&gt;</ph>属性来获取用户名称。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.UserName">
          <source>If an ASP.NET application runs in a development environment, the <ph id="ph1">&lt;xref:System.Environment.UserName%2A&gt;</ph> property returns the name of the current user.</source>
          <target state="translated">如果 ASP.NET 应用程序运行在开发环境中，<ph id="ph1">&lt;xref:System.Environment.UserName%2A&gt;</ph>属性返回当前用户的名称。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.UserName">
          <source>In a published ASP.NET application, this property returns the name of the application pool account (such as Default AppPool).</source>
          <target state="translated">在已发布的 ASP.NET 应用程序中，此属性返回的 （如默认应用程序池） 的应用程序池帐户的名称。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.UserName">
          <source>The following example displays the user name of the person who started the current thread.</source>
          <target state="translated">下面的示例显示启动当前线程的人员的用户名。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.UserName">
          <source>for read access to the USERNAME environment variable.</source>
          <target state="translated">用于到用户名环境变量的读访问。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.UserName">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" uid="P:System.Environment.Version">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.Version" /&gt;</ph> object that describes the major, minor, build, and revision numbers of the common language runtime.</source>
          <target state="translated">获取一个 <ph id="ph1">&lt;see cref="T:System.Version" /&gt;</ph> 对象，该对象描述公共语言运行时的主版本、次版本、内部版本和修订号。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.Version">
          <source>An object that displays the version of the common language runtime.</source>
          <target state="translated">用于显示公共语言运行时版本的对象。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.Version">
          <source>For the .NET Framework Versions 4, 4.5, 4.5.1, and 4.5.2, the <ph id="ph1">&lt;xref:System.Environment.Version%2A?displayProperty=nameWithType&gt;</ph> property returns a <ph id="ph2">&lt;xref:System.Version&gt;</ph> object whose string representation has the form <ph id="ph3">`4.0.30319.xxxxx`</ph>.</source>
          <target state="translated">对于 .NET Framework 版本 4、4.5、4.5.1 和 4.5.2，<ph id="ph1">&lt;xref:System.Environment.Version%2A?displayProperty=nameWithType&gt;</ph> 属性返回字符串表现形式具有窗体 <ph id="ph3">`4.0.30319.xxxxx`</ph> 的 <ph id="ph2">&lt;xref:System.Version&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.Version">
          <source>For the .NET Framework 4.6 and later versions, it has the form <ph id="ph1">`4.0.30319.42000`</ph>.</source>
          <target state="translated">对于.NET Framework 4.6 和更高版本，它具有形式<ph id="ph1">`4.0.30319.42000`</ph>。</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.Version">
          <source>For the <ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> and later, we do not recommend using the <ph id="ph2">&lt;xref:System.Environment.Version%2A&gt;</ph> property to detect the version of the runtime; instead, you can determine the version of the common language runtime by querying the registry.</source>
          <target state="translated">有关<ph id="ph1">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>和更高版本，我们不建议使用<ph id="ph2">&lt;xref:System.Environment.Version%2A&gt;</ph>属性要检测的版本的运行时; 相反，你可以通过查询注册表来确定公共语言运行时的版本。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.Version">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Determine Which .NET Framework Versions Are Installed<ept id="p1">](~/docs/framework/migration-guide/how-to-determine-which-versions-are-installed.md)</ept>.</source>
          <target state="translated">有关详细信息，请参阅<bpt id="p1">[</bpt>如何： 确定安装哪些.NET Framework 版本是<ept id="p1">](~/docs/framework/migration-guide/how-to-determine-which-versions-are-installed.md)</ept>。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.Version">
          <source>For more information about the version of the common language runtime that is installed with each version of the .NET Framework, see <bpt id="p1">[</bpt>Versions and Dependencies<ept id="p1">](~/docs/framework/migration-guide/versions-and-dependencies.md)</ept>.</source>
          <target state="translated">有关与每个版本的.NET Framework 一起安装的公共语言运行时版本的详细信息，请参阅<bpt id="p1">[</bpt>版本和依赖关系<ept id="p1">](~/docs/framework/migration-guide/versions-and-dependencies.md)</ept>。</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.Version">
          <source>The following example displays the version of the common language runtime.</source>
          <target state="translated">下面的示例显示公共语言运行时的版本。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.Version">
          <source>(The version is omitted from the example output for security reasons.)</source>
          <target state="translated">（版本中省略出于安全原因，示例输出。）</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" uid="P:System.Environment.WorkingSet">
          <source>Gets the amount of physical memory mapped to the process context.</source>
          <target state="translated">获取映射到进程上下文的物理内存量。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.WorkingSet">
          <source>A 64-bit signed integer containing the number of bytes of physical memory mapped to the process context.</source>
          <target state="translated">一个 64 位带符号整数，包含映射到进程上下文的物理内存字节的数目。</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.WorkingSet">
          <source>The following example displays the size of the working set of the computer that runs the code example.</source>
          <target state="translated">下面的示例显示运行的代码示例的计算机的工作集的大小。</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.WorkingSet">
          <source>for full access to the resource protected by this permission.</source>
          <target state="translated">用于对受此权限的资源的完全访问。</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Environment.WorkingSet">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /&gt;</ph></target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>