<Type Name="Environment" FullName="System.Environment">
  <TypeSignature Language="C#" Value="public static class Environment" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Environment extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Environment" />
  <TypeSignature Language="VB.NET" Value="Public Class Environment" />
  <TypeSignature Language="C++ CLI" Value="public ref class Environment abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="46d8a-101">提供有关当前环境和平台的信息以及操作它们的方法。</span><span class="sxs-lookup"><span data-stu-id="46d8a-101">Provides information about, and means to manipulate, the current environment and platform.</span></span> <span data-ttu-id="46d8a-102">此类不能被继承。</span><span class="sxs-lookup"><span data-stu-id="46d8a-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46d8a-103">使用<xref:System.Environment>类中检索信息，如命令行自变量，退出代码、 环境变量设置，内容的调用堆栈、 时间由于上一次系统启动和公共语言运行时的版本。</span><span class="sxs-lookup"><span data-stu-id="46d8a-103">Use the <xref:System.Environment> class to retrieve information such as command-line arguments, the exit code, environment variable settings, contents of the call stack, time since last system boot, and the version of the common language runtime.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46d8a-104">下面的示例演示显示有关当前环境的信息的列表。</span><span class="sxs-lookup"><span data-stu-id="46d8a-104">The following example demonstrates displays a list of information about the current environment.</span></span>  
  
 [!code-cpp[environment.class#1](~/samples/snippets/cpp/VS_Snippets_CLR/environment.class/CPP/env0.cpp#1)]
 [!code-csharp[environment.class#1](~/samples/snippets/csharp/VS_Snippets_CLR/environment.class/CS/env0.cs#1)]
 [!code-vb[environment.class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/environment.class/VB/env0.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CommandLine">
      <MemberSignature Language="C#" Value="public static string CommandLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CommandLine" />
      <MemberSignature Language="DocId" Value="P:System.Environment.CommandLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CommandLine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CommandLine { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="46d8a-105">获取该进程的命令行。</span><span class="sxs-lookup"><span data-stu-id="46d8a-105">Gets the command line for this process.</span></span></summary>
        <value><span data-ttu-id="46d8a-106">包含命令行自变量的字符串。</span><span class="sxs-lookup"><span data-stu-id="46d8a-106">A string containing command-line arguments.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46d8a-107">此属性提供访问权限的程序名称和当前进程启动时在命令行上指定的任何参数。</span><span class="sxs-lookup"><span data-stu-id="46d8a-107">This property provides access to the program name and any arguments specified on the command line when the current process was started.</span></span>  
  
 <span data-ttu-id="46d8a-108">程序名称可以包含路径信息，但不需要这样做。</span><span class="sxs-lookup"><span data-stu-id="46d8a-108">The program name can  include path information, but is not required to do so.</span></span> <span data-ttu-id="46d8a-109">使用<xref:System.Environment.GetCommandLineArgs%2A>方法来检索命令行的信息中分析和存储的字符串数组。</span><span class="sxs-lookup"><span data-stu-id="46d8a-109">Use the <xref:System.Environment.GetCommandLineArgs%2A> method to retrieve the command-line information parsed and stored in an array of strings.</span></span>  
  
 <span data-ttu-id="46d8a-110">命令行的缓冲区的最大大小未设置为特定数目的字符;它根据计算机运行的 Windows 操作系统而异。</span><span class="sxs-lookup"><span data-stu-id="46d8a-110">The maximum size of the command-line buffer is not set to a specific number of characters; it varies depending on the Windows operating system that is running on the computer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46d8a-111">下面的示例显示了其自己的命令行。</span><span class="sxs-lookup"><span data-stu-id="46d8a-111">The following example displays its own command line.</span></span>  
  
 [!code-cpp[environment.commandline#1](~/samples/snippets/cpp/VS_Snippets_CLR/environment.CommandLine/CPP/commandline.cpp#1)]
 [!code-csharp[environment.commandline#1](~/samples/snippets/csharp/VS_Snippets_CLR/environment.CommandLine/CS/commandline.cs#1)]
 [!code-vb[environment.commandline#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/environment.CommandLine/VB/commandline.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission"><span data-ttu-id="46d8a-112">用于到 PATH 环境变量的读访问。</span><span class="sxs-lookup"><span data-stu-id="46d8a-112">for read access to the PATH environment variable.</span></span> <span data-ttu-id="46d8a-113">关联的枚举： <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="46d8a-113">Associated enumeration: <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /></span></span></permission>
        <altmember cref="M:System.Environment.GetCommandLineArgs" />
      </Docs>
    </Member>
    <Member MemberName="CurrentDirectory">
      <MemberSignature Language="C#" Value="public static string CurrentDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string CurrentDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Environment.CurrentDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CurrentDirectory { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="46d8a-114">获取或设置当前工作目录的完全限定路径。</span><span class="sxs-lookup"><span data-stu-id="46d8a-114">Gets or sets the fully qualified path of the current working directory.</span></span></summary>
        <value><span data-ttu-id="46d8a-115">包含目录路径的字符串。</span><span class="sxs-lookup"><span data-stu-id="46d8a-115">A string containing a directory path.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46d8a-116">根据定义，此过程即开始在根目录下的本地或网络驱动器，此属性的值是否尾部反斜杠后接的驱动器名称 (例如，"c:\\")。</span><span class="sxs-lookup"><span data-stu-id="46d8a-116">By definition, if this process starts in the root directory of a local or network drive, the value of this property is the drive name followed by a trailing slash (for example, "C:\\").</span></span> <span data-ttu-id="46d8a-117">如果此过程开始时的子目录，则此属性的值是的驱动器和子目录的路径，而无需尾部反斜杠 (例如，"C:\mySubDirectory")。</span><span class="sxs-lookup"><span data-stu-id="46d8a-117">If this process starts in a subdirectory, the value of this property is the drive and subdirectory path, without a trailing slash (for example, "C:\mySubDirectory").</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46d8a-118">下面的示例演示了如何设置<xref:System.Environment.CurrentDirectory%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="46d8a-118">The following example demonstrates setting the <xref:System.Environment.CurrentDirectory%2A> property.</span></span>  
  
 [!code-cpp[System.Environment#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Environment/CPP/Vars1.cpp#4)]
 [!code-csharp[System.Environment#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Environment/CS/Vars1.cs#4)]
 [!code-vb[System.Environment#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Environment/VB/Vars1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="46d8a-119">已尝试设置为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="46d8a-119">Attempted to set to an empty string ("").</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="46d8a-120">已尝试设置为 <see langword="null." /></span><span class="sxs-lookup"><span data-stu-id="46d8a-120">Attempted to set to <see langword="null." /></span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="46d8a-121">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="46d8a-121">An I/O error occurred.</span></span></exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><span data-ttu-id="46d8a-122">已尝试设置一个找不到的本地路径。</span><span class="sxs-lookup"><span data-stu-id="46d8a-122">Attempted to set a local path that cannot be found.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="46d8a-123">调用方没有相应的权限。</span><span class="sxs-lookup"><span data-stu-id="46d8a-123">The caller does not have the appropriate permission.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="46d8a-124">用于写入到文件或目录在集运算中。</span><span class="sxs-lookup"><span data-stu-id="46d8a-124">for writing to files or directories in a set operation.</span></span> <span data-ttu-id="46d8a-125">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="46d8a-125">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="46d8a-126">用于访问路径本身在获取操作中的信息。</span><span class="sxs-lookup"><span data-stu-id="46d8a-126">for access to the information in the path itself in a get operation.</span></span> <span data-ttu-id="46d8a-127">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span><span class="sxs-lookup"><span data-stu-id="46d8a-127">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CurrentManagedThreadId">
      <MemberSignature Language="C#" Value="public static int CurrentManagedThreadId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CurrentManagedThreadId" />
      <MemberSignature Language="DocId" Value="P:System.Environment.CurrentManagedThreadId" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentManagedThreadId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CurrentManagedThreadId { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="46d8a-128">获取当前托管线程的唯一标识符。</span><span class="sxs-lookup"><span data-stu-id="46d8a-128">Gets a unique identifier for the current managed thread.</span></span></summary>
        <value><span data-ttu-id="46d8a-129">一个整数，表示此托管线程的唯一标识符。</span><span class="sxs-lookup"><span data-stu-id="46d8a-129">An integer that represents a unique identifier for this managed thread.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public static void Exit (int exitCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Exit(int32 exitCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Environment.Exit(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Exit (exitCode As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Exit(int exitCode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exitCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="exitCode"><span data-ttu-id="46d8a-130">返回到操作系统的退出代码。</span><span class="sxs-lookup"><span data-stu-id="46d8a-130">The exit code to return to the operating system.</span></span> <span data-ttu-id="46d8a-131">使用 0（零）指示处理已成功完成。</span><span class="sxs-lookup"><span data-stu-id="46d8a-131">Use 0 (zero) to indicate that the process completed successfully.</span></span></param>
        <summary><span data-ttu-id="46d8a-132">终止此进程，并将退出代码返回到操作系统。</span><span class="sxs-lookup"><span data-stu-id="46d8a-132">Terminates this process and returns an exit code to the operating system.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46d8a-133">有关`exitCode`参数，使用非零编号，以指示错误。</span><span class="sxs-lookup"><span data-stu-id="46d8a-133">For the `exitCode` parameter, use a non-zero number to indicate an error.</span></span> <span data-ttu-id="46d8a-134">在你的应用程序，你可以在枚举中定义你自己的错误代码，并返回基于方案的相应的错误代码。</span><span class="sxs-lookup"><span data-stu-id="46d8a-134">In your application, you can define your own error codes in an enumeration, and return the appropriate error code based on the scenario.</span></span> <span data-ttu-id="46d8a-135">例如，返回值为 1 以指示所需的文件不存在，以及值为 2，以指示该文件位于错误的格式。</span><span class="sxs-lookup"><span data-stu-id="46d8a-135">For example, return a value of 1 to indicate that the required file is not present, and a value of 2 to indicate that the file is in the wrong format.</span></span> <span data-ttu-id="46d8a-136">有关使用 Windows 操作系统的退出代码的列表，请参阅[系统错误代码](http://msdn.microsoft.com/library/ms681381.aspx)Windows 文档中。</span><span class="sxs-lookup"><span data-stu-id="46d8a-136">For a list of exit codes used by the Windows operating system, see [System Error Codes](http://msdn.microsoft.com/library/ms681381.aspx) in the Windows documentation.</span></span>  
  
 <span data-ttu-id="46d8a-137">调用<xref:System.Environment.Exit%2A>方法不同于使用您的编程语言的`return`语句通过以下方式：</span><span class="sxs-lookup"><span data-stu-id="46d8a-137">Calling the <xref:System.Environment.Exit%2A> method differs from using your programming language's `return` statement in the following ways:</span></span>  
  
-   <span data-ttu-id="46d8a-138"><xref:System.Environment.Exit%2A> 始终终止应用程序。</span><span class="sxs-lookup"><span data-stu-id="46d8a-138"><xref:System.Environment.Exit%2A> always terminates an application.</span></span> <span data-ttu-id="46d8a-139">使用`return`语句可能会终止应用程序，仅当在使用该应用程序入口点，如在`Main`方法。</span><span class="sxs-lookup"><span data-stu-id="46d8a-139">Using the `return` statement may terminate an application only if it is used in the application entry point, such as in the `Main` method.</span></span>  
  
-   <span data-ttu-id="46d8a-140"><xref:System.Environment.Exit%2A> 应用程序将立即终止，即使其他线程正在运行。</span><span class="sxs-lookup"><span data-stu-id="46d8a-140"><xref:System.Environment.Exit%2A> terminates an application immediately, even if other threads are running.</span></span> <span data-ttu-id="46d8a-141">如果`return`语句调用的应用程序入口点，这会导致应用程序终止只有在所有前台线程已都终止后。</span><span class="sxs-lookup"><span data-stu-id="46d8a-141">If the `return` statement is called in the application entry point, it causes an application to terminate only after all foreground threads have terminated.</span></span>  
  
-   <span data-ttu-id="46d8a-142"><xref:System.Environment.Exit%2A> 要求调用方有权调用非托管的代码。</span><span class="sxs-lookup"><span data-stu-id="46d8a-142"><xref:System.Environment.Exit%2A> requires the caller to have permission to call unmanaged code.</span></span> <span data-ttu-id="46d8a-143">`return`语句却没有。</span><span class="sxs-lookup"><span data-stu-id="46d8a-143">The `return` statement does not.</span></span>  
  
-   <span data-ttu-id="46d8a-144">如果<xref:System.Environment.Exit%2A>从调用`try`或`catch`阻止，请在任何代码`finally`块不会执行。</span><span class="sxs-lookup"><span data-stu-id="46d8a-144">If <xref:System.Environment.Exit%2A> is called from a `try` or `catch` block, the code in any `finally` block does not execute.</span></span> <span data-ttu-id="46d8a-145">如果`return`使用语句中的代码`finally`块会执行。</span><span class="sxs-lookup"><span data-stu-id="46d8a-145">If the `return` statement is used, the code in the `finally` block does execute.</span></span>  
  
-   <span data-ttu-id="46d8a-146">如果<xref:System.Environment.Exit%2A>时，将调用中的代码[受约束的执行区域](~/docs/framework/performance/constrained-execution-regions.md)(CER) 正在运行，CER 将不会完成执行。</span><span class="sxs-lookup"><span data-stu-id="46d8a-146">If <xref:System.Environment.Exit%2A> is called when code in a [constrained execution region](~/docs/framework/performance/constrained-execution-regions.md) (CER) is running, the CER will not complete execution.</span></span> <span data-ttu-id="46d8a-147">如果`return`使用语句后，CER 完成执行。</span><span class="sxs-lookup"><span data-stu-id="46d8a-147">If the `return` statement is used, the CER completes execution.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="46d8a-148">调用方没有足够的安全权限来执行此函数。</span><span class="sxs-lookup"><span data-stu-id="46d8a-148">The caller does not have sufficient security permission to perform this function.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="46d8a-149">表示调用非托管的代码的能力。</span><span class="sxs-lookup"><span data-stu-id="46d8a-149">for the ability to call unmanaged code.</span></span> <span data-ttu-id="46d8a-150">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="46d8a-150">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ExitCode">
      <MemberSignature Language="C#" Value="public static int ExitCode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 ExitCode" />
      <MemberSignature Language="DocId" Value="P:System.Environment.ExitCode" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ExitCode As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int ExitCode { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="46d8a-151">获取或设置进程的退出代码。</span><span class="sxs-lookup"><span data-stu-id="46d8a-151">Gets or sets the exit code of the process.</span></span></summary>
        <value><span data-ttu-id="46d8a-152">包含退出代码的 32 位有符号整数。</span><span class="sxs-lookup"><span data-stu-id="46d8a-152">A 32-bit signed integer containing the exit code.</span></span> <span data-ttu-id="46d8a-153">默认值为 0（零），这指示已成功完成处理。</span><span class="sxs-lookup"><span data-stu-id="46d8a-153">The default value is 0 (zero), which indicates that the process completed successfully.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46d8a-154">如果`Main`方法返回`void`，你可以使用此属性设置将返回到调用的环境的退出代码。</span><span class="sxs-lookup"><span data-stu-id="46d8a-154">If the `Main` method returns `void`, you can use this property to set the exit code that will be returned to the calling environment.</span></span> <span data-ttu-id="46d8a-155">如果`Main`不返回`void`，将忽略此属性。</span><span class="sxs-lookup"><span data-stu-id="46d8a-155">If `Main` does not return `void`, this property is ignored.</span></span> <span data-ttu-id="46d8a-156">此属性的初始值为零。</span><span class="sxs-lookup"><span data-stu-id="46d8a-156">The initial value of this property is zero.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="46d8a-157"><xref:System.Environment.ExitCode%2A>属性是一个带符号的 32 位整数。</span><span class="sxs-lookup"><span data-stu-id="46d8a-157">The <xref:System.Environment.ExitCode%2A> property is a signed 32-bit integer.</span></span> <span data-ttu-id="46d8a-158">若要防止该属性返回负的退出代码，不应使用的值大于或等于 0x80000000。</span><span class="sxs-lookup"><span data-stu-id="46d8a-158">To prevent the property from returning a negative exit code, you should not use values greater than or equal to 0x80000000.</span></span>  
  
 <span data-ttu-id="46d8a-159">使用非零数字以指示错误。</span><span class="sxs-lookup"><span data-stu-id="46d8a-159">Use a non-zero number to indicate an error.</span></span> <span data-ttu-id="46d8a-160">在你的应用程序，你可以在枚举中定义你自己的错误代码，并返回基于方案的相应的错误代码。</span><span class="sxs-lookup"><span data-stu-id="46d8a-160">In your application, you can define your own error codes in an enumeration, and return the appropriate error code based on the scenario.</span></span> <span data-ttu-id="46d8a-161">例如，返回值为 1 以指示所需的文件不存在和值为 2，以指示该文件位于错误的格式。</span><span class="sxs-lookup"><span data-stu-id="46d8a-161">For example, return a value of 1 to indicate that the required file is not present and a value of 2 to indicate that the file is in the wrong format.</span></span> <span data-ttu-id="46d8a-162">有关使用 Windows 操作系统的退出代码的列表，请参阅[系统错误代码](http://msdn.microsoft.com/library/ms681381\(v=vs.85\))Windows 文档中。</span><span class="sxs-lookup"><span data-stu-id="46d8a-162">For a list of exit codes used by the Windows operating system, see [System Error Codes](http://msdn.microsoft.com/library/ms681381\(v=vs.85\)) in the Windows documentation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46d8a-163">下面是名为 Double.exe 两倍，作为命令行自变量传递给它的整数值的简单应用程序。</span><span class="sxs-lookup"><span data-stu-id="46d8a-163">The following is a simple app named Double.exe that doubles an integer value passed to it as a command-line argument.</span></span> <span data-ttu-id="46d8a-164">值将分配到的错误代码<xref:System.Environment.ExitCode%2A>属性以指示错误条件。</span><span class="sxs-lookup"><span data-stu-id="46d8a-164">The value assigns error codes to the <xref:System.Environment.ExitCode%2A> property to indicate error conditions.</span></span> <span data-ttu-id="46d8a-165">请注意，您必须添加对要成功编译此示例的 System.Numerics.dll 程序集的引用。</span><span class="sxs-lookup"><span data-stu-id="46d8a-165">Note that you must add a reference to the System.Numerics.dll assembly to successfully compile the example.</span></span>  
  
 [!code-csharp[System.Environment.ExitCode#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.environment.exitcode/cs/double.cs#1)]
 [!code-vb[System.Environment.ExitCode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.environment.exitcode/vb/double.vb#1)]  
  
 <span data-ttu-id="46d8a-166">然后可以从批处理文件，如下所示，使其错误代码可访问通过调用该示例`ERRORLEVEL`命令。</span><span class="sxs-lookup"><span data-stu-id="46d8a-166">The example can then be invoked from a batch file such as the following, which makes its error codes accessible by using the `ERRORLEVEL` command.</span></span>  
  
```  
  
echo off  
Double.exe %1  
If errorlevel 1639 goto NoArg   
if errorlevel 534 goto Overflow  
if errorlevel 160 goto BadArg  
if errorlevel 0 echo Completed Successfully   
goto :EOF  
  
:NoArg  
echo Missing argument  
goto :EOF  
  
: Overflow  
echo Arithmetic overflow  
goto :EOF  
  
:BadArg  
echo Invalid argument  
goto :EOF  
  
```  
  
 <span data-ttu-id="46d8a-167">下图显示产生通过调用批处理文件的一些示例输出。</span><span class="sxs-lookup"><span data-stu-id="46d8a-167">The following shows some sample output produced by invoking the batch file.</span></span>  
  
```Output  
  
>getdouble 123>echo offResult: 246Completed Successfully>getdouble 5912323109093>echo offArithmetic overflow>getdouble>echo offMissing argument>getdouble "a string">echo offInvalid argument  
  
```  
  
 <span data-ttu-id="46d8a-168">请注意该代码，Double.exe 为与以下示例中，函数相同，只不过前者定义名为的入口点`Main`，其没有返回值，而此示例定义了名为的入口点`Main`返回一个整数。</span><span class="sxs-lookup"><span data-stu-id="46d8a-168">Note that code for Double.exe is identical in function to the following example, except that the former defines an entry point named `Main` that has no return value, whereas this example defines an entry point named `Main` that returns an integer.</span></span>  
  
 [!code-csharp[System.Environment.ExitCode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.environment.exitcode/cs/double1.cs#2)]
 [!code-vb[System.Environment.ExitCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.environment.exitcode/vb/double1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpandEnvironmentVariables">
      <MemberSignature Language="C#" Value="public static string ExpandEnvironmentVariables (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ExpandEnvironmentVariables(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Environment.ExpandEnvironmentVariables(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExpandEnvironmentVariables (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ExpandEnvironmentVariables(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="46d8a-169">包含零个或多个环境变量名的字符串。</span><span class="sxs-lookup"><span data-stu-id="46d8a-169">A string containing the names of zero or more environment variables.</span></span> <span data-ttu-id="46d8a-170">每个环境变量都用百分号 (%) 引起来。</span><span class="sxs-lookup"><span data-stu-id="46d8a-170">Each environment variable is quoted with the percent sign character (%).</span></span></param>
        <summary><span data-ttu-id="46d8a-171">将嵌入到指定字符串中的每个环境变量的名称替换为该变量的值的等效字符串，然后返回结果字符串。</span><span class="sxs-lookup"><span data-stu-id="46d8a-171">Replaces the name of each environment variable embedded in the specified string with the string equivalent of the value of the variable, then returns the resulting string.</span></span></summary>
        <returns><span data-ttu-id="46d8a-172">一个字符串，其中的每个环境变量均被替换为该变量的值。</span><span class="sxs-lookup"><span data-stu-id="46d8a-172">A string with each environment variable replaced by its value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46d8a-173">COM 互操作用于从操作系统中检索环境变量。</span><span class="sxs-lookup"><span data-stu-id="46d8a-173">COM interop is used to retrieve the environment variables from the operating system.</span></span> <span data-ttu-id="46d8a-174">生成一个几个可能的异常; 如果由于 COM 错误，无法检索环境变量，用于说明失败的原因的 HRESULT也就是说，异常取决于相应的 HRESULT。</span><span class="sxs-lookup"><span data-stu-id="46d8a-174">If the environment variables cannot be retrieved due to a COM error, the HRESULT that explains the cause of the failure is used to generate one of several possible exceptions; that is, the exception depends on the HRESULT.</span></span> <span data-ttu-id="46d8a-175">有关如何处理 HRESULT 的详细信息，请参阅备注部分的<xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="46d8a-175">For more information about how the HRESULT is processed, see the Remarks section of the <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="46d8a-176">环境变量设置才会被替换。</span><span class="sxs-lookup"><span data-stu-id="46d8a-176">Replacement only occurs for environment variables that are set.</span></span> <span data-ttu-id="46d8a-177">例如，假设`name`是"MyENV = %myenv%"。</span><span class="sxs-lookup"><span data-stu-id="46d8a-177">For example, suppose `name` is "MyENV = %MyENV%".</span></span> <span data-ttu-id="46d8a-178">如果环境变量，MyENV，设置为 42，则此方法将返回"MyENV = 42"。</span><span class="sxs-lookup"><span data-stu-id="46d8a-178">If the environment variable, MyENV, is set to 42, this method returns "MyENV = 42".</span></span> <span data-ttu-id="46d8a-179">如果未设置 MyENV，不会发生更改;此方法返回"MyENV = %myenv%"。</span><span class="sxs-lookup"><span data-stu-id="46d8a-179">If MyENV is not set, no change occurs; this method returns "MyENV = %MyENV%".</span></span>  
  
 <span data-ttu-id="46d8a-180">返回值的大小被限制为 32k。</span><span class="sxs-lookup"><span data-stu-id="46d8a-180">The size of the return value is limited to 32K.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46d8a-181">下面的示例演示如何获取系统驱动器和系统根变量。</span><span class="sxs-lookup"><span data-stu-id="46d8a-181">The following example shows how to obtain the system drive and system root variables.</span></span>  
  
 [!code-cpp[Environment.ExpandEnvironmentVariables#1](~/samples/snippets/cpp/VS_Snippets_CLR/environment.ExpandEnvironmentVariables/CPP/expandenvironmentvariables.cpp#1)]
 [!code-csharp[Environment.ExpandEnvironmentVariables#1](~/samples/snippets/csharp/VS_Snippets_CLR/environment.ExpandEnvironmentVariables/CS/expandenvironmentvariables.cs#1)]
 [!code-vb[Environment.ExpandEnvironmentVariables#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/environment.ExpandEnvironmentVariables/VB/expandenvironmentvariables.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="46d8a-182"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="46d8a-182"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission"><span data-ttu-id="46d8a-183">它能够访问中的环境变量<paramref name="name" />。</span><span class="sxs-lookup"><span data-stu-id="46d8a-183">for the ability to access the environment variables in <paramref name="name" />.</span></span> <span data-ttu-id="46d8a-184">关联的枚举： <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="46d8a-184">Associated enumeration: <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /></span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="FailFast">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="46d8a-185">向 Windows 的应用程序事件日志写入消息后立即终止进程，然后在发往 Microsoft 的错误报告中加入该消息和可选的异常信息。</span><span class="sxs-lookup"><span data-stu-id="46d8a-185">Immediately terminates a process after writing a message to the Windows Application event log, and then includes the message and optional exception information in error reporting to Microsoft.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FailFast">
      <MemberSignature Language="C#" Value="public static void FailFast (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FailFast(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Environment.FailFast(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub FailFast (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FailFast(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="46d8a-186">一条解释进程终止原因的消息；如果未提供解释，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="46d8a-186">A message that explains why the process was terminated, or <see langword="null" /> if no explanation is provided.</span></span></param>
        <summary><span data-ttu-id="46d8a-187">向 Windows 的应用程序事件日志写入消息后立即终止进程，然后在发往 Microsoft 的错误报告中加入该消息。</span><span class="sxs-lookup"><span data-stu-id="46d8a-187">Immediately terminates a process after writing a message to the Windows Application event log, and then includes the message in error reporting to Microsoft.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46d8a-188">此方法终止进程，而无需运行任何活动`try` / `finally`块或终结器。</span><span class="sxs-lookup"><span data-stu-id="46d8a-188">This method terminates a process without running any active `try`/`finally` blocks or finalizers.</span></span>  
  
 <span data-ttu-id="46d8a-189"><xref:System.Environment.FailFast%2A>方法写入`message`字符串保存到 Windows 应用程序事件日志中，创建你的应用程序的转储，然后终止当前进程。</span><span class="sxs-lookup"><span data-stu-id="46d8a-189">The <xref:System.Environment.FailFast%2A> method writes the `message` string to the Windows Application event log, creates a dump of your application, and then terminates the current process.</span></span> <span data-ttu-id="46d8a-190">`message`字符串还包含在向 Microsoft 报告的错误。</span><span class="sxs-lookup"><span data-stu-id="46d8a-190">The `message` string is also included in error reporting to Microsoft.</span></span>  
  
 <span data-ttu-id="46d8a-191">使用<xref:System.Environment.FailFast%2A>方法而不是<xref:System.Environment.Exit%2A>方法终止你的应用程序，如果你的应用程序的状态已损坏并且无法修复，并执行应用程序的`try` / `finally`块和终结器将损坏程序资源。</span><span class="sxs-lookup"><span data-stu-id="46d8a-191">Use the <xref:System.Environment.FailFast%2A> method instead of the <xref:System.Environment.Exit%2A> method to terminate your application if the state of your application is damaged beyond repair, and executing your application's `try`/`finally` blocks and finalizers will corrupt program resources.</span></span>  
  
 <span data-ttu-id="46d8a-192">通过使用 Windows 错误报告情况下，信息报告给 Microsoft。</span><span class="sxs-lookup"><span data-stu-id="46d8a-192">Information is reported to Microsoft by using Windows Error Reporting.</span></span> <span data-ttu-id="46d8a-193">有关详细信息，请参阅[Windows 错误报告： 入门](http://msdn.microsoft.com/library/windows/hardware/dn641144.aspx)。</span><span class="sxs-lookup"><span data-stu-id="46d8a-193">For more information, see [Windows Error Reporting: Getting Started](http://msdn.microsoft.com/library/windows/hardware/dn641144.aspx).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46d8a-194">下面的示例日志条目写入 Windows 应用程序事件日志，并终止当前进程。</span><span class="sxs-lookup"><span data-stu-id="46d8a-194">The following example writes a log entry to the Windows Application event log and terminates the current process.</span></span>  
  
 [!code-csharp[environment.FailFast#1](~/samples/snippets/csharp/VS_Snippets_CLR/environment.FailFast/cs/ff.cs#1)]
 [!code-vb[environment.FailFast#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/environment.FailFast/vb/ff.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="46d8a-195">需要完全信任直接调用方。</span><span class="sxs-lookup"><span data-stu-id="46d8a-195">requires full trust for the immediate caller.</span></span> <span data-ttu-id="46d8a-196">此成员不能由部分受信任或不透明的代码。</span><span class="sxs-lookup"><span data-stu-id="46d8a-196">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="FailFast">
      <MemberSignature Language="C#" Value="public static void FailFast (string message, Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FailFast(string message, class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Environment.FailFast(System.String,System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FailFast(System::String ^ message, Exception ^ exception);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="46d8a-197">一条解释进程终止原因的消息；如果未提供解释，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="46d8a-197">A message that explains why the process was terminated, or <see langword="null" /> if no explanation is provided.</span></span></param>
        <param name="exception"><span data-ttu-id="46d8a-198">一个异常，表示导致终止的错误。</span><span class="sxs-lookup"><span data-stu-id="46d8a-198">An exception that represents the error that caused the termination.</span></span> <span data-ttu-id="46d8a-199">通常这是 <see langword="catch" /> 块中的异常。</span><span class="sxs-lookup"><span data-stu-id="46d8a-199">This is typically the exception in a <see langword="catch" /> block.</span></span></param>
        <summary><span data-ttu-id="46d8a-200">向 Windows 的应用程序事件日志写入消息后立即终止进程，然后在发往 Microsoft 的错误报告中加入该消息和异常信息。</span><span class="sxs-lookup"><span data-stu-id="46d8a-200">Immediately terminates a process after writing a message to the Windows Application event log, and then includes the message and exception information in error reporting to Microsoft.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46d8a-201">此方法会终止进程，而无需运行任何活动`try` / `finally`块或终结器。</span><span class="sxs-lookup"><span data-stu-id="46d8a-201">This method terminates the process without running any active `try`/`finally` blocks or finalizers.</span></span>  
  
 <span data-ttu-id="46d8a-202"><xref:System.Environment.FailFast%2A>方法写入`message`字符串保存到 Windows 应用程序事件日志中，创建你的应用程序的转储，然后终止当前进程。</span><span class="sxs-lookup"><span data-stu-id="46d8a-202">The <xref:System.Environment.FailFast%2A> method writes the `message` string to the Windows Application event log, creates a dump of your application, and then terminates the current process.</span></span>  
  
 <span data-ttu-id="46d8a-203">通过使用 Windows 错误报告情况下，信息报告给 Microsoft。</span><span class="sxs-lookup"><span data-stu-id="46d8a-203">Information is reported to Microsoft by using Windows Error Reporting.</span></span> <span data-ttu-id="46d8a-204">有关详细信息，请参阅[Windows 错误报告： 入门](http://msdn.microsoft.com/library/windows/hardware/dn641144.aspx)。</span><span class="sxs-lookup"><span data-stu-id="46d8a-204">For more information, see [Windows Error Reporting: Getting Started](http://msdn.microsoft.com/library/windows/hardware/dn641144.aspx).</span></span> <span data-ttu-id="46d8a-205">向 Microsoft 报告的错误包括`message`和`exception`提供用于对分类错误的详细信息的信息。</span><span class="sxs-lookup"><span data-stu-id="46d8a-205">Error reporting to Microsoft includes `message` and `exception` information, which provides details used to classify the error.</span></span> <span data-ttu-id="46d8a-206">尽管`exception`不是处理，因为该进程将终止，仍获取引发异常的上下文信息。</span><span class="sxs-lookup"><span data-stu-id="46d8a-206">Although `exception` is not handled because the process is terminated, the contextual information that raised the exception is still obtained.</span></span>  
  
 <span data-ttu-id="46d8a-207">如果`exception`是`null`，或者如果`exception`是不会引发，此方法的操作与相同<xref:System.Environment.FailFast%28System.String%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="46d8a-207">If `exception` is `null`, or if `exception` is not thrown, this method operates the same as the <xref:System.Environment.FailFast%28System.String%29> method overload.</span></span>  
  
 <span data-ttu-id="46d8a-208">使用<xref:System.Environment.FailFast%2A>方法而不是<xref:System.Environment.Exit%2A>方法终止你的应用程序，如果你的应用程序的状态已损坏并且无法修复，并执行应用程序的`try` / `finally`块和终结器将损坏程序资源。</span><span class="sxs-lookup"><span data-stu-id="46d8a-208">Use the <xref:System.Environment.FailFast%2A> method instead of the <xref:System.Environment.Exit%2A> method to terminate your application if the state of your application is damaged beyond repair, and executing your application's `try`/`finally` blocks and finalizers will corrupt program resources.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="46d8a-209">需要完全信任直接调用方。</span><span class="sxs-lookup"><span data-stu-id="46d8a-209">requires full trust for the immediate caller.</span></span> <span data-ttu-id="46d8a-210">此成员不能由部分受信任或不透明的代码。</span><span class="sxs-lookup"><span data-stu-id="46d8a-210">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetCommandLineArgs">
      <MemberSignature Language="C#" Value="public static string[] GetCommandLineArgs ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetCommandLineArgs() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Environment.GetCommandLineArgs" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCommandLineArgs () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetCommandLineArgs();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="46d8a-211">返回包含当前进程的命令行自变量的字符串数组。</span><span class="sxs-lookup"><span data-stu-id="46d8a-211">Returns a string array containing the command-line arguments for the current process.</span></span></summary>
        <returns><span data-ttu-id="46d8a-212">字符串数组，其中的每个元素都包含一个命令行自变量。</span><span class="sxs-lookup"><span data-stu-id="46d8a-212">An array of string where each element contains a command-line argument.</span></span> <span data-ttu-id="46d8a-213">第一个元素是可执行文件名，后面的零个或多个元素包含其余的命令行自变量。</span><span class="sxs-lookup"><span data-stu-id="46d8a-213">The first element is the executable file name, and the following zero or more elements contain the remaining command-line arguments.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46d8a-214">数组中的第一个元素包含执行程序的文件的名称。</span><span class="sxs-lookup"><span data-stu-id="46d8a-214">The first element in the array contains the file name of the executing program.</span></span> <span data-ttu-id="46d8a-215">如果文件名称不可用，则第一个元素等同于<xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="46d8a-215">If the file name is not available, the first element is equal to <xref:System.String.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="46d8a-216">剩余的元素包含在命令行中输入任何其他令牌。</span><span class="sxs-lookup"><span data-stu-id="46d8a-216">The remaining elements contain any additional tokens entered on the command line.</span></span>  
  
 <span data-ttu-id="46d8a-217">程序文件名称可以但不是需要，包含路径信息。</span><span class="sxs-lookup"><span data-stu-id="46d8a-217">The program file name can, but is not required to, include path information.</span></span>  
  
 <span data-ttu-id="46d8a-218">命令行参数由空格分隔。</span><span class="sxs-lookup"><span data-stu-id="46d8a-218">Command line arguments are delimited by spaces.</span></span> <span data-ttu-id="46d8a-219">可以使用两个双引号 （"） 包含在参数中的空格。</span><span class="sxs-lookup"><span data-stu-id="46d8a-219">You can use double quotation marks (") to include spaces within an argument.</span></span> <span data-ttu-id="46d8a-220">单引号 （'），但是，不提供此功能。</span><span class="sxs-lookup"><span data-stu-id="46d8a-220">The single quotation mark ('), however, does not provide this functionality.</span></span>  
  
 <span data-ttu-id="46d8a-221">如果两个或偶数个反斜杠后跟双引号，每个继续反斜杠对将被替换为一个反斜杠，并且双引号被删除。</span><span class="sxs-lookup"><span data-stu-id="46d8a-221">If a double quotation mark follows two or an even number of backslashes, each proceeding backslash pair is replaced with one backslash and the double quotation mark is removed.</span></span> <span data-ttu-id="46d8a-222">如果双引号遵循奇数数目的反斜杠，包括仅仅是一个，每个前面对将被替换为一个反斜杠，并且会删除其余的反斜杠;但是，在这种情况下双引号不删除。</span><span class="sxs-lookup"><span data-stu-id="46d8a-222">If a double quotation mark follows an odd number of backslashes, including just one, each preceding pair is replaced with one backslash and the remaining backslash is removed; however, in this case the double quotation mark is not removed.</span></span>  
  
 <span data-ttu-id="46d8a-223">下表演示了如何命令行自变量可以进行分隔，并假定`MyApp`作为当前正在执行的应用程序。</span><span class="sxs-lookup"><span data-stu-id="46d8a-223">The following table shows how command line arguments can be delimited, and assumes `MyApp` as the current executing application.</span></span>  
  
|<span data-ttu-id="46d8a-224">在命令行输入</span><span class="sxs-lookup"><span data-stu-id="46d8a-224">Input at the command line</span></span>|<span data-ttu-id="46d8a-225">生成命令行参数</span><span class="sxs-lookup"><span data-stu-id="46d8a-225">Resulting command line arguments</span></span>|  
|-------------------------------|--------------------------------------|  
|`MyApp alpha beta`|`MyApp, alpha, beta`|  
|`MyApp "alpha with spaces" "beta with spaces"`|`MyApp, alpha with spaces, beta with spaces`|  
|`MyApp 'alpha with spaces' beta`|`MyApp, 'alpha, with, spaces', beta`|  
|`MyApp \\\alpha \\\\"beta`|`MyApp, \\\alpha, \\beta`|  
|`MyApp \\\\\"alpha \"beta`|`MyApp, \\"alpha, "beta`|  
  
 <span data-ttu-id="46d8a-226">若要获取作为单个字符串的命令行，使用<xref:System.Environment.CommandLine%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="46d8a-226">To obtain the command line as a single string, use the <xref:System.Environment.CommandLine%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46d8a-227">下面的示例显示了应用程序的命令行自变量。</span><span class="sxs-lookup"><span data-stu-id="46d8a-227">The following example displays the application's command line arguments.</span></span>  
  
 [!code-cpp[Environment.GetCommandLineArgs#1](~/samples/snippets/cpp/VS_Snippets_CLR/Environment.GetCommandLineArgs/CPP/getcommandlineargs.cpp#1)]
 [!code-csharp[Environment.GetCommandLineArgs#1](~/samples/snippets/csharp/VS_Snippets_CLR/Environment.GetCommandLineArgs/CS/getcommandlineargs.cs#1)]
 [!code-vb[Environment.GetCommandLineArgs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Environment.GetCommandLineArgs/VB/getcommandlineargs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="46d8a-228">系统不支持命令行参数。</span><span class="sxs-lookup"><span data-stu-id="46d8a-228">The system does not support command-line arguments.</span></span></exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission"><span data-ttu-id="46d8a-229">用于到 PATH 环境变量的读访问。</span><span class="sxs-lookup"><span data-stu-id="46d8a-229">for read access to the PATH environment variable.</span></span> <span data-ttu-id="46d8a-230">关联的枚举： <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="46d8a-230">Associated enumeration: <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /></span></span></permission>
        <altmember cref="P:System.Environment.CommandLine" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEnvironmentVariable">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="46d8a-231">检索环境变量的值。</span><span class="sxs-lookup"><span data-stu-id="46d8a-231">Retrieves the value of an environment variable.</span></span></summary>
        <altmember cref="M:System.Environment.GetEnvironmentVariables" />
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEnvironmentVariable">
      <MemberSignature Language="C#" Value="public static string GetEnvironmentVariable (string variable);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetEnvironmentVariable(string variable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Environment.GetEnvironmentVariable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEnvironmentVariable (variable As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetEnvironmentVariable(System::String ^ variable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="variable"><span data-ttu-id="46d8a-232">环境变量名。</span><span class="sxs-lookup"><span data-stu-id="46d8a-232">The name of the environment variable.</span></span></param>
        <summary><span data-ttu-id="46d8a-233">从当前进程检索环境变量的值。</span><span class="sxs-lookup"><span data-stu-id="46d8a-233">Retrieves the value of an environment variable from the current process.</span></span></summary>
        <returns><span data-ttu-id="46d8a-234"><paramref name="variable" /> 指定的环境变量的值；或者如果找不到环境变量，则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="46d8a-234">The value of the environment variable specified by <paramref name="variable" />, or <see langword="null" /> if the environment variable is not found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46d8a-235"><xref:System.Environment.GetEnvironmentVariable%28System.String%29>方法从当前进程的环境块检索环境变量。</span><span class="sxs-lookup"><span data-stu-id="46d8a-235">The <xref:System.Environment.GetEnvironmentVariable%28System.String%29> method retrieves an environment variable from the environment block of the current process only.</span></span> <span data-ttu-id="46d8a-236">它等效于调用<xref:System.Environment.GetEnvironmentVariable%28System.String%2CSystem.EnvironmentVariableTarget%29>方法替换`target`值<xref:System.EnvironmentVariableTarget.Process?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="46d8a-236">It is equivalent to calling the <xref:System.Environment.GetEnvironmentVariable%28System.String%2CSystem.EnvironmentVariableTarget%29> method with a `target` value of <xref:System.EnvironmentVariableTarget.Process?displayProperty=nameWithType>.</span></span> <span data-ttu-id="46d8a-237">当前进程的环境块包括以下环境变量：</span><span class="sxs-lookup"><span data-stu-id="46d8a-237">The environment block of the current process includes the following environment variables:</span></span>  
  
-   <span data-ttu-id="46d8a-238">所有每台计算机在创建的过程，以及它们的值时定义的环境变量。</span><span class="sxs-lookup"><span data-stu-id="46d8a-238">All per-machine environment variables that are defined at the time the process is created, along with their values.</span></span>  
  
-   <span data-ttu-id="46d8a-239">该过程被创建时定义的所有用户每个环境变量，以及它们的值。</span><span class="sxs-lookup"><span data-stu-id="46d8a-239">All per-user environment variables that are defined at the time the process is created, along with their values.</span></span>  
  
-   <span data-ttu-id="46d8a-240">添加到的处理块中，当进程运行时通过调用任何变量<xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%29>方法或<xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%2CSystem.EnvironmentVariableTarget%29>方法替换`target`值<xref:System.EnvironmentVariableTarget.Process?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="46d8a-240">Any variables added to the process block while the process is running by calling either the <xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%29> method or the <xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%2CSystem.EnvironmentVariableTarget%29> method with a `target` value of <xref:System.EnvironmentVariableTarget.Process?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="46d8a-241">如果进程启动后创建环境变量，你可以使用此方法来检索已通过调用创建的这些变量<xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%29>方法或<xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%2CSystem.EnvironmentVariableTarget%29>方法替换`target`的值。<xref:System.EnvironmentVariableTarget.Process?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="46d8a-241">If environment variables are created after the process has started, you can use this method to retrieve only those variables that were created by calling the <xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%29> method or the <xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%2CSystem.EnvironmentVariableTarget%29> method with a `target` value of .<xref:System.EnvironmentVariableTarget.Process?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="46d8a-242">若要检索所有环境变量，以及它们的值，调用<xref:System.Environment.GetEnvironmentVariables%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="46d8a-242">To retrieve all environment variables along with their values, call the <xref:System.Environment.GetEnvironmentVariables%2A> method.</span></span>  
  
 <span data-ttu-id="46d8a-243">环境变量名不区分大小写。</span><span class="sxs-lookup"><span data-stu-id="46d8a-243">Environment variable names are not case-sensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46d8a-244">下面的示例使用<xref:System.Environment.GetEnvironmentVariable%2A>方法来检索`windir`环境变量，其中包含 Windows 目录的路径。</span><span class="sxs-lookup"><span data-stu-id="46d8a-244">The following example uses the <xref:System.Environment.GetEnvironmentVariable%2A> method to retrieve the `windir` environment variable, which contains the path of the Windows directory.</span></span>  
  
 [!code-cpp[System.Environment#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Environment/CPP/Vars1.cpp#4)]
 [!code-csharp[System.Environment#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Environment/CS/Vars1.cs#4)]
 [!code-vb[System.Environment#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Environment/VB/Vars1.vb#4)]  
  
 <span data-ttu-id="46d8a-245">以下示例尝试检索名为的环境变量的值`Test1`从进程环境块。</span><span class="sxs-lookup"><span data-stu-id="46d8a-245">The following example attempts to retrieve the value of an environment variable named `Test1` from the process environment block.</span></span> <span data-ttu-id="46d8a-246">如果不存在该变量，该示例将创建其并检索其值。</span><span class="sxs-lookup"><span data-stu-id="46d8a-246">If the variable doesn't exist, the example creates its and retrieves its value.</span></span> <span data-ttu-id="46d8a-247">此示例显示变量的值。</span><span class="sxs-lookup"><span data-stu-id="46d8a-247">The example displays the value of the variable.</span></span> <span data-ttu-id="46d8a-248">如果该示例创建变量，它还会调用<xref:System.Environment.GetEnvironmentVariables%28System.EnvironmentVariableTarget%29>方法的每个成员<xref:System.EnvironmentVariableTarget>枚举，以建立只能从当前进程环境块中，可以检索该变量。</span><span class="sxs-lookup"><span data-stu-id="46d8a-248">If the example created the variable, it also calls the <xref:System.Environment.GetEnvironmentVariables%28System.EnvironmentVariableTarget%29> method with each member of the <xref:System.EnvironmentVariableTarget> enumeration to establish that the variable can be retrieved only from the current process environment block.</span></span> <span data-ttu-id="46d8a-249">最后，如果该示例创建变量，将其删除。</span><span class="sxs-lookup"><span data-stu-id="46d8a-249">Finally, if the example created the variable, it deletes it.</span></span>  
  
 [!code-csharp[System.Environment.GetEnvironmentVariable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.environment.getenvironmentvariable/cs/getenvironmentvariableex1.cs#2)]
 [!code-vb[System.Environment.GetEnvironmentVariable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.environment.getenvironmentvariable/vb/getenvironmentvariableex1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="46d8a-250"><paramref name="variable" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="46d8a-250"><paramref name="variable" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="46d8a-251">调用方没有执行此操作所需的权限。</span><span class="sxs-lookup"><span data-stu-id="46d8a-251">The caller does not have the required permission to perform this operation.</span></span></exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission"><span data-ttu-id="46d8a-252">它能够读取的值<paramref name="variable" />。</span><span class="sxs-lookup"><span data-stu-id="46d8a-252">for the ability to read the value of <paramref name="variable" />.</span></span> <span data-ttu-id="46d8a-253">关联的枚举： <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="46d8a-253">Associated enumeration: <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /></span></span></permission>
        <altmember cref="M:System.Environment.GetEnvironmentVariables" />
        <altmember cref="M:System.Environment.SetEnvironmentVariable(System.String,System.String)" />
        <altmember cref="T:System.EnvironmentVariableTarget" />
      </Docs>
    </Member>
    <Member MemberName="GetEnvironmentVariable">
      <MemberSignature Language="C#" Value="public static string GetEnvironmentVariable (string variable, EnvironmentVariableTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetEnvironmentVariable(string variable, valuetype System.EnvironmentVariableTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEnvironmentVariable (variable As String, target As EnvironmentVariableTarget) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetEnvironmentVariable(System::String ^ variable, EnvironmentVariableTarget target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="System.String" />
        <Parameter Name="target" Type="System.EnvironmentVariableTarget" />
      </Parameters>
      <Docs>
        <param name="variable"><span data-ttu-id="46d8a-254">环境变量名。</span><span class="sxs-lookup"><span data-stu-id="46d8a-254">The name of an environment variable.</span></span></param>
        <param name="target"><span data-ttu-id="46d8a-255"><see cref="T:System.EnvironmentVariableTarget" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="46d8a-255">One of the <see cref="T:System.EnvironmentVariableTarget" /> values.</span></span></param>
        <summary><span data-ttu-id="46d8a-256">从当前进程或者从当前用户或本地计算机的 Windows 操作系统注册表项检索环境变量的值。</span><span class="sxs-lookup"><span data-stu-id="46d8a-256">Retrieves the value of an environment variable from the current process or from the Windows operating system registry key for the current user or local machine.</span></span></summary>
        <returns><span data-ttu-id="46d8a-257"><paramref name="variable" /> 和 <paramref name="target" /> 参数指定的环境变量的值；或者如果找不到环境变量，则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="46d8a-257">The value of the environment variable specified by the <paramref name="variable" /> and <paramref name="target" /> parameters, or <see langword="null" /> if the environment variable is not found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46d8a-258">`target`参数指定是否从当前进程或者从当前用户或本地计算机的 Windows 操作系统注册表项检索环境变量。</span><span class="sxs-lookup"><span data-stu-id="46d8a-258">The `target` parameter specifies whether the environment variable is retrieved from the current process or from the Windows operating system registry key for the current user or local machine.</span></span> <span data-ttu-id="46d8a-259">每用户扩展和每台计算机的所有环境变量会自动都复制到当前进程的环境块。</span><span class="sxs-lookup"><span data-stu-id="46d8a-259">All per-user and per-machine environment variables are automatically copied into the environment block of the current process.</span></span> <span data-ttu-id="46d8a-260">但是，环境变量添加到当前进程的环境块仅保持不变仅过程的持续时间。</span><span class="sxs-lookup"><span data-stu-id="46d8a-260">However, environment variables added only to the environment block of the current process  persist only for the duration of the process.</span></span>  
  
 <span data-ttu-id="46d8a-261">若要检索所有环境变量，以及它们的值，调用<xref:System.Environment.GetEnvironmentVariables%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="46d8a-261">To retrieve all environment variables along with their values, call the <xref:System.Environment.GetEnvironmentVariables%2A> method.</span></span>  
  
 <span data-ttu-id="46d8a-262">环境变量名不区分大小写。</span><span class="sxs-lookup"><span data-stu-id="46d8a-262">Environment variable names are not case-sensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46d8a-263">下面的示例创建的过程、 用户和计算机的目标的环境变量，检查是否操作系统注册表包含用户和计算机环境变量，则会删除的环境变量。</span><span class="sxs-lookup"><span data-stu-id="46d8a-263">The following example creates environment variables for the Process, User, and Machine targets, checks whether the operating system registry contains the User and Machine environment variables, then deletes the environment variables.</span></span>  
  
 [!code-cpp[environment.getsetenvar#1](~/samples/snippets/cpp/VS_Snippets_CLR/environment.getsetenvar/CPP/source.cpp#1)]
 [!code-csharp[environment.getsetenvar#1](~/samples/snippets/csharp/VS_Snippets_CLR/environment.getsetenvar/CS/gsev.cs#1)]
 [!code-vb[environment.getsetenvar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/environment.getsetenvar/VB/gsev.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="46d8a-264"><paramref name="variable" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="46d8a-264"><paramref name="variable" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="46d8a-265"><paramref name="target" /> 不是有效的 <see cref="T:System.EnvironmentVariableTarget" /> 值。</span><span class="sxs-lookup"><span data-stu-id="46d8a-265"><paramref name="target" /> is not a valid <see cref="T:System.EnvironmentVariableTarget" /> value.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="46d8a-266">调用方没有执行此操作所需的权限。</span><span class="sxs-lookup"><span data-stu-id="46d8a-266">The caller does not have the required permission to perform this operation.</span></span></exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission"><span data-ttu-id="46d8a-267">它能够读取的值<paramref name="variable" />如果<paramref name="target" />是<see cref="F:System.EnvironmentVariableTarget.Process" />(关联的枚举： <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" />)，</span><span class="sxs-lookup"><span data-stu-id="46d8a-267">for the ability to read the value of <paramref name="variable" /> if <paramref name="target" /> is <see cref="F:System.EnvironmentVariableTarget.Process" /> (Associated enumeration: <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" />),</span></span>  
  
 <span data-ttu-id="46d8a-268">或</span><span class="sxs-lookup"><span data-stu-id="46d8a-268">or</span></span>  
  
 <span data-ttu-id="46d8a-269">对环境变量的完全访问权限如果<paramref name="target" />是<see cref="F:System.EnvironmentVariableTarget.User" />或<see cref="F:System.EnvironmentVariableTarget.Machine" />(关联的枚举： <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />)。</span><span class="sxs-lookup"><span data-stu-id="46d8a-269">for full access to environment variables if <paramref name="target" /> is <see cref="F:System.EnvironmentVariableTarget.User" /> or <see cref="F:System.EnvironmentVariableTarget.Machine" /> (Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />).</span></span></permission>
        <altmember cref="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)" />
        <altmember cref="M:System.Environment.GetEnvironmentVariables" />
        <altmember cref="T:System.EnvironmentVariableTarget" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEnvironmentVariables">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="46d8a-270">检索所有环境变量名及其值。</span><span class="sxs-lookup"><span data-stu-id="46d8a-270">Retrieves all environment variable names and their values.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEnvironmentVariables">
      <MemberSignature Language="C#" Value="public static System.Collections.IDictionary GetEnvironmentVariables ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IDictionary GetEnvironmentVariables() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Environment.GetEnvironmentVariables" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEnvironmentVariables () As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IDictionary ^ GetEnvironmentVariables();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="46d8a-271">从当前进程检索所有环境变量名及其值。</span><span class="sxs-lookup"><span data-stu-id="46d8a-271">Retrieves all environment variable names and their values from the current process.</span></span></summary>
        <returns><span data-ttu-id="46d8a-272">包含所有环境变量名及其值的字典；如果找不到任何环境变量，则返回空字典。</span><span class="sxs-lookup"><span data-stu-id="46d8a-272">A dictionary that contains all environment variable names and their values; otherwise, an empty dictionary if no environment variables are found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46d8a-273">名称和环境变量的值存储为在返回的键 / 值对<xref:System.Collections.IDictionary>。</span><span class="sxs-lookup"><span data-stu-id="46d8a-273">The names and values for the environment variables are stored as key-value pairs in the returned <xref:System.Collections.IDictionary>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46d8a-274">下面的示例演示<xref:System.Environment.GetEnvironmentVariables%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="46d8a-274">The following example demonstrates the <xref:System.Environment.GetEnvironmentVariables%2A> method.</span></span>  
  
 [!code-cpp[Environment.GetEnvironmentVariables#1](~/samples/snippets/cpp/VS_Snippets_CLR/Environment.GetEnvironmentVariables/CPP/getenvironmentvariables.cpp#1)]
 [!code-csharp[Environment.GetEnvironmentVariables#1](~/samples/snippets/csharp/VS_Snippets_CLR/Environment.GetEnvironmentVariables/CS/getenvironmentvariables.cs#1)]
 [!code-vb[Environment.GetEnvironmentVariables#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Environment.GetEnvironmentVariables/VB/getenvironmentvariables.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="46d8a-275">调用方没有执行此操作所需的权限。</span><span class="sxs-lookup"><span data-stu-id="46d8a-275">The caller does not have the required permission to perform this operation.</span></span></exception>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="46d8a-276">缓冲区内存不足。</span><span class="sxs-lookup"><span data-stu-id="46d8a-276">The buffer is out of memory.</span></span></exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission"><span data-ttu-id="46d8a-277">它能够读取的名称和环境变量的值。</span><span class="sxs-lookup"><span data-stu-id="46d8a-277">for the ability to read the names and values of environment variables.</span></span> <span data-ttu-id="46d8a-278">关联的枚举： <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="46d8a-278">Associated enumeration: <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /></span></span></permission>
        <altmember cref="M:System.Environment.GetEnvironmentVariable(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetEnvironmentVariables">
      <MemberSignature Language="C#" Value="public static System.Collections.IDictionary GetEnvironmentVariables (EnvironmentVariableTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IDictionary GetEnvironmentVariables(valuetype System.EnvironmentVariableTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Environment.GetEnvironmentVariables(System.EnvironmentVariableTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEnvironmentVariables (target As EnvironmentVariableTarget) As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IDictionary ^ GetEnvironmentVariables(EnvironmentVariableTarget target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.EnvironmentVariableTarget" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="46d8a-279"><see cref="T:System.EnvironmentVariableTarget" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="46d8a-279">One of the <see cref="T:System.EnvironmentVariableTarget" /> values.</span></span></param>
        <summary><span data-ttu-id="46d8a-280">从当前进程或者从当前用户或本地计算机的 Windows 操作系统注册表项检索所有环境变量名及其值。</span><span class="sxs-lookup"><span data-stu-id="46d8a-280">Retrieves all environment variable names and their values from the current process, or from the Windows operating system registry key for the current user or local machine.</span></span></summary>
        <returns><span data-ttu-id="46d8a-281">包含 <paramref name="target" /> 参数所指定的源中所有环境变量名及其值的字典；否则，如果找不到任何环境变量，则返回空字典。</span><span class="sxs-lookup"><span data-stu-id="46d8a-281">A dictionary that contains all environment variable names and their values from the source specified by the <paramref name="target" /> parameter; otherwise, an empty dictionary if no environment variables are found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46d8a-282">`target`参数指定的源是当前进程、 当前用户，注册表项或本地计算机的注册表项。</span><span class="sxs-lookup"><span data-stu-id="46d8a-282">The `target` parameter specifies whether the source is the current process, the registry key for the current user, or the registry key for the local machine.</span></span>  
  
 <span data-ttu-id="46d8a-283">名称和环境变量的值存储在返回的键/值对为<xref:System.Collections.IDictionary>对象。</span><span class="sxs-lookup"><span data-stu-id="46d8a-283">The names and values of the environment variables are stored as key/value pairs in the returned <xref:System.Collections.IDictionary> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46d8a-284">下面的示例创建的过程、 用户和计算机的目标的环境变量，检查是否操作系统注册表包含用户和计算机环境变量，则会删除的环境变量。</span><span class="sxs-lookup"><span data-stu-id="46d8a-284">The following example creates environment variables for the Process, User, and Machine targets, checks whether the operating system registry contains the User and Machine environment variables, then deletes the environment variables.</span></span>  
  
 [!code-cpp[environment.getsetenvar#1](~/samples/snippets/cpp/VS_Snippets_CLR/environment.getsetenvar/CPP/source.cpp#1)]
 [!code-csharp[environment.getsetenvar#1](~/samples/snippets/csharp/VS_Snippets_CLR/environment.getsetenvar/CS/gsev.cs#1)]
 [!code-vb[environment.getsetenvar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/environment.getsetenvar/VB/gsev.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="46d8a-285">调用方没有为 <paramref name="target" /> 的指定值执行此操作所需具备的权限。</span><span class="sxs-lookup"><span data-stu-id="46d8a-285">The caller does not have the required permission to perform this operation for the specified value of <paramref name="target" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="46d8a-286"><paramref name="target" /> 包含非法值。</span><span class="sxs-lookup"><span data-stu-id="46d8a-286"><paramref name="target" /> contains an illegal value.</span></span></exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission"><span data-ttu-id="46d8a-287">它能够读取的名称和环境变量的值，如果<paramref name="target" />是<see cref="F:System.EnvironmentVariableTarget.Process" />(关联的枚举： <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" />)，</span><span class="sxs-lookup"><span data-stu-id="46d8a-287">for the ability to read the names and values of environment variables if <paramref name="target" /> is <see cref="F:System.EnvironmentVariableTarget.Process" /> (Associated enumeration: <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" />),</span></span>  
  
 <span data-ttu-id="46d8a-288">或</span><span class="sxs-lookup"><span data-stu-id="46d8a-288">or</span></span>  
  
 <span data-ttu-id="46d8a-289">对环境变量的完全访问权限如果<paramref name="target" />是<see cref="F:System.EnvironmentVariableTarget.User" />或<see cref="F:System.EnvironmentVariableTarget.Machine" />(关联的枚举： <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />)。</span><span class="sxs-lookup"><span data-stu-id="46d8a-289">for full access to environment variables if <paramref name="target" /> is <see cref="F:System.EnvironmentVariableTarget.User" /> or <see cref="F:System.EnvironmentVariableTarget.Machine" /> (Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />).</span></span></permission>
        <altmember cref="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)" />
        <altmember cref="T:System.EnvironmentVariableTarget" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFolderPath">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="46d8a-290">获取由指定枚举标识的系统特殊文件夹的路径。</span><span class="sxs-lookup"><span data-stu-id="46d8a-290">Gets the path to the system special folder that is identified by the specified enumeration.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFolderPath">
      <MemberSignature Language="C#" Value="public static string GetFolderPath (Environment.SpecialFolder folder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFolderPath(valuetype System.Environment/SpecialFolder folder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFolderPath (folder As Environment.SpecialFolder) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetFolderPath(Environment::SpecialFolder folder);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="folder" Type="System.Environment+SpecialFolder" />
      </Parameters>
      <Docs>
        <param name="folder"><span data-ttu-id="46d8a-291">标识系统特殊文件夹的枚举常数。</span><span class="sxs-lookup"><span data-stu-id="46d8a-291">An enumerated constant that identifies a system special folder.</span></span></param>
        <summary><span data-ttu-id="46d8a-292">获取由指定枚举标识的系统特殊文件夹的路径。</span><span class="sxs-lookup"><span data-stu-id="46d8a-292">Gets the path to the system special folder that is identified by the specified enumeration.</span></span></summary>
        <returns><span data-ttu-id="46d8a-293">如果指定的系统特殊文件夹实际存在于您的计算机上，则为到该文件夹的路径；否则为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="46d8a-293">The path to the specified system special folder, if that folder physically exists on your computer; otherwise, an empty string ("").</span></span>  
  
 <span data-ttu-id="46d8a-294">如果系统未创建文件夹、已删除现有文件夹，或者文件夹是不对应物理路径的虚拟目录（例如"我的电脑"），则该文件夹不会实际存在。</span><span class="sxs-lookup"><span data-stu-id="46d8a-294">A folder will not physically exist if the operating system did not create it, the existing folder was deleted, or the folder is a virtual directory, such as My Computer, which does not correspond to a physical path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46d8a-295">此方法检索系统特殊文件夹，例如 Program Files、 程序、 系统或启动时，可用来访问公共信息的路径。</span><span class="sxs-lookup"><span data-stu-id="46d8a-295">This method retrieves the path to a system special folder, such as Program Files, Programs, System, or Startup, which can be used to access common information.</span></span> <span data-ttu-id="46d8a-296">特殊文件夹时设置的默认系统，或显式由用户安装的 Windows 版本。</span><span class="sxs-lookup"><span data-stu-id="46d8a-296">Special folders are set by default by the system, or explicitly by the user, when installing a version of Windows.</span></span>  
  
 <span data-ttu-id="46d8a-297">`folder`参数指定要检索的特殊文件夹，并且必须位于中的值之一<xref:System.Environment.SpecialFolder>枚举; 任何其他值将引发异常。</span><span class="sxs-lookup"><span data-stu-id="46d8a-297">The `folder` parameter designates the special folder to retrieve and must be one of the values in the <xref:System.Environment.SpecialFolder> enumeration; any other value throws an exception.</span></span>  
  
 <span data-ttu-id="46d8a-298">有关特殊文件夹的详细信息，请参阅[CSIDL](http://go.microsoft.com/fwlink/?LinkId=116664)值主题。</span><span class="sxs-lookup"><span data-stu-id="46d8a-298">For more information about special folders, see the [CSIDL](http://go.microsoft.com/fwlink/?LinkId=116664) values topic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46d8a-299">下面的示例演示如何使用<xref:System.Environment.GetFolderPath%2A>方法以返回并显示与关联的路径`folder`参数。</span><span class="sxs-lookup"><span data-stu-id="46d8a-299">The following example demonstrates how to use the <xref:System.Environment.GetFolderPath%2A> method to return and display the path associated with the `folder` parameter.</span></span>  
  
 [!code-cpp[Environment.GetFolderPath#1](~/samples/snippets/cpp/VS_Snippets_CLR/Environment.GetFolderPath/CPP/getfolderpath.cpp#1)]
 [!code-csharp[Environment.GetFolderPath#1](~/samples/snippets/csharp/VS_Snippets_CLR/Environment.GetFolderPath/CS/getfolderpath.cs#1)]
 [!code-vb[Environment.GetFolderPath#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Environment.GetFolderPath/VB/getfolderpath.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="46d8a-300"><paramref name="folder" /> 不是 <see cref="T:System.Environment.SpecialFolder" /> 的成员。</span><span class="sxs-lookup"><span data-stu-id="46d8a-300"><paramref name="folder" /> is not a member of <see cref="T:System.Environment.SpecialFolder" />.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="46d8a-301">不支持当前平台。</span><span class="sxs-lookup"><span data-stu-id="46d8a-301">The current platform is not supported.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="46d8a-302">用于访问路径本身中的信息。</span><span class="sxs-lookup"><span data-stu-id="46d8a-302">for access to the information in the path itself.</span></span> <span data-ttu-id="46d8a-303">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span><span class="sxs-lookup"><span data-stu-id="46d8a-303">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetFolderPath">
      <MemberSignature Language="C#" Value="public static string GetFolderPath (Environment.SpecialFolder folder, Environment.SpecialFolderOption option);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFolderPath(valuetype System.Environment/SpecialFolder folder, valuetype System.Environment/SpecialFolderOption option) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Environment.GetFolderPath(System.Environment.SpecialFolder,System.Environment.SpecialFolderOption)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFolderPath (folder As Environment.SpecialFolder, option As Environment.SpecialFolderOption) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetFolderPath(Environment::SpecialFolder folder, Environment::SpecialFolderOption option);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="folder" Type="System.Environment+SpecialFolder" />
        <Parameter Name="option" Type="System.Environment+SpecialFolderOption" />
      </Parameters>
      <Docs>
        <param name="folder"><span data-ttu-id="46d8a-304">标识系统特殊文件夹的枚举常数。</span><span class="sxs-lookup"><span data-stu-id="46d8a-304">An enumerated constant that identifies a system special folder.</span></span></param>
        <param name="option"><span data-ttu-id="46d8a-305">指定用于访问特殊文件夹的选项。</span><span class="sxs-lookup"><span data-stu-id="46d8a-305">Specifies options to use for accessing a special folder.</span></span></param>
        <summary><span data-ttu-id="46d8a-306">获取由指定枚举标识的系统特殊文件夹的路径，并使用用于访问特殊文件夹的指定选项。</span><span class="sxs-lookup"><span data-stu-id="46d8a-306">Gets the path to the system special folder that is identified by the specified enumeration, and uses a specified option for accessing special folders.</span></span></summary>
        <returns><span data-ttu-id="46d8a-307">如果指定的系统特殊文件夹实际存在于您的计算机上，则为到该文件夹的路径；否则为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="46d8a-307">The path to the specified system special folder, if that folder physically exists on your computer; otherwise, an empty string ("").</span></span>  
  
 <span data-ttu-id="46d8a-308">如果系统未创建文件夹、已删除现有文件夹，或者文件夹是不对应物理路径的虚拟目录（例如"我的电脑"），则该文件夹不会实际存在。</span><span class="sxs-lookup"><span data-stu-id="46d8a-308">A folder will not physically exist if the operating system did not create it, the existing folder was deleted, or the folder is a virtual directory, such as My Computer, which does not correspond to a physical path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46d8a-309">此方法检索系统特殊文件夹，例如 Program Files、 程序、 系统或启动时，可用来访问公共信息的路径。</span><span class="sxs-lookup"><span data-stu-id="46d8a-309">This method retrieves the path to a system special folder, such as Program Files, Programs, System, or Startup, which can be used to access common information.</span></span> <span data-ttu-id="46d8a-310">特殊文件夹时设置的默认系统，或显式由用户安装的 Windows 版本。</span><span class="sxs-lookup"><span data-stu-id="46d8a-310">Special folders are set by default by the system, or explicitly by the user, when installing a version of Windows.</span></span>  
  
 <span data-ttu-id="46d8a-311">`folder`参数指定要检索的特殊文件夹，并且必须位于中的值之一<xref:System.Environment.SpecialFolder>枚举; 任何其他值将引发异常。</span><span class="sxs-lookup"><span data-stu-id="46d8a-311">The `folder` parameter designates the special folder to retrieve and must be one of the values in the <xref:System.Environment.SpecialFolder> enumeration; any other value throws an exception.</span></span>  
  
 <span data-ttu-id="46d8a-312">有关特殊文件夹的详细信息，请参阅[CSIDL](http://go.microsoft.com/fwlink/?LinkId=116664)值主题。</span><span class="sxs-lookup"><span data-stu-id="46d8a-312">For more information about special folders, see the [CSIDL](http://go.microsoft.com/fwlink/?LinkId=116664) values topic.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="46d8a-313"><paramref name="folder" /> 不是 <see cref="T:System.Environment.SpecialFolder" /> 的成员。</span><span class="sxs-lookup"><span data-stu-id="46d8a-313"><paramref name="folder" /> is not a member of <see cref="T:System.Environment.SpecialFolder" /></span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <see cref="T:System.PlatformNotSupportedException" />
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="46d8a-314">用于访问路径本身中的信息。</span><span class="sxs-lookup"><span data-stu-id="46d8a-314">for access to the information in the path itself.</span></span> <span data-ttu-id="46d8a-315">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span><span class="sxs-lookup"><span data-stu-id="46d8a-315">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="GetLogicalDrives">
      <MemberSignature Language="C#" Value="public static string[] GetLogicalDrives ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetLogicalDrives() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Environment.GetLogicalDrives" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLogicalDrives () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::String ^&gt; ^ GetLogicalDrives();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="46d8a-316">返回包含当前计算机中的逻辑驱动器名称的字符串数组。</span><span class="sxs-lookup"><span data-stu-id="46d8a-316">Returns an array of string containing the names of the logical drives on the current computer.</span></span></summary>
        <returns><span data-ttu-id="46d8a-317">字符串数组，其中的每个元素都包含逻辑驱动器名称。</span><span class="sxs-lookup"><span data-stu-id="46d8a-317">An array of strings where each element contains the name of a logical drive.</span></span> <span data-ttu-id="46d8a-318">例如，如果计算机的硬盘是第一个逻辑驱动器，则返回的第一个元素是“C:\\”。</span><span class="sxs-lookup"><span data-stu-id="46d8a-318">For example, if the computer's hard drive is the first logical drive, the first element returned is "C:\\".</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="46d8a-319">下面的示例演示如何显示当前的计算机使用的逻辑驱动器<xref:System.Environment.GetLogicalDrives%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="46d8a-319">The following example shows how to display the logical drives of the current computer using the <xref:System.Environment.GetLogicalDrives%2A> method.</span></span>  
  
 [!code-cpp[Environment.GetLogicalDrives#1](~/samples/snippets/cpp/VS_Snippets_CLR/Environment.GetLogicalDrives/CPP/getlogicaldrives.cpp#1)]
 [!code-csharp[Environment.GetLogicalDrives#1](~/samples/snippets/csharp/VS_Snippets_CLR/Environment.GetLogicalDrives/CS/getlogicaldrives.cs#1)]
 [!code-vb[Environment.GetLogicalDrives#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Environment.GetLogicalDrives/VB/getlogicaldrives.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="46d8a-320">出现 I/O 错误。</span><span class="sxs-lookup"><span data-stu-id="46d8a-320">An I/O error occurs.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="46d8a-321">调用方没有所需的权限。</span><span class="sxs-lookup"><span data-stu-id="46d8a-321">The caller does not have the required permissions.</span></span></exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission"><span data-ttu-id="46d8a-322">用于对受此权限的资源的完全访问。</span><span class="sxs-lookup"><span data-stu-id="46d8a-322">for full access to the resource protected by this permission.</span></span> <span data-ttu-id="46d8a-323">关联的枚举： <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="46d8a-323">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="HasShutdownStarted">
      <MemberSignature Language="C#" Value="public static bool HasShutdownStarted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool HasShutdownStarted" />
      <MemberSignature Language="DocId" Value="P:System.Environment.HasShutdownStarted" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property HasShutdownStarted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool HasShutdownStarted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="46d8a-324">获取一个值，该值指示当前的应用程序域是否正在卸载或者公共语言运行时 (CLR) 是否正在关闭。</span><span class="sxs-lookup"><span data-stu-id="46d8a-324">Gets a value that indicates whether the current application domain is being unloaded or the common language runtime (CLR) is shutting down.</span></span></summary>
        <value>
          <span data-ttu-id="46d8a-325">如果当前的应用程序域正在卸载或者 CLR 正在关闭，为 <see langword="true" />；否则，为 <see langword="false." /></span><span class="sxs-lookup"><span data-stu-id="46d8a-325"><see langword="true" /> if the current application domain is being unloaded or the CLR is shutting down; otherwise, <see langword="false." /></span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46d8a-326">当 CLR 卸载应用程序域时，它将在该应用程序域中具有终结器方法的所有对象运行终结器。</span><span class="sxs-lookup"><span data-stu-id="46d8a-326">When the CLR unloads an application domain, it runs the finalizers on all objects that have a finalizer method in that application domain.</span></span> <span data-ttu-id="46d8a-327">CLR 关闭时，它将启动终结器线程上的一个终结器方法的所有对象。</span><span class="sxs-lookup"><span data-stu-id="46d8a-327">When the CLR shuts down, it starts the finalizer thread on all objects that have a finalizer method.</span></span> <span data-ttu-id="46d8a-328"><xref:System.Environment.HasShutdownStarted%2A>属性返回`true`仅终结器线程已启动。</span><span class="sxs-lookup"><span data-stu-id="46d8a-328">The <xref:System.Environment.HasShutdownStarted%2A> property returns `true` only after the finalizer thread has been started.</span></span> <span data-ttu-id="46d8a-329">当该属性返回`true`，你可以确定是否应用程序域是否正在卸载或者 CLR 自行正在通过调用关闭<xref:System.AppDomain.IsFinalizingForUnload%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="46d8a-329">When the property returns `true`, you can determine whether an application domain is being unloaded or the CLR itself is shutting down by calling the <xref:System.AppDomain.IsFinalizingForUnload%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="46d8a-330">此方法返回`true`如果称为终结器，因为应用程序域正在卸载或`false`如果 CLR 正在关闭。</span><span class="sxs-lookup"><span data-stu-id="46d8a-330">This method returns `true` if finalizers are called because the application domain is unloading or `false` if the CLR is shutting down.</span></span>  
  
 <span data-ttu-id="46d8a-331"><xref:System.Environment.HasShutdownStarted%2A>属性返回`false`如果尚未启动终结器线程。</span><span class="sxs-lookup"><span data-stu-id="46d8a-331">The <xref:System.Environment.HasShutdownStarted%2A> property returns `false` if the finalizer thread has not been started.</span></span>  
  
 <span data-ttu-id="46d8a-332">通过使用此属性，可以确定是否在终止代码中的静态变量的访问。</span><span class="sxs-lookup"><span data-stu-id="46d8a-332">By using this property, you can determine whether to access static variables in your finalization code.</span></span> <span data-ttu-id="46d8a-333">如果应用程序域或者 CLR 正在关闭，不能可靠地访问具有完成方法并由静态字段引用的任何对象。</span><span class="sxs-lookup"><span data-stu-id="46d8a-333">If either an application domain or the CLR is shutting down, you cannot reliably access any object that has a finalization method and that is referenced by a static field.</span></span> <span data-ttu-id="46d8a-334">这是因为这些对象可能已终止。</span><span class="sxs-lookup"><span data-stu-id="46d8a-334">This is because these objects may have already been finalized.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.AppDomain.IsFinalizingForUnload" />
      </Docs>
    </Member>
    <Member MemberName="Is64BitOperatingSystem">
      <MemberSignature Language="C#" Value="public static bool Is64BitOperatingSystem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool Is64BitOperatingSystem" />
      <MemberSignature Language="DocId" Value="P:System.Environment.Is64BitOperatingSystem" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Is64BitOperatingSystem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool Is64BitOperatingSystem { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="46d8a-335">确定当前操作系统是否为 64 位操作系统。</span><span class="sxs-lookup"><span data-stu-id="46d8a-335">Determines whether the current operating system is a 64-bit operating system.</span></span></summary>
        <value>
          <span data-ttu-id="46d8a-336">如果操作系统为 64 位操作系统，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="46d8a-336"><see langword="true" /> if the operating system is 64-bit; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Is64BitProcess">
      <MemberSignature Language="C#" Value="public static bool Is64BitProcess { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool Is64BitProcess" />
      <MemberSignature Language="DocId" Value="P:System.Environment.Is64BitProcess" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Is64BitProcess As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool Is64BitProcess { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="46d8a-337">确定当前进程是否为 64 位进程。</span><span class="sxs-lookup"><span data-stu-id="46d8a-337">Determines whether the current process is a 64-bit process.</span></span></summary>
        <value>
          <span data-ttu-id="46d8a-338">如果进程为 64 位进程，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="46d8a-338"><see langword="true" /> if the process is 64-bit; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public static string MachineName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Environment.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ MachineName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="46d8a-339">获取此本地计算机的 NetBIOS 名称。</span><span class="sxs-lookup"><span data-stu-id="46d8a-339">Gets the NetBIOS name of this local computer.</span></span></summary>
        <value><span data-ttu-id="46d8a-340">包含此计算机的名称的字符串。</span><span class="sxs-lookup"><span data-stu-id="46d8a-340">A string containing the name of this computer.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46d8a-341">从注册表中读取名称时，将在系统启动时建立此计算机的名称。</span><span class="sxs-lookup"><span data-stu-id="46d8a-341">The name of this computer is established at system startup when the name is read from the registry.</span></span> <span data-ttu-id="46d8a-342">如果此计算机是群集中的节点，则返回节点的名称。</span><span class="sxs-lookup"><span data-stu-id="46d8a-342">If this computer is a node in a cluster, the name of the node is returned.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46d8a-343">下面的示例显示运行的代码示例的计算机的名称。</span><span class="sxs-lookup"><span data-stu-id="46d8a-343">The following example displays the name of the computer that runs the code example.</span></span> <span data-ttu-id="46d8a-344">（计算机名称中省略出于安全原因，示例输出。）</span><span class="sxs-lookup"><span data-stu-id="46d8a-344">(The machine name is omitted from the example output for security reasons.)</span></span>  
  
 [!code-cpp[environment.machinename#1](~/samples/snippets/cpp/VS_Snippets_CLR/Environment.MachineName/CPP/machinename.cpp#1)]
 [!code-csharp[environment.machinename#1](~/samples/snippets/csharp/VS_Snippets_CLR/Environment.MachineName/CS/machinename.cs#1)]
 [!code-vb[environment.machinename#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Environment.MachineName/VB/machinename.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="46d8a-345">无法获取此计算机的名称。</span><span class="sxs-lookup"><span data-stu-id="46d8a-345">The name of this computer cannot be obtained.</span></span></exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission"><span data-ttu-id="46d8a-346">用于到 COMPUTERNAME 环境变量的读访问。</span><span class="sxs-lookup"><span data-stu-id="46d8a-346">for read access to the COMPUTERNAME environment variable.</span></span> <span data-ttu-id="46d8a-347">关联的枚举： <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="46d8a-347">Associated enumeration: <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="NewLine">
      <MemberSignature Language="C#" Value="public static string NewLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string NewLine" />
      <MemberSignature Language="DocId" Value="P:System.Environment.NewLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property NewLine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ NewLine { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="46d8a-348">获取为此环境定义的换行字符串。</span><span class="sxs-lookup"><span data-stu-id="46d8a-348">Gets the newline string defined for this environment.</span></span></summary>
        <value><span data-ttu-id="46d8a-349">对于非 Unix 平台为包含“\r\n”的字符串，对于 Unix 平台则为包含“\n”的字符串。</span><span class="sxs-lookup"><span data-stu-id="46d8a-349">A string containing "\r\n" for non-Unix platforms, or a string containing "\n" for Unix platforms.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46d8a-350">属性值<xref:System.Environment.NewLine%2A>是专门为的当前平台和.NET Framework 实现自定义的常量。</span><span class="sxs-lookup"><span data-stu-id="46d8a-350">The property value of <xref:System.Environment.NewLine%2A> is a constant customized specifically for the current platform and implementation of the .NET Framework.</span></span> <span data-ttu-id="46d8a-351">有关中的属性值的转义字符的详细信息，请参阅[字符转义](~/docs/standard/base-types/character-escapes-in-regular-expressions.md)。</span><span class="sxs-lookup"><span data-stu-id="46d8a-351">For more information about the escape characters in the property value, see [Character Escapes](~/docs/standard/base-types/character-escapes-in-regular-expressions.md).</span></span>  
  
 <span data-ttu-id="46d8a-352">提供的功能<xref:System.Environment.NewLine%2A>通常是条款换行、 换行符、 换行符、 回车、 CRLF、 和行尾的含义。</span><span class="sxs-lookup"><span data-stu-id="46d8a-352">The functionality provided by <xref:System.Environment.NewLine%2A> is often what is meant by the terms newline, line feed, line break, carriage return, CRLF, and end of line.</span></span>  
  
 <span data-ttu-id="46d8a-353"><xref:System.Environment.NewLine%2A> 可以与特定于语言的换行符支持，例如的转义字符 '\r' 和 Microsoft C# 和 C/c + + 中的 \n 结合使用或`vbCrLf`在 Microsoft Visual Basic。</span><span class="sxs-lookup"><span data-stu-id="46d8a-353"><xref:System.Environment.NewLine%2A> can be used in conjunction with language-specific newline support such as the escape characters '\r' and '\n' in Microsoft C# and C/C++, or `vbCrLf` in Microsoft Visual Basic.</span></span>  
  
 <span data-ttu-id="46d8a-354"><xref:System.Environment.NewLine%2A> 自动追加到文本处理<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>和<xref:System.Text.StringBuilder.AppendLine%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="46d8a-354"><xref:System.Environment.NewLine%2A> is automatically appended to text processed by the <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> and <xref:System.Text.StringBuilder.AppendLine%2A?displayProperty=nameWithType> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46d8a-355">下面的示例显示三行由换行符分隔。</span><span class="sxs-lookup"><span data-stu-id="46d8a-355">The following example displays three lines separated by newlines.</span></span>  
  
 [!code-cpp[environment.newline#1](~/samples/snippets/cpp/VS_Snippets_CLR/Environment.NewLine/CPP/newline.cpp#1)]
 [!code-csharp[environment.newline#1](~/samples/snippets/csharp/VS_Snippets_CLR/Environment.NewLine/CS/newline.cs#1)]
 [!code-vb[environment.newline#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Environment.NewLine/VB/newline.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OSVersion">
      <MemberSignature Language="C#" Value="public static OperatingSystem OSVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.OperatingSystem OSVersion" />
      <MemberSignature Language="DocId" Value="P:System.Environment.OSVersion" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property OSVersion As OperatingSystem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property OperatingSystem ^ OSVersion { OperatingSystem ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.OperatingSystem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="46d8a-356">获取包含当前平台标识符和版本号的 <see cref="T:System.OperatingSystem" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="46d8a-356">Gets an <see cref="T:System.OperatingSystem" /> object that contains the current platform identifier and version number.</span></span></summary>
        <value><span data-ttu-id="46d8a-357">一个包含平台标识符和版本号的对象。</span><span class="sxs-lookup"><span data-stu-id="46d8a-357">An object that contains the platform identifier and version number.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="46d8a-358">从 Windows 8<xref:System.Environment.OSVersion%2A>属性返回的相同主版本号和次版本号所有 Windows 平台。</span><span class="sxs-lookup"><span data-stu-id="46d8a-358">Starting with Windows 8, the  <xref:System.Environment.OSVersion%2A> property returns the same major and minor version numbers for all Windows platforms.</span></span> <span data-ttu-id="46d8a-359">因此，我们不建议你检索此属性来确定操作系统版本的值。</span><span class="sxs-lookup"><span data-stu-id="46d8a-359">Therefore, we do not recommend that you retrieve the value of this property to determine the operating system version.</span></span>  
  
 <span data-ttu-id="46d8a-360">通常情况下，<xref:System.Environment.OSVersion%2A>属性用于确保在其中引入特定功能的操作系统的一些基础版本上运行应用。</span><span class="sxs-lookup"><span data-stu-id="46d8a-360">Typically, the <xref:System.Environment.OSVersion%2A> property is used to ensure that an app is running on some base version of an operating system in which a particular feature was introduced.</span></span> <span data-ttu-id="46d8a-361">在这种情况下，应进行测试，以返回当前的操作系统版本是否执行版本检查<xref:System.Environment.OSVersion%2A>属性是相同，或大于基本操作系统版本。</span><span class="sxs-lookup"><span data-stu-id="46d8a-361">When this is the case, you should perform a version check by testing whether the current operating system version returned by the <xref:System.Environment.OSVersion%2A> property is the same as, or greater than, the base operating system version.</span></span> <span data-ttu-id="46d8a-362">有关详细信息，请参阅<xref:System.Version>类主题。</span><span class="sxs-lookup"><span data-stu-id="46d8a-362">For more information, see the <xref:System.Version> class topic.</span></span>  
  
 <span data-ttu-id="46d8a-363">通过 Windows 8<xref:System.Environment.OSVersion%2A>属性返回报告的 Windows 版本[GetVersionEx](http://msdn.microsoft.com/library/windows/desktop/ms724451\(v=vs.85\).aspx)函数。</span><span class="sxs-lookup"><span data-stu-id="46d8a-363">Through Windows 8, the <xref:System.Environment.OSVersion%2A> property returns the version reported by the Windows [GetVersionEx](http://msdn.microsoft.com/library/windows/desktop/ms724451\(v=vs.85\).aspx) function.</span></span> <span data-ttu-id="46d8a-364">Windows 桌面操作系统版本和其相应的版本号的列表，请参阅[操作系统版本](https://msdn.microsoft.com/library/windows/desktop/ms724832.aspx)Windows 开发人员中心中。</span><span class="sxs-lookup"><span data-stu-id="46d8a-364">For a list of Windows desktop operating system versions and their corresponding version numbers, see [Operating System Version](https://msdn.microsoft.com/library/windows/desktop/ms724832.aspx) in the Windows Dev Center.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="46d8a-365"><xref:System.Environment.OSVersion%2A>属性报告两个相同的版本号 (6.2.0.0)[!INCLUDE[win8](~/includes/win8-md.md)]和[!INCLUDE[win81](~/includes/win81-md.md)]和相同主版本号和次版本号适用于 Windows 10。</span><span class="sxs-lookup"><span data-stu-id="46d8a-365">The <xref:System.Environment.OSVersion%2A> property reports the same version number (6.2.0.0) for both [!INCLUDE[win8](~/includes/win8-md.md)] and [!INCLUDE[win81](~/includes/win81-md.md)] and the same major and minor version number for Windows 10.</span></span>  
  
 <span data-ttu-id="46d8a-366">在某些情况下，<xref:System.Environment.OSVersion%2A>属性可能不会返回与匹配的 Windows 程序兼容性模式功能为指定的版本的操作系统版本。</span><span class="sxs-lookup"><span data-stu-id="46d8a-366">In some cases, the <xref:System.Environment.OSVersion%2A> property may not return the operating system version that matches the version specified for the Windows Program Compatibility mode feature.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46d8a-367">下面的示例显示平台标识符和版本号的计算机的运行的代码示例。</span><span class="sxs-lookup"><span data-stu-id="46d8a-367">The following example displays the platform identifier and version number of the computer that runs the code example.</span></span>  
  
 [!code-cpp[environment.osversion#1](~/samples/snippets/cpp/VS_Snippets_CLR/Environment.OSVersion/CPP/osversion.cpp#1)]
 [!code-csharp[environment.osversion#1](~/samples/snippets/csharp/VS_Snippets_CLR/Environment.OSVersion/CS/osversion.cs#1)]
 [!code-vb[environment.osversion#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Environment.OSVersion/VB/osversion.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="46d8a-368">此属性不能获得系统版本。</span><span class="sxs-lookup"><span data-stu-id="46d8a-368">This property was unable to obtain the system version.</span></span>  
  
 <span data-ttu-id="46d8a-369">或</span><span class="sxs-lookup"><span data-stu-id="46d8a-369">-or-</span></span>  
  
 <span data-ttu-id="46d8a-370">获得的平台标识符不是 <see cref="T:System.PlatformID" /> 的成员</span><span class="sxs-lookup"><span data-stu-id="46d8a-370">The obtained platform identifier is not a member of <see cref="T:System.PlatformID" /></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ProcessorCount">
      <MemberSignature Language="C#" Value="public static int ProcessorCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 ProcessorCount" />
      <MemberSignature Language="DocId" Value="P:System.Environment.ProcessorCount" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ProcessorCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int ProcessorCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="46d8a-371">获取当前计算机上的处理器数。</span><span class="sxs-lookup"><span data-stu-id="46d8a-371">Gets the number of processors on the current machine.</span></span></summary>
        <value><span data-ttu-id="46d8a-372">指定当前计算机上处理器个数的 32 位有符号整数。</span><span class="sxs-lookup"><span data-stu-id="46d8a-372">The 32-bit signed integer that specifies the number of processors on the current machine.</span></span> <span data-ttu-id="46d8a-373">没有默认值。</span><span class="sxs-lookup"><span data-stu-id="46d8a-373">There is no default.</span></span> <span data-ttu-id="46d8a-374">如果当前计算机包含多个处理器组，则此属性返回可用的逻辑处理器数以供公共语言运行时 (CLR) 使用。</span><span class="sxs-lookup"><span data-stu-id="46d8a-374">If the current machine contains multiple processor groups, this property returns the number of logical processors that are available for use by the common language runtime (CLR).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46d8a-375">有关处理器组和逻辑处理器的详细信息，请参阅[处理器组](http://msdn.microsoft.com/library/windows/desktop/dd405503.aspx)。</span><span class="sxs-lookup"><span data-stu-id="46d8a-375">For more information about processor groups and logical processors, see [Processor Groups](http://msdn.microsoft.com/library/windows/desktop/dd405503.aspx).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46d8a-376">下面的示例演示<xref:System.Environment.ProcessorCount%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="46d8a-376">The following example demonstrates the <xref:System.Environment.ProcessorCount%2A> property.</span></span>  
  
 [!code-cpp[environment.processorcount#1](~/samples/snippets/cpp/VS_Snippets_CLR/environment.processorcount/CPP/pc.cpp#1)]
 [!code-csharp[environment.processorcount#1](~/samples/snippets/csharp/VS_Snippets_CLR/environment.processorcount/CS/pc.cs#1)]
 [!code-vb[environment.processorcount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/environment.processorcount/VB/pc.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetEnvironmentVariable">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="46d8a-377">创建、修改或删除环境变量。</span><span class="sxs-lookup"><span data-stu-id="46d8a-377">Creates, modifies, or deletes an environment variable.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetEnvironmentVariable">
      <MemberSignature Language="C#" Value="public static void SetEnvironmentVariable (string variable, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetEnvironmentVariable(string variable, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Environment.SetEnvironmentVariable(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetEnvironmentVariable (variable As String, value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetEnvironmentVariable(System::String ^ variable, System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="variable"><span data-ttu-id="46d8a-378">环境变量名。</span><span class="sxs-lookup"><span data-stu-id="46d8a-378">The name of an environment variable.</span></span></param>
        <param name="value"><span data-ttu-id="46d8a-379">要分配给 <c>variable</c> 的值。</span><span class="sxs-lookup"><span data-stu-id="46d8a-379">A value to assign to <c>variable</c>.</span></span></param>
        <summary><span data-ttu-id="46d8a-380">创建、修改或删除当前进程中存储的环境变量。</span><span class="sxs-lookup"><span data-stu-id="46d8a-380">Creates, modifies, or deletes an environment variable stored in the current process.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46d8a-381">调用此方法等效于调用<xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%2CSystem.EnvironmentVariableTarget%29>值为重载<xref:System.EnvironmentVariableTarget.Process?displayProperty=nameWithType>为`target`自变量。</span><span class="sxs-lookup"><span data-stu-id="46d8a-381">Calling this method is equivalent to calling the <xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%2CSystem.EnvironmentVariableTarget%29> overload with a value of <xref:System.EnvironmentVariableTarget.Process?displayProperty=nameWithType> for the `target` argument.</span></span>  
  
 <span data-ttu-id="46d8a-382">如果`value`自变量不为空 （请参见删除空值的定义本部分中后面的环境变量的讨论） 和命名的环境变量`variable`参数不存在，环境创建变量并将其分配的内容`value`。</span><span class="sxs-lookup"><span data-stu-id="46d8a-382">If the `value` argument is not empty (see the discussion of deleting an environment variable later in this section for the definition of an empty value) and the environment variable named by the `variable` parameter does not exist, the environment variable is created and assigned the contents of `value`.</span></span> <span data-ttu-id="46d8a-383">如果文件确实存在，则会修改其值。</span><span class="sxs-lookup"><span data-stu-id="46d8a-383">If it does exist, its value is modified.</span></span> <span data-ttu-id="46d8a-384">在当前进程的环境块中定义环境变量，因为它后未保留该过程已结束。</span><span class="sxs-lookup"><span data-stu-id="46d8a-384">Because the environment variable is defined in the environment block of the current process only, it does not persist after the process has ended.</span></span>  
  
 <span data-ttu-id="46d8a-385">如果`variable`包含非初始十六进制零字符的零个字符将被视为环境变量名称，并将忽略所有后续字符之前的字符。</span><span class="sxs-lookup"><span data-stu-id="46d8a-385">If `variable` contains a non-initial hexadecimal zero character, the characters before the zero character are considered the environment variable name and all subsequent characters are ignored.</span></span>  
  
 <span data-ttu-id="46d8a-386">如果`value`包含非初始十六进制零字符的零个字符分配给环境变量并将忽略所有后续字符之前的字符。</span><span class="sxs-lookup"><span data-stu-id="46d8a-386">If `value` contains a non-initial hexadecimal zero character, the characters before the zero character are assigned to the environment variable and all subsequent characters are ignored.</span></span>  
  
 <span data-ttu-id="46d8a-387">如果`value`为空且命名的环境变量`variable`存在，则删除该环境变量。</span><span class="sxs-lookup"><span data-stu-id="46d8a-387">If `value` is empty and the environment variable named by `variable` exists, the environment variable is deleted.</span></span> <span data-ttu-id="46d8a-388">如果`variable`不存在，不会发生错误即使无法执行该操作。</span><span class="sxs-lookup"><span data-stu-id="46d8a-388">If `variable` does not exist, no error occurs even though the operation cannot be performed.</span></span> <span data-ttu-id="46d8a-389">`value` 被视为空任何以下条件下：</span><span class="sxs-lookup"><span data-stu-id="46d8a-389">`value` is considered empty under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="46d8a-390">它是`null`。</span><span class="sxs-lookup"><span data-stu-id="46d8a-390">It is `null`.</span></span>  
  
-   <span data-ttu-id="46d8a-391">它是<xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="46d8a-391">It is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="46d8a-392">它包含单个字符，其值不在 U + 0000。</span><span class="sxs-lookup"><span data-stu-id="46d8a-392">It consists of a single character whose value is U+0000.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46d8a-393">下面的示例测试是否名为的环境变量`APPDOMAIN`存在于当前进程中。</span><span class="sxs-lookup"><span data-stu-id="46d8a-393">The following example tests whether an environment variable named `APPDOMAIN` exists in the current process.</span></span> <span data-ttu-id="46d8a-394">如果不存在，则它将创建它并设置其值为"True"。</span><span class="sxs-lookup"><span data-stu-id="46d8a-394">If it does not, it creates it and sets its value to "True".</span></span> <span data-ttu-id="46d8a-395">如果值`APPDOMAIN`环境变量为"True"时，它调用`Message.Display`新的应用程序域中的方法。</span><span class="sxs-lookup"><span data-stu-id="46d8a-395">If the value of the `APPDOMAIN` environment variable is "True", it calls the `Message.Display` method in a new application domain.</span></span> <span data-ttu-id="46d8a-396">否则，它会执行`Message.Display`当前的应用程序域中的方法。</span><span class="sxs-lookup"><span data-stu-id="46d8a-396">Otherwise, it executes the `Message.Display` method in the current application domain.</span></span>  
  
 [!code-csharp[System.Environment.SetEnvironmentVariable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.environment.setenvironmentvariable/cs/setenvironmentvariable1.cs#1)]
 [!code-vb[System.Environment.SetEnvironmentVariable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.environment.setenvironmentvariable/vb/setenvironmentvariable1.vb#1)]  
  
 <span data-ttu-id="46d8a-397">如果首次运行该示例，该消息"正在执行域 Domain2 中的"显示到控制台。</span><span class="sxs-lookup"><span data-stu-id="46d8a-397">If you run the example for the first time, the message "Executing in domain Domain2" displays to the console.</span></span> <span data-ttu-id="46d8a-398">如果使用命令，可以从命令行设置环境变量：</span><span class="sxs-lookup"><span data-stu-id="46d8a-398">If you set the environment variable from the command line by using the command:</span></span>  
  
 `Set AppDomain=False`  
  
 <span data-ttu-id="46d8a-399">该示例显示消息"在域中执行*exeName*.exe"，其中*exeName*是可执行文件的名称。</span><span class="sxs-lookup"><span data-stu-id="46d8a-399">the example displays the message "Executing in domain *exeName*.exe", where *exeName* is the name of the executable.</span></span>  
  
 <span data-ttu-id="46d8a-400">以下示例尝试检索名为的环境变量的值`Test1`从进程环境块。</span><span class="sxs-lookup"><span data-stu-id="46d8a-400">The following example attempts to retrieve the value of an environment variable named `Test1` from the process environment block.</span></span> <span data-ttu-id="46d8a-401">如果不存在该变量，该示例将创建该变量，并检索其值。</span><span class="sxs-lookup"><span data-stu-id="46d8a-401">If the variable doesn't exist, the example creates the variable and retrieves its value.</span></span> <span data-ttu-id="46d8a-402">此示例显示变量的值。</span><span class="sxs-lookup"><span data-stu-id="46d8a-402">The example displays the value of the variable.</span></span> <span data-ttu-id="46d8a-403">如果该示例创建变量，它还会调用<xref:System.Environment.GetEnvironmentVariables%28System.EnvironmentVariableTarget%29>方法的每个成员<xref:System.EnvironmentVariableTarget>枚举，以建立只能从当前进程环境块中，可以检索该变量。</span><span class="sxs-lookup"><span data-stu-id="46d8a-403">If the example created the variable, it also calls the <xref:System.Environment.GetEnvironmentVariables%28System.EnvironmentVariableTarget%29> method with each member of the <xref:System.EnvironmentVariableTarget> enumeration to establish that the variable can be retrieved only from the current process environment block.</span></span> <span data-ttu-id="46d8a-404">最后，如果该示例创建变量，将其删除。</span><span class="sxs-lookup"><span data-stu-id="46d8a-404">Finally, if the example created the variable, it deletes it.</span></span>  
  
 [!code-csharp[System.Environment.GetEnvironmentVariable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.environment.getenvironmentvariable/cs/getenvironmentvariableex1.cs#2)]
 [!code-vb[System.Environment.GetEnvironmentVariable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.environment.getenvironmentvariable/vb/getenvironmentvariableex1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="46d8a-405"><paramref name="variable" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="46d8a-405"><paramref name="variable" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="46d8a-406"><paramref name="variable" /> 包含零长度字符串、起始十六进制零字符 (0x00) 或等号（“=”）。</span><span class="sxs-lookup"><span data-stu-id="46d8a-406"><paramref name="variable" /> contains a zero-length string, an initial hexadecimal zero character (0x00), or an equal sign ("=").</span></span>  
  
 <span data-ttu-id="46d8a-407">或</span><span class="sxs-lookup"><span data-stu-id="46d8a-407">-or-</span></span>  
  
 <span data-ttu-id="46d8a-408"><paramref name="variable" /> 或 <paramref name="value" /> 的长度大于等于 32,767 个字符。</span><span class="sxs-lookup"><span data-stu-id="46d8a-408">The length of <paramref name="variable" /> or <paramref name="value" /> is greater than or equal to 32,767 characters.</span></span>  
  
 <span data-ttu-id="46d8a-409">或</span><span class="sxs-lookup"><span data-stu-id="46d8a-409">-or-</span></span>  
  
 <span data-ttu-id="46d8a-410">执行此操作期间出错。</span><span class="sxs-lookup"><span data-stu-id="46d8a-410">An error occurred during the execution of this operation.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="46d8a-411">调用方没有执行此操作所需的权限。</span><span class="sxs-lookup"><span data-stu-id="46d8a-411">The caller does not have the required permission to perform this operation.</span></span></exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission"><span data-ttu-id="46d8a-412">对环境变量的完全访问权限。</span><span class="sxs-lookup"><span data-stu-id="46d8a-412">for full access to environment variables.</span></span> <span data-ttu-id="46d8a-413">关联的枚举： <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="46d8a-413">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <altmember cref="M:System.Environment.GetEnvironmentVariable(System.String)" />
        <altmember cref="M:System.Environment.GetEnvironmentVariables" />
      </Docs>
    </Member>
    <Member MemberName="SetEnvironmentVariable">
      <MemberSignature Language="C#" Value="public static void SetEnvironmentVariable (string variable, string value, EnvironmentVariableTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetEnvironmentVariable(string variable, string value, valuetype System.EnvironmentVariableTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetEnvironmentVariable (variable As String, value As String, target As EnvironmentVariableTarget)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetEnvironmentVariable(System::String ^ variable, System::String ^ value, EnvironmentVariableTarget target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="target" Type="System.EnvironmentVariableTarget" />
      </Parameters>
      <Docs>
        <param name="variable"><span data-ttu-id="46d8a-414">环境变量名。</span><span class="sxs-lookup"><span data-stu-id="46d8a-414">The name of an environment variable.</span></span></param>
        <param name="value"><span data-ttu-id="46d8a-415">要分配给 <c>variable</c> 的值。</span><span class="sxs-lookup"><span data-stu-id="46d8a-415">A value to assign to <c>variable</c>.</span></span></param>
        <param name="target"><span data-ttu-id="46d8a-416">一个用于指定环境变量的位置的枚举值。</span><span class="sxs-lookup"><span data-stu-id="46d8a-416">One of the enumeration values that specifies the location of the environment variable.</span></span></param>
        <summary><span data-ttu-id="46d8a-417">创建、修改或删除当前进程中或者为当前用户或本地计算机保留的 Windows 操作系统注册表项中存储的环境变量。</span><span class="sxs-lookup"><span data-stu-id="46d8a-417">Creates, modifies, or deletes an environment variable stored in the current process or in the Windows operating system registry key reserved for the current user or local machine.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46d8a-418"><xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%2CSystem.EnvironmentVariableTarget%29>方法使你可以定义可供所有的计算机运行的进程的环境变量 (<xref:System.EnvironmentVariableTarget.Machine?displayProperty=nameWithType>值) 到所有进程都运行报表的用户 (<xref:System.EnvironmentVariableTarget.User?displayProperty=nameWithType>值)，或到当前进程 (<xref:System.EnvironmentVariableTarget.Process>值)。</span><span class="sxs-lookup"><span data-stu-id="46d8a-418">The <xref:System.Environment.SetEnvironmentVariable%28System.String%2CSystem.String%2CSystem.EnvironmentVariableTarget%29> method lets you define an environment variable that is available to all processes that run on a machine (the <xref:System.EnvironmentVariableTarget.Machine?displayProperty=nameWithType> value), to all processes run by a user (the <xref:System.EnvironmentVariableTarget.User?displayProperty=nameWithType> value), or to the current process (the <xref:System.EnvironmentVariableTarget.Process> value).</span></span> <span data-ttu-id="46d8a-419">每台计算机和每个用户环境变量将复制到当前进程的环境块。</span><span class="sxs-lookup"><span data-stu-id="46d8a-419">Per-machine and per-user environment variables are copied into the environment block of the current process.</span></span> <span data-ttu-id="46d8a-420">但是，仅在进程结束前，将保留对当前进程环境块是唯一的环境变量。</span><span class="sxs-lookup"><span data-stu-id="46d8a-420">However, environment variables that are unique to the current process environment block persist only until the process ends.</span></span>  
  
 <span data-ttu-id="46d8a-421">如果`value`自变量不为空 （请参见删除空值的定义本部分中后面的环境变量的讨论） 和命名的环境变量`variable`参数不存在，环境创建变量并将其分配的内容`value`。</span><span class="sxs-lookup"><span data-stu-id="46d8a-421">If the `value` argument is not empty (see the discussion of deleting an environment variable later in this section for the definition of an empty value) and the environment variable named by the `variable` parameter does not exist, the environment variable is created and assigned the contents of `value`.</span></span>  <span data-ttu-id="46d8a-422">如果文件确实存在，则会修改其值。</span><span class="sxs-lookup"><span data-stu-id="46d8a-422">If it does exist, its value is modified.</span></span>  
  
 <span data-ttu-id="46d8a-423">如果`variable`包含非初始十六进制零字符的零个字符将被视为环境变量名称，并将忽略所有后续字符之前的字符。</span><span class="sxs-lookup"><span data-stu-id="46d8a-423">If `variable` contains a non-initial hexadecimal zero character, the characters before the zero character are considered the environment variable name and all subsequent characters are ignored.</span></span>  
  
 <span data-ttu-id="46d8a-424">如果`value`包含非初始十六进制零字符的零个字符分配给环境变量并将忽略所有后续字符之前的字符。</span><span class="sxs-lookup"><span data-stu-id="46d8a-424">If `value` contains a non-initial hexadecimal zero character, the characters before the zero character are assigned to the environment variable and all subsequent characters are ignored.</span></span>  
  
 <span data-ttu-id="46d8a-425">如果`value`为空且命名的环境变量`variable`存在，则删除该环境变量。</span><span class="sxs-lookup"><span data-stu-id="46d8a-425">If `value` is empty and the environment variable named by `variable` exists, the environment variable is deleted.</span></span> <span data-ttu-id="46d8a-426">`value` 被视为空任何以下条件下：</span><span class="sxs-lookup"><span data-stu-id="46d8a-426">`value` is considered empty under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="46d8a-427">它是`null`。</span><span class="sxs-lookup"><span data-stu-id="46d8a-427">It is `null`.</span></span>  
  
-   <span data-ttu-id="46d8a-428">它是<xref:System.String.Empty?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="46d8a-428">It is <xref:System.String.Empty?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="46d8a-429">它包含单个字符，其值不在 U + 0000。</span><span class="sxs-lookup"><span data-stu-id="46d8a-429">It consists of a single character whose value is U+0000.</span></span>  
  
 <span data-ttu-id="46d8a-430">如果`variable`不存在，不会发生错误尽管无法执行该操作。</span><span class="sxs-lookup"><span data-stu-id="46d8a-430">If `variable` does not exist, no error occurs although the operation cannot be performed.</span></span> <span data-ttu-id="46d8a-431">请注意`target`是<xref:System.EnvironmentVariableTarget.Machine>，这是因为你可以不小心删除影响整个本地计算机，而不仅仅是当前进程或用户的环境变量。</span><span class="sxs-lookup"><span data-stu-id="46d8a-431">Be careful when `target` is <xref:System.EnvironmentVariableTarget.Machine>, because you can accidentally delete an environment variable that affects your entire local machine, not just the current process or user.</span></span>  
  
 <span data-ttu-id="46d8a-432">如果`target`是<xref:System.EnvironmentVariableTarget.User>，存储在本地计算机的注册表 HKEY_CURRENT_USER\Environment 项中的环境变量。</span><span class="sxs-lookup"><span data-stu-id="46d8a-432">If `target` is <xref:System.EnvironmentVariableTarget.User>, the environment variable is stored in the HKEY_CURRENT_USER\Environment key of the local computer's registry.</span></span> <span data-ttu-id="46d8a-433">它也会复制到当前用户身份运行的文件资源管理器实例。</span><span class="sxs-lookup"><span data-stu-id="46d8a-433">It is also copied to instances of File Explorer that are running as the current user.</span></span> <span data-ttu-id="46d8a-434">然后，用户将从文件资源管理器启动任何新进程继承该环境变量。</span><span class="sxs-lookup"><span data-stu-id="46d8a-434">The environment variable is then inherited by any new processes that the user launches from File Explorer.</span></span>  
  
 <span data-ttu-id="46d8a-435">同样，如果`target`是<xref:System.EnvironmentVariableTarget.Machine?displayProperty=nameWithType>，存储在本地计算机的注册表 HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Control\Session Manager\Environment 项中的环境变量。</span><span class="sxs-lookup"><span data-stu-id="46d8a-435">Similarly, if `target` is <xref:System.EnvironmentVariableTarget.Machine?displayProperty=nameWithType>, the environment variable is stored in the HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Control\Session Manager\Environment key of the local computer's registry.</span></span> <span data-ttu-id="46d8a-436">它也会复制到文件资源管理器的所有实例。</span><span class="sxs-lookup"><span data-stu-id="46d8a-436">It is also copied to all instances of File Explorer.</span></span> <span data-ttu-id="46d8a-437">然后，从文件资源管理器启动任何新进程继承该环境变量。</span><span class="sxs-lookup"><span data-stu-id="46d8a-437">The environment variable is then inherited by any new processes that are launched from File Explorer.</span></span>  
  
 <span data-ttu-id="46d8a-438">如果`target`是<xref:System.EnvironmentVariableTarget.User>或<xref:System.EnvironmentVariableTarget.Machine>，其他应用程序会通知你的设置操作由 Windows`WM_SETTINGCHANGE`消息。</span><span class="sxs-lookup"><span data-stu-id="46d8a-438">If `target` is <xref:System.EnvironmentVariableTarget.User> or <xref:System.EnvironmentVariableTarget.Machine>, other applications are notified of the set operation by a Windows `WM_SETTINGCHANGE` message.</span></span>  
  
 <span data-ttu-id="46d8a-439">如果`target`是<xref:System.EnvironmentVariableTarget.User?displayProperty=nameWithType>或<xref:System.EnvironmentVariableTarget.Machine?displayProperty=nameWithType>，我们建议的长度`value`小于 2048年个字符。</span><span class="sxs-lookup"><span data-stu-id="46d8a-439">If `target` is <xref:System.EnvironmentVariableTarget.User?displayProperty=nameWithType> or <xref:System.EnvironmentVariableTarget.Machine?displayProperty=nameWithType>, we recommend that the length of `value` be less than 2048 characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46d8a-440">下面的示例创建的环境变量<xref:System.EnvironmentVariableTarget.Process?displayProperty=nameWithType>， <xref:System.EnvironmentVariableTarget.User?displayProperty=nameWithType>，和<xref:System.EnvironmentVariableTarget.Machine>面向，检查是否操作系统注册表包含的用户和计算机环境变量，则删除环境变量。</span><span class="sxs-lookup"><span data-stu-id="46d8a-440">The following example creates environment variables for the <xref:System.EnvironmentVariableTarget.Process?displayProperty=nameWithType>, <xref:System.EnvironmentVariableTarget.User?displayProperty=nameWithType>, and <xref:System.EnvironmentVariableTarget.Machine> targets, checks whether the operating system registry contains the user and machine environment variables, then deletes the environment variables.</span></span>  
  
 [!code-cpp[environment.getsetenvar#1](~/samples/snippets/cpp/VS_Snippets_CLR/environment.getsetenvar/CPP/source.cpp#1)]
 [!code-csharp[environment.getsetenvar#1](~/samples/snippets/csharp/VS_Snippets_CLR/environment.getsetenvar/CS/gsev.cs#1)]
 [!code-vb[environment.getsetenvar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/environment.getsetenvar/VB/gsev.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="46d8a-441"><paramref name="variable" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="46d8a-441"><paramref name="variable" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="46d8a-442"><paramref name="variable" /> 包含零长度字符串、起始十六进制零字符 (0x00) 或等号（“=”）。</span><span class="sxs-lookup"><span data-stu-id="46d8a-442"><paramref name="variable" /> contains a zero-length string, an initial hexadecimal zero character (0x00), or an equal sign ("=").</span></span>  
  
 <span data-ttu-id="46d8a-443">或</span><span class="sxs-lookup"><span data-stu-id="46d8a-443">-or-</span></span>  
  
 <span data-ttu-id="46d8a-444"><paramref name="variable" /> 的长度大于等于 32,767 个字符。</span><span class="sxs-lookup"><span data-stu-id="46d8a-444">The length of <paramref name="variable" /> is greater than or equal to 32,767 characters.</span></span>  
  
 <span data-ttu-id="46d8a-445">或</span><span class="sxs-lookup"><span data-stu-id="46d8a-445">-or-</span></span>  
  
 <span data-ttu-id="46d8a-446"><paramref name="target" /> 不是 <see cref="T:System.EnvironmentVariableTarget" /> 枚举的成员。</span><span class="sxs-lookup"><span data-stu-id="46d8a-446"><paramref name="target" /> is not a member of the <see cref="T:System.EnvironmentVariableTarget" /> enumeration.</span></span>  
  
 <span data-ttu-id="46d8a-447">或</span><span class="sxs-lookup"><span data-stu-id="46d8a-447">-or-</span></span>  
  
 <span data-ttu-id="46d8a-448"><paramref name="target" /> 为 <see cref="F:System.EnvironmentVariableTarget.Machine" /> 或 <see cref="F:System.EnvironmentVariableTarget.User" />，并且 <paramref name="variable" /> 的长度大于等于 255。</span><span class="sxs-lookup"><span data-stu-id="46d8a-448"><paramref name="target" /> is <see cref="F:System.EnvironmentVariableTarget.Machine" /> or <see cref="F:System.EnvironmentVariableTarget.User" />, and the length of <paramref name="variable" /> is greater than or equal to 255.</span></span>  
  
 <span data-ttu-id="46d8a-449">或</span><span class="sxs-lookup"><span data-stu-id="46d8a-449">-or-</span></span>  
  
 <span data-ttu-id="46d8a-450"><paramref name="target" /> 为 <see cref="F:System.EnvironmentVariableTarget.Process" />，并且 <paramref name="value" /> 的长度大于等于 32,767 个字符。</span><span class="sxs-lookup"><span data-stu-id="46d8a-450"><paramref name="target" /> is <see cref="F:System.EnvironmentVariableTarget.Process" /> and the length of <paramref name="value" /> is greater than or equal to 32,767 characters.</span></span>  
  
 <span data-ttu-id="46d8a-451">或</span><span class="sxs-lookup"><span data-stu-id="46d8a-451">-or-</span></span>  
  
 <span data-ttu-id="46d8a-452">执行此操作期间出错。</span><span class="sxs-lookup"><span data-stu-id="46d8a-452">An error occurred during the execution of this operation.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="46d8a-453">调用方没有执行此操作所需的权限。</span><span class="sxs-lookup"><span data-stu-id="46d8a-453">The caller does not have the required permission to perform this operation.</span></span></exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission"><span data-ttu-id="46d8a-454">对环境变量的完全访问权限。</span><span class="sxs-lookup"><span data-stu-id="46d8a-454">for full access to environment variables.</span></span> <span data-ttu-id="46d8a-455">关联的枚举： <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="46d8a-455">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
        <altmember cref="M:System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)" />
        <altmember cref="M:System.Environment.GetEnvironmentVariables(System.EnvironmentVariableTarget)" />
        <altmember cref="T:System.EnvironmentVariableTarget" />
      </Docs>
    </Member>
    <Member MemberName="StackTrace">
      <MemberSignature Language="C#" Value="public static string StackTrace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string StackTrace" />
      <MemberSignature Language="DocId" Value="P:System.Environment.StackTrace" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property StackTrace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ StackTrace { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="46d8a-456">获取当前的堆栈跟踪信息。</span><span class="sxs-lookup"><span data-stu-id="46d8a-456">Gets current stack trace information.</span></span></summary>
        <value><span data-ttu-id="46d8a-457">包含堆栈跟踪信息的字符串。</span><span class="sxs-lookup"><span data-stu-id="46d8a-457">A string containing stack trace information.</span></span> <span data-ttu-id="46d8a-458">此值可为 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="46d8a-458">This value can be <see cref="F:System.String.Empty" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46d8a-459"><xref:System.Environment.StackTrace%2A>属性列出顺序的逆序方法调用、，即首先，描述最新的方法调用和每个方法调用在堆栈上列出的堆栈跟踪信息的一行。</span><span class="sxs-lookup"><span data-stu-id="46d8a-459">The <xref:System.Environment.StackTrace%2A> property lists method calls in reverse chronological order, that is, the most recent method call is described first, and one line of stack trace information is listed for each method call on the stack.</span></span> <span data-ttu-id="46d8a-460">但是，<xref:System.Environment.StackTrace%2A>属性可能不报告任意多个方法调用预期由于优化期间发生代码转换。</span><span class="sxs-lookup"><span data-stu-id="46d8a-460">However, the <xref:System.Environment.StackTrace%2A> property might not report as many method calls as expected due to code transformations that occur during optimization.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="46d8a-461">由类的堆栈跟踪信息的层次结构视图，使用<xref:System.Diagnostics.StackTrace>类。</span><span class="sxs-lookup"><span data-stu-id="46d8a-461">For a hierarchical view of the stack trace information by class, use the <xref:System.Diagnostics.StackTrace> class.</span></span>  
  
 <span data-ttu-id="46d8a-462"><xref:System.Environment.StackTrace%2A>属性设置为每个方法调用的堆栈跟踪信息的格式，如下所示：</span><span class="sxs-lookup"><span data-stu-id="46d8a-462">The <xref:System.Environment.StackTrace%2A> property formats the stack trace information for each method call as follows:</span></span>  
  
 <span data-ttu-id="46d8a-463">"在`FullClassName`。`MethodName`(`MethodParams`) 中`FileName`： 行`LineNumber`"</span><span class="sxs-lookup"><span data-stu-id="46d8a-463">"at `FullClassName`.`MethodName`(`MethodParams`) in `FileName` :line `LineNumber` "</span></span>  
  
 <span data-ttu-id="46d8a-464">"At"文本前面由三个空格，并且如果调试符号将不可用，则忽略"in"以开始将整个子字符串。</span><span class="sxs-lookup"><span data-stu-id="46d8a-464">The literal "at" is preceded by three spaces, and the entire substring starting with "in" is omitted if debug symbols are not available.</span></span> <span data-ttu-id="46d8a-465">占位符， `FullClassName`， `MethodName`， `MethodParams`， `FileName`，和`LineNumber`、 将替换为实际值和定义，如下所示：</span><span class="sxs-lookup"><span data-stu-id="46d8a-465">The placeholders, `FullClassName`, `MethodName`, `MethodParams`, `FileName`, and `LineNumber`, are replaced by actual values, and are defined as follows:</span></span>  
  
 <span data-ttu-id="46d8a-466">FullClassName</span><span class="sxs-lookup"><span data-stu-id="46d8a-466">FullClassName</span></span>  
 <span data-ttu-id="46d8a-467">类，包括命名空间的完整名称。</span><span class="sxs-lookup"><span data-stu-id="46d8a-467">The full name of the class, including the namespace.</span></span>  
  
 `MethodName`  
 <span data-ttu-id="46d8a-468">方法的名称。</span><span class="sxs-lookup"><span data-stu-id="46d8a-468">The name of the method.</span></span>  
  
 `MethodParams`  
 <span data-ttu-id="46d8a-469">参数类型/名称对的列表。</span><span class="sxs-lookup"><span data-stu-id="46d8a-469">The list of parameter type/name pairs.</span></span> <span data-ttu-id="46d8a-470">用逗号分隔每个对 （"，"）。</span><span class="sxs-lookup"><span data-stu-id="46d8a-470">Each pair is separated by a comma (",").</span></span> <span data-ttu-id="46d8a-471">如果省略此信息`MethodName`不带任何参数。</span><span class="sxs-lookup"><span data-stu-id="46d8a-471">This information is omitted if `MethodName` takes no parameters.</span></span>  
  
 `FileName`  
 <span data-ttu-id="46d8a-472">源的名称文件，其中`MethodName`声明方法。</span><span class="sxs-lookup"><span data-stu-id="46d8a-472">The name of the source file where the `MethodName` method is declared.</span></span> <span data-ttu-id="46d8a-473">如果调试符号不可用，则省略此信息。</span><span class="sxs-lookup"><span data-stu-id="46d8a-473">This information is omitted if debug symbols are not available.</span></span>  
  
 `LineNumber`  
 <span data-ttu-id="46d8a-474">中的行数`FileName`，其中包含从源代码`MethodName`指令调用堆栈上。</span><span class="sxs-lookup"><span data-stu-id="46d8a-474">The number of the line in `FileName` that contains the source code from `MethodName` for the instruction that is on the call stack.</span></span> <span data-ttu-id="46d8a-475">如果调试符号不可用，则省略此信息。</span><span class="sxs-lookup"><span data-stu-id="46d8a-475">This information is omitted if debug symbols are not available.</span></span>  
  
 <span data-ttu-id="46d8a-476"><xref:System.Environment.NewLine%2A?displayProperty=nameWithType>字符串终止的堆栈跟踪每个行。</span><span class="sxs-lookup"><span data-stu-id="46d8a-476">The <xref:System.Environment.NewLine%2A?displayProperty=nameWithType> string terminates each line of the stack trace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46d8a-477">下面的示例演示<xref:System.Environment.StackTrace%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="46d8a-477">The following example demonstrates the <xref:System.Environment.StackTrace%2A> property.</span></span>  
  
 [!code-cpp[environment.stacktrace#1](~/samples/snippets/cpp/VS_Snippets_CLR/Environment.StackTrace/CPP/stacktrace.cpp#1)]
 [!code-csharp[environment.stacktrace#1](~/samples/snippets/csharp/VS_Snippets_CLR/Environment.StackTrace/CS/stacktrace.cs#1)]
 [!code-vb[environment.stacktrace#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Environment.StackTrace/VB/stacktrace.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission"><span data-ttu-id="46d8a-478">用于对权限所保护的资源的完全访问。</span><span class="sxs-lookup"><span data-stu-id="46d8a-478">for full access to the resource protected by the permission.</span></span> <span data-ttu-id="46d8a-479">关联的枚举： <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="46d8a-479">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SystemDirectory">
      <MemberSignature Language="C#" Value="public static string SystemDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string SystemDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Environment.SystemDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SystemDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ SystemDirectory { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="46d8a-480">获取系统目录的完全限定路径。</span><span class="sxs-lookup"><span data-stu-id="46d8a-480">Gets the fully qualified path of the system directory.</span></span></summary>
        <value><span data-ttu-id="46d8a-481">包含目录路径的字符串。</span><span class="sxs-lookup"><span data-stu-id="46d8a-481">A string containing a directory path.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46d8a-482">返回的一个示例是值的"C:\WinNT\System32"的字符串。</span><span class="sxs-lookup"><span data-stu-id="46d8a-482">An example of the value returned is the string "C:\WinNT\System32".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46d8a-483">下面的示例显示运行的代码示例的计算机的系统目录。</span><span class="sxs-lookup"><span data-stu-id="46d8a-483">The following example displays the system directory of the computer that runs the code example.</span></span> <span data-ttu-id="46d8a-484">（系统目录中省略出于安全原因，示例输出。）</span><span class="sxs-lookup"><span data-stu-id="46d8a-484">(The system directory is omitted from the example output for security reasons.)</span></span>  
  
 [!code-cpp[environment.systemdirectory#1](~/samples/snippets/cpp/VS_Snippets_CLR/Environment.SystemDirectory/CPP/systemdirectory.cpp#1)]
 [!code-csharp[environment.systemdirectory#1](~/samples/snippets/csharp/VS_Snippets_CLR/Environment.SystemDirectory/CS/systemdirectory.cs#1)]
 [!code-vb[environment.systemdirectory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Environment.SystemDirectory/VB/systemdirectory.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="46d8a-485">用于访问路径本身中的信息。</span><span class="sxs-lookup"><span data-stu-id="46d8a-485">for access to the information in the path itself.</span></span> <span data-ttu-id="46d8a-486">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span><span class="sxs-lookup"><span data-stu-id="46d8a-486">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SystemPageSize">
      <MemberSignature Language="C#" Value="public static int SystemPageSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 SystemPageSize" />
      <MemberSignature Language="DocId" Value="P:System.Environment.SystemPageSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SystemPageSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int SystemPageSize { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="46d8a-487">获取操作系统的内存页的字节数。</span><span class="sxs-lookup"><span data-stu-id="46d8a-487">Gets the number of bytes in the operating system's memory page.</span></span></summary>
        <value><span data-ttu-id="46d8a-488">系统内存页中的字节数。</span><span class="sxs-lookup"><span data-stu-id="46d8a-488">The number of bytes in the system memory page.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46d8a-489">此信息很有用，在确定是否使用<xref:System.IO.MemoryMappedFiles.MemoryMappedFileOptions.DelayAllocatePages?displayProperty=nameWithType>选项的内存映射文件时。</span><span class="sxs-lookup"><span data-stu-id="46d8a-489">This information can be useful when determining whether to use the <xref:System.IO.MemoryMappedFiles.MemoryMappedFileOptions.DelayAllocatePages?displayProperty=nameWithType> option when you work with memory-mapped files.</span></span>  
  
 <span data-ttu-id="46d8a-490">在 Windows 中，此值是`dwPageSize`中的成员`SYSTEM_INFO`结构。</span><span class="sxs-lookup"><span data-stu-id="46d8a-490">In Windows, this value is the `dwPageSize` member in the `SYSTEM_INFO` structure.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission"><span data-ttu-id="46d8a-491">用于访问系统和用户环境变量。</span><span class="sxs-lookup"><span data-stu-id="46d8a-491">for access to system and user environment variables.</span></span> <span data-ttu-id="46d8a-492">相关联的异常：</span><span class="sxs-lookup"><span data-stu-id="46d8a-492">Associated exception:</span></span>  
  
 <see cref="P:System.Security.SecurityException.PermissionState" /></permission>
      </Docs>
    </Member>
    <Member MemberName="TickCount">
      <MemberSignature Language="C#" Value="public static int TickCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 TickCount" />
      <MemberSignature Language="DocId" Value="P:System.Environment.TickCount" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TickCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int TickCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="46d8a-493">获取系统启动后经过的毫秒数。</span><span class="sxs-lookup"><span data-stu-id="46d8a-493">Gets the number of milliseconds elapsed since the system started.</span></span></summary>
        <value><span data-ttu-id="46d8a-494">一个 32 位带符号整数，它包含自上次启动计算机以来所经过的时间（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="46d8a-494">A 32-bit signed integer containing the amount of time in milliseconds that has passed since the last time the computer was started.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46d8a-495">此属性的值派生自系统计时器，存储作为 32 位有符号整数。</span><span class="sxs-lookup"><span data-stu-id="46d8a-495">The value of this property is derived from the system timer and is stored as a 32-bit signed integer.</span></span> <span data-ttu-id="46d8a-496">请注意，因为它从系统计时器的分辨率派生<xref:System.Environment.TickCount%2A>属性仅限于系统计时器，这通常是在 10 到 16 毫秒的范围内的分辨率。</span><span class="sxs-lookup"><span data-stu-id="46d8a-496">Note that, because it is derived from the system timer, the resolution of the <xref:System.Environment.TickCount%2A> property is limited to the resolution of the system timer, which is typically in the range of 10 to 16 milliseconds.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="46d8a-497">因为的值<xref:System.Environment.TickCount%2A>属性值是一个 32 位带符号的整数，如果系统连续运行，<xref:System.Environment.TickCount%2A>从零到将递增<xref:System.Int32.MaxValue?displayProperty=nameWithType>约 24.9 天内，然后跳转到<xref:System.Int32.MinValue?displayProperty=nameWithType>，这是负号，然后递增回在下一步 24.9 天内的零。</span><span class="sxs-lookup"><span data-stu-id="46d8a-497">Because the value of the <xref:System.Environment.TickCount%2A> property value is a 32-bit signed integer, if the system runs continuously, <xref:System.Environment.TickCount%2A> will increment from zero to <xref:System.Int32.MaxValue?displayProperty=nameWithType> for approximately 24.9 days, then jump to <xref:System.Int32.MinValue?displayProperty=nameWithType>, which is a negative number, then increment back to zero during the next 24.9 days.</span></span> <span data-ttu-id="46d8a-498">可以通过调用 Windows 来解决此问题[GetTickCount](https://msdn.microsoft.com/library/windows/desktop/ms724408.aspx)函数，将重置为零后大约 49.7 天，或通过调用[GetTickCount64](https://msdn.microsoft.com/library/windows/desktop/ms724411.aspx)函数。</span><span class="sxs-lookup"><span data-stu-id="46d8a-498">You can work around this issue by calling the Windows [GetTickCount](https://msdn.microsoft.com/library/windows/desktop/ms724408.aspx) function, which resets to zero after approximately 49.7 days, or by calling the [GetTickCount64](https://msdn.microsoft.com/library/windows/desktop/ms724411.aspx) function.</span></span>  
  
 <span data-ttu-id="46d8a-499"><xref:System.Environment.TickCount%2A> 不同于<xref:System.DateTime.Ticks%2A?displayProperty=nameWithType>属性，它是 0001 年 1 月 1 日，上午 12:00 以来所经历的 100 毫微秒隔数。</span><span class="sxs-lookup"><span data-stu-id="46d8a-499"><xref:System.Environment.TickCount%2A> is different from the <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType> property, which is the number of 100-nanosecond intervals that have elapsed since 1/1/0001, 12:00am.</span></span>  
  
 <span data-ttu-id="46d8a-500">使用<xref:System.DateTime.Now%2A?displayProperty=nameWithType>属性来获取的当前日期和时间在此计算机上的。</span><span class="sxs-lookup"><span data-stu-id="46d8a-500">Use the <xref:System.DateTime.Now%2A?displayProperty=nameWithType> property to obtain the current local date and time on this computer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46d8a-501">下面的示例演示如何检索返回值的正范围<xref:System.Environment.TickCount%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="46d8a-501">The following example demonstrates how to retrieve the positive range of values returned by the <xref:System.Environment.TickCount%2A> property.</span></span> <span data-ttu-id="46d8a-502"><xref:System.Environment.TickCount%2A>属性周期之间<xref:System.Int32.MinValue?displayProperty=nameWithType>，这是负数，和<xref:System.Int32.MaxValue?displayProperty=nameWithType>49.8 天一次。</span><span class="sxs-lookup"><span data-stu-id="46d8a-502">The <xref:System.Environment.TickCount%2A> property cycles between <xref:System.Int32.MinValue?displayProperty=nameWithType>, which is a negative number, and <xref:System.Int32.MaxValue?displayProperty=nameWithType> once every 49.8 days.</span></span> <span data-ttu-id="46d8a-503">此代码示例中移除符号位来产生大量零之间循环的非负和<xref:System.Int32.MaxValue>24.9 天。</span><span class="sxs-lookup"><span data-stu-id="46d8a-503">This code sample removes the sign bit to yield a nonnegative number that cycles between zero and <xref:System.Int32.MaxValue> once every 24.9 days.</span></span>  
  
 [!code-cpp[environment.tickcount#1](~/samples/snippets/cpp/VS_Snippets_CLR/Environment.TickCount/CPP/tickcount.cpp#1)]
 [!code-csharp[environment.tickcount#1](~/samples/snippets/csharp/VS_Snippets_CLR/Environment.TickCount/CS/tickcount.cs#1)]
 [!code-vb[environment.tickcount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Environment.TickCount/VB/tickcount.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserDomainName">
      <MemberSignature Language="C#" Value="public static string UserDomainName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string UserDomainName" />
      <MemberSignature Language="DocId" Value="P:System.Environment.UserDomainName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UserDomainName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ UserDomainName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="46d8a-504">获取与当前用户关联的网络域名。</span><span class="sxs-lookup"><span data-stu-id="46d8a-504">Gets the network domain name associated with the current user.</span></span></summary>
        <value><span data-ttu-id="46d8a-505">与当前用户关联的网络域名。</span><span class="sxs-lookup"><span data-stu-id="46d8a-505">The network domain name associated with the current user.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46d8a-506">用户的域帐户凭据的格式设置为用户的域名称\\字符，并且用户名称。</span><span class="sxs-lookup"><span data-stu-id="46d8a-506">The domain account credentials for a user are formatted as the user's domain name, the '\\' character, and user name.</span></span> <span data-ttu-id="46d8a-507">使用<xref:System.Environment.UserDomainName%2A>属性来获取用户的域名，无需用户名称和<xref:System.Environment.UserName%2A>属性来获取无需域名的用户名。</span><span class="sxs-lookup"><span data-stu-id="46d8a-507">Use the <xref:System.Environment.UserDomainName%2A> property to obtain the user's domain name without the user name, and the <xref:System.Environment.UserName%2A> property to obtain the user name without the domain name.</span></span>  <span data-ttu-id="46d8a-508">例如，如果用户的域名和用户名都 CORPORATENETWORK\john，<xref:System.Environment.UserDomainName%2A>属性返回"企业网络"。</span><span class="sxs-lookup"><span data-stu-id="46d8a-508">For example, if a user's domain name and user name are CORPORATENETWORK\john, the <xref:System.Environment.UserDomainName%2A> property returns "CORPORATENETWORK".</span></span>  
  
 <span data-ttu-id="46d8a-509"><xref:System.Environment.UserDomainName%2A>属性第一次尝试获取当前用户的 Windows 帐户名称的域名称组件。</span><span class="sxs-lookup"><span data-stu-id="46d8a-509">The <xref:System.Environment.UserDomainName%2A> property first attempts to get the domain name component of the Windows account name for the current user.</span></span> <span data-ttu-id="46d8a-510">如果该尝试失败，此属性尝试获取由提供的用户名相关联的域名<xref:System.Environment.UserName%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="46d8a-510">If that attempt fails, this property attempts to get the domain name associated with the user name provided by the <xref:System.Environment.UserName%2A> property.</span></span> <span data-ttu-id="46d8a-511">如果该尝试失败，因为主机计算机未加入域，则返回的主机计算机名。</span><span class="sxs-lookup"><span data-stu-id="46d8a-511">If that attempt fails because the host computer is not joined to a domain, then the host computer name is returned.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="46d8a-512">操作系统不支持检索网络域名。</span><span class="sxs-lookup"><span data-stu-id="46d8a-512">The operating system does not support retrieving the network domain name.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="46d8a-513">无法检索的网络域名。</span><span class="sxs-lookup"><span data-stu-id="46d8a-513">The network domain name cannot be retrieved.</span></span></exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission"><span data-ttu-id="46d8a-514">用于到 USERDOMAIN 环境变量的读访问。</span><span class="sxs-lookup"><span data-stu-id="46d8a-514">for read access to the USERDOMAIN environment variable.</span></span> <span data-ttu-id="46d8a-515">关联的枚举： <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="46d8a-515">Associated enumeration: <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /></span></span></permission>
        <altmember cref="P:System.Environment.UserName" />
      </Docs>
    </Member>
    <Member MemberName="UserInteractive">
      <MemberSignature Language="C#" Value="public static bool UserInteractive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool UserInteractive" />
      <MemberSignature Language="DocId" Value="P:System.Environment.UserInteractive" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UserInteractive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool UserInteractive { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="46d8a-516">获取一个值，用以指示当前进程是否在用户交互模式中运行。</span><span class="sxs-lookup"><span data-stu-id="46d8a-516">Gets a value indicating whether the current process is running in user interactive mode.</span></span></summary>
        <value>
          <span data-ttu-id="46d8a-517">如果当前进程在用户交互模式中运行，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="46d8a-517"><see langword="true" /> if the current process is running in user interactive mode; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46d8a-518"><xref:System.Environment.UserInteractive%2A>属性报表`false`Windows 进程或没有用户界面的情况下运行的 IIS 这样的服务。</span><span class="sxs-lookup"><span data-stu-id="46d8a-518">The <xref:System.Environment.UserInteractive%2A> property reports `false` for a Windows process or a service like IIS that runs without a user interface.</span></span> <span data-ttu-id="46d8a-519">如果此属性为`false`、 不显示模式对话框或消息框，因为没有图形用户界面与进行交互的用户。</span><span class="sxs-lookup"><span data-stu-id="46d8a-519">If this property is `false`, do not display modal dialogs or message boxes because there is no graphical user interface for the user to interact with.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46d8a-520">下面的示例显示当前进程是否正运行在用户交互模式中。</span><span class="sxs-lookup"><span data-stu-id="46d8a-520">The following example displays whether the current process is running in user interactive mode.</span></span>  
  
 [!code-cpp[Environment.UserInteractive#1](~/samples/snippets/cpp/VS_Snippets_CLR/Environment.UserInteractive/CPP/userinteractive.cpp#1)]
 [!code-csharp[Environment.UserInteractive#1](~/samples/snippets/csharp/VS_Snippets_CLR/Environment.UserInteractive/CS/userinteractive.cs#1)]
 [!code-vb[Environment.UserInteractive#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Environment.UserInteractive/VB/userinteractive.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.SystemInformation" />
      </Docs>
    </Member>
    <Member MemberName="UserName">
      <MemberSignature Language="C#" Value="public static string UserName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string UserName" />
      <MemberSignature Language="DocId" Value="P:System.Environment.UserName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UserName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ UserName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="46d8a-521">获取当前已登录到 Windows 操作系统的人员的用户名。</span><span class="sxs-lookup"><span data-stu-id="46d8a-521">Gets the user name of the person who is currently logged on to the Windows operating system.</span></span></summary>
        <value><span data-ttu-id="46d8a-522">已登录到 Windows 的人员的用户名。</span><span class="sxs-lookup"><span data-stu-id="46d8a-522">The user name of the person who is logged on to Windows.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46d8a-523">你可以使用<xref:System.Environment.UserName%2A>属性来标识当前线程，对系统和安全性或访问目的的应用程序上的用户。</span><span class="sxs-lookup"><span data-stu-id="46d8a-523">You can use the <xref:System.Environment.UserName%2A> property to identify the user on the current thread, to the system and application for security or access purposes.</span></span> <span data-ttu-id="46d8a-524">它还可以用于自定义每个用户特定的应用程序。</span><span class="sxs-lookup"><span data-stu-id="46d8a-524">It can also be used to customize a particular application for each user.</span></span>  
  
 <span data-ttu-id="46d8a-525"><xref:System.Environment.UserName%2A>属性包装对 Windows 的调用[GetUserName](http://msdn.microsoft.com/library/windows/desktop/ms724432.aspx)函数。</span><span class="sxs-lookup"><span data-stu-id="46d8a-525">The <xref:System.Environment.UserName%2A> property wraps a call to the Windows [GetUserName](http://msdn.microsoft.com/library/windows/desktop/ms724432.aspx) function.</span></span> <span data-ttu-id="46d8a-526">用户的域帐户凭据的格式设置为用户的域名称\\字符，并且用户名称。</span><span class="sxs-lookup"><span data-stu-id="46d8a-526">The domain account credentials for a user are formatted as the user's domain name, the '\\' character, and user name.</span></span> <span data-ttu-id="46d8a-527">使用<xref:System.Environment.UserDomainName%2A>属性来获取用户的域名和<xref:System.Environment.UserName%2A>属性来获取用户名称。</span><span class="sxs-lookup"><span data-stu-id="46d8a-527">Use the <xref:System.Environment.UserDomainName%2A> property to obtain the user's domain name and the <xref:System.Environment.UserName%2A> property to obtain the user name.</span></span>  
  
 <span data-ttu-id="46d8a-528">如果 ASP.NET 应用程序运行在开发环境中，<xref:System.Environment.UserName%2A>属性返回当前用户的名称。</span><span class="sxs-lookup"><span data-stu-id="46d8a-528">If an ASP.NET application runs in a development environment, the <xref:System.Environment.UserName%2A> property returns the name of the current user.</span></span> <span data-ttu-id="46d8a-529">在已发布的 ASP.NET 应用程序中，此属性返回的 （如默认应用程序池） 的应用程序池帐户的名称。</span><span class="sxs-lookup"><span data-stu-id="46d8a-529">In a published ASP.NET application, this property returns the name of the application pool account (such as Default AppPool).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46d8a-530">下面的示例显示启动当前线程的人员的用户名。</span><span class="sxs-lookup"><span data-stu-id="46d8a-530">The following example displays the user name of the person who started the current thread.</span></span>  
  
 [!code-cpp[Environment.UserName#1](~/samples/snippets/cpp/VS_Snippets_CLR/Environment.UserName/CPP/username.cpp#1)]
 [!code-csharp[Environment.UserName#1](~/samples/snippets/csharp/VS_Snippets_CLR/Environment.UserName/CS/username.cs#1)]
 [!code-vb[Environment.UserName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Environment.UserName/VB/username.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission"><span data-ttu-id="46d8a-531">用于到用户名环境变量的读访问。</span><span class="sxs-lookup"><span data-stu-id="46d8a-531">for read access to the USERNAME environment variable.</span></span> <span data-ttu-id="46d8a-532">关联的枚举： <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="46d8a-532">Associated enumeration: <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /></span></span></permission>
        <altmember cref="P:System.Environment.UserDomainName" />
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public static Version Version { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Version Version" />
      <MemberSignature Language="DocId" Value="P:System.Environment.Version" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Version As Version" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Version ^ Version { Version ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Version</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="46d8a-533">获取一个 <see cref="T:System.Version" /> 对象，该对象描述公共语言运行时的主版本、次版本、内部版本和修订号。</span><span class="sxs-lookup"><span data-stu-id="46d8a-533">Gets a <see cref="T:System.Version" /> object that describes the major, minor, build, and revision numbers of the common language runtime.</span></span></summary>
        <value><span data-ttu-id="46d8a-534">用于显示公共语言运行时版本的对象。</span><span class="sxs-lookup"><span data-stu-id="46d8a-534">An object that displays the version of the common language runtime.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="46d8a-535">对于 .NET Framework 版本 4、4.5、4.5.1 和 4.5.2，<xref:System.Environment.Version%2A?displayProperty=nameWithType> 属性返回字符串表现形式具有窗体 `4.0.30319.xxxxx` 的 <xref:System.Version> 对象。</span><span class="sxs-lookup"><span data-stu-id="46d8a-535">For the .NET Framework Versions 4, 4.5, 4.5.1, and 4.5.2, the <xref:System.Environment.Version%2A?displayProperty=nameWithType> property returns a <xref:System.Version> object whose string representation has the form `4.0.30319.xxxxx`.</span></span> <span data-ttu-id="46d8a-536">对于.NET Framework 4.6 和更高版本，它具有形式`4.0.30319.42000`。</span><span class="sxs-lookup"><span data-stu-id="46d8a-536">For the .NET Framework 4.6 and later versions, it has the form `4.0.30319.42000`.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="46d8a-537">有关[!INCLUDE[net_v45](~/includes/net-v45-md.md)]和更高版本，我们不建议使用<xref:System.Environment.Version%2A>属性要检测的版本的运行时; 相反，你可以通过查询注册表来确定公共语言运行时的版本。</span><span class="sxs-lookup"><span data-stu-id="46d8a-537">For the [!INCLUDE[net_v45](~/includes/net-v45-md.md)] and later, we do not recommend using the <xref:System.Environment.Version%2A> property to detect the version of the runtime; instead, you can determine the version of the common language runtime by querying the registry.</span></span> <span data-ttu-id="46d8a-538">有关详细信息，请参阅[如何： 确定安装哪些.NET Framework 版本是](~/docs/framework/migration-guide/how-to-determine-which-versions-are-installed.md)。</span><span class="sxs-lookup"><span data-stu-id="46d8a-538">For more information, see [How to: Determine Which .NET Framework Versions Are Installed](~/docs/framework/migration-guide/how-to-determine-which-versions-are-installed.md).</span></span>  
  
 <span data-ttu-id="46d8a-539">有关与每个版本的.NET Framework 一起安装的公共语言运行时版本的详细信息，请参阅[版本和依赖关系](~/docs/framework/migration-guide/versions-and-dependencies.md)。</span><span class="sxs-lookup"><span data-stu-id="46d8a-539">For more information about the version of the common language runtime that is installed with each version of the .NET Framework, see [Versions and Dependencies](~/docs/framework/migration-guide/versions-and-dependencies.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="46d8a-540">下面的示例显示公共语言运行时的版本。</span><span class="sxs-lookup"><span data-stu-id="46d8a-540">The following example displays the version of the common language runtime.</span></span> <span data-ttu-id="46d8a-541">（版本中省略出于安全原因，示例输出。）</span><span class="sxs-lookup"><span data-stu-id="46d8a-541">(The version is omitted from the example output for security reasons.)</span></span>  
  
 [!code-cpp[Environment.Version#1](~/samples/snippets/cpp/VS_Snippets_CLR/Environment.Version/CPP/version.cpp#1)]
 [!code-csharp[Environment.Version#1](~/samples/snippets/csharp/VS_Snippets_CLR/Environment.Version/CS/version.cs#1)]
 [!code-vb[Environment.Version#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Environment.Version/VB/version.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkingSet">
      <MemberSignature Language="C#" Value="public static long WorkingSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 WorkingSet" />
      <MemberSignature Language="DocId" Value="P:System.Environment.WorkingSet" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property WorkingSet As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property long WorkingSet { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="46d8a-542">获取映射到进程上下文的物理内存量。</span><span class="sxs-lookup"><span data-stu-id="46d8a-542">Gets the amount of physical memory mapped to the process context.</span></span></summary>
        <value><span data-ttu-id="46d8a-543">一个 64 位带符号整数，包含映射到进程上下文的物理内存字节的数目。</span><span class="sxs-lookup"><span data-stu-id="46d8a-543">A 64-bit signed integer containing the number of bytes of physical memory mapped to the process context.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="46d8a-544">下面的示例显示运行的代码示例的计算机的工作集的大小。</span><span class="sxs-lookup"><span data-stu-id="46d8a-544">The following example displays the size of the working set of the computer that runs the code example.</span></span>  
  
 [!code-cpp[Environment.WorkingSet#1](~/samples/snippets/cpp/VS_Snippets_CLR/Environment.WorkingSet/CPP/workingset.cpp#1)]
 [!code-csharp[Environment.WorkingSet#1](~/samples/snippets/csharp/VS_Snippets_CLR/Environment.WorkingSet/CS/workingset.cs#1)]
 [!code-vb[Environment.WorkingSet#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Environment.WorkingSet/VB/workingset.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission"><span data-ttu-id="46d8a-545">用于对受此权限的资源的完全访问。</span><span class="sxs-lookup"><span data-stu-id="46d8a-545">for full access to the resource protected by this permission.</span></span> <span data-ttu-id="46d8a-546">关联的枚举： <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span><span class="sxs-lookup"><span data-stu-id="46d8a-546">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></span></span></permission>
      </Docs>
    </Member>
  </Members>
</Type>