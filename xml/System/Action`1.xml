<Type Name="Action&lt;T&gt;" FullName="System.Action&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b667dcf79e5ae762a2e599fd337d51ceea34b2c7" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37482400" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void Action&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T)(obj As T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate void Action(T obj);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T&gt; = delegate of 'T -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="28fb8-101">此委托封装的方法的参数类型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="28fb8-101">The type of the parameter of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <param name="obj">
      <span data-ttu-id="28fb8-102">此委托封装的方法的参数。</span>
      <span class="sxs-lookup">
        <span data-stu-id="28fb8-102">The parameter of the method that this delegate encapsulates.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="28fb8-103">封装一个方法，该方法只有一个参数并且不返回值。</span>
      <span class="sxs-lookup">
        <span data-stu-id="28fb8-103">Encapsulates a method that has a single parameter and does not return a value.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="28fb8-104">可以使用<xref:System.Action%601>委托作为参数传递方法，而无需显式声明自定义委托。</span><span class="sxs-lookup"><span data-stu-id="28fb8-104">You can use the <xref:System.Action%601> delegate to pass a method as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="28fb8-105">封装的方法必须对应于此委托定义的方法签名。</span><span class="sxs-lookup"><span data-stu-id="28fb8-105">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="28fb8-106">这意味着，封装的方法必须具有按值传递给它的一个参数，并且不能返回值。</span><span class="sxs-lookup"><span data-stu-id="28fb8-106">This means that the encapsulated method must have one parameter that is passed to it by value, and it must not return a value.</span></span> <span data-ttu-id="28fb8-107">(在 C# 中，该方法必须返回`void`。</span><span class="sxs-lookup"><span data-stu-id="28fb8-107">(In C#, the method must return `void`.</span></span> <span data-ttu-id="28fb8-108">在 Visual Basic 中，它必须由定义`Sub`...`End Sub`</span><span class="sxs-lookup"><span data-stu-id="28fb8-108">In Visual Basic, it must be defined by the `Sub`…`End Sub`</span></span> <span data-ttu-id="28fb8-109">构造。</span><span class="sxs-lookup"><span data-stu-id="28fb8-109">construct.</span></span> <span data-ttu-id="28fb8-110">它也可以是返回一个值，则忽略该值的方法。）通常情况下，这种方法用于执行操作。</span><span class="sxs-lookup"><span data-stu-id="28fb8-110">It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="28fb8-111">若要引用的方法，具有一个参数并返回一个值，请使用泛型<xref:System.Func%602>改为委托。</span><span class="sxs-lookup"><span data-stu-id="28fb8-111">To reference a method that has one parameter and returns a value, use the generic <xref:System.Func%602> delegate instead.</span></span>  
  
 <span data-ttu-id="28fb8-112">当你使用<xref:System.Action%601>委托时，您无需显式定义用于封装具有单个参数的方法的委托。</span><span class="sxs-lookup"><span data-stu-id="28fb8-112">When you use the <xref:System.Action%601> delegate, you do not have to explicitly define a delegate that encapsulates a method with a single parameter.</span></span> <span data-ttu-id="28fb8-113">例如，下面的代码显式声明名为的委托`DisplayMessage`，并将分配到的引用<xref:System.Console.WriteLine%2A>方法或`ShowWindowsMessage`给其委托实例的方法。</span><span class="sxs-lookup"><span data-stu-id="28fb8-113">For example, the following code explicitly declares a delegate named `DisplayMessage` and assigns a reference to either the <xref:System.Console.WriteLine%2A> method or the `ShowWindowsMessage` method to its delegate instance.</span></span>  
  
 [!code-cpp[System.Action~1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/delegate.cpp#1)]
 [!code-csharp[System.Action~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Delegate.cs#1)]
 [!code-vb[System.Action~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="28fb8-114">下面的示例简化了此代码实例化<xref:System.Action%601>而不是显式定义一个新委托，并为其赋值命名的方法的委托。</span><span class="sxs-lookup"><span data-stu-id="28fb8-114">The following example simplifies this code by instantiating the <xref:System.Action%601> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-cpp[System.Action~1#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/action`1.cpp#2)]
 [!code-csharp[System.Action~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Action1.cs#2)]
 [!code-vb[System.Action~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Action1.vb#2)]  
  
 <span data-ttu-id="28fb8-115">此外可以使用<xref:System.Action%601>委托与匿名方法在 C# 中，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="28fb8-115">You can also use the <xref:System.Action%601> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="28fb8-116">(有关匿名方法的介绍，请参阅[匿名方法](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)。)</span><span class="sxs-lookup"><span data-stu-id="28fb8-116">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Action~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Anon.cs#3)]  
  
 <span data-ttu-id="28fb8-117">你还可以分配一个 lambda 表达式到<xref:System.Action%601>委托实例，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="28fb8-117">You can also assign a lambda expression to an <xref:System.Action%601> delegate instance, as the following example illustrates.</span></span> <span data-ttu-id="28fb8-118">(有关 lambda 表达式的简介，请参阅[Lambda 表达式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)。)</span><span class="sxs-lookup"><span data-stu-id="28fb8-118">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Action~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Lambda.cs#4)]
 [!code-vb[System.Action~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/lambda.vb#4)]  
  
 <span data-ttu-id="28fb8-119"><xref:System.Collections.Generic.List%601.ForEach%2A>并<xref:System.Array.ForEach%2A>每个方法均采用<xref:System.Action%601>委托作为参数。</span><span class="sxs-lookup"><span data-stu-id="28fb8-119">The <xref:System.Collections.Generic.List%601.ForEach%2A> and <xref:System.Array.ForEach%2A> methods each take an <xref:System.Action%601> delegate as a parameter.</span></span> <span data-ttu-id="28fb8-120">由委托封装的方法，可对数组或列表中的每个元素执行操作。</span><span class="sxs-lookup"><span data-stu-id="28fb8-120">The method encapsulated by the delegate allows you to perform an action on each element in the array or list.</span></span> <span data-ttu-id="28fb8-121">该示例使用<xref:System.Collections.Generic.List%601.ForEach%2A>方法来提供演示。</span><span class="sxs-lookup"><span data-stu-id="28fb8-121">The example uses the <xref:System.Collections.Generic.List%601.ForEach%2A> method to provide an illustration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="28fb8-122">下面的示例演示如何将<xref:System.Action%601>要打印的内容委托<xref:System.Collections.Generic.List%601>对象。</span><span class="sxs-lookup"><span data-stu-id="28fb8-122">The following example demonstrates the use of the <xref:System.Action%601> delegate to print the contents of a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="28fb8-123">在此示例中，`Print`方法用于向控制台显示列表的内容。</span><span class="sxs-lookup"><span data-stu-id="28fb8-123">In this example, the `Print` method is used to display the contents of the list to the console.</span></span> <span data-ttu-id="28fb8-124">此外，C# 示例还演示如何使用匿名方法来将内容显示到控制台。</span><span class="sxs-lookup"><span data-stu-id="28fb8-124">In addition, the C# example also demonstrates the use of anonymous methods to display the contents to the console.</span></span> <span data-ttu-id="28fb8-125">请注意，该示例不显式声明<xref:System.Action%601>变量。</span><span class="sxs-lookup"><span data-stu-id="28fb8-125">Note that the example does not explicitly declare an <xref:System.Action%601> variable.</span></span> <span data-ttu-id="28fb8-126">相反，它将传递到方法采用单个参数和与未返回到的值的引用<xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType>方法，其单个参数是<xref:System.Action%601>委托。</span><span class="sxs-lookup"><span data-stu-id="28fb8-126">Instead, it passes a reference to a method that takes a single parameter and that does not return a value to the <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> method, whose single parameter is an <xref:System.Action%601> delegate.</span></span> <span data-ttu-id="28fb8-127">同样，在 C# 示例中，<xref:System.Action%601>委托不显式实例化，因为匿名方法的签名匹配的签名<xref:System.Action%601>委托所需的<xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="28fb8-127">Similarly, in the C# example, an <xref:System.Action%601> delegate is not explicitly instantiated because the signature of the anonymous method matches the signature of the <xref:System.Action%601> delegate that is expected by the <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.Action_PrintExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]
 [!code-vb[System.Action_PrintExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`2" />
  </Docs>
</Type>