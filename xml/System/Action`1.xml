<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Action`1.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b5133ca4077102df8d9cecd009e0fc6e9c6b4bf0.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b5133ca4077102df8d9cecd009e0fc6e9c6b4bf0</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Action`1">
          <source>The type of the parameter of the method that this delegate encapsulates.</source>
          <target state="translated">此委托封装的方法的参数类型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Action`1">
          <source>The parameter of the method that this delegate encapsulates.</source>
          <target state="translated">此委托封装的方法的参数。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Action`1">
          <source>Encapsulates a method that has a single parameter and does not return a value.</source>
          <target state="translated">封装一个方法，该方法只有一个参数并且不返回值。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Action`1">
          <source>You can use the <ph id="ph1">&lt;xref:System.Action%601&gt;</ph> delegate to pass a method as a parameter without explicitly declaring a custom delegate.</source>
          <target state="translated">你可以使用<ph id="ph1">&lt;xref:System.Action%601&gt;</ph>委托作为参数传递方法，而不用显式声明自定义委托。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Action`1">
          <source>The encapsulated method must correspond to the method signature that is defined by this delegate.</source>
          <target state="translated">封装的方法必须对应于此委托定义方法签名。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Action`1">
          <source>This means that the encapsulated method must have one parameter that is passed to it by value, and it must not return a value.</source>
          <target state="translated">这意味着，封装的方法必须具有按值传递给它的一个参数并且不能返回值。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Action`1">
          <source>(In C#, the method must return <ph id="ph1">`void`</ph>.</source>
          <target state="translated">(在 C# 中，该方法必须返回<ph id="ph1">`void`</ph>。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Action`1">
          <source>In Visual Basic, it must be defined by the <ph id="ph1">`Sub`</ph>…<ph id="ph2">`End Sub`</ph></source>
          <target state="translated">在 Visual Basic 中，它必须由定义<ph id="ph1">`Sub`</ph>...<ph id="ph2">`End Sub`</ph></target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Action`1">
          <source>construct.</source>
          <target state="translated">构造。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Action`1">
          <source>It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation.</source>
          <target state="translated">它还可返回一个值，将被忽略的方法。）通常，这种方法用于执行操作。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Action`1">
          <source>To reference a method that has one parameter and returns a value, use the generic <ph id="ph1">&lt;xref:System.Func%602&gt;</ph> delegate instead.</source>
          <target state="translated">若要引用的方法，具有一个参数并返回一个值，使用泛型<ph id="ph1">&lt;xref:System.Func%602&gt;</ph>委托。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Action`1">
          <source>When you use the <ph id="ph1">&lt;xref:System.Action%601&gt;</ph> delegate, you do not have to explicitly define a delegate that encapsulates a method with a single parameter.</source>
          <target state="translated">当你使用<ph id="ph1">&lt;xref:System.Action%601&gt;</ph>委托，则不需要显式定义委托，用于封装具有单个参数的方法。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Action`1">
          <source>For example, the following code explicitly declares a delegate named <ph id="ph1">`DisplayMessage`</ph> and assigns a reference to either the <ph id="ph2">&lt;xref:System.Console.WriteLine%2A&gt;</ph> method or the <ph id="ph3">`ShowWindowsMessage`</ph> method to its delegate instance.</source>
          <target state="translated">例如，下面的代码显式声明一个名为的委托<ph id="ph1">`DisplayMessage`</ph>并将分配到的引用<ph id="ph2">&lt;xref:System.Console.WriteLine%2A&gt;</ph>方法或<ph id="ph3">`ShowWindowsMessage`</ph>给其委托实例的方法。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Action`1">
          <source>The following example simplifies this code by instantiating the <ph id="ph1">&lt;xref:System.Action%601&gt;</ph> delegate instead of explicitly defining a new delegate and assigning a named method to it.</source>
          <target state="translated">下面的示例简化了此代码实例化<ph id="ph1">&lt;xref:System.Action%601&gt;</ph>而不是显式定义新的委托，并向其分配指定的方法的委托。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Action`1">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Action%601&gt;</ph> delegate with anonymous methods in C#, as the following example illustrates.</source>
          <target state="translated">你还可以使用<ph id="ph1">&lt;xref:System.Action%601&gt;</ph>委托与 C# 中的匿名方法，如下面的示例所示。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Action`1">
          <source>(For an introduction to anonymous methods, see <bpt id="p1">[</bpt>Anonymous Methods<ept id="p1">](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept>.)</source>
          <target state="translated">(有关匿名方法的简介，请参阅<bpt id="p1">[</bpt>匿名方法<ept id="p1">](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept>。)</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Action`1">
          <source>You can also assign a lambda expression to an <ph id="ph1">&lt;xref:System.Action%601&gt;</ph> delegate instance, as the following example illustrates.</source>
          <target state="translated">你还可以分配到 lambda 表达式<ph id="ph1">&lt;xref:System.Action%601&gt;</ph>委托实例，如下面的示例所示。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Action`1">
          <source>(For an introduction to lambda expressions, see <bpt id="p1">[</bpt>Lambda Expressions<ept id="p1">](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>.)</source>
          <target state="translated">(有关 lambda 表达式的简介，请参阅<bpt id="p1">[</bpt>Lambda 表达式<ept id="p1">](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>。)</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Action`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.ForEach%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Array.ForEach%2A&gt;</ph> methods each take an <ph id="ph3">&lt;xref:System.Action%601&gt;</ph> delegate as a parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.List%601.ForEach%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Array.ForEach%2A&gt;</ph>方法都采用<ph id="ph3">&lt;xref:System.Action%601&gt;</ph>委托作为一个参数。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Action`1">
          <source>The method encapsulated by the delegate allows you to perform an action on each element in the array or list.</source>
          <target state="translated">由委托封装的方法，可对数组或列表中每个元素执行操作。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Action`1">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.ForEach%2A&gt;</ph> method to provide an illustration.</source>
          <target state="translated">该示例使用<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.ForEach%2A&gt;</ph>方法以提供方面的演示。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Action`1">
          <source>The following example demonstrates the use of the <ph id="ph1">&lt;xref:System.Action%601&gt;</ph> delegate to print the contents of a <ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object.</source>
          <target state="translated">下面的示例演示了利用<ph id="ph1">&lt;xref:System.Action%601&gt;</ph>要打印的内容委托<ph id="ph2">&lt;xref:System.Collections.Generic.List%601&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Action`1">
          <source>In this example, the <ph id="ph1">`Print`</ph> method is used to display the contents of the list to the console.</source>
          <target state="translated">在此示例中，<ph id="ph1">`Print`</ph>方法用于向控制台显示列表的内容。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Action`1">
          <source>In addition, the C# example also demonstrates the use of anonymous methods to display the contents to the console.</source>
          <target state="translated">此外，C# 示例还演示使用匿名方法向控制台显示的内容。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Action`1">
          <source>Note that the example does not explicitly declare an <ph id="ph1">&lt;xref:System.Action%601&gt;</ph> variable.</source>
          <target state="translated">请注意，该示例不显式声明<ph id="ph1">&lt;xref:System.Action%601&gt;</ph>变量。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Action`1">
          <source>Instead, it passes a reference to a method that takes a single parameter and that does not return a value to the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType&gt;</ph> method, whose single parameter is an <ph id="ph2">&lt;xref:System.Action%601&gt;</ph> delegate.</source>
          <target state="translated">相反，它将引用传递到的方法，它采用单个参数，并且它们将返回到的值不返回<ph id="ph1">&lt;xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType&gt;</ph>方法，其单个参数是<ph id="ph2">&lt;xref:System.Action%601&gt;</ph>委托。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Action`1">
          <source>Similarly, in the C# example, an <ph id="ph1">&lt;xref:System.Action%601&gt;</ph> delegate is not explicitly instantiated because the signature of the anonymous method matches the signature of the <ph id="ph2">&lt;xref:System.Action%601&gt;</ph> delegate that is expected by the <ph id="ph3">&lt;xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">同样，在 C# 示例中，<ph id="ph1">&lt;xref:System.Action%601&gt;</ph>委托不显式实例化，因为匿名方法的签名的签名匹配<ph id="ph2">&lt;xref:System.Action%601&gt;</ph>预期的委托<ph id="ph3">&lt;xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>