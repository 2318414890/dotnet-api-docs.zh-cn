<Type Name="Action&lt;T&gt;" FullName="System.Action&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dd092c3c61377edf68a48487d8fa19cd17b06d55" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36433882" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void Action&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T)(obj As T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate void Action(T obj);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T&gt; = delegate of 'T -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">此委托封装的方法的参数类型。</typeparam>
    <param name="obj">此委托封装的方法的参数。</param>
    <summary>封装一个方法，该方法只有一个参数并且不返回值。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用<xref:System.Action%601>委托作为参数传递方法，而不用显式声明自定义委托。 封装的方法必须对应于此委托定义方法签名。 这意味着，封装的方法必须具有按值传递给它的一个参数并且不能返回值。 (在 C# 中，该方法必须返回`void`。 在 Visual Basic 中，它必须由定义`Sub`...`End Sub` 构造。 它还可返回一个值，将被忽略的方法。）通常，这种方法用于执行操作。  
  
> [!NOTE]
>  若要引用的方法，具有一个参数并返回一个值，使用泛型<xref:System.Func%602>委托。  
  
 当你使用<xref:System.Action%601>委托，则不需要显式定义委托，用于封装具有单个参数的方法。 例如，下面的代码显式声明一个名为的委托`DisplayMessage`并将分配到的引用<xref:System.Console.WriteLine%2A>方法或`ShowWindowsMessage`给其委托实例的方法。  
  
 [!code-cpp[System.Action~1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/delegate.cpp#1)]
 [!code-csharp[System.Action~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Delegate.cs#1)]
 [!code-vb[System.Action~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Delegate.vb#1)]  
  
 下面的示例简化了此代码实例化<xref:System.Action%601>而不是显式定义新的委托，并向其分配指定的方法的委托。  
  
 [!code-cpp[System.Action~1#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/action`1.cpp#2)]
 [!code-csharp[System.Action~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Action1.cs#2)]
 [!code-vb[System.Action~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Action1.vb#2)]  
  
 你还可以使用<xref:System.Action%601>委托与 C# 中的匿名方法，如下面的示例所示。 (有关匿名方法的简介，请参阅[匿名方法](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)。)  
  
 [!code-csharp[System.Action~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Anon.cs#3)]  
  
 你还可以分配到 lambda 表达式<xref:System.Action%601>委托实例，如下面的示例所示。 (有关 lambda 表达式的简介，请参阅[Lambda 表达式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)。)  
  
 [!code-csharp[System.Action~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Lambda.cs#4)]
 [!code-vb[System.Action~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/lambda.vb#4)]  
  
 <xref:System.Collections.Generic.List%601.ForEach%2A>和<xref:System.Array.ForEach%2A>方法都采用<xref:System.Action%601>委托作为一个参数。 由委托封装的方法，可对数组或列表中每个元素执行操作。 该示例使用<xref:System.Collections.Generic.List%601.ForEach%2A>方法以提供方面的演示。  
  
   
  
## Examples  
 下面的示例演示了利用<xref:System.Action%601>要打印的内容委托<xref:System.Collections.Generic.List%601>对象。 在此示例中，`Print`方法用于向控制台显示列表的内容。 此外，C# 示例还演示使用匿名方法向控制台显示的内容。 请注意，该示例不显式声明<xref:System.Action%601>变量。 相反，它将引用传递到的方法，它采用单个参数，并且它们将返回到的值不返回<xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType>方法，其单个参数是<xref:System.Action%601>委托。 同样，在 C# 示例中，<xref:System.Action%601>委托不显式实例化，因为匿名方法的签名的签名匹配<xref:System.Action%601>预期的委托<xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType>方法。  
  
 [!code-csharp[System.Action_PrintExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]
 [!code-vb[System.Action_PrintExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`2" />
  </Docs>
</Type>