<Type Name="Object" FullName="System.Object">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="541af8485b08c84b2be0fd08e48a22d8881ee936" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit object" />
  <TypeSignature Language="DocId" Value="T:System.Object" />
  <TypeSignature Language="VB.NET" Value="Public Class Object" />
  <TypeSignature Language="C++ CLI" Value="public ref class Object" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="ad78b-101">支持 .NET Framework 类层次结构中的所有类，并为派生类提供低级别服务。</span>
      <span class="sxs-lookup">
        <span data-stu-id="ad78b-101">Supports all classes in the .NET Framework class hierarchy and provides low-level services to derived classes.</span>
      </span>
      <span data-ttu-id="ad78b-102">这是 .NET Framework 中所有类的最终基类；它是类型层次结构的根。</span>
      <span class="sxs-lookup">
        <span data-stu-id="ad78b-102">This is the ultimate base class of all classes in the .NET Framework; it is the root of the type hierarchy.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad78b-103">语言通常不需要类来声明从继承<xref:System.Object>因为继承是隐式。</span><span class="sxs-lookup"><span data-stu-id="ad78b-103">Languages typically do not require a class to declare inheritance from <xref:System.Object> because the inheritance is implicit.</span></span>  
  
 <span data-ttu-id="ad78b-104">因为.NET Framework 中的所有类都派生自<xref:System.Object>中, 定义的每个方法<xref:System.Object>类是可用于所有对象系统中。</span><span class="sxs-lookup"><span data-stu-id="ad78b-104">Because all classes in the .NET Framework are derived from <xref:System.Object>, every method defined in the <xref:System.Object> class is available in all objects in the system.</span></span> <span data-ttu-id="ad78b-105">派生类可以和重写其中的某些方法，包括：</span><span class="sxs-lookup"><span data-stu-id="ad78b-105">Derived classes can and do override some of these methods, including:</span></span>  
  
-   <span data-ttu-id="ad78b-106"><xref:System.Object.Equals%2A> -支持对象之间的比较。</span><span class="sxs-lookup"><span data-stu-id="ad78b-106"><xref:System.Object.Equals%2A> - Supports comparisons between objects.</span></span>  
  
-   <span data-ttu-id="ad78b-107"><xref:System.Object.Finalize%2A> -在对象被自动回收之前，请执行清理操作。</span><span class="sxs-lookup"><span data-stu-id="ad78b-107"><xref:System.Object.Finalize%2A> - Performs cleanup operations before an object is automatically reclaimed.</span></span>  
  
-   <span data-ttu-id="ad78b-108"><xref:System.Object.GetHashCode%2A> -生成与对象的值对应一个数字，以支持使用哈希表。</span><span class="sxs-lookup"><span data-stu-id="ad78b-108"><xref:System.Object.GetHashCode%2A> - Generates a number corresponding to the value of the object to support the use of a hash table.</span></span>  
  
-   <span data-ttu-id="ad78b-109"><xref:System.Object.ToString%2A> — 生成描述类的实例的用户可读文本字符串。</span><span class="sxs-lookup"><span data-stu-id="ad78b-109"><xref:System.Object.ToString%2A> - Manufactures a human-readable text string that describes an instance of the class.</span></span>  
  
## <a name="performance-considerations"></a><span data-ttu-id="ad78b-110">性能注意事项</span><span class="sxs-lookup"><span data-stu-id="ad78b-110">Performance Considerations</span></span>  
 <span data-ttu-id="ad78b-111">如果您正在设计的类，如的集合，必须在处理任何类型的对象，你可以创建接受的实例的类成员<xref:System.Object>类。</span><span class="sxs-lookup"><span data-stu-id="ad78b-111">If you are designing a class, such as a collection, that must handle any type of object, you can create class members that accept instances of the <xref:System.Object> class.</span></span> <span data-ttu-id="ad78b-112">但是，装箱和取消装箱类型的过程会带来的性能开销。</span><span class="sxs-lookup"><span data-stu-id="ad78b-112">However, the process of boxing and unboxing a type carries a performance cost.</span></span> <span data-ttu-id="ad78b-113">如果你知道新类将经常处理某些值类型可以使用两个策略之一装箱的成本降到最低。</span><span class="sxs-lookup"><span data-stu-id="ad78b-113">If you know your new class will frequently handle certain value types you can use one of two tactics to minimize the cost of boxing.</span></span>  
  
-   <span data-ttu-id="ad78b-114">创建接受的常规方法<xref:System.Object>类型，以及接受希望你的类以经常处理每个值类型的特定类型的方法重载的一组。</span><span class="sxs-lookup"><span data-stu-id="ad78b-114">Create a general method that accepts an <xref:System.Object> type, and a set of type-specific method overloads that accept each value type you expect your class to frequently handle.</span></span> <span data-ttu-id="ad78b-115">如果特定类型的方法存在，以接受调用的参数类型，没有值类型装箱发生，并且会调用特定类型的方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-115">If a type-specific method exists that accepts the calling parameter type, no boxing occurs and the type-specific method is invoked.</span></span> <span data-ttu-id="ad78b-116">如果没有任何与调用的参数类型匹配的方法自变量，该参数进行装箱，并调用常规方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-116">If there is no method argument that matches the calling parameter type, the parameter is boxed and the general method is invoked.</span></span>  
  
-   <span data-ttu-id="ad78b-117">设计你的类型和其成员来使用泛型。</span><span class="sxs-lookup"><span data-stu-id="ad78b-117">Design your type and its members to use generics.</span></span> <span data-ttu-id="ad78b-118">在创建您的类的实例和指定泛型类型参数时，公共语言运行时创建封闭式泛型类型。</span><span class="sxs-lookup"><span data-stu-id="ad78b-118">The common language runtime creates a closed generic type when you create an instance of your class and specify a generic type argument.</span></span> <span data-ttu-id="ad78b-119">泛型方法是特定类型和可以调用而无需装箱调用的参数。</span><span class="sxs-lookup"><span data-stu-id="ad78b-119">The generic method is type-specific and can be invoked without boxing the calling parameter.</span></span>  
  
 <span data-ttu-id="ad78b-120">尽管，有时需要开发通用类，接受并返回<xref:System.Object>类型，通过提供特定类型的类来处理常用的类型上，你可以提高性能。</span><span class="sxs-lookup"><span data-stu-id="ad78b-120">Although it is sometimes necessary to develop general purpose classes that accept and return <xref:System.Object> types, you can improve performance by also providing a type-specific class to handle a frequently used type.</span></span> <span data-ttu-id="ad78b-121">例如，提供特定于设置和获取布尔值的类消除了装箱和取消装箱的布尔值的成本。</span><span class="sxs-lookup"><span data-stu-id="ad78b-121">For example, providing a class that is specific to setting and getting Boolean values eliminates the cost of boxing and unboxing Boolean values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad78b-122">下面的示例定义一个派生自类型<xref:System.Object>类并重写的虚方法的多种<xref:System.Object>类。</span><span class="sxs-lookup"><span data-stu-id="ad78b-122">The following example defines a Point type derived from the <xref:System.Object> class and overrides many of the virtual methods of the <xref:System.Object> class.</span></span> <span data-ttu-id="ad78b-123">此外，该示例演示如何调用许多静态和实例方法的<xref:System.Object>类。</span><span class="sxs-lookup"><span data-stu-id="ad78b-123">In addition, the example shows how to call many of the static and instance methods of the <xref:System.Object> class.</span></span>  
  
 [!code-cpp[ObjectX#1](~/samples/snippets/cpp/VS_Snippets_CLR/ObjectX/cpp/ObjectX.cpp#1)]
 [!code-csharp[ObjectX#1](~/samples/snippets/csharp/VS_Snippets_CLR/ObjectX/CS/ObjectX.cs#1)]
 [!code-vb[ObjectX#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ObjectX/vb/objectX.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="ad78b-124">公共静态 (<see langword="Shared" />在 Visual Basic 中) 的此类型的成员都是线程安全。</span>
      <span class="sxs-lookup">
        <span data-stu-id="ad78b-124">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span>
      </span>
      <span data-ttu-id="ad78b-125">不保证实例成员都是线程安全。</span>
      <span class="sxs-lookup">
        <span data-stu-id="ad78b-125">Instance members are not guaranteed to be thread-safe.</span>
      </span>
    </threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Object ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Object();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ad78b-126">初始化 <see cref="T:System.Object" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad78b-126">Initializes a new instance of the <see cref="T:System.Object" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad78b-127">在派生类中，构造函数将调用此构造函数，但它还可以用于直接创建的实例<xref:System.Object>类。</span><span class="sxs-lookup"><span data-stu-id="ad78b-127">This constructor is called by constructors in derived classes, but it can also be used to directly create an instance of the <xref:System.Object> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ad78b-128">确定两个对象实例是否相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad78b-128">Determines whether two object instances are equal.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public virtual bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="ad78b-129">要与当前对象进行比较的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad78b-129">The object to compare with the current object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad78b-130">确定指定的对象是否等于当前对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad78b-130">Determines whether the specified object is equal to the current object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ad78b-131">如果指定的对象等于当前对象，则为 <see langword="true" />，否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad78b-131">
              <see langword="true" /> if the specified object  is equal to the current object; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad78b-132">当前实例进行比较的类型和`obj`参数取决于当前实例是否为引用类型或值类型。</span><span class="sxs-lookup"><span data-stu-id="ad78b-132">The type of comparison between the current instance and the `obj` parameter depends on whether the current instance is a reference type or a value type.</span></span>  
  
-   <span data-ttu-id="ad78b-133">如果当前实例是引用类型，<xref:System.Object.Equals%28System.Object%29>方法测试引用相等性，并调用<xref:System.Object.Equals%28System.Object%29>方法等效于调用<xref:System.Object.ReferenceEquals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-133">If the current instance is a reference type, the <xref:System.Object.Equals%28System.Object%29> method tests for reference equality, and a call to the <xref:System.Object.Equals%28System.Object%29> method is equivalent to a call to the <xref:System.Object.ReferenceEquals%2A> method.</span></span> <span data-ttu-id="ad78b-134">引用相等性意味着进行比较的对象变量引用同一个对象。</span><span class="sxs-lookup"><span data-stu-id="ad78b-134">Reference equality means that the object variables that are compared refer to the same object.</span></span> <span data-ttu-id="ad78b-135">下面的示例阐释了这种比较的结果。</span><span class="sxs-lookup"><span data-stu-id="ad78b-135">The following example illustrates the result of such a comparison.</span></span> <span data-ttu-id="ad78b-136">它定义`Person`类，该类是引用类型，并调用`Person`类构造函数来实例化两个新`Person`对象，`person1a`和`person2`，其中具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="ad78b-136">It defines a `Person` class, which is a reference type, and calls the `Person` class constructor to instantiate two new `Person` objects, `person1a` and `person2`, which have the same value.</span></span> <span data-ttu-id="ad78b-137">它还会将分配`person1a`给另一个对象变量， `person1b`。</span><span class="sxs-lookup"><span data-stu-id="ad78b-137">It also assigns `person1a` to another object variable, `person1b`.</span></span> <span data-ttu-id="ad78b-138">如示例所示，输出`person1a`和`person1b`由于它们都引用同一个对象是否相等。</span><span class="sxs-lookup"><span data-stu-id="ad78b-138">As the output from the example shows, `person1a` and `person1b` are equal because they reference the same object.</span></span> <span data-ttu-id="ad78b-139">但是，`person1a`和`person2`是否不相等，尽管它们具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="ad78b-139">However, `person1a` and `person2` are not equal, although they have the same value.</span></span>  
  
     [!code-csharp[System.Object.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.equals/cs/equals_ref.cs#2)]
     [!code-vb[System.Object.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.equals/vb/equals_ref.vb#2)]  
  
-   <span data-ttu-id="ad78b-140">如果当前实例是值类型，<xref:System.Object.Equals%28System.Object%29>方法测试值是否相等。</span><span class="sxs-lookup"><span data-stu-id="ad78b-140">If the current instance is a value type, the <xref:System.Object.Equals%28System.Object%29> method tests for value equality.</span></span> <span data-ttu-id="ad78b-141">值相等性意味着：</span><span class="sxs-lookup"><span data-stu-id="ad78b-141">Value equality means the following:</span></span>  
  
    -   <span data-ttu-id="ad78b-142">两个对象均为相同的类型。</span><span class="sxs-lookup"><span data-stu-id="ad78b-142">The two objects are of the same type.</span></span> <span data-ttu-id="ad78b-143">如下面的示例所示，<xref:System.Byte>的值为 12 的对象不等于<xref:System.Int32>具有其值为 12，因为两个对象具有不同的运行时类型的对象。</span><span class="sxs-lookup"><span data-stu-id="ad78b-143">As the following example shows, a <xref:System.Byte> object that has a value of 12 does not equal an <xref:System.Int32> object that has a value of 12, because the two objects have different run-time types.</span></span>  
  
         [!code-csharp[System.Object.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.equals/cs/equals_val1.cs#3)]
         [!code-vb[System.Object.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.equals/vb/equals_val1.vb#3)]  
  
    -   <span data-ttu-id="ad78b-144">两个对象的公共和私有字段的值相等。</span><span class="sxs-lookup"><span data-stu-id="ad78b-144">The values of the public and private fields of the two objects are equal.</span></span> <span data-ttu-id="ad78b-145">下面的示例测试的值相等。</span><span class="sxs-lookup"><span data-stu-id="ad78b-145">The following example tests for value equality.</span></span> <span data-ttu-id="ad78b-146">它定义`Person`结构，这是值类型，并调用`Person`类构造函数来实例化两个新`Person`对象，`person1`和`person2`，其中具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="ad78b-146">It defines a `Person` structure, which is a value type, and calls the `Person` class constructor to instantiate two new `Person` objects, `person1` and `person2`, which have the same value.</span></span> <span data-ttu-id="ad78b-147">如示例输出所示，虽然两个对象变量引用不同的对象，但`person1`和`person2`是否相等的因为它们具有相同的值为私有`personName`字段。</span><span class="sxs-lookup"><span data-stu-id="ad78b-147">As the output from the example shows, although the two object variables refer to different objects, `person1` and `person2` are equal because they have the same value for the private `personName` field.</span></span>  
  
         [!code-csharp[System.Object.Equals#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.equals/cs/equals_val2.cs#4)]
         [!code-vb[System.Object.Equals#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.equals/vb/equals_val2.vb#4)]  
  
 <span data-ttu-id="ad78b-148">因为<xref:System.Object>类是.NET Framework 中的所有类型的基类<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>方法提供对于所有其他类型的默认相等比较。</span><span class="sxs-lookup"><span data-stu-id="ad78b-148">Because the <xref:System.Object> class is the base class for all types in the .NET Framework, the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method provides the default equality comparison for all other types.</span></span> <span data-ttu-id="ad78b-149">但是，类型通常替代<xref:System.Object.Equals%2A>方法来实现值是否相等。</span><span class="sxs-lookup"><span data-stu-id="ad78b-149">However, types often override the <xref:System.Object.Equals%2A> method to implement value equality.</span></span> <span data-ttu-id="ad78b-150">有关详细信息，请参阅说明调用方和说明的继承者节。</span><span class="sxs-lookup"><span data-stu-id="ad78b-150">For more information, see the Notes for Callers and Notes for Inheritors sections.</span></span>  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a><span data-ttu-id="ad78b-151">说明 [!INCLUDE[wrt](~/includes/wrt-md.md)]</span><span class="sxs-lookup"><span data-stu-id="ad78b-151">Notes for the [!INCLUDE[wrt](~/includes/wrt-md.md)]</span></span>  
 <span data-ttu-id="ad78b-152">当调用<xref:System.Object.Equals%28System.Object%29>中的类上的方法重载[!INCLUDE[wrt](~/includes/wrt-md.md)]，它不会覆盖的类提供的默认行为<xref:System.Object.Equals%28System.Object%29>。</span><span class="sxs-lookup"><span data-stu-id="ad78b-152">When you call the <xref:System.Object.Equals%28System.Object%29> method overload on a class in the [!INCLUDE[wrt](~/includes/wrt-md.md)], it provides the default behavior for classes that don’t override <xref:System.Object.Equals%28System.Object%29>.</span></span> <span data-ttu-id="ad78b-153">这是.NET Framework 提供的支持的一部分[!INCLUDE[wrt](~/includes/wrt-md.md)](请参阅[.NET Framework 支持为 Windows 应用商店应用和 Windows 运行时](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md))。</span><span class="sxs-lookup"><span data-stu-id="ad78b-153">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> <span data-ttu-id="ad78b-154">中的类[!INCLUDE[wrt](~/includes/wrt-md.md)]不继承<xref:System.Object>，并且不要实施<xref:System.Object.Equals%28System.Object%29>方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-154">Classes in the [!INCLUDE[wrt](~/includes/wrt-md.md)] don’t inherit <xref:System.Object>, and currently don’t implement an <xref:System.Object.Equals%28System.Object%29> method.</span></span> <span data-ttu-id="ad78b-155">但是，它们会显示为具有<xref:System.Object.ToString%2A>， <xref:System.Object.Equals%28System.Object%29>，和<xref:System.Object.GetHashCode%2A>方法在 C# 或 Visual Basic 代码中，使用它们以及.NET Framework 为这些方法提供的默认行为时。</span><span class="sxs-lookup"><span data-stu-id="ad78b-155">However, they appear to have <xref:System.Object.ToString%2A>, <xref:System.Object.Equals%28System.Object%29>, and <xref:System.Object.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</span></span>  
  
> [!NOTE]
>  [!INCLUDE[wrt](~/includes/wrt-md.md)]<span data-ttu-id="ad78b-156"> 用 C# 或 Visual Basic 编写的类可以重写<xref:System.Object.Equals%28System.Object%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="ad78b-156"> classes that are written in C# or Visual Basic can override the <xref:System.Object.Equals%28System.Object%29> method overload.</span></span>  
  
## <a name="notes-for-callers"></a><span data-ttu-id="ad78b-157">调用方的说明</span><span class="sxs-lookup"><span data-stu-id="ad78b-157">Notes for Callers</span></span>  
 <span data-ttu-id="ad78b-158">经常重写派生的类<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>方法来实现值是否相等。</span><span class="sxs-lookup"><span data-stu-id="ad78b-158">Derived classes frequently override the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method to implement value equality.</span></span> <span data-ttu-id="ad78b-159">此外，类型也经常提供到另一个强类型的重载`Equals`方法，通常通过实现<xref:System.IEquatable%601>接口。</span><span class="sxs-lookup"><span data-stu-id="ad78b-159">In addition, types also frequently provide an additional strongly typed overload to the `Equals` method, typically by implementing the <xref:System.IEquatable%601> interface.</span></span> <span data-ttu-id="ad78b-160">当调用`Equals`方法来测试相等性，你应知道的当前实例是否替代<xref:System.Object.Equals%2A?displayProperty=nameWithType>并了解如何对特定调用`Equals`方法处于已解决状态。</span><span class="sxs-lookup"><span data-stu-id="ad78b-160">When you call the `Equals` method to test for equality, you should know whether the current instance overrides <xref:System.Object.Equals%2A?displayProperty=nameWithType> and understand how a particular call to an `Equals` method is resolved.</span></span> <span data-ttu-id="ad78b-161">否则为你可能不同于你预期的相等性执行测试，并且该方法可能返回了意外的值。</span><span class="sxs-lookup"><span data-stu-id="ad78b-161">Otherwise, you may be performing a test for equality that is different from what you intended, and the method may return an unexpected value.</span></span>  
  
 <span data-ttu-id="ad78b-162">下面的示例进行了这方面的演示。</span><span class="sxs-lookup"><span data-stu-id="ad78b-162">The following example provides an illustration.</span></span> <span data-ttu-id="ad78b-163">它实例化三个<xref:System.Text.StringBuilder>使用相同的字符串对象，然后在将四个调用`Equals`方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-163">It instantiates three <xref:System.Text.StringBuilder> objects with identical strings, and then makes four calls to `Equals` methods.</span></span> <span data-ttu-id="ad78b-164">第一种方法调用返回`true`，和剩余的三个返回`false`。</span><span class="sxs-lookup"><span data-stu-id="ad78b-164">The first method call returns `true`, and the remaining three return `false`.</span></span>  
  
 [!code-csharp[System.Object.Equals#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.equals/cs/equalssb1.cs#5)]
 [!code-vb[System.Object.Equals#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.equals/vb/equalssb1.vb#5)]  
  
 <span data-ttu-id="ad78b-165">在第一个的情况下，强类型化<xref:System.Text.StringBuilder.Equals%28System.Text.StringBuilder%29?displayProperty=nameWithType>调用方法重载，它的值是否相等，测试。</span><span class="sxs-lookup"><span data-stu-id="ad78b-165">In the first case, the strongly typed <xref:System.Text.StringBuilder.Equals%28System.Text.StringBuilder%29?displayProperty=nameWithType> method overload, which tests for value equality, is called.</span></span> <span data-ttu-id="ad78b-166">因为字符串分配给两个<xref:System.Text.StringBuilder>对象是否相等，则该方法返回`true`。</span><span class="sxs-lookup"><span data-stu-id="ad78b-166">Because the strings assigned to the two <xref:System.Text.StringBuilder> objects are equal, the method returns `true`.</span></span> <span data-ttu-id="ad78b-167">但是，<xref:System.Text.StringBuilder>不重写<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ad78b-167">However, <xref:System.Text.StringBuilder> does not override <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>.</span></span> <span data-ttu-id="ad78b-168">因此，当<xref:System.Text.StringBuilder>对象强制转换为<xref:System.Object>，当<xref:System.Text.StringBuilder>实例分配给类型的变量的<xref:System.Object>，以及何时<xref:System.Object.Equals%28System.Object%2CSystem.Object%29?displayProperty=nameWithType>方法传递两个<xref:System.Text.StringBuilder>的对象，默认<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>调用方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-168">Because of this, when the <xref:System.Text.StringBuilder> object is cast to an <xref:System.Object>, when a <xref:System.Text.StringBuilder> instance is assigned to a variable of type <xref:System.Object>, and when the <xref:System.Object.Equals%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> method is passed two <xref:System.Text.StringBuilder> objects, the default <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method is called.</span></span> <span data-ttu-id="ad78b-169">因为<xref:System.Text.StringBuilder>是引用类型，该属性等同于传递两个<xref:System.Text.StringBuilder>对象添加到<xref:System.Object.ReferenceEquals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-169">Because <xref:System.Text.StringBuilder> is a reference type, this is equivalent to passing the two <xref:System.Text.StringBuilder> objects to the <xref:System.Object.ReferenceEquals%2A> method.</span></span> <span data-ttu-id="ad78b-170">尽管所有三个<xref:System.Text.StringBuilder>对象包含相同的字符串，则指三个不同的对象。</span><span class="sxs-lookup"><span data-stu-id="ad78b-170">Although all three <xref:System.Text.StringBuilder> objects contain identical strings, they refer to three distinct objects.</span></span> <span data-ttu-id="ad78b-171">因此，这些三个方法调用返回`false`。</span><span class="sxs-lookup"><span data-stu-id="ad78b-171">As a result, these three method calls return `false`.</span></span>  
  
 <span data-ttu-id="ad78b-172">你可以通过调用比较当前对象与另一个对象引用相等性<xref:System.Object.ReferenceEquals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-172">You can compare the current object to another object for reference equality by calling the <xref:System.Object.ReferenceEquals%2A> method.</span></span> <span data-ttu-id="ad78b-173">在 Visual Basic 中，你还可以使用`is`关键字 (例如， `If Me Is otherObject Then ...`)。</span><span class="sxs-lookup"><span data-stu-id="ad78b-173">In Visual Basic, you can also use the `is` keyword (for example, `If Me Is otherObject Then ...`).</span></span>  
  
## <a name="notes-for-inheritors"></a><span data-ttu-id="ad78b-174">对继承者的说明</span><span class="sxs-lookup"><span data-stu-id="ad78b-174">Notes for Inheritors</span></span>  
 <span data-ttu-id="ad78b-175">当你定义你自己的类型时，该类型继承定义的功能`Equals`方法与其基类型。</span><span class="sxs-lookup"><span data-stu-id="ad78b-175">When you define your own type, that type inherits the functionality defined by the `Equals` method of its base type.</span></span> <span data-ttu-id="ad78b-176">下表列出的默认实现`Equals`为主要类别的.NET Framework 中的类型的方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-176">The following table lists the default implementation of the `Equals` method for the major categories of types in the .NET Framework.</span></span>  
  
|<span data-ttu-id="ad78b-177">类型类别</span><span class="sxs-lookup"><span data-stu-id="ad78b-177">Type category</span></span>|<span data-ttu-id="ad78b-178">所定义的相等</span><span class="sxs-lookup"><span data-stu-id="ad78b-178">Equality defined by</span></span>|<span data-ttu-id="ad78b-179">注释</span><span class="sxs-lookup"><span data-stu-id="ad78b-179">Comments</span></span>|  
|-------------------|-------------------------|--------------|  
|<span data-ttu-id="ad78b-180">直接从派生类 <xref:System.Object></span><span class="sxs-lookup"><span data-stu-id="ad78b-180">Class derived directly from <xref:System.Object></span></span>|<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>|<span data-ttu-id="ad78b-181">引用相等性;等效于调用<xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ad78b-181">Reference equality; equivalent to calling <xref:System.Object.ReferenceEquals%2A?displayProperty=nameWithType>.</span></span>|  
|<span data-ttu-id="ad78b-182">结构</span><span class="sxs-lookup"><span data-stu-id="ad78b-182">Structure</span></span>|<xref:System.ValueType.Equals%2A?displayProperty=nameWithType>|<span data-ttu-id="ad78b-183">值相等。直接逐字节比较或按字段比较使用反射。</span><span class="sxs-lookup"><span data-stu-id="ad78b-183">Value equality; either direct byte-by-byte comparison or field-by-field comparison using reflection.</span></span>|  
|<span data-ttu-id="ad78b-184">枚举</span><span class="sxs-lookup"><span data-stu-id="ad78b-184">Enumeration</span></span>|<xref:System.Enum.Equals%2A?displayProperty=nameWithType>|<span data-ttu-id="ad78b-185">值必须具有相同的枚举类型和相同的基础值。</span><span class="sxs-lookup"><span data-stu-id="ad78b-185">Values must have the same enumeration type and the same underlying value.</span></span>|  
|<span data-ttu-id="ad78b-186">委托</span><span class="sxs-lookup"><span data-stu-id="ad78b-186">Delegate</span></span>|<xref:System.MulticastDelegate.Equals%2A?displayProperty=nameWithType>|<span data-ttu-id="ad78b-187">委托必须具有相同的调用列表的相同类型。</span><span class="sxs-lookup"><span data-stu-id="ad78b-187">Delegates must have the same type with identical invocation lists.</span></span>|  
|<span data-ttu-id="ad78b-188">接口</span><span class="sxs-lookup"><span data-stu-id="ad78b-188">Interface</span></span>|<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>|<span data-ttu-id="ad78b-189">引用相等性。</span><span class="sxs-lookup"><span data-stu-id="ad78b-189">Reference equality.</span></span>|  
  
 <span data-ttu-id="ad78b-190">对于值类型，则应始终重写<xref:System.Object.Equals%2A>，因为测试是否相等依赖于反射提供性能不佳。</span><span class="sxs-lookup"><span data-stu-id="ad78b-190">For a value type, you should always override <xref:System.Object.Equals%2A>, because tests for equality that rely on reflection offer poor performance.</span></span> <span data-ttu-id="ad78b-191">此外可以重写的默认实现<xref:System.Object.Equals%2A>对于引用类型来测试而不是引用相等性的值是否相等并定义值相等性的精确意义。</span><span class="sxs-lookup"><span data-stu-id="ad78b-191">You can also override the default implementation of <xref:System.Object.Equals%2A> for reference types to test for value equality instead of reference equality and to define the precise meaning of value equality.</span></span> <span data-ttu-id="ad78b-192">此类实现<xref:System.Object.Equals%2A>返回`true`如果两个对象具有相同的值，即使它们不是同一个实例。</span><span class="sxs-lookup"><span data-stu-id="ad78b-192">Such implementations of <xref:System.Object.Equals%2A> return `true` if the two objects have the same value, even if they are not the same instance.</span></span> <span data-ttu-id="ad78b-193">该类型的实施者决定构成对象的值，但它通常是部分或全部存储的数据的对象的实例变量中。</span><span class="sxs-lookup"><span data-stu-id="ad78b-193">The type's implementer decides what constitutes an object's value, but it is typically some or all the data stored in the instance variables of the object.</span></span> <span data-ttu-id="ad78b-194">例如，值为<xref:System.String>对象所基于的字符字符串;<xref:System.String.Equals%28System.Object%29?displayProperty=nameWithType>方法重写<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>方法以返回`true`任何两个字符串包含相同的顺序中的相同字符的实例。</span><span class="sxs-lookup"><span data-stu-id="ad78b-194">For example, the value of a <xref:System.String> object is based on the characters of the string; the <xref:System.String.Equals%28System.Object%29?displayProperty=nameWithType> method overrides the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method to return `true` for any two string instances that contain the same characters in the same order.</span></span>  
  
 <span data-ttu-id="ad78b-195">下面的示例演示如何重写<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>方法来测试的值是否相等。</span><span class="sxs-lookup"><span data-stu-id="ad78b-195">The following example shows how to override the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method to test for value equality.</span></span> <span data-ttu-id="ad78b-196">它将重写<xref:System.Object.Equals%2A>方法`Person`类。</span><span class="sxs-lookup"><span data-stu-id="ad78b-196">It overrides the <xref:System.Object.Equals%2A> method for the `Person` class.</span></span> <span data-ttu-id="ad78b-197">如果`Person`接受相等性，其基类实现两个`Person`对象将引用单个对象，它们才相等。</span><span class="sxs-lookup"><span data-stu-id="ad78b-197">If `Person` accepted its base class implementation of equality, two `Person` objects would be equal only if they referenced a single object.</span></span> <span data-ttu-id="ad78b-198">但是，在这种情况下，两个`Person`对象是否相等，如果它们具有相同的值`Person.Id`属性。</span><span class="sxs-lookup"><span data-stu-id="ad78b-198">However, in this case, two `Person` objects are equal if they have the same value for the `Person.Id` property.</span></span>  
  
 [!code-csharp[System.Object.Equals#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.equals/cs/equalsoverride.cs#6)]
 [!code-vb[System.Object.Equals#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.equals/vb/equalsoverride.vb#6)]  
  
 <span data-ttu-id="ad78b-199">除了重写<xref:System.Object.Equals%2A>，你可以实现<xref:System.IEquatable%601>接口，以提供强类型化的测试相等性。</span><span class="sxs-lookup"><span data-stu-id="ad78b-199">In addition to overriding <xref:System.Object.Equals%2A>, you can implement the <xref:System.IEquatable%601> interface to provide a strongly typed test for equality.</span></span>  
  
 <span data-ttu-id="ad78b-200">以下语句必须为 true 的所有实现<xref:System.Object.Equals%28System.Object%29>方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-200">The following statements must be true for all implementations of the <xref:System.Object.Equals%28System.Object%29> method.</span></span> <span data-ttu-id="ad78b-201">在列表中， `x`， `y`，和`z`表示不是对象引用**null**。</span><span class="sxs-lookup"><span data-stu-id="ad78b-201">In the list, `x`, `y`, and `z` represent object references that are not **null**.</span></span>  
  
-   <span data-ttu-id="ad78b-202">`x.Equals(x)` 返回`true`，涉及浮点类型的情况除外。</span><span class="sxs-lookup"><span data-stu-id="ad78b-202">`x.Equals(x)` returns `true`, except in cases that involve floating-point types.</span></span> <span data-ttu-id="ad78b-203">请参阅 ISO/IEC/IEEE 60559:2011，信息技术-微处理器系统-浮点运算。</span><span class="sxs-lookup"><span data-stu-id="ad78b-203">See ISO/IEC/IEEE 60559:2011, Information technology -- Microprocessor Systems -- Floating-Point arithmetic.</span></span>  
  
-   <span data-ttu-id="ad78b-204">`x.Equals(y)` 返回值与相同`y.Equals(x)`。</span><span class="sxs-lookup"><span data-stu-id="ad78b-204">`x.Equals(y)` returns the same value as `y.Equals(x)`.</span></span>  
  
-   <span data-ttu-id="ad78b-205">`x.Equals(y)` 返回`true`如果这两个`x`和`y`是`NaN`。</span><span class="sxs-lookup"><span data-stu-id="ad78b-205">`x.Equals(y)` returns `true` if both `x` and `y` are `NaN`.</span></span>  
  
-   <span data-ttu-id="ad78b-206">如果`(x.Equals(y) && y.Equals(z))`返回`true`，然后`x.Equals(z)`返回`true`。</span><span class="sxs-lookup"><span data-stu-id="ad78b-206">If `(x.Equals(y) && y.Equals(z))` returns `true`, then `x.Equals(z)` returns `true`.</span></span>  
  
-   <span data-ttu-id="ad78b-207">对连续调用`x.Equals(y)`返回相同的值，只要引用对象`x`和`y`不会修改。</span><span class="sxs-lookup"><span data-stu-id="ad78b-207">Successive calls to `x.Equals(y)` return the same value as long as the objects referenced by `x` and `y` are not modified.</span></span>  
  
-   <span data-ttu-id="ad78b-208">`x.Equals(null)` 返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="ad78b-208">`x.Equals(null)` returns `false`.</span></span>  
  
 <span data-ttu-id="ad78b-209">实现<xref:System.Object.Equals%2A>必须不引发异常; 它们应始终会返回值。</span><span class="sxs-lookup"><span data-stu-id="ad78b-209">Implementations of <xref:System.Object.Equals%2A> must not throw exceptions; they should always return a value.</span></span> <span data-ttu-id="ad78b-210">例如，如果`obj`是`null`、<xref:System.Object.Equals%2A>方法应返回`false`而不是引发<xref:System.ArgumentNullException>。</span><span class="sxs-lookup"><span data-stu-id="ad78b-210">For example, if `obj` is `null`, the <xref:System.Object.Equals%2A> method should return `false` instead of throwing an <xref:System.ArgumentNullException>.</span></span>  
  
 <span data-ttu-id="ad78b-211">重写时，请遵循以下准则<xref:System.Object.Equals%28System.Object%29>:</span><span class="sxs-lookup"><span data-stu-id="ad78b-211">Follow these guidelines when overriding <xref:System.Object.Equals%28System.Object%29>:</span></span>  
  
-   <span data-ttu-id="ad78b-212">类型实现<xref:System.IComparable>必须重写<xref:System.Object.Equals%28System.Object%29>。</span><span class="sxs-lookup"><span data-stu-id="ad78b-212">Types that implement <xref:System.IComparable> must override <xref:System.Object.Equals%28System.Object%29>.</span></span>  
  
-   <span data-ttu-id="ad78b-213">类型重写<xref:System.Object.Equals%28System.Object%29>还必须重写<xref:System.Object.GetHashCode%2A>; 否则为哈希表可能无法正常工作。</span><span class="sxs-lookup"><span data-stu-id="ad78b-213">Types that override <xref:System.Object.Equals%28System.Object%29> must also override <xref:System.Object.GetHashCode%2A>; otherwise, hash tables  might not work correctly.</span></span>  
  
-   <span data-ttu-id="ad78b-214">你应该考虑实施<xref:System.IEquatable%601>接口以支持强类型化测试是否相等。</span><span class="sxs-lookup"><span data-stu-id="ad78b-214">You should consider implementing the <xref:System.IEquatable%601> interface to support strongly typed tests for equality.</span></span> <span data-ttu-id="ad78b-215">你<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>实现应返回与相一致的结果<xref:System.Object.Equals%2A>。</span><span class="sxs-lookup"><span data-stu-id="ad78b-215">Your <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> implementation should return results that are consistent with <xref:System.Object.Equals%2A>.</span></span>  
  
-   <span data-ttu-id="ad78b-216">如果您的编程语言支持运算符重载，并且重载相等运算符对于给定的类型，还必须重写<xref:System.Object.Equals%28System.Object%29>方法以返回与相等运算符相同的结果。</span><span class="sxs-lookup"><span data-stu-id="ad78b-216">If your programming language supports operator overloading and you overload the equality operator for a given type, you must also override the <xref:System.Object.Equals%28System.Object%29> method to return the same result as the equality operator.</span></span> <span data-ttu-id="ad78b-217">这有助于确保使用的类库代码<xref:System.Object.Equals%2A>(如<xref:System.Collections.ArrayList>和<xref:System.Collections.Hashtable>) 中运作的方式与应用程序代码使用相等运算符的方法一致。</span><span class="sxs-lookup"><span data-stu-id="ad78b-217">This  helps ensure that class library code that uses <xref:System.Object.Equals%2A> (such as <xref:System.Collections.ArrayList> and <xref:System.Collections.Hashtable>) behaves in a manner that is consistent with the way the equality operator is used by application code.</span></span>  
  
### <a name="guidelines-for-reference-types"></a><span data-ttu-id="ad78b-218">对于引用类型的准则</span><span class="sxs-lookup"><span data-stu-id="ad78b-218">Guidelines for Reference Types</span></span>  
 <span data-ttu-id="ad78b-219">以下准则适用于重写<xref:System.Object.Equals%28System.Object%29>对于引用类型：</span><span class="sxs-lookup"><span data-stu-id="ad78b-219">The following guidelines apply to overriding <xref:System.Object.Equals%28System.Object%29> for a reference type:</span></span>  
  
-   <span data-ttu-id="ad78b-220">请考虑重写<xref:System.Object.Equals%2A>的类型语义是否基于这一事实的类型表示某些值。</span><span class="sxs-lookup"><span data-stu-id="ad78b-220">Consider overriding <xref:System.Object.Equals%2A> if the semantics of the type are based on the fact that the type represents some value(s).</span></span>  
  
-   <span data-ttu-id="ad78b-221">大多数引用类型必须不能重载相等运算符，即使它们将覆盖<xref:System.Object.Equals%2A>。</span><span class="sxs-lookup"><span data-stu-id="ad78b-221">Most reference types must not overload the equality operator, even if they override <xref:System.Object.Equals%2A>.</span></span> <span data-ttu-id="ad78b-222">但是，如果你要实现引用类型，用于具有值语义，如复杂的数字类型，你必须重写相等运算符。</span><span class="sxs-lookup"><span data-stu-id="ad78b-222">However, if you are implementing a reference type that is intended to have value semantics, such as a complex number type, you must override the equality operator.</span></span>  
  
-   <span data-ttu-id="ad78b-223">不应覆盖<xref:System.Object.Equals%2A>上可变的引用类型。</span><span class="sxs-lookup"><span data-stu-id="ad78b-223">You should not override <xref:System.Object.Equals%2A> on a mutable reference type.</span></span> <span data-ttu-id="ad78b-224">这是因为在重写<xref:System.Object.Equals%2A>需要，还可以覆盖<xref:System.Object.GetHashCode%2A>方法上, 一节中所述。</span><span class="sxs-lookup"><span data-stu-id="ad78b-224">This is because overriding <xref:System.Object.Equals%2A> requires that you also override the <xref:System.Object.GetHashCode%2A> method, as discussed in the previous section.</span></span> <span data-ttu-id="ad78b-225">这意味着，可变的引用类型的实例的哈希代码可以更改在其生存期内，这可能导致哈希表中的对象会丢失。</span><span class="sxs-lookup"><span data-stu-id="ad78b-225">This means that the hash code of an instance of a mutable reference type can change during its lifetime, which can cause the object to be lost in a hash table.</span></span>  
  
### <a name="guidelines-for-value-types"></a><span data-ttu-id="ad78b-226">值类型的原则</span><span class="sxs-lookup"><span data-stu-id="ad78b-226">Guidelines for Value Types</span></span>  
 <span data-ttu-id="ad78b-227">以下准则适用于重写<xref:System.Object.Equals%28System.Object%29>对于值类型：</span><span class="sxs-lookup"><span data-stu-id="ad78b-227">The following guidelines apply to overriding <xref:System.Object.Equals%28System.Object%29> for a value type:</span></span>  
  
-   <span data-ttu-id="ad78b-228">如果你正在定义包括一个或多个字段的值类型其值是引用类型，则应重写<xref:System.Object.Equals%28System.Object%29>。</span><span class="sxs-lookup"><span data-stu-id="ad78b-228">If you are defining a value type that includes one or more fields whose values are reference types, you should override <xref:System.Object.Equals%28System.Object%29>.</span></span> <span data-ttu-id="ad78b-229"><xref:System.Object.Equals%28System.Object%29>由提供实现<xref:System.ValueType>执行逐字节比较的值类型字段是所有的值类型，但它使用反射来执行其字段包括引用类型的值类型的字段的比较。</span><span class="sxs-lookup"><span data-stu-id="ad78b-229">The <xref:System.Object.Equals%28System.Object%29> implementation provided by <xref:System.ValueType> performs a byte-by-byte comparison for value types whose fields are all value types, but it uses reflection to perform a field-by-field comparison of value types whose fields include reference types.</span></span>  
  
-   <span data-ttu-id="ad78b-230">如果你重写<xref:System.Object.Equals%2A>和你的开发语言支持运算符重载，因此您必须重载相等运算符。</span><span class="sxs-lookup"><span data-stu-id="ad78b-230">If you override <xref:System.Object.Equals%2A> and your development language supports operator overloading, you must overload the equality operator.</span></span>  
  
-   <span data-ttu-id="ad78b-231">应实现<xref:System.IEquatable%601>接口。</span><span class="sxs-lookup"><span data-stu-id="ad78b-231">You should implement the <xref:System.IEquatable%601> interface.</span></span> <span data-ttu-id="ad78b-232">调用的强类型化<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>方法可避免装箱`obj`自变量。</span><span class="sxs-lookup"><span data-stu-id="ad78b-232">Calling the strongly typed <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> method avoids boxing the `obj` argument.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad78b-233">下面的示例演示`Point`类，并重写<xref:System.Object.Equals%2A>方法以提供值是否相等和`Point3D`派生自的类`Point`。</span><span class="sxs-lookup"><span data-stu-id="ad78b-233">The following example shows a `Point` class that overrides the <xref:System.Object.Equals%2A> method to provide value equality, and a `Point3D` class that is derived from `Point`.</span></span> <span data-ttu-id="ad78b-234">因为`Point`重写<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>来测试值相等性<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>不调用方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-234">Because `Point` overrides <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> to test for value equality, the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method is not called.</span></span> <span data-ttu-id="ad78b-235">但是，`Point3D.Equals`调用`Point.Equals`因为`Point`实现<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>提供值是否相等的方式。</span><span class="sxs-lookup"><span data-stu-id="ad78b-235">However, `Point3D.Equals` calls `Point.Equals` because `Point` implements <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> in a manner that provides value equality.</span></span>  
  
 [!code-csharp[ECMA-System.Object.Equals2#1](~/samples/snippets/csharp/VS_Snippets_CLR/ECMA-System.Object.Equals2/CS/equals2.cs#1)]
 [!code-vb[ECMA-System.Object.Equals2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ECMA-System.Object.Equals2/VB/equals2.vb#1)]  
  
 <span data-ttu-id="ad78b-236">`Point.Equals`方法进行检查以确保`obj`参数不是**null** ，并且它引用与此对象相同的类型的实例。</span><span class="sxs-lookup"><span data-stu-id="ad78b-236">The `Point.Equals` method checks to make sure that the `obj` argument is not **null** and that it references an instance of the same type as this object.</span></span> <span data-ttu-id="ad78b-237">如果任一检查失败，该方法返回`false`。</span><span class="sxs-lookup"><span data-stu-id="ad78b-237">If either check fails, the method returns `false`.</span></span>  
  
 <span data-ttu-id="ad78b-238">`Point.Equals`方法调用<xref:System.Object.GetType%2A>方法来确定两个对象的运行时类型是否相同。</span><span class="sxs-lookup"><span data-stu-id="ad78b-238">The `Point.Equals` method calls the <xref:System.Object.GetType%2A> method to determine whether the run-time types of the two objects are identical.</span></span> <span data-ttu-id="ad78b-239">如果该方法使用的检查的窗体`obj is Point`在 C# 或`TryCast(obj, Point)`在 Visual Basic 中，检查将返回`true`在情况下其中`obj`是派生的类的实例`Point`，即使`obj`和当前实例并不属于相同的运行时类型。</span><span class="sxs-lookup"><span data-stu-id="ad78b-239">If the method used a check of the form `obj is Point` in C# or `TryCast(obj, Point)` in Visual Basic, the check would return `true` in cases where `obj` is an instance of a derived class of `Point`, even though `obj` and the current instance are not of the same run-time type.</span></span> <span data-ttu-id="ad78b-240">验证这两个对象是否相同类型，方法强制转换`obj`类型`Point`并返回结果的比较两个对象的实例字段。</span><span class="sxs-lookup"><span data-stu-id="ad78b-240">Having verified that both objects are of the same type, the method casts `obj` to type `Point` and returns the result of comparing the instance fields of the two objects.</span></span>  
  
 <span data-ttu-id="ad78b-241">在`Point3D.Equals`，继承`Point.Equals`方法，这将覆盖<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>，任何其他操作完成之前调用。</span><span class="sxs-lookup"><span data-stu-id="ad78b-241">In `Point3D.Equals`, the inherited `Point.Equals` method, which overrides <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>, is invoked before anything else is done.</span></span> <span data-ttu-id="ad78b-242">因为`Point3D`是一个密封的类 (`NotInheritable`在 Visual Basic 中)，在窗体中的检查`obj is Point`在 C# 或`TryCast(obj, Point)`在 Visual Basic 中是足够用于确保`obj`是`Point3D`对象。</span><span class="sxs-lookup"><span data-stu-id="ad78b-242">Because `Point3D` is a sealed class (`NotInheritable` in Visual Basic), a check in the form `obj is Point` in C# or `TryCast(obj, Point)` in Visual Basic is adequate to ensure that `obj` is a `Point3D` object.</span></span> <span data-ttu-id="ad78b-243">如果它是`Point3D`对象，它被强制转换为`Point`对象并传递到基类实现<xref:System.Object.Equals%2A>。</span><span class="sxs-lookup"><span data-stu-id="ad78b-243">If it is a `Point3D` object, it is cast to a `Point` object and passed to the base class implementation of <xref:System.Object.Equals%2A>.</span></span> <span data-ttu-id="ad78b-244">仅当继承`Point.Equals`方法返回`true`没有方法比较`z`实例在派生类中引入的字段。</span><span class="sxs-lookup"><span data-stu-id="ad78b-244">Only when the inherited `Point.Equals` method returns `true` does the method compare the `z` instance fields introduced in the derived class.</span></span>  
  
 <span data-ttu-id="ad78b-245">下面的示例定义`Rectangle`内部实现作为两个矩形类`Point`对象。</span><span class="sxs-lookup"><span data-stu-id="ad78b-245">The following example defines a `Rectangle` class that internally implements a rectangle as two `Point` objects.</span></span> <span data-ttu-id="ad78b-246">`Rectangle`类还将重写<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>提供的值是否相等。</span><span class="sxs-lookup"><span data-stu-id="ad78b-246">The `Rectangle` class also overrides <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> to provide for value equality.</span></span>  
  
 [!code-csharp[ECMA-System.Object.Equals3#1](~/samples/snippets/csharp/VS_Snippets_CLR/ECMA-System.Object.Equals3/CS/equals3.cs#1)]
 [!code-vb[ECMA-System.Object.Equals3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ECMA-System.Object.Equals3/VB/equals3.vb#1)]  
  
 <span data-ttu-id="ad78b-247">某些语言中的如 C# 和 Visual Basic 支持运算符重载。</span><span class="sxs-lookup"><span data-stu-id="ad78b-247">Some languages such as C# and Visual Basic support operator overloading.</span></span> <span data-ttu-id="ad78b-248">当某个类型重载相等运算符时，它还必须重写<xref:System.Object.Equals%28System.Object%29>方法以提供相同的功能。</span><span class="sxs-lookup"><span data-stu-id="ad78b-248">When a type overloads the equality operator, it must also override the <xref:System.Object.Equals%28System.Object%29> method to provide the same functionality.</span></span> <span data-ttu-id="ad78b-249">这通常通过编写实现<xref:System.Object.Equals%28System.Object%29>方面重载的相等运算符，如以下示例所示的方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-249">This is typically accomplished by writing the <xref:System.Object.Equals%28System.Object%29> method in terms of the overloaded equality operator, as in the following example.</span></span>  
  
 [!code-csharp[ECMA-System.Object.Equals4#1](~/samples/snippets/csharp/VS_Snippets_CLR/ECMA-System.Object.Equals4/CS/equals4.cs#1)]
 [!code-vb[ECMA-System.Object.Equals4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ECMA-System.Object.Equals4/vb/equals4.vb#1)]  
  
 <span data-ttu-id="ad78b-250">因为`Complex`是值类型，它不能从派生。</span><span class="sxs-lookup"><span data-stu-id="ad78b-250">Because `Complex` is a value type, it cannot be derived from.</span></span>  <span data-ttu-id="ad78b-251">因此，替代<xref:System.Object.Equals%28System.Object%29>方法无需调用<xref:System.Object.GetType%2A>以确定精确的运行时类型的每个对象，但可以改为使用`is`C# 中的运算符或`TypeOf`Visual basic 中检查的类型的运算符`obj`参数。</span><span class="sxs-lookup"><span data-stu-id="ad78b-251">Therefore, the override to <xref:System.Object.Equals%28System.Object%29> method need not call <xref:System.Object.GetType%2A> to determine the precise run-time type of each object, but can instead use the `is` operator in C# or the `TypeOf` operator in Visual Basic to check the type of the `obj` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ReferenceEquals(System.Object,System.Object)" />
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.ValueType" />
        <altmember cref="T:System.IComparable" />
        <altmember cref="T:System.Collections.ArrayList" />
        <altmember cref="T:System.Collections.Hashtable" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (object objA, object objB);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(object objA, object objB) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (objA As Object, objB As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(System::Object ^ objA, System::Object ^ objB);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objA" Type="System.Object" />
        <Parameter Name="objB" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="objA">
          <span data-ttu-id="ad78b-252">要比较的第一个对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad78b-252">The first object to compare.</span>
          </span>
        </param>
        <param name="objB">
          <span data-ttu-id="ad78b-253">要比较的第二个对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad78b-253">The second object to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad78b-254">确定指定的对象实例是否被视为相等。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad78b-254">Determines whether the specified object instances are considered equal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ad78b-255">如果对象被视为相等，则为 <see langword="true" />，否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad78b-255">
              <see langword="true" /> if the objects are considered equal; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="ad78b-256">如果 <paramref name="objA" /> 和 <paramref name="objB" /> 均为 null，此方法返回 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad78b-256">If both <paramref name="objA" /> and <paramref name="objB" /> are **null**, the method returns <see langword="true" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad78b-257">静态<xref:System.Object.Equals%28System.Object%2CSystem.Object%29>方法指示两个对象是否，`objA`和`objB`，是否相等。</span><span class="sxs-lookup"><span data-stu-id="ad78b-257">The static <xref:System.Object.Equals%28System.Object%2CSystem.Object%29> method indicates whether two objects, `objA` and  `objB`, are equal.</span></span> <span data-ttu-id="ad78b-258">它还可用于测试的对象，其值是**null**是否相等。</span><span class="sxs-lookup"><span data-stu-id="ad78b-258">It also enables you to test objects whose value is **null** for equality.</span></span> <span data-ttu-id="ad78b-259">它将进行比较`objA`和`objB`相等性，如下所示：</span><span class="sxs-lookup"><span data-stu-id="ad78b-259">It compares `objA` and `objB` for equality as follows:</span></span>  
  
-   <span data-ttu-id="ad78b-260">它确定两个对象是否表示相同的对象引用。</span><span class="sxs-lookup"><span data-stu-id="ad78b-260">It determines whether the two objects represent the same object reference.</span></span> <span data-ttu-id="ad78b-261">如果他们这样做，则此方法返回`true`。</span><span class="sxs-lookup"><span data-stu-id="ad78b-261">If they do, the method returns `true`.</span></span> <span data-ttu-id="ad78b-262">此测试等效于调用<xref:System.Object.ReferenceEquals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-262">This test is equivalent to calling the <xref:System.Object.ReferenceEquals%2A> method.</span></span> <span data-ttu-id="ad78b-263">此外，如果这两个`objA`和`objB`是**null**，该方法返回`true`。</span><span class="sxs-lookup"><span data-stu-id="ad78b-263">In addition, if both `objA` and `objB` are **null**, the method returns `true`.</span></span>  
  
-   <span data-ttu-id="ad78b-264">它确定是否是`objA`或`objB`是**null**。</span><span class="sxs-lookup"><span data-stu-id="ad78b-264">It determines whether either `objA` or `objB` is **null**.</span></span> <span data-ttu-id="ad78b-265">如果因此，它返回`false`。</span><span class="sxs-lookup"><span data-stu-id="ad78b-265">If so, it returns `false`.</span></span>  
  
-   <span data-ttu-id="ad78b-266">如果两个对象不表示相同的对象引用，并且二者均**null**，它调用`objA`。`Equals`(`objB`) 并返回结果。</span><span class="sxs-lookup"><span data-stu-id="ad78b-266">If the two objects do not represent the same object reference and neither is **null**, it calls `objA`.`Equals`(`objB`) and returns the result.</span></span> <span data-ttu-id="ad78b-267">这意味着，如果`objA`重写<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>方法，调用此重写。</span><span class="sxs-lookup"><span data-stu-id="ad78b-267">This means that if `objA` overrides the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method, this override is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad78b-268">下面的示例演示<xref:System.Object.Equals%28System.Object%2CSystem.Object%29>方法，并将其与<xref:System.Object.ReferenceEquals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-268">The following example illustrates the <xref:System.Object.Equals%28System.Object%2CSystem.Object%29> method and compares it with the <xref:System.Object.ReferenceEquals%2A> method.</span></span>  
  
 [!code-csharp[System.Object.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.equals/cs/equals_static2.cs#1)]
 [!code-vb[System.Object.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.equals/vb/equals_static2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
        <altmember cref="M:System.Object.ReferenceEquals(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Object ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Object ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ad78b-269">在垃圾回收将某一对象回收前允许该对象尝试释放资源并执行其他清理操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad78b-269">Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad78b-270"><xref:System.Object.Finalize%2A>方法用于执行之前对象被销毁当前对象持有的非托管资源的清理操作。</span><span class="sxs-lookup"><span data-stu-id="ad78b-270">The <xref:System.Object.Finalize%2A> method is used to perform cleanup operations on unmanaged resources held by the current object before the object is destroyed.</span></span> <span data-ttu-id="ad78b-271">该方法受保护，并且因此仅通过此类或派生类可访问。</span><span class="sxs-lookup"><span data-stu-id="ad78b-271">The method is protected and therefore is accessible only through this class or through a derived class.</span></span>  
  
 <span data-ttu-id="ad78b-272">本节内容：</span><span class="sxs-lookup"><span data-stu-id="ad78b-272">In this section:</span></span>  
  
-   [<span data-ttu-id="ad78b-273">终止的工作原理</span><span class="sxs-lookup"><span data-stu-id="ad78b-273">How finalization works</span></span>](#How)  
  
-   [<span data-ttu-id="ad78b-274">实施者注意事项</span><span class="sxs-lookup"><span data-stu-id="ad78b-274">Notes for implementers</span></span>](#Notes)  
  
-   [<span data-ttu-id="ad78b-275">SafeHandle 备用方法</span><span class="sxs-lookup"><span data-stu-id="ad78b-275">The SafeHandle alternative</span></span>](#SafeHandle)  
  
<a name="How"></a>   
## <a name="how-finalization-works"></a><span data-ttu-id="ad78b-276">终止的工作原理</span><span class="sxs-lookup"><span data-stu-id="ad78b-276">How finalization works</span></span>  
 <span data-ttu-id="ad78b-277"><xref:System.Object>类提供的实现不<xref:System.Object.Finalize%2A>方法和垃圾回收器将派生的类型不标记<xref:System.Object>终止除非它们将覆盖<xref:System.Object.Finalize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-277">The <xref:System.Object> class provides no implementation for the <xref:System.Object.Finalize%2A> method, and the garbage collector does not mark types derived from <xref:System.Object> for finalization unless they override the <xref:System.Object.Finalize%2A> method.</span></span>  
  
 <span data-ttu-id="ad78b-278">如果类型未重写<xref:System.Object.Finalize%2A>方法，则垃圾回收器会将类型的每个实例的条目添加到调用终止队列中的内部结构。</span><span class="sxs-lookup"><span data-stu-id="ad78b-278">If a type does override the <xref:System.Object.Finalize%2A> method, the garbage collector adds an entry for each instance of the type to an internal structure called the finalization queue.</span></span> <span data-ttu-id="ad78b-279">终止队列中包含垃圾回收器才能回收其内存之前，必须运行其终止代码托管堆中的所有对象的条目。</span><span class="sxs-lookup"><span data-stu-id="ad78b-279">The finalization queue contains entries for all the objects in the managed heap whose finalization code must run before the garbage collector can reclaim their memory.</span></span> <span data-ttu-id="ad78b-280">然后，垃圾回收器调用<xref:System.Object.Finalize%2A>在以下情况下自动的方法：</span><span class="sxs-lookup"><span data-stu-id="ad78b-280">The garbage collector then calls the <xref:System.Object.Finalize%2A> method automatically under the following conditions:</span></span>  
  
-   <span data-ttu-id="ad78b-281">垃圾回收器发现，一个对象不可访问，除非您通过调用从终止豁免已对象后<xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-281">After the garbage collector has discovered that an object is inaccessible, unless the object has been exempted from finalization by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
-   <span data-ttu-id="ad78b-282">在关闭应用程序域中，除非该对象是免于终止的对象。</span><span class="sxs-lookup"><span data-stu-id="ad78b-282">During shutdown of an application domain, unless the object is exempt from finalization.</span></span> <span data-ttu-id="ad78b-283">在关闭期间，终止甚至仍是可访问的对象。</span><span class="sxs-lookup"><span data-stu-id="ad78b-283">During shutdown, even objects that are still accessible are finalized.</span></span>  
  
 <span data-ttu-id="ad78b-284"><xref:System.Object.Finalize%2A> 将自动调用一次在给定实例中，除非的对象重新注册通过使用一种机制，如<xref:System.GC.ReRegisterForFinalize%2A?displayProperty=nameWithType>和<xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>尚未随后调用方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-284"><xref:System.Object.Finalize%2A> is automatically called only once on a given instance, unless the object is re-registered by using a mechanism such as <xref:System.GC.ReRegisterForFinalize%2A?displayProperty=nameWithType> and the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method has not been subsequently called.</span></span>  
  
 <span data-ttu-id="ad78b-285"><xref:System.Object.Finalize%2A> 操作具有以下限制：</span><span class="sxs-lookup"><span data-stu-id="ad78b-285"><xref:System.Object.Finalize%2A> operations have the following limitations:</span></span>  
  
-   <span data-ttu-id="ad78b-286">终结器执行时的确切时间不确定。</span><span class="sxs-lookup"><span data-stu-id="ad78b-286">The exact time when the finalizer executes is undefined.</span></span> <span data-ttu-id="ad78b-287">若要确保确定性释放资源，对你的类的实例实现`Close`方法，或者提供<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>实现。</span><span class="sxs-lookup"><span data-stu-id="ad78b-287">To ensure deterministic release of resources for instances of your class, implement a `Close` method or provide a <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation.</span></span>  
  
-   <span data-ttu-id="ad78b-288">两个对象的终结器不保证任何特定顺序运行即使另一个对象引用。</span><span class="sxs-lookup"><span data-stu-id="ad78b-288">The finalizers of two objects are not guaranteed to run in any specific order, even if one object refers to the other.</span></span> <span data-ttu-id="ad78b-289">也就是说，如果对象 A 具有对对象 B 的引用，并且二者的终结器，对象 B 可能已经被终结的对象 A 终结器启动时。</span><span class="sxs-lookup"><span data-stu-id="ad78b-289">That is, if Object A has a reference to Object B and both have finalizers, Object B might have already been finalized when the finalizer of Object A starts.</span></span>  
  
-   <span data-ttu-id="ad78b-290">终结器运行的线程未指定。</span><span class="sxs-lookup"><span data-stu-id="ad78b-290">The thread on which the finalizer runs is unspecified.</span></span>  
  
 <span data-ttu-id="ad78b-291"><xref:System.Object.Finalize%2A>方法可能无法运行完成，或可能根本不运行下列异常情况下：</span><span class="sxs-lookup"><span data-stu-id="ad78b-291">The <xref:System.Object.Finalize%2A> method might not run to completion or might not run at all under the following exceptional circumstances:</span></span>  
  
-   <span data-ttu-id="ad78b-292">如果另一个终结器会无限期阻止 （进入无限循环，尝试获取的锁，它可以永远不会获取，等等）。</span><span class="sxs-lookup"><span data-stu-id="ad78b-292">If another finalizer blocks indefinitely (goes into an infinite loop, tries to obtain a lock it can never obtain, and so on).</span></span> <span data-ttu-id="ad78b-293">运行时尝试运行终结器来完成，因为其他终结器可能不会调用终结器块如果无限期。</span><span class="sxs-lookup"><span data-stu-id="ad78b-293">Because the runtime tries to run finalizers to completion, other finalizers might not be called if a finalizer blocks indefinitely.</span></span>  
  
-   <span data-ttu-id="ad78b-294">如果不提供机会清理的运行时，进程将终止。</span><span class="sxs-lookup"><span data-stu-id="ad78b-294">If the process terminates without giving the runtime a chance to clean up.</span></span> <span data-ttu-id="ad78b-295">在这种情况下，运行时的第一个通知的进程是终止的一个 DLL_PROCESS_DETACH 通知。</span><span class="sxs-lookup"><span data-stu-id="ad78b-295">In this case, the runtime's first notification of process termination is a DLL_PROCESS_DETACH notification.</span></span>  
  
 <span data-ttu-id="ad78b-296">运行时将继续完成在关闭过程的对象，仅当可终结对象数目继续减少。</span><span class="sxs-lookup"><span data-stu-id="ad78b-296">The runtime continues to finalize objects during shutdown only while the number of finalizable objects continues to decrease.</span></span>  
  
 <span data-ttu-id="ad78b-297">如果<xref:System.Object.Finalize%2A>或的重写<xref:System.Object.Finalize%2A>引发异常，并且运行时不承载的应用程序将替代默认策略，运行时终止进程，且无活动`try` / `finally`块或执行终结器。</span><span class="sxs-lookup"><span data-stu-id="ad78b-297">If <xref:System.Object.Finalize%2A> or an override of <xref:System.Object.Finalize%2A> throws an exception, and the runtime is not hosted by an application that overrides the default policy, the runtime terminates the process and no active `try`/`finally` blocks or finalizers are executed.</span></span> <span data-ttu-id="ad78b-298">如果终结器无法释放或销毁资源，则此行为确保处理完整性。</span><span class="sxs-lookup"><span data-stu-id="ad78b-298">This behavior ensures process integrity if the finalizer cannot free or destroy resources.</span></span>  
  
<a name="Notes"></a>   
## <a name="overriding-the-finalize-method"></a><span data-ttu-id="ad78b-299">重写 Finalize 方法</span><span class="sxs-lookup"><span data-stu-id="ad78b-299">Overriding the Finalize method</span></span> 
 <span data-ttu-id="ad78b-300">应重写<xref:System.Object.Finalize%2A>使用非托管的资源，如文件句柄或必须在垃圾回收期间放弃使用它们的托管的对象时释放的数据库连接的类。</span><span class="sxs-lookup"><span data-stu-id="ad78b-300">You should override <xref:System.Object.Finalize%2A> for a class that uses unmanaged resources, such as file handles or database connections that must be released when the managed object that uses them is discarded during garbage collection.</span></span> <span data-ttu-id="ad78b-301">不应实现<xref:System.Object.Finalize%2A>方法托管对象，因为垃圾回收器自动释放托管的资源。</span><span class="sxs-lookup"><span data-stu-id="ad78b-301">You shouldn't implement a <xref:System.Object.Finalize%2A> method for managed objects because the garbage collector releases managed resources automatically.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ad78b-302">如果<xref:System.Runtime.InteropServices.SafeHandle>可用对象，则包装非托管的资源，建议的替代项是实现使用安全句柄的释放模式并不会覆盖<xref:System.Object.Finalize%2A>。</span><span class="sxs-lookup"><span data-stu-id="ad78b-302">If a <xref:System.Runtime.InteropServices.SafeHandle> object is available that wraps your unmanaged resource, the recommended alternative is to implement the dispose pattern with a safe handle and not override <xref:System.Object.Finalize%2A>.</span></span> <span data-ttu-id="ad78b-303">有关详细信息，请参阅[SafeHandle 备用方法](#SafeHandle)部分。</span><span class="sxs-lookup"><span data-stu-id="ad78b-303">For more information, see [The SafeHandle alternative](#SafeHandle) section.</span></span>  
  
 <span data-ttu-id="ad78b-304"><xref:System.Object.Finalize%2A?displayProperty=nameWithType>方法不执行任何操作默认情况下，但应重写<xref:System.Object.Finalize%2A>仅当有必要，且仅释放非托管的资源。</span><span class="sxs-lookup"><span data-stu-id="ad78b-304">The <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method does nothing by default, but you should override <xref:System.Object.Finalize%2A> only if necessary, and only to release unmanaged resources.</span></span> <span data-ttu-id="ad78b-305">回收内存倾向于长得多如果运行终止操作，因为它需要至少两个垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="ad78b-305">Reclaiming memory tends to take much longer if a finalization operation runs, because it requires at least two garbage collections.</span></span> <span data-ttu-id="ad78b-306">此外，你应该重写<xref:System.Object.Finalize%2A>仅类型引用的方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-306">In addition, you should override the <xref:System.Object.Finalize%2A> method for reference types only.</span></span> <span data-ttu-id="ad78b-307">公共语言运行时仅完成引用类型。</span><span class="sxs-lookup"><span data-stu-id="ad78b-307">The common language runtime only finalizes reference types.</span></span> <span data-ttu-id="ad78b-308">它将忽略有关值类型的终结器。</span><span class="sxs-lookup"><span data-stu-id="ad78b-308">It ignores finalizers on value types.</span></span>  

<span data-ttu-id="ad78b-309">作用域<xref:System.Object.Finalize%2A?displayProperty=nameWithType>方法是`protected`。</span><span class="sxs-lookup"><span data-stu-id="ad78b-309">The scope of the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method is `protected`.</span></span> <span data-ttu-id="ad78b-310">在你的类中重写该方法时，应保持此受限制的作用域。</span><span class="sxs-lookup"><span data-stu-id="ad78b-310">You should maintain this limited scope when you override the method in your class.</span></span> <span data-ttu-id="ad78b-311">通过让<xref:System.Object.Finalize%2A>受保护的方法，你可以阻止从调用对象的应用程序的用户<xref:System.Object.Finalize%2A>直接的方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-311">By keeping a <xref:System.Object.Finalize%2A> method protected, you prevent users of your application from calling an object's <xref:System.Object.Finalize%2A> method directly.</span></span>
  
 <span data-ttu-id="ad78b-312">每个实现<xref:System.Object.Finalize%2A>派生类型中，则必须调用其基类型实现<xref:System.Object.Finalize%2A>。</span><span class="sxs-lookup"><span data-stu-id="ad78b-312">Every implementation of <xref:System.Object.Finalize%2A> in a derived type must call its base type's implementation of <xref:System.Object.Finalize%2A>.</span></span> <span data-ttu-id="ad78b-313">这是其中的应用程序代码可以调用仅用例<xref:System.Object.Finalize%2A>。</span><span class="sxs-lookup"><span data-stu-id="ad78b-313">This is the only case in which application code is allowed to call <xref:System.Object.Finalize%2A>.</span></span> <span data-ttu-id="ad78b-314">对象的<xref:System.Object.Finalize%2A>方法不应在其基本类之外的任何对象上调用方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-314">An object's <xref:System.Object.Finalize%2A> method shouldn't call a method on any objects other than that of its base class.</span></span> <span data-ttu-id="ad78b-315">这是因为被调用的其他对象可能在被回收在同一时间调用的对象，如公共语言运行时关闭这种情况。</span><span class="sxs-lookup"><span data-stu-id="ad78b-315">This is because the other objects being called could be collected at the same time as the calling object, such as in the case of a common language runtime shutdown.</span></span> 
  
> [!NOTE]
>  <span data-ttu-id="ad78b-316">C# 编译器不允许你重写<xref:System.Object.Finalize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-316">The C# compiler does not allow you to override the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="ad78b-317">相反，通过实现提供了终结器[析构函数](~/docs/csharp/programming-guide/classes-and-structs/destructors.md)为您的类。</span><span class="sxs-lookup"><span data-stu-id="ad78b-317">Instead, you provide a finalizer by implementing a [destructor](~/docs/csharp/programming-guide/classes-and-structs/destructors.md) for your class.</span></span> <span data-ttu-id="ad78b-318">C# 析构函数自动调用其基类的析构函数。</span><span class="sxs-lookup"><span data-stu-id="ad78b-318">A C# destructor automatically calls the destructor of its base class.</span></span>  
>   
>  <span data-ttu-id="ad78b-319">Visual c + + 还提供了其自己的语法，用于实现<xref:System.Object.Finalize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-319">Visual C++ also provides its own syntax for implementing the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="ad78b-320">有关详细信息，请参阅的"析构函数和终结器"部分[如何： 定义和使用类和结构 (C + + /cli CLI)](http://msdn.microsoft.com/library/1c03cb0d-1459-4b5e-af65-97d6b3094fd7)。</span><span class="sxs-lookup"><span data-stu-id="ad78b-320">For more information, see the "Destructors and finalizers" section of [How to: Define and Consume Classes and Structs (C++/CLI)](http://msdn.microsoft.com/library/1c03cb0d-1459-4b5e-af65-97d6b3094fd7).</span></span>  
  
 <span data-ttu-id="ad78b-321">垃圾回收是不确定的因为你不知道确切地说时垃圾回收器执行终止。</span><span class="sxs-lookup"><span data-stu-id="ad78b-321">Because garbage collection is non-deterministic, you do not know precisely when the garbage collector performs finalization.</span></span> <span data-ttu-id="ad78b-322">若要释放资源立即，你还可以选择实现[释放模式](~/docs/standard/design-guidelines/dispose-pattern.md)和<xref:System.IDisposable>接口。</span><span class="sxs-lookup"><span data-stu-id="ad78b-322">To release resources immediately, you can also choose to implement the [dispose pattern](~/docs/standard/design-guidelines/dispose-pattern.md) and the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="ad78b-323"><xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>实现可由使用者在类的释放非托管的资源，并且你可以使用<xref:System.Object.Finalize%2A>方法释放非托管的资源的事件中<xref:System.IDisposable.Dispose%2A>不调用方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-323">The <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation can be called by consumers of your class to free unmanaged resources, and you can use the <xref:System.Object.Finalize%2A> method to free unmanaged resources in the event that the <xref:System.IDisposable.Dispose%2A> method is not called.</span></span>  
  
 <span data-ttu-id="ad78b-324"><xref:System.Object.Finalize%2A> 后它已被清除在垃圾回收期间，能够执行几乎任何操作，包括再现的对象 （即，使该对象可访问再次）。</span><span class="sxs-lookup"><span data-stu-id="ad78b-324"><xref:System.Object.Finalize%2A> can take almost any action, including resurrecting an object (that is, making the object accessible again) after it has been cleaned up during garbage collection.</span></span> <span data-ttu-id="ad78b-325">但是，该对象还能够仅重新一次;<xref:System.Object.Finalize%2A>在垃圾回收期间不能在复活对象上调用。</span><span class="sxs-lookup"><span data-stu-id="ad78b-325">However, the object can only be resurrected once; <xref:System.Object.Finalize%2A> cannot be called on resurrected objects during garbage collection.</span></span> <span data-ttu-id="ad78b-326">一个操作，你实现<xref:System.Object.Finalize%2A>应永远不会采取： 它应永远不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="ad78b-326">There is one action that your implementation of <xref:System.Object.Finalize%2A> should never take: it should never throw an exception.</span></span> <span data-ttu-id="ad78b-327">如果从调用的方法引发的任何异常<xref:System.Object.Finalize%2A>处理方法<xref:System.Object.Finalize%2A>方法，运行时假设<xref:System.Object.Finalize%2A>方法返回，并且继续调用<xref:System.Object.Finalize%2A>其他对象的方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-327">If any exceptions thrown by methods called from the <xref:System.Object.Finalize%2A> method are unhandled by the <xref:System.Object.Finalize%2A> method, the runtime assumes that the <xref:System.Object.Finalize%2A> method returned and continues to call the <xref:System.Object.Finalize%2A> methods of other objects.</span></span> 
  
<a name="SafeHandle"></a>   
## <a name="the-safehandle-alternative"></a><span data-ttu-id="ad78b-328">SafeHandle 备用方法</span><span class="sxs-lookup"><span data-stu-id="ad78b-328">The SafeHandle alternative</span></span>  
 <span data-ttu-id="ad78b-329">创建可靠的终结器是通常难以进行，因为无法有关你的应用程序的状态作出假设以及因为未经处理的系统异常，如<xref:System.OutOfMemoryException>和<xref:System.StackOverflowException>终止终结器。</span><span class="sxs-lookup"><span data-stu-id="ad78b-329">Creating reliable finalizers is often difficult, because you cannot make assumptions about the state of your application, and because unhandled system exceptions such as <xref:System.OutOfMemoryException> and <xref:System.StackOverflowException> terminate the finalizer.</span></span> <span data-ttu-id="ad78b-330">而非实现终结器为您的类释放非托管的资源，你可以使用派生自的对象<xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>类来包装非托管的资源，，然后实现而无需终结器的释放模式。</span><span class="sxs-lookup"><span data-stu-id="ad78b-330">Instead of implementing a finalizer for your class to release unmanaged resources, you can use an object that is derived from the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> class to wrap your unmanaged resources, and then implement the dispose pattern without a finalizer.</span></span> <span data-ttu-id="ad78b-331">.NET Framework 提供了中的以下类<xref:Microsoft.Win32?displayProperty=nameWithType>派生自的命名空间<xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>:</span><span class="sxs-lookup"><span data-stu-id="ad78b-331">The .NET Framework provides the following classes in the <xref:Microsoft.Win32?displayProperty=nameWithType> namespace that are derived from <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>:</span></span>  
  
-   <span data-ttu-id="ad78b-332"><xref:Microsoft.Win32.SafeHandles.SafeFileHandle> 是的文件句柄的包装类。</span><span class="sxs-lookup"><span data-stu-id="ad78b-332"><xref:Microsoft.Win32.SafeHandles.SafeFileHandle> is a wrapper class for a file handle.</span></span>  
  
-   <span data-ttu-id="ad78b-333"><xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle> 为内存映射文件句柄的包装类。</span><span class="sxs-lookup"><span data-stu-id="ad78b-333"><xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle> is a wrapper class for memory-mapped file handles.</span></span>  
  
-   <span data-ttu-id="ad78b-334"><xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle> 是指向非托管内存块的指针的包装类。</span><span class="sxs-lookup"><span data-stu-id="ad78b-334"><xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle> is a wrapper class for a pointer to a block of unmanaged memory.</span></span>  
  
-   <span data-ttu-id="ad78b-335"><xref:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle><xref:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle>，和<xref:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle>是加密的句柄的包装类。</span><span class="sxs-lookup"><span data-stu-id="ad78b-335"><xref:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle>, <xref:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle>, and <xref:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle> are wrapper classes for cryptographic handles.</span></span>  
  
-   <span data-ttu-id="ad78b-336"><xref:Microsoft.Win32.SafeHandles.SafePipeHandle> 是管道句柄的包装类。</span><span class="sxs-lookup"><span data-stu-id="ad78b-336"><xref:Microsoft.Win32.SafeHandles.SafePipeHandle> is a wrapper class for pipe handles.</span></span>  
  
-   <span data-ttu-id="ad78b-337"><xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle> 是用于注册表项的句柄的包装类。</span><span class="sxs-lookup"><span data-stu-id="ad78b-337"><xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle> is a wrapper class for a handle to a registry key.</span></span>  
  
-   <span data-ttu-id="ad78b-338"><xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> 是用于的等待句柄的包装类。</span><span class="sxs-lookup"><span data-stu-id="ad78b-338"><xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> is a wrapper class for a wait handle.</span></span>  
  
 <span data-ttu-id="ad78b-339">下面的示例使用[释放模式](~/docs/standard/design-guidelines/dispose-pattern.md)而不是重写的安全句柄<xref:System.Object.Finalize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-339">The following example uses the [dispose pattern](~/docs/standard/design-guidelines/dispose-pattern.md) with safe handles instead of overriding the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="ad78b-340">它定义`FileAssociation`包装的应用程序处理具有特定文件扩展名的文件的注册表信息的类。</span><span class="sxs-lookup"><span data-stu-id="ad78b-340">It defines a `FileAssociation` class that wraps registry information about the application that handles files with a particular file extension.</span></span> <span data-ttu-id="ad78b-341">作为返回两个注册表句柄`out`参数由 Windows [RegOpenKeyEx](http://msdn.microsoft.com/library/windows/desktop/ms724897.aspx)函数调用传递到<xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle>构造函数。</span><span class="sxs-lookup"><span data-stu-id="ad78b-341">The two registry handles returned as `out` parameters by Windows [RegOpenKeyEx](http://msdn.microsoft.com/library/windows/desktop/ms724897.aspx) function calls are passed to the <xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle> constructor.</span></span> <span data-ttu-id="ad78b-342">类型的受保护`Dispose`方法然后调用`SafeRegistryHandle.Dispose`方法释放这些两个控点。</span><span class="sxs-lookup"><span data-stu-id="ad78b-342">The type's protected `Dispose` method then calls the `SafeRegistryHandle.Dispose` method  to free these two handles.</span></span>  
  
 [!code-csharp[System.Object.Finalize#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.finalize/cs/finalize_safe.cs#2)]
 [!code-vb[System.Object.Finalize#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.finalize/vb/finalize_safe.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="ad78b-343">下面的示例验证<xref:System.Object.Finalize%2A>对象可重写时，调用方法<xref:System.Object.Finalize%2A>被销毁。</span><span class="sxs-lookup"><span data-stu-id="ad78b-343">The following example verifies that the <xref:System.Object.Finalize%2A> method is called when an object that overrides <xref:System.Object.Finalize%2A> is destroyed.</span></span> <span data-ttu-id="ad78b-344">请注意，在生产应用程序，<xref:System.Object.Finalize%2A>将重写方法，以释放由对象拥有的非托管的资源。</span><span class="sxs-lookup"><span data-stu-id="ad78b-344">Note that, in a production application, the <xref:System.Object.Finalize%2A> method would be overridden to release unmanaged resources held by the object.</span></span> <span data-ttu-id="ad78b-345">另请注意，C# 示例提供了析构函数而不是重写<xref:System.Object.Finalize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-345">Also note that the C# example provides a destructor instead of overriding the <xref:System.Object.Finalize%2A> method.</span></span>  
  
 [!code-csharp[System.Object.Finalize#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.finalize/cs/finalize1.cs#1)]
 [!code-vb[System.Object.Finalize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.finalize/vb/finalize1.vb#1)]  
  
 <span data-ttu-id="ad78b-346">有关其他示例重写<xref:System.Object.Finalize%2A>方法，请参阅<xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-346">For an additional example that overrides the <xref:System.Object.Finalize%2A> method, see the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.GC.SuppressFinalize(System.Object)" />
        <altmember cref="M:System.GC.ReRegisterForFinalize(System.Object)" />
        <altmember cref="M:System.GC.WaitForPendingFinalizers" />
        <altmember cref="T:System.WeakReference" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public virtual int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ad78b-347">作为默认哈希函数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad78b-347">Serves as the default hash function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ad78b-348">当前对象的哈希代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad78b-348">A hash code for the current object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad78b-349">哈希代码是一个数字值，用于插入和标识基于哈希的集合中的对象，例如<xref:System.Collections.Generic.Dictionary%602>类，<xref:System.Collections.Hashtable>类或派生自类型<xref:System.Collections.DictionaryBase>类。</span><span class="sxs-lookup"><span data-stu-id="ad78b-349">A hash code is a numeric value that is used to insert and identify an object in a hash-based collection such as the <xref:System.Collections.Generic.Dictionary%602> class, the <xref:System.Collections.Hashtable> class, or a type derived from the <xref:System.Collections.DictionaryBase> class.</span></span> <span data-ttu-id="ad78b-350"><xref:System.Object.GetHashCode%2A>方法为需要的对象相等性的快速检查的算法提供此哈希代码。</span><span class="sxs-lookup"><span data-stu-id="ad78b-350">The <xref:System.Object.GetHashCode%2A> method provides this hash code for algorithms that need quick checks of object equality.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ad78b-351">有关如何在哈希表中使用哈希代码的信息以及一些其他的哈希代码算法，请参阅[哈希函数](http://en.wikipedia.org/wiki/Hash_function)Wikipedia 中的条目。</span><span class="sxs-lookup"><span data-stu-id="ad78b-351">For information about how hash codes are used in hash tables and for some additional hash code algorithms, see the [Hash Function](http://en.wikipedia.org/wiki/Hash_function) entry in Wikipedia.</span></span>  
  
 <span data-ttu-id="ad78b-352">是相等的相等的返回哈希代码的两个对象。</span><span class="sxs-lookup"><span data-stu-id="ad78b-352">Two objects that are equal return hash codes that are equal.</span></span> <span data-ttu-id="ad78b-353">但是，反过来并不成立： 相等的哈希代码并不表示对象相等性，因为不同 （不相等） 的对象可以具有相同的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="ad78b-353">However, the reverse is not true: equal hash codes do not imply object equality, because different (unequal) objects can have identical hash codes.</span></span> <span data-ttu-id="ad78b-354">此外，.NET Framework 并不保证的默认实现<xref:System.Object.GetHashCode%2A>方法和此方法所返回的.NET Framework 版本和平台，例如，32 位和 64 位平台之间可能不同的值。</span><span class="sxs-lookup"><span data-stu-id="ad78b-354">Furthermore, the .NET Framework does not guarantee the default implementation of the <xref:System.Object.GetHashCode%2A> method, and the value this method returns may differ between .NET Framework versions and platforms, such as 32-bit and 64-bit platforms.</span></span> <span data-ttu-id="ad78b-355">出于这些原因，请不用作此方法的默认实现的唯一对象标识符哈希的目的。</span><span class="sxs-lookup"><span data-stu-id="ad78b-355">For these reasons, do not use the default implementation of this method as a unique object identifier for hashing purposes.</span></span> <span data-ttu-id="ad78b-356">从此请按照以下两种结果操作：</span><span class="sxs-lookup"><span data-stu-id="ad78b-356">Two consequences follow from this:</span></span>  
  
-   <span data-ttu-id="ad78b-357">不应假定相等的哈希代码表示对象是否相等。</span><span class="sxs-lookup"><span data-stu-id="ad78b-357">You should not assume that equal hash codes imply object equality.</span></span>  
  
-   <span data-ttu-id="ad78b-358">永远不应将存在，或者在其中创建它，在应用程序域使用的哈希代码，因为相同的对象可能哈希处理跨应用程序域、 过程和平台。</span><span class="sxs-lookup"><span data-stu-id="ad78b-358">You should never persist or use a hash code outside the application domain in which it was created, because the same object may hash across application domains, processes, and platforms.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="ad78b-359">哈希代码旨在高效插入和基于哈希表的集合中查找。</span><span class="sxs-lookup"><span data-stu-id="ad78b-359">A hash code is intended for efficient insertion and lookup in collections that are based on a hash table.</span></span> <span data-ttu-id="ad78b-360">哈希代码不是永久的值。</span><span class="sxs-lookup"><span data-stu-id="ad78b-360">A hash code is not a permanent value.</span></span> <span data-ttu-id="ad78b-361">出于此原因：</span><span class="sxs-lookup"><span data-stu-id="ad78b-361">For this reason:</span></span>  
>   
>  -   <span data-ttu-id="ad78b-362">不序列化哈希代码值或将它们存储在数据库中。</span><span class="sxs-lookup"><span data-stu-id="ad78b-362">Do not serialize hash code values or store them in databases.</span></span>  
> -   <span data-ttu-id="ad78b-363">不使用的哈希代码作为键从是键控集合中检索对象。</span><span class="sxs-lookup"><span data-stu-id="ad78b-363">Do not use the hash code as the key to retrieve an object from a keyed collection.</span></span>  
> -   <span data-ttu-id="ad78b-364">不要跨应用程序域或进程发送的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="ad78b-364">Do not send hash codes across application domains or processes.</span></span> <span data-ttu-id="ad78b-365">在某些情况下，可能会基于每个进程或每个应用程序域计算哈希代码。</span><span class="sxs-lookup"><span data-stu-id="ad78b-365">In some cases, hash codes may be computed on a per-process or per-application domain basis.</span></span>  
> -   <span data-ttu-id="ad78b-366">不要使用而不是返回的加密哈希函数，如果你需要加密型强哈希值的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="ad78b-366">Do not use the hash code instead of a value returned by a cryptographic hashing function if you need a cryptographically strong hash.</span></span> <span data-ttu-id="ad78b-367">对于加密哈希，使用派生自的类<xref:System.Security.Cryptography.HashAlgorithm?displayProperty=nameWithType>或<xref:System.Security.Cryptography.KeyedHashAlgorithm?displayProperty=nameWithType>类。</span><span class="sxs-lookup"><span data-stu-id="ad78b-367">For cryptographic hashes, use a class derived from the <xref:System.Security.Cryptography.HashAlgorithm?displayProperty=nameWithType> or <xref:System.Security.Cryptography.KeyedHashAlgorithm?displayProperty=nameWithType> class.</span></span>  
> -   <span data-ttu-id="ad78b-368">先不要测试相等的哈希代码，以确定两个对象是否相等。</span><span class="sxs-lookup"><span data-stu-id="ad78b-368">Do not test for equality of hash codes to determine whether two objects are equal.</span></span> <span data-ttu-id="ad78b-369">（不相等的对象可以具有相同的哈希代码。）若要测试相等性，调用<xref:System.Object.ReferenceEquals%2A>或<xref:System.Object.Equals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-369">(Unequal objects can have identical hash codes.) To test for equality, call the <xref:System.Object.ReferenceEquals%2A> or <xref:System.Object.Equals%2A> method.</span></span>  
  
 <span data-ttu-id="ad78b-370"><xref:System.Object.GetHashCode%2A>派生类型可以重写方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-370">The <xref:System.Object.GetHashCode%2A> method can be overridden by a derived type.</span></span> <span data-ttu-id="ad78b-371">如果<xref:System.Object.GetHashCode%2A>是不重写，哈希代码为引用类型计算通过调用<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>的基类，计算哈希代码的方法基于对象的引用; 有关详细信息，请参阅<xref:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ad78b-371">If <xref:System.Object.GetHashCode%2A> is not overridden, hash codes for reference types are computed by calling the <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> method of the base class, which computes a hash code based on an object's reference; for more information, see <xref:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="ad78b-372">换而言之，两个对象为其<xref:System.Object.ReferenceEquals%2A>方法返回`true`具有相同的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="ad78b-372">In other words, two objects for which the <xref:System.Object.ReferenceEquals%2A> method returns `true` have identical hash codes.</span></span> <span data-ttu-id="ad78b-373">如果值类型不会重写<xref:System.Object.GetHashCode%2A>、<xref:System.ValueType.GetHashCode%2A?displayProperty=nameWithType>基本类的方法使用反射来计算基于该类型的字段的值的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="ad78b-373">If value types do not override <xref:System.Object.GetHashCode%2A>, the <xref:System.ValueType.GetHashCode%2A?displayProperty=nameWithType> method of the base class uses reflection to compute the hash code based on the values of the type's fields.</span></span> <span data-ttu-id="ad78b-374">换而言之，其字段具有相等的值的值类型具有相等的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="ad78b-374">In other words, value types whose fields have equal values have equal hash codes.</span></span> <span data-ttu-id="ad78b-375">有关重写<xref:System.Object.GetHashCode%2A>，请参阅"对继承者的说明"部分。</span><span class="sxs-lookup"><span data-stu-id="ad78b-375">For more information about overriding <xref:System.Object.GetHashCode%2A>, see the "Notes to Inheritors" section.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="ad78b-376">如果你重写<xref:System.Object.GetHashCode%2A>方法，则应重写<xref:System.Object.Equals%2A>，反之亦然。</span><span class="sxs-lookup"><span data-stu-id="ad78b-376">If you override the <xref:System.Object.GetHashCode%2A> method, you should also override <xref:System.Object.Equals%2A>, and vice versa.</span></span> <span data-ttu-id="ad78b-377">如果你重写<xref:System.Object.Equals%2A>方法返回`true`两个对象是否相等，重写的测试时<xref:System.Object.GetHashCode%2A>方法必须返回两个对象相同的值。</span><span class="sxs-lookup"><span data-stu-id="ad78b-377">If your overridden <xref:System.Object.Equals%2A> method returns `true` when two objects are tested for equality, your overridden <xref:System.Object.GetHashCode%2A> method must return the same value for the two objects.</span></span>  
  
 <span data-ttu-id="ad78b-378">如果用作哈希表中的键的对象未提供的有用实现<xref:System.Object.GetHashCode%2A>，你可以指定哈希代码提供程序通过提供<xref:System.Collections.IEqualityComparer>实现的重载之一<xref:System.Collections.Hashtable>类构造函数。</span><span class="sxs-lookup"><span data-stu-id="ad78b-378">If an object that is used as a key in a hash table does not provide a useful implementation of <xref:System.Object.GetHashCode%2A>, you can specify a hash code provider by supplying an <xref:System.Collections.IEqualityComparer> implementation to one of the overloads of the <xref:System.Collections.Hashtable> class constructor.</span></span>  
  
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a><span data-ttu-id="ad78b-379">说明 [!INCLUDE[wrt](~/includes/wrt-md.md)]</span><span class="sxs-lookup"><span data-stu-id="ad78b-379">Notes for the [!INCLUDE[wrt](~/includes/wrt-md.md)]</span></span>  
 <span data-ttu-id="ad78b-380">当调用<xref:System.Object.GetHashCode%2A>中类方法[!INCLUDE[wrt](~/includes/wrt-md.md)]，它不会覆盖的类提供的默认行为<xref:System.Object.GetHashCode%2A>。</span><span class="sxs-lookup"><span data-stu-id="ad78b-380">When you call the <xref:System.Object.GetHashCode%2A> method on a class in the [!INCLUDE[wrt](~/includes/wrt-md.md)], it provides the default behavior for classes that don’t override <xref:System.Object.GetHashCode%2A>.</span></span> <span data-ttu-id="ad78b-381">这是.NET Framework 提供的支持的一部分[!INCLUDE[wrt](~/includes/wrt-md.md)](请参阅[.NET Framework 支持为 Windows 应用商店应用和 Windows 运行时](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md))。</span><span class="sxs-lookup"><span data-stu-id="ad78b-381">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> <span data-ttu-id="ad78b-382">中的类[!INCLUDE[wrt](~/includes/wrt-md.md)]不继承<xref:System.Object>，并且不要实施<xref:System.Object.GetHashCode%2A>。</span><span class="sxs-lookup"><span data-stu-id="ad78b-382">Classes in the [!INCLUDE[wrt](~/includes/wrt-md.md)] don’t inherit <xref:System.Object>, and currently don’t implement a <xref:System.Object.GetHashCode%2A>.</span></span> <span data-ttu-id="ad78b-383">但是，它们会显示为具有<xref:System.Object.ToString%2A>， <xref:System.Object.Equals%28System.Object%29>，和<xref:System.Object.GetHashCode%2A>方法在 C# 或 Visual Basic 代码中，使用它们以及.NET Framework 为这些方法提供的默认行为时。</span><span class="sxs-lookup"><span data-stu-id="ad78b-383">However, they appear to have <xref:System.Object.ToString%2A>, <xref:System.Object.Equals%28System.Object%29>, and <xref:System.Object.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides the default behavior for these methods.</span></span>  
  
> [!NOTE]
>  [!INCLUDE[wrt](~/includes/wrt-md.md)]<span data-ttu-id="ad78b-384"> 用 C# 或 Visual Basic 编写的类可以重写<xref:System.Object.GetHashCode%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-384"> classes that are written in C# or Visual Basic can override the <xref:System.Object.GetHashCode%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad78b-385">计算具有相同或比范围较小的数字值的哈希代码的最简单方法之一<xref:System.Int32>类型是只需返回该值。</span><span class="sxs-lookup"><span data-stu-id="ad78b-385">One of the simplest ways to compute a hash code for a numeric value that has the same or a smaller range than the <xref:System.Int32> type is to simply return that value.</span></span> <span data-ttu-id="ad78b-386">下面的示例演示此类的实现`Number`结构。</span><span class="sxs-lookup"><span data-stu-id="ad78b-386">The following example shows such an implementation for a `Number` structure.</span></span>  
  
 [!code-csharp[System.Object.GetHashCode#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.gethashcode/cs/direct1.cs#1)]
 [!code-vb[System.Object.GetHashCode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.gethashcode/vb/direct1.vb#1)]  
  
 <span data-ttu-id="ad78b-387">通常情况下，类型具有多个可以参与生成的哈希代码的数据字段。</span><span class="sxs-lookup"><span data-stu-id="ad78b-387">Frequently, a type has multiple data fields that can participate in generating the hash code.</span></span> <span data-ttu-id="ad78b-388">生成的哈希代码的一种方法是组合使用这些字段`XOR (eXclusive OR)`操作，如下面的示例中所示。</span><span class="sxs-lookup"><span data-stu-id="ad78b-388">One way to generate a hash code is to combine these fields using an `XOR (eXclusive OR)` operation, as shown in the following example.</span></span>  
  
 [!code-csharp[System.Object.GetHashCode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.gethashcode/cs/xor1.cs#2)]
 [!code-vb[System.Object.GetHashCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.gethashcode/vb/xor1.vb#2)]  
  
 <span data-ttu-id="ad78b-389">前面的示例返回 (n1，n2) 的同一哈希代码和 (n2，n1)，因此，可能会生成不是所需的多个冲突。</span><span class="sxs-lookup"><span data-stu-id="ad78b-389">The previous example returns the same hash code for (n1, n2) and (n2, n1), and so may generate more collisions than are desirable.</span></span> <span data-ttu-id="ad78b-390">有多种解决方案都是可用的以便在这些情况下的哈希代码不相同。</span><span class="sxs-lookup"><span data-stu-id="ad78b-390">A number of solutions are available so that hash codes in these cases are not identical.</span></span> <span data-ttu-id="ad78b-391">一个是要返回的哈希代码`Tuple`反映每个字段的顺序的对象。</span><span class="sxs-lookup"><span data-stu-id="ad78b-391">One is to return the hash code of a `Tuple` object that reflects the order of each field.</span></span> <span data-ttu-id="ad78b-392">下面的示例演示使用的可能实现<xref:System.Tuple%602>类。</span><span class="sxs-lookup"><span data-stu-id="ad78b-392">The following example shows a possible implementation that uses the <xref:System.Tuple%602> class.</span></span> <span data-ttu-id="ad78b-393">但请注意，该实例化的性能开销`Tuple`对象可能会显著影响哈希表中存储大量对象的应用程序的整体性能。</span><span class="sxs-lookup"><span data-stu-id="ad78b-393">Note, though, that the performance overhead of instantiating a `Tuple` object may significantly impact the overall performance of an application that stores large numbers of objects in hash tables.</span></span>  
  
 [!code-csharp[System.Object.GetHashCode#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.gethashcode/cs/xor2.cs#3)]
 [!code-vb[System.Object.GetHashCode#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.gethashcode/vb/xor2.vb#3)]  
  
 <span data-ttu-id="ad78b-394">第二个备选解决方案涉及的两个或多个位由连续的字段的哈希代码进行左移权重的单个哈希代码。</span><span class="sxs-lookup"><span data-stu-id="ad78b-394">A second alternative solution involves weighting the individual hash codes by left-shifting the hash codes of successive fields by two or more bits.</span></span> <span data-ttu-id="ad78b-395">最佳状况运行，而不是被丢弃，移出第 31 位的位应环绕而不是被放弃。</span><span class="sxs-lookup"><span data-stu-id="ad78b-395">Optimally, instead of being discarded, bits shifted beyond bit 31 should wrap around rather than be discarded.</span></span> <span data-ttu-id="ad78b-396">由于 C# 和 Visual Basic 中的左移运算符的情况下，位将被丢弃，这就需要创建一个左的 shift 包装方法如下所示：</span><span class="sxs-lookup"><span data-stu-id="ad78b-396">Since bits are discarded by the left-shift operators in both C# and Visual Basic, this requires creating a left shift-and-wrap method like the following:</span></span>  
  
 [!code-csharp[System.Object.GetHashCode#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.gethashcode/cs/shift1.cs#4)]
 [!code-vb[System.Object.GetHashCode#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.gethashcode/vb/shift1.vb#4)]  
  
 <span data-ttu-id="ad78b-397">下面的示例然后使用此 shift 包装方法来计算的哈希代码`Point`前面的示例中使用结构。</span><span class="sxs-lookup"><span data-stu-id="ad78b-397">The following example then uses this shift-and-wrap method to compute the hash code of the `Point` structure used in the previous examples.</span></span>  
  
 [!code-csharp[System.Object.GetHashCode#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.gethashcode/cs/shift1.cs#5)]
 [!code-vb[System.Object.GetHashCode#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.gethashcode/vb/shift1.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="ad78b-398">哈希函数用于快速将生成一个对象的值相对应的数字 （哈希代码）。</span>
            <span class="sxs-lookup">
              <span data-stu-id="ad78b-398">A hash function is used to quickly generate a number (hash code) that corresponds to the value of an object.</span>
            </span>
            <span data-ttu-id="ad78b-399">哈希函数通常是特定于每种类型，和的唯一性，必须使用至少一个实例字段作为输入。</span>
            <span class="sxs-lookup">
              <span data-stu-id="ad78b-399">Hash functions are usually specific to each type and, for uniqueness, must use at least one of the instance fields as input.</span>
            </span>
            <span data-ttu-id="ad78b-400">使用静态字段的值，不应计算哈希代码。</span>
            <span class="sxs-lookup">
              <span data-stu-id="ad78b-400">Hash codes should not be computed by using the values of static fields.</span>
            </span>
            <span data-ttu-id="ad78b-401">类派生自<see cref="T:System.Object" />、<see langword="GetHashCode" />方法才可以委托给基类<see cref="M:System.Object.GetHashCode" />仅当派生的类定义的相等性可引用相等性的实现。</span>
            <span class="sxs-lookup">
              <span data-stu-id="ad78b-401">For classes derived from <see cref="T:System.Object" />, the <see langword="GetHashCode" /> method can delegate to the base class <see cref="M:System.Object.GetHashCode" /> implementation only if the derived class defines equality to be reference equality.</span>
            </span>
            <span data-ttu-id="ad78b-402">默认实现<see cref="M:System.Object.GetHashCode" />对于引用类型返回的哈希代码，它等效于由一个<see cref="M:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)" />方法。</span>
            <span class="sxs-lookup">
              <span data-stu-id="ad78b-402">The default implementation of <see cref="M:System.Object.GetHashCode" /> for reference types returns a hash code that is equivalent to the one returned by the <see cref="M:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)" /> method.</span>
            </span>
            <span data-ttu-id="ad78b-403">您可以重写<see cref="M:System.Object.GetHashCode" />对于不可变的引用类型。</span>
            <span class="sxs-lookup">
              <span data-stu-id="ad78b-403">You can override <see cref="M:System.Object.GetHashCode" /> for immutable reference types.</span>
            </span>
            <span data-ttu-id="ad78b-404">一般情况下，对于可变引用类型，则应重写<see cref="M:System.Object.GetHashCode" />才：</span>
            <span class="sxs-lookup">
              <span data-stu-id="ad78b-404">In general, for mutable reference types, you should override <see cref="M:System.Object.GetHashCode" /> only if:</span>
            </span>  
  
-   <span data-ttu-id="ad78b-405">您可以计算字段不是可变; 中的哈希代码或</span><span class="sxs-lookup"><span data-stu-id="ad78b-405">You can compute the hash code from fields that are not mutable; or</span></span>  
  
-   <span data-ttu-id="ad78b-406">你可以确保可变对象的哈希代码不会更改时的对象包含在一个集合，其中依赖于其哈希代码。</span><span class="sxs-lookup"><span data-stu-id="ad78b-406">You can ensure that the hash code of a mutable object does not change while the object is contained in a collection that relies on its hash code.</span></span><span data-ttu-id="ad78b-407">否则，你可能认为，在哈希表中丢失的可变对象。</span><span class="sxs-lookup"><span data-stu-id="ad78b-407">Otherwise, you might think that the mutable object is lost in the hash table.</span></span><span data-ttu-id="ad78b-408">如果你选择重写<see cref="M:System.Object.GetHashCode" />对于可变的引用类型，你的文档应将其清除该对象存储在哈希表中时，你的类型的用户不应修改对象值。</span><span class="sxs-lookup"><span data-stu-id="ad78b-408">If you do choose to override <see cref="M:System.Object.GetHashCode" /> for a mutable reference type, your documentation should make it clear that users of your type should not modify object values while the object is stored in a hash table.</span></span><span data-ttu-id="ad78b-409">对于值类型，<see cref="M:System.ValueType.GetHashCode" />提供一个默认哈希代码实现，使用反射。</span><span class="sxs-lookup"><span data-stu-id="ad78b-409">For value types, <see cref="M:System.ValueType.GetHashCode" /> provides a default hash code implementation that uses reflection.</span></span><span data-ttu-id="ad78b-410">你应考虑重写它以提高性能。</span><span class="sxs-lookup"><span data-stu-id="ad78b-410">You should consider overriding it for better performance.</span></span><block subset="none" type="note"><para><span data-ttu-id="ad78b-411">有关详细信息和计算各种不同的方式的哈希代码的示例，请参阅示例部分。</span><span class="sxs-lookup"><span data-stu-id="ad78b-411">For more information and examples that compute hash codes in a variety of ways, see the Examples section.</span></span></para></block><span data-ttu-id="ad78b-412">哈希函数必须具有以下属性：</span><span class="sxs-lookup"><span data-stu-id="ad78b-412">A hash function must have the following properties:</span></span>  
  
-   <span data-ttu-id="ad78b-413">如果两个对象的比较结果为相等，<see cref="M:System.Object.GetHashCode" />每个对象的方法必须返回相同的值。</span><span class="sxs-lookup"><span data-stu-id="ad78b-413">If two objects compare as equal, the <see cref="M:System.Object.GetHashCode" /> method for each object must return the same value.</span></span><span data-ttu-id="ad78b-414">但是，如果两个对象不相等，比较<see cref="M:System.Object.GetHashCode" />两个对象的方法不需要返回不同的值。</span><span class="sxs-lookup"><span data-stu-id="ad78b-414">However, if two objects do not compare as equal, the <see cref="M:System.Object.GetHashCode" /> methods for the two objects do not have to return different values.</span></span>  
  
-   <span data-ttu-id="ad78b-415"><see cref="M:System.Object.GetHashCode" />对象的方法必须始终返回相同的哈希代码，只要不没有对确定返回值的对象的对象状态的任何修改[System.Object.Equals](xref:System.Object.Equals*)方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-415">The <see cref="M:System.Object.GetHashCode" /> method for an object must consistently return the same hash code as long as there is no modification to the object state that determines the return value of the object's [System.Object.Equals](xref:System.Object.Equals*) method.</span></span><span data-ttu-id="ad78b-416">请注意，这是仅适用当前执行应用程序，并且，如果再次运行应用程序，也可以返回不同的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="ad78b-416">Note that this is true only for the current execution of an application, and that a different hash code can be returned if the application is run again.</span></span>  
  
-   <span data-ttu-id="ad78b-417">为了获得最佳性能，哈希函数应生成均匀分布于所有输入，包括已大量群集化的输入。</span><span class="sxs-lookup"><span data-stu-id="ad78b-417">For the best performance, a hash function should generate an even distribution for all input, including input that is heavily clustered.</span></span><span data-ttu-id="ad78b-418">含意为对对象状态的小修改应导致大型修改哈希表的最佳性能的生成哈希代码。</span><span class="sxs-lookup"><span data-stu-id="ad78b-418">An implication is that small modifications to object state should result in large modifications to the resulting hash code for best hash table performance.</span></span>  
  
-   <span data-ttu-id="ad78b-419">哈希函数应该是成本较低，来计算。</span><span class="sxs-lookup"><span data-stu-id="ad78b-419">Hash functions should be inexpensive to compute.</span></span>  
  
-   <span data-ttu-id="ad78b-420"><see cref="M:System.Object.GetHashCode" />方法不应引发异常。</span><span class="sxs-lookup"><span data-stu-id="ad78b-420">The <see cref="M:System.Object.GetHashCode" /> method should not throw exceptions.</span></span><span data-ttu-id="ad78b-421">例如，实现<see cref="M:System.String.GetHashCode" />方法提供的<see cref="T:System.String" />类返回相同的字符串值的相同的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="ad78b-421">For example, the implementation of the <see cref="M:System.String.GetHashCode" /> method provided by the <see cref="T:System.String" /> class returns identical hash codes for identical string values.</span></span><span data-ttu-id="ad78b-422">因此，两个<see cref="T:System.String" />对象返回相同的哈希代码，如果它们表示相同的字符串值。</span><span class="sxs-lookup"><span data-stu-id="ad78b-422">Therefore, two <see cref="T:System.String" /> objects return the same hash code if they represent the same string value.</span></span><span data-ttu-id="ad78b-423">此外，该方法使用的所有字符在字符串中来生成相当随机的分布式输出，即使输入群集在某些范围内 (例如，许多用户可能具有仅包含低 128 ASCII 字符，即使的字符串字符串可以包含任何 65535 个 Unicode 字符）。</span><span class="sxs-lookup"><span data-stu-id="ad78b-423">Also, the method uses all the characters in the string to generate reasonably randomly distributed output, even when the input is clustered in certain ranges (for example, many users might have strings that contain only the lower 128 ASCII characters, even though a string can contain any of the 65,535 Unicode characters).</span></span><span data-ttu-id="ad78b-424">在类上提供的很好的哈希函数可能会将这些对象添加到哈希表的性能显著影响。</span><span class="sxs-lookup"><span data-stu-id="ad78b-424">Providing a good hash function on a class can significantly affect the performance of adding those objects to a hash table.</span></span><span data-ttu-id="ad78b-425">在具有键提供哈希函数的良好实现哈希表中，搜索的元素所用常量时间内的 （例如，o （1） 操作）。</span><span class="sxs-lookup"><span data-stu-id="ad78b-425">In a hash table with keys that provide a good implementation of a hash function, searching for an element takes constant time (for example, an O(1) operation).</span></span><span data-ttu-id="ad78b-426">哈希函数的不佳实现哈希表，在搜索的性能取决于哈希表中的项的数目 (例如，O (`n`) 操作，其中`n`是哈希表中的项的数目)。</span><span class="sxs-lookup"><span data-stu-id="ad78b-426">In a hash table with a poor implementation of a hash function, the performance of a search depends on the number of items in the hash table (for example, an O(`n`) operation, where `n` is the number of items in the hash table).</span></span><span data-ttu-id="ad78b-427">恶意用户可以输入增加的冲突，会大大降低取决于哈希表，在以下情况下的应用程序的性能数量的数据：</span><span class="sxs-lookup"><span data-stu-id="ad78b-427">A malicious user can input data that increases the number of collisions, which can significantly degrade the performance of applications that depend on hash tables, under the following conditions:</span></span>  
  
-   <span data-ttu-id="ad78b-428">当哈希函数生成频繁冲突。</span><span class="sxs-lookup"><span data-stu-id="ad78b-428">When hash functions produce frequent collisions.</span></span>  
  
-   <span data-ttu-id="ad78b-429">当哈希表中的对象的大部分生成相等或在大约等于另一个的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="ad78b-429">When a large proportion of objects in a hash table produce hash codes that are equal or approximately equal to one another.</span></span>  
  
-   <span data-ttu-id="ad78b-430">当用户输入的数据从其计算的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="ad78b-430">When users input the data from which the hash code is computed.</span></span><span data-ttu-id="ad78b-431">派生类重写<see cref="M:System.Object.GetHashCode" />还必须重写<see cref="M:System.Object.Equals(System.Object)" />若要确保视为相等的两个对象具有相同的哈希代码; 否则为<see cref="T:System.Collections.Hashtable" />类型可能无法正常工作。</span><span class="sxs-lookup"><span data-stu-id="ad78b-431">Derived classes that override <see cref="M:System.Object.GetHashCode" /> must also override <see cref="M:System.Object.Equals(System.Object)" /> to guarantee that two objects considered equal have the same hash code; otherwise, the <see cref="T:System.Collections.Hashtable" /> type might not work correctly.</span></span></para>
        </block>
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
        <altmember cref="M:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetType();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ad78b-432">获取当前实例的 <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad78b-432">Gets the <see cref="T:System.Type" /> of the current instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ad78b-433">当前实例的准确运行时类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad78b-433">The exact runtime type of the current instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad78b-434">因为<xref:System.Object?displayProperty=nameWithType>在.NET Framework 类型系统中，是所有类型的基类<xref:System.Object.GetType%2A>方法可以用于返回<xref:System.Type>表示所有.NET Framework 类型的对象。</span><span class="sxs-lookup"><span data-stu-id="ad78b-434">Because <xref:System.Object?displayProperty=nameWithType> is the base class for all types in the .NET Framework type system, the <xref:System.Object.GetType%2A> method can be used to return <xref:System.Type> objects that represent all .NET Framework types.</span></span> <span data-ttu-id="ad78b-435">.NET Framework 可识别类型的以下五个类别：</span><span class="sxs-lookup"><span data-stu-id="ad78b-435">The .NET Framework recognizes the following five categories of types:</span></span>  
  
-   <span data-ttu-id="ad78b-436">类，该类派生自<xref:System.Object?displayProperty=nameWithType>，</span><span class="sxs-lookup"><span data-stu-id="ad78b-436">Classes, which are derived from <xref:System.Object?displayProperty=nameWithType>,</span></span>  
  
-   <span data-ttu-id="ad78b-437">值类型，派生自<xref:System.ValueType?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ad78b-437">Value types, which are derived from <xref:System.ValueType?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="ad78b-438">接口，派生自<xref:System.Object?displayProperty=nameWithType>从.NET Framework 2.0 开始。</span><span class="sxs-lookup"><span data-stu-id="ad78b-438">Interfaces, which are derived from <xref:System.Object?displayProperty=nameWithType> starting with the .NET Framework 2.0.</span></span>  
  
-   <span data-ttu-id="ad78b-439">枚举，派生自<xref:System.Enum?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ad78b-439">Enumerations, which are derived from <xref:System.Enum?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="ad78b-440">委托，它派生自<xref:System.MulticastDelegate?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ad78b-440">Delegates, which are derived from <xref:System.MulticastDelegate?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="ad78b-441">两个对象`x`和`y`具有相同的运行时类型`Object.ReferenceEquals(x.GetType(),y.GetType())`返回`true`。</span><span class="sxs-lookup"><span data-stu-id="ad78b-441">For two objects `x` and `y` that have identical runtime types, `Object.ReferenceEquals(x.GetType(),y.GetType())` returns `true`.</span></span> <span data-ttu-id="ad78b-442">下面的示例使用<xref:System.Object.GetType%2A>方法替换<xref:System.Object.ReferenceEquals%2A>方法来确定一个数字值是否与其他两个数值的类型相同。</span><span class="sxs-lookup"><span data-stu-id="ad78b-442">The following example uses the <xref:System.Object.GetType%2A> method with the <xref:System.Object.ReferenceEquals%2A> method to determine whether one numeric value is the same type as two other numeric values.</span></span>  
  
 [!code-csharp[System.Object.GetType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.gettype/cs/gettype1.cs#1)]
 [!code-vb[System.Object.GetType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.gettype/vb/gettype1.vb#1)]  
  
> [!NOTE]
>  <span data-ttu-id="ad78b-443">若要确定对象是否是特定类型，可以使用你的语言的类型比较关键字或构造。</span><span class="sxs-lookup"><span data-stu-id="ad78b-443">To determine whether an object is a specific type, you can use your language's type comparison keyword or construct.</span></span> <span data-ttu-id="ad78b-444">例如，你可以使用`TypeOf…Is`在 Visual Basic 中构造或`is`C# 中的关键字。</span><span class="sxs-lookup"><span data-stu-id="ad78b-444">For example, you can use the `TypeOf…Is` construct in Visual Basic or the `is` keyword in C#.</span></span>  
  
 <span data-ttu-id="ad78b-445"><xref:System.Object.GetType%2A>方法由派生自的所有类型继承<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="ad78b-445">The <xref:System.Object.GetType%2A> method is inherited by all types that derive from <xref:System.Object>.</span></span> <span data-ttu-id="ad78b-446">这意味着，除了使用你自己的语言的比较关键字，你可以使用<xref:System.Object.GetType%2A>方法来确定的一种特定的对象，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="ad78b-446">This means that, in addition to using your own language's comparison keyword, you can use the <xref:System.Object.GetType%2A> method to determine the type of a particular object, as the following example shows.</span></span>  
  
 [!code-csharp[System.Object.GetType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.gettype/cs/GetTypeEx2.cs#2)]
 [!code-vb[System.Object.GetType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.gettype/vb/GetTypeEx2.vb#2)]  
  
 <span data-ttu-id="ad78b-447"><xref:System.Type>对象公开的类的当前关联的元数据<xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="ad78b-447">The <xref:System.Type> object exposes the metadata associated with the class of the current <xref:System.Object>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad78b-448">下面的代码示例演示<xref:System.Object.GetType%2A>返回当前实例的运行时类型。</span><span class="sxs-lookup"><span data-stu-id="ad78b-448">The following code example demonstrates that <xref:System.Object.GetType%2A> returns the runtime type of the current instance.</span></span>  
  
 [!code-cpp[ECMA-System.Object.GetType#1](~/samples/snippets/cpp/VS_Snippets_CLR/ECMA-System.Object.GetType/CPP/gettype.cpp#1)]
 [!code-csharp[ECMA-System.Object.GetType#1](~/samples/snippets/csharp/VS_Snippets_CLR/ECMA-System.Object.GetType/CS/gettype.cs#1)]
 [!code-vb[ECMA-System.Object.GetType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ECMA-System.Object.GetType/VB/gettype.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
      </Docs>
    </Member>
    <Member MemberName="MemberwiseClone">
      <MemberSignature Language="C#" Value="protected object MemberwiseClone ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance object MemberwiseClone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.MemberwiseClone" />
      <MemberSignature Language="VB.NET" Value="Protected Function MemberwiseClone () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Object ^ MemberwiseClone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ad78b-449">创建当前 <see cref="T:System.Object" /> 的浅表副本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad78b-449">Creates a shallow copy of the current <see cref="T:System.Object" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ad78b-450">当前 <see cref="T:System.Object" /> 的浅表副本。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad78b-450">A shallow copy of the current <see cref="T:System.Object" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad78b-451"><xref:System.Object.MemberwiseClone%2A>方法创建的新对象，然后将当前对象的非静态字段复制到新的对象创建的浅表副本。</span><span class="sxs-lookup"><span data-stu-id="ad78b-451">The <xref:System.Object.MemberwiseClone%2A> method creates a shallow copy by creating a new object, and then copying the nonstatic fields of the current object to the new object.</span></span> <span data-ttu-id="ad78b-452">如果字段是值类型，则执行字段的按位复制。</span><span class="sxs-lookup"><span data-stu-id="ad78b-452">If a field is a value type, a bit-by-bit copy of the field is performed.</span></span> <span data-ttu-id="ad78b-453">如果字段是引用类型，引用将复制，但被引用的对象不;因此，原始对象和其克隆引用同一对象。</span><span class="sxs-lookup"><span data-stu-id="ad78b-453">If a field is a reference type, the reference is copied but the referred object is not; therefore, the original object and its clone refer to the same object.</span></span>  
  
 <span data-ttu-id="ad78b-454">例如，考虑对象称为 X 引用对象 A 和 B，反过来，引用对象 c。X 的浅表副本创建新的对象 X2 也引用对象 A 和 b。与此相反，X 的深层副本创建新对象 X2 引用 A2 和 B2，是的一个副本的新对象并 B.B2，反过来，引用新对象 C2，这是 C 的副本。该示例说明浅和深层复制操作之间的差异。</span><span class="sxs-lookup"><span data-stu-id="ad78b-454">For example, consider an object called X that references objects A and B. Object B, in turn, references object C. A shallow copy of X creates new object X2 that also references objects A and B. In contrast, a deep copy of X creates a new object X2 that references the new objects A2 and B2, which are copies of A and B. B2, in turn, references the new object C2, which is a copy of C. The example illustrates the difference between a shallow and a deep copy operation.</span></span>  
  
 <span data-ttu-id="ad78b-455">有很多方法可以实现深层复制操作，如果浅表复制操作由<xref:System.Object.MemberwiseClone%2A>方法并不满足你的需求。</span><span class="sxs-lookup"><span data-stu-id="ad78b-455">There are numerous ways to implement a deep copy operation if the shallow copy operation performed by the <xref:System.Object.MemberwiseClone%2A> method does not meet your needs.</span></span> <span data-ttu-id="ad78b-456">其中包括：</span><span class="sxs-lookup"><span data-stu-id="ad78b-456">These include the following:</span></span>  
  
-   <span data-ttu-id="ad78b-457">调用类构造函数要复制可以使用来自第一个对象的属性值创建第二个对象的对象。</span><span class="sxs-lookup"><span data-stu-id="ad78b-457">Call a class constructor of the object to be copied to create a second object with property values taken from the first object.</span></span> <span data-ttu-id="ad78b-458">这假定，对象的值完全由其类构造函数中定义。</span><span class="sxs-lookup"><span data-stu-id="ad78b-458">This assumes that the values of an object are entirely defined by its class constructor.</span></span>  
  
-   <span data-ttu-id="ad78b-459">调用<xref:System.Object.MemberwiseClone%2A>方法创建一个对象，对象的浅表副本并将其值是与原始对象的任何属性或其值是引用类型的字段相同的新对象。</span><span class="sxs-lookup"><span data-stu-id="ad78b-459">Call the <xref:System.Object.MemberwiseClone%2A> method to create a shallow copy of an object, and then assign new objects whose values are the same as the original object to any properties or fields whose values are reference types.</span></span> <span data-ttu-id="ad78b-460">`DeepCopy`方法在示例中演示了此方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-460">The `DeepCopy` method in the example illustrates this approach.</span></span>  
  
-   <span data-ttu-id="ad78b-461">序列化对象是较深复制，，然后将序列化的数据还原到另一个对象变量。</span><span class="sxs-lookup"><span data-stu-id="ad78b-461">Serialize the object to be deep copied, and then restore the serialized data to a different object variable.</span></span>  
  
-   <span data-ttu-id="ad78b-462">使用具有递归反射来执行深层复制操作。</span><span class="sxs-lookup"><span data-stu-id="ad78b-462">Use reflection with recursion to perform the deep copy operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad78b-463">下面的示例演示<xref:System.Object.MemberwiseClone%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-463">The following example illustrates the <xref:System.Object.MemberwiseClone%2A> method.</span></span> <span data-ttu-id="ad78b-464">它定义`ShallowCopy`调用的方法<xref:System.Object.MemberwiseClone%2A>方法来执行上的浅表复制操作`Person`对象。</span><span class="sxs-lookup"><span data-stu-id="ad78b-464">It defines a `ShallowCopy` method that calls the <xref:System.Object.MemberwiseClone%2A> method to perform a shallow copy operation on a `Person` object.</span></span> <span data-ttu-id="ad78b-465">它还定义`DeepCopy`执行深层复制操作的方法`Person`对象。</span><span class="sxs-lookup"><span data-stu-id="ad78b-465">It also defines a `DeepCopy` method that performs a deep copy operation on a `Person` object.</span></span>  
  
 [!code-csharp[System.Object.MemberwiseClone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.memberwiseclone/cs/memberwiseclone1.cs#1)]
 [!code-vb[System.Object.MemberwiseClone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.memberwiseclone/vb/memberwiseclone1.vb#1)]  
  
 <span data-ttu-id="ad78b-466">在此示例中，`Person.IdInfo`属性返回`IdInfo`对象。</span><span class="sxs-lookup"><span data-stu-id="ad78b-466">In this example, the `Person.IdInfo` property returns an `IdInfo` object.</span></span> <span data-ttu-id="ad78b-467">如示例所示，输出时`Person`通过调用克隆对象<xref:System.Object.MemberwiseClone%2A>方法时，克隆`Person`对象是原始对象，而的独立副本，只不过它们共享相同`Person.IdInfo`对象引用。</span><span class="sxs-lookup"><span data-stu-id="ad78b-467">As the output from the example shows, when a `Person` object is cloned by calling the <xref:System.Object.MemberwiseClone%2A> method, the cloned `Person` object is an independent copy of the original object, except that they share the same `Person.IdInfo` object reference.</span></span> <span data-ttu-id="ad78b-468">因此，修改克隆的`Person.IdInfo`属性更改原始对象的`Person.IdInfo`属性。</span><span class="sxs-lookup"><span data-stu-id="ad78b-468">As a result, modifying the clone's `Person.IdInfo` property changes the original object's `Person.IdInfo` property.</span></span> <span data-ttu-id="ad78b-469">另一方面，执行深层副本操作时，克隆`Person`对象，包括其`Person.IdInfo`属性，可以进行修改而不会影响原始对象。</span><span class="sxs-lookup"><span data-stu-id="ad78b-469">On the other hand, when a deep copy operation is performed, the cloned `Person` object, including its `Person.IdInfo` property, can be modified without affecting the original object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceEquals">
      <MemberSignature Language="C#" Value="public static bool ReferenceEquals (object objA, object objB);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ReferenceEquals(object objA, object objB) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.ReferenceEquals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReferenceEquals (objA As Object, objB As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool ReferenceEquals(System::Object ^ objA, System::Object ^ objB);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objA" Type="System.Object" />
        <Parameter Name="objB" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="objA">
          <span data-ttu-id="ad78b-470">要比较的第一个对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad78b-470">The first object to compare.</span>
          </span>
        </param>
        <param name="objB">
          <span data-ttu-id="ad78b-471">要比较的第二个对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad78b-471">The second object  to compare.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ad78b-472">确定指定的 <see cref="T:System.Object" /> 实例是否是相同的实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad78b-472">Determines whether the specified <see cref="T:System.Object" /> instances are the same instance.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ad78b-473">如果 <paramref name="objA" /> 是与 <paramref name="objB" /> 相同的实例，或两者均为 null，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad78b-473">
              <see langword="true" /> if <paramref name="objA" /> is the same instance as <paramref name="objB" /> or if both are **null**; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad78b-474">与不同<xref:System.Object.Equals%2A>方法和相等运算符，<xref:System.Object.ReferenceEquals%2A>不重写方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-474">Unlike the <xref:System.Object.Equals%2A> method and the equality operator, the <xref:System.Object.ReferenceEquals%2A> method cannot be overridden.</span></span> <span data-ttu-id="ad78b-475">因此，如果你想要测试两个对象是否相等的引用和你不确定的实现`Equals`方法时，你可以调用<xref:System.Object.ReferenceEquals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-475">Because of this, if you want to test two object references for equality and you are unsure about the implementation of the `Equals` method, you can call the <xref:System.Object.ReferenceEquals%2A> method.</span></span>  
  
 <span data-ttu-id="ad78b-476">但是的返回值<xref:System.Object.ReferenceEquals%2A>方法可能看起来存在异常在这些两种方案：</span><span class="sxs-lookup"><span data-stu-id="ad78b-476">However, the return value of the <xref:System.Object.ReferenceEquals%2A> method may appear to be anomalous in these two scenarios:</span></span>  
  
-   <span data-ttu-id="ad78b-477">比较值类型。</span><span class="sxs-lookup"><span data-stu-id="ad78b-477">When comparing value types.</span></span> <span data-ttu-id="ad78b-478">如果`objA`和`objB`是值类型，它们先它们传递给装箱<xref:System.Object.ReferenceEquals%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-478">If `objA` and `objB` are value types, they are boxed before they are passed to the <xref:System.Object.ReferenceEquals%2A> method.</span></span> <span data-ttu-id="ad78b-479">这意味着，如果这两个`objA`和`objB`表示值类型，同一个实例<xref:System.Object.ReferenceEquals%2A>方法尽管如此返回`false`，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="ad78b-479">This means that if both `objA` and `objB` represent the same instance of a value type, the <xref:System.Object.ReferenceEquals%2A> method nevertheless returns `false`, as the following example shows.</span></span>  
  
     [!code-csharp[System.Object.ReferenceEquals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.referenceequals/cs/referenceequals4.cs#1)]
     [!code-vb[System.Object.ReferenceEquals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.referenceequals/vb/referenceequals4.vb#1)]  
  
     <span data-ttu-id="ad78b-480">装箱值类型的信息，请参阅[装箱和取消装箱](~/docs/csharp/programming-guide/types/boxing-and-unboxing.md)。</span><span class="sxs-lookup"><span data-stu-id="ad78b-480">For information on boxing value types, see [Boxing and Unboxing](~/docs/csharp/programming-guide/types/boxing-and-unboxing.md).</span></span>  
  
-   <span data-ttu-id="ad78b-481">当比较字符串。</span><span class="sxs-lookup"><span data-stu-id="ad78b-481">When comparing strings.</span></span> <span data-ttu-id="ad78b-482">如果`objA`和`objB`都是字符串，<xref:System.Object.ReferenceEquals%2A>方法返回`true`如果字符串暂留。</span><span class="sxs-lookup"><span data-stu-id="ad78b-482">If `objA` and `objB` are strings, the <xref:System.Object.ReferenceEquals%2A> method returns `true` if the string is interned.</span></span> <span data-ttu-id="ad78b-483">它不执行测试的值相等。</span><span class="sxs-lookup"><span data-stu-id="ad78b-483">It does not perform a test for value equality.</span></span>  <span data-ttu-id="ad78b-484">在下面的示例中，`s1`和`s2`因为它们是单个暂存字符串的两个实例是否相等。</span><span class="sxs-lookup"><span data-stu-id="ad78b-484">In the following example, `s1` and `s2` are equal because they are two instances of a single interned string.</span></span> <span data-ttu-id="ad78b-485">但是，`s3`和`s4`是否不相等，因为尽管它们都具有相同的字符串值，但该字符串不暂留。</span><span class="sxs-lookup"><span data-stu-id="ad78b-485">However, `s3` and `s4` are not equal, because although they are have identical string values, that string is not interned.</span></span>  
  
     [!code-csharp[System.Object.ReferenceEquals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.referenceequals/cs/referenceequalsa.cs#2)]
     [!code-vb[System.Object.ReferenceEquals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.referenceequals/vb/referenceequalsa.vb#2)]  
  
     <span data-ttu-id="ad78b-486">有关字符串暂留的详细信息，请参阅<xref:System.String.IsInterned%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ad78b-486">For more information about string interning, see <xref:System.String.IsInterned%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ad78b-487">下面的示例使用<xref:System.Object.ReferenceEquals%2A>以确定两个对象是否相同的实例。</span><span class="sxs-lookup"><span data-stu-id="ad78b-487">The following example uses <xref:System.Object.ReferenceEquals%2A> to determine if two objects are the same instance.</span></span>  
  
 [!code-cpp[ECMA-System.Object.ReferenceEquals#1](~/samples/snippets/cpp/VS_Snippets_CLR/ECMA-System.Object.ReferenceEquals/CPP/referenceequals.cpp#1)]
 [!code-csharp[ECMA-System.Object.ReferenceEquals#1](~/samples/snippets/csharp/VS_Snippets_CLR/ECMA-System.Object.ReferenceEquals/CS/referenceequals.cs#1)]
 [!code-vb[ECMA-System.Object.ReferenceEquals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ECMA-System.Object.ReferenceEquals/vb/referenceequals.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public virtual string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Object.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="ad78b-488">返回表示当前对象的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad78b-488">Returns a string that represents the current object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ad78b-489">表示当前对象的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="ad78b-489">A string that represents the current object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad78b-490"><xref:System.Object.ToString%2A?displayProperty=nameWithType> 主要格式设置.NET Framework 中的方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-490"><xref:System.Object.ToString%2A?displayProperty=nameWithType> is the major formatting method in the .NET Framework.</span></span> <span data-ttu-id="ad78b-491">以便它适合于显示，它将对象转换为其字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="ad78b-491">It converts an object to its string representation so that it is suitable for display.</span></span> <span data-ttu-id="ad78b-492">(有关格式设置支持.NET Framework 中的信息，请参阅[格式化类型](~/docs/standard/base-types/formatting-types.md)。)默认实现<xref:System.Object.ToString%2A?displayProperty=nameWithType>方法返回的对象类型的完全限定的名称。</span><span class="sxs-lookup"><span data-stu-id="ad78b-492">(For information about formatting support in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).) Default implementations of the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method return the fully qualified name of the object's type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="ad78b-493">你可能已达到了此页从成员列表中的另一种类型，按照以下链接。</span><span class="sxs-lookup"><span data-stu-id="ad78b-493">You may have reached this page by following the link from the member list of another type.</span></span> <span data-ttu-id="ad78b-494">这是因为该类型不会覆盖<xref:System.Object.ToString%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ad78b-494">That is because that type does not override <xref:System.Object.ToString%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="ad78b-495">相反，它继承的功能<xref:System.Object.ToString%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-495">Instead, it inherits the functionality of the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="ad78b-496">经常重写类型<xref:System.Object.ToString%2A?displayProperty=nameWithType>方法以提供更适合的字符串表示形式的特定类型。</span><span class="sxs-lookup"><span data-stu-id="ad78b-496">Types frequently override the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method to provide a more suitable string representation of a particular type.</span></span> <span data-ttu-id="ad78b-497">类型也经常重载<xref:System.Object.ToString%2A?displayProperty=nameWithType>方法以提供支持的格式字符串或区分区域性的格式。</span><span class="sxs-lookup"><span data-stu-id="ad78b-497">Types also frequently overload the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method to provide support for format strings or culture-sensitive formatting.</span></span>  
  
 <span data-ttu-id="ad78b-498">本节内容：</span><span class="sxs-lookup"><span data-stu-id="ad78b-498">In this section:</span></span>  
  
 <span data-ttu-id="ad78b-499">[默认 Object.ToString() 方法](#Default) </span><span class="sxs-lookup"><span data-stu-id="ad78b-499">[The default Object.ToString() method](#Default) </span></span>  
 <span data-ttu-id="ad78b-500">[重写 Object.ToString() 方法](#Overriding) </span><span class="sxs-lookup"><span data-stu-id="ad78b-500">[Overriding the Object.ToString() method](#Overriding) </span></span>  
 <span data-ttu-id="ad78b-501">[重载 ToString 方法](#Overloading) </span><span class="sxs-lookup"><span data-stu-id="ad78b-501">[Overloading the ToString method](#Overloading) </span></span>  
 <span data-ttu-id="ad78b-502">[扩展 Object.ToString 方法](#Extending) </span><span class="sxs-lookup"><span data-stu-id="ad78b-502">[Extending the Object.ToString method](#Extending) </span></span>  
 [<span data-ttu-id="ad78b-503">Windows 运行时的注意事项</span><span class="sxs-lookup"><span data-stu-id="ad78b-503">Notes for the Windows Runtime</span></span>](#WinRT)  
  
<a name="Default"></a>   
## <a name="the-default-objecttostring-method"></a><span data-ttu-id="ad78b-504">默认 Object.ToString() 方法</span><span class="sxs-lookup"><span data-stu-id="ad78b-504">The default Object.ToString() method</span></span>  
 <span data-ttu-id="ad78b-505">默认实现<xref:System.Object.ToString%2A>方法返回的类型的完全限定的名称<xref:System.Object>，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="ad78b-505">The default implementation of the <xref:System.Object.ToString%2A> method returns the fully qualified name of the type of the <xref:System.Object>, as the following example shows.</span></span>  
  
 [!code-cpp[System.Object.ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.object.tostring/cpp/tostring1.cpp#1)]
 [!code-csharp[System.Object.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.tostring/cs/tostring1.cs#1)]
 [!code-vb[System.Object.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.tostring/vb/tostring1.vb#1)]  
  
 <span data-ttu-id="ad78b-506">因为<xref:System.Object>是所有引用类型的基类在.NET Framework 中，此行为由引用类型继承不会重写<xref:System.Object.ToString%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-506">Because <xref:System.Object> is the base class of all reference types in the .NET Framework, this behavior is inherited by reference types that do not override the <xref:System.Object.ToString%2A> method.</span></span> <span data-ttu-id="ad78b-507">下面的示例阐释了这一点。</span><span class="sxs-lookup"><span data-stu-id="ad78b-507">The following example illustrates this.</span></span> <span data-ttu-id="ad78b-508">它定义一个名为`Object1`接受所有的默认实现<xref:System.Object>成员。</span><span class="sxs-lookup"><span data-stu-id="ad78b-508">It defines a class named `Object1` that accepts the default implementation of all <xref:System.Object> members.</span></span> <span data-ttu-id="ad78b-509">其<xref:System.Object.ToString%2A>方法返回的对象的完全限定的类型名称。</span><span class="sxs-lookup"><span data-stu-id="ad78b-509">Its <xref:System.Object.ToString%2A> method returns the object's fully qualified type name.</span></span>  
  
 [!code-cpp[System.Object.ToString#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.object.tostring/cpp/tostring2.cpp#2)]
 [!code-csharp[System.Object.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.tostring/cs/tostring2.cs#2)]
 [!code-vb[System.Object.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.tostring/vb/tostring2.vb#2)]  
  
<a name="Overriding"></a>   
## <a name="overriding-the-objecttostring-method"></a><span data-ttu-id="ad78b-510">重写 Object.ToString() 方法</span><span class="sxs-lookup"><span data-stu-id="ad78b-510">Overriding the Object.ToString() method</span></span>  
 <span data-ttu-id="ad78b-511">类型通常覆盖<xref:System.Object.ToString%2A?displayProperty=nameWithType>方法以返回一个字符串，表示对象实例。</span><span class="sxs-lookup"><span data-stu-id="ad78b-511">Types commonly override the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method to return a string that represents the object instance.</span></span> <span data-ttu-id="ad78b-512">例如，基类型，如<xref:System.Char>， <xref:System.Int32>，和<xref:System.String>提供<xref:System.Object.ToString%2A>返回该对象表示的值的字符串形式的实现。</span><span class="sxs-lookup"><span data-stu-id="ad78b-512">For example, the base types such as <xref:System.Char>, <xref:System.Int32>, and <xref:System.String> provide <xref:System.Object.ToString%2A> implementations that return the string form of the value that the object represents.</span></span> <span data-ttu-id="ad78b-513">下面的示例定义了一个类`Object2`，可重写<xref:System.Object.ToString%2A>方法以返回及其值的类型名称。</span><span class="sxs-lookup"><span data-stu-id="ad78b-513">The following example defines a class, `Object2`, that overrides the <xref:System.Object.ToString%2A> method to return the type name along with its value.</span></span>  
  
 [!code-cpp[System.Object.ToString#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.object.tostring/cpp/tostring3.cpp#3)]
 [!code-csharp[System.Object.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.tostring/cs/tostring3.cs#3)]
 [!code-vb[System.Object.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.tostring/vb/tostring3.vb#3)]  
  
 <span data-ttu-id="ad78b-514">下表列出了.NET Framework 中的类型类别，并指示它们是否将覆盖<xref:System.Object.ToString%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-514">The following table lists the type categories in the .NET Framework and indicates whether or not they override the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method.</span></span>  
  
|<span data-ttu-id="ad78b-515">类型类别</span><span class="sxs-lookup"><span data-stu-id="ad78b-515">Type category</span></span>|<span data-ttu-id="ad78b-516">Overrides Object.ToString()</span><span class="sxs-lookup"><span data-stu-id="ad78b-516">Overrides Object.ToString()</span></span>|<span data-ttu-id="ad78b-517">行为</span><span class="sxs-lookup"><span data-stu-id="ad78b-517">Behavior</span></span>|  
|-------------------|-----------------------------------|--------------|  
|<span data-ttu-id="ad78b-518">类</span><span class="sxs-lookup"><span data-stu-id="ad78b-518">Class</span></span>|<span data-ttu-id="ad78b-519">n/a</span><span class="sxs-lookup"><span data-stu-id="ad78b-519">n/a</span></span>|<span data-ttu-id="ad78b-520">n/a</span><span class="sxs-lookup"><span data-stu-id="ad78b-520">n/a</span></span>|  
|<span data-ttu-id="ad78b-521">结构</span><span class="sxs-lookup"><span data-stu-id="ad78b-521">Structure</span></span>|<span data-ttu-id="ad78b-522">是 (<xref:System.ValueType.ToString%2A?displayProperty=nameWithType>)</span><span class="sxs-lookup"><span data-stu-id="ad78b-522">Yes (<xref:System.ValueType.ToString%2A?displayProperty=nameWithType>)</span></span>|<span data-ttu-id="ad78b-523">Object.ToString() 相同</span><span class="sxs-lookup"><span data-stu-id="ad78b-523">Same as Object.ToString()</span></span>|  
|<span data-ttu-id="ad78b-524">枚举</span><span class="sxs-lookup"><span data-stu-id="ad78b-524">Enumeration</span></span>|<span data-ttu-id="ad78b-525">是 (<xref:System.Enum.ToString?displayProperty=nameWithType>)</span><span class="sxs-lookup"><span data-stu-id="ad78b-525">Yes (<xref:System.Enum.ToString?displayProperty=nameWithType>)</span></span>|<span data-ttu-id="ad78b-526">成员名称</span><span class="sxs-lookup"><span data-stu-id="ad78b-526">The member name</span></span>|  
|<span data-ttu-id="ad78b-527">接口</span><span class="sxs-lookup"><span data-stu-id="ad78b-527">Interface</span></span>|<span data-ttu-id="ad78b-528">否</span><span class="sxs-lookup"><span data-stu-id="ad78b-528">No</span></span>|<span data-ttu-id="ad78b-529">n/a</span><span class="sxs-lookup"><span data-stu-id="ad78b-529">n/a</span></span>|  
|<span data-ttu-id="ad78b-530">委托</span><span class="sxs-lookup"><span data-stu-id="ad78b-530">Delegate</span></span>|<span data-ttu-id="ad78b-531">否</span><span class="sxs-lookup"><span data-stu-id="ad78b-531">No</span></span>|<span data-ttu-id="ad78b-532">n/a</span><span class="sxs-lookup"><span data-stu-id="ad78b-532">n/a</span></span>|  
  
 <span data-ttu-id="ad78b-533">重写，请参阅备注继承者部分以了解更多信息<xref:System.Object.ToString%2A>。</span><span class="sxs-lookup"><span data-stu-id="ad78b-533">See the Notes to Inheritors section for additional information on overriding <xref:System.Object.ToString%2A>.</span></span>  
  
<a name="Overloading"></a>   
## <a name="overloading-the-tostring-method"></a><span data-ttu-id="ad78b-534">重载 ToString 方法</span><span class="sxs-lookup"><span data-stu-id="ad78b-534">Overloading the ToString method</span></span>  
 <span data-ttu-id="ad78b-535">除了重写的无参数<xref:System.Object.ToString?displayProperty=nameWithType>方法，许多类型重载`ToString`方法以提供的方法接受参数的版本。</span><span class="sxs-lookup"><span data-stu-id="ad78b-535">In addition to overriding the parameterless <xref:System.Object.ToString?displayProperty=nameWithType> method, many types overload the `ToString` method to provide versions of the method that accept parameters.</span></span> <span data-ttu-id="ad78b-536">通常情况下，这样做是为了提供对变量的格式设置和区分区域性的格式设置支持。</span><span class="sxs-lookup"><span data-stu-id="ad78b-536">Most commonly, this is done to provide support for variable formatting and culture-sensitive formatting.</span></span>  
  
 <span data-ttu-id="ad78b-537">以下示例重载`ToString`方法以返回包含的各个字段的值的结果字符串`Automobile`类。</span><span class="sxs-lookup"><span data-stu-id="ad78b-537">The following example overloads the `ToString` method to return a result string that includes the value of various fields of an `Automobile` class.</span></span> <span data-ttu-id="ad78b-538">它定义了四个格式字符串： G，返回的模型名称和年;D，返回的模型名称、 年、 和的门; 数C，后者返回模型名称、 年和柱面;和 A，它返回所有四个字段值的字符串。</span><span class="sxs-lookup"><span data-stu-id="ad78b-538">It defines four format strings: G, which returns the model name and year; D, which returns the model name, year, and number of doors; C, which returns the model name, year, and number of cylinders; and A, which returns a string with all four field values.</span></span>  
  
 [!code-csharp[System.Object.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.tostring/cs/tostringoverload1.cs#4)]
 [!code-vb[System.Object.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.tostring/vb/tostringoverload1.vb#4)]  
  
 <span data-ttu-id="ad78b-539">下面的示例调用重载<xref:System.Decimal.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>方法以显示货币值的区分区域性的格式。</span><span class="sxs-lookup"><span data-stu-id="ad78b-539">The following example calls the overloaded <xref:System.Decimal.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> method to display culture-sensitive formatting of a currency value.</span></span>  
  
 [!code-csharp[System.Object.ToString#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.tostring/cs/tostringoverload2.cs#5)]
 [!code-vb[System.Object.ToString#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.tostring/vb/tostringoverload2.vb#5)]  
  
 <span data-ttu-id="ad78b-540">格式字符串和区分区域性的格式设置的详细信息，请参阅[格式化类型](~/docs/standard/base-types/formatting-types.md)。</span><span class="sxs-lookup"><span data-stu-id="ad78b-540">For more information on format strings and culture-sensitive formatting, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).</span></span> <span data-ttu-id="ad78b-541">有关支持的数字值的格式字符串，请参阅[标准数字格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)和[自定义数字格式字符串](~/docs/standard/base-types/custom-numeric-format-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="ad78b-541">For the format strings supported by numeric values, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).</span></span> <span data-ttu-id="ad78b-542">有关支持的日期和时间值的格式字符串，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。</span><span class="sxs-lookup"><span data-stu-id="ad78b-542">For the format strings supported by date and time values, see [Standard Date and Time Format Strings](~/docs/standard/base-types/standard-date-and-time-format-strings.md) and [Custom Date and Time Format Strings](~/docs/standard/base-types/custom-date-and-time-format-strings.md).</span></span>  
  
<a name="Extending"></a>   
## <a name="extending-the-objecttostring-method"></a><span data-ttu-id="ad78b-543">扩展 Object.ToString 方法</span><span class="sxs-lookup"><span data-stu-id="ad78b-543">Extending the Object.ToString method</span></span>  
 <span data-ttu-id="ad78b-544">由于类型都继承默认值<xref:System.Object.ToString%2A?displayProperty=nameWithType>方法，你可能会查找其行为不需要并想要对其进行更改。</span><span class="sxs-lookup"><span data-stu-id="ad78b-544">Because a type inherits the default <xref:System.Object.ToString%2A?displayProperty=nameWithType> method, you may find its behavior undesirable and want to change it.</span></span> <span data-ttu-id="ad78b-545">这是数组和集合类尤其如此。</span><span class="sxs-lookup"><span data-stu-id="ad78b-545">This is particularly true of arrays and collection classes.</span></span> <span data-ttu-id="ad78b-546">时可能会遇到`ToString`方法的数组或集合类来显示其成员的值，它改为显示的类型完全限定的类型名称，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="ad78b-546">While you may expect the `ToString` method of an array or collection class to display the values of its members, it instead displays the type fully qualified type name, as the following example shows.</span></span>  
  
 [!code-csharp[System.Object.ToString#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.tostring/cs/array1.cs#6)]
 [!code-vb[System.Object.ToString#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.tostring/vb/array1.vb#6)]  
  
 <span data-ttu-id="ad78b-547">你有若干选项来生成你想要的结果字符串。</span><span class="sxs-lookup"><span data-stu-id="ad78b-547">You have several options to produce the result string that you'd like.</span></span>  
  
-   <span data-ttu-id="ad78b-548">如果类型是数组、 集合对象或实现的对象<xref:System.Collections.IEnumerable>或<xref:System.Collections.Generic.IEnumerable%601>接口，可以通过使用枚举其元素`foreach`C# 中的语句或`For Each...Next`在 Visual Basic 中构造。</span><span class="sxs-lookup"><span data-stu-id="ad78b-548">If the type is an array, a collection object, or an object that implements the <xref:System.Collections.IEnumerable> or <xref:System.Collections.Generic.IEnumerable%601> interfaces, you can enumerate its elements by using the `foreach` statement in C# or the `For Each...Next` construct in Visual Basic.</span></span>  
  
-   <span data-ttu-id="ad78b-549">如果此类不是`sealed`（在 C# 中) 或`NotInheritable`（在 Visual Basic 中)，你可以开发一个包装类，从基类继承其<xref:System.Object.ToString%2A?displayProperty=nameWithType>想要自定义的方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-549">If the class is not `sealed` (in C#) or `NotInheritable` (in Visual Basic), you can develop a wrapper class that inherits from the base class whose <xref:System.Object.ToString%2A?displayProperty=nameWithType> method you want to customize.</span></span> <span data-ttu-id="ad78b-550">在最低限度上，这需要你以下：</span><span class="sxs-lookup"><span data-stu-id="ad78b-550">At a minimum, this requires that you do the following:</span></span>  
  
    1.  <span data-ttu-id="ad78b-551">实现任何必要的构造函数。</span><span class="sxs-lookup"><span data-stu-id="ad78b-551">Implement any necessary constructors.</span></span> <span data-ttu-id="ad78b-552">派生的类不会继承其基类构造函数。</span><span class="sxs-lookup"><span data-stu-id="ad78b-552">Derived classes do not inherit their base class constructors.</span></span>  
  
    2.  <span data-ttu-id="ad78b-553">重写<xref:System.Object.ToString%2A?displayProperty=nameWithType>方法以返回想要的结果字符串。</span><span class="sxs-lookup"><span data-stu-id="ad78b-553">Override the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method to return the result string that you'd like.</span></span>  
  
     <span data-ttu-id="ad78b-554">下面的示例定义的包装类<xref:System.Collections.Generic.List%601>类。</span><span class="sxs-lookup"><span data-stu-id="ad78b-554">The following example defines a wrapper class for the <xref:System.Collections.Generic.List%601> class.</span></span> <span data-ttu-id="ad78b-555">它将重写<xref:System.Object.ToString%2A?displayProperty=nameWithType>方法以显示每个方法的集合，而不是完全限定的类型名称的值。</span><span class="sxs-lookup"><span data-stu-id="ad78b-555">It overrides the <xref:System.Object.ToString%2A?displayProperty=nameWithType> method to display the value of each method of the collection rather than the fully qualified type name.</span></span>  
  
     [!code-csharp[System.Object.ToString#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.tostring/cs/customize1.cs#7)]
     [!code-vb[System.Object.ToString#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.tostring/vb/customize1.vb#7)]  
  
-   <span data-ttu-id="ad78b-556">开发[扩展方法](~/docs/standard/design-guidelines/extension-methods.md)返回所需的结果字符串。</span><span class="sxs-lookup"><span data-stu-id="ad78b-556">Develop an [extension method](~/docs/standard/design-guidelines/extension-methods.md) that returns the result string that you want.</span></span> <span data-ttu-id="ad78b-557">请注意，不能重写默认值<xref:System.Object.ToString%2A?displayProperty=nameWithType>以这种方式的方法 (也就是说，扩展类 （在 C# 中) 或 （在 Visual Basic) 的模块不能有一个名为的无参数方法`ToString`来代替原始类型的调用的函数是`ToString`方法.</span><span class="sxs-lookup"><span data-stu-id="ad78b-557">Note that you can't override the default <xref:System.Object.ToString%2A?displayProperty=nameWithType> method in this way (that is, your extension class (in C#) or module (in Visual Basic) cannot have a parameterless method named `ToString` that is called in place of the original type's `ToString` method.</span></span> <span data-ttu-id="ad78b-558">你将需要提供其他名称为你无参数`ToString`替换。</span><span class="sxs-lookup"><span data-stu-id="ad78b-558">You'll have to provide some other name for your parameterless `ToString` replacement.</span></span>  
  
     <span data-ttu-id="ad78b-559">下面的示例定义两种方法的扩展<xref:System.Collections.Generic.List%601>类： 无参数`ToString2`方法，和一个`ToString`方法替换<xref:System.String>表示一个格式字符串的参数。</span><span class="sxs-lookup"><span data-stu-id="ad78b-559">The following example defines two methods that extend the <xref:System.Collections.Generic.List%601> class: a parameterless `ToString2` method, and a `ToString` method with a <xref:System.String> parameter that represents a format string.</span></span>  
  
     [!code-csharp[System.Object.ToString#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.object.tostring/cs/customize2.cs#8)]
     [!code-vb[System.Object.ToString#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.object.tostring/vb/customize2.vb#8)]  
  
<a name="WinRT"></a>   
## <a name="notes-for-the-includewrtincludeswrt-mdmd"></a><span data-ttu-id="ad78b-560">说明 [!INCLUDE[wrt](~/includes/wrt-md.md)]</span><span class="sxs-lookup"><span data-stu-id="ad78b-560">Notes for the [!INCLUDE[wrt](~/includes/wrt-md.md)]</span></span>  
 <span data-ttu-id="ad78b-561">当调用<xref:System.Object.ToString%2A>中类方法[!INCLUDE[wrt](~/includes/wrt-md.md)]，它不会覆盖的类提供的默认行为<xref:System.Object.ToString%2A>。</span><span class="sxs-lookup"><span data-stu-id="ad78b-561">When you call the <xref:System.Object.ToString%2A> method on a class in the [!INCLUDE[wrt](~/includes/wrt-md.md)], it provides the default behavior for classes that don’t override <xref:System.Object.ToString%2A>.</span></span> <span data-ttu-id="ad78b-562">这是.NET Framework 提供的支持的一部分[!INCLUDE[wrt](~/includes/wrt-md.md)](请参阅[.NET Framework 支持为 Windows 应用商店应用和 Windows 运行时](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md))。</span><span class="sxs-lookup"><span data-stu-id="ad78b-562">This is part of the support that the .NET Framework provides for the [!INCLUDE[wrt](~/includes/wrt-md.md)] (see [.NET Framework Support for Windows Store Apps and Windows Runtime](~/docs/standard/cross-platform/support-for-windows-store-apps-and-windows-runtime.md)).</span></span> <span data-ttu-id="ad78b-563">中的类[!INCLUDE[wrt](~/includes/wrt-md.md)]不继承<xref:System.Object>，并不总是实现<xref:System.Object.ToString%2A>。</span><span class="sxs-lookup"><span data-stu-id="ad78b-563">Classes in the [!INCLUDE[wrt](~/includes/wrt-md.md)] don’t inherit <xref:System.Object>, and don’t always implement a <xref:System.Object.ToString%2A>.</span></span> <span data-ttu-id="ad78b-564">但是，它们始终会显示为具有<xref:System.Object.ToString%2A>， <xref:System.Object.Equals%28System.Object%29>，和<xref:System.Object.GetHashCode%2A>方法在 C# 或 Visual Basic 代码中，使用它们以及.NET Framework 为这些方法提供默认行为时。</span><span class="sxs-lookup"><span data-stu-id="ad78b-564">However, they always appear to have <xref:System.Object.ToString%2A>, <xref:System.Object.Equals%28System.Object%29>, and <xref:System.Object.GetHashCode%2A> methods when you use them in your C# or Visual Basic code, and the .NET Framework provides a default behavior for these methods.</span></span>  
  
 <span data-ttu-id="ad78b-565">从开始[!INCLUDE[net_v451](~/includes/net-v451-md.md)]，公共语言运行时将使用[IStringable.ToString](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx)上[!INCLUDE[wrt](~/includes/wrt-md.md)]对象在回退到的默认实现之前<xref:System.Object.ToString%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ad78b-565">Starting with the [!INCLUDE[net_v451](~/includes/net-v451-md.md)], the common language runtime will use [IStringable.ToString](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx) on a [!INCLUDE[wrt](~/includes/wrt-md.md)] object before falling back to the default implementation of <xref:System.Object.ToString%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  [!INCLUDE[wrt](~/includes/wrt-md.md)]<span data-ttu-id="ad78b-566"> 用 C# 或 Visual Basic 编写的类可以重写<xref:System.Object.ToString%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ad78b-566"> classes that are written in C# or Visual Basic can override the <xref:System.Object.ToString%2A> method.</span></span>  
  
### <a name="the-includewrtincludeswrt-mdmd-and-the-istringable-interface"></a><span data-ttu-id="ad78b-567">[!INCLUDE[wrt](~/includes/wrt-md.md)]和 IStringable 接口</span><span class="sxs-lookup"><span data-stu-id="ad78b-567">The [!INCLUDE[wrt](~/includes/wrt-md.md)] and the IStringable Interface</span></span>  
 <span data-ttu-id="ad78b-568">从开始[!INCLUDE[win81](~/includes/win81-md.md)]、[!INCLUDE[wrt](~/includes/wrt-md.md)]包括[IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx)接口的单一方法[IStringable.ToString](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx)，提供基本格式设置支持相媲美提供的<xref:System.Object.ToString%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ad78b-568">Starting with [!INCLUDE[win81](~/includes/win81-md.md)], the [!INCLUDE[wrt](~/includes/wrt-md.md)] includes an [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) interface whose single method, [IStringable.ToString](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx), provides basic formatting support comparable to that provided by <xref:System.Object.ToString%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="ad78b-569">若要避免产生混乱，则不应实现[IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx)上托管类型。</span><span class="sxs-lookup"><span data-stu-id="ad78b-569">To prevent ambiguity, you should not implement [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) on managed types.</span></span>  
  
 <span data-ttu-id="ad78b-570">通过本机代码或通过在 JavaScript 或 C + 等语言中编写代码的托管的对象调用时 + /CX 中，它们看起来实现[IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx)。</span><span class="sxs-lookup"><span data-stu-id="ad78b-570">When managed objects are called by native code or by code written in languages such as JavaScript or C++/CX, they appear to implement [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx).</span></span> <span data-ttu-id="ad78b-571">公共语言运行时自动将路由从调用[IStringable.ToString](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx)到<xref:System.Object.ToString%2A?displayProperty=nameWithType>在事件[IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx)未在托管对象上实现。</span><span class="sxs-lookup"><span data-stu-id="ad78b-571">The common language runtime will automatically route calls from [IStringable.ToString](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx) to <xref:System.Object.ToString%2A?displayProperty=nameWithType> in the event [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) is not implemented on the managed object.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="ad78b-572">因为公共语言运行时自动实现[IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx)所有的托管类型中的[!INCLUDE[win8_appstore_long](~/includes/win8-appstore-long-md.md)]应用，我们建议你不要不提供你自己[IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx)实现。</span><span class="sxs-lookup"><span data-stu-id="ad78b-572">Because the common language runtime auto-implements [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) for all managed types in [!INCLUDE[win8_appstore_long](~/includes/win8-appstore-long-md.md)] apps, we recommend that you do not provide your own [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) implementation.</span></span> <span data-ttu-id="ad78b-573">实现[IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx)调用时，可能会导致意外行为`ToString`从[!INCLUDE[wrt](~/includes/wrt-md.md)]、 C + + /CX 中或 JavaScript。</span><span class="sxs-lookup"><span data-stu-id="ad78b-573">Implementing [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) may result in unintended behavior when calling `ToString` from the [!INCLUDE[wrt](~/includes/wrt-md.md)], C++/CX, or JavaScript.</span></span>  
  
 <span data-ttu-id="ad78b-574">如果你选择实现[IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx)中导出的公共托管类型中[!INCLUDE[wrt](~/includes/wrt-md.md)]组件，以下限制适用：</span><span class="sxs-lookup"><span data-stu-id="ad78b-574">If you do choose to implement [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) in a public managed type that is exported in a [!INCLUDE[wrt](~/includes/wrt-md.md)] component, the following restrictions apply:</span></span>  
  
-   <span data-ttu-id="ad78b-575">你可以定义[IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx)接口只能在"类实现"关系，如</span><span class="sxs-lookup"><span data-stu-id="ad78b-575">You can define the [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) interface only in a "class implements" relationship, such as</span></span>  
  
    ```  
    public class NewClass : IStringable  
    ```  
  
     <span data-ttu-id="ad78b-576">接</span><span class="sxs-lookup"><span data-stu-id="ad78b-576">in C#, or</span></span>  
  
    ```  
    Public Class NewClass : Implements IStringable  
    ```  
  
     <span data-ttu-id="ad78b-577">口。</span><span class="sxs-lookup"><span data-stu-id="ad78b-577">in Visual Basic.</span></span>  
  
-   <span data-ttu-id="ad78b-578">不能实现[IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx)在接口上。</span><span class="sxs-lookup"><span data-stu-id="ad78b-578">You cannot implement [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) on an interface.</span></span>  
  
-   <span data-ttu-id="ad78b-579">你不能声明为类型参数[IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx)。</span><span class="sxs-lookup"><span data-stu-id="ad78b-579">You cannot declare a parameter to be of type [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx).</span></span>  
  
-   <span data-ttu-id="ad78b-580">[IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx)不能是方法、 属性或字段的返回类型。</span><span class="sxs-lookup"><span data-stu-id="ad78b-580">[IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) cannot be the return type of a method, property, or field.</span></span>  
  
-   <span data-ttu-id="ad78b-581">不能隐藏你[IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx)通过使用以下方法定义在基类中的实现：</span><span class="sxs-lookup"><span data-stu-id="ad78b-581">You cannot hide your [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) implementation from base classes by using a method definition such as the following:</span></span>  
  
    ```  
  
    public class NewClass : IStringable  
    {  
       public new string ToString()  
       {  
          return "New ToString in NewClass";  
       }  
    }  
  
    ```  
  
     <span data-ttu-id="ad78b-582">相反， [IStringable.ToString](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx)实现必须始终替代基类实现。</span><span class="sxs-lookup"><span data-stu-id="ad78b-582">Instead, the [IStringable.ToString](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx) implementation must always override the base class implementation.</span></span> <span data-ttu-id="ad78b-583">只能通过对强类型类实例调用 `ToString` 实现来隐藏该实现。</span><span class="sxs-lookup"><span data-stu-id="ad78b-583">You can hide a `ToString` implementation only by invoking it on a strongly typed class instance.</span></span>  
  
 <span data-ttu-id="ad78b-584">请注意，在各种条件，从本机代码调用到托管类型实现[IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx)或隐藏其[ToString](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx)实现可以产生意外的行为。</span><span class="sxs-lookup"><span data-stu-id="ad78b-584">Note that under a variety of conditions, calls from native code to a managed type that implements [IStringable](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.aspx) or hides its [ToString](http://msdn.microsoft.com/library/windows/apps/windows.foundation.istringable.tostring.aspx) implementation can produce unexpected behavior.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="ad78b-585">当您实现您自己的类型时，则应重写<see cref="M:System.Object.ToString" />方法返回对这些类型有意义的值。</span>
            <span class="sxs-lookup">
              <span data-stu-id="ad78b-585">When you implement your own types, you should override the <see cref="M:System.Object.ToString" /> method to return values that are meaningful for those types.</span>
            </span>
            <span data-ttu-id="ad78b-586">派生类需要比的格式设置的更好地控制<see cref="M:System.Object.ToString" />提供可以实现<see cref="T:System.IFormattable" />接口。</span>
            <span class="sxs-lookup">
              <span data-stu-id="ad78b-586">Derived classes that require more control over formatting than <see cref="M:System.Object.ToString" /> provides can implement the <see cref="T:System.IFormattable" /> interface.</span>
            </span>
            <span data-ttu-id="ad78b-587">其<see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />方法使你能够定义控制格式设置的格式字符串，以及用于<see cref="T:System.IFormatProvider" />可以为特定于区域性的格式设置提供的对象。</span>
            <span class="sxs-lookup">
              <span data-stu-id="ad78b-587">Its <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" /> method enables you to define format strings that control formatting and to use an <see cref="T:System.IFormatProvider" /> object that can provide for culture-specific formatting.</span>
            </span>
            <span data-ttu-id="ad78b-588">重写<see cref="M:System.Object.ToString" />方法应遵循以下准则：</span>
            <span class="sxs-lookup">
              <span data-stu-id="ad78b-588">Overrides of the <see cref="M:System.Object.ToString" /> method should follow these guidelines:</span>
            </span>  
  
-   <span data-ttu-id="ad78b-589">返回的字符串应友好、 更具可读性人所理解。</span><span class="sxs-lookup"><span data-stu-id="ad78b-589">The returned string should be friendly and readable by humans.</span></span>  
  
-   <span data-ttu-id="ad78b-590">返回的字符串应单独标识对象实例的值。</span><span class="sxs-lookup"><span data-stu-id="ad78b-590">The returned string should uniquely identify the value of the object instance.</span></span>  
  
-   <span data-ttu-id="ad78b-591">返回的字符串应尽可能短，以便它适合于由调试器的显示。</span><span class="sxs-lookup"><span data-stu-id="ad78b-591">The returned string should be as short as possible so that it is suitable for display by a debugger.</span></span>  
  
-   <span data-ttu-id="ad78b-592">你<see cref="M:System.Object.ToString" />替代不应返回<see cref="F:System.String.Empty" />或 null 字符串。</span><span class="sxs-lookup"><span data-stu-id="ad78b-592">Your <see cref="M:System.Object.ToString" /> override should not return <see cref="F:System.String.Empty" /> or a null string.</span></span>  
  
-   <span data-ttu-id="ad78b-593">你<see cref="M:System.Object.ToString" />替代不应引发异常。</span><span class="sxs-lookup"><span data-stu-id="ad78b-593">Your <see cref="M:System.Object.ToString" /> override should not throw an exception.</span></span>  
  
-   <span data-ttu-id="ad78b-594">如果实例的字符串表示区分区域性，或可采用多种方式进行格式设置，则实现<see cref="T:System.IFormattable" />接口。</span><span class="sxs-lookup"><span data-stu-id="ad78b-594">If the string representation of an instance is culture-sensitive or can be formatted in multiple ways, implement the <see cref="T:System.IFormattable" /> interface.</span></span>  
  
-   <span data-ttu-id="ad78b-595">如果返回的字符串包含敏感信息，你应首先要求了适当的权限。</span><span class="sxs-lookup"><span data-stu-id="ad78b-595">If the returned string includes sensitive information, you should first demand an appropriate permission.</span></span><span data-ttu-id="ad78b-596">如果请求成功，则可以返回的敏感信息;否则，应返回的字符串不包含敏感信息。</span><span class="sxs-lookup"><span data-stu-id="ad78b-596">If the demand succeeds, you can return the sensitive information; otherwise, you should return a string that excludes the sensitive information.</span></span>  
  
-   <span data-ttu-id="ad78b-597">你<see cref="M:System.Object.ToString" />重写应具有任何明显的副作用以避免在调试的复杂性。</span><span class="sxs-lookup"><span data-stu-id="ad78b-597">Your <see cref="M:System.Object.ToString" /> override should have no observable side effects to avoid complications in debugging.</span></span><span data-ttu-id="ad78b-598">例如，调用<see cref="M:System.Object.ToString" />方法不应更改实例字段的值。</span><span class="sxs-lookup"><span data-stu-id="ad78b-598">For example, a call to the <see cref="M:System.Object.ToString" /> method should not change the value of instance fields.</span></span>  
  
-   <span data-ttu-id="ad78b-599">如果你的类型实现分析方法 (或<see langword="Parse" />或<see langword="TryParse" />方法、 构造函数或某些其他实例化从字符串类型的实例的静态方法)，应确保返回的字符串<see cref="M:System.Object.ToString" />方法可以是转换为对象实例。</span><span class="sxs-lookup"><span data-stu-id="ad78b-599">If your type implements a parsing method (or <see langword="Parse" /> or <see langword="TryParse" /> method, a constructor, or some other static method that instantiates an instance of the type from a string), you should ensure that the string returned by the <see cref="M:System.Object.ToString" /> method can be converted to an object instance.</span></span></para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>