<Type Name="IndexOutOfRangeException" FullName="System.IndexOutOfRangeException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fa743ca2f45cda07f83e63ffd565711d31756eb5" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30728621" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class IndexOutOfRangeException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit IndexOutOfRangeException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.IndexOutOfRangeException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class IndexOutOfRangeException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class IndexOutOfRangeException sealed : SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>试图访问索引超出界限的数组或集合的元素时引发的异常。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IndexOutOfRangeException>无效的索引用于访问数组或集合的成员或用于读取或写入从缓冲区中的特定位置时将引发异常。 此异常继承自<xref:System.Exception>类但添加任何独特的成员。  
  
 通常情况下，<xref:System.IndexOutOfRangeException>导致开发人员错误引发异常。 而不是处理此异常，你应该诊断错误的原因并更正你的代码。 错误的最常见原因是：  
  
-   早于其数成员或元素，如下面的示例阐释了忘记集合或从零开始的数组的上限为 1。  
  
     [!code-csharp[System.IndexOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/length1.cs#3)]
     [!code-vb[System.IndexOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/length1.vb#3)]  
  
     若要更正错误，可以使用类似如下的代码。  
  
     [!code-csharp[System.IndexOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/length2.cs#4)]
     [!code-vb[System.IndexOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/length2.vb#4)]  
  
     或者，而不是通过它们的索引，循环访问数组中的所有元素，可以使用`foreach`语句 （在 C# 中) 或`For Each`（在 Visual Basic) 语句。  
  
-   尝试分配给另一个数组不能充分标注并具有更少元素数比原始数组的数组元素。 下面的示例尝试分配中的最后一个元素`value1`中同一个元素的数组`value2`数组。 但是，`value2`已正确维度数组具有六个而不是七个元素。 因此，分配引发<xref:System.IndexOutOfRangeException>异常。  
  
     [!code-csharp[System.IndexOutOfRangeException#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/Uninit1.cs#10)]
     [!code-vb[System.IndexOutOfRangeException#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/Uninit1.vb#10)]  
  
-   使用一个值返回的搜索方法来循环访问数组或集合的特定索引位置开始的一部分。 如果你忘记了检查是否搜索操作找到匹配项，则运行时会引发<xref:System.IndexOutOfRangeException>异常，如本示例中所示。  
  
     [!code-csharp[System.IndexOutOfRangeException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/negative1.cs#5)]
     [!code-vb[System.IndexOutOfRangeException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/negative1.vb#5)]  
  
     在这种情况下，<xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=nameWithType>方法返回-1，这是个无效的索引值，在它无法找到匹配项时。 若要更正此错误，搜索方法的返回值之前循环访问数组中，检查上，在此示例中所示。  
  
     [!code-csharp[System.IndexOutOfRangeException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/negative2.cs#6)]
     [!code-vb[System.IndexOutOfRangeException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/negative2.vb#6)]  
  
-   尝试使用或枚举结果集、 集合或查询测试是否返回的对象具有任何有效的数据的情况下返回的数组。  
  
-   使用计算的值定义的起始索引、 结束索引或要循环的项数。 如果计算结果是意外，则可能会导致<xref:System.IndexOutOfRangeException>异常。 您应该检查中计算的索引值的程序的逻辑，并循环访问数组或集合之前验证值。 以下条件必须均为 true;否则为<xref:System.IndexOutOfRangeException>引发异常：  
  
    -   起始索引必须大于或等于<xref:System.Array.GetLowerBound%2A?displayProperty=nameWithType>为你想要循环，该数组的维度或大于或等于 0 的集合。  
  
    -   结束索引不能超过<xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType>为你想要循环，或不能大于或等于数组的维度`Count`的集合属性。  
  
    -   以下公式必须满足的维度的数组，你想要循环：  
  
        ```  
        start_index >= lower_bound And start_index + items_to_iterate – 1 <= upper_bound  
        ```  
  
         一个集合，必须满足以下公式：  
  
        ```  
        start_index >= 0 And start_index + items_to_iterate <= Count  
        ```  
  
        > [!TIP]
        >  对数组或集合的起始索引可以永远不能为负数。  
  
-   假定数组都必须具有从零开始的。 可以通过创建不从零开始的数组<xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=nameWithType>方法可以由 COM 互操作，尽管它们不符合 cls 的和。 下面的示例演示<xref:System.IndexOutOfRangeException>尝试以循环通过创建一个非基于零的数组时引发<xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=nameWithType>方法。  
  
     [!code-csharp[System.IndexOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/nonzero1.cs#1)]
     [!code-vb[System.IndexOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/nonzero1.vb#1)]  
  
     若要更正该错误，下面的示例一样，你可以调用<xref:System.Array.GetLowerBound%2A>而不是进行假设的起始索引数组的方法。  
  
     [!code-csharp[System.IndexOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/nonzero2.cs#2)]
     [!code-vb[System.IndexOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/nonzero2.vb#2)]  
  
     请注意，当你调用<xref:System.Array.GetLowerBound%2A>方法要获取一个数组，其起始索引还应调用<xref:System.Array.GetUpperBound%28System.Int32%29?displayProperty=nameWithType>方法来获取其结束索引。  
  
-   混淆索引和数值数组或集合中的该索引处的值。 当使用，通常会出现此问题`foreach`语句 （在 C# 中) 或`For Each`（在 Visual Basic) 语句。 以下示例演示了该问题。  
  
     [!code-csharp[System.IndexOutOfRangeException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/foreach1.cs#7)]
     [!code-vb[System.IndexOutOfRangeException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/foreach1.vb#7)]  
  
     迭代构造返回数组或集合，没有其索引中的每个值。 若要消除此异常，请使用此代码。  
  
     [!code-csharp[System.IndexOutOfRangeException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/foreach2.cs#8)]
     [!code-vb[System.IndexOutOfRangeException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/foreach2.vb#8)]  
  
-   无效的列名称提供至<xref:System.Data.DataView.Sort%2A?displayProperty=nameWithType>属性。  
  
-   违反线程安全性。 操作，例如从相同读取<xref:System.IO.StreamReader>对象，写入相同<xref:System.IO.StreamWriter>对象从多个线程，还是在枚举中的对象<xref:System.Collections.Hashtable>从不同的线程可以引发<xref:System.IndexOutOfRangeException>如果该对象不访问线程安全的方式。 此异常是通常间歇性的因为它依赖于争用条件。  
  
 使用硬编码的索引值来操作数组是数组的可能的索引值是数组的不正确或无效，或意外正在操作的大小是否引发异常。 若要防止引发操作<xref:System.IndexOutOfRangeException>异常，你可以执行以下操作：  
  
-   循环访问的元素的数组使用[foreach](https://msdn.microsoft.com/library/ttw7t8t6.aspx)语句 （在 C# 中) 或[每个...下一步](https://msdn.microsoft.com/library/5ebk1751.aspx)构造 （在 Visual Basic) 而不是循环索引元素。  
  
-   通过从返回的索引开始的索引循环访问的元素<xref:System.Array.GetLowerBound%2A?displayProperty=nameWithType>方法并使用返回的索引的结束<xref:System.Array.GetUpperBound%2A?displayProperty=nameWithType>方法。  
  
-   如果您要分配给另一个数组中的元素，请确保目标数组具有作为源数组至少尽可能多的元素通过比较其<xref:System.Array.Length%2A?displayProperty=nameWithType>属性。  
  
 有关的实例的初始属性值的列表<xref:System.IndexOutOfRangeException>，请参阅<xref:System.IndexOutOfRangeException>构造函数。  
  
 以下的中间语言 (IL) 指令引发<xref:System.IndexOutOfRangeException>:  
  
-   ldelem.\<type>  
  
-   ldelema  
  
-   stelem.\<type>  
  
 <xref:System.IndexOutOfRangeException> 使用 HRESULT COR_E_INDEXOUTOFRANGE，其值 0x80131508。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.IndexOutOfRangeException" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.IndexOutOfRangeException" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数初始化<xref:System.Exception.Message%2A>为系统提供的消息的描述错误，如"数组索引超出了范围。"的新实例的属性 此消息将当前系统区域性考虑在内。  
  
 下表显示 <xref:System.IndexOutOfRangeException> 的实例的初始属性值。  
  
|Property|“值”|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|空引用（在 Visual Basic 中为 `Nothing`）。|  
|<xref:System.Exception.Message%2A>|本地化的错误消息字符串。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException(System::String ^ message);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">描述错误的消息。</param>
        <summary>用指定的错误消息初始化 <see cref="T:System.IndexOutOfRangeException" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数初始化<xref:System.Exception.Message%2A?displayProperty=nameWithType>属性的新异常使用`message`参数。 `message` 的内容被设计为人可理解的形式。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。  
  
 下表显示 <xref:System.IndexOutOfRangeException> 的实例的初始属性值。  
  
|Property|“值”|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|空引用（在 Visual Basic 中为 `Nothing`）。|  
|<xref:System.Exception.Message%2A>|错误消息字符串。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IndexOutOfRangeException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IndexOutOfRangeException(System::String ^ message, Exception ^ innerException);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">解释异常原因的错误消息。</param>
        <param name="innerException">导致当前异常的异常。 如果 <c>innerException</c> 参数不是空引用（在 Visual Basic 中为 <see langword="Nothing" />），则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
        <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IndexOutOfRangeException" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因前一个异常而直接引发的异常应在 <xref:System.Exception.InnerException%2A> 属性中包含对前一个异常的引用。 `InnerException` 属性返回传递到构造函数中的相同值，或者如果 `Nothing` 属性不向构造函数提供内部异常值，则为空引用（在 Visual Basic 中为 `InnerException`）。  
  
 下表显示 <xref:System.IndexOutOfRangeException> 的实例的初始属性值。  
  
|Property|“值”|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|内部异常引用。|  
|<xref:System.Exception.Message%2A>|错误消息字符串。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
  </Members>
</Type>