<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Tuple`7.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5ff8c3596f37b00620da99feabf785f0647be74b2.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ff8c3596f37b00620da99feabf785f0647be74b2</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>The type of the tuple's first component.</source>
          <target state="translated">此元组的第一个组件的类型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>The type of the tuple's second component.</source>
          <target state="translated">此元组的第二个组件的类型。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>The type of the tuple's third component.</source>
          <target state="translated">此元组的第三个组件的类型。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>The type of the tuple's fourth component.</source>
          <target state="translated">此元组的第四个组件的类型。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>The type of the tuple's fifth component.</source>
          <target state="translated">元组的第五个分量的类型。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>The type of the tuple's sixth component.</source>
          <target state="translated">元组的第六个分量的类型。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>The type of the tuple's seventh component.</source>
          <target state="translated">元组的第七个分量的类型。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="T:System.Tuple`7">
          <source>Represents a 7-tuple, or septuple.</source>
          <target state="translated">表示 7 元组，或七元组。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>A tuple is a data structure that has a specific number and sequence of values.</source>
          <target state="translated">元组是具有特定的数量和值序列的数据结构。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> class represents a 7-tuple, or septuple, which is a tuple that has seven components.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>类表示 7 元组，或七元组，这是具有七个分量的元组。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>You can instantiate a <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object by calling either the <ph id="ph2">&lt;xref:System.Tuple%607.%23ctor%2A&gt;</ph> or the static <ph id="ph3">&lt;xref:System.Tuple.Create%60%607%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%2C%60%606%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">可以实例化<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>对象通过调用<ph id="ph2">&lt;xref:System.Tuple%607.%23ctor%2A&gt;</ph>或静态<ph id="ph3">&lt;xref:System.Tuple.Create%60%607%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%2C%60%606%29?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>You can retrieve the value of the tuple's components by using the read-only <ph id="ph1">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph>, and <ph id="ph7">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph> instance properties.</source>
          <target state="translated">你可以通过使用只读的检索此元组的组件的值<ph id="ph1">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph>， <ph id="ph2">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph>， <ph id="ph4">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph>， <ph id="ph5">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph>， <ph id="ph6">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph>，和<ph id="ph7">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph>实例属性。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>Tuples are commonly used in four different ways:</source>
          <target state="translated">元组常用四个不同的方式：</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>To represent a single set of data.</source>
          <target state="translated">来表示一组数据。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>For example, a tuple can represent a database record, and its components can represent individual fields of the record.</source>
          <target state="translated">例如，一个元组可以表示的数据库记录，并且其组件可以表示每个字段的记录。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>To provide easy access to, and manipulation of, a data set.</source>
          <target state="translated">若要提供轻松访问和数据集的操作。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>The following example defines a <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object that contains population data for New York City for each census from 1950 through 2000.</source>
          <target state="translated">下面的示例定义<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>包含纽约市从 1950 年到 2000 年每次人口普查人口数据的对象。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>The septuple is passed to the <ph id="ph1">`ComputePopulationChange`</ph> method, which calculates the annual rate of change between censuses, as well as the annual rate of change for the entire 60 year period.</source>
          <target state="translated">七元组传递给<ph id="ph1">`ComputePopulationChange`</ph>方法，以计算年之间两次人口普查，以及整个 60 年期间更改的年度速率的变化率。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>To return multiple values from a method without the use of <ph id="ph1">`out`</ph> parameters (in C#) or <ph id="ph2">`ByRef`</ph> parameters (in Visual Basic).</source>
          <target state="translated">若要通过无需使用方法返回多个值<ph id="ph1">`out`</ph>参数 （在 C# 中) 或<ph id="ph2">`ByRef`</ph>参数 （在 Visual Basic 中)。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>For example, the previous example returns its computed statistics, along with the city name, in a <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object.</source>
          <target state="translated">例如，前面的示例返回城市名称，其计算统计信息中<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>To pass multiple values to a method through a single parameter.</source>
          <target state="translated">若要将多个值传递给通过单个参数的方法。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>For example, the <ph id="ph1">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph> method has a single parameter that lets you supply one value to the method that the thread executes at startup.</source>
          <target state="translated">例如，<ph id="ph1">&lt;xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType&gt;</ph>方法只有一个参数，你可以提供一个值，则在启动线程执行的方法。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Tuple`7">
          <source>If you supply a <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object as the method argument, you can supply the thread’s startup routine with seven items of data.</source>
          <target state="translated">如果你提供<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>对象作为方法自变量，则可以提供具有七项数据的线程的启动例程。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>The value of the tuple's first component.</source>
          <target state="translated">此元组的第一个组件的值。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>The value of the tuple's second component.</source>
          <target state="translated">此元组的第二个组件的值。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>The value of the tuple's third component.</source>
          <target state="translated">此元组的第三个组件的值。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>The value of the tuple's fourth component</source>
          <target state="translated">此元组的第四个组件的值</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>The value of the tuple's fifth component.</source>
          <target state="translated">元组的第五个分量的值。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>The value of the tuple's sixth component.</source>
          <target state="translated">元组的第六个分量的值。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>The value of the tuple's seventh component.</source>
          <target state="translated">元组的第七个分量的值。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>You can use the static <ph id="ph1">&lt;xref:System.Tuple.Create%60%607%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%2C%60%606%29?displayProperty=nameWithType&gt;</ph> method to instantiate a 7-tuple object without having to explicitly specify the types of its components.</source>
          <target state="translated">您可以使用静态<ph id="ph1">&lt;xref:System.Tuple.Create%60%607%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%2C%60%606%29?displayProperty=nameWithType&gt;</ph>方法实例化 7 元组对象，而无需显式指定其组件的类型。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>The following example uses the <ph id="ph1">&lt;xref:System.Tuple.Create%60%607%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%2C%60%606%29?displayProperty=nameWithType&gt;</ph> method to instantiate a 7-tuple whose first component is of type <ph id="ph2">&lt;xref:System.String&gt;</ph> and whose remaining components are of type <ph id="ph3">&lt;xref:System.Int32&gt;</ph>.</source>
          <target state="translated">下面的示例使用<ph id="ph1">&lt;xref:System.Tuple.Create%60%607%28%60%600%2C%60%601%2C%60%602%2C%60%603%2C%60%604%2C%60%605%2C%60%606%29?displayProperty=nameWithType&gt;</ph>方法可实例化一个 7 元组，其中第一个元素的类型<ph id="ph2">&lt;xref:System.String&gt;</ph>、 剩余元素的类型<ph id="ph3">&lt;xref:System.Int32&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
          <source>This is equivalent to the following call to the <ph id="ph1">&lt;xref:System.Tuple%607.%23ctor%2A&gt;</ph> class constructor.</source>
          <target state="translated">这相当于对的以下调用<ph id="ph1">&lt;xref:System.Tuple%607.%23ctor%2A&gt;</ph>类构造函数。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>The object to compare with this instance.</source>
          <target state="translated">与该实例进行比较的对象。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>Returns a value that indicates whether the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object is equal to a specified object.</source>
          <target state="translated">返回一个值，该值指示当前的 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 对象是否与指定对象相等。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance is equal to the specified object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果当前实例等于指定对象，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>The <ph id="ph1">`obj`</ph> parameter is considered to be equal to the current instance under the following conditions:</source>
          <target state="translated"><ph id="ph1">`obj`</ph>参数被视为等于当前实例在下列情况下：</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>It is a <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object.</source>
          <target state="translated">它是<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>Its seven components are of the same types as the current instance.</source>
          <target state="translated">其七个组件是与当前实例相同的类型。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>Its seven components are equal to those of the current instance.</source>
          <target state="translated">其七个组件是等于当前实例。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>Equality is determined by the default object equality comparer for each component.</source>
          <target state="translated">相等性取决于每个组件的默认对象相等比较器。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>The following example defines an array of sextuples that contain population data for Los Angeles and New York from 1950 to 2000.</source>
          <target state="translated">下面的示例定义包含从人口数据 Los Angeles 和纽约 1950年到 2000年的七的数组。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>The first component of each septuple identifies the city.</source>
          <target state="translated">每个七元组的第一个分量标识所在的城市。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>The first, third, and fourth septuples contain data for New York.</source>
          <target state="translated">第一、 第三列和第四个七元组包含纽约的数据。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>The first septuple is a duplicate of the fourth septuple.</source>
          <target state="translated">第一个七元组是重复的第四个七元组。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>The third septuple identifies the city as "New York City" instead of "New York".</source>
          <target state="translated">第三个七元组标识为而不是"纽约"的"New York City"中的城市。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.Equals(System.Object)">
          <source>As the example shows, only the fourth septuple is equal to the first septuple.</source>
          <target state="translated">如示例所示，只有第四个七元组是等于第一个七元组。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.GetHashCode">
          <source>Returns the hash code for the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object.</source>
          <target state="translated">返回当前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 对象的哈希代码。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">32 位有符号整数哈希代码。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.Item1">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's first component.</source>
          <target state="translated">获取当前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 对象的第一个分量的值。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item1">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's first component.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 对象的第一个分量的值。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item1">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">你可以动态确定的一种<ph id="ph1">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph>组件在两种方式之一：</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item1">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph> property.</source>
          <target state="translated">通过调用<ph id="ph1">`GetType`</ph>方法返回的值<ph id="ph2">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item1">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object, and retrieving the first element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">通过检索<ph id="ph1">&lt;xref:System.Type&gt;</ph>对象，表示<ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph>对象，并返回对数组中检索的第一个元素其<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item1">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1950 through 2000.</source>
          <target state="translated">下面的示例定义一个数组<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>其组件从 1950 年 2000年到包含三个美国城市 （New York、 芝加哥和洛杉矶） 的填充数据的对象。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item1">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">然后，它将显示列出的数据的表。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item1">
          <source>To display the city name, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object.</source>
          <target state="translated">若要显示的城市名称，它将检索的值<ph id="ph1">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph>每个属性<ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.Item2">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's second component.</source>
          <target state="translated">获取当前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 对象的第二个分量的值。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item2">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's second component.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 对象的第二个分量的值。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item2">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">你可以动态确定的一种<ph id="ph1">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph>组件在两种方式之一：</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item2">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph> property.</source>
          <target state="translated">通过调用<ph id="ph1">`GetType`</ph>方法返回的值<ph id="ph2">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item2">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object, and retrieving the second element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">通过检索<ph id="ph1">&lt;xref:System.Type&gt;</ph>对象，表示<ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph>对象，并返回对数组中检索第二个元素其<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item2">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1950 through 2000.</source>
          <target state="translated">下面的示例定义一个数组<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>其组件从 1950 年 2000年到包含三个美国城市 （New York、 芝加哥和洛杉矶） 的填充数据的对象。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item2">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">然后，它将显示列出的数据的表。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item2">
          <source>To display the population in 1950, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object.</source>
          <target state="translated">若要显示 1950 年人口，它将检索的值<ph id="ph1">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph>每个属性<ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.Item3">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's third component.</source>
          <target state="translated">获取当前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 对象的第三个分量的值。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item3">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's third component.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 对象的第三个分量的值。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item3">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">你可以动态确定的一种<ph id="ph1">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph>组件在两种方式之一：</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item3">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph> property.</source>
          <target state="translated">通过调用<ph id="ph1">`GetType`</ph>方法返回的值<ph id="ph2">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item3">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object, and retrieving the third element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">通过检索<ph id="ph1">&lt;xref:System.Type&gt;</ph>对象，表示<ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph>对象，并返回对数组中检索的第三个元素其<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item3">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1950 through 2000.</source>
          <target state="translated">下面的示例定义一个数组<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>其组件从 1950 年 2000年到包含三个美国城市 （New York、 芝加哥和洛杉矶） 的填充数据的对象。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item3">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">然后，它将显示列出的数据的表。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item3">
          <source>To display the population in 1960, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object.</source>
          <target state="translated">若要显示年 1960年人口，它将检索的值<ph id="ph1">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph>每个属性<ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.Item4">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's fourth component.</source>
          <target state="translated">获取当前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 对象的第四个分量的值。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item4">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's fourth component.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 对象的第四个分量的值。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item4">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">你可以动态确定的一种<ph id="ph1">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph>组件在两种方式之一：</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item4">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph> property.</source>
          <target state="translated">通过调用<ph id="ph1">`GetType`</ph>方法返回的值<ph id="ph2">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item4">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object, and retrieving the fourth element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">通过检索<ph id="ph1">&lt;xref:System.Type&gt;</ph>对象，表示<ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph>对象，并返回对数组中检索的第四个元素其<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item4">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1950 through 2000.</source>
          <target state="translated">下面的示例定义一个数组<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>其组件从 1950 年 2000年到包含三个美国城市 （New York、 芝加哥和洛杉矶） 的填充数据的对象。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item4">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">然后，它将显示列出的数据的表。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item4">
          <source>To display the population in 1970, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object.</source>
          <target state="translated">若要显示 1970 年人口，它将检索的值<ph id="ph1">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph>每个属性<ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.Item5">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's fifth component.</source>
          <target state="translated">获取当前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 对象的第五个分量的值。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item5">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's fifth component.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 对象的第五个分量的值。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item5">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">你可以动态确定的一种<ph id="ph1">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph>组件在两种方式之一：</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item5">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph> property.</source>
          <target state="translated">通过调用<ph id="ph1">`GetType`</ph>方法返回的值<ph id="ph2">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item5">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object, and retrieving the fifth element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">通过检索<ph id="ph1">&lt;xref:System.Type&gt;</ph>对象，表示<ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph>对象，并返回对数组中检索的第五个元素其<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item5">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1950 through 2000.</source>
          <target state="translated">下面的示例定义一个数组<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>其组件从 1950 年 2000年到包含三个美国城市 （New York、 芝加哥和洛杉矶） 的填充数据的对象。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item5">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">然后，它将显示列出的数据的表。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item5">
          <source>To display the population in 1980, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object.</source>
          <target state="translated">若要显示 1980 年的人口，它将检索的值<ph id="ph1">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph>每个属性<ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.Item6">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's sixth component.</source>
          <target state="translated">获取当前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 对象的第六个分量的值。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item6">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's sixth component.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 对象的第六个分量的值。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item6">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">你可以动态确定的一种<ph id="ph1">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph>组件在两种方式之一：</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item6">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph> property.</source>
          <target state="translated">通过调用<ph id="ph1">`GetType`</ph>方法返回的值<ph id="ph2">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item6">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object, and retrieving the sixth element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">通过检索<ph id="ph1">&lt;xref:System.Type&gt;</ph>对象，表示<ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph>对象，并返回对数组中检索的第六个元素其<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item6">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1950 through 2000.</source>
          <target state="translated">下面的示例定义一个数组<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>其组件从 1950 年 2000年到包含三个美国城市 （New York、 芝加哥和洛杉矶） 的填充数据的对象。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item6">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">然后，它将显示列出的数据的表。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item6">
          <source>To display the population in 1990, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object.</source>
          <target state="translated">若要显示 1990 年人口，它将检索的值<ph id="ph1">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph>每个属性<ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.Item7">
          <source>Gets the value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's seventh component.</source>
          <target state="translated">获取当前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 对象的第七个分量的值。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item7">
          <source>The value of the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object's seventh component.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 对象的第七个分量的值。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item7">
          <source>You can dynamically determine the type of the <ph id="ph1">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph> component in one of two ways:</source>
          <target state="translated">你可以动态确定的一种<ph id="ph1">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph>组件在两种方式之一：</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item7">
          <source>By calling the <ph id="ph1">`GetType`</ph> method on the value that is returned by the <ph id="ph2">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph> property.</source>
          <target state="translated">通过调用<ph id="ph1">`GetType`</ph>方法返回的值<ph id="ph2">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item7">
          <source>By retrieving the <ph id="ph1">&lt;xref:System.Type&gt;</ph> object that represents the <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object, and retrieving the seventh element from the array that is returned by its <ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">通过检索<ph id="ph1">&lt;xref:System.Type&gt;</ph>对象，表示<ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph>对象，并返回对数组中检索的第七个元素其<ph id="ph3">&lt;xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item7">
          <source>The following example defines an array of <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1950 through 2000.</source>
          <target state="translated">下面的示例定义一个数组<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>其组件从 1950 年 2000年到包含三个美国城市 （New York、 芝加哥和洛杉矶） 的填充数据的对象。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item7">
          <source>It then displays a table that lists the data.</source>
          <target state="translated">然后，它将显示列出的数据的表。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.Item7">
          <source>To display the population in 2000, it retrieves the value of the <ph id="ph1">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph> property for each <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> object.</source>
          <target state="translated">若要显示 2000 年人口，它将检索的值<ph id="ph1">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph>每个属性<ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>An object to compare with the current instance.</source>
          <target state="translated">要与当前实例进行比较的对象。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>An object that provides custom rules for comparison.</source>
          <target state="translated">提供用于比较的自定义规则的对象。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Compares the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object to a specified object by using a specified comparer, and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</source>
          <target state="translated">使用指定的比较器将当前的 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>A signed integer that indicates the relative position of this instance and <ph id="ph1">&lt;paramref name="other" /&gt;</ph> in the sort order, as shown in the following table.</source>
          <target state="translated">一个带符号整数，指示此实例和 <ph id="ph1">&lt;paramref name="other" /&gt;</ph> 在排序顺序中的相对位置，如下表所示。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 值</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Description</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 描述</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A negative integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 负整数</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance precedes <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 此实例位于 <ph id="ph3">&lt;paramref name="other" /&gt;</ph> 之前。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 零</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance and <ph id="ph3">&lt;paramref name="other" /&gt;</ph> have the same position in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 此实例在排序顺序中的位置与 <ph id="ph3">&lt;paramref name="other" /&gt;</ph> 相同。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A positive integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 正整数</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance follows <ph id="ph3">&lt;paramref name="other" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 此实例位于 <ph id="ph3">&lt;paramref name="other" /&gt;</ph> 之后。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>This member is an explicit interface implementation.</source>
          <target state="translated">此成员是显式接口应用。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralComparable&gt;</ph> interface.</source>
          <target state="translated">它只能在 <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 实例强制转换为 <ph id="ph2">&lt;xref:System.Collections.IStructuralComparable&gt;</ph> 接口时使用。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>This method lets you define customized comparisons of <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects.</source>
          <target state="translated">此方法可让你定义的自定义的比较<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>For example, you can use this method to order <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects based on the value of a specific component.</source>
          <target state="translated">例如，可以使用此方法为顺序<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>对象基于特定组件的值。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Although this method can be called directly, it is most commonly called by collection-sorting methods that include <ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph> parameters to order the members of a collection.</source>
          <target state="translated">虽然可以直接调用此方法，它通常由集合排序方法包括<ph id="ph1">&lt;xref:System.Collections.IComparer&gt;</ph>参数集合的成员进行排序。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>For example, it is called by the <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A&gt;</ph> method of a <ph id="ph3">&lt;xref:System.Collections.SortedList&gt;</ph> object that is instantiated by using the <ph id="ph4">&lt;xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph> constructor.</source>
          <target state="translated">例如，它由<ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph>方法和<ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A&gt;</ph>方法<ph id="ph3">&lt;xref:System.Collections.SortedList&gt;</ph>通过实例化的对象<ph id="ph4">&lt;xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType&gt;</ph>构造函数。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%607.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph> method is intended for use in sorting operations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%607.System%23Collections%23IStructuralComparable%23CompareTo%2A&gt;</ph>方法旨在用于排序操作。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>It should not be used when the primary purpose of a comparison is to determine whether two objects are equal.</source>
          <target state="translated">不是时应使用的比较的主要用途是确定两个对象是否相等。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>To determine whether two objects are equal, call the <ph id="ph1">&lt;xref:System.Tuple%607.System%23Collections%23IStructuralEquatable%23Equals%2A&gt;</ph> method.</source>
          <target state="translated">若要确定两个对象是否相等，请调用<ph id="ph1">&lt;xref:System.Tuple%607.System%23Collections%23IStructuralEquatable%23Equals%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The following example creates an array of <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects that contains population data for three U.S. cities from 1950 to 2000.</source>
          <target state="translated">下面的示例创建的数组<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>包含三个从 1950年到 2000年的美国城市的填充数据的对象。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The septuple's first component is the city name.</source>
          <target state="translated">七元组的第一个组件是市/县名。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The remaining five components represent the population at 10-year intervals from 1950 to 2000.</source>
          <target state="translated">剩余的五个组件表示 1950年到 2000年 10 年间隔的人口。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The <ph id="ph1">`PopulationComparer`</ph> class provides an <ph id="ph2">&lt;xref:System.Collections.IComparer&gt;</ph> implementation that allows the array of septuples to be sorted by any one of its components.</source>
          <target state="translated"><ph id="ph1">`PopulationComparer`</ph>类提供<ph id="ph2">&lt;xref:System.Collections.IComparer&gt;</ph>实现，它允许的数组七元组及其组件的任何一个进行排序。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>Two values are provided to the <ph id="ph1">`PopulationComparer`</ph> class in its constructor: The position of the component that defines the sort order, and a <ph id="ph2">&lt;xref:System.Boolean&gt;</ph> value that indicates whether the tuple objects should be sorted in ascending or descending order.</source>
          <target state="translated">两个值提供给<ph id="ph1">`PopulationComparer`</ph>其构造函数中的类： 定义排序顺序中，该组件的位置和一个<ph id="ph2">&lt;xref:System.Boolean&gt;</ph>值，该值指示是否应按升序或降序排序元组对象。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source>The example then displays the elements in the array in unsorted order, sorts them by the third component (the population in 1960) and displays them, and then sorts them by the sixth component (the population in 1990) and displays them.</source>
          <target state="translated">该示例然后显示未排序顺序中的数组中的元素，按第三个组件 （1960年中填充） 进行排序和显示，然后按第六个组件 （1990 年的人口） 进行排序并显示它们。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
          <source><ph id="ph1">&lt;paramref name="other" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="other" /&gt;</ph> 不是 <ph id="ph2">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The object to compare with this instance.</source>
          <target state="translated">与该实例进行比较的对象。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>An object that defines the method to use to evaluate whether the two objects are equal.</source>
          <target state="translated">一个对象，该对象定义用于评估两个对象是否相等的方法。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>Returns a value that indicates whether the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object is equal to a specified object based on a specified comparison method.</source>
          <target state="translated">返回一个值，该值根据指定的比较方法指示当前的 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 对象是否与指定对象相等。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance is equal to the specified object; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果当前实例等于指定对象，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">此成员是显式的接口成员实现。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface.</source>
          <target state="translated">它只能在 <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 实例强制转换为 <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> 接口时使用。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> implementation is called only if other is not <ph id="ph2">`null`</ph>, and if it can be successfully cast (in C#) or converted (in Visual Basic) to a <ph id="ph3">&lt;xref:System.Tuple%607&gt;</ph> object whose components are of the same types as the current instance.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph>仅当另一个则不调用实现<ph id="ph2">`null`</ph>，和可以成功地强制转换 （在 C# 中) 或 （在 Visual Basic 中) 转换为<ph id="ph3">&lt;xref:System.Tuple%607&gt;</ph>对象的组件与当前实例相同的类型。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%607.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29&gt;</ph> method first passes the <ph id="ph2">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph> values of the <ph id="ph3">&lt;xref:System.Tuple%607&gt;</ph> objects to be compared to the <ph id="ph4">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%607.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29&gt;</ph>方法第一个传递<ph id="ph2">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph>值<ph id="ph3">&lt;xref:System.Tuple%607&gt;</ph>对象要进行比较<ph id="ph4">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType&gt;</ph>实现。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>If this method call returns <ph id="ph1">`true`</ph>, the method is called again and passed the <ph id="ph2">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph> values of the two <ph id="ph3">&lt;xref:System.Tuple%607&gt;</ph> objects.</source>
          <target state="translated">如果此方法调用返回<ph id="ph1">`true`</ph>，再次调用该方法并将其传递<ph id="ph2">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph>这两个值<ph id="ph3">&lt;xref:System.Tuple%607&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>This continues until the method call returns <ph id="ph1">`false`</ph> when it compares a specific pair of <ph id="ph2">`Item`</ph> values, or the two <ph id="ph3">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph> values are passed to the method.</source>
          <target state="translated">此过程将继续，直到方法调用返回<ph id="ph1">`false`</ph>进行比较的特定对<ph id="ph2">`Item`</ph>值或两个<ph id="ph3">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph>值传递给方法。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The following example defines a <ph id="ph1">`RateComparer`</ph> class that performs a custom test for equality.</source>
          <target state="translated">下面的示例定义<ph id="ph1">`RateComparer`</ph>执行自定义测试相等性的类。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>If the values that are passed to its <ph id="ph1">&lt;xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=nameWithType&gt;</ph> method are of type <ph id="ph2">&lt;xref:System.Single&gt;</ph> or <ph id="ph3">&lt;xref:System.Double&gt;</ph>, the method tests for equality by using only up to three fractional digits.</source>
          <target state="translated">如果值传递给其<ph id="ph1">&lt;xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=nameWithType&gt;</ph>方法属于类型<ph id="ph2">&lt;xref:System.Single&gt;</ph>或<ph id="ph3">&lt;xref:System.Double&gt;</ph>，该方法通过使用只有最多三个小数位数来测试相等性。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>Otherwise, it simply calls the <ph id="ph1">`x`</ph> parameter's <ph id="ph2">`Equals`</ph> method.</source>
          <target state="translated">否则，它只需调用<ph id="ph1">`x`</ph>参数的<ph id="ph2">`Equals`</ph>方法。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
          <source>The example uses this <ph id="ph1">&lt;xref:System.Collections.IEqualityComparer&gt;</ph> implementation to determine whether four <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> objects that contain data on the rate of population change between 1950 and 2000 are equal.</source>
          <target state="translated">该示例使用此<ph id="ph1">&lt;xref:System.Collections.IEqualityComparer&gt;</ph>实现，以确定是否可以使用四个<ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph>包含率的 1950年和 2000年之间的州的人口变化的数据的对象是否相等。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>An object whose <ph id="ph1">&lt;see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /&gt;</ph> method calculates the hash code of the current <ph id="ph2">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object.</source>
          <target state="translated">一个对象，其 <ph id="ph1">&lt;see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /&gt;</ph> 方法计算当前 <ph id="ph2">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 对象的哈希代码。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>Calculates the hash code for the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object by using a specified computation method.</source>
          <target state="translated">使用指定的计算方法计算当前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 对象的哈希代码。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">32 位有符号整数哈希代码。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">此成员是显式的接口成员实现。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface.</source>
          <target state="translated">它只能在 <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 实例强制转换为 <ph id="ph2">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> 接口时使用。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>the method simply wraps a call to the comparer object's <ph id="ph1">&lt;xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated">方法只是包装比较器对象的调用<ph id="ph1">&lt;xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType&gt;</ph>实现。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
          <source>The algorithm used to compute the hash code should return the same hash code for two <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects that are considered to be equal.</source>
          <target state="translated">用于计算哈希代码的算法应返回相同的哈希代码的两个<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>被认为是相等的对象。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>An object to compare with the current instance.</source>
          <target state="translated">要与当前实例进行比较的对象。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>Compares the current <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</source>
          <target state="translated">比较当前 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 对象与指定对象，并返回一个整数，该整数指示当前对象在排序顺序中的位置：是在指定对象之前、之后还是在与指定对象相同的位置。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>A signed integer that indicates the relative position of this instance and <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> in the sort order, as shown in the following table.</source>
          <target state="translated">一个带符号整数，指示此实例和 <ph id="ph1">&lt;paramref name="obj" /&gt;</ph> 在排序顺序中的相对位置，如下表所示。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 值</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Description</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 描述</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A negative integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 负整数</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance precedes <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 此实例位于 <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> 之前。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Zero</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 零</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance and <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> have the same position in the sort order.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 此实例在排序顺序中的位置与 <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> 相同。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> A positive integer</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 正整数</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This instance follows <ph id="ph3">&lt;paramref name="obj" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 此实例位于 <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> 之后。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>This member is an explicit interface member implementation.</source>
          <target state="translated">此成员是显式的接口成员实现。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>It can be used only when the <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> instance is cast to an <ph id="ph2">&lt;xref:System.IComparable&gt;</ph> interface.</source>
          <target state="translated">它只能在 <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> 实例强制转换为 <ph id="ph2">&lt;xref:System.IComparable&gt;</ph> 接口时使用。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>This method provides the <ph id="ph1">&lt;xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType&gt;</ph> implementation for the <ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph> class.</source>
          <target state="translated">此方法提供<ph id="ph1">&lt;xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType&gt;</ph>实现<ph id="ph2">&lt;xref:System.Tuple%607&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>Although the method can be called directly, it is most commonly called by the default overloads of collection-sorting methods, such as <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType&gt;</ph>, to order the members of a collection.</source>
          <target state="translated">虽然可以直接调用该方法，它通常由集合排序的默认重载方法，如<ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType&gt;</ph>和<ph id="ph2">&lt;xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType&gt;</ph>、 集合的成员进行排序。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%607.System%23IComparable%23CompareTo%2A&gt;</ph> method is intended for use in sorting operations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%607.System%23IComparable%23CompareTo%2A&gt;</ph>方法旨在用于排序操作。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>It should not be used when the primary purpose of a comparison is to determine whether two objects are equal.</source>
          <target state="translated">不是时应使用的比较的主要用途是确定两个对象是否相等。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>To determine whether two objects are equal, call the <ph id="ph1">&lt;xref:System.Tuple%607.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">若要确定两个对象是否相等，请调用<ph id="ph1">&lt;xref:System.Tuple%607.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>This method uses the default object comparer to compare each component.</source>
          <target state="translated">此方法使用的默认对象比较器比较每个组件。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>The following example creates an array of <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> objects that contain population data for three cities in the United States from 1950 to 2000.</source>
          <target state="translated">下面的示例创建的数组<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>包含三个城市美国从 1950年到 2000年填充数据的对象。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>The seven components consist of the city name followed by the city's population at 10-year intervals from 1950 to 2000.</source>
          <target state="translated">七个组件包含从 1950 年跟按 10 年的时间间隔的市县的人口数，到 2000年的城市名称。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>The example displays the components of each tuple in the array in unsorted order, sorts the array, and then calls the <ph id="ph1">&lt;xref:System.Tuple%607.ToString%2A&gt;</ph> method to display each tuple in sorted order.</source>
          <target state="translated">该示例的数组未排序顺序中显示的组件的每个元组、 排序数组，，然后调用<ph id="ph1">&lt;xref:System.Tuple%607.ToString%2A&gt;</ph>方法以显示每个元组中的按排序顺序。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>The output shows that the array has been sorted by name, which is the first component.</source>
          <target state="translated">该输出显示，已按名称，即第一个组件排序数组。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>Note that the example does not directly call the <ph id="ph1">&lt;xref:System.Tuple%607.System%23IComparable%23CompareTo%28System.Object%29&gt;</ph> method.</source>
          <target state="translated">请注意，该示例不直接调用<ph id="ph1">&lt;xref:System.Tuple%607.System%23IComparable%23CompareTo%28System.Object%29&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source>This method is called implicitly by the <ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29&gt;</ph> method for each element in the array.</source>
          <target state="translated">隐式调用此方法<ph id="ph1">&lt;xref:System.Array.Sort%28System.Array%29&gt;</ph>数组中每个元素的方法。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
          <source><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> is not a <ph id="ph2">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="obj" /&gt;</ph> 不是 <ph id="ph2">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The index of the specified <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element.</source>
          <target state="translated">指定 <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> 元素的索引。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source><bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> can range from 0 to 6.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>index<ept id="p1">&lt;/c&gt;</ept> 的范围可以介于 0 到 6 之间。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>Gets the value of the specified <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element.</source>
          <target state="translated">获取指定 <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> 元素的值。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The value of the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> element at the specified position.</source>
          <target state="translated">指定位置 <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> 元素的值。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%607.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType&gt;</ph> property is an explicit interface implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%607.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType&gt;</ph>属性是显式接口实现。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source>To call it, you must cast or convert the <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object to an <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> interface object.</source>
          <target state="translated">若要调用它，您必须强制转换或转换<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>对象传递给<ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph>界面对象。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than 0 or greater than 6.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 小于 0 或大于 6。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Length">
          <source>Gets the number of elements in the <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph>.</source>
          <target state="translated">获取 <ph id="ph1">&lt;see langword="Tuple" /&gt;</ph> 中的元素数。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Length">
          <source>7, the number of elements in a <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object.</source>
          <target state="translated">7，<ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 对象中的元素数。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Length">
          <source>The <ph id="ph1">&lt;xref:System.Tuple%607.System%23Runtime%23CompilerServices%23ITuple%23Length%2A&gt;</ph> property is an explicit interface implementation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Tuple%607.System%23Runtime%23CompilerServices%23ITuple%23Length%2A&gt;</ph>属性是显式接口实现。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Length">
          <source>To call it, you must cast or convert the <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object to an <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph> interface object.</source>
          <target state="translated">若要调用它，您必须强制转换或转换<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>对象传递给<ph id="ph2">&lt;xref:System.Runtime.CompilerServices.ITuple&gt;</ph>界面对象。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.ToString">
          <source>Returns a string that represents the value of this <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> instance.</source>
          <target state="translated">返回表示此 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 实例的值的字符串。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Tuple`7.ToString">
          <source>The string representation of this <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> object.</source>
          <target state="translated">此 <ph id="ph1">&lt;see cref="T:System.Tuple`7" /&gt;</ph> 对象的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.ToString">
          <source>The string returned by this method takes the form (<bpt id="p1">*</bpt>Item1<ept id="p1">*</ept>, <bpt id="p2">*</bpt>Item2<ept id="p2">*</ept>, <bpt id="p3">*</bpt>Item3<ept id="p3">*</ept>, <bpt id="p4">*</bpt>Item4<ept id="p4">*</ept>, <ph id="ph1">`Item5, Item6, Item7`</ph>), where <bpt id="p5">*</bpt>Item1<ept id="p5">*</ept>, <bpt id="p6">*</bpt>Item2<ept id="p6">*</ept>, <bpt id="p7">*</bpt>Item3<ept id="p7">*</ept>, <bpt id="p8">*</bpt>Item4<ept id="p8">*</ept>, <bpt id="p9">*</bpt>Item5<ept id="p9">*</ept>, <bpt id="p10">*</bpt>Item6<ept id="p10">*</ept>, and <bpt id="p11">*</bpt>Item7<ept id="p11">*</ept> represent the values of the <ph id="ph2">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph>, <ph id="ph6">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph>, <ph id="ph7">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph>, and <ph id="ph8">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph> properties, respectively.</source>
          <target state="translated">通过此方法返回的字符串的形式 (<bpt id="p1">*</bpt>Item1<ept id="p1">*</ept>， <bpt id="p2">*</bpt>Item2<ept id="p2">*</ept>， <bpt id="p3">*</bpt>Item3<ept id="p3">*</ept>， <bpt id="p4">*</bpt>Item4<ept id="p4">*</ept>， <ph id="ph1">`Item5, Item6, Item7`</ph>)，其中<bpt id="p5">*</bpt>Item1<ept id="p5">*</ept>， <bpt id="p6">*</bpt>Item2<ept id="p6">*</ept>， <bpt id="p7">*</bpt>Item3<ept id="p7">*</ept>， <bpt id="p8">*</bpt>Item4<ept id="p8">*</ept>， <bpt id="p9">*</bpt>Item5<ept id="p9">*</ept>， <bpt id="p10">*</bpt>Item6<ept id="p10">*</ept>，和<bpt id="p11">*</bpt>Item7<ept id="p11">*</ept>表示的值<ph id="ph2">&lt;xref:System.Tuple%607.Item1%2A&gt;</ph>， <ph id="ph3">&lt;xref:System.Tuple%607.Item2%2A&gt;</ph>， <ph id="ph4">&lt;xref:System.Tuple%607.Item3%2A&gt;</ph>， <ph id="ph5">&lt;xref:System.Tuple%607.Item4%2A&gt;</ph>， <ph id="ph6">&lt;xref:System.Tuple%607.Item5%2A&gt;</ph>， <ph id="ph7">&lt;xref:System.Tuple%607.Item6%2A&gt;</ph>，和<ph id="ph8">&lt;xref:System.Tuple%607.Item7%2A&gt;</ph>属性，分别。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.ToString">
          <source>If any of the property values is <ph id="ph1">`null`</ph>, it is represented as <ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">如果任何属性值为<ph id="ph1">`null`</ph>，它会表示为<ph id="ph2">&lt;xref:System.String.Empty?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.ToString">
          <source>The following example defines a <ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph> object that contains population data for New York City for each census from 1950 through 2000.</source>
          <target state="translated">下面的示例定义<ph id="ph1">&lt;xref:System.Tuple%607&gt;</ph>包含纽约市从 1950 年到 2000 年每次人口普查人口数据的对象。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Tuple`7.ToString">
          <source>The components of the sextuple are then displayed by a call to the <ph id="ph1">&lt;xref:System.Tuple%607.ToString%2A&gt;</ph> method.</source>
          <target state="translated">六元组的组件将显示通过调用<ph id="ph1">&lt;xref:System.Tuple%607.ToString%2A&gt;</ph>方法。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>