<Type Name="Func&lt;TResult&gt;" FullName="System.Func&lt;TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="251683eafe688466dee528fd0b4b16e5f27bf4bb" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39917246" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;out TResult&gt;();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`1&lt;+ TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of Out TResult)() As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public delegate TResult Func();" />
  <TypeSignature Language="F#" Value="type Func&lt;'Result&gt; = delegate of unit -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
    <summary>封装一个不具有参数但却返回 <typeparamref name="TResult" /> 参数指定的类型值的方法。</summary>
    <returns>此委托封装的方法的返回值。</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用此委托来表示可以作为参数传递而无需显式声明自定义委托的方法。 封装的方法必须对应于此委托定义的方法签名。 这意味着，封装的方法必须具有任何参数，并且必须返回值。  
  
> [!NOTE]
>  若要引用的方法，没有任何参数，并返回`void`(或在 Visual Basic 中的声明为`Sub`而不是作为`Function`)，使用<xref:System.Action>改为委托。  
  
 当你使用<xref:System.Func%601>委托时，您无需显式定义用于封装无参数方法的委托。 例如，下面的代码显式声明名为的委托`WriteMethod`，并将分配到的引用`OutputTarget.SendToFile`实例到其委托实例的方法。  
  
 [!code-csharp[System.Func~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Delegate.cs#1)]
 [!code-vb[System.Func~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Delegate.vb#1)]  
  
 下面的示例简化了此代码实例化<xref:System.Func%601>而不是显式定义一个新委托，并为其赋值命名的方法的委托。  
  
 [!code-csharp[System.Func~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Func1.cs#2)]
 [!code-vb[System.Func~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Func1.vb#2)]  
  
 可以使用<xref:System.Func%601>委托与匿名方法在 C# 中，如以下示例所示。 (有关匿名方法的介绍，请参阅[匿名方法](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)。)  
  
 [!code-csharp[System.Func~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Anon.cs#3)]  
  
 你还可以分配一个 lambda 表达式到<xref:System.Func%602>委托，如以下示例所示。 (有关 lambda 表达式的简介，请参阅[Lambda 表达式](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)并[Lambda 表达式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)。)  
  
 [!code-csharp[System.Func~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Lambda.cs#4)]
 [!code-vb[System.Func~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Lambda.vb#4)]  
  
 Lambda 表达式的基础类型是一个泛型`Func`委托。 这样，可以将 lambda 表达式作为参数传递而无需显式将其分配给委托。 具体而言，因为许多方法中的类型<xref:System.Linq>命名空间具有`Func`参数，您可以将传递这些方法的 lambda 表达式无需显式实例化`Func`委托。  
  
 如果有想要执行实际需要结果时才进行耗时的计算，则可以分配到函数开销<xref:System.Func%601>委托。 然后可以推迟到在表达式中使用访问值属性时的函数的执行。 下一节中的示例演示如何执行此操作。  
  
   
  
## Examples  
 下面的示例演示如何使用不带参数的委托。 此代码将创建一个名为的泛型类`LazyValue`具有一个类型的字段<xref:System.Func%601>。 此委托字段可以存储的任何函数相对应的类型值返回到的类型参数的引用`LazyValue`对象。 `LazyValue`类型还具有`Value`（如果它已不执行），则执行该函数的属性，并返回生成的值。  
  
 该示例创建两种方法，并实例化两个`LazyValue`具有调用这些方法的 lambda 表达式的对象。 Lambda 表达式不带参数，因为它们只需调用的方法。 如输出所示，将执行两个方法仅当每个值`LazyValue`检索对象。  
  
 [!code-csharp[System.Func~1#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Example.cs#5)]
 [!code-vb[System.Func~1#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>