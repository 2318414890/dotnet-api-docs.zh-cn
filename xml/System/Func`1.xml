<Type Name="Func&lt;TResult&gt;" FullName="System.Func&lt;TResult&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1f2b5c1388338f890bf094d7848dc0b5cda8d4c3" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36431217" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;out TResult&gt;();" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`1&lt;+ TResult&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Func`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Func(Of Out TResult)() As TResult " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA;public delegate TResult Func();" />
  <TypeSignature Language="F#" Value="type Func&lt;'Result&gt; = delegate of unit -&gt; 'Result" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters />
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TResult">
      <span data-ttu-id="1637f-101">此委托封装的方法的返回值类型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="1637f-101">The type of the return value of the method that this delegate encapsulates.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="1637f-102">封装一个不具有参数但却返回 <typeparamref name="TResult" /> 参数指定的类型值的方法。</span>
      <span class="sxs-lookup">
        <span data-stu-id="1637f-102">Encapsulates a method that has no parameters and returns a value of the type specified by the <typeparamref name="TResult" /> parameter.</span>
      </span>
    </summary>
    <returns>
      <span data-ttu-id="1637f-103">此委托封装的方法的返回值。</span>
      <span class="sxs-lookup">
        <span data-stu-id="1637f-103">The return value of the method that this delegate encapsulates.</span>
      </span>
    </returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1637f-104">可以使用此委托来表示可以作为参数传递而不用显式声明自定义委托的方法。</span><span class="sxs-lookup"><span data-stu-id="1637f-104">You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="1637f-105">封装的方法必须对应于此委托定义方法签名。</span><span class="sxs-lookup"><span data-stu-id="1637f-105">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="1637f-106">这意味着，封装的方法必须具有任何参数，并且必须返回一个值。</span><span class="sxs-lookup"><span data-stu-id="1637f-106">This means that the encapsulated method must have no parameters and must return a value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1637f-107">若要引用的方法，不具有参数且返回`void`(或在 Visual Basic 中，声明为`Sub`而不是`Function`)，使用<xref:System.Action>委托。</span><span class="sxs-lookup"><span data-stu-id="1637f-107">To reference a method that has no parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the <xref:System.Action> delegate instead.</span></span>  
  
 <span data-ttu-id="1637f-108">当你使用<xref:System.Func%601>委托，则不需要显式定义一个委托，用于封装无参数的方法。</span><span class="sxs-lookup"><span data-stu-id="1637f-108">When you use the <xref:System.Func%601> delegate, you do not have to explicitly define a delegate that encapsulates a parameterless method.</span></span> <span data-ttu-id="1637f-109">例如，下面的代码显式声明一个名为的委托`WriteMethod`并将分配到的引用`OutputTarget.SendToFile`实例给其委托实例的方法。</span><span class="sxs-lookup"><span data-stu-id="1637f-109">For example, the following code explicitly declares a delegate named `WriteMethod` and assigns a reference to the `OutputTarget.SendToFile` instance method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Func~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Delegate.cs#1)]
 [!code-vb[System.Func~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="1637f-110">下面的示例简化了此代码实例化<xref:System.Func%601>而不是显式定义新的委托，并向其分配指定的方法的委托。</span><span class="sxs-lookup"><span data-stu-id="1637f-110">The following example simplifies this code by instantiating the <xref:System.Func%601> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Func~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Func1.cs#2)]
 [!code-vb[System.Func~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Func1.vb#2)]  
  
 <span data-ttu-id="1637f-111">你可以使用<xref:System.Func%601>委托与 C# 中的匿名方法，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="1637f-111">You can use the <xref:System.Func%601> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="1637f-112">(有关匿名方法的简介，请参阅[匿名方法](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)。)</span><span class="sxs-lookup"><span data-stu-id="1637f-112">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Func~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Anon.cs#3)]  
  
 <span data-ttu-id="1637f-113">你还可以分配到 lambda 表达式<xref:System.Func%602>委托，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="1637f-113">You can also assign a lambda expression to a <xref:System.Func%602> delegate, as the following example illustrates.</span></span> <span data-ttu-id="1637f-114">(有关 lambda 表达式的简介，请参阅[Lambda 表达式](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)和[Lambda 表达式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)。)</span><span class="sxs-lookup"><span data-stu-id="1637f-114">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Func~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Lambda.cs#4)]
 [!code-vb[System.Func~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Lambda.vb#4)]  
  
 <span data-ttu-id="1637f-115">Lambda 表达式的基础类型是一个泛型`Func`委托。</span><span class="sxs-lookup"><span data-stu-id="1637f-115">The underlying type of a lambda expression is one of the generic `Func` delegates.</span></span> <span data-ttu-id="1637f-116">这使它可以将 lambda 表达式作为参数传递而不显式将其分配给委托。</span><span class="sxs-lookup"><span data-stu-id="1637f-116">This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</span></span> <span data-ttu-id="1637f-117">具体而言，因为许多方法中的类型<xref:System.Linq>命名空间具有`Func`参数，你可以将传递这些方法的 lambda 表达式而不显式实例化`Func`委托。</span><span class="sxs-lookup"><span data-stu-id="1637f-117">In particular, because many methods of types in the <xref:System.Linq> namespace have `Func` parameters, you can pass these methods a lambda expression without explicitly instantiating a `Func` delegate.</span></span>  
  
 <span data-ttu-id="1637f-118">如果你有要执行仅当结果实际需要昂贵的计算，则可以分配的昂贵函数<xref:System.Func%601>委托。</span><span class="sxs-lookup"><span data-stu-id="1637f-118">If you have an expensive computation that you want to execute only if the result is actually needed, you can assign the expensive function to a <xref:System.Func%601> delegate.</span></span> <span data-ttu-id="1637f-119">然后可以推迟到表达式中使用访问值的属性时执行的函数。</span><span class="sxs-lookup"><span data-stu-id="1637f-119">The execution of the function can then be delayed until a property that accesses the value is used in an expression.</span></span> <span data-ttu-id="1637f-120">下一节中的示例演示如何执行此操作。</span><span class="sxs-lookup"><span data-stu-id="1637f-120">The example in the next section demonstrates how to do this.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1637f-121">下面的示例演示如何使用不带参数的委托。</span><span class="sxs-lookup"><span data-stu-id="1637f-121">The following example demonstrates how to use a delegate that takes no parameters.</span></span> <span data-ttu-id="1637f-122">此代码将创建一个名为的泛型类`LazyValue`，其类型的字段<xref:System.Func%601>。</span><span class="sxs-lookup"><span data-stu-id="1637f-122">This code creates a generic class named `LazyValue` that has a field of type <xref:System.Func%601>.</span></span> <span data-ttu-id="1637f-123">此委托字段可以存储对相对应的类型的值返回给类型参数的任何函数的引用`LazyValue`对象。</span><span class="sxs-lookup"><span data-stu-id="1637f-123">This delegate field can store a reference to any function that returns a value of the type that corresponds to the type parameter of the `LazyValue` object.</span></span> <span data-ttu-id="1637f-124">`LazyValue`类型还具有`Value`执行的函数 （如果它已尚未执行） 的属性，并返回生成的值。</span><span class="sxs-lookup"><span data-stu-id="1637f-124">The `LazyValue` type also has a `Value` property that executes the function (if it has not already been executed) and returns the resulting value.</span></span>  
  
 <span data-ttu-id="1637f-125">该示例创建两种方法，并实例化两个`LazyValue`具有可调用这些方法的 lambda 表达式的对象。</span><span class="sxs-lookup"><span data-stu-id="1637f-125">The example creates two methods and instantiates two `LazyValue` objects with lambda expressions that call these methods.</span></span> <span data-ttu-id="1637f-126">Lambda 表达式不采用参数，因为它们只需调用的方法。</span><span class="sxs-lookup"><span data-stu-id="1637f-126">The lambda expressions do not take parameters because they just need to call a method.</span></span> <span data-ttu-id="1637f-127">如输出所示，执行这两种方法仅当每个值`LazyValue`检索对象。</span><span class="sxs-lookup"><span data-stu-id="1637f-127">As the output shows, the two methods are executed only when the value of each `LazyValue` object is retrieved.</span></span>  
  
 [!code-csharp[System.Func~1#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Example.cs#5)]
 [!code-vb[System.Func~1#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Example.vb#5)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>