<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="WeakReference.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c0d4836429712734d47bb9c53ee59e9a0dd4d9f0.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c0d4836429712734d47bb9c53ee59e9a0dd4d9f0</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.WeakReference">
          <source>Represents a weak reference, which references an object while still allowing that object to be reclaimed by garbage collection.</source>
          <target state="translated">表示弱引用，即在引用对象的同时仍然允许通过垃圾回收来回收该对象。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>A weak reference allows the garbage collector to collect an object while still allowing an application to access the object.</source>
          <target state="translated">弱引用允许垃圾回收器回收对象的同时仍然允许应用程序能够访问的对象。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>If you need the object, you can still obtain a strong reference to it and prevent it from being collected.</source>
          <target state="translated">如果你需要的对象，你仍可以获取对它的强引用并防止它正在收集。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>For more information about how to use short and long weak references, see <bpt id="p1">[</bpt>Weak References<ept id="p1">](~/docs/standard/garbage-collection/weak-references.md)</ept>.</source>
          <target state="translated">有关如何使用短和长时间弱引用的详细信息，请参阅<bpt id="p1">[</bpt>弱引用<ept id="p1">](~/docs/standard/garbage-collection/weak-references.md)</ept>。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>The following example demonstrates how you can use weak references to maintain a cache of objects as a resource for an application.</source>
          <target state="translated">下面的示例演示如何使用弱引用，若要维护的对象缓存为应用程序的资源。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>The cache is constructed using an <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> of <ph id="ph2">&lt;xref:System.WeakReference&gt;</ph> objects keyed by an index value.</source>
          <target state="translated">缓存使用构造<ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph>的<ph id="ph2">&lt;xref:System.WeakReference&gt;</ph>对象键控的索引值。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>The <ph id="ph1">&lt;xref:System.WeakReference.Target%2A&gt;</ph> property for the <ph id="ph2">&lt;xref:System.WeakReference&gt;</ph> objects is an object in a byte array that represents data.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.WeakReference.Target%2A&gt;</ph>属性<ph id="ph2">&lt;xref:System.WeakReference&gt;</ph>对象是表示数据的字节数组中的对象。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>The example randomly accesses objects in the cache.</source>
          <target state="translated">该示例随机访问缓存中的对象。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>If an object is reclaimed for garbage collection, a new data object is regenerated; otherwise, the object is available to access because of the weak reference.</source>
          <target state="translated">如果对象进行垃圾回收回收，会重新生成新的数据对象;否则，该对象，可访问，因为弱引用。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>for the ability to call unmanaged code.</source>
          <target state="translated">表示调用非托管的代码的能力。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.WeakReference">
          <source>Demand value: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" /&gt;</ph>; Permission value: <ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">要求值： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" /&gt;</ph>;权限值： <ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="T:System.WeakReference">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Object)">
          <source>The object to track or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">要跟踪的对象或为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Object)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> class, referencing the specified object.</source>
          <target state="translated">引用指定的对象初始化 <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.#ctor(System.Object)">
          <source>This constructor creates a short weak reference to <ph id="ph1">`target`</ph>.</source>
          <target state="translated">此构造函数创建对的短弱引用<ph id="ph1">`target`</ph>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
          <source>An object to track.</source>
          <target state="translated">要跟踪的对象。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
          <source>Indicates when to stop tracking the object.</source>
          <target state="translated">指示何时停止跟踪对象。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, the object is tracked after finalization; if <ph id="ph2">&lt;see langword="false" /&gt;</ph>, the object is only tracked until finalization.</source>
          <target state="translated">如果为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>，则在终结后跟踪对象；如果为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>，则仅在终结前跟踪对象。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> class, referencing the specified object and using the specified resurrection tracking.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> 类的新实例，引用指定的对象并使用指定的复活跟踪。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
          <source>If <ph id="ph1">`trackResurrection`</ph> is <ph id="ph2">`false`</ph>, a short weak reference is created.</source>
          <target state="translated">如果<ph id="ph1">`trackResurrection`</ph>是<ph id="ph2">`false`</ph>，则创建短的弱引用。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
          <source>If <ph id="ph1">`trackResurrection`</ph> is <ph id="ph2">`true`</ph>, a long weak reference is created.</source>
          <target state="translated">如果<ph id="ph1">`trackResurrection`</ph>是<ph id="ph2">`true`</ph>，创建一个长弱引用。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
          <source>The following example creates a cache of data objects with short weak references.</source>
          <target state="translated">下面的示例使用短弱引用创建数据对象的缓存。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
          <source>This example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.WeakReference&gt;</ph> class.</source>
          <target state="translated">此示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.WeakReference&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>An object that holds all the data needed to serialize or deserialize the current <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> object.</source>
          <target state="translated">保存序列化或反序列化当前的 <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> 对象所需的全部数据的对象。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>(Reserved) Describes the source and destination of the serialized stream specified by <bpt id="p1">&lt;c&gt;</bpt>info<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">（保留）描述由 <bpt id="p1">&lt;c&gt;</bpt>info<ept id="p1">&lt;/c&gt;</ept> 指定的序列化流的源和目标。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> class, using deserialized data from the specified serialization and stream objects.</source>
          <target state="translated">使用从指定的序列化和流对象反序列化的数据，初始化 <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">`context`</ph> parameter is reserved, and does not currently participate in this operation.</source>
          <target state="translated"><ph id="ph1">`context`</ph>参数是保留，并且当前不参与此操作。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.WeakReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source><ph id="ph1">&lt;paramref name="info" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="info" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.WeakReference.Finalize">
          <source>Discards the reference to the target represented by the current <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> object.</source>
          <target state="translated">丢弃对当前 <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> 对象表示的目标的引用。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>An object that holds all the data needed to serialize or deserialize the current <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> object.</source>
          <target state="translated">保存序列化或反序列化当前的 <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> 对象所需的全部数据的对象。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>(Reserved) The location where serialized data is stored and retrieved.</source>
          <target state="translated">（保留）存储和检索序列化数据的位置。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Populates a <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object with all the data needed to serialize the current <ph id="ph2">&lt;see cref="T:System.WeakReference" /&gt;</ph> object.</source>
          <target state="translated">使用序列化当前的 <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> 对象所需的所有数据填充 <ph id="ph2">&lt;see cref="T:System.WeakReference" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This method stores all the information in <ph id="ph1">`info`</ph> necessary to serialize the current <ph id="ph2">&lt;xref:System.WeakReference&gt;</ph> object.</source>
          <target state="translated">此方法将存储中的所有信息<ph id="ph1">`info`</ph>需序列化当前<ph id="ph2">&lt;xref:System.WeakReference&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">`context`</ph> parameter is reserved and is not currently used in the execution of this method.</source>
          <target state="translated"><ph id="ph1">`context`</ph>参数是保留的当前未使用此方法执行过程中。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source><ph id="ph1">&lt;paramref name="info" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="info" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="P:System.WeakReference.IsAlive">
          <source>Gets an indication whether the object referenced by the current <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> object has been garbage collected.</source>
          <target state="translated">获取当前 <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> 对象引用的对象是否已被垃圾回收的指示。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.IsAlive">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the object referenced by the current <ph id="ph2">&lt;see cref="T:System.WeakReference" /&gt;</ph> object has not been garbage collected and is still accessible; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果当前 <ph id="ph2">&lt;see cref="T:System.WeakReference" /&gt;</ph> 对象引用的对象尚未被垃圾回收且仍然可访问，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.IsAlive">
          <source>Because an object could potentially be reclaimed for garbage collection immediately after the <ph id="ph1">&lt;xref:System.WeakReference.IsAlive%2A&gt;</ph> property returns <ph id="ph2">`true`</ph>, using this property is not recommended unless you are testing only for a <ph id="ph3">`false`</ph> return value.</source>
          <target state="translated">因为可能无法的垃圾回收回收对象之后立即<ph id="ph1">&lt;xref:System.WeakReference.IsAlive%2A&gt;</ph>属性返回<ph id="ph2">`true`</ph>，除非你测试仅针对不建议使用此属性<ph id="ph3">`false`</ph>返回值。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="P:System.WeakReference.Target">
          <source>Gets or sets the object (the target) referenced by the current <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> object.</source>
          <target state="translated">获取或设置当前 <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> 对象引用的对象（目标）。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.Target">
          <source><ph id="ph1">&lt;see langword="null" /&gt;</ph> if the object referenced by the current <ph id="ph2">&lt;see cref="T:System.WeakReference" /&gt;</ph> object has been garbage collected; otherwise, a reference to the object referenced by the current <ph id="ph3">&lt;see cref="T:System.WeakReference" /&gt;</ph> object.</source>
          <target state="translated">如果当前 <ph id="ph2">&lt;see cref="T:System.WeakReference" /&gt;</ph> 对象引用的对象已被垃圾回收，则为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>；否则为对该对象（当前 <ph id="ph3">&lt;see cref="T:System.WeakReference" /&gt;</ph> 对象引用的对象）的引用。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.Target">
          <source>After setting this property to the target object, make sure that there are no other strong references to the object; otherwise, it will not be collected.</source>
          <target state="translated">之后将此属性设置为目标对象，请确保该对象; 没有其他强引用否则，它将不会收集。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.Target">
          <source>The following example tries to obtain an object from a cache of objects with weak references.</source>
          <target state="translated">下面的示例尝试从具有弱引用的对象的缓存获取对象。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.Target">
          <source>If the object was reclaimed for garbage collection, a new object is generated.</source>
          <target state="translated">如果回收来回收垃圾回收的对象，将生成一个新的对象。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.Target">
          <source>This example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.WeakReference&gt;</ph> class.</source>
          <target state="translated">此示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.WeakReference&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="P:System.WeakReference.Target">
          <source>The reference to the target object is invalid.</source>
          <target state="translated">对目标对象的引用无效。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="P:System.WeakReference.Target">
          <source>This exception can be thrown while setting this property if the value is a null reference or if the object has been finalized during the set operation.</source>
          <target state="translated">设置此属性时，如果值为 null 引用或在设置操作期间终止了该对象，则可能引发此异常。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="P:System.WeakReference.TrackResurrection">
          <source>Gets an indication whether the object referenced by the current <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> object is tracked after it is finalized.</source>
          <target state="translated">获取当前 <ph id="ph1">&lt;see cref="T:System.WeakReference" /&gt;</ph> 对象引用的对象在终止后是否会被跟踪的指示。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.TrackResurrection">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the object the current <ph id="ph2">&lt;see cref="T:System.WeakReference" /&gt;</ph> object refers to is tracked after finalization; or <ph id="ph3">&lt;see langword="false" /&gt;</ph> if the object is only tracked until finalization.</source>
          <target state="translated">如果当前 <ph id="ph2">&lt;see cref="T:System.WeakReference" /&gt;</ph> 对象引用的对象在终止后会被跟踪，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则，如果该对象仅在终止前被跟踪，则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.WeakReference.TrackResurrection">
          <source>If <ph id="ph1">`true`</ph>, the weak reference is a long weak reference and <ph id="ph2">`true`</ph> was specified for the <ph id="ph3">`trackResurrection`</ph> parameter in the <ph id="ph4">&lt;xref:System.WeakReference&gt;</ph> constructor.</source>
          <target state="translated">如果<ph id="ph1">`true`</ph>，弱引用为长弱引用和<ph id="ph2">`true`</ph>为指定<ph id="ph3">`trackResurrection`</ph>中的参数<ph id="ph4">&lt;xref:System.WeakReference&gt;</ph>构造函数。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>