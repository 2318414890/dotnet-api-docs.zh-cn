<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ba57709bdcf89495aeb6f03102764308431ac8c1" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37480589" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <TypeSignature Language="F#" Value="type IDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供一种用于释放非托管资源的机制。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此接口的主要用途是释放非托管的资源。 垃圾回收器会自动释放不再使用该对象时分配给托管对象的内存。 但是，不可能预测时将发生垃圾回收。 此外，垃圾回收器是未知的非托管资源，例如窗口句柄，或打开文件和流。  
  
 使用<xref:System.IDisposable.Dispose%2A>此接口来显式释放与垃圾收集器一起使用的非托管的资源的方法。 当不再需要对象时，对象的使用者可以调用此方法。  
  
> [!WARNING]
>  它是一项重大更改添加<xref:System.IDisposable>向现有类的接口。 因为现有类型使用者不能调用<xref:System.IDisposable.Dispose%2A>，不能为某些将释放由您的类型的非托管的资源。  
  
 因为<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>实现当不再需要拥有的实例的资源类型的使用者调用，应换行中的托管的对象<xref:System.Runtime.InteropServices.SafeHandle>（建议的替代项），也应重写<xref:System.Object.Finalize%2A?displayProperty=nameWithType>释放非托管的资源的使用者忘记调用<xref:System.IDisposable.Dispose%2A>。  
  
> [!IMPORTANT]
>  在.NET Framework 中，c + + 编译器支持的资源进行确定性处置，并且不允许直接实现<xref:System.IDisposable.Dispose%2A>方法。  
  
 有关如何的详细讨论此接口和<xref:System.Object.Finalize%2A?displayProperty=nameWithType>使用方法，请参阅[垃圾回收](~/docs/standard/garbage-collection/index.md)并[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)主题。  
  
## <a name="using-an-object-that-implements-idisposable"></a>使用实现 IDisposable 的对象  
 如果您的应用程序只需使用实现的对象<xref:System.IDisposable>接口，应调用对象的<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>实现完成后使用它。 具体取决于您的编程语言，可以实现这两种方式之一：  
  
-   通过使用一种语言构造如`using`C# 和 Visual Basic 中的语句。  
  
-   通过包装到调用来<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>中的实现`try` / `finally`块。  
  
> [!NOTE]
>  文档类型实现<xref:System.IDisposable>请注意这一事实，包括提醒调用其<xref:System.IDisposable.Dispose%2A>实现。  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a>C# 和 Visual Basic Using 语句  
 如果你的语言支持一种构造，如[使用](~/docs/csharp/language-reference/keywords/using.md)C# 中的语句和[Using](~/docs/visual-basic/language-reference/statements/using-statement.md)语句在 Visual Basic 中的，您可以使用它而不是显式调用<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>自己。 下面的示例使用此方法在定义`WordCount`保留有关文件和在其中的单词数的信息的类。  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 `using`语句是实际在语法上方便。 在编译时，语言编译器实现的中间语言 (IL) 以`try` / `finally`块。  
  
 有关详细信息`using`语句，请参阅[Using 语句](~/docs/visual-basic/language-reference/statements/using-statement.md)或[using 语句](~/docs/csharp/language-reference/keywords/using-statement.md)主题。  
  
### <a name="the-tryfinally-block"></a>Try/Finally 块  
 如果您的编程语言不支持的构造类似`using`C# 或 Visual Basic 中的语句或如果不想使用它，则可以调用<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>实现与`finally`块`try` / `finally`语句。 下面的示例将替换`using`与上一示例中阻止`try` / `finally`块。  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 有关详细信息`try` / `finally`模式，请参阅[尝试...Catch...Finally 语句](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md)，[的 try-finally](~/docs/csharp/language-reference/keywords/try-finally.md)，或[try-finally 语句](http://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82)。  
  
## <a name="implementing-idisposable"></a>正在实现 IDisposable  
 应实现<xref:System.IDisposable>仅当你的类型直接使用非托管的资源。 类型使用者可以调用你<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>实现来释放资源，当不再需要的实例。 处理情况下它们无法调用<xref:System.IDisposable.Dispose%2A>，您都应的使用一个类派生自<xref:System.Runtime.InteropServices.SafeHandle>包装的非托管的资源，也应重写<xref:System.Object.Finalize%2A?displayProperty=nameWithType>为引用类型的方法。 在任一情况下，您使用<xref:System.IDisposable.Dispose%2A>方法来执行任何清理后必须执行使用的非托管的资源，例如释放或重置非托管的资源。  
  
> [!IMPORTANT]
>  如果您要定义一个基类，它使用非托管的资源和的或可能具有应释放的子类，则应实现<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>方法，并提供第二个重载`Dispose`、 下一步中所述部分。  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a>IDisposable 和继承层次结构  
 具有应该是可释放的子类的基类必须实现<xref:System.IDisposable>，如下所示。 每当您实现时，应使用此模式<xref:System.IDisposable>不是任何类型上`sealed`(`NotInheritable`在 Visual Basic 中)。  
  
-   它应提供一个公共、 非虚拟<xref:System.IDisposable.Dispose>方法和受保护虚拟`Dispose(Boolean disposing)`方法。  
  
-   <xref:System.IDisposable.Dispose>方法必须调用`Dispose(true)`和应取消终止操作的性能。  
  
-   基类型不应包括任何终结器。  
  
 下面的代码段反映了基类的释放模式。 它假定你的类型不重写<xref:System.Object.Finalize%2A?displayProperty=nameWithType>方法。  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 如果你重写<xref:System.Object.Finalize%2A?displayProperty=nameWithType>方法，您的类应实施以下模式。  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 子类应实现以下可释放模式：  
  
-   它们必须重写 `Dispose(Boolean)` 并调用基类 `Dispose(Boolean)` 实现。  
  
-   如果需要，他们可以提供终结器。 终结器必须调用 `Dispose(false)`。  
  
 请注意，派生的类不自行实现<xref:System.IDisposable>接口，并不包括无参数<xref:System.IDisposable.Dispose%2A>方法。 它们仅重写基类`Dispose(Boolean)`方法。  
  
 下面的代码段反映了派生类的释放模式。 它假定你的类型不重写<xref:System.Object.Finalize%2A?displayProperty=nameWithType>方法。  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 下面的示例演示如何创建实现的资源类<xref:System.IDisposable>接口。  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit" Usage="iDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>执行与释放或重置非托管资源关联的应用程序定义的任务。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此方法可以关闭或释放非托管的资源，例如文件、 流和句柄由实现此接口的类的实例。 按照约定，用于与释放对象持有的资源相关联的所有任务使用此方法或准备对象以便重复使用。  
  
> [!WARNING]
>  如果您使用的实现的类<xref:System.IDisposable>接口，应调用其<xref:System.IDisposable.Dispose%2A>完后使用类的实现。 有关详细信息，请参阅"使用实现 IDisposable 的对象"一节中<xref:System.IDisposable>主题。  
  
 实现此方法时，请确保所有持有中传播的包含层次结构通过调用来释放资源。 例如，如果对象 A 分配一个对象 B，并且对象 B 分配对象 C，然后一个<xref:System.IDisposable.Dispose%2A>实现必须调用<xref:System.IDisposable.Dispose%2A>在 B 上，这又必须调用<xref:System.IDisposable.Dispose%2A>上 c。  
  
> [!IMPORTANT]
>  C + + 编译器支持的资源进行确定性处置，并且不允许直接实现<xref:System.IDisposable.Dispose%2A>方法。  
  
 对象还必须调用<xref:System.IDisposable.Dispose%2A>如果基类实现其基本类的方法<xref:System.IDisposable>。 有关实现详细信息<xref:System.IDisposable>的基类和子类，请参阅中的"IDisposable 和继承层次结构"部分<xref:System.IDisposable>主题。  
  
 如果对象的<xref:System.IDisposable.Dispose%2A>不止一次调用方法，该对象必须在第一个后忽略所有调用。 该对象必须引发异常，如果其<xref:System.IDisposable.Dispose%2A>多次调用方法。 不是实例方法<xref:System.IDisposable.Dispose%2A>可能会引发<xref:System.ObjectDisposedException>已释放资源。  
  
 用户可能希望使用特定的约定来表示已分配的状态和已释放的状态的资源类型。 此示例是流类，它们是传统上看作是打开还是关闭。 具有此类的约定的类的实施者可以选择实现具有自定义名称的公共方法，如`Close`，则该调用<xref:System.IDisposable.Dispose%2A>方法。  
  
 因为<xref:System.IDisposable.Dispose%2A>方法必须显式调用时，始终是十分危险的非托管的资源不会释放，因为对象的使用者无法调用其<xref:System.IDisposable.Dispose%2A>方法。 有两种方法来避免这种情况：  
  
-   在从派生的对象中包装托管的资源<xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>。 你<xref:System.IDisposable.Dispose%2A>实现然后调用<xref:System.IDisposable.Dispose%2A>方法的<xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>实例。 有关详细信息，请参阅"SafeHandle 备用方法"部分中的<xref:System.Object.Finalize%2A?displayProperty=nameWithType>主题。  
  
-   实现终结器释放资源时<xref:System.IDisposable.Dispose%2A>不调用。 默认情况下，垃圾回收器自动回收其内存之前调用对象的终结器。 但是，如果<xref:System.IDisposable.Dispose%2A>方法已被调用，它通常是不必要的垃圾回收器调用已释放的对象的终结器。 若要防止自动终止<xref:System.IDisposable.Dispose%2A>实现可以调用<xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>方法。  
  
 当使用一个对象，如访问非托管的资源， <xref:System.IO.StreamWriter>，一个好的做法是创建与实例`using`语句。 `using`语句会自动关闭流并调用<xref:System.IDisposable.Dispose%2A>上正在使用它的代码已完成的对象。 有关示例，请参阅<xref:System.IO.StreamWriter>类。  
  
   
  
## Examples  
 下面的示例演示如何实现<xref:System.IDisposable.Dispose%2A>方法。  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>