<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9ee9987222f28a3d2503b139f93b9f3068e0c994" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36430242" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <TypeSignature Language="F#" Value="type IDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="5e303-101">提供一种用于释放非托管资源的机制。</span>
      <span class="sxs-lookup">
        <span data-stu-id="5e303-101">Provides a mechanism for releasing unmanaged resources.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e303-102">此接口的主要用途是释放非托管的资源。</span><span class="sxs-lookup"><span data-stu-id="5e303-102">The primary use of this interface is to release unmanaged resources.</span></span> <span data-ttu-id="5e303-103">垃圾回收器自动释放不再使用该对象时分配给托管对象的内存。</span><span class="sxs-lookup"><span data-stu-id="5e303-103">The garbage collector automatically releases the memory allocated to a managed object when that object is no longer used.</span></span> <span data-ttu-id="5e303-104">但是，不可能预测将发生垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="5e303-104">However, it is not possible to predict when garbage collection will occur.</span></span> <span data-ttu-id="5e303-105">此外，垃圾回收器具有不知道如窗口句柄的非托管资源，或打开文件和流。</span><span class="sxs-lookup"><span data-stu-id="5e303-105">Furthermore, the garbage collector has no knowledge of unmanaged resources such as window handles, or open files and streams.</span></span>  
  
 <span data-ttu-id="5e303-106">使用<xref:System.IDisposable.Dispose%2A>的此接口可显式释放垃圾回收器结合使用的非托管的资源的方法。</span><span class="sxs-lookup"><span data-stu-id="5e303-106">Use the <xref:System.IDisposable.Dispose%2A> method of this interface to explicitly release unmanaged resources in conjunction with the garbage collector.</span></span> <span data-ttu-id="5e303-107">不再需要该对象时，对象的使用者可以调用此方法。</span><span class="sxs-lookup"><span data-stu-id="5e303-107">The consumer of an object can call this method when the object is no longer needed.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="5e303-108">它是一项重大更改添加<xref:System.IDisposable>到现有类的接口。</span><span class="sxs-lookup"><span data-stu-id="5e303-108">It is a breaking change to add the <xref:System.IDisposable> interface to an existing class.</span></span> <span data-ttu-id="5e303-109">因为你类型的预先存在的使用者不能调用<xref:System.IDisposable.Dispose%2A>，则无法确保将释放由您的类型所持有的非托管的资源。</span><span class="sxs-lookup"><span data-stu-id="5e303-109">Because pre-existing consumers of your type cannot call <xref:System.IDisposable.Dispose%2A>, you cannot be certain that unmanaged resources held by your type will be released.</span></span>  
  
 <span data-ttu-id="5e303-110">因为<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>不再需要实例拥有的资源时，调用将实现由一种类型的使用者，应当换行中的托管的对象<xref:System.Runtime.InteropServices.SafeHandle>（建议的替代项），也应重写<xref:System.Object.Finalize%2A?displayProperty=nameWithType>释放非托管的资源中，使用者忘记调用<xref:System.IDisposable.Dispose%2A>。</span><span class="sxs-lookup"><span data-stu-id="5e303-110">Because the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation is called by the consumer of a type when the resources owned by an instance are no longer needed, you should either wrap the managed object in a <xref:System.Runtime.InteropServices.SafeHandle> (the recommended alternative), or you should override <xref:System.Object.Finalize%2A?displayProperty=nameWithType> to free unmanaged resources in the event that the consumer forgets to call <xref:System.IDisposable.Dispose%2A>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="5e303-111">在.NET Framework 中，c + + 编译器支持的资源进行确定性处置，并且不允许直接实现<xref:System.IDisposable.Dispose%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="5e303-111">In the .NET Framework, the C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="5e303-112">有关如何的详细讨论此接口与<xref:System.Object.Finalize%2A?displayProperty=nameWithType>方法使用，请参阅[垃圾回收](~/docs/standard/garbage-collection/index.md)和[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)主题。</span><span class="sxs-lookup"><span data-stu-id="5e303-112">For a detailed discussion about how this interface and the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method are used, see the [Garbage Collection](~/docs/standard/garbage-collection/index.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md) topics.</span></span>  
  
## <a name="using-an-object-that-implements-idisposable"></a><span data-ttu-id="5e303-113">使用实现 IDisposable 的对象</span><span class="sxs-lookup"><span data-stu-id="5e303-113">Using an object that implements IDisposable</span></span>  
 <span data-ttu-id="5e303-114">如果你的应用程序只需使用实现的对象<xref:System.IDisposable>接口，你应调用对象的<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>实现在完成使用它时。</span><span class="sxs-lookup"><span data-stu-id="5e303-114">If your app simply uses an object that implements the <xref:System.IDisposable> interface, you should call the object's <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation when you are finished using it.</span></span> <span data-ttu-id="5e303-115">具体取决于您的编程语言，可以实现这两种方式之一：</span><span class="sxs-lookup"><span data-stu-id="5e303-115">Depending on your programming language, you can do this in one of two ways:</span></span>  
  
-   <span data-ttu-id="5e303-116">通过使用一种语言构造 （如`using`C# 和 Visual Basic 中的语句。</span><span class="sxs-lookup"><span data-stu-id="5e303-116">By using a language construct such as the `using` statement in C# and Visual Basic.</span></span>  
  
-   <span data-ttu-id="5e303-117">通过包装到调用来<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>中的实现`try` / `finally`块。</span><span class="sxs-lookup"><span data-stu-id="5e303-117">By wrapping the call to the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation in a `try`/`finally` block.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5e303-118">文档类型实现<xref:System.IDisposable>请注意这一事实，包括提醒调用其<xref:System.IDisposable.Dispose%2A>实现。</span><span class="sxs-lookup"><span data-stu-id="5e303-118">Documentation for types that implement <xref:System.IDisposable> note that fact and include a reminder to call its <xref:System.IDisposable.Dispose%2A> implementation.</span></span>  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a><span data-ttu-id="5e303-119">C# 和 Visual Basic 使用语句</span><span class="sxs-lookup"><span data-stu-id="5e303-119">The C# and Visual Basic Using statement</span></span>  
 <span data-ttu-id="5e303-120">如果你的语言支持一种构造，如[使用](~/docs/csharp/language-reference/keywords/using.md)C# 中的语句和[使用](~/docs/visual-basic/language-reference/statements/using-statement.md)在 Visual Basic 中的语句，你可以使用它而不是显式调用<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>自己。</span><span class="sxs-lookup"><span data-stu-id="5e303-120">If your language supports a construct such as the [using](~/docs/csharp/language-reference/keywords/using.md) statement in C# and the [Using](~/docs/visual-basic/language-reference/statements/using-statement.md) statement in Visual Basic, you can use it instead of explicitly calling <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> yourself.</span></span> <span data-ttu-id="5e303-121">下面的示例使用此方法中定义`WordCount`会保留有关文件和在其中的单词数的信息的类。</span><span class="sxs-lookup"><span data-stu-id="5e303-121">The following example uses this approach in defining a `WordCount` class that preserves information about a file and the number of words in it.</span></span>  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 <span data-ttu-id="5e303-122">`using`语句是实际在语法上方便。</span><span class="sxs-lookup"><span data-stu-id="5e303-122">The `using` statement is actually a syntactic convenience.</span></span> <span data-ttu-id="5e303-123">在编译时的语言编译器实现的中间语言 (IL) 以`try` / `finally`块。</span><span class="sxs-lookup"><span data-stu-id="5e303-123">At compile time, the language compiler implements the intermediate language (IL) for a `try`/`finally` block.</span></span>  
  
 <span data-ttu-id="5e303-124">有关详细信息`using`语句，请参阅[Using 语句](~/docs/visual-basic/language-reference/statements/using-statement.md)或[using 语句](~/docs/csharp/language-reference/keywords/using-statement.md)主题。</span><span class="sxs-lookup"><span data-stu-id="5e303-124">For more information about the `using` statement, see the [Using Statement](~/docs/visual-basic/language-reference/statements/using-statement.md) or [using Statement](~/docs/csharp/language-reference/keywords/using-statement.md) topics.</span></span>  
  
### <a name="the-tryfinally-block"></a><span data-ttu-id="5e303-125">Try/Finally 块</span><span class="sxs-lookup"><span data-stu-id="5e303-125">The Try/Finally block</span></span>  
 <span data-ttu-id="5e303-126">如果您的编程语言不支持类似的构造`using`C# 或 Visual Basic 中的语句或如果你不希望使用它，则可以调用<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>实现从`finally`块`try` / `finally`语句。</span><span class="sxs-lookup"><span data-stu-id="5e303-126">If your programming language does not support a construct like the `using` statement in C# or Visual Basic, or if you prefer not to use it, you can call the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation from the `finally` block of a `try`/`finally` statement.</span></span> <span data-ttu-id="5e303-127">下面的示例替换`using`块中，与前面的示例在`try` / `finally`块。</span><span class="sxs-lookup"><span data-stu-id="5e303-127">The following example replaces the `using` block in the previous example with a `try`/`finally` block.</span></span>  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 <span data-ttu-id="5e303-128">有关详细信息`try` / `finally`模式，请参阅[重试...Catch...Finally 语句](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md)，[的 try-finally](~/docs/csharp/language-reference/keywords/try-finally.md)，或[try-finally 语句](http://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82)。</span><span class="sxs-lookup"><span data-stu-id="5e303-128">For more information about the `try`/`finally` pattern, see [Try...Catch...Finally Statement](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md), or [try-finally Statement](http://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).</span></span>  
  
## <a name="implementing-idisposable"></a><span data-ttu-id="5e303-129">正在实现 IDisposable</span><span class="sxs-lookup"><span data-stu-id="5e303-129">Implementing IDisposable</span></span>  
 <span data-ttu-id="5e303-130">应实现<xref:System.IDisposable>仅当你的类型直接使用非托管的资源。</span><span class="sxs-lookup"><span data-stu-id="5e303-130">You should implement <xref:System.IDisposable> only if your type uses unmanaged resources directly.</span></span> <span data-ttu-id="5e303-131">你的类型的使用者可以调用你<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>实现实例不再需要时释放资源。</span><span class="sxs-lookup"><span data-stu-id="5e303-131">The consumers of your type can call your <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation to free resources when the instance is no longer needed.</span></span> <span data-ttu-id="5e303-132">若要处理它们无法调用的情况<xref:System.IDisposable.Dispose%2A>，应从派生的类使用<xref:System.Runtime.InteropServices.SafeHandle>来包装非托管的资源，或你应该重写<xref:System.Object.Finalize%2A?displayProperty=nameWithType>对于引用类型的方法。</span><span class="sxs-lookup"><span data-stu-id="5e303-132">To handle cases in which they fail to call <xref:System.IDisposable.Dispose%2A>, you should either use a class derived from <xref:System.Runtime.InteropServices.SafeHandle> to wrap the unmanaged resources, or you should override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method for a reference type.</span></span> <span data-ttu-id="5e303-133">在任一情况下，你使用<xref:System.IDisposable.Dispose%2A>方法来执行任何清理后必须使用的非托管的资源，如释放或重置非托管的资源。</span><span class="sxs-lookup"><span data-stu-id="5e303-133">In either case, you use the <xref:System.IDisposable.Dispose%2A> method to perform whatever cleanup is necessary after using the unmanaged resources, such as freeing, releasing, or resetting the unmanaged resources.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="5e303-134">如果你正在定义的基类，它使用非托管的资源和，具有，或可能有，应释放的子类，则应实现<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>方法并提供的第二个重载`Dispose`，下一步中所述部分。</span><span class="sxs-lookup"><span data-stu-id="5e303-134">If you are defining a base class that uses unmanaged resources and that either has, or is likely to have, subclasses that should be disposed, you should implement the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method and provide a second overload of `Dispose`, as discussed in the next section.</span></span>  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a><span data-ttu-id="5e303-135">IDisposable 和继承层次结构</span><span class="sxs-lookup"><span data-stu-id="5e303-135">IDisposable and the inheritance hierarchy</span></span>  
 <span data-ttu-id="5e303-136">具有应该是可释放的子类的基类必须实现<xref:System.IDisposable>，如下所示。</span><span class="sxs-lookup"><span data-stu-id="5e303-136">A base class with subclasses that should be disposable must implement <xref:System.IDisposable> as follows.</span></span> <span data-ttu-id="5e303-137">每当你实现时，应使用此模式<xref:System.IDisposable>上不是任何类型`sealed`(`NotInheritable`在 Visual Basic 中)。</span><span class="sxs-lookup"><span data-stu-id="5e303-137">You should use this pattern whenever you implement <xref:System.IDisposable> on any type that isn't `sealed` (`NotInheritable` in Visual Basic).</span></span>  
  
-   <span data-ttu-id="5e303-138">它应提供一个公共、 非虚拟<xref:System.IDisposable.Dispose>方法和受保护虚拟`Dispose(Boolean disposing)`方法。</span><span class="sxs-lookup"><span data-stu-id="5e303-138">It should provide one public, non-virtual <xref:System.IDisposable.Dispose> method and a protected virtual `Dispose(Boolean disposing)` method.</span></span>  
  
-   <span data-ttu-id="5e303-139"><xref:System.IDisposable.Dispose>方法必须调用`Dispose(true)`和应该禁止显示性能的终止。</span><span class="sxs-lookup"><span data-stu-id="5e303-139">The <xref:System.IDisposable.Dispose> method must call `Dispose(true)` and should suppress finalization for performance.</span></span>  
  
-   <span data-ttu-id="5e303-140">基类型不应包括任何终结器。</span><span class="sxs-lookup"><span data-stu-id="5e303-140">The base type should not include any finalizers.</span></span>  
  
 <span data-ttu-id="5e303-141">下面的代码段反映基类的释放模式。</span><span class="sxs-lookup"><span data-stu-id="5e303-141">The following code fragment reflects the dispose pattern for base classes.</span></span> <span data-ttu-id="5e303-142">它假定你的类型不会覆盖<xref:System.Object.Finalize%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="5e303-142">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 <span data-ttu-id="5e303-143">如果你重写<xref:System.Object.Finalize%2A?displayProperty=nameWithType>方法，你的类应实现以下模式。</span><span class="sxs-lookup"><span data-stu-id="5e303-143">If you do override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method, your class should implement the following pattern.</span></span>  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 <span data-ttu-id="5e303-144">子类应实现以下可释放模式：</span><span class="sxs-lookup"><span data-stu-id="5e303-144">Subclasses should implement the disposable pattern as follows:</span></span>  
  
-   <span data-ttu-id="5e303-145">它们必须重写 `Dispose(Boolean)` 并调用基类 `Dispose(Boolean)` 实现。</span><span class="sxs-lookup"><span data-stu-id="5e303-145">They must override `Dispose(Boolean)` and call the base class `Dispose(Boolean)` implementation.</span></span>  
  
-   <span data-ttu-id="5e303-146">如果需要，他们可以提供终结器。</span><span class="sxs-lookup"><span data-stu-id="5e303-146">They can provide a finalizer if needed.</span></span> <span data-ttu-id="5e303-147">终结器必须调用 `Dispose(false)`。</span><span class="sxs-lookup"><span data-stu-id="5e303-147">The finalizer must call `Dispose(false)`.</span></span>  
  
 <span data-ttu-id="5e303-148">请注意，派生的类未本身实现<xref:System.IDisposable>接口，但不包括无参数<xref:System.IDisposable.Dispose%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="5e303-148">Note that derived classes do not themselves implement the <xref:System.IDisposable> interface and do not include a parameterless <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="5e303-149">它们仅重写基类`Dispose(Boolean)`方法。</span><span class="sxs-lookup"><span data-stu-id="5e303-149">They only override the base class `Dispose(Boolean)` method.</span></span>  
  
 <span data-ttu-id="5e303-150">下面的代码段反映派生类的释放模式。</span><span class="sxs-lookup"><span data-stu-id="5e303-150">The following code fragment reflects the dispose pattern for derived classes.</span></span> <span data-ttu-id="5e303-151">它假定你的类型不会覆盖<xref:System.Object.Finalize%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="5e303-151">It assumes that your type does not override the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 <span data-ttu-id="5e303-152">下面的示例演示如何实现资源类创建<xref:System.IDisposable>接口。</span><span class="sxs-lookup"><span data-stu-id="5e303-152">The following example demonstrates how to create a resource class that implements the <xref:System.IDisposable> interface.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit" Usage="iDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="5e303-153">执行与释放或重置非托管资源关联的应用程序定义的任务。</span>
          <span class="sxs-lookup">
            <span data-stu-id="5e303-153">Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5e303-154">使用此方法关闭或释放非托管的资源，如文件、 流和由实现此接口的类实例所持有的句柄。</span><span class="sxs-lookup"><span data-stu-id="5e303-154">Use this method to close or release unmanaged resources such as files, streams, and handles held by an instance of the class that implements this interface.</span></span> <span data-ttu-id="5e303-155">按照约定，此方法用于与释放对象，保持的资源的所有任务或准备对象以便重复使用。</span><span class="sxs-lookup"><span data-stu-id="5e303-155">By convention, this method is used for all tasks associated with freeing resources held by an object, or preparing an object for reuse.</span></span>  
  
> [!WARNING]
>  <span data-ttu-id="5e303-156">如果你使用的一个类以实现<xref:System.IDisposable>接口，应调用其<xref:System.IDisposable.Dispose%2A>实现在完成使用类时。</span><span class="sxs-lookup"><span data-stu-id="5e303-156">If you are using a class that implements the <xref:System.IDisposable> interface, you should call its <xref:System.IDisposable.Dispose%2A> implementation when you are finished using the class.</span></span> <span data-ttu-id="5e303-157">有关详细信息，请参阅中的"使用实现 IDisposable 的对象"一节<xref:System.IDisposable>主题。</span><span class="sxs-lookup"><span data-stu-id="5e303-157">For more information, see the "Using an object that implements IDisposable" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="5e303-158">实现此方法时，请确保所有持有中传播的包含层次结构通过调用来释放资源。</span><span class="sxs-lookup"><span data-stu-id="5e303-158">When implementing this method, ensure that all held resources are freed by propagating the call through the containment hierarchy.</span></span> <span data-ttu-id="5e303-159">例如，如果对象 A 分配一个对象 B，并且对象 B 分配对象 C，然后 A 的<xref:System.IDisposable.Dispose%2A>实现必须调用<xref:System.IDisposable.Dispose%2A>在 B 上，其必须反过来调用<xref:System.IDisposable.Dispose%2A>C 上</span><span class="sxs-lookup"><span data-stu-id="5e303-159">For example, if an object A allocates an object B, and object B allocates an object C, then A's <xref:System.IDisposable.Dispose%2A> implementation must call <xref:System.IDisposable.Dispose%2A> on B, which must in turn call <xref:System.IDisposable.Dispose%2A> on C.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="5e303-160">C + + 编译器支持的资源进行确定性处置，并且不允许直接实现<xref:System.IDisposable.Dispose%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="5e303-160">The C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="5e303-161">对象还必须调用<xref:System.IDisposable.Dispose%2A>如果基类实现其基本类的方法<xref:System.IDisposable>。</span><span class="sxs-lookup"><span data-stu-id="5e303-161">An object must also call the <xref:System.IDisposable.Dispose%2A> method of its base class if the base class implements <xref:System.IDisposable>.</span></span> <span data-ttu-id="5e303-162">有关实现详细信息<xref:System.IDisposable>上基类和其子类，请参阅中的"IDisposable 和继承层次结构"部分<xref:System.IDisposable>主题。</span><span class="sxs-lookup"><span data-stu-id="5e303-162">For more information about implementing <xref:System.IDisposable> on a base class and its subclasses, see the "IDisposable and the inheritance hierarchy" section in the <xref:System.IDisposable> topic.</span></span>  
  
 <span data-ttu-id="5e303-163">如果对象的<xref:System.IDisposable.Dispose%2A>不止一次调用方法，该对象必须在第一个后忽略所有调用。</span><span class="sxs-lookup"><span data-stu-id="5e303-163">If an object's <xref:System.IDisposable.Dispose%2A> method is called more than once, the object must ignore all calls after the first one.</span></span> <span data-ttu-id="5e303-164">该对象一定不会引发异常，如果其<xref:System.IDisposable.Dispose%2A>多次调用方法。</span><span class="sxs-lookup"><span data-stu-id="5e303-164">The object must not throw an exception if its <xref:System.IDisposable.Dispose%2A> method is called multiple times.</span></span> <span data-ttu-id="5e303-165">实例方法以外<xref:System.IDisposable.Dispose%2A>可以引发<xref:System.ObjectDisposedException>已释放资源。</span><span class="sxs-lookup"><span data-stu-id="5e303-165">Instance methods other than <xref:System.IDisposable.Dispose%2A> can throw an <xref:System.ObjectDisposedException> when resources are already disposed.</span></span>  
  
 <span data-ttu-id="5e303-166">用户可能经历的资源类型，以使用特定的约定来表示已分配的状态和已释放的状态。</span><span class="sxs-lookup"><span data-stu-id="5e303-166">Users might expect a resource type to use a particular convention to denote an allocated state versus a freed state.</span></span> <span data-ttu-id="5e303-167">此示例是流类，该类通常想象成打开或关闭。</span><span class="sxs-lookup"><span data-stu-id="5e303-167">An example of this is stream classes, which are traditionally thought of as open or closed.</span></span> <span data-ttu-id="5e303-168">具有此类的约定的类实施者可以选择实现具有自定义名称的公共方法，如`Close`，则该调用<xref:System.IDisposable.Dispose%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="5e303-168">The implementer of a class that has such a convention might choose to implement a public method with a customized name, such as `Close`, that calls the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 <span data-ttu-id="5e303-169">因为<xref:System.IDisposable.Dispose%2A>方法必须显式调用时，还有很危险的非托管的资源不会释放，因为对象的使用者无法调用其<xref:System.IDisposable.Dispose%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="5e303-169">Because the <xref:System.IDisposable.Dispose%2A> method must be called explicitly, there is always a danger that the unmanaged resources will not be released, because the consumer of an object fails to call its <xref:System.IDisposable.Dispose%2A> method.</span></span> <span data-ttu-id="5e303-170">有两种方法来避免这种情况：</span><span class="sxs-lookup"><span data-stu-id="5e303-170">There are two ways to avoid this:</span></span>  
  
-   <span data-ttu-id="5e303-171">在从派生的对象中包装的托管的资源<xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="5e303-171">Wrap the managed resource in an object derived from <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>.</span></span> <span data-ttu-id="5e303-172">你<xref:System.IDisposable.Dispose%2A>实现然后调用<xref:System.IDisposable.Dispose%2A>方法<xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>实例。</span><span class="sxs-lookup"><span data-stu-id="5e303-172">Your <xref:System.IDisposable.Dispose%2A> implementation then calls the <xref:System.IDisposable.Dispose%2A> method of the <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> instances.</span></span> <span data-ttu-id="5e303-173">有关详细信息，请参阅中的"SafeHandle 备用方法"部分<xref:System.Object.Finalize%2A?displayProperty=nameWithType>主题。</span><span class="sxs-lookup"><span data-stu-id="5e303-173">For more information, see "The SafeHandle alternative" section in the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> topic.</span></span>  
  
-   <span data-ttu-id="5e303-174">实现终结器释放资源时<xref:System.IDisposable.Dispose%2A>不调用。</span><span class="sxs-lookup"><span data-stu-id="5e303-174">Implement a finalizer to free resources when <xref:System.IDisposable.Dispose%2A> is not called.</span></span> <span data-ttu-id="5e303-175">默认情况下，垃圾回收器自动回收其内存前调用对象的终结器。</span><span class="sxs-lookup"><span data-stu-id="5e303-175">By default, the garbage collector automatically calls an object's finalizer before reclaiming its memory.</span></span> <span data-ttu-id="5e303-176">但是，如果<xref:System.IDisposable.Dispose%2A>方法已被调用，它通常是不必要的垃圾回收器调用已释放的对象的终结器。</span><span class="sxs-lookup"><span data-stu-id="5e303-176">However, if the <xref:System.IDisposable.Dispose%2A> method has been called, it is typically unnecessary for the garbage collector to call the disposed object's finalizer.</span></span> <span data-ttu-id="5e303-177">若要防止自动终止，<xref:System.IDisposable.Dispose%2A>实现可以调用<xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="5e303-177">To prevent automatic finalization, <xref:System.IDisposable.Dispose%2A> implementations can call the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="5e303-178">当你使用一个对象，如访问非托管的资源， <xref:System.IO.StreamWriter>，很好的做法是创建与实例`using`语句。</span><span class="sxs-lookup"><span data-stu-id="5e303-178">When you use an object that accesses unmanaged resources, such as a <xref:System.IO.StreamWriter>, a good practice is to create the instance with a `using` statement.</span></span> <span data-ttu-id="5e303-179">`using`语句会自动关闭的流和调用<xref:System.IDisposable.Dispose%2A>上正在使用它的代码已完成的对象。</span><span class="sxs-lookup"><span data-stu-id="5e303-179">The `using` statement automatically closes the stream and calls <xref:System.IDisposable.Dispose%2A> on the object when the code that is using it has completed.</span></span> <span data-ttu-id="5e303-180">有关示例，请参阅<xref:System.IO.StreamWriter>类。</span><span class="sxs-lookup"><span data-stu-id="5e303-180">For an example, see the <xref:System.IO.StreamWriter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5e303-181">下面的示例演示如何实现<xref:System.IDisposable.Dispose%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="5e303-181">The following example shows how you can implement the <xref:System.IDisposable.Dispose%2A> method.</span></span>  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>