<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="AppDomainManager.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5afa9de797efa5c60841b32251ad2c07429684aaf.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">afa9de797efa5c60841b32251ad2c07429684aaf</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.AppDomainManager">
          <source>Provides a managed equivalent of an unmanaged host.</source>
          <target state="translated">提供非托管宿主的托管等效项。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainManager">
          <source>Do not use <ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph> to configure an application domain in ASP.NET.</source>
          <target state="translated">不要使用<ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph>在 ASP.NET 中配置应用程序域。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainManager">
          <source>In ASP.NET, configuration must be handled by the host.</source>
          <target state="translated">在 ASP.NET 中，配置必须由主机进行处理。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainManager">
          <source>Implementing the <ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph> class enables a hosting application to participate in the creation of new application domains.</source>
          <target state="translated">实现<ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph>类使主机的应用程序，以参与创建新的应用程序域。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainManager">
          <source>To replace the default <ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph>, identify the assembly and type of the replacement <ph id="ph2">&lt;xref:System.AppDomainManager&gt;</ph> in the APPDOMAIN_MANAGER_ASM and APPDOMAIN_MANAGER_TYPE environment variables, or use the <bpt id="p1">[</bpt><ph id="ph3">\&lt;</ph>appDomainManagerAssembly&gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagerassembly-element.md)</ept> and <bpt id="p2">[</bpt><ph id="ph4">\&lt;</ph>appDomainManagerType&gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagertype-element.md)</ept> elements in your configuration file.</source>
          <target state="translated">要替换默认的<ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph>，确定程序集和类型替换<ph id="ph2">&lt;xref:System.AppDomainManager&gt;</ph>中 APPDOMAIN_MANAGER_ASM 和 APPDOMAIN_MANAGER_TYPE 环境变量或使用<bpt id="p1">[</bpt> <ph id="ph3">\&lt;</ph>appDomainManagerAssembly&gt;<ept id="p1">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagerassembly-element.md)</ept>和<bpt id="p2">[</bpt> <ph id="ph4">\&lt;</ph>p e &gt;<ept id="p2">](~/docs/framework/configure-apps/file-schema/runtime/appdomainmanagertype-element.md)</ept>配置文件中的元素。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainManager">
          <source>The assembly must be fully trusted and be contained in the global assembly cache or the directory of the starting application.</source>
          <target state="translated">程序集必须是完全受信任，并且包含在全局程序集缓存或起始应用程序的目录。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainManager">
          <source>The type and assembly names must be fully qualified in the environment variables.</source>
          <target state="translated">在环境变量中必须完全限定的类型和程序集名称。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainManager">
          <source>For example:</source>
          <target state="translated">例如:</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainManager">
          <source>If the assembly that contains your subclass of <ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph> depends on assemblies that are marked with the conditional <ph id="ph2">&lt;xref:System.Security.AllowPartiallyTrustedCallersAttribute&gt;</ph> (APTCA) attribute, you must include those assemblies in the list that you pass to the <ph id="ph3">&lt;xref:System.AppDomainSetup.PartialTrustVisibleAssemblies%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.AppDomainSetup&gt;</ph> you use to create application domains.</source>
          <target state="translated">如果程序集包含的子类<ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph>取决于程序集标记有条件<ph id="ph2">&lt;xref:System.Security.AllowPartiallyTrustedCallersAttribute&gt;</ph>(APTCA) 特性，你必须将传递给列表中包括这些程序集<ph id="ph3">&lt;xref:System.AppDomainSetup.PartialTrustVisibleAssemblies%2A&gt;</ph>属性<ph id="ph4">&lt;xref:System.AppDomainSetup&gt;</ph>使用来创建应用程序域。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainManager">
          <source>Otherwise, the assemblies that are marked with the conditional APTCA attribute will be disabled.</source>
          <target state="translated">否则，将禁用用条件 APTCA 特性标记的程序集。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainManager">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph> is the managed equivalent of the unmanaged host.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph>为非托管主机的托管等效项。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainManager">
          <source>An <ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph> object participates in the creation of new application domains in a process and can customize the new <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> before other managed code runs.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph>对象参与的进程中的新应用程序域创建，并且可以自定义新<ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>其他托管的代码运行之前。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainManager">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph> can also supply host managers that participate in other aspects of common language runtime execution.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph>也可以提供主机管理器中使用公共语言运行时执行的其他方面。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainManager">
          <source>For example, an <ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph> can identify a <ph id="ph2">&lt;xref:System.Security.HostSecurityManager&gt;</ph> object that participates in the security decisions of the application domain.</source>
          <target state="translated">例如，<ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph>可以标识<ph id="ph2">&lt;xref:System.Security.HostSecurityManager&gt;</ph>参与应用程序域的安全决定的对象。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainManager">
          <source>Only assemblies granted <ph id="ph1">`FullTrust`</ph>, such as assemblies in the global assembly cache or identified as <ph id="ph2">`fullTrustAssemblies`</ph> in the <ph id="ph3">&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType&gt;</ph> method can be loaded in the  <ph id="ph4">&lt;xref:System.AppDomainManager.%23ctor%2A&gt;</ph> constructor and the <ph id="ph5">&lt;xref:System.AppDomainManager.InitializeNewDomain%2A&gt;</ph> method.</source>
          <target state="translated">程序集，授予<ph id="ph1">`FullTrust`</ph>，如在全局程序集缓存中的程序集还是已标识为<ph id="ph2">`fullTrustAssemblies`</ph>中<ph id="ph3">&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType&gt;</ph>方法可以加载在<ph id="ph4">&lt;xref:System.AppDomainManager.%23ctor%2A&gt;</ph>构造函数和<ph id="ph5">&lt;xref:System.AppDomainManager.InitializeNewDomain%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainManager">
          <source>This class contains a link demand and an inheritance demand at the class level.</source>
          <target state="translated">此类包含链接要求，并且在类级别继承要求。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainManager">
          <source>A <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when either the immediate caller or the derived class does not have infrastructure permission.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph>直接调用方或派生的类没有基础结构权限时，将引发。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainManager">
          <source>For details about security demands, see <bpt id="p1">[</bpt>Link Demands<ept id="p1">](~/docs/framework/misc/link-demands.md)</ept> and <bpt id="p2">[</bpt>Inheritance Demands<ept id="p2">](http://msdn.microsoft.com/library/28b9adbb-8f08-4f10-b856-dbf59eb932d9)</ept>.</source>
          <target state="translated">有关安全要求的详细信息，请参阅<bpt id="p1">[</bpt>链接需求<ept id="p1">](~/docs/framework/misc/link-demands.md)</ept>和<bpt id="p2">[</bpt>的继承需求<ept id="p2">](http://msdn.microsoft.com/library/28b9adbb-8f08-4f10-b856-dbf59eb932d9)</ept>。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainManager">
          <source>The following example shows a very simple implementation of <ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph>.</source>
          <target state="translated">下面的示例演示的非常简单实现<ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="T:System.AppDomainManager">
          <source>The caller does not have the correct permissions.</source>
          <target state="translated">调用方没有正确的权限。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="T:System.AppDomainManager">
          <source>See the Requirements section.</source>
          <target state="translated">请参阅“要求”部分。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainManager">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainManager">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainManager">
          <source>for derived classes to plug executable code into the common language runtime hosting infrastructure.</source>
          <target state="translated">用于派生类可以插入公共语言运行时承载基础结构的可执行代码。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.AppDomainManager">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure" /&gt;</ph>.</source>
          <target state="translated">关联枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.AppDomainManager.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.AppDomainManager" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.AppDomainManager" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.#ctor">
          <source>Only assemblies granted <ph id="ph1">`FullTrust`</ph>, such as assemblies in the global assembly cache or identified as <ph id="ph2">`fullTrustAssemblies`</ph> in the <ph id="ph3">&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType&gt;</ph> method can be loaded in the  <ph id="ph4">&lt;xref:System.AppDomainManager.%23ctor%2A&gt;</ph> constructor and the <ph id="ph5">&lt;xref:System.AppDomainManager.InitializeNewDomain%2A&gt;</ph> method.</source>
          <target state="translated">程序集，授予<ph id="ph1">`FullTrust`</ph>，如在全局程序集缓存中的程序集还是已标识为<ph id="ph2">`fullTrustAssemblies`</ph>中<ph id="ph3">&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType&gt;</ph>方法可以加载在<ph id="ph4">&lt;xref:System.AppDomainManager.%23ctor%2A&gt;</ph>构造函数和<ph id="ph5">&lt;xref:System.AppDomainManager.InitializeNewDomain%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.#ctor">
          <source>Requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.#ctor">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="P:System.AppDomainManager.ApplicationActivator">
          <source>Gets the application activator that handles the activation of add-ins and manifest-based applications for the domain.</source>
          <target state="translated">获取应用程序激活器，该激活器用于激活相应域中的外接程序和基于清单的应用程序。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainManager.ApplicationActivator">
          <source>The application activator.</source>
          <target state="translated">应用程序激活器。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainManager.ApplicationActivator">
          <source>There is a single designated instance of the <ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph> class in each <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> to which all add-in and manifest-based application activation calls are routed.</source>
          <target state="translated">没有指定的单个实例<ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph>中每个类<ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>激活调用路由到的所有外接程序和基于清单的应用程序。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainManager.ApplicationActivator">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph> for the current <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> can provide its own custom <ph id="ph3">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph>, or an instance of the default <ph id="ph4">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph> is created.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph>当前<ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>可以提供其自己的自定义<ph id="ph3">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph>，或默认实例<ph id="ph4">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph>创建。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.AppDomainManager.CheckSecuritySettings(System.Security.SecurityState)">
          <source>A subclass of <ph id="ph1">&lt;see cref="T:System.Security.SecurityState" /&gt;</ph> that identifies the operation whose security status is requested.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Security.SecurityState" /&gt;</ph> 的一个子类，用来标识请求其安全状态的操作。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.AppDomainManager.CheckSecuritySettings(System.Security.SecurityState)">
          <source>Indicates whether the specified operation is allowed in the application domain.</source>
          <target state="translated">指示是否允许在应用程序域中执行指定的操作。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.AppDomainManager.CheckSecuritySettings(System.Security.SecurityState)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the host allows the operation specified by <ph id="ph2">&lt;paramref name="state" /&gt;</ph> to be performed in the application domain; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果宿主允许在应用程序域中执行 <ph id="ph2">&lt;paramref name="state" /&gt;</ph> 指定的操作，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.CheckSecuritySettings(System.Security.SecurityState)">
          <source>The default implementation of this method returns <ph id="ph1">`false`</ph>.</source>
          <target state="translated">此方法的默认实现返回<ph id="ph1">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.CheckSecuritySettings(System.Security.SecurityState)">
          <source>This method is called when the <ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile.IncreaseQuotaTo%2A?displayProperty=nameWithType&gt;</ph> method has been called to increase the isolated storage quota.</source>
          <target state="translated">当调用此方法<ph id="ph1">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageFile.IncreaseQuotaTo%2A?displayProperty=nameWithType&gt;</ph>调用方法来增加独立的存储配额。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.CheckSecuritySettings(System.Security.SecurityState)">
          <source>An application that hosts the common language runtime (CLR) can override the <ph id="ph1">&lt;xref:System.AppDomainManager.CheckSecuritySettings%2A&gt;</ph> method to perform policy decisions based on an <ph id="ph2">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageSecurityState&gt;</ph> object (which inherits <ph id="ph3">&lt;xref:System.Security.SecurityState&gt;</ph>), and can then allow or prevent the increase.</source>
          <target state="translated">承载公共语言运行时 (CLR) 的应用程序可以重写<ph id="ph1">&lt;xref:System.AppDomainManager.CheckSecuritySettings%2A&gt;</ph>方法来执行策略决策基于<ph id="ph2">&lt;xref:System.IO.IsolatedStorage.IsolatedStorageSecurityState&gt;</ph>对象 (其继承<ph id="ph3">&lt;xref:System.Security.SecurityState&gt;</ph>)，，然后允许或禁止增加。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.CheckSecuritySettings(System.Security.SecurityState)">
          <source>For example, a host could prompt the end user to approve or deny the request to increase the quota.</source>
          <target state="translated">例如，主机可能提示最终用户可以批准或拒绝请求，以增加配额。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.CheckSecuritySettings(System.Security.SecurityState)">
          <source>The host's implementation of <ph id="ph1">&lt;xref:System.AppDomainManager.CheckSecuritySettings%2A&gt;</ph> should take into account the possibility of denial-of-service attacks.</source>
          <target state="translated">主机的实现<ph id="ph1">&lt;xref:System.AppDomainManager.CheckSecuritySettings%2A&gt;</ph>应考虑到拒绝服务攻击的可能性。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.CheckSecuritySettings(System.Security.SecurityState)">
          <source>For example, it should prompt the user only if the method is called from a user-initiated event such as a button click.</source>
          <target state="translated">例如，它应提示用户，仅当用户启动的事件中调用该方法，例如单击按钮。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>The friendly name of the domain.</source>
          <target state="translated">域的友好名称。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>An object that contains evidence mapped through the security policy to establish a top-of-stack permission set.</source>
          <target state="translated">一个对象，其中包含通过安全策略映射的证据，这些证据用于建立堆栈顶层的权限集。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>An object that contains application domain initialization information.</source>
          <target state="translated">包含应用程序域初始化信息的对象。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>Returns a new or existing application domain.</source>
          <target state="translated">返回新的或现有的应用程序域。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>A new or existing application domain.</source>
          <target state="translated">新的或现有的应用程序域。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>The friendly name, specified by the <ph id="ph1">`friendlyName`</ph> parameter, can be displayed in user interfaces to identify the domain.</source>
          <target state="translated">指定的友好名称<ph id="ph1">`friendlyName`</ph>参数，可以显示在用户界面，以标识域中。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.AppDomain.FriendlyName%2A&gt;</ph> property.</source>
          <target state="translated">有关更多信息，请参见 <ph id="ph1">&lt;xref:System.AppDomain.FriendlyName%2A&gt;</ph> 属性。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>The default <ph id="ph1">&lt;xref:System.AppDomainManager.CreateDomain%2A&gt;</ph> method calls the protected <ph id="ph2">&lt;xref:System.AppDomainManager.CreateDomainHelper%2A&gt;</ph> method to create the <ph id="ph3">&lt;xref:System.AppDomain&gt;</ph>.</source>
          <target state="translated">默认值<ph id="ph1">&lt;xref:System.AppDomainManager.CreateDomain%2A&gt;</ph>方法调用受保护<ph id="ph2">&lt;xref:System.AppDomainManager.CreateDomainHelper%2A&gt;</ph>方法来创建<ph id="ph3">&lt;xref:System.AppDomain&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>Overrides of this method do not need to call the <ph id="ph1">&lt;xref:System.AppDomainManager.CreateDomainHelper%2A&gt;</ph> method but can return an existing domain.</source>
          <target state="translated">重写此方法不需要调用<ph id="ph1">&lt;xref:System.AppDomainManager.CreateDomainHelper%2A&gt;</ph>方法，但可以返回现有域。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>When you inherit from the <ph id="ph1">&lt;see cref="T:System.AppDomainManager" /&gt;</ph> class and override the <ph id="ph2">&lt;see cref="M:System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)" /&gt;</ph> method, you can perform custom application domain initialization activities before calling the <ph id="ph3">&lt;see cref="M:System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)" /&gt;</ph> method, or not call the helper method at all.</source>
          <target state="translated">继承自<ph id="ph1">&lt;see cref="T:System.AppDomainManager" /&gt;</ph>类并重写<ph id="ph2">&lt;see cref="M:System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)" /&gt;</ph>方法，你可以执行之前调用的自定义应用程序域初始化活动<ph id="ph3">&lt;see cref="M:System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)" /&gt;</ph>方法或不调用在所有的帮助器方法。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>For example, you could modify the evidence passed in as <ph id="ph1">&lt;paramref name="securityInfo" /&gt;</ph>, update the fields of the associated <ph id="ph2">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph>, or reuse an exiting domain.</source>
          <target state="translated">例如，你可以修改作为传入的证据<ph id="ph1">&lt;paramref name="securityInfo" /&gt;</ph>，更新关联的字段<ph id="ph2">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph>，或重新使用现有的域。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>The friendly name of the domain.</source>
          <target state="translated">域的友好名称。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>An object that contains evidence mapped through the security policy to establish a top-of-stack permission set.</source>
          <target state="translated">一个对象，其中包含通过安全策略映射的证据，这些证据用于建立堆栈顶层的权限集。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>An object that contains application domain initialization information.</source>
          <target state="translated">包含应用程序域初始化信息的对象。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>Provides a helper method to create an application domain.</source>
          <target state="translated">提供帮助器方法以创建一个应用程序域。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>A newly created application domain.</source>
          <target state="translated">新创建的应用程序域。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>This protected helper method handles the creation of a new application domain.</source>
          <target state="translated">此受保护的帮助器方法可处理新的应用程序域的创建。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>This friendly name, specified by the <ph id="ph1">`friendlyName`</ph> parameter, can be displayed in user interfaces to identify the domain.</source>
          <target state="translated">指定此友好名称<ph id="ph1">`friendlyName`</ph>参数，可以显示在用户界面，以标识域中。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.AppDomain.FriendlyName%2A&gt;</ph> property.</source>
          <target state="translated">有关更多信息，请参见 <ph id="ph1">&lt;xref:System.AppDomain.FriendlyName%2A&gt;</ph> 属性。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source><ph id="ph1">&lt;paramref name="friendlyName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="friendlyName" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>for controlling evidence.</source>
          <target state="translated">用于控制证据。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>Security action: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.Demand" /&gt;</ph>.</source>
          <target state="translated">安全操作： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityAction.Demand" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.CreateDomainHelper(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph></source>
          <target state="translated">关联的枚举： <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="P:System.AppDomainManager.EntryAssembly">
          <source>Gets the entry assembly for an application.</source>
          <target state="translated">获取应用程序的入口程序集。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainManager.EntryAssembly">
          <source>The entry assembly for the application.</source>
          <target state="translated">应用程序的入口程序集。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainManager.EntryAssembly">
          <source>If the application is a manifest-activated application, the entry assembly is determined from the application manifest.</source>
          <target state="translated">如果应用程序清单激活应用程序，从应用程序清单确定入口程序集。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainManager.EntryAssembly">
          <source>If the application is not manifest activated, the entry assembly is the process executable in the default application domain.</source>
          <target state="translated">如果应用程序不是清单激活，入口程序集将是默认应用程序域中的可执行过程。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainManager.EntryAssembly">
          <source>In other application domains, the entry assembly is the first executable that was executed by the <ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssembly%2A?displayProperty=nameWithType&gt;</ph> method.</source>
          <target state="translated">在其他应用程序域中，该条目程序集是由已执行的第一个可执行文件<ph id="ph1">&lt;xref:System.AppDomain.ExecuteAssembly%2A?displayProperty=nameWithType&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="P:System.AppDomainManager.HostExecutionContextManager">
          <source>Gets the host execution context manager that manages the flow of the execution context.</source>
          <target state="translated">获取宿主执行上下文管理器，该管理器对执行上下文的流进行管理。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainManager.HostExecutionContextManager">
          <source>The host execution context manager.</source>
          <target state="translated">宿主执行上下文管理器。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainManager.HostExecutionContextManager">
          <source>This property allows a host to provide a <ph id="ph1">&lt;xref:System.Threading.HostExecutionContextManager&gt;</ph> that can participate in the flow of the execution context across asynchronous calls.</source>
          <target state="translated">此属性允许主机提供<ph id="ph1">&lt;xref:System.Threading.HostExecutionContextManager&gt;</ph>，它可参与的执行上下文流跨异步调用。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="P:System.AppDomainManager.HostSecurityManager">
          <source>Gets the host security manager that participates in security decisions for the application domain.</source>
          <target state="translated">获取宿主安全管理器，该管理器参与应用程序域的安全决策。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainManager.HostSecurityManager">
          <source>The host security manager.</source>
          <target state="translated">宿主安全管理器。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainManager.HostSecurityManager">
          <source>This property allows a host to provide a <ph id="ph1">&lt;xref:System.Security.HostSecurityManager&gt;</ph> to participate in the security decisions for the application domain.</source>
          <target state="translated">此属性允许主机提供<ph id="ph1">&lt;xref:System.Security.HostSecurityManager&gt;</ph>参与应用程序域的安全决定。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainManager.HostSecurityManager">
          <source>The following example shows an override of the <ph id="ph1">&lt;xref:System.AppDomainManager.HostSecurityManager%2A&gt;</ph> property for a custom application domain manager.</source>
          <target state="translated">下面的示例演示如何重写的<ph id="ph1">&lt;xref:System.AppDomainManager.HostSecurityManager%2A&gt;</ph>自定义应用程序域管理器的属性。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainManager.HostSecurityManager">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="P:System.AppDomainManager.InitializationFlags">
          <source>Gets the initialization flags for custom application domain managers.</source>
          <target state="translated">获取自定义应用程序域管理器的初始化标志。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainManager.InitializationFlags">
          <source>A bitwise combination of the enumeration values that describe the initialization action to perform.</source>
          <target state="translated">枚举值的按位组合，这些枚举值描述要执行的初始化操作。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.AppDomainManager.InitializationFlags">
          <source>The default is <ph id="ph1">&lt;see cref="F:System.AppDomainManagerInitializationOptions.None" /&gt;</ph>.</source>
          <target state="translated">默认值为 <ph id="ph1">&lt;see cref="F:System.AppDomainManagerInitializationOptions.None" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)">
          <source>An object that contains application domain initialization information.</source>
          <target state="translated">包含应用程序域初始化信息的对象。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)">
          <source>Initializes the new application domain.</source>
          <target state="translated">初始化新应用程序域。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)">
          <source>Do not use this method to initialize an application domain in ASP.NET.</source>
          <target state="translated">不要使用此方法以初始化 ASP.NET 中的应用程序域。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)">
          <source>In ASP.NET, configuration must be handled by the host.</source>
          <target state="translated">在 ASP.NET 中，配置必须由主机进行处理。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)">
          <source>If you use this method to initialize the application domain, the host throws <ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph> when it attempts to initialize the application domain.</source>
          <target state="translated">如果使用此方法以初始化应用程序域，主机将引发<ph id="ph1">&lt;xref:System.InvalidOperationException&gt;</ph>在尝试初始化应用程序域。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)">
          <source>The exception message indicates that initialization has already occurred.</source>
          <target state="translated">该异常消息指示已发生该初始化。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)">
          <source>This method is called immediately after the constructor.</source>
          <target state="translated">在构造函数后立即调用此方法。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)">
          <source>The default <ph id="ph1">&lt;xref:System.AppDomainManager.InitializeNewDomain%2A&gt;</ph> implementation does nothing.</source>
          <target state="translated">默认值<ph id="ph1">&lt;xref:System.AppDomainManager.InitializeNewDomain%2A&gt;</ph>实现不执行任何操作。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)">
          <source>A custom implementation can set up internal classes and delegates, set up an interface with the unmanaged host interface, or set up event handlers for the new <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>.</source>
          <target state="translated">自定义实现可以设置内部的类和委托，设置的接口的托管的宿主接口，或者为新设置事件处理程序<ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)">
          <source>Also, for add-in activations, a custom implementation could identify the current <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> as the target application domain.</source>
          <target state="translated">此外，为外接程序激活的自定义实现无法识别当前<ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>作为目标应用程序域。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)">
          <source>Beginning with the <ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, you can use this method to sandbox the default application domain at application startup, or to modify the sandbox of a new application domain.</source>
          <target state="translated">开头<ph id="ph1">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>，你可以使用此方法将默认应用程序域沙盒，在应用程序启动时，或修改新的应用程序域沙盒。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)">
          <source>To do this, adjust the <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrust.DefaultGrantSet%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Security.Policy.ApplicationTrust.FullTrustAssemblies%2A&gt;</ph> properties on the <ph id="ph3">&lt;xref:System.Security.Policy.ApplicationTrust&gt;</ph> object that is assigned to the <ph id="ph4">&lt;xref:System.AppDomainSetup.ApplicationTrust%2A?displayProperty=nameWithType&gt;</ph> property of <ph id="ph5">`appDomainInfo`</ph>, before you initialize the application domain.</source>
          <target state="translated">若要执行此操作，调整<ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrust.DefaultGrantSet%2A&gt;</ph>和<ph id="ph2">&lt;xref:System.Security.Policy.ApplicationTrust.FullTrustAssemblies%2A&gt;</ph>属性<ph id="ph3">&lt;xref:System.Security.Policy.ApplicationTrust&gt;</ph>对象分配给<ph id="ph4">&lt;xref:System.AppDomainSetup.ApplicationTrust%2A?displayProperty=nameWithType&gt;</ph>属性<ph id="ph5">`appDomainInfo`</ph>，再初始化应用程序域。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)">
          <source>Only assemblies granted <ph id="ph1">`FullTrust`</ph>, such as assemblies in the global assembly cache or identified as <ph id="ph2">`fullTrustAssemblies`</ph> in the <ph id="ph3">&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType&gt;</ph> method can be loaded in the  <ph id="ph4">&lt;xref:System.AppDomainManager.%23ctor%2A&gt;</ph> constructor and the <ph id="ph5">&lt;xref:System.AppDomainManager.InitializeNewDomain%2A&gt;</ph> method.</source>
          <target state="translated">程序集，授予<ph id="ph1">`FullTrust`</ph>，如在全局程序集缓存中的程序集还是已标识为<ph id="ph2">`fullTrustAssemblies`</ph>中<ph id="ph3">&lt;xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType&gt;</ph>方法可以加载在<ph id="ph4">&lt;xref:System.AppDomainManager.%23ctor%2A&gt;</ph>构造函数和<ph id="ph5">&lt;xref:System.AppDomainManager.InitializeNewDomain%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)">
          <source>The following example shows an override of the <ph id="ph1">&lt;xref:System.AppDomainManager.InitializeNewDomain%2A&gt;</ph> method for a custom application domain manager.</source>
          <target state="translated">下面的示例演示如何重写的<ph id="ph1">&lt;xref:System.AppDomainManager.InitializeNewDomain%2A&gt;</ph>自定义应用程序域管理器的方法。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph> class.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph>类。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>