<Type Name="Console" FullName="System.Console">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b006f3d9b207ce1cfdf984f93be8c753b8e073cc" />
    <Meta Name="ms.sourcegitcommit" Value="058bfa0b75b777d3171411d35da8f11617fc06b0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="05/04/2018" />
    <Meta Name="ms.locfileid" Value="33659638" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Console" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed Console extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Console" />
  <TypeSignature Language="VB.NET" Value="Public Class Console" />
  <TypeSignature Language="C++ CLI" Value="public ref class Console abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Console</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示控制台应用程序的标准输入流、输出流和错误流。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在控制台中，其中用户交互与操作系统或与基于文本的控制台应用程序通过计算机键盘输入文本，并从计算机终端读取文本输出操作系统窗口。 例如，在 Windows 操作系统，控制台称为命令提示符窗口，并接受 MS-DOS 命令。 <xref:System.Console>类提供基本支持的应用程序读取字符，并向控制台写入字符。  
  
 有关开发与信息<xref:System.Console>类，请参阅以下各节：  
  
-   [控制台 I/O 流](#Streams)  
  
-   [屏幕缓冲区和控制台窗口](#Buffer)  
  
-   [控制台的 Unicode 支持](#Unicode)  
  
-   [常见操作](#Operations)  
  
-   [.NET 核心说明](#Core)  
  
<a name="Streams"></a>   
## <a name="console-io-streams"></a>控制台 I/O 流  
 一个控制台应用程序启动时，操作系统自动将相关联三个 I/O 流与控制台： 标准输入流、 标准输出流和标准错误输出流。 你的应用程序可以从标准输入流; 读取用户输入正常的数据写入标准输出流;并将错误数据写入到标准错误输出流。 向应用程序的值作为呈现这些流<xref:System.Console.In%2A?displayProperty=nameWithType>， <xref:System.Console.Out%2A?displayProperty=nameWithType>，和<xref:System.Console.Error%2A?displayProperty=nameWithType>属性。  
  
 默认情况下，值<xref:System.Console.In%2A>属性是<xref:System.IO.TextReader?displayProperty=nameWithType>表示键盘和的值的对象<xref:System.Console.Out%2A>和<xref:System.Console.Error%2A>属性<xref:System.IO.TextWriter?displayProperty=nameWithType>表示控制台窗口的对象。 但是，可以设置这些属性为流，以便不表示控制台窗口或键盘;例如，你可以将这些属性设置为表示文件的流。 若要将标准输入、 标准输出或标准错误流重定向，调用<xref:System.Console.SetIn%2A?displayProperty=nameWithType>， <xref:System.Console.SetOut%2A?displayProperty=nameWithType>，或<xref:System.Console.SetError%2A?displayProperty=nameWithType>方法，分别。 使用这些流的 I/O 操作保持同步，这意味着多个线程可以读取或写入流。 这意味着，方法是通常异步的如<xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=nameWithType>，如果该对象表示控制台流以同步方式执行。  
  
> [!NOTE]
>  不要使用<xref:System.Console>类等服务器应用程序的无人参与应用程序中显示输出。 如调用方法<xref:System.Console.Write%2A?displayProperty=nameWithType>和<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>GUI 应用程序中产生任何影响。  
  
 <xref:System.Console> 如果流重定向，例如，到文件，则基础流定向到控制台时正常工作的类成员可能会引发异常。 在应用程序中捕获<xref:System.IO.IOException?displayProperty=nameWithType>异常如果重定向标准流。 你还可以使用<xref:System.Console.IsOutputRedirected%2A>， <xref:System.Console.IsInputRedirected%2A>，和<xref:System.Console.IsErrorRedirected%2A>属性来确定是否标准流重定向之前正在执行的操作引发<xref:System.IO.IOException?displayProperty=nameWithType>异常。  
  
 有时很有用，以显式调用所表示的流对象的成员<xref:System.Console.In%2A>， <xref:System.Console.Out%2A>，和<xref:System.Console.Error%2A>属性。 例如，默认情况下，<xref:System.Console.ReadLine%2A?displayProperty=nameWithType>方法从标准输入流读取输入。 同样，<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>方法将数据写入标准输出流和数据后跟的默认值的行终止字符串，这是一个回车和换行符 ("\r\n")。 但是，<xref:System.Console>类不提供相应的方法将数据写入到标准错误输出流或要更改写入到该流的数据的行终止字符串的属性。  
  
 你可以通过设置来解决此问题<xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType>属性<xref:System.Console.Out%2A>或<xref:System.Console.Error%2A>到另一个行终止字符串的属性。 例如，下面的 C# 语句将标准错误输出流的行终止字符串设置为两个回车符和换行符序列：  
  
 `Console.Error.NewLine = "\r\n\r\n";`  
  
 然后，可以显式调用<xref:System.IO.TextWriter.WriteLine%2A>方法的错误输出的流对象，如下面的 C# 语句所示：  
  
 `Console.Error.WriteLine();`  
  
<a name="Buffer"></a>   
## <a name="screen-buffer-and-console-window"></a>屏幕缓冲区和控制台窗口  
 在控制台的两个密切相关的功能是屏幕缓冲区和控制台窗口。 文本实际读取或写入到流归控制台中，但似乎无法读取或写入到拥有调用屏幕缓冲区的控制台的区域。 屏幕缓冲区是在控制台的属性，组织为行和列的每个网格交集或字符单元格中，其中包含一个字符的一个矩形网格。 每个字符具有其自己的前景颜色，并且每个字符单元格中具有其自己的背景色。  
  
 通过调用控制台窗口的矩形区域查看屏幕缓冲区。 控制台窗口是在控制台中; 另一个特性它不是本身，它是操作系统窗口的控制台。 控制台窗口按行和列排列，小于或等于屏幕缓冲区的大小，可以对其进行移动，以查看不同区域的基础的屏幕缓冲区。 如果屏幕缓冲区大于控制台窗口，则控制台都将自动显示滚动条，以便可以通过屏幕缓冲区重新定位控制台窗口。  
  
 光标指示的屏幕缓冲区的位置其中文本当前读取或写入。 可以隐藏光标，或将其变得可见，并且可以更改窗体的高度。 如果光标是否可见，因此光标在视图中始终是控制台窗口的位置将自动移动。  
  
 屏幕缓冲区中的字符单元格坐标的源是左上的角，和光标和控制台窗口的位置进行计量相对于该原点。 使用从零开始的索引来指定位置;即指定为 0，行和列 0 作为最左边的列的最顶部的行。 行和列索引的最大值是<xref:System.Int16.MaxValue?displayProperty=nameWithType>。  
  
<a name="Unicode"></a>   
## <a name="unicode-support-for-the-console"></a>控制台的 Unicode 支持  
 一般情况下，控制台读取输入，并通过使用默认情况下定义的系统区域设置的当前控制台代码页写入输出。 代码页可以处理可用的 Unicode 字符的一个子集，因此如果你尝试显示字符未映射的特定代码页，控制台将无法显示所有字符或准确地表示它们。 以下示例阐释了此问题。 它尝试向控制台显示到 U + 044F 从 U + 0410年西里尔字母的字符。 如果使用控制台代码页 437 的系统上运行示例，每个字符都替换为问号 （？），因为西里尔语字符不映射到代码页 437 中的字符。  
  
 [!code-csharp[System.Console.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/unicode1.cs#1)]
 [!code-vb[System.Console.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/unicode1.vb#1)]  
  
 除了支持代码页，<xref:System.Console>类支持 utf-8 编码与<xref:System.Text.UTF8Encoding>类。 从.NET Framework 4.5，开始<xref:System.Console>类还支持使用编码的 utf-16<xref:System.Text.UnicodeEncoding>类。 若要向控制台显示 Unicode 字符。 你设置<xref:System.Console.OutputEncoding%2A>属性为<xref:System.Text.UTF8Encoding>或<xref:System.Text.UnicodeEncoding>。  
  
 Unicode 字符的支持需要编码器来识别特定的 Unicode 字符，并且还需要具有需要呈现该字符的标志符号的字体。 若要成功向控制台显示 Unicode 字符，必须为非光栅或 TrueType 字体，例如 Consolas 或 Lucida Console 设置控制台字体。 下面的示例演示如何以编程方式更改字体从光栅字体到 Lucida Console。  
  
 [!code-csharp[System.Console.Class.Unsafe#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class.unsafe/cs/setfont1.cs#3)]
 [!code-vb[System.Console.Class.Unsafe#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class.unsafe/vb/setfont1.vb#3)]  
  
 但是，TrueType 字体可以显示标志符号的一个子集。 例如，Lucida Console 字体显示仅 643 的从 U + 0021 到 U + FB02 大约 64,000 可用字符。 若要查看其字符特定字体支持，请打开**字体**小程序中 Control Panel 中，选择**查找字符**选项，然后选择希望在中检查其字符集的字体**字体**列表**字符映射表**窗口。  
  
 Windows 使用字体链接显示在特定字体中不可用的标志符号。 有关链接以显示其他字符集的字体的信息，请参阅[全球化分步： 字体](http://go.microsoft.com/fwlink/?LinkId=229111)。 在注册表的 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\FontLink\SystemLink 子项中定义链接的字体。 此子项与关联的每个条目对应于基字体的名称，其值为一个字符串数组定义的字体文件，并链接到基字体的字体。 该数组的每个成员定义链接的字体，并采用形式*字体文件名*，*字体名称*。 下面的示例演示如何以编程方式定义名为 SimSun 名为显示简化汉字字符的 simsun.ttc 的字体文件中找到的链接的字体。  
  
 [!code-csharp[System.Console.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/fontlink1.cs#2)]
 [!code-vb[System.Console.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/fontlink1.vb#2)]  
  
 Unicode 支持控制台具有以下限制：  
  
-   不支持 utf-32 编码。 唯一受支持的 Unicode 编码为 utf-8 和 utf-16，由表示<xref:System.Text.UTF8Encoding>和<xref:System.Text.UnicodeEncoding>类，分别。  
  
-   不支持双向输出。  
  
-   显示基本多语言平面外的字符 (即代理项对的) 不支持，即使它们链接的字体文件中定义。  
  
-   不支持显示复杂脚本中的字符。  
  
-   组合字符序列 （即，基字符和一个或多个组合字符组成的字符） 将显示为不同的字符。 若要解决此限制，你可以通过调用显示的字符串规范化<xref:System.String.Normalize%2A?displayProperty=nameWithType>方法，然后才能将输出发送到控制台。 在下面的示例中，一个字符串，包含组合字符序列 U + 0061 U + 0308年显示到控制台，为两个字符之前进行了规范化输出字符串，并作为单个字符后<xref:System.String.Normalize%2A?displayProperty=nameWithType>调用方法。  
  
     [!code-csharp[System.Console.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/normalize1.cs#5)]
     [!code-vb[System.Console.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/normalize1.vb#5)]  
  
     请注意规范化是可行的解决方案，仅当标准字符包含对应于特定 combining 一个预先撰写窗体的 Unicode 字符序列。  
  
-   如果一种字体为专用区域中的代码点提供的标志符号，则将显示该标志符号。 但是，由于专用区域中的字符是特定于应用程序，这可能不是预期的标志符号。  
  
 下面的示例向控制台显示一系列的 Unicode 字符。 此示例接受三个命令行参数： 要显示，请显示，以及是否使用当前控制台编码范围的末尾的范围开始 (`false`) 或 utf-16 编码 (`true`)。 它假定控制台正在使用 TrueType 字体。  
  
 [!code-csharp[System.Console.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.class/cs/example3.cs#4)]
 [!code-vb[System.Console.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.class/vb/example3.vb#4)]  
  
<a name="Operations"></a>   
## <a name="common-operations"></a>常见操作  
 <xref:System.Console>类包含用于读取控制台输入和写入控制台输出的以下方法：  
  
-   重载<xref:System.Console.ReadKey%2A>方法读取单个字符。  
  
-   <xref:System.Console.ReadLine%2A>方法读取输入一整行。  
  
-   <xref:System.Console.Write%2A>方法重载转换为格式化或非格式化字符串，值类型、 字符，数组或一组对象的实例，然后将该字符串写入控制台。  
  
-   并行整套<xref:System.Console.WriteLine%2A>方法重载相同形式的字符串的输出<xref:System.Console.Write%2A>重载，但是也添加一个行终止字符串。  
  
 <xref:System.Console>类还包含方法和属性，以执行以下操作：  
  
-   获取或设置屏幕缓冲区的大小。 <xref:System.Console.BufferHeight%2A>和<xref:System.Console.BufferWidth%2A>属性使你可以获取或设置缓冲区的高度和宽度，分别与<xref:System.Console.SetBufferSize%2A>方法使你可以在单个方法调用中设置缓冲区大小。  
  
-   获取或设置控制台窗口的大小。 <xref:System.Console.WindowHeight%2A>和<xref:System.Console.WindowWidth%2A>属性使你可以获取或设置窗口的高度和宽度，分别与<xref:System.Console.SetWindowSize%2A>方法使你可以在单个方法调用中设置窗口大小。  
  
-   获取或设置光标的大小。 <xref:System.Console.CursorSize%2A>属性指定在字符单元格中的光标的高度。  
  
-   获取或设置控制台窗口相对于屏幕缓冲区的位置。 <xref:System.Console.WindowTop%2A>和<xref:System.Console.WindowLeft%2A>属性使你可以获取或设置的最上面一行和显示在控制台窗口中，屏幕缓冲区的最左侧列和<xref:System.Console.SetWindowPosition%2A>方法使你可以在单个方法调用中设置这些值。  
  
-   获取或设置光标的位置通过获取或设置<xref:System.Console.CursorTop%2A>和<xref:System.Console.CursorLeft%2A>属性或一组通过调用光标的位置<xref:System.Console.SetCursorPosition%2A>方法。  
  
-   移动或通过调用清除屏幕缓冲区中的数据<xref:System.Console.MoveBufferArea%2A>或<xref:System.Console.Clear%2A>方法。  
  
-   获取或设置前景色和背景颜色，通过使用<xref:System.Console.ForegroundColor%2A>和<xref:System.Console.BackgroundColor%2A>属性，或重置前景色和背景为其默认颜色通过调用<xref:System.Console.ResetColor%2A>方法。  
  
-   通过调用播放的声音通过控制台扬声器播放提示音<xref:System.Console.Beep%2A>方法。  
  
<a name="Core"></a>   
## <a name="includenetcoreincludesnet-core-mdmd-notes"></a>[!INCLUDE[net_core](~/includes/net-core-md.md)] 说明  
 在桌面上，.NET Framework 中<xref:System.Console>类使用返回的编码`GetConsoleCP`和`GetConsoleOutputCP`，这通常代码页编码。 有关示例代码，其区域性为英语 （美国），代码页 437 的系统上是默认情况下使用的编码。 但是，[!INCLUDE[net_core](~/includes/net-core-md.md)]可能提供仅这些编码的有限的子集。 这种情况，<xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType>用作控制台的默认编码。  
  
 如果你的应用程序依赖于特定的代码页编码，就可以仍可以通过执行以下*之前*调用任何<xref:System.Console>方法：  
  
1.  将 System.Text.Encoding.CodePages.dll 程序集的引用添加到你的项目。  
  
2.  检索<xref:System.Text.EncodingProvider>对象<xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType>属性。  
  
3.  传递<xref:System.Text.EncodingProvider>对象传递给<xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType>方法使编码的可用提供程序支持的其他编码。  
  
 <xref:System.Console>类将自动使用默认系统编码而不 UTF8，前提是你在调用任何之前注册编码提供<xref:System.Console>输出方法。  
  
   
  
## Examples  
 下面的示例演示如何读取数据，并将数据写入到的标准输入和输出流。 请注意这些流，可以通过使用重定向<xref:System.Console.SetIn%2A>和<xref:System.Console.SetOut%2A>方法。  
  
 [!code-cpp[Classic Console Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Console Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Console Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Console Example/CS/source.cs#1)]
 [!code-vb[Classic Console Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Console Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>此类型是线程安全的。</threadsafe>
  </Docs>
  <Members>
    <Member MemberName="BackgroundColor">
      <MemberSignature Language="C#" Value="public static ConsoleColor BackgroundColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.ConsoleColor BackgroundColor" />
      <MemberSignature Language="DocId" Value="P:System.Console.BackgroundColor" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property BackgroundColor As ConsoleColor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property ConsoleColor BackgroundColor { ConsoleColor get(); void set(ConsoleColor value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ConsoleColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置控制台的背景色。</summary>
        <value>一个值，指定控制台的背景色；也就是显示在每个字符后面的颜色。 默认为黑色。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 更改<xref:System.Console.BackgroundColor%2A>属性会影响更改背景色后写入单个字符单元格的仅限 output。 若要更改作为一个整体控制台窗口的背景色，设置<xref:System.Console.BackgroundColor%2A>属性并调用<xref:System.Console.Clear%2A>方法。 下面的示例进行了这方面的演示。  
  
 [!code-csharp[System.Console.BackgroundColor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.backgroundcolor/cs/backgroundcolor1.cs#1)]
 [!code-vb[System.Console.BackgroundColor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.backgroundcolor/vb/backgroundcolor1.vb#1)]  
  
 对于基于 Windows 的应用程序，在其中一个控制台不存在，get 操作返回<xref:System.ConsoleColor.Black?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下面的示例将保存的值<xref:System.ConsoleColor>枚举到一个数组，并将存储的当前值<xref:System.Console.BackgroundColor%2A>和<xref:System.Console.ForegroundColor%2A>到变量的属性。 然后前景色更改为在每个颜色<xref:System.ConsoleColor>枚举只不过为颜色匹配当前的背景中，并且它的背景色更改为在每个颜色<xref:System.ConsoleColor>与匹配的颜色除枚举当前前景色。 （如果相同的背景色的前景色，文本不是可见。）最后，它调用<xref:System.Console.ResetColor%2A>方法还原原始的控制台颜色。  
  
 [!code-csharp[System.ConsoleColor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.consolecolor/cs/foregroundcolor3.cs#1)]
 [!code-vb[System.ConsoleColor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.consolecolor/vb/foregroundcolor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">设置操作中指定的颜色不是 <see cref="T:System.ConsoleColor" /> 的有效成员。</exception>
        <exception cref="T:System.Security.SecurityException">用户没有执行此操作的权限。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Beep">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>通过控制台扬声器播放提示音。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Beep">
      <MemberSignature Language="C#" Value="public static void Beep ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Beep() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Beep" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Beep ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Beep();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>通过控制台扬声器播放提示音。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，播放提示音为 800 赫兹频率的 200 毫秒的持续时间。  
  
> [!NOTE]
>  <xref:System.Console.Beep%2A>方法不支持在 64 位版本的 Windows Vista 和 Windows XP 上。  
  
 <xref:System.Console.Beep%2A> 包装对 Windows 的调用[鸣叫函数](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx)。 是否<xref:System.Console.Beep%2A>在 Windows 7 取决于是否存在的 8254 可编程间隔计时器芯片前生成的 Windows 版本上声音。 从 Windows 7 开始，它依赖于默认声音设备。  
  
   
  
## Examples  
 下面的示例演示<xref:System.Console.Beep%2A>方法。 该示例接受一个介于 1 到 9 作为命令行自变量，并播放提示音的次数。  
  
 [!code-cpp[console.beep#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.beep/CPP/beep.cpp#1)]
 [!code-csharp[console.beep#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.beep/CS/beep.cs#1)]
 [!code-vb[console.beep#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.beep/VB/beep.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.HostProtectionException">在不允许访问用户界面的服务器（例如 SQL Server）上执行此方法。</exception>
      </Docs>
    </Member>
    <Member MemberName="Beep">
      <MemberSignature Language="C#" Value="public static void Beep (int frequency, int duration);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Beep(int32 frequency, int32 duration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Beep(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Beep (frequency As Integer, duration As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Beep(int frequency, int duration);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frequency" Type="System.Int32" />
        <Parameter Name="duration" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="frequency">提示音的频率，介于 37 到 32767 赫兹之间。</param>
        <param name="duration">提示音的持续时间，以毫秒为单位。</param>
        <summary>通过控制台扬声器播放具有指定频率和持续时间的提示音。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Console.Beep%2A> 包装对 Windows 的调用[鸣叫函数](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx)。 是否<xref:System.Console.Beep%2A>在 Windows 7 取决于是否存在的 8254 可编程间隔计时器芯片前生成的 Windows 版本上声音。 从 Windows 7 开始，它依赖于默认声音设备。  
  
> [!NOTE]
>  <xref:System.Console.Beep%2A>方法不支持在 64 位版本的 Windows Vista 和 Windows XP 上。  
  
   
  
## Examples  
 此示例演示<xref:System.Console.Beep%2A>，通过播放通过控制台扬声器一首歌曲的第一个几个说明的方法。  
  
 [!code-cpp[console.beep2#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.beep2/CPP/b2.cpp#1)]
 [!code-csharp[console.beep2#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.beep2/CS/b2.cs#1)]
 [!code-vb[console.beep2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.beep2/VB/b2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="frequency" /> 小于 37 或大于 32767 赫兹。  
  
 或  
  
 <paramref name="duration" /> 小于或等于零。</exception>
        <exception cref="T:System.Security.HostProtectionException">在不允许访问控制台的服务器（例如 SQL Server）上执行此方法。</exception>
      </Docs>
    </Member>
    <Member MemberName="BufferHeight">
      <MemberSignature Language="C#" Value="public static int BufferHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 BufferHeight" />
      <MemberSignature Language="DocId" Value="P:System.Console.BufferHeight" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property BufferHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int BufferHeight { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置缓冲区的高度。</summary>
        <value>缓冲区的当前高度，以行为单位。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性定义行 （或行），它存储在控制台模式窗口访问的缓冲区的数。 与此相反，<xref:System.Console.WindowHeight%2A>属性定义的实际显示在控制台窗口在任何特定时间的行数。 如果实际写入缓冲区的行数超过所定义的行数<xref:System.Console.WindowHeight%2A>属性，以便它可显示的连续相等的行数可垂直滚动窗口<xref:System.Console.WindowHeight%2A>属性，也位于任何位置中缓冲区。  
  
 如果集运算中的值减少<xref:System.Console.BufferHeight%2A>属性，将删除最顶部的行。 例如，如果行数都会从 300 减少到 250、 行 0 到 49 被移除，而现有行 50 到 299 成为行 0 是通过 249。  
  
   
  
## Examples  
 此示例演示<xref:System.Console.BufferHeight%2A>和<xref:System.Console.BufferWidth%2A>属性。 该示例将报告操作系统窗口中设置为 300 行和 85 列的缓冲区大小的尺寸。  
  
 [!code-cpp[console.bufferHW#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.bufferHW/CPP/hw.cpp#1)]
 [!code-csharp[console.bufferHW#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.bufferHW/CS/hw.cs#1)]
 [!code-vb[console.bufferHW#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.bufferHW/VB/hw.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Set 操作中的值小于或等于零。  
  
 或  
  
 集运算中的值大于或等于 <see cref="F:System.Int16.MaxValue" />。  
  
 或  
  
 Set 操作中的值小于 <see cref="P:System.Console.WindowTop" /> + <see cref="P:System.Console.WindowHeight" />。</exception>
        <exception cref="T:System.Security.SecurityException">用户没有执行此操作的权限。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="BufferWidth">
      <MemberSignature Language="C#" Value="public static int BufferWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 BufferWidth" />
      <MemberSignature Language="DocId" Value="P:System.Console.BufferWidth" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property BufferWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int BufferWidth { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置缓冲区的宽度。</summary>
        <value>缓冲区的当前宽度，以列为单位。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果集运算中的值减少<xref:System.Console.BufferWidth%2A>属性，将删除最右边的列。 例如，如果从 80 情况下，列数减少到 60，会删除 60 79 个每个行和列。  
  
   
  
## Examples  
 此示例演示<xref:System.Console.BufferHeight%2A>和<xref:System.Console.BufferWidth%2A>属性。 该示例将报告操作系统窗口中设置为 300 行和 85 列的缓冲区大小的尺寸。  
  
 [!code-cpp[console.bufferHW#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.bufferHW/CPP/hw.cpp#1)]
 [!code-csharp[console.bufferHW#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.bufferHW/CS/hw.cs#1)]
 [!code-vb[console.bufferHW#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.bufferHW/VB/hw.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Set 操作中的值小于或等于零。  
  
 或  
  
 集运算中的值大于或等于 <see cref="F:System.Int16.MaxValue" />。  
  
 或  
  
 Set 操作中的值小于 <see cref="P:System.Console.WindowLeft" /> + <see cref="P:System.Console.WindowWidth" />。</exception>
        <exception cref="T:System.Security.SecurityException">用户没有执行此操作的权限。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CancelKeyPress">
      <MemberSignature Language="C#" Value="public static event ConsoleCancelEventHandler CancelKeyPress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ConsoleCancelEventHandler CancelKeyPress" />
      <MemberSignature Language="DocId" Value="E:System.Console.CancelKeyPress" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event CancelKeyPress As ConsoleCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event ConsoleCancelEventHandler ^ CancelKeyPress;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ConsoleCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="F:System.ConsoleModifiers.Control" /> 修改键 (Ctrl) 和 <see cref="F:System.ConsoleKey.C" /> console 键 (C) 或 Break 键同时按住（Ctrl+C 或 Ctrl+Break）时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 结合使用此事件<xref:System.ConsoleCancelEventHandler?displayProperty=nameWithType>和<xref:System.ConsoleCancelEventArgs?displayProperty=nameWithType>。 <xref:System.Console.CancelKeyPress>事件可以截获 Ctrl + C 信号，以便事件处理程序可以决定是继续执行，还是终止将控制台应用程序。 有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 当用户按下 Ctrl + C 或 Ctrl + Break，<xref:System.Console.CancelKeyPress>激发事件和应用程序的<xref:System.ConsoleCancelEventHandler>执行事件处理程序。 事件处理程序传递<xref:System.ConsoleCancelEventArgs>具有两个有用的属性的对象：  
  
-   <xref:System.ConsoleCancelEventArgs.SpecialKey%2A>它可以确定是否由于用户按 Ctrl + C 调用处理程序 (该属性值将<xref:System.ConsoleSpecialKey.ControlC?displayProperty=nameWithType>) 或 Ctrl + Break (该属性值将<xref:System.ConsoleSpecialKey.ControlBreak?displayProperty=nameWithType>)。  
  
-   <xref:System.ConsoleCancelEventArgs.Cancel%2A>它可以确定如何向应用程序应响应用户按 Ctrl + C 或 Ctrl + Break。 默认情况下，<xref:System.ConsoleCancelEventArgs.Cancel%2A>属性是`false`，其原因程序终止事件处理程序退出时的执行。 更改其属性`true`指定应用程序应继续执行。  
  
> [!TIP]
>  如果你的应用程序具有简单的要求，则可以使用<xref:System.Console.TreatControlCAsInput%2A>而不是此事件的属性。 通过将此属性设置为`false`，你可以确保应用程序始终退出如果用户按下 Ctrl + C。 通过将它设置为`true`，你可以确保，按 Ctrl + C 将不会终止应用程序。  
  
 此事件的事件处理程序是在线程池线程上执行的。  
  
   
  
## Examples  
 下面的示例演示如何<xref:System.Console.CancelKeyPress>使用事件。 当您按 Ctrl + C 时，中断读取的操作和`myHandler`调用事件处理程序。 到事件处理程序，在输入时<xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=nameWithType>属性是`false`，这意味着，当事件处理程序终止时，将终止当前进程。 但是，事件处理程序设置<xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=nameWithType>属性`true`，这意味着将不会终止进程，并且会继续读取的操作。  
  
 [!code-cpp[console.cancelkeypress#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cancelkeypress/cpp/ckp.cpp#1)]
 [!code-csharp[console.cancelkeypress#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cancelkeypress/cs/ckp.cs#1)]
 [!code-vb[console.cancelkeypress#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cancelkeypress/vb/ckp.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="T:System.ConsoleCancelEventArgs" />
        <altmember cref="T:System.ConsoleCancelEventHandler" />
        <altmember cref="P:System.Console.TreatControlCAsInput" />
      </Docs>
    </Member>
    <Member MemberName="CapsLock">
      <MemberSignature Language="C#" Value="public static bool CapsLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CapsLock" />
      <MemberSignature Language="DocId" Value="P:System.Console.CapsLock" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CapsLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CapsLock { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 Caps Lock 键盘切换键是打开的还是关闭的。</summary>
        <value>
          如果 Caps Lock 是打开的，则为 <see langword="true" />；如果 Caps Lock 是关闭的，则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public static void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>清除控制台缓冲区和相应的控制台窗口的显示信息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Console.Clear%2A>方法相当调用 MS-DOS`cls`命令在命令提示符窗口。 当<xref:System.Console.Clear%2A>调用方法、 光标自动滚动到窗口的左上角和屏幕缓冲区的内容设置为使用当前前景色背景色的空白。  
  
> [!NOTE]
>  尝试调用<xref:System.Console.Clear%2A>方法在一个控制台应用程序的输出定向到一个文件时将引发<xref:System.IO.IOException>。 若要防止此情况，始终将包装对的调用<xref:System.Console.Clear%2A>中的方法`try`...`catch` 块。  
  
   
  
## Examples  
 下面的示例使用<xref:System.Console.Clear%2A>方法清除控制台，然后它会执行一个循环，将提示用户选择前景色和背景颜色，并输入要显示的字符串。 如果用户选择不退出程序，将还原控制台的原始的前景色和背景色和<xref:System.Console.Clear%2A>重新执行循环之前调用方法。  
  
 [!code-csharp[System.Console.Clear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.clear/cs/clear1.cs#1)]
 [!code-vb[System.Console.Clear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.clear/vb/clear1.vb#1)]  
  
 示例依赖于`GetKeyPress`用于验证用户的选择前景色和背景颜色的方法。  
  
 此示例演示<xref:System.Console.CursorLeft%2A>和<xref:System.Console.CursorTop%2A>属性，与<xref:System.Console.SetCursorPosition%2A>和<xref:System.Console.Clear%2A>方法。 该示例定位光标，确定将在其中的下一步的写入发生，由结合使用的 5 字符矩形中绘制 5 字符"+"，"&#124;"，和"-"字符串。 请注意，无法使用其他字符串结合使用的步骤较少绘制矩形。  
  
 [!code-cpp[console.cursorLTS#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorLTS/CPP/lts.cpp#1)]
 [!code-csharp[console.cursorLTS#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorLTS/CS/lts.cs#1)]
 [!code-vb[console.cursorLTS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorLTS/VB/lts.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="CursorLeft">
      <MemberSignature Language="C#" Value="public static int CursorLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CursorLeft" />
      <MemberSignature Language="DocId" Value="P:System.Console.CursorLeft" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CursorLeft As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CursorLeft { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置光标在缓冲区中的列位置。</summary>
        <value>光标的当前位置，以列为单位。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 此示例演示<xref:System.Console.CursorLeft%2A>和<xref:System.Console.CursorTop%2A>属性，与<xref:System.Console.SetCursorPosition%2A>和<xref:System.Console.Clear%2A>方法。 该示例定位光标，确定将在其中的下一步的写入发生，由结合使用的 5 字符矩形中绘制 5 字符"+"，"&#124;"，和"-"字符串。 请注意，无法使用其他字符串结合使用的步骤较少绘制矩形。  
  
 [!code-cpp[console.cursorLTS#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorLTS/CPP/lts.cpp#1)]
 [!code-csharp[console.cursorLTS#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorLTS/CS/lts.cs#1)]
 [!code-vb[console.cursorLTS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorLTS/VB/lts.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">集运算中的值小于零。  
  
 或  
  
 集运算中的值大于或等于 <see cref="P:System.Console.BufferWidth" />。</exception>
        <exception cref="T:System.Security.SecurityException">用户没有执行此操作的权限。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CursorSize">
      <MemberSignature Language="C#" Value="public static int CursorSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CursorSize" />
      <MemberSignature Language="DocId" Value="P:System.Console.CursorSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CursorSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CursorSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置光标在字符单元格中的高度。</summary>
        <value>光标的大小，以字符单元格高度的百分比表示。 属性值的范围为 1 到 100。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 光标外观将发生变化，从底部的单元格一条水平线，当属性值为 1，到完全填充单元格，当属性值为 100。  
  
   
  
## Examples  
 此示例演示<xref:System.Console.CursorSize%2A>属性。 该示例会增大的光标每次任何控制台键按下时，然后在终止之前将光标还原到其原始大小的大小。  
  
 [!code-cpp[console.cursorsize#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorsize/CPP/csize.cpp#1)]
 [!code-csharp[console.cursorsize#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorsize/CS/csize.cs#1)]
 [!code-vb[console.cursorsize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorsize/VB/csize.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">集运算中指定的值小于 1 或大于 100.</exception>
        <exception cref="T:System.Security.SecurityException">用户没有执行此操作的权限。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CursorTop">
      <MemberSignature Language="C#" Value="public static int CursorTop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CursorTop" />
      <MemberSignature Language="DocId" Value="P:System.Console.CursorTop" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CursorTop As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int CursorTop { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置光标在缓冲区中的行位置。</summary>
        <value>光标的当前位置，以行为单位。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 此示例演示<xref:System.Console.CursorLeft%2A>和<xref:System.Console.CursorTop%2A>属性，与<xref:System.Console.SetCursorPosition%2A>和<xref:System.Console.Clear%2A>方法。 该示例定位光标，确定将在其中的下一步的写入发生，由结合使用的 5 字符矩形中绘制 5 字符"+"，"&#124;"，和"-"字符串。 请注意，无法使用其他字符串结合使用的步骤较少绘制矩形。  
  
 [!code-cpp[console.cursorLTS#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorLTS/CPP/lts.cpp#1)]
 [!code-csharp[console.cursorLTS#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorLTS/CS/lts.cs#1)]
 [!code-vb[console.cursorLTS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorLTS/VB/lts.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">集运算中的值小于零。  
  
 或  
  
 集运算中的值大于或等于 <see cref="P:System.Console.BufferHeight" />。</exception>
        <exception cref="T:System.Security.SecurityException">用户没有执行此操作的权限。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CursorVisible">
      <MemberSignature Language="C#" Value="public static bool CursorVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CursorVisible" />
      <MemberSignature Language="DocId" Value="P:System.Console.CursorVisible" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CursorVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CursorVisible { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，用以指示光标是否可见。</summary>
        <value>
          如果光标可见，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 此示例演示<xref:System.Console.CursorVisible%2A>属性。 示例使光标，如果输入的第一列是 + 字符可见或不可见，如果输入-字符。  
  
 [!code-cpp[console.cursorvis#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorvis/CPP/vis.cpp#1)]
 [!code-csharp[console.cursorvis#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorvis/CS/vis.cs#1)]
 [!code-vb[console.cursorvis#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorvis/VB/vis.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">用户没有执行此操作的权限。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public static System.IO.TextWriter Error { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IO.TextWriter Error" />
      <MemberSignature Language="DocId" Value="P:System.Console.Error" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Error As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::IO::TextWriter ^ Error { System::IO::TextWriter ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取标准错误输出流。</summary>
        <value>表示标准错误输出流的 <see cref="T:System.IO.TextWriter" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，此标准错误流设置到控制台。 它可以设置到另一个流<xref:System.Console.SetError%2A>方法。 标准错误流重定向后，它可以重新获取通过调用<xref:System.Console.OpenStandardError%2A>方法。  
  
 标准错误流中的信息性输出通常定向到一个文件的控制台应用程序，可通过<xref:System.Console.Error%2A>属性可以用于向控制台显示的信息，即使重定向输出。 下面的示例从 1 开始的一次显示 10 个数字的产品表。 在 10 个数字，每个集之后<xref:System.Console.Error%2A>使用属性来要求用户是否显示下一组。 如果标准输出定向到一个文件，则仍例程是否应生成的下一步的一套产品要求用户。  
  
 [!code-csharp[System.Console.Error#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.error/cs/error1.cs#1)]
 [!code-vb[System.Console.Error#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.error/vb/error1.vb#1)]  
  
   
  
## Examples  
 下面的示例是名为将在文本文件中的制表符替换为四个空格，通过定义的值的 ExpandTabs 的命令行实用工具`tabSize`变量。 它将重定向的标准输入和输出到文件，流式处理，但使用<xref:System.Console.Error%2A>属性以将标准错误流写入到控制台。 通过提供包含制表符的文件的名称和输出文件的名称，可以从命令行启动它。  
  
 [!code-cpp[Console-EXPANDTABSEX#1](~/samples/snippets/cpp/VS_Snippets_CLR/Console-EXPANDTABSEX/CPP/expandtabsex.cpp#1)]
 [!code-csharp[Console-EXPANDTABSEX#1](~/samples/snippets/csharp/VS_Snippets_CLR/Console-EXPANDTABSEX/CS/expandtabsex.cs#1)]
 [!code-vb[Console-EXPANDTABSEX#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Console-EXPANDTABSEX/VB/expandtabsex.vb#1)]  
  
 下面的示例是向控制台显示的一个或多个文本文件的内容的简单文本文件查看器。 如果没有任何命令行参数，或者如果不存在作为命令行自变量传递的任何文件，该示例将调用<xref:System.Console.SetError%2A>方法来将错误信息重定向到文件中，调用<xref:System.Console.OpenStandardError%2A>过程中重新获取标准错误的方法流，并指示错误的信息已写入到文件。  
  
 [!code-csharp[System.Console.OpenStandardError#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.openstandarderror/cs/viewtextfile.cs#1)]
 [!code-vb[System.Console.OpenStandardError#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.openstandarderror/vb/viewtextfile.vb#1)]  
  
 请注意，<xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=nameWithType>属性设置为`true`之前重新获取错误流。 这可确保，输出将立即发送到控制台而不是缓冲。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.In" />
        <altmember cref="P:System.Console.Out" />
        <altmember cref="P:System.Console.IsErrorRedirected" />
        <altmember cref="M:System.Console.SetError(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="ForegroundColor">
      <MemberSignature Language="C#" Value="public static ConsoleColor ForegroundColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.ConsoleColor ForegroundColor" />
      <MemberSignature Language="DocId" Value="P:System.Console.ForegroundColor" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ForegroundColor As ConsoleColor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property ConsoleColor ForegroundColor { ConsoleColor get(); void set(ConsoleColor value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ConsoleColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置控制台的前景色。</summary>
        <value>一个 <see cref="T:System.ConsoleColor" />，指定控制台的前景色；也就是显示的每个字符的颜色。 默认为灰色。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于基于 Windows 的应用程序，在其中一个控制台不存在，get 操作返回<xref:System.ConsoleColor.Gray>。  
  
   
  
## Examples  
 下面的示例检查是否控制台的背景色为黑色，是否是，它的背景色更改为红色，为黑色的前景色。  
  
 [!code-csharp[System.ConsoleColor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.consolecolor/cs/Example2.cs#2)] 
 [!code-vb[System.ConsoleColor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.consolecolor/vb/Example2.vb#2)]  
  
 下面的示例将保存的值<xref:System.ConsoleColor>枚举到一个数组，并将存储的当前值<xref:System.Console.BackgroundColor%2A>和<xref:System.Console.ForegroundColor%2A>到变量的属性。 然后前景色更改为在每个颜色<xref:System.ConsoleColor>枚举只不过为颜色匹配当前的背景中，并且它的背景色更改为在每个颜色<xref:System.ConsoleColor>与匹配的颜色除枚举当前前景色。 （如果相同的背景色的前景色，文本不是可见。）最后，它调用<xref:System.Console.ResetColor%2A>方法还原原始的控制台颜色。  
  
 [!code-csharp[System.ConsoleColor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.consolecolor/cs/foregroundcolor3.cs#1)]
 [!code-vb[System.ConsoleColor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.consolecolor/vb/foregroundcolor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">设置操作中指定的颜色不是 <see cref="T:System.ConsoleColor" /> 的有效成员。</exception>
        <exception cref="T:System.Security.SecurityException">用户没有执行此操作的权限。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="In">
      <MemberSignature Language="C#" Value="public static System.IO.TextReader In { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IO.TextReader In" />
      <MemberSignature Language="DocId" Value="P:System.Console.In" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property In As TextReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::IO::TextReader ^ In { System::IO::TextReader ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextReader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取标准输入流。</summary>
        <value>表示标准输入流的 <see cref="T:System.IO.TextReader" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，此属性设置为标准输入流。 此属性可以设置为另一个流<xref:System.Console.SetIn%2A>方法。  
  
 读取操作的标准输入流上同步执行。 也就是说，它们受阻，直到指定的读取的操作完成。 这甚至适用如果异步方法，如<xref:System.IO.TextReader.ReadLineAsync%2A>，调用<xref:System.IO.TextReader>返回对象<xref:System.Console.In%2A>属性。  
  
   
  
## Examples  
 下面的示例演示如何使用`In`属性。  
  
 [!code-cpp[consolein#1](~/samples/snippets/cpp/VS_Snippets_CLR/consolein/CPP/consolein.cpp#1)]
 [!code-csharp[consolein#1](~/samples/snippets/csharp/VS_Snippets_CLR/consolein/CS/consolein.cs#1)]
 [!code-vb[consolein#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/consolein/VB/consolein.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Console.OpenStandardInput" />
        <altmember cref="P:System.Console.IsInputRedirected" />
        <altmember cref="P:System.Console.Error" />
        <altmember cref="P:System.Console.Out" />
        <altmember cref="M:System.Console.SetIn(System.IO.TextReader)" />
      </Docs>
    </Member>
    <Member MemberName="InputEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding InputEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding InputEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Console.InputEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property InputEncoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ InputEncoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置控制台用于读取输入的编码。</summary>
        <value>用于读取控制台输入的编码。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 控制台使用要将键盘输入转换为相应的字符编码的输入。 输入编码用到了映射到单独字符的 256 键盘字符代码的代码页。 不同的代码页包含不同的特殊字符，通常会对一种语言或一组语言进行自定义。  
  
 从开始[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，属性 get 操作可以返回而不是控制台的当前输入编码的缓存的值。 发生这种情况的值<xref:System.Console.InputEncoding%2A>以外的分配给其他一些方式修改属性<xref:System.Console.InputEncoding%2A>属性，例如在调用 Windows`SetConsoleCP`函数或使用`chcp`命令从 PowerShell 脚本。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">集运算中的属性值为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.IOException">执行此操作期间出错。</exception>
        <exception cref="T:System.Security.SecurityException">你的应用程序没有执行此操作的权限。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">用于读取和写入顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName="IsErrorRedirected">
      <MemberSignature Language="C#" Value="public static bool IsErrorRedirected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsErrorRedirected" />
      <MemberSignature Language="DocId" Value="P:System.Console.IsErrorRedirected" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsErrorRedirected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsErrorRedirected { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取指示错误输出流是否已经从标准错误流被再定位的值。</summary>
        <value>
          如果重定向错误，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Console.Error" />
        <altmember cref="M:System.Console.SetError(System.IO.TextWriter)" />
        <altmember cref="M:System.Console.OpenStandardError" />
      </Docs>
    </Member>
    <Member MemberName="IsInputRedirected">
      <MemberSignature Language="C#" Value="public static bool IsInputRedirected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsInputRedirected" />
      <MemberSignature Language="DocId" Value="P:System.Console.IsInputRedirected" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsInputRedirected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsInputRedirected { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取指示输入是否已从标准输入流中重定向的值。</summary>
        <value>
          如果重定向输入，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Console.In" />
        <altmember cref="M:System.Console.SetIn(System.IO.TextReader)" />
        <altmember cref="M:System.Console.OpenStandardInput" />
      </Docs>
    </Member>
    <Member MemberName="IsOutputRedirected">
      <MemberSignature Language="C#" Value="public static bool IsOutputRedirected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsOutputRedirected" />
      <MemberSignature Language="DocId" Value="P:System.Console.IsOutputRedirected" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsOutputRedirected As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsOutputRedirected { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取指示输出是否已从标准输入流中重定向的值。</summary>
        <value>
          如果重定向输出，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Console.Out" />
        <altmember cref="M:System.Console.SetOut(System.IO.TextWriter)" />
        <altmember cref="M:System.Console.OpenStandardError" />
      </Docs>
    </Member>
    <Member MemberName="KeyAvailable">
      <MemberSignature Language="C#" Value="public static bool KeyAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool KeyAvailable" />
      <MemberSignature Language="DocId" Value="P:System.Console.KeyAvailable" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property KeyAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool KeyAvailable { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示按键操作在输入流中是否可用。</summary>
        <value>
          如果按键操作可用，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 立即; 返回的属性值也就是说，<xref:System.Console.KeyAvailable%2A>属性不会阻止输入，直到按键操作可用。  
  
 使用<xref:System.Console.KeyAvailable%2A>属性结合使用并且仅带有<xref:System.Console.ReadKey%2A>方法，不<xref:System.Console.Read%2A>或<xref:System.Console.ReadLine%2A>方法。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Console.KeyAvailable%2A>要创建运行直到按下某个键的循环属性。  
  
 [!code-cpp[console.keyavailable#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.keyavailable/CPP/ka.cpp#1)]
 [!code-csharp[console.keyavailable#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.keyavailable/CS/ka.cs#1)]
 [!code-vb[console.keyavailable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.keyavailable/VB/ka.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <exception cref="T:System.InvalidOperationException">标准输入重定向到文件而不是键盘。</exception>
      </Docs>
    </Member>
    <Member MemberName="LargestWindowHeight">
      <MemberSignature Language="C#" Value="public static int LargestWindowHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 LargestWindowHeight" />
      <MemberSignature Language="DocId" Value="P:System.Console.LargestWindowHeight" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LargestWindowHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int LargestWindowHeight { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>根据当前字体和屏幕分辨率获取控制台窗口可能具有的最大行数。</summary>
        <value>控制台窗口可能具有的最大高度，以行为单位。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LargestWindowWidth">
      <MemberSignature Language="C#" Value="public static int LargestWindowWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 LargestWindowWidth" />
      <MemberSignature Language="DocId" Value="P:System.Console.LargestWindowWidth" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LargestWindowWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int LargestWindowWidth { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>根据当前字体和屏幕分辨率获取控制台窗口可能具有的最大列数。</summary>
        <value>控制台窗口可能具有的最大宽度，以列为单位。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveBufferArea">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将屏幕缓冲区的指定源区域复制到指定的目标区域。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveBufferArea">
      <MemberSignature Language="C#" Value="public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MoveBufferArea(int32 sourceLeft, int32 sourceTop, int32 sourceWidth, int32 sourceHeight, int32 targetLeft, int32 targetTop) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MoveBufferArea (sourceLeft As Integer, sourceTop As Integer, sourceWidth As Integer, sourceHeight As Integer, targetLeft As Integer, targetTop As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceLeft" Type="System.Int32" />
        <Parameter Name="sourceTop" Type="System.Int32" />
        <Parameter Name="sourceWidth" Type="System.Int32" />
        <Parameter Name="sourceHeight" Type="System.Int32" />
        <Parameter Name="targetLeft" Type="System.Int32" />
        <Parameter Name="targetTop" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sourceLeft">源区域最左边的列。</param>
        <param name="sourceTop">源区域最顶部的行。</param>
        <param name="sourceWidth">源区域中列的数目。</param>
        <param name="sourceHeight">源区域中行的数目。</param>
        <param name="targetLeft">目标区域最左边的列。</param>
        <param name="targetTop">目标区域最顶部的行。</param>
        <summary>将屏幕缓冲区的指定源区域复制到指定的目标区域。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果目标和源参数指定位于当前屏幕缓冲区的边界之外的位置，则复制仅适合目标区域的源区域的部分。 也就是说，源区域进行剪裁以适应当前屏幕缓冲区的大小。  
  
 <xref:System.Console.MoveBufferArea%2A>方法将源区域复制到的目标区域。 如果目标区域不相交的源区域，用空格使用当前的前景色和背景色填充源区域。 否则，将不填充源区域相交的部分。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">一个或多个参数小于零。  
  
 或  
  
 <paramref name="sourceLeft" /> 或 <paramref name="targetLeft" /> 大于或等于 <see cref="P:System.Console.BufferWidth" />。  
  
 或  
  
 <paramref name="sourceTop" /> 或 <paramref name="targetTop" /> 大于或等于 <see cref="P:System.Console.BufferHeight" />。  
  
 或  
  
 <paramref name="sourceTop" /> + <paramref name="sourceHeight" /> 大于或等于 <see cref="P:System.Console.BufferHeight" />。  
  
 或  
  
 <paramref name="sourceLeft" /> + <paramref name="sourceWidth" /> 大于或等于 <see cref="P:System.Console.BufferWidth" />。</exception>
        <exception cref="T:System.Security.SecurityException">用户没有执行此操作的权限。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="MoveBufferArea">
      <MemberSignature Language="C#" Value="public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void MoveBufferArea(int32 sourceLeft, int32 sourceTop, int32 sourceWidth, int32 sourceHeight, int32 targetLeft, int32 targetTop, char sourceChar, valuetype System.ConsoleColor sourceForeColor, valuetype System.ConsoleColor sourceBackColor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub MoveBufferArea (sourceLeft As Integer, sourceTop As Integer, sourceWidth As Integer, sourceHeight As Integer, targetLeft As Integer, targetTop As Integer, sourceChar As Char, sourceForeColor As ConsoleColor, sourceBackColor As ConsoleColor)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceLeft" Type="System.Int32" />
        <Parameter Name="sourceTop" Type="System.Int32" />
        <Parameter Name="sourceWidth" Type="System.Int32" />
        <Parameter Name="sourceHeight" Type="System.Int32" />
        <Parameter Name="targetLeft" Type="System.Int32" />
        <Parameter Name="targetTop" Type="System.Int32" />
        <Parameter Name="sourceChar" Type="System.Char" />
        <Parameter Name="sourceForeColor" Type="System.ConsoleColor" />
        <Parameter Name="sourceBackColor" Type="System.ConsoleColor" />
      </Parameters>
      <Docs>
        <param name="sourceLeft">源区域最左边的列。</param>
        <param name="sourceTop">源区域最顶部的行。</param>
        <param name="sourceWidth">源区域中列的数目。</param>
        <param name="sourceHeight">源区域中行的数目。</param>
        <param name="targetLeft">目标区域最左边的列。</param>
        <param name="targetTop">目标区域最顶部的行。</param>
        <param name="sourceChar">用于填充源区域的字符。</param>
        <param name="sourceForeColor">用于填充源区域的前景色。</param>
        <param name="sourceBackColor">用于填充源区域的背景色。</param>
        <summary>将屏幕缓冲区的指定源区域复制到指定的目标区域。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果目标和源参数指定的位置位于超出当前屏幕缓冲区的边界，则复制仅适合目标区域的源区域的部分。 也就是说，源区域进行剪裁以适应当前屏幕缓冲区的大小。  
  
 <xref:System.Console.MoveBufferArea%2A>方法将源区域复制到的目标区域。 如果目标区域不相交的源区域，使用指定的字符填充源区域`sourceChar`，使用指定的颜色`sourceForeColor`和`sourceBackColor`。 否则，将不填充源区域相交的部分。  
  
 <xref:System.Console.MoveBufferArea%2A>方法执行任何操作，如果`sourceWidth`或`sourceHeight`为零。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">一个或多个参数小于零。  
  
 或  
  
 <paramref name="sourceLeft" /> 或 <paramref name="targetLeft" /> 大于或等于 <see cref="P:System.Console.BufferWidth" />。  
  
 或  
  
 <paramref name="sourceTop" /> 或 <paramref name="targetTop" /> 大于或等于 <see cref="P:System.Console.BufferHeight" />。  
  
 或  
  
 <paramref name="sourceTop" /> + <paramref name="sourceHeight" /> 大于或等于 <see cref="P:System.Console.BufferHeight" />。  
  
 或  
  
 <paramref name="sourceLeft" /> + <paramref name="sourceWidth" /> 大于或等于 <see cref="P:System.Console.BufferWidth" />。</exception>
        <exception cref="T:System.ArgumentException">一个或两个颜色参数不是 <see cref="T:System.ConsoleColor" /> 枚举的成员。</exception>
        <exception cref="T:System.Security.SecurityException">用户没有执行此操作的权限。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="NumberLock">
      <MemberSignature Language="C#" Value="public static bool NumberLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool NumberLock" />
      <MemberSignature Language="DocId" Value="P:System.Console.NumberLock" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property NumberLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool NumberLock { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 Num Lock 键盘切换键是打开的还是关闭的。</summary>
        <value>
          如果 Num Lock 是打开的，则为 <see langword="true" />；如果 Num Lock 是关闭的，则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenStandardError">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取标准错误流。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenStandardError">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardError ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardError() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardError" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardError () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardError();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取标准错误流。</summary>
        <returns>标准错误流。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法可以用于已由更改后重新获取标准错误流<xref:System.Console.SetError%2A>方法。  
  
   
  
## Examples  
 下面的示例是向控制台显示的一个或多个文本文件的内容的简单文本文件查看器。 如果没有任何命令行参数，或者如果不存在作为命令行自变量传递的任何文件，该示例将调用<xref:System.Console.SetError%2A>方法来将错误信息重定向到文件中，调用<xref:System.Console.OpenStandardError%2A>过程中重新获取标准错误的方法流，并指示错误的信息已写入到文件。  
  
 [!code-csharp[System.Console.OpenStandardError#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.openstandarderror/cs/viewtextfile.cs#1)]
 [!code-vb[System.Console.OpenStandardError#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.openstandarderror/vb/viewtextfile.vb#1)]  
  
 请注意，<xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=nameWithType>属性设置为`true`之前重新获取错误流。 这可确保，输出将立即发送到控制台而不是缓冲。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.Error" />
        <altmember cref="P:System.Console.IsErrorRedirected" />
        <altmember cref="M:System.Console.SetError(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="OpenStandardError">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardError (int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardError(int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardError(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardError (bufferSize As Integer) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardError(int bufferSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bufferSize">内部流缓冲区大小。</param>
        <summary>获取设置为指定缓冲区大小的标准错误流。</summary>
        <returns>标准错误流。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法可以用于已由更改后重新获取标准错误流<xref:System.Console.SetError%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="bufferSize" /> 小于或等于零。</exception>
        <altmember cref="P:System.Console.Error" />
        <altmember cref="P:System.Console.IsErrorRedirected" />
        <altmember cref="M:System.Console.SetError(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenStandardInput">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取标准输入流。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenStandardInput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardInput ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardInput() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardInput" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardInput () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardInput();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取标准输入流。</summary>
        <returns>标准输入流。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法可以用于已由更改后重新获取标准输入的流<xref:System.Console.SetIn%2A>方法。  
  
   
  
## Examples  
 下面的示例演示如何使用`OpenStandardInput`属性。  
  
 [!code-cpp[System.Console.OpenStandartInput#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.OpenStandartInput/CPP/decode.cpp#1)]
 [!code-csharp[System.Console.OpenStandartInput#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.OpenStandartInput/CS/decode.cs#1)]
 [!code-vb[System.Console.OpenStandartInput#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.OpenStandartInput/VB/decode.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.In" />
        <altmember cref="P:System.Console.IsInputRedirected" />
        <altmember cref="M:System.Console.SetIn(System.IO.TextReader)" />
      </Docs>
    </Member>
    <Member MemberName="OpenStandardInput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardInput (int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardInput(int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardInput (bufferSize As Integer) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardInput(int bufferSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bufferSize">内部流缓冲区大小。</param>
        <summary>获取设置为指定缓冲区大小的标准输入流。</summary>
        <returns>标准输入流。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法可以用于已由更改后重新获取标准输出流<xref:System.Console.SetIn%2A>方法。  
  
   
  
## Examples  
 下面的示例演示如何使用`OpenStandardInput`属性。  
  
 [!code-cpp[System.Console.OpenStandartInput#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.OpenStandartInput/CPP/decode.cpp#1)]
 [!code-csharp[System.Console.OpenStandartInput#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.OpenStandartInput/CS/decode.cs#1)]
 [!code-vb[System.Console.OpenStandartInput#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.OpenStandartInput/VB/decode.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="bufferSize" /> 小于或等于零。</exception>
        <altmember cref="P:System.Console.In" />
        <altmember cref="P:System.Console.IsInputRedirected" />
        <altmember cref="M:System.Console.SetIn(System.IO.TextReader)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenStandardOutput">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取标准输出流。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenStandardOutput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardOutput ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardOutput() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardOutput" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardOutput () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardOutput();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取标准输出流。</summary>
        <returns>标准输出流。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法可以用于已由更改后重新获取标准输出流<xref:System.Console.SetOut%2A>方法。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.Console.OpenStandardOutput%2A> 方法的用法。 它用制表符替换字符串中的四个连续空格字符。 若要运行它，您必须提供两个命令行自变量。 第一个是要将标准输入流重定向到的现有文本文件的名称。 第二个是要将标准输出流重定向到的文件的名称。 此文件不需要存在。 如果它这么做，其内容将被覆盖。  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.Out" />
        <altmember cref="P:System.Console.IsOutputRedirected" />
        <altmember cref="M:System.Console.SetOut(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="OpenStandardOutput">
      <MemberSignature Language="C#" Value="public static System.IO.Stream OpenStandardOutput (int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream OpenStandardOutput(int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.OpenStandardOutput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OpenStandardOutput (bufferSize As Integer) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IO::Stream ^ OpenStandardOutput(int bufferSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bufferSize">内部流缓冲区大小。</param>
        <summary>获取设置为指定缓冲区大小的标准输出流。</summary>
        <returns>标准输出流。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法可以用于已由更改后重新获取标准输出流<xref:System.Console.SetOut%2A>方法。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.Console.OpenStandardOutput%2A> 方法的用法。 它用制表符替换字符串中的四个连续空格字符。 若要运行它，您必须提供两个命令行自变量。 第一个是要将标准输入流重定向到的现有文本文件的名称。 第二个是要将标准输出流重定向到的文件的名称。 此文件不需要存在。 如果它这么做，其内容将被覆盖。  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="bufferSize" /> 小于或等于零。</exception>
        <altmember cref="P:System.Console.Out" />
        <altmember cref="P:System.Console.IsOutputRedirected" />
        <altmember cref="M:System.Console.SetOut(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="Out">
      <MemberSignature Language="C#" Value="public static System.IO.TextWriter Out { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IO.TextWriter Out" />
      <MemberSignature Language="DocId" Value="P:System.Console.Out" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Out As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::IO::TextWriter ^ Out { System::IO::TextWriter ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取标准输出流。</summary>
        <value>表示标准输出流的 <see cref="T:System.IO.TextWriter" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，此属性设置为标准输出流。 此属性可以设置为另一个流<xref:System.Console.SetOut%2A>方法。  
  
 请注意，调用`Console.Out.WriteLine`方法是等效于调用相应<xref:System.Console.WriteLine%2A>方法。  
  
   
  
## Examples  
 下面的示例使用<xref:System.Console.Out%2A>属性显示包含到标准输出设备的应用程序的当前目录中的文件的名称的数组。 然后将标准输出设置为一个名为 Files.txt 文件，并列出了对文件的数组元素。 最后，它将输出设置写入标准输出流，也不会显示数组元素到标准输出设备。  
  
 [!code-csharp[System.Console.Out#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.out/cs/out1.cs#1)]
 [!code-vb[System.Console.Out#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.out/vb/out1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Console.Error" />
        <altmember cref="P:System.Console.In" />
        <altmember cref="M:System.Console.SetOut(System.IO.TextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="OutputEncoding">
      <MemberSignature Language="C#" Value="public static System.Text.Encoding OutputEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Encoding OutputEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Console.OutputEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property OutputEncoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Encoding ^ OutputEncoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置控制台用于写入输出的编码。</summary>
        <value>用于写入控制台输出的编码。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 控制台使用的输出编码将转换控制台显示的相应字符的应用程序写入的字符转换。 该控制台使用的默认代码页由系统区域设置确定。  
  
 从开始[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，属性 get 操作可以返回而不是控制台的当前输出编码的缓存的值。 发生这种情况的值<xref:System.Console.OutputEncoding%2A>以外的分配给其他一些方式修改属性<xref:System.Console.OutputEncoding%2A>属性，例如在调用 Windows`SetConsoleOutputCP`函数。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">集运算中的属性值为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.IOException">执行此操作期间出错。</exception>
        <exception cref="T:System.Security.SecurityException">你的应用程序没有执行此操作的权限。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">用于读取和写入顶级窗口和子窗口。  关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage">
          <para>Unicode 编码，<see cref="T:System.Console" />类支持 utf-8 编码与<see cref="T:System.Text.UTF8Encoding" />类，然后，使用启动[!INCLUDE[net_v45](~/includes/net-v45-md.md)]，它支持使用编码的 utf-16<see cref="T:System.Text.UnicodeEncoding" />类。 使用 utf-32 编码<see cref="T:System.Text.UTF32Encoding" />不支持类。 正在尝试设置的输出编码 utf-32 引发<see cref="T:System.IO.IOException" />。  
  
 请注意，已成功向控制台显示 Unicode 字符需要以下：  
  
-   控制台必须使用 TrueType 字体，例如 Lucida Console 或 Consolas，显示字符。  
  
-   特定的标志符号或要显示的标志符号，则必须定义控制台使用的字体。 控制台可以利用链接以显示从链接字体的标志符号，如果基字体不包含该标志符号的定义的字体。  
  
 有关 Unicode 支持的详细信息编码由控制台中，请参阅"Unicode 支持的控制台"中部分<see cref="T:System.Console" />类。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public static int Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Read" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Read();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从标准输入流读取下一个字符。</summary>
        <returns>输入流中的下一个字符；如果当前没有更多的字符可供读取，则为负一 (-1)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Console.Read%2A>方法阻止其返回值时键入输入的字符; 它终止时按<xref:System.ConsoleKey.Enter>密钥。 按 Enter 将依赖于平台的行终止序列追加到你的输入 （例如，Windows 追加回车换行符序列）。 后续调用<xref:System.Console.Read%2A>方法一次检索你输入的一个字符。 检索最后一个字符后，<xref:System.Console.Read%2A>阻止其返回再次并重复上述循环。  
  
> [!IMPORTANT]
>  <xref:System.Console.ReadLine%2A>方法，或<xref:System.Console.KeyAvailable%2A>属性和<xref:System.Console.ReadKey%2A>方法要优于使用<xref:System.Console.Read%2A>方法。  
  
 请注意该方法不会不返回-1，除非你执行以下操作之一：  
  
-   同时按<xref:System.ConsoleModifiers.Control>修改键和<xref:System.ConsoleKey.Z>控制台键 (Ctrl + Z)，指示文件尾条件。  
  
-   按等效键，用于通知的文件尾条件，例如在 Windows 中的 F6 函数密钥。  
  
-   将输入的流重定向到的源，如的文本文件，包含实际的文件尾字符。  
  
   
  
## Examples  
 下面的示例演示<xref:System.Console.Read%2A>方法。  
  
 [!code-cpp[console.read#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.read/CPP/read.cpp#1)]
 [!code-csharp[console.read#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.read/CS/read.cs#1)]
 [!code-vb[console.read#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.read/VB/read.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadKey">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取用户按下的下一个字符或功能键。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadKey">
      <MemberSignature Language="C#" Value="public static ConsoleKeyInfo ReadKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ConsoleKeyInfo ReadKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.ReadKey" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadKey () As ConsoleKeyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ConsoleKeyInfo ReadKey();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ConsoleKeyInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取用户按下的下一个字符或功能键。 按下的键显示在控制台窗口中。</summary>
        <returns>一个对象，描述 <see cref="T:System.ConsoleKey" /> 常数和对应于按下的控制台键的 Unicode 字符（如果存在这样的字符）。 <see cref="T:System.ConsoleKeyInfo" /> 对象还在 <see cref="T:System.ConsoleModifiers" /> 值的按位组合中描述是否在按下控制台键的同时按下了一个或多个 Shift、Alt 和 Ctrl 修改键。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Console.ReadKey%2A>方法，即等待线程颁发上的块<xref:System.Console.ReadKey%2A>方法，直到按下字符或功能键。 字符或功能键可以为同一个或多个 Alt、 Ctrl 或 shift 键修改键一起按下组合。 但是，修改键按下不会导致<xref:System.Console.ReadKey%2A>方法以返回。  
  
 具体取决于你的应用程序，你可能想要使用<xref:System.Console.ReadKey%2A>方法结合<xref:System.Console.KeyAvailable%2A>属性。  
  
 <xref:System.Console.ReadKey%2A>即使标准输入重定向到的文件，方法将读取从键盘<xref:System.Console.SetIn%2A>方法。  
  
   
  
## Examples  
 最常见的一个用途的<xref:System.Console.ReadKey>方法是停止程序执行，直到用户按下某个键和应用程序终止或显示其他窗口的信息。 下面的示例使用<xref:System.Console.ReadKey>方法以等待用户按下 Enter 键，然后终止应用程序。  
  
 [!code-csharp[System.Console.ReadKey#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Console.ReadKey/cs/ReadKey1.cs#1)]
 [!code-vb[System.Console.ReadKey#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Console.ReadKey/vb/ReadKey1.vb#1)]  
  
 请注意，此重载<xref:System.Console.ReadKey%2A>方法默认情况下的将回显到控制台用户按下任何可显示密钥。 若要取消它们，调用<xref:System.Console.ReadKey%2A>方法替换`intercept`参数`true`。  
  
 下面的示例使用<xref:System.Console.ReadKey>方法以显示有关哪个密钥用户按下的信息...  
  
 [!code-cpp[console.readkey1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.readkey1/CPP/rk.cpp#1)]
 [!code-csharp[console.readkey1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.readkey1/CS/rk.cs#1)]
 [!code-vb[console.readkey1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.readkey1/VB/rk.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">从控制台以外的某个流重定向 <see cref="P:System.Console.In" /> 属性。</exception>
        <altmember cref="T:System.ConsoleKey" />
        <altmember cref="P:System.Console.KeyAvailable" />
        <altmember cref="P:System.Console.TreatControlCAsInput" />
        <altmember cref="E:System.Console.CancelKeyPress" />
      </Docs>
    </Member>
    <Member MemberName="ReadKey">
      <MemberSignature Language="C#" Value="public static ConsoleKeyInfo ReadKey (bool intercept);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ConsoleKeyInfo ReadKey(bool intercept) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.ReadKey(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadKey (intercept As Boolean) As ConsoleKeyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static ConsoleKeyInfo ReadKey(bool intercept);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ConsoleKeyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intercept" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="intercept">确定是否在控制台窗口中显示按下的键。 如果为 <see langword="true" />，则不显示按下的键；否则为 <see langword="false" />。</param>
        <summary>获取用户按下的下一个字符或功能键。 按下的键可以选择显示在控制台窗口中。</summary>
        <returns>一个对象，描述 <see cref="T:System.ConsoleKey" /> 常数和对应于按下的控制台键的 Unicode 字符（如果存在这样的字符）。 <see cref="T:System.ConsoleKeyInfo" /> 对象还在 <see cref="T:System.ConsoleModifiers" /> 值的按位组合中描述是否在按下控制台键的同时按下了一个或多个 Shift、Alt 和 Ctrl 修改键。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Console.ReadKey%2A>方法，即等待线程颁发上的块<xref:System.Console.ReadKey%2A>方法，直到按下字符或功能键。 字符或功能键可以为同一个或多个 Alt、 Ctrl 或 shift 键修改键一起按下组合。 但是，修改键按下不会导致<xref:System.Console.ReadKey%2A>方法以返回。  
  
 如果`intercept`参数是`true`，截获按下的键，并且不显示在控制台窗口中; 否则为将显示按下的键。  
  
 具体取决于你的应用程序，你可能想要使用<xref:System.Console.ReadKey%2A>方法结合<xref:System.Console.KeyAvailable%2A>属性。  
  
 <xref:System.Console.ReadKey%2A>即使标准输入重定向到的文件，方法将读取从键盘<xref:System.Console.SetIn%2A>方法。  
  
   
  
## Examples  
 最常见的一个用途的<xref:System.Console.ReadKey%2A>方法是停止程序执行，直到用户按下某个键和应用程序终止或显示其他窗口的信息。 下面的示例使用<xref:System.Console.ReadKey%28System.Boolean%29>方法以等待用户按下 Enter 键，然后终止应用程序。 请注意，是否用户按任何其他键时，它不回显到控制台。  
  
 [!code-csharp[System.Console.ReadKey#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Console.ReadKey/cs/ReadKey2.cs#2)]
 [!code-vb[System.Console.ReadKey#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Console.ReadKey/vb/ReadKey2.vb#2)]  
  
 下面的示例使用<xref:System.Console.ReadKey%28System.Boolean%29>方法以显示有关按下用户，而无需回显到控制台该注册表项的键的信息。  
  
 [!code-cpp[console.readkey2#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.readkey2/CPP/rkbool.cpp#1)]
 [!code-csharp[console.readkey2#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.readkey2/CS/rkbool.cs#1)]
 [!code-vb[console.readkey2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.readkey2/VB/rkbool.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">从控制台以外的某个流重定向 <see cref="P:System.Console.In" /> 属性。</exception>
        <altmember cref="T:System.ConsoleKey" />
        <altmember cref="P:System.Console.KeyAvailable" />
        <altmember cref="P:System.Console.TreatControlCAsInput" />
        <altmember cref="E:System.Console.CancelKeyPress" />
      </Docs>
    </Member>
    <Member MemberName="ReadLine">
      <MemberSignature Language="C#" Value="public static string ReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.ReadLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadLine () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ReadLine();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从标准输入流读取下一行字符。</summary>
        <returns>输入流中的下一行字符；如果没有更多的可用行，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Console.ReadLine%2A>方法从标准输入流中读取一行。 （有关行的定义，请参阅段落后下面的列表。）这表示：  
  
-   标准输入的设备是否键盘，<xref:System.Console.ReadLine%2A>方法阻塞，直到用户按可实现**Enter**密钥。  
  
     最常见的一个用途的<xref:System.Console.ReadLine%2A>方法是暂停程序执行之前清除控制台并显示新信息，或者提示用户按下 Enter 键，然后终止应用程序。 下面的示例阐释了这一点。  
  
     [!code-cpp[System.Console.ReadLine#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.ReadLine/cpp/ReadLineSimple.cpp#6)]
     [!code-csharp[System.Console.ReadLine#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.ReadLine/cs/ReadLineSimple.cs#6)]
     [!code-vb[System.Console.ReadLine#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.ReadLine/vb/ReadLineSimple.vb#6)]  
  
-   标准输入重定向到一个文件，如果<xref:System.Console.ReadLine%2A>方法从文件中读取一行文本。 例如，下面是一个名为 ReadLine1.txt 文本文件：  
  
    ```  
  
    This is the first line.  
    This is the second line.  
    This is the third line.  
    This is the fourth line.  
  
    ```  
  
     下面的示例使用<xref:System.Console.ReadLine%2A>方法来读取从文件重定向的输入。 读取的操作终止时该方法返回`null`，这指示没有线仍要读取。  
  
     [!code-csharp[System.Console.ReadLine#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.ReadLine/cs/ReadLine3.cs#3)]
     [!code-vb[System.Console.ReadLine#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.ReadLine/vb/ReadLine3.vb#3)]  
  
     后编译到可执行文件的命名 ReadLine1.exe 示例，你可以运行使用从命令行语法  
  
    ```  
    ReadLine1 < ReadLine1.txt  
    ```  
  
     读取文件的内容并将它们显示到控制台。  
  
 将行定义为字符后跟回车符 (十六进制 0x000d)、 换行符 (十六进制 0x000a) 或值的序列<xref:System.Environment.NewLine%2A?displayProperty=nameWithType>属性。 返回的字符串不包含的终止字符。 默认情况下，该方法读取输入 256 个字符输入缓冲区中。 因为这包括<xref:System.Environment.NewLine%2A?displayProperty=nameWithType>字符，该方法可以读取包含超过 254 个字符的行。 若要读取较长的行，调用<xref:System.Console.OpenStandardInput%28System.Int32%29>方法。  
  
 <xref:System.Console.ReadLine%2A>方法以同步方式执行。 即，被阻止，直至读取行或按下 Ctrl + Z 键盘组合。 <xref:System.Console.In%2A>属性返回<xref:System.IO.TextReader>对象，它表示标准输入的流并具有这两个同步<xref:System.IO.TextReader.ReadLine%2A?displayProperty=nameWithType>方法和异步<xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=nameWithType>方法。 但是，当用作控制台的标准输入流，<xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=nameWithType>同步而不是以异步方式执行，并返回`Task<String>`仅完成读取的操作后。  
  
 如果此方法将引发<xref:System.OutOfMemoryException>异常，而在基础读取器的位置<xref:System.IO.Stream>对象高级的字符的方法是可以读取，但已读入内部的字符数<xref:System.Console.ReadLine%2A>缓冲区是丢弃。 由于不能更改流中读取器的位置，因此已读取的字符是不可恢复，并可以访问仅通过重新初始化<xref:System.IO.TextReader>。 如果流中的初始位置是未知或流不支持查找，基础<xref:System.IO.Stream>还需要重新初始化。 若要避免这种情况并生成可靠的代码，应使用<xref:System.Console.KeyAvailable%2A>属性和<xref:System.Console.ReadKey%2A>只读方法和应用商店中预先分配的缓冲区的字符。  
  
 如果该方法是从控制台读取输入时按 Ctrl + Z 字符，该方法返回`null`。 这使用户以防止进一步的键盘输入时<xref:System.Console.ReadLine%2A>在循环中调用方法。 下面的示例阐释了这种情况。  
  
 [!code-cpp[System.Console.ReadLine#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.ReadLine/cpp/readline2.cpp#1)]
 [!code-csharp[System.Console.ReadLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.ReadLine/cs/ReadLine2.cs#1)]
 [!code-vb[System.Console.ReadLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.ReadLine/vb/ReadLine2.vb#1)]  
  
   
  
## Examples  
 下面的示例要求两个命令行自变量： 的现有文本文件的名称和要将输出写入到的文件的名称。 打开现有的文本文件，并将该文件从键盘的标准输入重定向。 它还将从控制台到输出文件的标准输出重定向。 然后，它使用<xref:System.Console.ReadLine%2A?displayProperty=nameWithType>方法来读取在文件中，每个行，每个序列的四个空格替换制表符，并使用<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>方法来将结果写入到输出文件。  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <exception cref="T:System.OutOfMemoryException">没有足够的内存来为返回的字符串分配缓冲区。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">下一行中的字符的字符数大于 <see cref="F:System.Int32.MaxValue" />。</exception>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="ResetColor">
      <MemberSignature Language="C#" Value="public static void ResetColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ResetColor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.ResetColor" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ResetColor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ResetColor();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将控制台的前景色和背景色设置为默认值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 前景色和背景颜色将还原为当前进程开始时存在的颜色。 有关详细信息，请参阅<xref:System.Console.ForegroundColor%2A>和<xref:System.Console.BackgroundColor%2A>属性。  
  
   
  
## Examples  
 下面的示例将保存的值<xref:System.ConsoleColor>枚举到一个数组，并将存储的当前值<xref:System.Console.BackgroundColor%2A>和<xref:System.Console.ForegroundColor%2A>到变量的属性。 然后前景色更改为在每个颜色<xref:System.ConsoleColor>枚举只不过为颜色匹配当前的背景中，并且它的背景色更改为在每个颜色<xref:System.ConsoleColor>与匹配的颜色除枚举当前前景色。 （如果相同的背景色的前景色，文本不是可见。）最后，它调用<xref:System.Console.ResetColor%2A>方法还原原始的控制台颜色。  
  
 [!code-csharp[System.ConsoleColor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.consolecolor/cs/foregroundcolor3.cs#1)]
 [!code-vb[System.ConsoleColor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.consolecolor/vb/foregroundcolor3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">用户没有执行此操作的权限。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetBufferSize">
      <MemberSignature Language="C#" Value="public static void SetBufferSize (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetBufferSize(int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetBufferSize(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetBufferSize (width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetBufferSize(int width, int height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">缓冲区的宽度，以列为单位。</param>
        <param name="height">缓冲区的高度，以行为单位。</param>
        <summary>将屏幕缓冲区的高度和宽度设置为指定值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示<xref:System.Console.WindowLeft%2A>， <xref:System.Console.WindowTop%2A>， <xref:System.Console.WindowWidth%2A>， <xref:System.Console.WindowHeight%2A>， <xref:System.Console.BufferWidth%2A>， <xref:System.Console.BufferHeight%2A>，和<xref:System.Console.CursorVisible%2A>属性; 与<xref:System.Console.SetWindowPosition%2A>， <xref:System.Console.SetBufferSize%2A>，和<xref:System.Console.ReadKey%2A>方法。 该示例基于屏幕缓冲区的宽度屏幕缓冲区中绘制网格模式。 然后该示例将移动到的向上箭头，按下的向下箭头、 向左键或向右箭头控制台键的响应中的控制台窗口。 网格模式有助于你查看控制台窗口相对于屏幕缓冲区的移动。  
  
 [!code-cpp[console.windowLT#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.windowLT/CPP/wlt.cpp#1)]
 [!code-csharp[console.windowLT#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.windowLT/CS/wlt.cs#1)]
 [!code-vb[console.windowLT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.windowLT/VB/wlt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="height" /> 或 <paramref name="width" /> 小于或等于零。  
  
 或  
  
 <paramref name="height" /> 或 <paramref name="width" /> 大于或等于 <see cref="F:System.Int16.MaxValue" />。  
  
 或  
  
 <paramref name="width" /> 小于 <see cref="P:System.Console.WindowLeft" /> + <see cref="P:System.Console.WindowWidth" />。  
  
 或  
  
 <paramref name="height" /> 小于 <see cref="P:System.Console.WindowTop" /> + <see cref="P:System.Console.WindowHeight" />。</exception>
        <exception cref="T:System.Security.SecurityException">用户没有执行此操作的权限。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetCursorPosition">
      <MemberSignature Language="C#" Value="public static void SetCursorPosition (int left, int top);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCursorPosition(int32 left, int32 top) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetCursorPosition(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCursorPosition (left As Integer, top As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCursorPosition(int left, int top);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="left">光标的列位置。 将从 0 开始从左到右对列进行编号。</param>
        <param name="top">光标的行位置。 从上到下，从 0 开始为行编号。</param>
        <summary>设置光标位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Console.SetCursorPosition%2A>方法，以指定在控制台窗口中下一步的写入操作即将开始。 如果指定的光标的位置是在控制台窗口是当前可见区域之外，则窗口原点将自动更改以使光标可见。  
  
 光标自动移动到每次一个字符写入到控制台窗口的下一个字符位置。 如果光标位于控制台窗口的底部右侧的字符位置下, 一个写入操作将导致控制台窗口滚动，以使光标保持可见。 如果你想要而不会导致控制台窗口中，以向下滚动，请使用将字符写入底部右侧的字符位置<xref:System.Console.MoveBufferArea%2A>方法将一个字符移到该位置。  
  
   
  
## Examples  
 此示例演示<xref:System.Console.CursorLeft%2A>和<xref:System.Console.CursorTop%2A>属性，与<xref:System.Console.SetCursorPosition%2A>和<xref:System.Console.Clear%2A>方法。 该示例定位光标，确定将在其中的下一步的写入发生，由结合使用的 5 字符矩形中绘制 5 字符"+"，"&#124;"，和"-"字符串。 请注意，无法使用其他字符串结合使用的步骤较少绘制矩形。  
  
 [!code-cpp[console.cursorLTS#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.cursorLTS/CPP/lts.cpp#1)]
 [!code-csharp[console.cursorLTS#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.cursorLTS/CS/lts.cs#1)]
 [!code-vb[console.cursorLTS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.cursorLTS/VB/lts.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="left" /> 或 <paramref name="top" /> 小于零。  
  
 或  
  
 <paramref name="left" /> 大于或等于 <see cref="P:System.Console.BufferWidth" />。  
  
 或  
  
 <paramref name="top" /> 大于或等于 <see cref="P:System.Console.BufferHeight" />。</exception>
        <exception cref="T:System.Security.SecurityException">用户没有执行此操作的权限。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetError">
      <MemberSignature Language="C#" Value="public static void SetError (System.IO.TextWriter newError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetError(class System.IO.TextWriter newError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetError(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetError (newError As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetError(System::IO::TextWriter ^ newError);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newError" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="newError">一个流，它是新的标准错误输出。</param>
        <summary>将 <see cref="P:System.Console.Error" /> 属性设置为指定的 <see cref="T:System.IO.TextWriter" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，<xref:System.Console.Error%2A>属性设置为标准错误输出流。  
  
 A<xref:System.IO.StreamWriter>封装<xref:System.IO.FileStream>可以用于将错误消息发送到一个文件。  
  
   
  
## Examples  
 下面的示例演示如何将标准错误流重定向到一个文件。  
  
 [!code-cpp[System.Console.SetError#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.SetError/cpp/seterror1.cpp#1)]
 [!code-csharp[System.Console.SetError#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.SetError/cs/SetError1.cs#1)]
 [!code-vb[System.Console.SetError#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.SetError/vb/SetError1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="newError" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于调用非托管的代码。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="P:System.Console.IsErrorRedirected" />
        <altmember cref="P:System.Console.Error" />
      </Docs>
    </Member>
    <Member MemberName="SetIn">
      <MemberSignature Language="C#" Value="public static void SetIn (System.IO.TextReader newIn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetIn(class System.IO.TextReader newIn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetIn(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetIn (newIn As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetIn(System::IO::TextReader ^ newIn);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newIn" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="newIn">一个流，它是新的标准输入。</param>
        <summary>将 <see cref="P:System.Console.In" /> 属性设置为指定的 <see cref="T:System.IO.TextReader" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，<xref:System.Console.In%2A>属性设置为标准输入流。  
  
 A<xref:System.IO.StreamReader>封装<xref:System.IO.FileStream>可用于接收来自文件的输入。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.Console.SetIn%2A> 方法的用法。 它用制表符替换字符串中的四个连续空格字符。 若要运行它，您必须提供两个命令行自变量。 第一个是要将标准输入流重定向到的现有文本文件的名称。 第二个是要将标准输出流重定向到的文件的名称。 此文件不需要存在。 如果它这么做，其内容将被覆盖。  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="newIn" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于调用非托管的代码。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.IO.TextReader" />
        <altmember cref="P:System.Console.In" />
      </Docs>
    </Member>
    <Member MemberName="SetOut">
      <MemberSignature Language="C#" Value="public static void SetOut (System.IO.TextWriter newOut);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetOut(class System.IO.TextWriter newOut) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetOut(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetOut (newOut As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetOut(System::IO::TextWriter ^ newOut);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newOut" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="newOut">一个流，它是新的标准输出。</param>
        <summary>将 <see cref="P:System.Console.Out" /> 属性设置为指定的 <see cref="T:System.IO.TextWriter" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，<xref:System.Console.Out%2A>属性设置为标准输出流。  
  
 A<xref:System.IO.StreamWriter>封装<xref:System.IO.FileStream>可以用于将输出发送到一个文件。 例如:  
  
 [!code-cpp[System.Console.SetOut#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.console.setout/cpp/source.cpp#1)]
 [!code-csharp[System.Console.SetOut#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.setout/cs/source.cs#1)]
 [!code-vb[System.Console.SetOut#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.setout/vb/source.vb#1)]  
  
   
  
## Examples  
 下面的示例演示 <xref:System.Console.SetOut%2A> 方法的用法。 它用制表符替换字符串中的四个连续空格字符。 若要运行它，您必须提供两个命令行自变量。 第一个是要将标准输入流重定向到的现有文本文件的名称。 第二个是要将标准输出流重定向到的文件的名称。 此文件不需要存在。 如果它这么做，其内容将被覆盖。  
  
 [!code-cpp[System.Console-INSERTTABS#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CPP/inserttabs.cpp#1)]
 [!code-csharp[System.Console-INSERTTABS#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-INSERTTABS/CS/inserttabs.cs#1)]
 [!code-vb[System.Console-INSERTTABS#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-INSERTTABS/VB/inserttabs.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="newOut" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于调用非托管的代码。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="P:System.Console.Out" />
      </Docs>
    </Member>
    <Member MemberName="SetWindowPosition">
      <MemberSignature Language="C#" Value="public static void SetWindowPosition (int left, int top);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetWindowPosition(int32 left, int32 top) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetWindowPosition(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetWindowPosition (left As Integer, top As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetWindowPosition(int left, int top);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="left">控制台窗口左上角的列位置。</param>
        <param name="top">控制台窗口左上角的行位置。</param>
        <summary>设置控制台窗口相对于屏幕缓冲区的位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 操作系统窗口显示控制台窗口中，并控制台窗口会显示屏幕缓冲区的一部分。 <xref:System.Console.SetWindowPosition%2A>方法影响的位置的控制台窗口相对于屏幕缓冲区中，但不会影响相对于桌面操作系统窗口的位置。  
  
 控制台和操作系统 windows 通常不会影响每个其他。 但是，如果屏幕缓冲区无法显示在控制台窗口的当前边界，操作系统会自动将滚动条到操作系统窗口。 在这种情况下，移动操作系统窗口滚动条影响的位置的控制台窗口中，并移动控制台窗口<xref:System.Console.SetWindowPosition%2A>方法影响操作系统窗口滚动条的位置。  
  
   
  
## Examples  
 下面的示例演示<xref:System.Console.WindowLeft%2A>， <xref:System.Console.WindowTop%2A>， <xref:System.Console.WindowWidth%2A>， <xref:System.Console.WindowHeight%2A>， <xref:System.Console.BufferWidth%2A>， <xref:System.Console.BufferHeight%2A>，和<xref:System.Console.CursorVisible%2A>属性; 与<xref:System.Console.SetWindowPosition%2A>， <xref:System.Console.SetBufferSize%2A>，和<xref:System.Console.ReadKey%2A>方法。 该示例基于屏幕缓冲区的宽度屏幕缓冲区中绘制网格模式。 然后该示例将移动到的向上箭头，按下的向下箭头、 向左键或向右箭头控制台键的响应中的控制台窗口。 网格模式有助于你查看控制台窗口相对于屏幕缓冲区的移动。  
  
 [!code-cpp[console.windowLT#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.windowLT/CPP/wlt.cpp#1)]
 [!code-csharp[console.windowLT#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.windowLT/CS/wlt.cs#1)]
 [!code-vb[console.windowLT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.windowLT/VB/wlt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="left" /> 或 <paramref name="top" /> 小于零。  
  
 或  
  
 <paramref name="left" /> + <see cref="P:System.Console.WindowWidth" /> 大于 <see cref="P:System.Console.BufferWidth" />。  
  
 或  
  
 <paramref name="top" /> + <see cref="P:System.Console.WindowHeight" /> 大于 <see cref="P:System.Console.BufferHeight" />。</exception>
        <exception cref="T:System.Security.SecurityException">用户没有执行此操作的权限。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SetWindowSize">
      <MemberSignature Language="C#" Value="public static void SetWindowSize (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetWindowSize(int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.SetWindowSize(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetWindowSize (width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetWindowSize(int width, int height);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">控制台窗口的宽度，以列为单位。</param>
        <param name="height">控制台窗口的高度，以行为单位。</param>
        <summary>将控制台窗口的高度和宽度设置为指定值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 此示例演示<xref:System.Console.SetWindowSize%2A>方法，与<xref:System.Console.WindowWidth%2A>和<xref:System.Console.WindowHeight%2A>属性。 你必须运行该示例才能查看更改控制台窗口大小的完整效果。  
  
 该示例报告设置为 85 列和 43 行的控制台窗口的尺寸，然后等待要按键。 当按任意键时，控制台窗口的尺寸会减半、 报告的新维度，和示例等待另一个按键。 最后，当按任意键时，控制台窗口还原到其原始尺寸和示例终止。  
  
 [!code-cpp[console.setwindowsize#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.setwindowsize/CPP/sws.cpp#1)]
 [!code-csharp[console.setwindowsize#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.setwindowsize/CS/sws.cs#1)]
 [!code-vb[console.setwindowsize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.setwindowsize/VB/sws.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="width" /> 或 <paramref name="height" /> 小于或等于零。  
  
 或  
  
 <paramref name="width" /> 加 <see cref="P:System.Console.WindowLeft" /> 或 <paramref name="height" /> 加 <see cref="P:System.Console.WindowTop" /> 大于或等于 <see cref="F:System.Int16.MaxValue" />。  
  
 或  
  
 <paramref name="width" /> 或 <paramref name="height" /> 的值大于当前屏幕分辨率和控制台字体的最大可能的窗口宽度或高度。</exception>
        <exception cref="T:System.Security.SecurityException">用户没有执行此操作的权限。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public static string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string Title" />
      <MemberSignature Language="DocId" Value="P:System.Console.Title" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要显示在控制台标题栏中的标题。</summary>
        <value>要在控制台的标题栏中显示的字符串。 标题字符串的最大长度是 24500 个字符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 此示例演示<xref:System.Console.Title%2A>属性。 此示例显示当前操作系统窗口的标题、 等待按键，然后显示新标题。  
  
 [!code-cpp[console.title#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.title/CPP/mytitle.cpp#1)]
 [!code-csharp[console.title#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.title/CS/mytitle.cs#1)]
 [!code-vb[console.title#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.title/VB/mytitle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在获取操作中，检索到的标题长度超过 24500 个字符。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">在集运算中，指定的标题长度超过 24500 个字符。</exception>
        <exception cref="T:System.ArgumentNullException">在集运算中，指定的标题是 <see langword="null" />。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="TreatControlCAsInput">
      <MemberSignature Language="C#" Value="public static bool TreatControlCAsInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool TreatControlCAsInput" />
      <MemberSignature Language="DocId" Value="P:System.Console.TreatControlCAsInput" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property TreatControlCAsInput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool TreatControlCAsInput { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是将修改键 <see cref="F:System.ConsoleModifiers.Control" /> 和控制台键 <see cref="F:System.ConsoleKey.C" /> 的组合 (Ctrl+C) 视为普通输入，还是视为由操作系统处理的中断。</summary>
        <value>
          如果将 Ctrl+C 视为普通输入，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果值<xref:System.Console.TreatControlCAsInput%2A>属性是`false`并按下 Ctrl + C，按下的密钥不存储输入缓冲区中，并且操作系统终止当前正在执行的进程。 这是默认值。  
  
> [!CAUTION]
>  使用此属性谨慎，因为将其设置为`true`具有如此显著的影响。 大多数用户期望 Ctrl + C 终止一个控制台应用程序。 如果禁用 Ctrl + C 的效果，用户必须记得使用 Ctrl + Break 终止该应用程序，这是不太常见的键组合。  
  
   
  
## Examples  
 下面的示例演示<xref:System.Console.TreatControlCAsInput%2A>属性。  
  
 [!code-cpp[console.readkey1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.readkey1/CPP/rk.cpp#1)]
 [!code-csharp[console.readkey1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.readkey1/CS/rk.cs#1)]
 [!code-vb[console.readkey1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.readkey1/VB/rk.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">无法获取或设置控制台输入缓冲区的输入模式。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="F:System.ConsoleModifiers.Control" />
        <altmember cref="F:System.ConsoleKey.C" />
        <altmember cref="E:System.Console.CancelKeyPress" />
      </Docs>
    </Member>
    <Member MemberName="WindowHeight">
      <MemberSignature Language="C#" Value="public static int WindowHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowHeight" />
      <MemberSignature Language="DocId" Value="P:System.Console.WindowHeight" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property WindowHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int WindowHeight { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置控制台窗口区域的高度。</summary>
        <value>控制台窗口的高度，以行为单位。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 正在尝试设置的值<xref:System.Console.WindowHeight%2A>属性在输出重定向时将引发或者<xref:System.ArgumentOutOfRangeException>或<xref:System.IO.IOException>异常。 若要防止出现异常，可以设置此属性仅当值<xref:System.Console.IsOutputRedirected%2A>属性返回`false`。  
  
   
  
## Examples  
 此示例演示<xref:System.Console.SetWindowSize%2A>方法，与<xref:System.Console.WindowWidth%2A>和<xref:System.Console.WindowHeight%2A>属性。 你必须运行该示例才能查看更改控制台窗口大小的完整效果。  
  
 该示例报告设置为 85 列和 43 行的控制台窗口的尺寸，然后等待按键。 当按任意键时，控制台窗口的尺寸会减半、 报告的新维度，和示例等待另一个按键。 最后，当按下任何键控制台窗口还原到其原始维度，该示例终止。  
  
 [!code-cpp[console.setwindowsize#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.setwindowsize/CPP/sws.cpp#1)]
 [!code-csharp[console.setwindowsize#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.setwindowsize/CS/sws.cs#1)]
 [!code-vb[console.setwindowsize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.setwindowsize/VB/sws.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">属性 <see cref="P:System.Console.WindowWidth" /> 的值或属性 <see cref="P:System.Console.WindowHeight" /> 的值小于或等于零。  
  
 或  
  
 属性 <see cref="P:System.Console.WindowHeight" /> 的值加上属性 <see cref="P:System.Console.WindowTop" /> 的值大于或等于 <see cref="F:System.Int16.MaxValue" />。  
  
 或  
  
 <see cref="P:System.Console.WindowWidth" /> 属性的值或 <see cref="P:System.Console.WindowHeight" /> 属性的值大于当前屏幕分辨率和控制台字体的最大可能的窗口宽度或高度。</exception>
        <exception cref="T:System.IO.IOException">读取或写入信息时发生错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="WindowLeft">
      <MemberSignature Language="C#" Value="public static int WindowLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowLeft" />
      <MemberSignature Language="DocId" Value="P:System.Console.WindowLeft" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property WindowLeft As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int WindowLeft { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置控制台窗口区域的最左边相对于屏幕缓冲区的位置。</summary>
        <value>控制台窗口的最左边的位置，以列为单位。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 控制台到更大的矩形缓冲区区域表示的矩形窗口。 窗口和缓冲区垂直测量了通过它们的行数和水平方向的列数。 通过定义缓冲区的尺寸<xref:System.Console.BufferHeight%2A>和<xref:System.Console.BufferWidth%2A>属性。 通过定义控制台区域的维度<xref:System.Console.WindowHeight%2A>和<xref:System.Console.WindowWidth%2A>属性。 <xref:System.Console.WindowLeft%2A>属性确定缓冲区的列显示在控制台窗口的第一列。 值<xref:System.Console.WindowLeft%2A>属性可以介于 0 到<xref:System.Console.BufferWidth%2A>  -  <xref:System.Console.WindowWidth%2A>。 尝试将其设置为的值超出了该范围将引发<xref:System.ArgumentOutOfRangeException>。  
  
 控制台窗口首次打开时，默认值的<xref:System.Console.WindowLeft%2A>属性为零，指示由控制台所示的第一列对应于在缓冲区中的第一列 （位置零上的列）。 控制台窗口和缓冲区的默认宽度为 80 的列。 这意味着，<xref:System.Console.WindowLeft%2A>只有控制台窗口变窄或缓冲区变宽，则可以修改属性。  
  
 请注意，如果缓冲区的宽度超过控制台窗口的值的宽度<xref:System.Console.WindowLeft%2A>属性自动调整当用户使用水平滚动条来到缓冲区定义窗口的关系。  
  
 正在尝试设置的值<xref:System.Console.WindowLeft%2A>属性输出时重定向引发<xref:System.IO.IOException>异常。 若要避免此异常，可以设置此属性仅当值<xref:System.Console.IsOutputRedirected%2A>属性返回`false`。  
  
   
  
## Examples  
 下面的示例打开一个 80 列控制台窗口中，并定义 120 列宽的缓冲区。 它显示在窗口和缓冲区大小的信息，然后等待用户按左箭头键或向右箭头键。 在以前的情况下，它递减的值<xref:System.Console.WindowLeft%2A>1 如果结果为非法值的属性。 在后一种情况下，它的值增加<xref:System.Console.WindowLeft%2A>1 如果结果将是合法的属性。 请注意，该示例不需要处理<xref:System.ArgumentOutOfRangeException>，因为它会检查的值分配给<xref:System.Console.WindowLeft%2A>属性不为负且不会导致的总和<xref:System.Console.WindowLeft%2A>和<xref:System.Console.WindowWidth%2A>属性超过<xref:System.Console.BufferWidth%2A>属性值。  
  
 [!code-cpp[System.Console.WindowLeft#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.console.windowleft/cpp/windowleft1.cpp#1)]
 [!code-csharp[System.Console.WindowLeft#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.windowleft/cs/windowleft1.cs#1)]
 [!code-vb[System.Console.WindowLeft#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.windowleft/vb/windowleft1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">在集运算中，要赋予的值小于零。  
  
 或  
  
 赋值之后，<see cref="P:System.Console.WindowLeft" /> 加 <see cref="P:System.Console.WindowWidth" /> 将超过 <see cref="P:System.Console.BufferWidth" />。</exception>
        <exception cref="T:System.IO.IOException">读取或写入信息时发生错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="WindowTop">
      <MemberSignature Language="C#" Value="public static int WindowTop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowTop" />
      <MemberSignature Language="DocId" Value="P:System.Console.WindowTop" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property WindowTop As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int WindowTop { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置控制台窗口区域的最顶部相对于屏幕缓冲区的位置。</summary>
        <value>控制台窗口最顶部的位置，以行为单位。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 控制台到更大的矩形缓冲区区域表示的矩形窗口。 窗口和缓冲区垂直测量了通过它们的行数和水平方向的列数。 通过定义缓冲区的尺寸<xref:System.Console.BufferHeight%2A>和<xref:System.Console.BufferWidth%2A>属性。 通过定义控制台区域的维度<xref:System.Console.WindowHeight%2A>和<xref:System.Console.WindowWidth%2A>属性。 <xref:System.Console.WindowTop%2A>属性确定缓冲区的行显示在控制台窗口的第一列。 值<xref:System.Console.WindowTop%2A>属性可以介于 0 到<xref:System.Console.BufferHeight%2A>  -  <xref:System.Console.WindowHeight%2A>。 尝试将其设置为的值超出了该范围将引发<xref:System.ArgumentOutOfRangeException>。  
  
 正在尝试设置的值<xref:System.Console.WindowTop%2A>属性输出时重定向引发<xref:System.IO.IOException>异常。 若要避免此异常，可以设置此属性仅当值<xref:System.Console.IsOutputRedirected%2A>属性返回`false`。  
  
   
  
## Examples  
 下面的示例演示<xref:System.Console.WindowLeft%2A>， <xref:System.Console.WindowTop%2A>， <xref:System.Console.WindowWidth%2A>， <xref:System.Console.WindowHeight%2A>， <xref:System.Console.BufferWidth%2A>， <xref:System.Console.BufferHeight%2A>，和<xref:System.Console.CursorVisible%2A>属性; 与<xref:System.Console.SetWindowPosition%2A>， <xref:System.Console.SetBufferSize%2A>，和<xref:System.Console.ReadKey%2A>方法。 该示例基于屏幕缓冲区的宽度屏幕缓冲区中绘制网格模式。 然后该示例将移动到的向上箭头，按下的向下箭头、 向左键或向右箭头控制台键的响应中的控制台窗口。 网格模式有助于你查看控制台窗口相对于屏幕缓冲区的移动。  
  
 [!code-cpp[console.windowLT#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.windowLT/CPP/wlt.cpp#1)]
 [!code-csharp[console.windowLT#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.windowLT/CS/wlt.cs#1)]
 [!code-vb[console.windowLT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.windowLT/VB/wlt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">在集运算中，要赋予的值小于零。  
  
 或  
  
 赋值之后，<see cref="P:System.Console.WindowTop" /> 加 <see cref="P:System.Console.WindowHeight" /> 将超过 <see cref="P:System.Console.BufferHeight" />。</exception>
        <exception cref="T:System.IO.IOException">读取或写入信息时发生错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="WindowWidth">
      <MemberSignature Language="C#" Value="public static int WindowWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 WindowWidth" />
      <MemberSignature Language="DocId" Value="P:System.Console.WindowWidth" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property WindowWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int WindowWidth { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置控制台窗口的宽度。</summary>
        <value>控制台窗口的宽度，以列为单位。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 正在尝试设置的值<xref:System.Console.WindowWidth%2A>属性在输出重定向时将引发或者<xref:System.ArgumentOutOfRangeException>或<xref:System.IO.IOException>异常。 若要防止出现异常，可以设置此属性仅当值<xref:System.Console.IsOutputRedirected%2A>属性返回`false`。  
  
   
  
## Examples  
 此示例演示<xref:System.Console.SetWindowSize%2A>方法，与<xref:System.Console.WindowWidth%2A>和<xref:System.Console.WindowHeight%2A>属性。 你必须运行该示例才能查看更改控制台窗口大小的完整效果。  
  
 该示例报告设置为 85 列和 43 行的控制台窗口的尺寸，然后等待按键。 当按任意键时，控制台窗口的尺寸会减半、 报告的新维度，和示例等待另一个按键。 最后，当按下任何键控制台窗口还原到其原始维度，该示例终止。  
  
 [!code-cpp[console.setwindowsize#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.setwindowsize/CPP/sws.cpp#1)]
 [!code-csharp[console.setwindowsize#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.setwindowsize/CS/sws.cs#1)]
 [!code-vb[console.setwindowsize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.setwindowsize/VB/sws.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">属性 <see cref="P:System.Console.WindowWidth" /> 的值或属性 <see cref="P:System.Console.WindowHeight" /> 的值小于或等于零。  
  
 或  
  
 属性 <see cref="P:System.Console.WindowHeight" /> 的值加上属性 <see cref="P:System.Console.WindowTop" /> 的值大于或等于 <see cref="F:System.Int16.MaxValue" />。  
  
 或  
  
 <see cref="P:System.Console.WindowWidth" /> 属性的值或 <see cref="P:System.Console.WindowHeight" /> 属性的值大于当前屏幕分辨率和控制台字体的最大可能的窗口宽度或高度。</exception>
        <exception cref="T:System.IO.IOException">读取或写入信息时发生错误。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将指定值的文本表示形式写入标准输出流。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>将指定的布尔值的文本表示形式写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文本表示形式`value`由调用<xref:System.Boolean.ToString%2A?displayProperty=nameWithType>，该操作会输出<xref:System.Boolean.TrueString?displayProperty=nameWithType>或<xref:System.Boolean.FalseString?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下面的示例演示 `Write` 方法的用法。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>将指定的 Unicode 字符值写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示 `Write` 方法的用法。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(cli::array &lt;char&gt; ^ buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">Unicode 字符数组。</param>
        <summary>将指定的 Unicode 字符数组写入标准输出流。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>将指定的 <see cref="T:System.Decimal" /> 值的文本表示形式写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文本表示形式`value`由调用<xref:System.Decimal.ToString%2A?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下面的示例演示 `Write` 方法的用法。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>将指定的双精度浮点值的文本表示形式写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文本表示形式`value`由调用<xref:System.Double.ToString%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 下面的示例演示 `Write` 方法的用法。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>将指定的 32 位有符号整数值的文本表示写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文本表示形式`value`由调用<xref:System.Int32.ToString%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 下面的示例演示 `Write` 方法的用法。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>将指定的 64 位有符号整数值的文本表示写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文本表示形式`value`由调用<xref:System.Int64.ToString%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 下面的示例演示 `Write` 方法的用法。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值，或者为 <see langword="null" />。</param>
        <summary>将指定对象的文本表示形式写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`value`是`null`，则不写入，并且会引发任何异常。 否则为`ToString`方法`value`调用以生成其字符串表示形式中，并且生成的字符串会写入到标准输出流。  
  
   
  
## Examples  
 下面的示例演示 `Write` 方法的用法。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>将指定的单精度浮点值的文本表示形式写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文本表示形式`value`由调用<xref:System.Single.ToString%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 下面的示例演示 `Write` 方法的用法。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>将指定的字符串值写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果值为`null`，则不写入到标准输出流。  
  
   
  
## Examples  
 下面的示例演示 `Write` 方法的用法。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>将指定的 32 位无符号整数值的文本表示写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文本表示形式`value`由调用<xref:System.UInt32.ToString%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 下面的示例演示 `Write` 方法的用法。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>将指定的 64 位无符号整数值的文本表示写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文本表示形式`value`由调用<xref:System.UInt64.ToString%2A?displayProperty=nameWithType>方法。  
  
   
  
## Examples  
 下面的示例演示 `Write` 方法的用法。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, System::Object ^ arg0);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">复合格式字符串。</param>
        <param name="arg0">要使用 <c>format</c> 写入的对象。</param>
        <summary>使用指定的格式信息将指定对象的文本表示形式写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使用[复合格式设置功能](~/docs/standard/base-types/composite-formatting.md)要将对象的值转换为它的文本表示形式，并将该表示形式嵌入在字符串中的.NET framework。 生成的字符串写入到输出流。  
  
 `format`参数由零个或多个文本混和组成，零个或多个索引占位符称为格式项，对应于此方法的参数列表中的对象。 格式设置的过程将每个格式项替换的文本表示形式相应对象的值。  
  
 格式项的语法是`{`*索引*[`,`*对齐*] [`:`*formatString*]`}`，它指定强制索引、 可选长度和对齐方式的带格式的文本和一个可选的字符串的格式说明符字符用于控制如何设置相应的对象的值的格式。  
  
 .NET Framework 提供了广泛的格式设置支持，以下的格式设置主题中的更详细地介绍。  
  
-   有关如方法支持复合格式设置功能的详细信息<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，和的某些重载<xref:System.Console.WriteLine%2A>，请参阅[复合格式设置](~/docs/standard/base-types/composite-formatting.md)。  
  
-   有关数字格式说明符的详细信息，请参阅[标准数字格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)和[自定义数字格式字符串](~/docs/standard/base-types/custom-numeric-format-strings.md)。  
  
-   有关日期和时间格式说明符的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。  
  
-   有关枚举格式说明符的详细信息，请参阅[枚举格式字符串](~/docs/standard/base-types/enumeration-format-strings.md)。  
  
-   有关格式设置的详细信息，请参阅[格式化类型](~/docs/standard/base-types/formatting-types.md)。  
  
   
  
## Examples  
 下面的示例使用 `WriteLine` 方法演示数字、日期和枚举的标准格式说明符。  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)] 
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 下面的示例演示 <xref:System.Console.Write%2A> 方法的用法。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 中的格式规范无效。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">复合格式字符串。</param>
        <param name="arg">要使用 <c>format</c> 写入的对象的数组。</param>
        <summary>使用指定的格式信息将指定的对象数组的文本表示形式写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使用[复合格式设置功能](~/docs/standard/base-types/composite-formatting.md)要将对象的值转换为它的文本表示形式，并将该表示形式嵌入在字符串中的.NET framework。 生成的字符串写入到输出流。  
  
 `format`参数由零个或多个文本混和组成，零个或多个索引占位符称为格式项，对应于此方法的参数列表中的对象。 格式设置的过程将每个格式项替换的文本表示形式相应对象的值。  
  
 格式项的语法是`{`*索引*[`,`*对齐*] [`:`*formatString*]`}`，它指定强制索引、 可选长度和对齐方式的带格式的文本和一个可选的字符串的格式说明符字符用于控制如何设置相应的对象的值的格式。  
  
 .NET Framework 提供了广泛的格式设置支持，以下的格式设置主题中的更详细地介绍。  
  
-   有关如方法支持复合格式设置功能的详细信息<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，和的某些重载<xref:System.Console.WriteLine%2A>，请参阅[复合格式设置](~/docs/standard/base-types/composite-formatting.md)。  
  
-   有关数字格式说明符的详细信息，请参阅[标准数字格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)和[自定义数字格式字符串](~/docs/standard/base-types/custom-numeric-format-strings.md)。  
  
-   有关日期和时间格式说明符的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。  
  
-   有关枚举格式说明符的详细信息，请参阅[枚举格式字符串](~/docs/standard/base-types/enumeration-format-strings.md)。  
  
-   有关格式设置的详细信息，请参阅[格式化类型](~/docs/standard/base-types/formatting-types.md)。  
  
 `arg`参数是一个参数数组。 作为数组或五个或多个项的列表，则可以将自变量传递给方法。 这些示例说明了两种形式的方法调用。  
  
   
  
## Examples  
 下面的示例定义`Person`与大量的属性提供了有关个人信息的类。 其`GetDescription`方法返回一个数组，包含所有属性值，但一个除外。 然后，该示例使用返回的数组`GetDescription`方法以显示 Person 对象的值。  
  
 [!code-csharp[System.Console.Write#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.write/cs/WriteParams1.cs#1)]
 [!code-vb[System.Console.Write#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.write/vb/WriteParams1.vb#1)]  
  
 请注意，该示例调用<xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29>方法而不是<xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29>方法因为它尝试显示的值`Person.Remarks`同一行上的属性。 若要执行此操作，它检查的值<xref:System.Console.CursorLeft%2A>和<xref:System.Console.WindowWidth%2A>属性，以确定是否有足够的空间以适合的批注。  如果没有，它显示的行。 如果没有，它写入行，缩进三个空格，并显示备注。  
  
 下面的示例是第一个，相同，但它会提供一个五项列表作为`arg`而不是参数数组的自变量。  
  
 [!code-csharp[System.Console.Write#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.console.write/cs/WriteParams2.cs#2)]
 [!code-vb[System.Console.Write#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.console.write/vb/WriteParams2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> 或 <paramref name="arg" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 中的格式规范无效。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage">
          <para>此方法不由 c + + 代码调用。 C + + 编译器将解析对调用[System.Console.Write](xref:System.Console.Write*) ，作为对的调用中包含字符串和四个或多个对象参数的列表<see cref="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)" />。 它解析到调用[System.Console.Write](xref:System.Console.Write*) ，作为对的调用中包含字符串和一个对象数组<see cref="M:System.Console.Write(System.String,System.Object)" />。</para>
        </block>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Unicode 字符的数组。</param>
        <param name="index">
          <c>buffer</c> 中的起始位置。</param>
        <param name="count">要写入的字符数。</param>
        <summary>将指定的 Unicode 字符子数组写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将写入`count`字符位置开始`index`的`buffer`写入标准输出流。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 或 <paramref name="count" /> 小于零。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> 加 <paramref name="count" /> 指定不在 <paramref name="buffer" /> 内的位置。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">复合格式字符串。</param>
        <param name="arg0">要使用 <c>format</c> 写入的第 1 个对象。</param>
        <param name="arg1">要使用 <c>format</c> 写入的第 2 个对象。</param>
        <summary>使用指定的格式信息将指定对象的文本表示形式写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使用[复合格式设置功能](~/docs/standard/base-types/composite-formatting.md)要将对象的值转换为它的文本表示形式，并将该表示形式嵌入在字符串中的.NET framework。 生成的字符串写入到输出流。  
  
 `format`参数由零个或多个文本混和组成，零个或多个索引占位符称为格式项，对应于此方法的参数列表中的对象。 格式设置的过程将每个格式项替换的文本表示形式相应对象的值。  
  
 格式项的语法是`{`*索引*[`,`*对齐*] [`:`*formatString*]`}`，它指定强制索引、 可选长度和对齐方式的带格式的文本和一个可选的字符串的格式说明符字符用于控制如何设置相应的对象的值的格式。  
  
 .NET Framework 提供了广泛的格式设置支持，以下的格式设置主题中的更详细地介绍。  
  
-   有关如方法支持复合格式设置功能的详细信息<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，和的某些重载<xref:System.Console.WriteLine%2A>，请参阅[复合格式设置](~/docs/standard/base-types/composite-formatting.md)。  
  
-   有关数字格式说明符的详细信息，请参阅[标准数字格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)和[自定义数字格式字符串](~/docs/standard/base-types/custom-numeric-format-strings.md)。  
  
-   有关日期和时间格式说明符的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。  
  
-   有关枚举格式说明符的详细信息，请参阅[枚举格式字符串](~/docs/standard/base-types/enumeration-format-strings.md)。  
  
-   有关格式设置的详细信息，请参阅[格式化类型](~/docs/standard/base-types/formatting-types.md)。  
  
   
  
## Examples  
 下面的示例使用 `WriteLine` 方法演示数字、日期和枚举的标准格式说明符。  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 下面的示例演示 `Write` 方法的用法。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 中的格式规范无效。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, arg0 As Object, arg1 As Object, arg2 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">复合格式字符串。</param>
        <param name="arg0">要使用 <c>format</c> 写入的第 1 个对象。</param>
        <param name="arg1">要使用 <c>format</c> 写入的第 2 个对象。</param>
        <param name="arg2">要使用 <c>format</c> 写入的第 3 个对象。</param>
        <summary>使用指定的格式信息将指定对象的文本表示形式写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使用[复合格式设置功能](~/docs/standard/base-types/composite-formatting.md)要将对象的值转换为它的文本表示形式，并将该表示形式嵌入在字符串中的.NET framework。 生成的字符串写入到输出流。  
  
 `format`参数由零个或多个文本混和组成，零个或多个索引占位符称为格式项，对应于此方法的参数列表中的对象。 格式设置的过程将每个格式项替换的文本表示形式相应对象的值。  
  
 格式项的语法是`{`*索引*[`,`*对齐*] [`:`*formatString*]`}`，它指定强制索引、 可选长度和对齐方式的带格式的文本和一个可选的字符串的格式说明符字符用于控制如何设置相应的对象的值的格式。  
  
 .NET Framework 提供了广泛的格式设置支持，以下的格式设置主题中的更详细地介绍。  
  
-   有关如方法支持复合格式设置功能的详细信息<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，和的某些重载<xref:System.Console.WriteLine%2A>，请参阅[复合格式设置](~/docs/standard/base-types/composite-formatting.md)。  
  
-   有关数字格式说明符的详细信息，请参阅[标准数字格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)和[自定义数字格式字符串](~/docs/standard/base-types/custom-numeric-format-strings.md)。  
  
-   有关日期和时间格式说明符的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。  
  
-   有关枚举格式说明符的详细信息，请参阅[枚举格式字符串](~/docs/standard/base-types/enumeration-format-strings.md)。  
  
-   有关格式设置的详细信息，请参阅[格式化类型](~/docs/standard/base-types/formatting-types.md)。  
  
   
  
## Examples  
 下面的示例使用 `WriteLine` 方法演示数字、日期和枚举的标准格式说明符。  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 下面的示例演示 `Write` 方法的用法。  
  
 [!code-cpp[System.Console-REFORMAT#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console-REFORMAT/CPP/reformat.cpp#1)]
 [!code-csharp[System.Console-REFORMAT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console-REFORMAT/CS/reformat.cs#1)]
 [!code-vb[System.Console-REFORMAT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console-REFORMAT/VB/reformat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 中的格式规范无效。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string format, object arg0, object arg1, object arg2, object arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string format, object arg0, object arg1, object arg2, object arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (format As String, arg0 As Object, arg1 As Object, arg2 As Object, arg3 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2, System::Object ^ arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
        <Parameter Name="arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">复合格式字符串。</param>
        <param name="arg0">要使用 <c>format</c> 写入的第 1 个对象。</param>
        <param name="arg1">要使用 <c>format</c> 写入的第 2 个对象。</param>
        <param name="arg2">要使用 <c>format</c> 写入的第 3 个对象。</param>
        <param name="arg3">要使用 <c>format</c> 写入的第 4 个对象。</param>
        <summary>使用指定的格式信息将指定的对象和可变长度参数列表的文本表示形式写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  此 API 不兼容 CLS。 符合 CLS 的替代方法是 <xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>。 C# 和 Visual Basic 编译器自动解决调用此方法与调用<xref:System.Console.Write%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>。  
  
 此方法使用[复合格式设置功能](~/docs/standard/base-types/composite-formatting.md)要将对象的值转换为它的文本表示形式，并将该表示形式嵌入在字符串中的.NET framework。 生成的字符串写入到输出流。  
  
 `format`参数由零个或多个文本混和组成，零个或多个索引占位符称为格式项，对应于此方法的参数列表中的对象。 格式设置的过程将每个格式项替换的文本表示形式相应对象的值。  
  
 格式项的语法是`{`*索引*[`,`*对齐*] [`:`*formatString*]`}`，它指定强制索引、 可选长度和对齐方式的带格式的文本和一个可选的字符串的格式说明符字符用于控制如何设置相应的对象的值的格式。  
  
 .NET Framework 提供了广泛的格式设置支持，以下的格式设置主题中的更详细地介绍。  
  
-   有关如方法支持复合格式设置功能的详细信息<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，和的某些重载<xref:System.Console.WriteLine%2A>，请参阅[复合格式设置](~/docs/standard/base-types/composite-formatting.md)。  
  
-   有关数字格式说明符的详细信息，请参阅[标准数字格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)和[自定义数字格式字符串](~/docs/standard/base-types/custom-numeric-format-strings.md)。  
  
-   有关日期和时间格式说明符的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。  
  
-   有关枚举格式说明符的详细信息，请参阅[枚举格式字符串](~/docs/standard/base-types/enumeration-format-strings.md)。  
  
-   有关格式设置的详细信息，请参阅[格式化类型](~/docs/standard/base-types/formatting-types.md)。  
  
   
  
## Examples  
 下面的示例演示如何使用变量参数的<xref:System.Console.Write%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29>方法。 使用复合格式字符串和五个格式项调用该方法。  
  
 [!code-cpp[System.Console.Write#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.console.write/cpp/con_write.cpp#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 中的格式规范无效。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage">
          <para>此方法将标有<see langword="vararg" />关键字，这意味着它支持可变数目的参数。 可以从 Visual c + +，调用方法，但不是能从 C# 或 Visual Basic 代码调用。 C# 和 Visual Basic 编译器解决调用<see cref="M:System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)" />一样调用<see cref="M:System.Console.Write(System.String,System.Object[])" />。</para>
        </block>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.WriteLine" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将指定的数据（后跟当前行终止符）写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认的行终止符是其值是回车符后跟换行符的字符串 ("\r\n"在 C# 中，或`vbCrLf`在 Visual Basic 中)。 你可以通过设置更改的行终止符<xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType>属性<xref:System.Console.Out%2A>到另一个字符串的属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将当前行终止符写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认的行终止符是其值是回车符后跟换行符的字符串 ("\r\n"在 C# 中，或`vbCrLf`在 Visual Basic 中)。 你可以通过设置更改的行终止符<xref:System.IO.TextWriter.NewLine%2A?displayProperty=nameWithType>属性<xref:System.Console.Out%2A>到另一个字符串的属性。 说明如示例所示。  
  
   
  
## Examples  
 该示例将从其默认值为"\r\n"更改的行终止符或`vbCrLf`到"\r\n\r\n"或`vbCrLf`  +  `vbCrLf`。 然后，它调用<xref:System.Console.WriteLine>和<xref:System.Console.WriteLine%28System.String%29>方法来向控制台显示输出。  
  
 [!code-cpp[System.Console.WriteLine#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/newline1.cpp#2)]
 [!code-csharp[System.Console.WriteLine#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/newline1.cs#2)]
 [!code-vb[System.Console.WriteLine#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/newline1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
        <altmember cref="P:System.IO.TextWriter.NewLine" />
        <altmember cref="P:System.Console.Out" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>将指定布尔值的文本表示形式（后跟当前行终止符）写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文本表示形式`value`由调用<xref:System.Boolean.ToString%2A?displayProperty=nameWithType>方法。  
  
 有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。  
  
   
  
## Examples  
 下面的示例将生成 10 个随机整数，使用<xref:System.Console.WriteLine%28System.Boolean%29?displayProperty=nameWithType>方法，以指示它们是否即使。  
  
 [!code-cpp[System.Console.WriteLine#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/writeline_boolean1.cpp#4)]
 [!code-csharp[System.Console.WriteLine#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/writeline_boolean1.cs#4)]
 [!code-vb[System.Console.WriteLine#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/writeline_boolean1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(char value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>将指定的 Unicode 字符值（后跟当前行终止符）写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。  
  
   
  
## Examples  
 下面的示例是一个提示计算器计算 18%提示，并使用<xref:System.Console.WriteLine%2A>方法来显示原始费用金额、 提示，量和总量。 示例是一个控制台应用程序要求用户提供作为命令行参数的原始费用金额。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (char[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(char[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Char[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (buffer As Char())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(cli::array &lt;char&gt; ^ buffer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
      </Parameters>
      <Docs>
        <param name="buffer">Unicode 字符数组。</param>
        <summary>将指定的 Unicode 字符数组（后跟当前行终止符）写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Decimal value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>将指定的 <see cref="T:System.Decimal" /> 值的文本表示形式（后跟当前行终止符）写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文本表示形式`value`由调用<xref:System.Decimal.ToString%2A?displayProperty=nameWithType>方法。  
  
 有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。  
  
   
  
## Examples  
 下面的示例是一个提示计算器计算 18%提示，并使用<xref:System.Console.WriteLine%2A>方法来显示原始费用金额、 提示，量和总量。 示例是一个控制台应用程序要求用户提供作为命令行参数的原始费用金额。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(double value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>将指定的双精度浮点值的文本表示形式（后跟当前行终止符）写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文本表示形式`value`由调用<xref:System.Double.ToString%2A?displayProperty=nameWithType>方法。  
  
 有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。  
  
   
  
## Examples  
 下面的示例是一个提示计算器计算 18%提示，并使用<xref:System.Console.WriteLine%2A>方法来显示原始费用金额、 提示，量和总量。 示例是一个控制台应用程序要求用户提供作为命令行参数的原始费用金额。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>将指定的 32 位有符号整数值的文本表示（后跟当前行的结束符）写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文本表示形式`value`由调用<xref:System.Int32.ToString%2A?displayProperty=nameWithType>方法。  
  
 有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。  
  
   
  
## Examples  
 下面的示例是一个提示计算器计算 18%提示，并使用<xref:System.Console.WriteLine%2A>方法来显示原始费用金额、 提示，量和总量。 示例是一个控制台应用程序要求用户提供作为命令行参数的原始费用金额。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>将指定的 64 位有符号整数值的文本表示（后跟当前行的结束符）写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文本表示形式`value`由调用<xref:System.Int64.ToString%2A?displayProperty=nameWithType>方法。  
  
 有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。  
  
   
  
## Examples  
 下面的示例是一个提示计算器计算 18%提示，并使用<xref:System.Console.WriteLine%2A>方法来显示原始费用金额、 提示，量和总量。 示例是一个控制台应用程序要求用户提供作为命令行参数的原始费用金额。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>将指定对象的文本表示形式（后跟当前行终止符）写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `value` 为 `null`，则只写入行终止符。 否则为`ToString`方法`value`调用以生成其字符串表示形式中，并且生成的字符串会写入到标准输出流。  
  
 有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。  
  
   
  
## Examples  
 下面的示例使用<xref:System.Console.WriteLine%28System.Object%29>方法以显示到控制台对象数组中的每个值。  
  
 [!code-cpp[System.Console.WriteLine#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/writeline_obj1.cpp#3)]
 [!code-csharp[System.Console.WriteLine#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/writeline_obj1.cs#3)]
 [!code-vb[System.Console.WriteLine#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/writeline_obj1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(float value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>将指定的单精度浮点值的文本表示形式（后跟当前行终止符）写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文本表示形式`value`由调用<xref:System.Single.ToString%2A?displayProperty=nameWithType>方法。  
  
 有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。  
  
   
  
## Examples  
 下面的示例是一个提示计算器计算 18%提示，并使用<xref:System.Console.WriteLine%2A>方法来显示原始费用金额、 提示，量和总量。 示例是一个控制台应用程序要求用户提供作为命令行参数的原始费用金额。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>将指定的字符串值（后跟当前行终止符）写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果值为`null`，只将行终止符写入标准输出流。  
  
 有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine>方法。  
  
   
  
## Examples  
 该示例将从其默认值为"\r\n"更改的行终止符或`vbCrLf`到"\r\n\r\n"或`vbCrLf`  +  `vbCrLf`。 然后，它调用<xref:System.Console.WriteLine>和<xref:System.Console.WriteLine%28System.String%29>方法来向控制台显示输出。  
  
 [!code-cpp[System.Console.WriteLine#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/newline1.cpp#2)]
 [!code-csharp[System.Console.WriteLine#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/newline1.cs#2)]
 [!code-vb[System.Console.WriteLine#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/newline1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::UInt32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>将指定的 32 位无符号的整数值的文本表示（后跟当前行的结束符）写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文本表示形式`value`由调用<xref:System.UInt32.ToString%2A?displayProperty=nameWithType>方法。  
  
 有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。  
  
   
  
## Examples  
 下面的示例是一个提示计算器计算 18%提示，并使用<xref:System.Console.WriteLine%2A>方法来显示原始费用金额、 提示，量和总量。 示例是一个控制台应用程序要求用户提供作为命令行参数的原始费用金额。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::UInt64 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>将指定的 64 位无符号的整数值的文本表示（后跟当前行的结束符）写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文本表示形式`value`由调用<xref:System.UInt64.ToString%2A?displayProperty=nameWithType>方法。  
  
 有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。  
  
   
  
## Examples  
 下面的示例是一个提示计算器计算 18%提示，并使用<xref:System.Console.WriteLine%2A>方法来显示原始费用金额、 提示，量和总量。 示例是一个控制台应用程序要求用户提供作为命令行参数的原始费用金额。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, arg0 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, System::Object ^ arg0);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">复合格式字符串。</param>
        <param name="arg0">要使用 <c>format</c> 写入的对象。</param>
        <summary>使用指定的格式信息，将指定对象（后跟当前行终止符）的文本表示形式写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使用[复合格式设置功能](~/docs/standard/base-types/composite-formatting.md)要将对象的值转换为它的文本表示形式，并将该表示形式嵌入在字符串中的.NET framework。 生成的字符串写入到输出流。  
  
 `format`参数由零个或多个文本混和组成，零个或多个索引占位符称为格式项，对应于此方法的参数列表中的对象。 格式设置的过程将每个格式项替换的文本表示形式相应对象的值。  
  
 格式项的语法是`{`*索引*[`,`*对齐*] [`:`*formatString*]`}`，它指定强制索引、 可选长度和对齐方式的带格式的文本和一个可选的字符串的格式说明符字符用于控制如何设置相应的对象的值的格式。  
  
 .NET Framework 提供了广泛的格式设置支持，以下的格式设置主题中的更详细地介绍。  
  
-   有关如方法支持复合格式设置功能的详细信息<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，和的某些重载<xref:System.Console.WriteLine%2A>，请参阅[复合格式设置](~/docs/standard/base-types/composite-formatting.md)。  
  
-   有关数字格式说明符的详细信息，请参阅[标准数字格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)和[自定义数字格式字符串](~/docs/standard/base-types/custom-numeric-format-strings.md)。  
  
-   有关日期和时间格式说明符的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。  
  
-   有关枚举格式说明符的详细信息，请参阅[枚举格式字符串](~/docs/standard/base-types/enumeration-format-strings.md)。  
  
-   有关格式设置的详细信息，请参阅[格式化类型](~/docs/standard/base-types/formatting-types.md)。  
  
 有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。  
  
   
  
## Examples  
 下面的示例调用<xref:System.Console.WriteLine%28System.String%2CSystem.Object%29>方法以显示五个随机生成<xref:System.Boolean>值。  
  
 [!code-csharp[System.Console.WriteLine#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/WriteLine6.cs#6)]
 [!code-vb[System.Console.WriteLine#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/WriteLine6.vb#6)]  
  
 下面的示例调用<xref:System.Console.WriteLine%28System.String%2CSystem.Object%29>方法以显示当前日期。   请注意，格式项中`format`参数使用"D"[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)当前区域性的长日期格式显示日期。  
  
 [!code-csharp[System.Console.WriteLine#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/WriteLine7.cs#7)]
 [!code-vb[System.Console.WriteLine#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/WriteLine7.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 中的格式规范无效。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, params object[] arg);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object[] arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, ParamArray arg As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ arg);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">复合格式字符串。</param>
        <param name="arg">要使用 <c>format</c> 写入的对象的数组。</param>
        <summary>使用指定的格式信息，将指定的对象数组（后跟当前行终止符）的文本表示形式写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使用[复合格式设置功能](~/docs/standard/base-types/composite-formatting.md)要将对象的值转换为它的文本表示形式，并将该表示形式嵌入在字符串中的.NET framework。 生成的字符串写入到输出流。  
  
 `format`参数由零个或多个文本混和组成，零个或多个索引占位符称为格式项，对应于此方法的参数列表中的对象。 格式设置的过程将每个格式项替换的文本表示形式相应对象的值。  
  
 格式项的语法是`{`*索引*[`,`*对齐*] [`:`*formatString*]`}`，它指定强制索引、 可选长度和对齐方式的带格式的文本和一个可选的字符串的格式说明符字符用于控制如何设置相应的对象的值的格式。  
  
 .NET Framework 提供了广泛的格式设置支持，以下的格式设置主题中的更详细地介绍。  
  
-   有关如方法支持复合格式设置功能的详细信息<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，和的某些重载<xref:System.Console.WriteLine%2A>，请参阅[复合格式设置](~/docs/standard/base-types/composite-formatting.md)。  
  
-   有关数字格式说明符的详细信息，请参阅[标准数字格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)和[自定义数字格式字符串](~/docs/standard/base-types/custom-numeric-format-strings.md)。  
  
-   有关日期和时间格式说明符的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。  
  
-   有关枚举格式说明符的详细信息，请参阅[枚举格式字符串](~/docs/standard/base-types/enumeration-format-strings.md)。  
  
-   有关格式设置的详细信息，请参阅[格式化类型](~/docs/standard/base-types/formatting-types.md)。  
  
 有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。  
  
   
  
## Examples  
 下面的示例演示数字、日期和枚举的标准格式说明符。  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 下面的示例是一个提示计算器计算 18%提示，并使用<xref:System.Console.WriteLine%2A>方法来显示原始费用金额、 提示，量和总量。 示例是一个控制台应用程序要求用户提供作为命令行参数的原始费用金额。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> 或 <paramref name="arg" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 中的格式规范无效。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage">
          <para>此方法不由 c + + 代码调用。 C + + 编译器将解析对调用[System.Console.WriteLine](xref:System.Console.WriteLine*) ，作为对的调用中包含字符串和四个或多个对象参数的列表<see cref="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)" />。 它解析到调用[System.Console.WriteLine](xref:System.Console.WriteLine*) ，作为对的调用中包含字符串和一个对象数组<see cref="M:System.Console.WriteLine(System.String,System.Object)" />。</para>
        </block>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Unicode 字符的数组。</param>
        <param name="index">
          <c>buffer</c> 中的起始位置。</param>
        <param name="count">要写入的字符数。</param>
        <summary>将指定的 Unicode 字符子数组（后跟当前行终止符）写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将写入`count`字符位置开始`index`的`buffer`写入标准输出流。  
  
 有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> 或 <paramref name="count" /> 小于零。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> 加 <paramref name="count" /> 指定不在 <paramref name="buffer" /> 内的位置。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0, object arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0, object arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, arg0 As Object, arg1 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">复合格式字符串。</param>
        <param name="arg0">要使用 <c>format</c> 写入的第 1 个对象。</param>
        <param name="arg1">要使用 <c>format</c> 写入的第 2 个对象。</param>
        <summary>使用指定的格式信息，将指定对象的文本表示形式（后跟当前行终止符）写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使用[复合格式设置功能](~/docs/standard/base-types/composite-formatting.md)要将对象的值转换为它的文本表示形式，并将该表示形式嵌入在字符串中的.NET framework。 生成的字符串写入到输出流。  
  
 `format`参数由零个或多个文本混和组成，零个或多个索引占位符称为格式项，对应于此方法的参数列表中的对象。 格式设置的过程将每个格式项替换的文本表示形式相应对象的值。  
  
 格式项的语法是`{`*索引*[`,`*对齐*] [`:`*formatString*]`}`，它指定强制索引、 可选长度和对齐方式的带格式的文本和一个可选的字符串的格式说明符字符用于控制如何设置相应的对象的值的格式。  
  
 .NET Framework 提供了广泛的格式设置支持，以下的格式设置主题中的更详细地介绍。  
  
-   有关如方法支持复合格式设置功能的详细信息<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，和的某些重载<xref:System.Console.WriteLine%2A>，请参阅[复合格式设置](~/docs/standard/base-types/composite-formatting.md)。  
  
-   有关数字格式说明符的详细信息，请参阅[标准数字格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)和[自定义数字格式字符串](~/docs/standard/base-types/custom-numeric-format-strings.md)。  
  
-   有关日期和时间格式说明符的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。  
  
-   有关枚举格式说明符的详细信息，请参阅[枚举格式字符串](~/docs/standard/base-types/enumeration-format-strings.md)。  
  
-   有关格式设置的详细信息，请参阅[格式化类型](~/docs/standard/base-types/formatting-types.md)。  
  
 有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。  
  
   
  
## Examples  
 下面的示例演示数字、日期和枚举的标准格式说明符。  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 下面的示例是一个提示计算器计算 18%提示，并使用<xref:System.Console.WriteLine%2A>方法来显示原始费用金额、 提示，量和总量。 示例是一个控制台应用程序要求用户提供作为命令行参数的原始费用金额。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 中的格式规范无效。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0, object arg1, object arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0, object arg1, object arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, arg0 As Object, arg1 As Object, arg2 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Console</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">复合格式字符串。</param>
        <param name="arg0">要使用 <c>format</c> 写入的第 1 个对象。</param>
        <param name="arg1">要使用 <c>format</c> 写入的第 2 个对象。</param>
        <param name="arg2">要使用 <c>format</c> 写入的第 3 个对象。</param>
        <summary>使用指定的格式信息，将指定对象的文本表示形式（后跟当前行终止符）写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使用[复合格式设置功能](~/docs/standard/base-types/composite-formatting.md)要将对象的值转换为它的文本表示形式，并将该表示形式嵌入在字符串中的.NET framework。 生成的字符串写入到输出流。  
  
 `format`参数由零个或多个文本混和组成，零个或多个索引占位符称为格式项，对应于此方法的参数列表中的对象。 格式设置的过程将每个格式项替换的文本表示形式相应对象的值。  
  
 格式项的语法是`{`*索引*[`,`*对齐*] [`:`*formatString*]`}`，它指定强制索引、 可选长度和对齐方式的带格式的文本和一个可选的字符串的格式说明符字符用于控制如何设置相应的对象的值的格式。  
  
 .NET Framework 提供了广泛的格式设置支持，以下的格式设置主题中的更详细地介绍。  
  
-   有关如方法支持复合格式设置功能的详细信息<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，和的某些重载<xref:System.Console.WriteLine%2A>，请参阅[复合格式设置](~/docs/standard/base-types/composite-formatting.md)。  
  
-   有关数字格式说明符的详细信息，请参阅[标准数字格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)和[自定义数字格式字符串](~/docs/standard/base-types/custom-numeric-format-strings.md)。  
  
-   有关日期和时间格式说明符的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。  
  
-   有关枚举格式说明符的详细信息，请参阅[枚举格式字符串](~/docs/standard/base-types/enumeration-format-strings.md)。  
  
-   有关格式设置的详细信息，请参阅[格式化类型](~/docs/standard/base-types/formatting-types.md)。  
  
 有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。  
  
   
  
## Examples  
 下面的示例演示数字、日期和枚举的标准格式说明符。  
  
 [!code-cpp[console.writelineFmt1#1](~/samples/snippets/cpp/VS_Snippets_CLR/console.writelineFmt1/cpp/wl.cpp#1)] 
 [!code-csharp[console.writelineFmt1#1](~/samples/snippets/csharp/VS_Snippets_CLR/console.writelineFmt1/cs/wl.cs#1)]
 [!code-vb[console.writelineFmt1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/console.writelineFmt1/vb/wl.vb#1)]  
  
 下面的示例是一个提示计算器计算 18%提示，并使用<xref:System.Console.WriteLine%2A>方法来显示原始费用金额、 提示，量和总量。 示例是一个控制台应用程序要求用户提供作为命令行参数的原始费用金额。  
  
 [!code-csharp[System.Console.WriteLine#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Console.WriteLine/CS/tipcalc.cs#1)]
 [!code-vb[System.Console.WriteLine#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Console.WriteLine/VB/tipcalc.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 中的格式规范无效。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, object arg0, object arg1, object arg2, object arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object arg0, object arg1, object arg2, object arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, arg0 As Object, arg1 As Object, arg2 As Object, arg3 As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, System::Object ^ arg0, System::Object ^ arg1, System::Object ^ arg2, System::Object ^ arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg0" Type="System.Object" />
        <Parameter Name="arg1" Type="System.Object" />
        <Parameter Name="arg2" Type="System.Object" />
        <Parameter Name="arg3" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">复合格式字符串。</param>
        <param name="arg0">要使用 <c>format</c> 写入的第 1 个对象。</param>
        <param name="arg1">要使用 <c>format</c> 写入的第 2 个对象。</param>
        <param name="arg2">要使用 <c>format</c> 写入的第 3 个对象。</param>
        <param name="arg3">要使用 <c>format</c> 写入的第 4 个对象。</param>
        <summary>使用指定的格式信息，将指定的对象和可变长度参数列表（后跟当前行终止符）的文本表示形式写入标准输出流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  此 API 不兼容 CLS。 符合 CLS 的替代方法是 <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>。 C# 和 Visual Basic 编译器自动解决调用此方法与调用<xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>。  
  
 此方法使用[复合格式设置功能](~/docs/standard/base-types/composite-formatting.md)要将对象的值转换为它的文本表示形式，并将该表示形式嵌入在字符串中的.NET framework。 生成的字符串写入到输出流。  
  
 `format`参数由零个或多个文本混和组成，零个或多个索引占位符称为格式项，对应于此方法的参数列表中的对象。 格式设置的过程将每个格式项替换的文本表示形式相应对象的值。  
  
 格式项的语法是`{`*索引*[`,`*对齐*] [`:`*formatString*]`}`，它指定强制索引、 可选长度和对齐方式的带格式的文本和一个可选的字符串的格式说明符字符用于控制如何设置相应的对象的值的格式。  
  
 .NET Framework 提供了广泛的格式设置支持，以下的格式设置主题中的更详细地介绍。  
  
-   有关如方法支持复合格式设置功能的详细信息<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，和的某些重载<xref:System.Console.WriteLine%2A>，请参阅[复合格式设置](~/docs/standard/base-types/composite-formatting.md)。  
  
-   有关数字格式说明符的详细信息，请参阅[标准数字格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)和[自定义数字格式字符串](~/docs/standard/base-types/custom-numeric-format-strings.md)。  
  
-   有关日期和时间格式说明符的详细信息，请参阅[标准日期和时间格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)和[自定义日期和时间格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)。  
  
-   有关枚举格式说明符的详细信息，请参阅[枚举格式字符串](~/docs/standard/base-types/enumeration-format-strings.md)。  
  
-   有关格式设置的详细信息，请参阅[格式化类型](~/docs/standard/base-types/formatting-types.md)。  
  
 有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。  
  
   
  
## Examples  
 下面的示例演示如何使用变量自变量使用<xref:System.Console.WriteLine%28System.String%2CSystem.Object%2CSystem.Object%2CSystem.Object%2CSystem.Object%29>方法。 使用复合格式字符串和五个格式项调用该方法。  
  
 [!code-cpp[System.Console.WriteLine#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Console.WriteLine/CPP/writeline_vararg.cpp#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> 中的格式规范无效。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">修改安全顶级窗口和子窗口。 关联的枚举： <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <block subset="none" type="usage">
          <para>此方法将标有<see langword="vararg" />关键字，这意味着它支持可变数目的参数。 可以从 Visual c + +，调用方法，但不是能从 C# 或 Visual Basic 代码调用。 C# 和 Visual Basic 编译器解决调用<see cref="M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)" />一样调用<see cref="M:System.Console.WriteLine(System.String,System.Object[])" />。</para>
        </block>
        <altmember cref="M:System.Console.Read" />
        <altmember cref="M:System.Console.ReadLine" />
        <altmember cref="M:System.Console.Write(System.String,System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>