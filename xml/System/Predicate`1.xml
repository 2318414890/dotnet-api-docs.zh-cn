<Type Name="Predicate&lt;T&gt;" FullName="System.Predicate&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4d5c7551e524b5bca53c8809fe4a5d86b71bc330" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate bool Predicate&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Predicate`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Predicate`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Predicate(Of In T)(obj As T) As Boolean " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate bool Predicate(T obj);" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Boolean</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="54b4e-101">要比较的对象的类型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="54b4e-101">The type of the object to compare.</span>
      </span>
    </typeparam>
    <param name="obj">
      <span data-ttu-id="54b4e-102">要按照由此委托表示的方法中定义的条件进行比较的对象。</span>
      <span class="sxs-lookup">
        <span data-stu-id="54b4e-102">The object to compare against the criteria defined within the method represented by this delegate.</span>
      </span>
    </param>
    <summary>
      <span data-ttu-id="54b4e-103">表示一种方法，该方法定义一组条件并确定指定对象是否符合这些条件。</span>
      <span class="sxs-lookup">
        <span data-stu-id="54b4e-103">Represents the method that defines a set of criteria and determines whether the specified object meets those criteria.</span>
      </span>
    </summary>
    <returns>
      <span data-ttu-id="54b4e-104">如果 <paramref name="obj" /> 符合由此委托表示的方法中定义的条件，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
      <span class="sxs-lookup">
        <span data-stu-id="54b4e-104">
          <see langword="true" /> if <paramref name="obj" /> meets the criteria defined within the method represented by this delegate; otherwise, <see langword="false" />.</span>
      </span>
    </returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="54b4e-105">通过多种方法来使用此委托<xref:System.Array>和<xref:System.Collections.Generic.List%601>类来搜索集合中的元素。</span><span class="sxs-lookup"><span data-stu-id="54b4e-105">This delegate is used by several methods of the <xref:System.Array> and <xref:System.Collections.Generic.List%601> classes to search for elements in the collection.</span></span>  
  
 <span data-ttu-id="54b4e-106">通常情况下，<xref:System.Predicate%601>委托表示的 lambda 表达式。</span><span class="sxs-lookup"><span data-stu-id="54b4e-106">Typically, the <xref:System.Predicate%601> delegate is represented by a lambda expression.</span></span> <span data-ttu-id="54b4e-107">因为本地指定了作用域的变量可供 lambda 表达式，很容易地测试确切地说不在编译时已知的条件。</span><span class="sxs-lookup"><span data-stu-id="54b4e-107">Because locally scoped variables are available to the lambda expression, it is easy to test for a condition that is not precisely known at compile time.</span></span> <span data-ttu-id="54b4e-108">这在以下示例中，它定义模拟`HockeyTeam`包含有关的国家/地区 Hockey 联赛团队，并在其中建立的年份的信息的类。</span><span class="sxs-lookup"><span data-stu-id="54b4e-108">This is simulated in the following example, which defines a `HockeyTeam` class that contains information about a National Hockey League team and the year in which it was founded.</span></span> <span data-ttu-id="54b4e-109">该示例定义的整数值，表示年中，数组和随机分配到数组中的一个元素`foundedBeforeYear`，这是一个变量，本地作用域的示例为`Main`方法。</span><span class="sxs-lookup"><span data-stu-id="54b4e-109">The example defines an array of integer values that represent years, and randomly assigns one element of the array to `foundedBeforeYear`, which is a variable that is locally scoped to the example's `Main` method.</span></span> <span data-ttu-id="54b4e-110">本地指定了作用域的变量可为 lambda 表达式，因为 lambda 表达式传递给<xref:System.Collections.Generic.List%601.FindAll%2A?displayProperty=nameWithType>方法是能够返回`HockeyTeam`成立指定日期或之前该年度每个团队的对象。</span><span class="sxs-lookup"><span data-stu-id="54b4e-110">Because locally scoped variables are available to a lambda expression, the lambda expression passed to the <xref:System.Collections.Generic.List%601.FindAll%2A?displayProperty=nameWithType> method is able to return a `HockeyTeam` object for each team founded on or before that year.</span></span>  
  
 [!code-csharp[System.Predicate\`1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicate1.cs#3)]
 [!code-vb[System.Predicate\`1#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicate1.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="54b4e-111">下面的代码示例使用<xref:System.Predicate%601>委托以及<xref:System.Array.Find%2A?displayProperty=nameWithType>方法搜索的数组<xref:System.Drawing.Point>结构。</span><span class="sxs-lookup"><span data-stu-id="54b4e-111">The following code example uses a <xref:System.Predicate%601> delegate with the <xref:System.Array.Find%2A?displayProperty=nameWithType> method to search an array of <xref:System.Drawing.Point> structures.</span></span> <span data-ttu-id="54b4e-112">此示例显式定义<xref:System.Predicate%601>委托名为`predicate`并将其分配一个名为方法`FindPoints`返回`true`如果的产品<xref:System.Drawing.Point.X%2A?displayProperty=nameWithType>和<xref:System.Drawing.Point.Y%2A?displayProperty=nameWithType>字段大于 100000。</span><span class="sxs-lookup"><span data-stu-id="54b4e-112">The example explicitly defines a <xref:System.Predicate%601> delegate named `predicate` and assigns it a method named `FindPoints` that returns `true` if the product of the <xref:System.Drawing.Point.X%2A?displayProperty=nameWithType> and <xref:System.Drawing.Point.Y%2A?displayProperty=nameWithType> fields is greater than 100,000.</span></span> <span data-ttu-id="54b4e-113">请注意，它是通常使用 lambda 表达式而不是显式定义类型的委托<xref:System.Predicate%601>，如第二个示例所示。</span><span class="sxs-lookup"><span data-stu-id="54b4e-113">Note that it is customary to use a lambda expression rather than to explicitly define a delegate of type <xref:System.Predicate%601>, as the second example illustrates.</span></span>  
  
 [!code-csharp[System.Predicate\`1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicateex2.cs#4)]
 [!code-vb[System.Predicate\`1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicateex2.vb#4)]  
  
 <span data-ttu-id="54b4e-114">下面的示例是前面的示例相同，但它使用 lambda 表达式来表示<xref:System.Predicate%601>委托。</span><span class="sxs-lookup"><span data-stu-id="54b4e-114">The following example is identical to the previous example, except that it uses a lambda expression to represent the <xref:System.Predicate%601> delegate.</span></span>  <span data-ttu-id="54b4e-115">每个元素`points`数组传递到 lambda 表达式中，直到表达式查找符合搜索条件的元素。</span><span class="sxs-lookup"><span data-stu-id="54b4e-115">Each element of the `points` array is passed to the lambda expression until the expression finds an element that meets the search criteria.</span></span> <span data-ttu-id="54b4e-116">在此示例中，lambda 表达式返回`true`是否大于 100,000 的 X 和 Y 字段的产品。</span><span class="sxs-lookup"><span data-stu-id="54b4e-116">In this case, the lambda expression returns `true` if the product of the X and Y fields is greater than 100,000.</span></span>  
  
 [!code-csharp[System.Predicate\`1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicateex1.cs#2)]
 [!code-vb[System.Predicate\`1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicateex1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
  </Docs>
</Type>