<Type Name="Predicate&lt;T&gt;" FullName="System.Predicate&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="aec57cef3fed8cea256c30b4abcc1cef689abe97" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="37727085" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate bool Predicate&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Predicate`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Predicate`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Predicate(Of In T)(obj As T) As Boolean " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate bool Predicate(T obj);" />
  <TypeSignature Language="F#" Value="type Predicate&lt;'T&gt; = delegate of 'T -&gt; bool" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Boolean</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">要比较的对象的类型。</typeparam>
    <param name="obj">要按照由此委托表示的方法中定义的条件进行比较的对象。</param>
    <summary>表示一种方法，该方法定义一组条件并确定指定对象是否符合这些条件。</summary>
    <returns>如果 <paramref name="obj" /> 符合由此委托表示的方法中定义的条件，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过多种方法来使用此委托<xref:System.Array>和<xref:System.Collections.Generic.List%601>类来搜索集合中的元素。  
  
 通常情况下，<xref:System.Predicate%601>委托表示的 lambda 表达式。 由于本地作用域内的变量适用于 lambda 表达式，因此很容易地测试准确地说不在编译时已知的条件。 这在以下示例中，它定义模拟`HockeyTeam`类，其中包含有关美国国家 Hockey 联盟团队并在其中它成立的年份的信息。 该示例定义了一个数组的整数值表示年中，并随机分配到的数组中的一个元素`foundedBeforeYear`，这是一个变量，本地作用域为该示例的`Main`方法。 由于本地作用域内的变量适用于 lambda 表达式，因此 lambda 表达式传递给<xref:System.Collections.Generic.List%601.FindAll%2A?displayProperty=nameWithType>方法是无法返回`HockeyTeam`成立了当天或之前该年度的每个团队的对象。  
  
 [!code-csharp[System.Predicate\`1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicate1.cs#3)]
 [!code-vb[System.Predicate\`1#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicate1.vb#3)]  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Predicate%601>委托，其<xref:System.Array.Find%2A?displayProperty=nameWithType>方法搜索的数组<xref:System.Drawing.Point>结构。 该示例定义了显式<xref:System.Predicate%601>委托名为`predicate`并将其分配一个名为方法`FindPoints`返回`true`如果的产品<xref:System.Drawing.Point.X%2A?displayProperty=nameWithType>和<xref:System.Drawing.Point.Y%2A?displayProperty=nameWithType>字段大于 100000。 请注意，它是使用 lambda 表达式而不是显式定义类型的委托惯用<xref:System.Predicate%601>，如第二个示例所示。  
  
 [!code-csharp[System.Predicate\`1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicateex2.cs#4)]
 [!code-vb[System.Predicate\`1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicateex2.vb#4)]  
  
 下面的示例等同于上一示例中，只不过它使用 lambda 表达式来表示<xref:System.Predicate%601>委托。  每个元素`points`数组传递给 lambda 表达式，该表达式查找符合搜索条件的元素之前。 在这种情况下，lambda 表达式返回`true`是否大于 100,000 的 X 和 Y 字段。  
  
 [!code-csharp[System.Predicate\`1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicateex1.cs#2)]
 [!code-vb[System.Predicate\`1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicateex1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
  </Docs>
</Type>