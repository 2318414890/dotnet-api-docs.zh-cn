<Type Name="Char" FullName="System.Char">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a5ca0b4b7eadc37ed97349de8c392420c6648619" /><Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/27/2018" /><Meta Name="ms.locfileid" Value="52369672" /></Metadata><TypeSignature Language="C#" Value="public struct Char : IComparable, IComparable&lt;char&gt;, IConvertible, IEquatable&lt;char&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit char extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;char&gt;, class System.IConvertible, class System.IEquatable`1&lt;char&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Char" />
  <TypeSignature Language="VB.NET" Value="Public Structure Char&#xA;Implements IComparable, IComparable(Of Char), IConvertible, IEquatable(Of Char)" />
  <TypeSignature Language="C++ CLI" Value="public value class Char : IComparable, IComparable&lt;char&gt;, IConvertible, IEquatable&lt;char&gt;" />
  <TypeSignature Language="F#" Value="type char = struct&#xA;    interface IConvertible" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Char&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Char&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="9af29-101">将字符表示为 UTF-16 代码单位。</span><span class="sxs-lookup"><span data-stu-id="9af29-101">Represents a character as a UTF-16 code unit.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-102">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]使用<xref:System.Char>结构来表示 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-102">The [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] uses the <xref:System.Char> structure to represent a Unicode character.</span></span> <span data-ttu-id="9af29-103">Unicode 标准用名为一个码位的唯一 21 位标量数字标识的每个 Unicode 字符，并定义指定如何将码位编码为一个或多个 16 位值的一个序列的 UTF 16 编码形式。</span><span class="sxs-lookup"><span data-stu-id="9af29-103">The Unicode Standard identifies each Unicode character with a unique 21-bit scalar number called a code point, and defines the UTF-16 encoding form that specifies how a code point is encoded into a sequence of one or more 16-bit values.</span></span> <span data-ttu-id="9af29-104">每个 16 位值范围是从十六进制 0x0000 到 0xFFFF 并存储在<xref:System.Char>结构。</span><span class="sxs-lookup"><span data-stu-id="9af29-104">Each 16-bit value ranges from hexadecimal 0x0000 through 0xFFFF and is stored in a <xref:System.Char> structure.</span></span>  <span data-ttu-id="9af29-105">值<xref:System.Char>对象是其 16 位数字 （序号） 值。</span><span class="sxs-lookup"><span data-stu-id="9af29-105">The value of a <xref:System.Char> object is its 16-bit numeric (ordinal) value.</span></span>  
  
 <span data-ttu-id="9af29-106">以下各部分分别之间的关系<xref:System.Char>对象和一个字符，并讨论一些常见的任务执行<xref:System.Char>实例。</span><span class="sxs-lookup"><span data-stu-id="9af29-106">The following sections examine the relationship between a <xref:System.Char> object and a character and discuss some common tasks performed with <xref:System.Char> instances.</span></span>  
  
 <span data-ttu-id="9af29-107">[Char 对象、 Unicode 字符和字符串](#Relationship) </span><span class="sxs-lookup"><span data-stu-id="9af29-107">[Char objects, Unicode characters, and strings](#Relationship) </span></span>  
 <span data-ttu-id="9af29-108">[字符和字符类别](#Categories) </span><span class="sxs-lookup"><span data-stu-id="9af29-108">[Characters and character categories](#Categories) </span></span>  
 <span data-ttu-id="9af29-109">[字符和文本元素](#Elements) </span><span class="sxs-lookup"><span data-stu-id="9af29-109">[Characters and text elements](#Elements) </span></span>  
 <span data-ttu-id="9af29-110">[常见的操作](#Operations) </span><span class="sxs-lookup"><span data-stu-id="9af29-110">[Common operations](#Operations) </span></span>  
 [<span data-ttu-id="9af29-111">Char 值和互操作</span><span class="sxs-lookup"><span data-stu-id="9af29-111">Char values and interop</span></span>](#Interop)  
  
<a name="Relationship"></a>   
## <a name="char-objects-unicode-characters-and-strings"></a><span data-ttu-id="9af29-112">Char 对象、 Unicode 字符和字符串</span><span class="sxs-lookup"><span data-stu-id="9af29-112">Char objects, Unicode characters, and strings</span></span>  
 <span data-ttu-id="9af29-113">一个<xref:System.String>对象是的有序集合<xref:System.Char>表示的文本字符串的结构。</span><span class="sxs-lookup"><span data-stu-id="9af29-113">A <xref:System.String> object is a sequential collection of <xref:System.Char> structures that represents a string of text.</span></span> <span data-ttu-id="9af29-114">大多数的 Unicode 字符可表示由单个<xref:System.Char>对象由多个表示代理项对和/或组合字符序列，编码为基字符的字符但<xref:System.Char>对象。</span><span class="sxs-lookup"><span data-stu-id="9af29-114">Most Unicode characters can be represented by a single <xref:System.Char> object, but a character that is encoded as a base character, surrogate pair, and/or combining character sequence is represented by multiple <xref:System.Char> objects.</span></span> <span data-ttu-id="9af29-115">出于此原因，<xref:System.Char>结构中<xref:System.String>对象并不一定等同于单个 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-115">For this reason, a <xref:System.Char> structure in a <xref:System.String> object is not necessarily equivalent to a single Unicode character.</span></span>  
  
 <span data-ttu-id="9af29-116">多个 16 位代码单元用于表示单个 Unicode 字符，在以下情况下：</span><span class="sxs-lookup"><span data-stu-id="9af29-116">Multiple 16-bit code units are used to represent single Unicode characters in the following cases:</span></span>  
  
-   <span data-ttu-id="9af29-117">标志符号，可能包含单个字符或个基字符后跟一个或多个组合字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-117">Glyphs, which may consist of a single character or of a base character followed by one or more combining characters.</span></span> <span data-ttu-id="9af29-118">例如，由一个表示字符 ä<xref:System.Char>对象单位是 U + 0061 跟一个其代码<xref:System.Char>对象，其代码单元为 U + 0308年。</span><span class="sxs-lookup"><span data-stu-id="9af29-118">For example, the character ä is represented by a <xref:System.Char> object whose code unit is U+0061 followed by a <xref:System.Char> object whose code unit is U+0308.</span></span> <span data-ttu-id="9af29-119">(还可通过一个单一定义字符？ ¤<xref:System.Char>对象，它具有一个代码单元的 U + 00E4。)下面的示例说明了字符？ ¤ 包含两个<xref:System.Char>对象。</span><span class="sxs-lookup"><span data-stu-id="9af29-119">(The character ä can also be defined by a single <xref:System.Char> object that has a code unit of U+00E4.) The following example illustrates that the character ä consists of two <xref:System.Char> objects.</span></span>  
  
     [!code-csharp[System.Char.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/grapheme1.cs#1)]
     [!code-vb[System.Char.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/grapheme1.vb#1)]  
  
-   <span data-ttu-id="9af29-120">Unicode 基本多语言平面 (BMP) 外的字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-120">Characters outside the Unicode Basic Multilingual Plane (BMP).</span></span> <span data-ttu-id="9af29-121">Unicode 支持 BMP、 表示平面 0 除了十六个平面。</span><span class="sxs-lookup"><span data-stu-id="9af29-121">Unicode supports sixteen planes in addition to the BMP, which represents plane 0.</span></span> <span data-ttu-id="9af29-122">Unicode 码位表示 UTF-32 中包括平面的 21 位值。</span><span class="sxs-lookup"><span data-stu-id="9af29-122">A Unicode code point is represented in UTF-32 by a 21-bit value that includes the plane.</span></span> <span data-ttu-id="9af29-123">例如，U + 1D160 表示音乐符号第八个注释字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-123">For example, U+1D160 represents the MUSICAL SYMBOL EIGHTH NOTE character.</span></span> <span data-ttu-id="9af29-124">因为 utf-16 编码仅 16 位，由以 utf-16 代理项对表示位于 BMP 之外的字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-124">Because UTF-16 encoding has only 16 bits, characters outside the BMP are represented by surrogate pairs in UTF-16.</span></span> <span data-ttu-id="9af29-125">下面的示例说明了 U + 1D160，音乐符号第八个注释字符的 UTF-32 等效项是 U + D834 U + DD60。</span><span class="sxs-lookup"><span data-stu-id="9af29-125">The following example illustrates that the UTF-32 equivalent of U+1D160, the MUSICAL SYMBOL EIGHTH NOTE character, is U+D834 U+DD60.</span></span> <span data-ttu-id="9af29-126">U + D834 是高代理项;从 u+d800 到 U + DBFF 的高代理项范围。</span><span class="sxs-lookup"><span data-stu-id="9af29-126">U+D834 is the high surrogate; high surrogates range from U+D800 through U+DBFF.</span></span> <span data-ttu-id="9af29-127">U + DD60 是低代理项;低代理项是从 U+DC00 到 U + DFFF 的范围。</span><span class="sxs-lookup"><span data-stu-id="9af29-127">U+DD60 is the low surrogate; low surrogates range from U+DC00 through U+DFFF.</span></span>  
  
     [!code-csharp[System.Char.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/surrogate1.cs#2)]
     [!code-vb[System.Char.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/surrogate1.vb#2)]  
  
<a name="Categories"></a>   
## <a name="characters-and-character-categories"></a><span data-ttu-id="9af29-128">字符和字符类别</span><span class="sxs-lookup"><span data-stu-id="9af29-128">Characters and character categories</span></span>  
 <span data-ttu-id="9af29-129">每个 Unicode 字符或有效的代理项对属于 Unicode 类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-129">Each Unicode character or valid surrogate pair belongs to a Unicode category.</span></span> <span data-ttu-id="9af29-130">在.NET Framework 中，Unicode 类别的成员由表示<xref:System.Globalization.UnicodeCategory>枚举和包括的值如下所述<xref:System.Globalization.UnicodeCategory.CurrencySymbol?displayProperty=nameWithType>， <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType>，和<xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType>，例如。</span><span class="sxs-lookup"><span data-stu-id="9af29-130">In the .NET Framework, Unicode categories are represented by members of the <xref:System.Globalization.UnicodeCategory> enumeration and include values such as <xref:System.Globalization.UnicodeCategory.CurrencySymbol?displayProperty=nameWithType>, <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType>, and <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType>, for example.</span></span>  
  
 <span data-ttu-id="9af29-131">若要确定一个字符的 Unicode 类别，请调用<xref:System.Char.GetUnicodeCategory%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9af29-131">To determine the Unicode category of a character, you call the <xref:System.Char.GetUnicodeCategory%2A> method.</span></span> <span data-ttu-id="9af29-132">例如，下面的示例调用<xref:System.Char.GetUnicodeCategory%2A>字符串中显示的每个字符的 Unicode 类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-132">For example, the following example calls the <xref:System.Char.GetUnicodeCategory%2A> to display the Unicode category of each character in a string.</span></span>  
  
 [!code-csharp[System.Char.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/GetUnicodeCategory3.cs#6)]
 [!code-vb[System.Char.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/GetUnicodeCategory3.vb#6)]  
  
 <span data-ttu-id="9af29-133">在内部，对字符超出 ASCII 范围 (U + 0000 到 U + 00FF)，<xref:System.Char.GetUnicodeCategory%2A>方法取决于所报告的 Unicode 类别<xref:System.Globalization.CharUnicodeInfo>类。</span><span class="sxs-lookup"><span data-stu-id="9af29-133">Internally, for characters outside the ASCII range (U+0000 through U+00FF), the <xref:System.Char.GetUnicodeCategory%2A> method depends on Unicode categories reported by the <xref:System.Globalization.CharUnicodeInfo> class.</span></span> <span data-ttu-id="9af29-134">从开始[!INCLUDE[net_v462](~/includes/net-v462-md.md)]，Unicode 字符的分类基于[Unicode 标准、 版本 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/)。</span><span class="sxs-lookup"><span data-stu-id="9af29-134">Starting with the [!INCLUDE[net_v462](~/includes/net-v462-md.md)], Unicode characters are classified based on [The Unicode Standard, Version 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/).</span></span> <span data-ttu-id="9af29-135">在从.NET Framework 的版本[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]到[!INCLUDE[net_v461](~/includes/net-v461-md.md)]，它们的分类基于[Unicode 标准、 6.3.0 版](https://www.unicode.org/versions/Unicode6.3.0/)。</span><span class="sxs-lookup"><span data-stu-id="9af29-135">In versions of the .NET Framework from the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] to  the [!INCLUDE[net_v461](~/includes/net-v461-md.md)], they are classified based on [The Unicode Standard, Version 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/).</span></span>  
  
<a name="Elements"></a>   
## <a name="characters-and-text-elements"></a><span data-ttu-id="9af29-136">字符和文本元素</span><span class="sxs-lookup"><span data-stu-id="9af29-136">Characters and text elements</span></span>  
 <span data-ttu-id="9af29-137">因为可以由多个表示单个字符<xref:System.Char>对象，它并不总是有意义，以便使用个人<xref:System.Char>对象。</span><span class="sxs-lookup"><span data-stu-id="9af29-137">Because a single character can be represented by multiple <xref:System.Char> objects, it is not always meaningful to work with individual <xref:System.Char> objects.</span></span> <span data-ttu-id="9af29-138">例如，下面的示例将转换为 utf-16 编码代码单位表示爱琴海的数字为 0 到 9 的 Unicode 码位。</span><span class="sxs-lookup"><span data-stu-id="9af29-138">For instance, the following example converts the Unicode code points that represent the Aegean numbers zero through 9 to UTF-16 encoded code units.</span></span> <span data-ttu-id="9af29-139">因为错误地等同<xref:System.Char>对象包含的字符，它不正确地报告生成的字符串具有 20 个字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-139">Because it erroneously equates <xref:System.Char> objects with characters, it inaccurately reports that the resulting string has 20 characters.</span></span>  
  
 [!code-csharp[System.Char.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/textelements2.cs#3)]
 [!code-vb[System.Char.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/textelements2.vb#3)]  
  
 <span data-ttu-id="9af29-140">您可以执行以下操作来避免假设的<xref:System.Char>对象表示单个字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-140">You can do the following to avoid the assumption that a <xref:System.Char> object represents a single character.</span></span>  
  
-   <span data-ttu-id="9af29-141">您可以使用<xref:System.String>中而不是其各个字符来表示和分析语言内容处理整个对象。</span><span class="sxs-lookup"><span data-stu-id="9af29-141">You can work with a <xref:System.String> object in its entirety instead of working with its individual characters to represent and analyze linguistic content.</span></span>  
  
-   <span data-ttu-id="9af29-142">可以使用<xref:System.Globalization.StringInfo>类来处理文本元素而不是个人<xref:System.Char>对象。</span><span class="sxs-lookup"><span data-stu-id="9af29-142">You can use the <xref:System.Globalization.StringInfo> class to work with text elements instead of individual <xref:System.Char> objects.</span></span> <span data-ttu-id="9af29-143">下面的示例使用<xref:System.Globalization.StringInfo>对象中包含的爱琴的字符串的文本元素数目进行计数数字零到 9。</span><span class="sxs-lookup"><span data-stu-id="9af29-143">The following example uses the <xref:System.Globalization.StringInfo> object to count the number of text elements in a string that consists of the Aegean numbers zero through nine.</span></span> <span data-ttu-id="9af29-144">它将代理项对视为单个字符，因为它正确地报告该字符串包含 10 个字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-144">Because it considers a surrogate pair a single character, it correctly reports that the string contains ten characters.</span></span>  
  
     [!code-csharp[System.Char.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/textelements2a.cs#4)]
     [!code-vb[System.Char.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/textelements2a.vb#4)]  
  
-   <span data-ttu-id="9af29-145">如果字符串包含基本字符具有一个或多个组合字符，则可以调用<xref:System.String.Normalize%2A?displayProperty=nameWithType>方法将子字符串转换为单一的 utf-16 编码的代码单元。</span><span class="sxs-lookup"><span data-stu-id="9af29-145">If a string contains a base character that has one or more combining characters, you can call the <xref:System.String.Normalize%2A?displayProperty=nameWithType> method to convert the substring to a single UTF-16 encoded code unit.</span></span> <span data-ttu-id="9af29-146">下面的示例调用<xref:System.String.Normalize%2A?displayProperty=nameWithType>方法将基本字符 U + 0061 (拉丁文小写字母 A) 和组合字符 U + 0308 （组合以分音符） 转换为 U + 00E4 （拉丁文小写字母与分音符）。</span><span class="sxs-lookup"><span data-stu-id="9af29-146">The following example calls the <xref:System.String.Normalize%2A?displayProperty=nameWithType> method to convert the base character U+0061 (LATIN SMALL LETTER A) and combining character U+0308 (COMBINING DIAERESIS) to U+00E4 (LATIN SMALL LETTER A WITH DIAERESIS).</span></span>  
  
     [!code-csharp[System.Char.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.class/cs/normalized.cs#5)]
     [!code-vb[System.Char.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.class/vb/normalized.vb#5)]  
  
<a name="Operations"></a>   
## <a name="common-operations"></a><span data-ttu-id="9af29-147">常见的操作</span><span class="sxs-lookup"><span data-stu-id="9af29-147">Common operations</span></span>  
 <span data-ttu-id="9af29-148"><xref:System.Char>结构提供方法来比较<xref:System.Char>对象，将当前值转换<xref:System.Char>对象复制到另一种类型的对象，并确定的 Unicode 类别<xref:System.Char>对象：</span><span class="sxs-lookup"><span data-stu-id="9af29-148">The <xref:System.Char> structure provides methods to compare <xref:System.Char> objects, convert the value of the current <xref:System.Char> object to an object of another type, and determine the Unicode category of a <xref:System.Char> object:</span></span>  
  
|<span data-ttu-id="9af29-149">任务</span><span class="sxs-lookup"><span data-stu-id="9af29-149">To do this</span></span>|<span data-ttu-id="9af29-150">使用这些`System.Char`方法</span><span class="sxs-lookup"><span data-stu-id="9af29-150">Use these `System.Char` methods</span></span>|  
|----------------|-------------------------------------|  
|<span data-ttu-id="9af29-151">比较<xref:System.Char>对象</span><span class="sxs-lookup"><span data-stu-id="9af29-151">Compare <xref:System.Char> objects</span></span>|<span data-ttu-id="9af29-152"><xref:System.Char.CompareTo%2A> 和 <xref:System.Char.Equals%2A></span><span class="sxs-lookup"><span data-stu-id="9af29-152"><xref:System.Char.CompareTo%2A> and <xref:System.Char.Equals%2A></span></span>|  
|<span data-ttu-id="9af29-153">将代码点转换为字符串</span><span class="sxs-lookup"><span data-stu-id="9af29-153">Convert a code point to a string</span></span>|<xref:System.Char.ConvertFromUtf32%2A>|  
|<span data-ttu-id="9af29-154">将转换<xref:System.Char>对象或代理项对的<xref:System.Char>码位的对象</span><span class="sxs-lookup"><span data-stu-id="9af29-154">Convert a <xref:System.Char> object or a surrogate pair of <xref:System.Char> objects to a code point</span></span>|<span data-ttu-id="9af29-155">单个字符： <xref:System.Convert.ToInt32%28System.Char%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="9af29-155">For a single character: <xref:System.Convert.ToInt32%28System.Char%29?displayProperty=nameWithType></span></span><br /><br /> <span data-ttu-id="9af29-156">对于代理项对或字符串中的字符： <xref:System.Char.ConvertToUtf32%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="9af29-156">For a surrogate pair or a character in a string: <xref:System.Char.ConvertToUtf32%2A?displayProperty=nameWithType></span></span>|  
|<span data-ttu-id="9af29-157">获取一个字符的 Unicode 类别</span><span class="sxs-lookup"><span data-stu-id="9af29-157">Get the Unicode category of a character</span></span>|<xref:System.Char.GetUnicodeCategory%2A>|  
|<span data-ttu-id="9af29-158">确定字符是否为数字、 字母、 标点符号等特定 Unicode 类别中，控制字符，等等</span><span class="sxs-lookup"><span data-stu-id="9af29-158">Determine whether a character is in a particular Unicode category such as digit, letter, punctuation, control character, and so on</span></span>|<span data-ttu-id="9af29-159"><xref:System.Char.IsControl%2A><xref:System.Char.IsDigit%2A>， <xref:System.Char.IsHighSurrogate%2A>， <xref:System.Char.IsLetter%2A>， <xref:System.Char.IsLetterOrDigit%2A>， <xref:System.Char.IsLower%2A>， <xref:System.Char.IsLowSurrogate%2A>， <xref:System.Char.IsNumber%2A>， <xref:System.Char.IsPunctuation%2A>， <xref:System.Char.IsSeparator%2A>， <xref:System.Char.IsSurrogate%2A>， <xref:System.Char.IsSurrogatePair%2A>， <xref:System.Char.IsSymbol%2A>， <xref:System.Char.IsUpper%2A>，和 <xref:System.Char.IsWhiteSpace%2A></span><span class="sxs-lookup"><span data-stu-id="9af29-159"><xref:System.Char.IsControl%2A>, <xref:System.Char.IsDigit%2A>, <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLetter%2A>, <xref:System.Char.IsLetterOrDigit%2A>, <xref:System.Char.IsLower%2A>, <xref:System.Char.IsLowSurrogate%2A>, <xref:System.Char.IsNumber%2A>, <xref:System.Char.IsPunctuation%2A>, <xref:System.Char.IsSeparator%2A>, <xref:System.Char.IsSurrogate%2A>, <xref:System.Char.IsSurrogatePair%2A>, <xref:System.Char.IsSymbol%2A>, <xref:System.Char.IsUpper%2A>, and <xref:System.Char.IsWhiteSpace%2A></span></span>|  
|<span data-ttu-id="9af29-160">将转换<xref:System.Char>表示的数字为数值类型的对象</span><span class="sxs-lookup"><span data-stu-id="9af29-160">Convert a <xref:System.Char> object that represents a number to a numeric value type</span></span>|<xref:System.Char.GetNumericValue%2A>|  
|<span data-ttu-id="9af29-161">转换到字符串中的字符<xref:System.Char>对象</span><span class="sxs-lookup"><span data-stu-id="9af29-161">Convert a character in a string into a <xref:System.Char> object</span></span>|<span data-ttu-id="9af29-162"><xref:System.Char.Parse%2A> 和 <xref:System.Char.TryParse%2A></span><span class="sxs-lookup"><span data-stu-id="9af29-162"><xref:System.Char.Parse%2A> and <xref:System.Char.TryParse%2A></span></span>|  
|<span data-ttu-id="9af29-163">将转换<xref:System.Char>对象传递给<xref:System.String>对象</span><span class="sxs-lookup"><span data-stu-id="9af29-163">Convert a <xref:System.Char> object to a <xref:System.String> object</span></span>|<xref:System.Char.ToString%2A>|  
|<span data-ttu-id="9af29-164">更改的大小写<xref:System.Char>对象</span><span class="sxs-lookup"><span data-stu-id="9af29-164">Change the case of a <xref:System.Char> object</span></span>|<span data-ttu-id="9af29-165"><xref:System.Char.ToLower%2A>、<xref:System.Char.ToLowerInvariant%2A>、<xref:System.Char.ToUpper%2A> 和 <xref:System.Char.ToUpperInvariant%2A></span><span class="sxs-lookup"><span data-stu-id="9af29-165"><xref:System.Char.ToLower%2A>, <xref:System.Char.ToLowerInvariant%2A>, <xref:System.Char.ToUpper%2A>, and <xref:System.Char.ToUpperInvariant%2A></span></span>|  
  
<a name="Interop"></a>   
## <a name="char-values-and-interop"></a><span data-ttu-id="9af29-166">Char 值和互操作</span><span class="sxs-lookup"><span data-stu-id="9af29-166">Char values and interop</span></span>  
<span data-ttu-id="9af29-167">当托管<xref:System.Char>类型，表示为一个 Unicode utf-16 编码的代码单元，传递到非托管代码，则默认情况下设置为 ANSI 字符转换为互操作封送处理程序。</span><span class="sxs-lookup"><span data-stu-id="9af29-167">When a managed <xref:System.Char> type, which is represented as a Unicode UTF-16 encoded code unit, is passed to unmanaged code, the interop marshaler converts the character set to ANSI by default.</span></span> <span data-ttu-id="9af29-168">您可以将应用<xref:System.Runtime.InteropServices.DllImportAttribute>属性设置为平台调用声明并<xref:System.Runtime.InteropServices.StructLayoutAttribute>属性为 COM 互操作声明，以控制哪些字符集封送<xref:System.Char>类型使用。</span><span class="sxs-lookup"><span data-stu-id="9af29-168">You can apply the <xref:System.Runtime.InteropServices.DllImportAttribute> attribute to platform invoke declarations and the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute to a COM interop declaration to control which character set a marshaled <xref:System.Char> type uses.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-169">下面的代码示例演示了一些中的方法<xref:System.Char>。</span><span class="sxs-lookup"><span data-stu-id="9af29-169">The following code example demonstrates some of the methods in <xref:System.Char>.</span></span>  
  
 [!code-cpp[System.Char &#91;Type Level&#93;#23](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char [Type Level]/CPP/charstructure.cpp#23)]
 [!code-csharp[System.Char &#91;Type Level&#93;#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char [Type Level]/CS/charstructure.cs#23)]
 [!code-vb[System.Char &#91;Type Level&#93;#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char [Type Level]/VB/charstructure.vb#23)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="9af29-170">此类型所有成员都是线程安全。</span><span class="sxs-lookup"><span data-stu-id="9af29-170">All members of this type are thread safe.</span></span> <span data-ttu-id="9af29-171">看起来要修改实例状态的成员实际上返回使用新值进行初始化的新实例。</span><span class="sxs-lookup"><span data-stu-id="9af29-171">Members that appear to modify instance state actually return a new instance initialized with the new value.</span></span> <span data-ttu-id="9af29-172">作为使用任何其他类型，读取和写入对共享变量包含此类型的实例必须受到使用锁来确保线程安全性。</span><span class="sxs-lookup"><span data-stu-id="9af29-172">As with any other type, reading and writing to a shared variable that contains an instance of this type must be protected by a lock to guarantee thread safety.</span></span></threadsafe>
    <altmember cref="T:System.IComparable" />
    <altmember cref="T:System.IConvertible" />
    <altmember cref="T:System.String" />
  </Docs>
  <Members>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9af29-173">将此实例与指定的对象或值类型进行比较，并指示此实例在排序顺序中是位于指定的对象或值类型之前、之后还是与其出现在同一位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-173">Compares this instance to a specified object or value type, and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified object or value type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.CompareTo(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(char value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : char -&gt; int&#xA;override this.CompareTo : char -&gt; int" Usage="char.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable`1.CompareTo(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="9af29-174">要比较的 <see cref="T:System.Char" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="9af29-174">A <see cref="T:System.Char" /> object to compare.</span></span></param>
        <summary><span data-ttu-id="9af29-175">将此实例与指定的 <see cref="T:System.Char" /> 对象进行比较，并指示此实例在排序顺序中是位于指定的 <see cref="T:System.Char" /> 对象之前、之后还是与其出现在同一位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-175">Compares this instance to a specified <see cref="T:System.Char" /> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Char" /> object.</span></span></summary>
        <returns><span data-ttu-id="9af29-176">一个有符号数字，指示此实例在排序顺序中相对于 <paramref name="value" /> 参数的位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-176">A signed number indicating the position of this instance in the sort order in relation to the <paramref name="value" /> parameter.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="9af29-177">返回值</span><span class="sxs-lookup"><span data-stu-id="9af29-177">Return Value</span></span> 
 </term><description> <span data-ttu-id="9af29-178">描述</span><span class="sxs-lookup"><span data-stu-id="9af29-178">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="9af29-179">小于零</span><span class="sxs-lookup"><span data-stu-id="9af29-179">Less than zero</span></span> 
 </term><description> <span data-ttu-id="9af29-180">此实例位于 <paramref name="value" /> 之前。</span><span class="sxs-lookup"><span data-stu-id="9af29-180">This instance precedes <paramref name="value" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="9af29-181">零</span><span class="sxs-lookup"><span data-stu-id="9af29-181">Zero</span></span> 
 </term><description> <span data-ttu-id="9af29-182">此实例在排序顺序中的位置与 <paramref name="value" /> 相同。</span><span class="sxs-lookup"><span data-stu-id="9af29-182">This instance has the same position in the sort order as <paramref name="value" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="9af29-183">大于零</span><span class="sxs-lookup"><span data-stu-id="9af29-183">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="9af29-184">此实例位于 <paramref name="value" /> 之后。</span><span class="sxs-lookup"><span data-stu-id="9af29-184">This instance follows <paramref name="value" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-185">此方法实现<xref:System.IComparable%601?displayProperty=nameWithType>接口，并且执行略微优于<xref:System.Char.CompareTo%2A?displayProperty=nameWithType>方法因为它不具有要转换`value`参数的对象。</span><span class="sxs-lookup"><span data-stu-id="9af29-185">This method implements the <xref:System.IComparable%601?displayProperty=nameWithType> interface and performs slightly better than the <xref:System.Char.CompareTo%2A?displayProperty=nameWithType> method because it does not have to convert the `value` parameter to an object.</span></span>  
  
 <span data-ttu-id="9af29-186">此方法执行的比较基于此实例的编码值和`value`，不是它们按字典编辑顺序的特征。</span><span class="sxs-lookup"><span data-stu-id="9af29-186">The comparison performed by this method is based on the encoded values of this instance and `value`, not their lexicographical characteristics.</span></span>  
  
 <span data-ttu-id="9af29-187">如果<xref:System.Char.CompareTo%2A>方法参数类型具有较少的位 （是更窄） 实例类型中，某些编程语言执行参数的值转换具有更多位数的值的隐式扩大转换。</span><span class="sxs-lookup"><span data-stu-id="9af29-187">If the <xref:System.Char.CompareTo%2A> method parameter type has fewer bits (is narrower) than the instance type, some programming languages perform an implicit widening conversion that transforms the value of the parameter into a value with more bits.</span></span>  
  
 <span data-ttu-id="9af29-188">例如，假设实例类型是<xref:System.Int32>且参数类型为<xref:System.Byte>。</span><span class="sxs-lookup"><span data-stu-id="9af29-188">For example, suppose the instance type is <xref:System.Int32> and the parameter type is <xref:System.Byte>.</span></span> <span data-ttu-id="9af29-189">Microsoft C# 编译器将生成表示形式的参数值的说明<xref:System.Int32>对象，然后生成<xref:System.Int32.CompareTo%2A?displayProperty=nameWithType>比较的值的方法<xref:System.Int32>实例和<xref:System.Int32>参数表示形式。</span><span class="sxs-lookup"><span data-stu-id="9af29-189">The Microsoft C# compiler generates instructions to represent the value of the parameter as an <xref:System.Int32> object, then generates a <xref:System.Int32.CompareTo%2A?displayProperty=nameWithType> method that compares the values of the <xref:System.Int32> instance and the <xref:System.Int32> parameter representation.</span></span>  
  
 <span data-ttu-id="9af29-190">通常情况下，数值类型执行隐式扩大转换。</span><span class="sxs-lookup"><span data-stu-id="9af29-190">Typically, implicit widening conversions are performed on numeric types.</span></span> <span data-ttu-id="9af29-191">请查阅您的编程语言的文档以确定其编译器是否执行扩大转换。</span><span class="sxs-lookup"><span data-stu-id="9af29-191">Consult your programming language's documentation to determine if its compiler performs widening conversions.</span></span> <span data-ttu-id="9af29-192">如果实例和参数类型不匹配和没有合适的转换不可用，编译器将生成说明框参数并调用<xref:System.Char.CompareTo%2A>重载采用<xref:System.Object>参数。</span><span class="sxs-lookup"><span data-stu-id="9af29-192">If the instance and parameter types mismatch and a suitable conversion is not available, the compiler generates instructions to box the parameter and invoke the <xref:System.Char.CompareTo%2A> overload that takes an <xref:System.Object> parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-193">下面的代码示例演示了泛型和非泛型版本的`CompareTo`多个值和引用类型的方法。</span><span class="sxs-lookup"><span data-stu-id="9af29-193">The following code example demonstrates generic and non-generic versions of the `CompareTo` method for several value and reference types.</span></span>  
  
 [!code-cpp[T.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]
 [!code-csharp[T.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]
 [!code-vb[T.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IComparable" />
        <altmember cref="M:System.Char.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int CompareTo(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CompareTo : obj -&gt; int&#xA;override this.CompareTo : obj -&gt; int" Usage="char.CompareTo value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="9af29-194">要与此实例比较的对象，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-194">An object to compare this instance to, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="9af29-195">将此实例与指定的对象进行比较，并指示此实例在排序顺序中是位于指定的 <see cref="T:System.Object" /> 之前、之后还是与其出现在同一位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-195">Compares this instance to a specified object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <see cref="T:System.Object" />.</span></span></summary>
        <returns><span data-ttu-id="9af29-196">一个有符号数字，指示此实例在排序顺序中相对于 <paramref name="value" /> 参数的位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-196">A signed number indicating the position of this instance in the sort order in relation to the <paramref name="value" /> parameter.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="9af29-197">返回值</span><span class="sxs-lookup"><span data-stu-id="9af29-197">Return Value</span></span> 
 </term><description> <span data-ttu-id="9af29-198">描述</span><span class="sxs-lookup"><span data-stu-id="9af29-198">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="9af29-199">小于零</span><span class="sxs-lookup"><span data-stu-id="9af29-199">Less than zero</span></span> 
 </term><description> <span data-ttu-id="9af29-200">此实例位于 <paramref name="value" /> 之前。</span><span class="sxs-lookup"><span data-stu-id="9af29-200">This instance precedes <paramref name="value" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="9af29-201">零</span><span class="sxs-lookup"><span data-stu-id="9af29-201">Zero</span></span> 
 </term><description> <span data-ttu-id="9af29-202">此实例在排序顺序中的位置与 <paramref name="value" /> 相同。</span><span class="sxs-lookup"><span data-stu-id="9af29-202">This instance has the same position in the sort order as <paramref name="value" />.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="9af29-203">大于零</span><span class="sxs-lookup"><span data-stu-id="9af29-203">Greater than zero</span></span> 
 </term><description> <span data-ttu-id="9af29-204">此实例位于 <paramref name="value" /> 之后。</span><span class="sxs-lookup"><span data-stu-id="9af29-204">This instance follows <paramref name="value" />.</span></span>  
  
<span data-ttu-id="9af29-205">或</span><span class="sxs-lookup"><span data-stu-id="9af29-205">-or-</span></span> 
 <span data-ttu-id="9af29-206"><paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-206"><paramref name="value" /> is <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-207"><xref:System.Char.CompareTo%2A>方法实现<xref:System.IComparable>接口。</span><span class="sxs-lookup"><span data-stu-id="9af29-207">The <xref:System.Char.CompareTo%2A> method implements the <xref:System.IComparable> interface.</span></span>  
  
 <span data-ttu-id="9af29-208">`value`参数必须是`null`的实例或<xref:System.Char>; 否则为将引发异常。</span><span class="sxs-lookup"><span data-stu-id="9af29-208">The `value` parameter must be `null` or an instance of <xref:System.Char>; otherwise, an exception is thrown.</span></span>  
  
 <span data-ttu-id="9af29-209">此方法执行的比较基于此实例的编码值和`value`，不一定是它们按字典编辑顺序的特征。</span><span class="sxs-lookup"><span data-stu-id="9af29-209">The comparison performed by this method is based on the encoded values of this instance and `value`, not necessarily their lexicographical characteristics.</span></span> <span data-ttu-id="9af29-210">任何实例<xref:System.Char>，而不考虑其值被视为大于`null`。</span><span class="sxs-lookup"><span data-stu-id="9af29-210">Any instance of <xref:System.Char>, regardless of its value, is considered greater than `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-211">下面的代码示例演示了<xref:System.Char.CompareTo%2A>。</span><span class="sxs-lookup"><span data-stu-id="9af29-211">The following code example demonstrates <xref:System.Char.CompareTo%2A>.</span></span>  
  
 [!code-cpp[System.Char.CompareTo#19](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.CompareTo/CPP/compareto.cpp#19)]
 [!code-csharp[System.Char.CompareTo#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.CompareTo/CS/compareto.cs#19)]
 [!code-vb[System.Char.CompareTo#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.CompareTo/VB/compareto.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9af29-212"><paramref name="value" /> 不是 <see cref="T:System.Char" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="9af29-212"><paramref name="value" /> is not a <see cref="T:System.Char" /> object.</span></span></exception>
        <altmember cref="T:System.IComparable" />
        <altmember cref="M:System.Char.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ConvertFromUtf32">
      <MemberSignature Language="C#" Value="public static string ConvertFromUtf32 (int utf32);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ConvertFromUtf32(int32 utf32) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ConvertFromUtf32(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertFromUtf32 (utf32 As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ConvertFromUtf32(int utf32);" />
      <MemberSignature Language="F#" Value="static member ConvertFromUtf32 : int -&gt; string" Usage="System.char.ConvertFromUtf32 utf32" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utf32" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="utf32"><span data-ttu-id="9af29-213">21 位 Unicode 码位。</span><span class="sxs-lookup"><span data-stu-id="9af29-213">A 21-bit Unicode code point.</span></span></param>
        <summary><span data-ttu-id="9af29-214">将指定的 Unicode 码位转换为 UTF-16 编码字符串。</span><span class="sxs-lookup"><span data-stu-id="9af29-214">Converts the specified Unicode code point into a UTF-16 encoded string.</span></span></summary>
        <returns><span data-ttu-id="9af29-215">由一个 <see cref="T:System.Char" /> 对象或一个 <see cref="T:System.Char" /> 对象的代理项对组成的字符串，等效于 <paramref name="utf32" /> 参数所指定的码位。</span><span class="sxs-lookup"><span data-stu-id="9af29-215">A string consisting of one <see cref="T:System.Char" /> object or a surrogate pair of <see cref="T:System.Char" /> objects equivalent to the code point specified by the <paramref name="utf32" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-216">使用此方法将转换为 utf-16 编码字符串的 21 位 Unicode 码位，如使用方法测试字符串之前<xref:System.Char.IsLowSurrogate%28System.Char%29>和<xref:System.Char.IsHighSurrogate%28System.Char%29>。</span><span class="sxs-lookup"><span data-stu-id="9af29-216">Use this method to convert a 21-bit Unicode code point to a UTF-16 encoded string before testing the string with methods such as <xref:System.Char.IsLowSurrogate%28System.Char%29> and <xref:System.Char.IsHighSurrogate%28System.Char%29>.</span></span>  
  
 <span data-ttu-id="9af29-217">有效的码位外部基本多语言平面 (BMP) 始终会将一个有效的代理项对。</span><span class="sxs-lookup"><span data-stu-id="9af29-217">A valid code point outside the Basic Multilingual Plane (BMP) always yields a valid surrogate pair.</span></span> <span data-ttu-id="9af29-218">但是，BMP 内的有效的代码点可能会产生有效的结果根据 Unicode 标准，因为在转换中不使用任何语言的处理。</span><span class="sxs-lookup"><span data-stu-id="9af29-218">However, a valid code point within the BMP might not yield a valid result according to the Unicode standard because no linguistic processing is used in the conversion.</span></span> <span data-ttu-id="9af29-219">因此，使用<xref:System.Text.UTF32Encoding?displayProperty=nameWithType>类将 UTF-32 数据大容量到大容量 utf-16 数据。</span><span class="sxs-lookup"><span data-stu-id="9af29-219">For that reason, use the <xref:System.Text.UTF32Encoding?displayProperty=nameWithType> class to convert bulk UTF-32 data into bulk UTF-16 data.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-220">下面的代码示例演示<xref:System.Char.ConvertToUtf32%2A>和<xref:System.Char.ConvertFromUtf32%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9af29-220">The following code example demonstrates the <xref:System.Char.ConvertToUtf32%2A> and <xref:System.Char.ConvertFromUtf32%2A> methods.</span></span>  
  
 [!code-cpp[char.cvtutf32#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.cvtutf32/CPP/utf.cpp#1)]
 [!code-csharp[char.cvtutf32#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.cvtutf32/CS/utf.cs#1)]
 [!code-vb[char.cvtutf32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.cvtutf32/VB/utf.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9af29-221"><paramref name="utf32" /> 不是一个从 U+0 到 U+10FFFF 范围内的有效 21 位 Unicode 码位（从 U+D800 到 U+DFFF 范围的代理项对除外）。</span><span class="sxs-lookup"><span data-stu-id="9af29-221"><paramref name="utf32" /> is not a valid 21-bit Unicode code point ranging from U+0 through U+10FFFF, excluding the surrogate pair range from U+D800 through U+DFFF.</span></span></exception>
        <altmember cref="M:System.Char.ConvertToUtf32(System.Char,System.Char)" />
        <altmember cref="T:System.Text.UTF32Encoding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertToUtf32">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9af29-222">将 UTF-16 编码的代理项对的值转换为 Unicode 码位。</span><span class="sxs-lookup"><span data-stu-id="9af29-222">Converts the value of a UTF-16 encoded surrogate pair into a Unicode code point.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertToUtf32">
      <MemberSignature Language="C#" Value="public static int ConvertToUtf32 (char highSurrogate, char lowSurrogate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ConvertToUtf32(char highSurrogate, char lowSurrogate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ConvertToUtf32(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToUtf32 (highSurrogate As Char, lowSurrogate As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ConvertToUtf32(char highSurrogate, char lowSurrogate);" />
      <MemberSignature Language="F#" Value="static member ConvertToUtf32 : char * char -&gt; int" Usage="System.char.ConvertToUtf32 (highSurrogate, lowSurrogate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="highSurrogate" Type="System.Char" />
        <Parameter Name="lowSurrogate" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="highSurrogate"><span data-ttu-id="9af29-223">高代理项代码单位（即代码单位从 U+D800 到 U+DBFF）。</span><span class="sxs-lookup"><span data-stu-id="9af29-223">A high surrogate code unit (that is, a code unit ranging from U+D800 through U+DBFF).</span></span></param>
        <param name="lowSurrogate"><span data-ttu-id="9af29-224">低代理项代码单位（即代码单位从 U+DC00 到 U+DFFF）。</span><span class="sxs-lookup"><span data-stu-id="9af29-224">A low surrogate code unit (that is, a code unit ranging from U+DC00 through U+DFFF).</span></span></param>
        <summary><span data-ttu-id="9af29-225">将 UTF-16 编码的代理项对的值转换为 Unicode 码位。</span><span class="sxs-lookup"><span data-stu-id="9af29-225">Converts the value of a UTF-16 encoded surrogate pair into a Unicode code point.</span></span></summary>
        <returns><span data-ttu-id="9af29-226"><paramref name="highSurrogate" /> 和 <paramref name="lowSurrogate" /> 参数表示的 21 位 Unicode 码位。</span><span class="sxs-lookup"><span data-stu-id="9af29-226">The 21-bit Unicode code point represented by the <paramref name="highSurrogate" /> and <paramref name="lowSurrogate" /> parameters.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-227">使用此方法以将代理项对转换为 21 位 Unicode 码位。</span><span class="sxs-lookup"><span data-stu-id="9af29-227">Use this method to convert a surrogate pair into a 21-bit Unicode code point.</span></span> <span data-ttu-id="9af29-228">若要将 utf-16 数据转换为 UTF-32 数据，请使用<xref:System.Text.UTF32Encoding?displayProperty=nameWithType>类。</span><span class="sxs-lookup"><span data-stu-id="9af29-228">To convert UTF-16 data into UTF-32 data, use the <xref:System.Text.UTF32Encoding?displayProperty=nameWithType> class.</span></span>  
  
 <span data-ttu-id="9af29-229">通常，utf-16 编码为 16 位代码单元表示单个 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-229">Ordinarily, UTF-16 encoding represents a single Unicode character as a 16-bit code unit.</span></span> <span data-ttu-id="9af29-230">但是，它还支持的代理项对，从而允许单个抽象字符而无法表示为两个 16 位代码单元。</span><span class="sxs-lookup"><span data-stu-id="9af29-230">However, it also supports surrogate pairs, which allow a single abstract character to be represented as two 16-bit code units.</span></span> <span data-ttu-id="9af29-231">这两个<xref:System.Char>对象必须具有代码单位从 u+d800 到 U + DBFF 的第一个 （高） 的代理项和 U + DC00 到 U + DFFF 的第二个 （低） 的代理项的范围。</span><span class="sxs-lookup"><span data-stu-id="9af29-231">These two <xref:System.Char> objects must have code units that range from U+D800 to U+DBFF for the first (high) surrogate and from U+DC00 to U+DFFF for the second (low) surrogate.</span></span> <span data-ttu-id="9af29-232">只支持 utf-16 代理项对编码。</span><span class="sxs-lookup"><span data-stu-id="9af29-232">Surrogate pairs are supported only by UTF-16 encoding.</span></span> <span data-ttu-id="9af29-233">此方法允许将 utf-16 代理项对表示要转换为使用 UTF-32 编码的字符的字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-233">This method allows a character represented by a UTF-16 surrogate pair to be converted to a character using UTF-32 encoding.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-234">下面的代码示例演示<xref:System.Char.ConvertToUtf32%2A>和<xref:System.Char.ConvertFromUtf32%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9af29-234">The following code example demonstrates the <xref:System.Char.ConvertToUtf32%2A> and <xref:System.Char.ConvertFromUtf32%2A> methods.</span></span>  
  
 [!code-cpp[char.cvtutf32#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.cvtutf32/CPP/utf.cpp#1)]
 [!code-csharp[char.cvtutf32#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.cvtutf32/CS/utf.cs#1)]
 [!code-vb[char.cvtutf32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.cvtutf32/VB/utf.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9af29-235"><paramref name="highSurrogate" /> 不在 U + D800 到 U + DBFF 的范围内，或者 <paramref name="lowSurrogate" /> 不在 U + DC00 到 U+DFFF 的范围内。</span><span class="sxs-lookup"><span data-stu-id="9af29-235"><paramref name="highSurrogate" /> is not in the range U+D800 through U+DBFF, or <paramref name="lowSurrogate" /> is not in the range U+DC00 through U+DFFF.</span></span></exception>
        <altmember cref="M:System.Char.ConvertFromUtf32(System.Int32)" />
        <altmember cref="T:System.Text.UTF32Encoding" />
      </Docs>
    </Member>
    <Member MemberName="ConvertToUtf32">
      <MemberSignature Language="C#" Value="public static int ConvertToUtf32 (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ConvertToUtf32(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ConvertToUtf32(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ConvertToUtf32 (s As String, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int ConvertToUtf32(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member ConvertToUtf32 : string * int -&gt; int" Usage="System.char.ConvertToUtf32 (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="9af29-236">包含字符或代理项对的字符串。</span><span class="sxs-lookup"><span data-stu-id="9af29-236">A string that contains a character or surrogate pair.</span></span></param>
        <param name="index"><span data-ttu-id="9af29-237">字符或代理项对在 <paramref name="s" /> 中的索引位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-237">The index position of the character or surrogate pair in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="9af29-238">将字符串中指定位置的 UTF-16 编码字符或代理项对的值转换为 Unicode 码位。</span><span class="sxs-lookup"><span data-stu-id="9af29-238">Converts the value of a UTF-16 encoded character or surrogate pair at a specified position in a string into a Unicode code point.</span></span></summary>
        <returns><span data-ttu-id="9af29-239">字符或代理项对表示的 21 位 Unicode 码位，该字符或代理项对在 <paramref name="s" /> 参数中的位置由 <paramref name="index" /> 参数指定。</span><span class="sxs-lookup"><span data-stu-id="9af29-239">The 21-bit Unicode code point represented by the character or surrogate pair at the position in the <paramref name="s" /> parameter specified by the <paramref name="index" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-240">使用此方法将为 21 位 Unicode 码位转换的字符或代理项对。</span><span class="sxs-lookup"><span data-stu-id="9af29-240">Use this method to convert a character or surrogate pair into a 21-bit Unicode code point.</span></span> <span data-ttu-id="9af29-241">若要将 utf-16 数据转换为 UTF-32 数据，请使用<xref:System.Text.UTF32Encoding?displayProperty=nameWithType>类。</span><span class="sxs-lookup"><span data-stu-id="9af29-241">To convert UTF-16 data into UTF-32 data, use the <xref:System.Text.UTF32Encoding?displayProperty=nameWithType> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-242">下面的代码示例演示<xref:System.Char.ConvertToUtf32%2A>和<xref:System.Char.ConvertFromUtf32%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9af29-242">The following code example demonstrates the <xref:System.Char.ConvertToUtf32%2A> and <xref:System.Char.ConvertFromUtf32%2A> methods.</span></span>  
  
 [!code-cpp[char.cvtutf32#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.cvtutf32/CPP/utf.cpp#1)]
 [!code-csharp[char.cvtutf32#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.cvtutf32/CS/utf.cs#1)]
 [!code-vb[char.cvtutf32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.cvtutf32/VB/utf.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9af29-243"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-243"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9af29-244"><paramref name="index" /> 不是 <paramref name="s" /> 内的位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-244"><paramref name="index" /> is not a position within <paramref name="s" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9af29-245">指定的索引位置包含代理项对，且对中的第一个字符不是有效的高代理项或对中的第二个字符不是有效的低代理项。</span><span class="sxs-lookup"><span data-stu-id="9af29-245">The specified index position contains a surrogate pair, and either the first character in the pair is not a valid high surrogate or the second character in the pair is not a valid low surrogate.</span></span></exception>
        <altmember cref="M:System.Char.ConvertFromUtf32(System.Int32)" />
        <altmember cref="T:System.Text.UTF32Encoding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9af29-246">返回一个值，该值指示此实例是否与指定的对象或 <see cref="T:System.Char" /> 值相等。</span><span class="sxs-lookup"><span data-stu-id="9af29-246">Returns a value that indicates whether this instance is equal to a specified object or <see cref="T:System.Char" /> value.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (char obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(char obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.Equals(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (obj As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(char obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : char -&gt; bool" Usage="char.Equals obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="9af29-247">要与此实例进行比较的对象。</span><span class="sxs-lookup"><span data-stu-id="9af29-247">An object to compare to this instance.</span></span></param>
        <summary><span data-ttu-id="9af29-248">返回一个值，该值指示此实例是否与指定的 <see cref="T:System.Char" /> 对象相等。</span><span class="sxs-lookup"><span data-stu-id="9af29-248">Returns a value that indicates whether this instance is equal to the specified <see cref="T:System.Char" /> object.</span></span></summary>
        <returns><span data-ttu-id="9af29-249">如果 <see langword="true" /> 参数与此实例的值相等，则为 <paramref name="obj" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-249"><see langword="true" /> if the <paramref name="obj" /> parameter equals the value of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-250">此方法实现<xref:System.IEquatable%601?displayProperty=nameWithType>接口，并且执行略微优于<xref:System.Char.Equals%28System.Object%29?displayProperty=nameWithType>因为它不需要要取消装箱`obj`参数。</span><span class="sxs-lookup"><span data-stu-id="9af29-250">This method implements the <xref:System.IEquatable%601?displayProperty=nameWithType> interface, and performs slightly better than <xref:System.Char.Equals%28System.Object%29?displayProperty=nameWithType> because it does not need to unbox the `obj` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="char.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="9af29-251">要与此示例比较的对象，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-251">An object to compare with this instance or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="9af29-252">返回一个值，该值指示此实例是否与指定的对象相等。</span><span class="sxs-lookup"><span data-stu-id="9af29-252">Returns a value that indicates whether this instance is equal to a specified object.</span></span></summary>
        <returns><span data-ttu-id="9af29-253">如果 <see langword="true" /> 是 <paramref name="obj" /> 的实例并且等于此实例的值，则为 <see cref="T:System.Char" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-253"><see langword="true" /> if <paramref name="obj" /> is an instance of <see cref="T:System.Char" /> and equals the value of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-254">此方法执行的比较基于此实例的编码值和`obj`，不一定是它们按字典编辑顺序的特征。</span><span class="sxs-lookup"><span data-stu-id="9af29-254">The comparison performed by this method is based on the encoded values of this instance and `obj`, not necessarily their lexicographical characteristics.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-255">下面的代码示例演示了<xref:System.Char.Equals%2A>。</span><span class="sxs-lookup"><span data-stu-id="9af29-255">The following code example demonstrates <xref:System.Char.Equals%2A>.</span></span>  
  
 [!code-cpp[System.Char.Equals#20](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.Equals/CPP/equals.cpp#20)]
 [!code-csharp[System.Char.Equals#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.Equals/CS/equals.cs#20)]
 [!code-vb[System.Char.Equals#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.Equals/VB/equals.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.CompareTo(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="char.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9af29-256">返回此实例的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="9af29-256">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="9af29-257">32 位有符号整数哈希代码。</span><span class="sxs-lookup"><span data-stu-id="9af29-257">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNumericValue">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9af29-258">将指定的数字 Unicode 字符转换为双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="9af29-258">Converts a specified numeric Unicode character to a double-precision floating-point number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetNumericValue(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (c As Char) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(char c);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : char -&gt; double" Usage="System.char.GetNumericValue c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="9af29-259">要转换的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-259">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="9af29-260">将指定的数字 Unicode 字符转换为双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="9af29-260">Converts the specified numeric Unicode character to a double-precision floating point number.</span></span></summary>
        <returns><span data-ttu-id="9af29-261">如果该字符表示数字，则数值为 <paramref name="c" />；否则为 -1.0。</span><span class="sxs-lookup"><span data-stu-id="9af29-261">The numeric value of <paramref name="c" /> if that character represents a number; otherwise, -1.0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-262">`c`参数必须是<xref:System.Char>数字值的表示形式。</span><span class="sxs-lookup"><span data-stu-id="9af29-262">The `c` parameter must be the <xref:System.Char> representation of a numeric value.</span></span> <span data-ttu-id="9af29-263">例如，如果`c`是"5"，则返回值为 5。</span><span class="sxs-lookup"><span data-stu-id="9af29-263">For example, if `c` is "5", the return value is 5.</span></span> <span data-ttu-id="9af29-264">但是，如果`c`是"z"的返回值为-1.0。</span><span class="sxs-lookup"><span data-stu-id="9af29-264">However, if `c` is "z", the return value is -1.0.</span></span>  
  
 <span data-ttu-id="9af29-265">当且仅当它是以下值之一的成员具有关联的数字值的字符<xref:System.Globalization.UnicodeCategory>类别： `DecimalDigitNumber`， `LetterNumber`，或`OtherNumber`。</span><span class="sxs-lookup"><span data-stu-id="9af29-265">A character has an associated numeric value if and only if it is a member of one of the following <xref:System.Globalization.UnicodeCategory> categories: `DecimalDigitNumber`, `LetterNumber`, or `OtherNumber`.</span></span>  
  
 <span data-ttu-id="9af29-266"><xref:System.Char.GetNumericValue%2A>方法假设`c`对应于单一语言字符，并检查该字符是否可以转换为十进制数字。</span><span class="sxs-lookup"><span data-stu-id="9af29-266">The <xref:System.Char.GetNumericValue%2A> method assumes that `c` corresponds to a single linguistic character and checks whether that character can be converted to a decimal digit.</span></span> <span data-ttu-id="9af29-267">但是，由两个表示 Unicode 标准中的某些数字<xref:System.Char>形成一个代理项对的对象。</span><span class="sxs-lookup"><span data-stu-id="9af29-267">However, some numbers in the Unicode standard are represented by two <xref:System.Char> objects that form a surrogate pair.</span></span> <span data-ttu-id="9af29-268">例如，数字系统爱琴包含码位 U + 10107 至 U + 10133。</span><span class="sxs-lookup"><span data-stu-id="9af29-268">For example, the Aegean numbering system consists of code points U+10107 through U+10133.</span></span> <span data-ttu-id="9af29-269">下面的示例使用<xref:System.Char.ConvertFromUtf32%2A>方法可实例化一个字符串，表示爱琴海的第一个。</span><span class="sxs-lookup"><span data-stu-id="9af29-269">The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents AEGEAN NUMBER ONE.</span></span> <span data-ttu-id="9af29-270">中的示例所示，输出的形式<xref:System.Char.GetNumericValue%28System.Char%29>方法返回-1，如果它传递一个高代理项或低代理项的此字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-270">As the output from the example shows, the <xref:System.Char.GetNumericValue%28System.Char%29> method returns -1 if it is passed either a high surrogate or a low surrogate of this character.</span></span>  
  
 [!code-csharp[System.Char.GetNumericValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CS/getnumericvalue1.cs#2)]
 [!code-vb[System.Char.GetNumericValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetNumericValue/VB/getnumericvalue1.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="9af29-271">下面的示例演示<xref:System.Char.GetNumericValue%2A>。</span><span class="sxs-lookup"><span data-stu-id="9af29-271">The following example demonstrates <xref:System.Char.GetNumericValue%2A>.</span></span>  
  
 [!code-cpp[System.Char.GetNumericValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CPP/getnumericvalue.cpp#1)]
 [!code-csharp[System.Char.GetNumericValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CS/getnumericvalue.cs#1)]
 [!code-vb[System.Char.GetNumericValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetNumericValue/VB/getnumericvalue.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNumericValue">
      <MemberSignature Language="C#" Value="public static double GetNumericValue (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 GetNumericValue(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetNumericValue(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetNumericValue (s As String, index As Integer) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double GetNumericValue(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetNumericValue : string * int -&gt; double" Usage="System.char.GetNumericValue (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="9af29-272"><see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-272">A <see cref="T:System.String" />.</span></span></param>
        <param name="index"><span data-ttu-id="9af29-273"><paramref name="s" /> 中的字符位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-273">The character position in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="9af29-274">将指定字符串中位于指定位置的数字 Unicode 字符转换为双精度浮点数。</span><span class="sxs-lookup"><span data-stu-id="9af29-274">Converts the numeric Unicode character at the specified position in a specified string to a double-precision floating point number.</span></span></summary>
        <returns><span data-ttu-id="9af29-275">如果 <paramref name="index" /> 中位于 <paramref name="s" /> 处的字符表示数字，则为该字符的数值；否则为 -1。</span><span class="sxs-lookup"><span data-stu-id="9af29-275">The numeric value of the character at position <paramref name="index" /> in <paramref name="s" /> if that character represents a number; otherwise, -1.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-276">`s`参数必须是数字值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="9af29-276">The `s` parameter must be the string representation of a numeric value.</span></span> <span data-ttu-id="9af29-277">例如，如果位置处的字符`index`在`s`是"5"，则返回值为 5。</span><span class="sxs-lookup"><span data-stu-id="9af29-277">For example, if the character at position `index` in `s` is "5", the return value is 5.</span></span> <span data-ttu-id="9af29-278">但是，如果位置处的字符`index`在`s`是"z"的返回值为-1。</span><span class="sxs-lookup"><span data-stu-id="9af29-278">However, if the character at position `index` in `s` is "z", the return value is -1.</span></span>  
  
 <span data-ttu-id="9af29-279">在字符串中的字符位置从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="9af29-279">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="9af29-280">当且仅当它是以下值之一的成员具有关联的数字值的字符<xref:System.Globalization.UnicodeCategory>类别： `DecimalDigitNumber`， `LetterNumber`，或`OtherNumber`。</span><span class="sxs-lookup"><span data-stu-id="9af29-280">A character has an associated numeric value if and only if it is a member of one of the following <xref:System.Globalization.UnicodeCategory> categories: `DecimalDigitNumber`, `LetterNumber`, or `OtherNumber`.</span></span>  
  
 <span data-ttu-id="9af29-281">如果<xref:System.Char>位置处的对象`index`第一个字符是一个有效的代理项对，<xref:System.Char.GetNumericValue%28System.String%2CSystem.Int32%29>方法确定是否将代理项对窗体的一个数字。</span><span class="sxs-lookup"><span data-stu-id="9af29-281">If the <xref:System.Char> object at position `index` is the first character of a valid surrogate pair, the <xref:System.Char.GetNumericValue%28System.String%2CSystem.Int32%29> method determines whether the surrogate pair forms a numeric digit.</span></span> <span data-ttu-id="9af29-282">例如，数字系统爱琴包含码位 U + 10107 至 U + 10133。</span><span class="sxs-lookup"><span data-stu-id="9af29-282">For example, the Aegean numbering system consists of code points U+10107 through U+10133.</span></span> <span data-ttu-id="9af29-283">下面的示例使用<xref:System.Char.ConvertFromUtf32%2A>方法可实例化一个字符串，表示每个爱琴海数目。</span><span class="sxs-lookup"><span data-stu-id="9af29-283">The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents each Aegean number.</span></span> <span data-ttu-id="9af29-284">中的示例所示，输出的形式<xref:System.Char.GetNumericValue%28System.String%2CSystem.Int32%29>方法返回正确的数字值，如果它传递爱琴海的数目的高代理项。</span><span class="sxs-lookup"><span data-stu-id="9af29-284">As the output from the example shows, the <xref:System.Char.GetNumericValue%28System.String%2CSystem.Int32%29> method returns the correct numeric value if it is passed the high surrogate of an Aegean number.</span></span> <span data-ttu-id="9af29-285">但是，如果它传递的低代理项，它会考虑仅在隔离的低代理项，并返回-1。</span><span class="sxs-lookup"><span data-stu-id="9af29-285">However, if it is passed the low surrogate, it considers only the low surrogate in isolation and returns -1.</span></span>  
  
 [!code-csharp[System.Char.GetNumericValue#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CS/getnumericvalue1.cs#3)]
 [!code-vb[System.Char.GetNumericValue#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetNumericValue/VB/getnumericvalue1.vb#3)]  
  
   
  
## Examples  
 <span data-ttu-id="9af29-286">下面的代码示例演示了<xref:System.Char.GetNumericValue%2A>。</span><span class="sxs-lookup"><span data-stu-id="9af29-286">The following code example demonstrates <xref:System.Char.GetNumericValue%2A>.</span></span>  
  
 [!code-cpp[System.Char.GetNumericValue#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CPP/getnumericvalue.cpp#1)]
 [!code-csharp[System.Char.GetNumericValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetNumericValue/CS/getnumericvalue.cs#1)]
 [!code-vb[System.Char.GetNumericValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetNumericValue/VB/getnumericvalue.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9af29-287"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-287"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9af29-288"><paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-288"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTypeCode () As TypeCode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TypeCode GetTypeCode();" />
      <MemberSignature Language="F#" Value="abstract member GetTypeCode : unit -&gt; TypeCode&#xA;override this.GetTypeCode : unit -&gt; TypeCode" Usage="char.GetTypeCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9af29-289">返回值类型 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.Char" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-289">Returns the <see cref="T:System.TypeCode" /> for value type <see cref="T:System.Char" />.</span></span></summary>
        <returns><span data-ttu-id="9af29-290">枚举常数 <see cref="F:System.TypeCode.Char" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-290">The enumerated constant, <see cref="F:System.TypeCode.Char" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicodeCategory">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9af29-291">将 Unicode 字符分类到由一个 <see cref="T:System.Globalization.UnicodeCategory" /> 值标识的组中。</span><span class="sxs-lookup"><span data-stu-id="9af29-291">Categorizes a Unicode character into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.</span></span></summary>
        <altmember cref="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetUnicodeCategory(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (c As Char) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(char c);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : char -&gt; System.Globalization.UnicodeCategory" Usage="System.char.GetUnicodeCategory c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="9af29-292">要分类的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-292">The Unicode character to categorize.</span></span></param>
        <summary><span data-ttu-id="9af29-293">将指定的 Unicode 字符分类到由一个 <see cref="T:System.Globalization.UnicodeCategory" /> 值标识的组中。</span><span class="sxs-lookup"><span data-stu-id="9af29-293">Categorizes a specified Unicode character into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.</span></span></summary>
        <returns><span data-ttu-id="9af29-294">一个 <see cref="T:System.Globalization.UnicodeCategory" /> 值，它标识包含 <paramref name="c" /> 的组。</span><span class="sxs-lookup"><span data-stu-id="9af29-294">A <see cref="T:System.Globalization.UnicodeCategory" /> value that identifies the group that contains <paramref name="c" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-295"><xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>方法不会始终返回相同<xref:System.Globalization.UnicodeCategory>值作为<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType>方法作为参数传递特定的字符时。</span><span class="sxs-lookup"><span data-stu-id="9af29-295">The <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> method does not always return the same <xref:System.Globalization.UnicodeCategory> value as the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> method when it is passed a particular character as a parameter.</span></span> <span data-ttu-id="9af29-296"><xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType>方法设计以反映当前版本的 Unicode 标准。</span><span class="sxs-lookup"><span data-stu-id="9af29-296">The <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> method is designed to reflect the current version of the Unicode standard.</span></span> <span data-ttu-id="9af29-297">与此相反，尽管<xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>方法通常反映当前版本的 Unicode 标准，它可能返回的字符类别基于标准的以前版本或它可能返回不同的类别，与当前标准顺序若要保留向后兼容性。</span><span class="sxs-lookup"><span data-stu-id="9af29-297">In contrast, although the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> method usually reflects the current version of the Unicode standard, it may return a character's category based on a previous version of the standard or it may return a category that differs from the current standard in order to preserve backward compatibility.</span></span> <span data-ttu-id="9af29-298">因此，我们建议你使用<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType>方法而不是<xref:System.Char.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9af29-298">As a result, we recommend that you use the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> method instead of <xref:System.Char.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="9af29-299">从开始[!INCLUDE[net_v462](~/includes/net-v462-md.md)]，Unicode 字符的分类基于[Unix 标准、 8.0.0 版](https://www.unicode.org/versions/Unicode8.0.0/)。</span><span class="sxs-lookup"><span data-stu-id="9af29-299">Starting with the [!INCLUDE[net_v462](~/includes/net-v462-md.md)], Unicode characters are classified based on [The Unix Standard, Version 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/).</span></span> <span data-ttu-id="9af29-300">在从.NET Framework 的版本[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]到[!INCLUDE[net_v461](~/includes/net-v461-md.md)]，它们的分类基于[Unix 标准、 6.3.0 版](https://www.unicode.org/versions/Unicode6.3.0/)。</span><span class="sxs-lookup"><span data-stu-id="9af29-300">In versions of the .NET Framework from the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] to  the [!INCLUDE[net_v461](~/includes/net-v461-md.md)], they are classified based on [The Unix Standard, Version 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-301">下面的代码示例演示了<xref:System.Char.GetUnicodeCategory%2A>。</span><span class="sxs-lookup"><span data-stu-id="9af29-301">The following code example demonstrates <xref:System.Char.GetUnicodeCategory%2A>.</span></span>  
  
 [!code-cpp[System.Char.GetUnicodeCategory#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/CPP/getunicodecategory.cpp#1)]
 [!code-csharp[System.Char.GetUnicodeCategory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/CS/getunicodecategory.cs#1)]
 [!code-vb[System.Char.GetUnicodeCategory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/VB/getunicodecategory.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="GetUnicodeCategory">
      <MemberSignature Language="C#" Value="public static System.Globalization.UnicodeCategory GetUnicodeCategory (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Globalization.UnicodeCategory GetUnicodeCategory(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.GetUnicodeCategory(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetUnicodeCategory (s As String, index As Integer) As UnicodeCategory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::UnicodeCategory GetUnicodeCategory(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member GetUnicodeCategory : string * int -&gt; System.Globalization.UnicodeCategory" Usage="System.char.GetUnicodeCategory (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.UnicodeCategory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="9af29-302"><see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-302">A <see cref="T:System.String" />.</span></span></param>
        <param name="index"><span data-ttu-id="9af29-303"><paramref name="s" /> 中的字符位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-303">The character position in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="9af29-304">将指定字符串中位于指定位置的字符分类到由一个 <see cref="T:System.Globalization.UnicodeCategory" /> 值标识的组中。</span><span class="sxs-lookup"><span data-stu-id="9af29-304">Categorizes the character at the specified position in a specified string into a group identified by one of the <see cref="T:System.Globalization.UnicodeCategory" /> values.</span></span></summary>
        <returns><span data-ttu-id="9af29-305">一个 <see cref="T:System.Globalization.UnicodeCategory" /> 枚举常数，标识包含 <paramref name="index" /> 中位于 <paramref name="s" /> 处的字符的组。</span><span class="sxs-lookup"><span data-stu-id="9af29-305">A <see cref="T:System.Globalization.UnicodeCategory" /> enumerated constant that identifies the group that contains the character at position <paramref name="index" /> in <paramref name="s" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-306">在字符串中的字符位置从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="9af29-306">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="9af29-307"><xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>方法不会始终返回相同<xref:System.Globalization.UnicodeCategory>值作为<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>方法作为参数传递特定的字符时。</span><span class="sxs-lookup"><span data-stu-id="9af29-307">The <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> method does not always return the same <xref:System.Globalization.UnicodeCategory> value as the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> method when it is passed a particular character as a parameter.</span></span> <span data-ttu-id="9af29-308"><xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>方法设计以反映当前版本的 Unicode 标准。</span><span class="sxs-lookup"><span data-stu-id="9af29-308">The <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType> method is designed to reflect the current version of the Unicode standard.</span></span> <span data-ttu-id="9af29-309">与此相反，尽管<xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType>方法通常反映当前版本的 Unicode 标准，它可能返回的字符类别基于标准的以前版本或它可能返回不同的类别，与当前标准顺序若要保留向后兼容性。</span><span class="sxs-lookup"><span data-stu-id="9af29-309">In contrast, although the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=nameWithType> method usually reflects the current version of the Unicode standard, it may return a character's category based on a previous version of the standard or it may return a category that differs from the current standard in order to preserve backward compatibility.</span></span> <span data-ttu-id="9af29-310">因此，我们建议你使用<xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType>方法而不是<xref:System.Char.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9af29-310">As a result, we recommend that you use the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.Char%29?displayProperty=nameWithType> method instead of <xref:System.Char.GetUnicodeCategory%28System.String%2CSystem.Int32%29?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="9af29-311">从开始[!INCLUDE[net_v462](~/includes/net-v462-md.md)]，Unicode 字符的分类基于[Unix 标准、 8.0.0 版](https://www.unicode.org/versions/Unicode8.0.0/)。</span><span class="sxs-lookup"><span data-stu-id="9af29-311">Starting with the [!INCLUDE[net_v462](~/includes/net-v462-md.md)], Unicode characters are classified based on [The Unix Standard, Version 8.0.0](https://www.unicode.org/versions/Unicode8.0.0/).</span></span> <span data-ttu-id="9af29-312">在从.NET Framework 的版本[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]到[!INCLUDE[net_v461](~/includes/net-v461-md.md)]，它们的分类基于[Unix 标准、 6.3.0 版](https://www.unicode.org/versions/Unicode6.3.0/)。</span><span class="sxs-lookup"><span data-stu-id="9af29-312">In versions of the .NET Framework from the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] to  the [!INCLUDE[net_v461](~/includes/net-v461-md.md)], they are classified based on [The Unix Standard, Version 6.3.0](https://www.unicode.org/versions/Unicode6.3.0/).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-313">下面的示例演示<xref:System.Char.GetUnicodeCategory%2A>。</span><span class="sxs-lookup"><span data-stu-id="9af29-313">The following example demonstrates <xref:System.Char.GetUnicodeCategory%2A>.</span></span>  
  
 [!code-cpp[System.Char.GetUnicodeCategory#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/CPP/getunicodecategory.cpp#1)]
 [!code-csharp[System.Char.GetUnicodeCategory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/CS/getunicodecategory.cs#1)]
 [!code-vb[System.Char.GetUnicodeCategory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.GetUnicodeCategory/VB/getunicodecategory.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9af29-314"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-314"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9af29-315"><paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-315"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsControl">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9af29-316">指示指定的 Unicode 字符是否属于控制字符类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-316">Indicates whether a specified Unicode character is categorized as a control character.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-317">控制字符进行格式设置和其他非打印字符，如确认、 BEL、 CR、 FF、 LF，和 VT.</span><span class="sxs-lookup"><span data-stu-id="9af29-317">Control characters are formatting and other non-printing characters, such as ACK, BEL, CR, FF, LF, and VT.</span></span> <span data-ttu-id="9af29-318">Unicode 标准将从 \U0000 到 \U001F，\U007F，和对控制字符到 \U009F \U0080 分配码位。</span><span class="sxs-lookup"><span data-stu-id="9af29-318">The Unicode standard assigns code points from \U0000 to \U001F, \U007F, and from \U0080 to \U009F to control characters.</span></span> <span data-ttu-id="9af29-319">根据 Unicode 标准中，这些值都将被解释为控制字符，除非其使用否则定义应用程序。</span><span class="sxs-lookup"><span data-stu-id="9af29-319">According to the Unicode standard, these values are to be interpreted as control characters unless their use is otherwise defined by an application.</span></span> <span data-ttu-id="9af29-320">有效的控制字符均隶属于<xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType>类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-320">Valid control characters are members of the <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> category.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsControl">
      <MemberSignature Language="C#" Value="public static bool IsControl (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsControl(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsControl(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsControl (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsControl(char c);" />
      <MemberSignature Language="F#" Value="static member IsControl : char -&gt; bool" Usage="System.char.IsControl c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="9af29-321">要计算的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-321">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="9af29-322">指示指定的 Unicode 字符是否属于控制字符类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-322">Indicates whether the specified Unicode character is categorized as a control character.</span></span></summary>
        <returns><span data-ttu-id="9af29-323">如果 <see langword="true" /> 是控制字符，则为 <paramref name="c" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-323"><see langword="true" /> if <paramref name="c" /> is a control character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-324">控制字符进行格式设置和其他非打印字符，如确认、 BEL、 CR、 FF、 LF，和 VT.</span><span class="sxs-lookup"><span data-stu-id="9af29-324">Control characters are formatting and other non-printing characters, such as ACK, BEL, CR, FF, LF, and VT.</span></span> <span data-ttu-id="9af29-325">T 的 Unicode 标准将从 \U0000 到 \U001F，\U007F，和对控制字符到 \U009F \U0080 分配码位。</span><span class="sxs-lookup"><span data-stu-id="9af29-325">T The Unicode standard assigns code points from \U0000 to \U001F, \U007F, and from \U0080 to \U009F to control characters.</span></span> <span data-ttu-id="9af29-326">根据 Unicode 标准中，这些值都将被解释为控制字符，除非其使用否则定义应用程序。</span><span class="sxs-lookup"><span data-stu-id="9af29-326">According to the Unicode standard, these values are to be interpreted as control characters unless their use is otherwise defined by an application.</span></span> <span data-ttu-id="9af29-327">有效的控制字符均隶属于<xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType>类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-327">Valid control characters are members of the <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> category.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-328">以下示例列出每个控制字符的 Unicode 码的位。</span><span class="sxs-lookup"><span data-stu-id="9af29-328">The following example lists the Unicode code point of each of the control characters.</span></span>  
  
 [!code-cpp[System.Char.IsControl#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsControl/CPP/iscontrol1.cpp#1)]
 [!code-csharp[System.Char.IsControl#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsControl/CS/IsControl1.cs#1)]
 [!code-vb[System.Char.IsControl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsControl/VB/IsControl1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsControl">
      <MemberSignature Language="C#" Value="public static bool IsControl (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsControl(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsControl(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsControl (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsControl(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsControl : string * int -&gt; bool" Usage="System.char.IsControl (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="9af29-329">一个字符串。</span><span class="sxs-lookup"><span data-stu-id="9af29-329">A string.</span></span></param>
        <param name="index"><span data-ttu-id="9af29-330"><paramref name="s" /> 中要计算的字符的位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-330">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="9af29-331">指示指定字符串中位于指定位置处的字符是否属于控制字符类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-331">Indicates whether the character at the specified position in a specified string is categorized as a control character.</span></span></summary>
        <returns><span data-ttu-id="9af29-332">如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个控制字符，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-332"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a control character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-333">在字符串中的字符位置从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="9af29-333">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="9af29-334">控制字符进行格式设置和其他非打印字符，如确认、 BEL、 CR、 FF、 LF，和 VT.</span><span class="sxs-lookup"><span data-stu-id="9af29-334">Control characters are formatting and other non-printing characters, such as ACK, BEL, CR, FF, LF, and VT.</span></span> <span data-ttu-id="9af29-335">Unicode 标准将从 \U0000 到 \U001F，\U007F，和对控制字符到 \U009F \U0080 分配码位。</span><span class="sxs-lookup"><span data-stu-id="9af29-335">The Unicode standard assigns code points from \U0000 to \U001F, \U007F, and from \U0080 to \U009F to control characters.</span></span> <span data-ttu-id="9af29-336">根据 Unicode 标准中，这些值都将被解释为控制字符，除非其使用否则定义应用程序。</span><span class="sxs-lookup"><span data-stu-id="9af29-336">According to the Unicode standard, these values are to be interpreted as control characters unless their use is otherwise defined by an application.</span></span> <span data-ttu-id="9af29-337">有效的控制字符均隶属于<xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType>类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-337">Valid control characters are members of the <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> category.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-338">下面的示例枚举字符串中的字符，并确定是否需要针对任何控制字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-338">The following example enumerates the characters in a string and determines whether any are control characters.</span></span>  
  
 [!code-cpp[System.Char.IsControl#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsControl/CPP/iscontrol2.cpp#2)]
 [!code-csharp[System.Char.IsControl#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsControl/CS/IsControl2.cs#2)]
 [!code-vb[System.Char.IsControl#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsControl/VB/IsControl2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9af29-339"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-339"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9af29-340"><paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-340"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDigit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9af29-341">指示 Unicode 字符是否属于十进制数字类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-341">Indicates whether a Unicode character is categorized as a decimal digit.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-342">有效的数字均隶属于<xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-342">Valid digits are members of the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> category.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDigit">
      <MemberSignature Language="C#" Value="public static bool IsDigit (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDigit(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsDigit(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDigit (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDigit(char c);" />
      <MemberSignature Language="F#" Value="static member IsDigit : char -&gt; bool" Usage="System.char.IsDigit c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="9af29-343">要计算的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-343">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="9af29-344">指示指定的 Unicode 字符是否属于十进制数字类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-344">Indicates whether the specified Unicode character is categorized as a decimal digit.</span></span></summary>
        <returns><span data-ttu-id="9af29-345">如果 <see langword="true" /> 是十进制数，则为 <paramref name="c" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-345"><see langword="true" /> if <paramref name="c" /> is a decimal digit; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-346">此方法可确定是否<xref:System.Char>是基数 10 位数字。</span><span class="sxs-lookup"><span data-stu-id="9af29-346">This method determines whether a <xref:System.Char> is a radix-10 digit.</span></span> <span data-ttu-id="9af29-347">这与形成对比<xref:System.Char.IsNumber%2A>，用于确定是否`Char`的任何数值的 Unicode 类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-347">This contrasts with <xref:System.Char.IsNumber%2A>, which determines whether a `Char` is of any numeric Unicode category.</span></span> <span data-ttu-id="9af29-348">数字包含诸如分数、 下标、 上标、 罗马数字、 货币分子、 循环的数和特定于脚本的数字字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-348">Numbers include characters such as fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits.</span></span>  
  
 <span data-ttu-id="9af29-349">有效的数字均隶属于<xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-349">Valid digits are members of the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> category.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-350">下面的代码示例演示了<xref:System.Char.IsDigit%2A>。</span><span class="sxs-lookup"><span data-stu-id="9af29-350">The following code example demonstrates <xref:System.Char.IsDigit%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsDigit#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsDigit/CPP/isdigit.cpp#4)]
 [!code-csharp[System.Char.IsDigit#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsDigit/CS/isdigit.cs#4)]
 [!code-vb[System.Char.IsDigit#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsDigit/VB/isdigit.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsNumber(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsDigit">
      <MemberSignature Language="C#" Value="public static bool IsDigit (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDigit(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsDigit(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDigit (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDigit(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsDigit : string * int -&gt; bool" Usage="System.char.IsDigit (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="9af29-351">一个字符串。</span><span class="sxs-lookup"><span data-stu-id="9af29-351">A string.</span></span></param>
        <param name="index"><span data-ttu-id="9af29-352"><paramref name="s" /> 中要计算的字符的位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-352">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="9af29-353">指示指定字符串中位于指定位置处的字符是否属于十进制数字类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-353">Indicates whether the character at the specified position in a specified string is categorized as a decimal digit.</span></span></summary>
        <returns><span data-ttu-id="9af29-354">如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个十进制数，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-354"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a decimal digit; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-355">此方法可确定是否<xref:System.Char>是基数 10 位数字。</span><span class="sxs-lookup"><span data-stu-id="9af29-355">This method determines whether a <xref:System.Char> is a radix-10 digit.</span></span> <span data-ttu-id="9af29-356">这与形成对比<xref:System.Char.IsNumber%2A>，用于确定是否<xref:System.Char>的任何数值的 Unicode 类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-356">This contrasts with <xref:System.Char.IsNumber%2A>, which determines whether a <xref:System.Char> is of any numeric Unicode category.</span></span> <span data-ttu-id="9af29-357">数字包含诸如分数、 下标、 上标、 罗马数字、 货币分子、 循环的数和特定于脚本的数字字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-357">Numbers include characters such as fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits.</span></span>  
  
 <span data-ttu-id="9af29-358">在字符串中的字符位置从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="9af29-358">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="9af29-359">有效的数字均隶属于<xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-359">Valid digits are members of the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType> category.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-360">下面的代码示例演示了<xref:System.Char.IsDigit%2A>。</span><span class="sxs-lookup"><span data-stu-id="9af29-360">The following code example demonstrates <xref:System.Char.IsDigit%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsDigit#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsDigit/CPP/isdigit.cpp#4)]
 [!code-csharp[System.Char.IsDigit#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsDigit/CS/isdigit.cs#4)]
 [!code-vb[System.Char.IsDigit#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsDigit/VB/isdigit.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9af29-361"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-361"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9af29-362"><paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-362"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsNumber(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsHighSurrogate">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9af29-363">指示指定的 <see cref="T:System.Char" /> 对象是否是一个高代理项。</span><span class="sxs-lookup"><span data-stu-id="9af29-363">Indicates whether the specified <see cref="T:System.Char" /> object is a high surrogate.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsHighSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsHighSurrogate (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsHighSurrogate(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsHighSurrogate(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsHighSurrogate (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsHighSurrogate(char c);" />
      <MemberSignature Language="F#" Value="static member IsHighSurrogate : char -&gt; bool" Usage="System.char.IsHighSurrogate c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="9af29-364">要计算的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-364">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="9af29-365">指示指定的 <see cref="T:System.Char" /> 对象是否是一个高代理项。</span><span class="sxs-lookup"><span data-stu-id="9af29-365">Indicates whether the specified <see cref="T:System.Char" /> object is a high surrogate.</span></span></summary>
        <returns><span data-ttu-id="9af29-366">如果 <see langword="true" /> 参数的数值范围是从 U+D800 到 U+DBFF，则为 <paramref name="c" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-366"><see langword="true" /> if the numeric value of the <paramref name="c" /> parameter ranges from U+D800 through U+DBFF; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-367">除了表示使用 16 位代码点的单个字符，utf-16 编码允许抽象字符来表示使用两个 16 位码位，这被称为代理项对。</span><span class="sxs-lookup"><span data-stu-id="9af29-367">In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair.</span></span> <span data-ttu-id="9af29-368">在此对的第一个元素是高代理项。</span><span class="sxs-lookup"><span data-stu-id="9af29-368">The first element in this pair is the high surrogate.</span></span> <span data-ttu-id="9af29-369">其码位的范围从 u+d800 到 U + DBFF。</span><span class="sxs-lookup"><span data-stu-id="9af29-369">Its code point can range from U+D800 to U+DBFF.</span></span> <span data-ttu-id="9af29-370">单独的代理项具有其自身; 的任何解释它是有意义的仅当使用作为代理项对的一部分。</span><span class="sxs-lookup"><span data-stu-id="9af29-370">An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-371">下面的代码示例演示<xref:System.Char.IsHighSurrogate%2A>， <xref:System.Char.IsLowSurrogate%2A>，和<xref:System.Char.IsSurrogatePair%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9af29-371">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>  
  
 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHighSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsHighSurrogate (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsHighSurrogate(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsHighSurrogate(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsHighSurrogate (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsHighSurrogate(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsHighSurrogate : string * int -&gt; bool" Usage="System.char.IsHighSurrogate (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="9af29-372">一个字符串。</span><span class="sxs-lookup"><span data-stu-id="9af29-372">A string.</span></span></param>
        <param name="index"><span data-ttu-id="9af29-373"><paramref name="s" /> 中要计算的字符的位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-373">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="9af29-374">指示字符串中指定位置处的 <see cref="T:System.Char" /> 对象是否为高代理项。</span><span class="sxs-lookup"><span data-stu-id="9af29-374">Indicates whether the <see cref="T:System.Char" /> object at the specified position in a string is a high surrogate.</span></span></summary>
        <returns><span data-ttu-id="9af29-375">如果 <see langword="true" /> 中指定字符的数值范围是从 U+D800 到 U+DBFF，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-375"><see langword="true" /> if the numeric value of the specified character in the <paramref name="s" /> parameter ranges from U+D800 through U+DBFF; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-376">`index`参数是从零开始。</span><span class="sxs-lookup"><span data-stu-id="9af29-376">The `index` parameter is zero-based.</span></span>  
  
 <span data-ttu-id="9af29-377">除了表示使用 16 位代码点的单个字符，utf-16 编码允许抽象字符来表示使用两个 16 位码位，这被称为代理项对。</span><span class="sxs-lookup"><span data-stu-id="9af29-377">In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair.</span></span> <span data-ttu-id="9af29-378">在此对的第一个元素是高代理项。</span><span class="sxs-lookup"><span data-stu-id="9af29-378">The first element in this pair is the high surrogate.</span></span> <span data-ttu-id="9af29-379">其码位的范围从 u+d800 到 U + DBFF。</span><span class="sxs-lookup"><span data-stu-id="9af29-379">Its code point can range from U+D800 to U+DBFF.</span></span> <span data-ttu-id="9af29-380">单独的代理项具有其自身; 的任何解释它是有意义的仅当使用作为代理项对的一部分。</span><span class="sxs-lookup"><span data-stu-id="9af29-380">An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-381">下面的代码示例演示<xref:System.Char.IsHighSurrogate%2A>， <xref:System.Char.IsLowSurrogate%2A>，和<xref:System.Char.IsSurrogatePair%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9af29-381">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>  
  
 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9af29-382"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-382"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9af29-383"><paramref name="index" /> 不是 <paramref name="s" /> 内的位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-383"><paramref name="index" /> is not a position within <paramref name="s" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsLetter">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9af29-384">指示 Unicode 字符是否属于 Unicode 字母类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-384">Indicates whether a Unicode character is categorized as a Unicode letter.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-385">此方法可确定是否<xref:System.Char>是 Unicode 字母的任何类别的成员。</span><span class="sxs-lookup"><span data-stu-id="9af29-385">This method determines whether a <xref:System.Char> is a member of any category of Unicode letter.</span></span> <span data-ttu-id="9af29-386">Unicode 字母包括：</span><span class="sxs-lookup"><span data-stu-id="9af29-386">Unicode letters include the following:</span></span>  
  
-   <span data-ttu-id="9af29-387">大写形式，例如 u+0041 (LATIN CAPITAL LETTER A) 通过 U + 005A (LATIN CAPITAL LETTER Z)，或 u+0400 (西里尔文大写字母 IE WITH GRAVE) 通过 U + 042F （西里尔文大写字母白费）。</span><span class="sxs-lookup"><span data-stu-id="9af29-387">Uppercase letters, such as U+0041 (LATIN CAPITAL LETTER A) through U+005A (LATIN CAPITAL LETTER Z), or U+0400 (CYRILLIC CAPITAL LETTER IE WITH GRAVE) through U+042F (CYRILLIC CAPITAL LETTER YA).</span></span> <span data-ttu-id="9af29-388">这些字符均隶属于<xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType>类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-388">These characters are members of the <xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="9af29-389">小写字母，如 U + 0061 通过 U + 007A (拉丁文小写字母 A) (拉丁文小写字母 Z)，或 U + 03AC （希腊文小写字母 ALPHA 与音调符号） 通过 U + 03CE （希腊文小写字母 OMEGA 与音调符号）。</span><span class="sxs-lookup"><span data-stu-id="9af29-389">Lowercase letters, such as U+0061 (LATIN SMALL LETTER A) through U+007A (LATIN SMALL LETTER Z), or U+03AC (GREEK SMALL LETTER ALPHA WITH TONOS) through U+03CE (GREEK SMALL LETTER OMEGA WITH TONOS).</span></span> <span data-ttu-id="9af29-390">这些字符均隶属于<xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType>类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-390">These characters are members of the <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="9af29-391">标题大小写的字母中，如 U + 01 C 5 （LATIN CAPITAL LETTER D 与小写字母 Z 与抑扬符） 或 U + 1FFC (希腊文大写字母 OMEGA 与 PROSGEGRAMMENI)。</span><span class="sxs-lookup"><span data-stu-id="9af29-391">Title case letters, such as U+01C5 (LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON) or U+1FFC (GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI).</span></span> <span data-ttu-id="9af29-392">这些字符均隶属于<xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType>类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-392">These characters are members of the <xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="9af29-393">修饰符，如 U + 02B0 (修饰符字母小型 H) 到 U + 02C 1 （修饰符字母反转喉塞音停止），或 U + 1D2C (修饰符字母大写 A) 通过 U + 1D 61 （修饰符字母小卡方分布）。</span><span class="sxs-lookup"><span data-stu-id="9af29-393">Modifiers, such as U+02B0 (MODIFIER LETTER SMALL H) through U+02C1 (MODIFIER LETTER REVERSED GLOTTAL STOP), or U+1D2C (MODIFIER LETTER CAPITAL A) through U+1D61 (MODIFIER LETTER SMALL CHI).</span></span> <span data-ttu-id="9af29-394">这些字符均隶属于<xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType>类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-394">These characters are members of the <xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="9af29-395">其他字母，如 U + 05 D 0 (希伯来语 LETTER ALEF) 到 U + 05EA (希伯来语字母 TAV)，U + 0621 通过 U + 063A (阿拉伯语字母 HAMZA) (阿拉伯语字母 GHAIN) 或 U + 4E00 (\<CJK 象形文字、 第一个 >) 通过 U + 9 FC 3 (\<CJK 象形文字、 上一次>)。</span><span class="sxs-lookup"><span data-stu-id="9af29-395">Other letters, such as U+05D0 (HEBREW LETTER ALEF) through U+05EA (HEBREW LETTER TAV), U+0621 (ARABIC LETTER HAMZA) through U+063A (ARABIC LETTER GHAIN), or U+4E00 (\<CJK Ideograph, First>) through U+9FC3 (\<CJK Ideograph, Last>).</span></span> <span data-ttu-id="9af29-396">这些字符均隶属于<xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType>类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-396">These characters are members of the <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> category.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsLetter">
      <MemberSignature Language="C#" Value="public static bool IsLetter (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetter(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLetter(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLetter (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLetter(char c);" />
      <MemberSignature Language="F#" Value="static member IsLetter : char -&gt; bool" Usage="System.char.IsLetter c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="9af29-397">要计算的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-397">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="9af29-398">指示指定的 Unicode 字符是否属于 Unicode 字母类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-398">Indicates whether the specified Unicode character is categorized as a Unicode letter.</span></span></summary>
        <returns><span data-ttu-id="9af29-399">如果 <see langword="true" /> 是一个字母，则为 <paramref name="c" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-399"><see langword="true" /> if <paramref name="c" /> is a letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-400">此方法可确定是否<xref:System.Char>是 Unicode 字母的任何类别的成员。</span><span class="sxs-lookup"><span data-stu-id="9af29-400">This method determines whether a <xref:System.Char> is a member of any category of Unicode letter.</span></span> <span data-ttu-id="9af29-401">Unicode 字母包括：</span><span class="sxs-lookup"><span data-stu-id="9af29-401">Unicode letters include the following:</span></span>  
  
-   <span data-ttu-id="9af29-402">大写形式，例如 u+0041 (LATIN CAPITAL LETTER A) 通过 U + 005A (LATIN CAPITAL LETTER Z)，或 u+0400 (西里尔文大写字母 IE WITH GRAVE) 通过 U + 042F （西里尔文大写字母白费）。</span><span class="sxs-lookup"><span data-stu-id="9af29-402">Uppercase letters, such as U+0041 (LATIN CAPITAL LETTER A) through U+005A (LATIN CAPITAL LETTER Z), or U+0400 (CYRILLIC CAPITAL LETTER IE WITH GRAVE) through U+042F (CYRILLIC CAPITAL LETTER YA).</span></span> <span data-ttu-id="9af29-403">这些字符均隶属于<xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType>类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-403">These characters are members of the <xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="9af29-404">小写字母，如 U + 0061 通过 U + 007A (拉丁文小写字母 A) (拉丁文小写字母 Z)，或 U + 03AC （希腊文小写字母 ALPHA 与音调符号） 通过 U + 03CE （希腊文小写字母 OMEGA 与音调符号）。</span><span class="sxs-lookup"><span data-stu-id="9af29-404">Lowercase letters, such as U+0061 (LATIN SMALL LETTER A) through U+007A (LATIN SMALL LETTER Z), or U+03AC (GREEK SMALL LETTER ALPHA WITH TONOS) through U+03CE (GREEK SMALL LETTER OMEGA WITH TONOS).</span></span> <span data-ttu-id="9af29-405">这些字符均隶属于<xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType>类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-405">These characters are members of the <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="9af29-406">标题大小写的字母中，如 U + 01 C 5 （LATIN CAPITAL LETTER D 与小写字母 Z 与抑扬符） 或 U + 1FFC (希腊文大写字母 OMEGA 与 PROSGEGRAMMENI)。</span><span class="sxs-lookup"><span data-stu-id="9af29-406">Title case letters, such as U+01C5 (LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON) or U+1FFC (GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI).</span></span> <span data-ttu-id="9af29-407">这些字符均隶属于<xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType>类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-407">These characters are members of the <xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="9af29-408">修饰符，如 U + 02B0 (修饰符字母小型 H) 到 U + 02C 1 （修饰符字母反转喉塞音停止），或 U + 1D2C (修饰符字母大写 A) 通过 U + 1D 61 （修饰符字母小卡方分布）。</span><span class="sxs-lookup"><span data-stu-id="9af29-408">Modifiers, such as U+02B0 (MODIFIER LETTER SMALL H) through U+02C1 (MODIFIER LETTER REVERSED GLOTTAL STOP), or U+1D2C (MODIFIER LETTER CAPITAL A) through U+1D61 (MODIFIER LETTER SMALL CHI).</span></span> <span data-ttu-id="9af29-409">这些字符均隶属于<xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType>类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-409">These characters are members of the <xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="9af29-410">其他字母，如 U + 05 D 0 (希伯来语 LETTER ALEF) 到 U + 05EA (希伯来语字母 TAV)，U + 0621 通过 U + 063A (阿拉伯语字母 HAMZA) (阿拉伯语字母 GHAIN) 或 U + 4E00 (\<CJK 象形文字、 第一个 >) 通过 U + 9 FC 3 (\<CJK 象形文字、 上一次>)。</span><span class="sxs-lookup"><span data-stu-id="9af29-410">Other letters, such as U+05D0 (HEBREW LETTER ALEF) through U+05EA (HEBREW LETTER TAV), U+0621 (ARABIC LETTER HAMZA) through U+063A (ARABIC LETTER GHAIN), or U+4E00 (\<CJK Ideograph, First>) through U+9FC3 (\<CJK Ideograph, Last>).</span></span> <span data-ttu-id="9af29-411">这些字符均隶属于<xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType>类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-411">These characters are members of the <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> category.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-412">下面的代码示例演示了<xref:System.Char.IsLetter%2A>。</span><span class="sxs-lookup"><span data-stu-id="9af29-412">The following code example demonstrates <xref:System.Char.IsLetter%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsLetter#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLetter/CPP/isletter.cpp#5)]
 [!code-csharp[System.Char.IsLetter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLetter/CS/isletter.cs#5)]
 [!code-vb[System.Char.IsLetter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLetter/VB/isletter.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsLetter">
      <MemberSignature Language="C#" Value="public static bool IsLetter (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetter(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLetter(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLetter (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLetter(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsLetter : string * int -&gt; bool" Usage="System.char.IsLetter (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="9af29-413">一个字符串。</span><span class="sxs-lookup"><span data-stu-id="9af29-413">A string.</span></span></param>
        <param name="index"><span data-ttu-id="9af29-414"><paramref name="s" /> 中要计算的字符的位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-414">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="9af29-415">指示指定字符串中位于指定位置处的指定字符串是否属于 Unicode 字母类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-415">Indicates whether the character at the specified position in a specified string is categorized as a Unicode letter.</span></span></summary>
        <returns><span data-ttu-id="9af29-416">如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个字母，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-416"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-417">在字符串中的字符位置从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="9af29-417">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="9af29-418">此方法确定一个字符串中指定的索引位置处的字符是否为 Unicode 字母的任何类别的成员。</span><span class="sxs-lookup"><span data-stu-id="9af29-418">This method determines whether the character at a specified index position in a string is a member of any category of Unicode letter.</span></span> <span data-ttu-id="9af29-419">Unicode 字母包括：</span><span class="sxs-lookup"><span data-stu-id="9af29-419">Unicode letters include the following:</span></span>  
  
-   <span data-ttu-id="9af29-420">大写形式，例如 u+0041 (LATIN CAPITAL LETTER A) 通过 U + 005A (LATIN CAPITAL LETTER Z)，或 u+0400 (西里尔文大写字母 IE WITH GRAVE) 通过 U + 042F （西里尔文大写字母白费）。</span><span class="sxs-lookup"><span data-stu-id="9af29-420">Uppercase letters, such as U+0041 (LATIN CAPITAL LETTER A) through U+005A (LATIN CAPITAL LETTER Z), or U+0400 (CYRILLIC CAPITAL LETTER IE WITH GRAVE) through U+042F (CYRILLIC CAPITAL LETTER YA).</span></span> <span data-ttu-id="9af29-421">这些字符均隶属于<xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType>类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-421">These characters are members of the <xref:System.Globalization.UnicodeCategory.UppercaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="9af29-422">小写字母，如 U + 0061 通过 U + 007A (拉丁文小写字母 A) (拉丁文小写字母 Z)，或 U + 03AC （希腊文小写字母 ALPHA 与音调符号） 通过 U + 03CE （希腊文小写字母 OMEGA 与音调符号）。</span><span class="sxs-lookup"><span data-stu-id="9af29-422">Lowercase letters, such as U+0061 (LATIN SMALL LETTER A) through U+007A (LATIN SMALL LETTER Z), or U+03AC (GREEK SMALL LETTER ALPHA WITH TONOS) through U+03CE (GREEK SMALL LETTER OMEGA WITH TONOS).</span></span> <span data-ttu-id="9af29-423">这些字符均隶属于<xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType>类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-423">These characters are members of the <xref:System.Globalization.UnicodeCategory.LowercaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="9af29-424">标题大小写的字母中，如 U + 01 C 5 （LATIN CAPITAL LETTER D 与小写字母 Z 与抑扬符） 或 U + 1FFC (希腊文大写字母 OMEGA 与 PROSGEGRAMMENI)。</span><span class="sxs-lookup"><span data-stu-id="9af29-424">Title case letters, such as U+01C5 (LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON) or U+1FFC (GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI).</span></span> <span data-ttu-id="9af29-425">这些字符均隶属于<xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType>类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-425">These characters are members of the <xref:System.Globalization.UnicodeCategory.TitlecaseLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="9af29-426">修饰符，如 U + 02B0 (修饰符字母小型 H) 到 U + 02C 1 （修饰符字母反转喉塞音停止），或 U + 1D2C (修饰符字母大写 A) 通过 U + 1D 61 （修饰符字母小卡方分布）。</span><span class="sxs-lookup"><span data-stu-id="9af29-426">Modifiers, such as U+02B0 (MODIFIER LETTER SMALL H) through U+02C1 (MODIFIER LETTER REVERSED GLOTTAL STOP), or U+1D2C (MODIFIER LETTER CAPITAL A) through U+1D61 (MODIFIER LETTER SMALL CHI).</span></span> <span data-ttu-id="9af29-427">这些字符均隶属于<xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType>类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-427">These characters are members of the <xref:System.Globalization.UnicodeCategory.ModifierLetter?displayProperty=nameWithType> category.</span></span>  
  
-   <span data-ttu-id="9af29-428">其他字母，如 U + 05 D 0 (希伯来语 LETTER ALEF) 到 U + 05EA (希伯来语字母 TAV)，U + 0621 通过 U + 063A (阿拉伯语字母 HAMZA) (阿拉伯语字母 GHAIN) 或 U + 4E00 (\<CJK 象形文字、 第一个 >) 通过 U + 9 FC 3 (\<CJK 象形文字、 上一次>)。</span><span class="sxs-lookup"><span data-stu-id="9af29-428">Other letters, such as U+05D0 (HEBREW LETTER ALEF) through U+05EA (HEBREW LETTER TAV), U+0621 (ARABIC LETTER HAMZA) through U+063A (ARABIC LETTER GHAIN), or U+4E00 (\<CJK Ideograph, First>) through U+9FC3 (\<CJK Ideograph, Last>).</span></span> <span data-ttu-id="9af29-429">这些字符均隶属于<xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType>类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-429">These characters are members of the <xref:System.Globalization.UnicodeCategory.OtherLetter?displayProperty=nameWithType> category.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-430">下面的代码示例演示了<xref:System.Char.IsLetter%2A>。</span><span class="sxs-lookup"><span data-stu-id="9af29-430">The following code example demonstrates <xref:System.Char.IsLetter%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsLetter#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLetter/CPP/isletter.cpp#5)]
 [!code-csharp[System.Char.IsLetter#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLetter/CS/isletter.cs#5)]
 [!code-vb[System.Char.IsLetter#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLetter/VB/isletter.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9af29-431"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-431"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9af29-432"><paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-432"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsLetterOrDigit">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9af29-433">指示 Unicode 字符是否属于字母或十进制数字类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-433">Indicates whether a Unicode character is categorized as a letter or a decimal digit.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-434">有效的字母和十进制数字是中的以下类别的成员<xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`， `LowercaseLetter`， `TitlecaseLetter`， `ModifierLetter`， `OtherLetter`，或`DecimalDigitNumber`。</span><span class="sxs-lookup"><span data-stu-id="9af29-434">Valid letters and decimal digits are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`, `LowercaseLetter`, `TitlecaseLetter`, `ModifierLetter`, `OtherLetter`, or `DecimalDigitNumber`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsLetterOrDigit">
      <MemberSignature Language="C#" Value="public static bool IsLetterOrDigit (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetterOrDigit(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLetterOrDigit(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLetterOrDigit (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLetterOrDigit(char c);" />
      <MemberSignature Language="F#" Value="static member IsLetterOrDigit : char -&gt; bool" Usage="System.char.IsLetterOrDigit c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="9af29-435">要计算的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-435">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="9af29-436">指示指定的 Unicode 字符是否属于字母或十进制数字类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-436">Indicates whether the specified Unicode character is categorized as a letter or a decimal digit.</span></span></summary>
        <returns><span data-ttu-id="9af29-437">如果 <see langword="true" /> 是字母或十进制数，则为 <paramref name="c" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-437"><see langword="true" /> if <paramref name="c" /> is a letter or a decimal digit; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-438">有效的字母和十进制数字是中的以下类别的成员<xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`， `LowercaseLetter`， `TitlecaseLetter`， `ModifierLetter`， `OtherLetter`，或`DecimalDigitNumber`。</span><span class="sxs-lookup"><span data-stu-id="9af29-438">Valid letters and decimal digits are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`, `LowercaseLetter`, `TitlecaseLetter`, `ModifierLetter`, `OtherLetter`, or `DecimalDigitNumber`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-439">下面的代码示例演示了<xref:System.Char.IsLetterOrDigit%2A>。</span><span class="sxs-lookup"><span data-stu-id="9af29-439">The following code example demonstrates <xref:System.Char.IsLetterOrDigit%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsLetterOrDigit#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/CPP/isletterordigit.cpp#6)]
 [!code-csharp[System.Char.IsLetterOrDigit#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/CS/isletterordigit.cs#6)]
 [!code-vb[System.Char.IsLetterOrDigit#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/VB/isletterordigit.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsLetterOrDigit">
      <MemberSignature Language="C#" Value="public static bool IsLetterOrDigit (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLetterOrDigit(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLetterOrDigit(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLetterOrDigit (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLetterOrDigit(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsLetterOrDigit : string * int -&gt; bool" Usage="System.char.IsLetterOrDigit (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="9af29-440">一个字符串。</span><span class="sxs-lookup"><span data-stu-id="9af29-440">A string.</span></span></param>
        <param name="index"><span data-ttu-id="9af29-441"><paramref name="s" /> 中要计算的字符的位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-441">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="9af29-442">指示指定字符串中位于指定位置处的字符是否属于字母或十进制数字类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-442">Indicates whether the character at the specified position in a specified string is categorized as a letter or a decimal digit.</span></span></summary>
        <returns><span data-ttu-id="9af29-443">如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个字母或十进制数，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-443"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a letter or a decimal digit; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-444">在字符串中的字符位置从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="9af29-444">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="9af29-445">有效的字母和十进制数字是中的以下类别的成员<xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`， `LowercaseLetter`， `TitlecaseLetter`， `ModifierLetter`， `OtherLetter`，或`DecimalDigitNumber`。</span><span class="sxs-lookup"><span data-stu-id="9af29-445">Valid letters and decimal digits are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`, `LowercaseLetter`, `TitlecaseLetter`, `ModifierLetter`, `OtherLetter`, or `DecimalDigitNumber`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-446">下面的代码示例演示了<xref:System.Char.IsLetterOrDigit%2A>。</span><span class="sxs-lookup"><span data-stu-id="9af29-446">The following code example demonstrates <xref:System.Char.IsLetterOrDigit%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsLetterOrDigit#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/CPP/isletterordigit.cpp#6)]
 [!code-csharp[System.Char.IsLetterOrDigit#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/CS/isletterordigit.cs#6)]
 [!code-vb[System.Char.IsLetterOrDigit#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLetterOrDigit/VB/isletterordigit.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9af29-447"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-447"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9af29-448"><paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-448"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsLower">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9af29-449">指示 Unicode 字符是否属于小写字母类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-449">Indicates whether a Unicode character is categorized as a lowercase letter.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsLower">
      <MemberSignature Language="C#" Value="public static bool IsLower (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLower(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLower(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLower (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLower(char c);" />
      <MemberSignature Language="F#" Value="static member IsLower : char -&gt; bool" Usage="System.char.IsLower c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="9af29-450">要计算的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-450">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="9af29-451">指示指定的 Unicode 字符是否属于小写字母类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-451">Indicates whether the specified Unicode character is categorized as a lowercase letter.</span></span></summary>
        <returns><span data-ttu-id="9af29-452">如果 <see langword="true" /> 是一个小写字母，则为 <paramref name="c" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-452"><see langword="true" /> if <paramref name="c" /> is a lowercase letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-453">有效的小写字母是中的以下类别的成员<xref:System.Globalization.UnicodeCategory>: `LowercaseLetter`。</span><span class="sxs-lookup"><span data-stu-id="9af29-453">Valid lowercase letters are members of the following category in <xref:System.Globalization.UnicodeCategory>: `LowercaseLetter`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-454">下面的代码示例演示了<xref:System.Char.IsLower%2A>。</span><span class="sxs-lookup"><span data-stu-id="9af29-454">The following code example demonstrates <xref:System.Char.IsLower%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsLower#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLower/CPP/islower.cpp#7)]
 [!code-csharp[System.Char.IsLower#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLower/CS/islower.cs#7)]
 [!code-vb[System.Char.IsLower#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLower/VB/islower.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsUpper(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsLower">
      <MemberSignature Language="C#" Value="public static bool IsLower (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLower(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLower(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLower (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLower(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsLower : string * int -&gt; bool" Usage="System.char.IsLower (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="9af29-455">一个字符串。</span><span class="sxs-lookup"><span data-stu-id="9af29-455">A string.</span></span></param>
        <param name="index"><span data-ttu-id="9af29-456"><paramref name="s" /> 中要计算的字符的位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-456">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="9af29-457">指示指定字符串中位于指定位置处的字符是否属于小写字母类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-457">Indicates whether the character at the specified position in a specified string is categorized as a lowercase letter.</span></span></summary>
        <returns><span data-ttu-id="9af29-458">如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个小写字母，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-458"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a lowercase letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-459">在字符串中的字符位置从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="9af29-459">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="9af29-460">有效的小写字母是中的以下类别的成员<xref:System.Globalization.UnicodeCategory>: `LowercaseLetter`。</span><span class="sxs-lookup"><span data-stu-id="9af29-460">Valid lowercase letters are members of the following category in <xref:System.Globalization.UnicodeCategory>: `LowercaseLetter`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-461">下面的代码示例演示了<xref:System.Char.IsLower%2A>。</span><span class="sxs-lookup"><span data-stu-id="9af29-461">The following code example demonstrates <xref:System.Char.IsLower%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsLower#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsLower/CPP/islower.cpp#7)]
 [!code-csharp[System.Char.IsLower#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsLower/CS/islower.cs#7)]
 [!code-vb[System.Char.IsLower#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsLower/VB/islower.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9af29-462"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-462"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9af29-463"><paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-463"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Char.IsUpper(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsLowSurrogate">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9af29-464">指示指定的 <see cref="T:System.Char" /> 对象是否是一个低代理项。</span><span class="sxs-lookup"><span data-stu-id="9af29-464">Indicates whether the specified <see cref="T:System.Char" /> object is a low surrogate.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsLowSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsLowSurrogate (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLowSurrogate(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLowSurrogate(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLowSurrogate (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLowSurrogate(char c);" />
      <MemberSignature Language="F#" Value="static member IsLowSurrogate : char -&gt; bool" Usage="System.char.IsLowSurrogate c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="9af29-465">要计算的字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-465">The character to evaluate.</span></span></param>
        <summary><span data-ttu-id="9af29-466">指示指定的 <see cref="T:System.Char" /> 对象是否是一个低代理项。</span><span class="sxs-lookup"><span data-stu-id="9af29-466">Indicates whether the specified <see cref="T:System.Char" /> object is a low surrogate.</span></span></summary>
        <returns><span data-ttu-id="9af29-467">如果 <see langword="true" /> 参数的数值范围是从 U+DC00 到 U+DFFF，则为 <paramref name="c" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-467"><see langword="true" /> if the numeric value of the <paramref name="c" /> parameter ranges from U+DC00 through U+DFFF; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-468">除了表示使用 16 位代码点的单个字符，utf-16 编码允许抽象字符来表示使用两个 16 位码位，这被称为代理项对。</span><span class="sxs-lookup"><span data-stu-id="9af29-468">In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair.</span></span> <span data-ttu-id="9af29-469">在此对的第二个元素是低代理项。</span><span class="sxs-lookup"><span data-stu-id="9af29-469">The second element in this pair is the low surrogate.</span></span> <span data-ttu-id="9af29-470">其码位的范围从 u+dc00 到 U + DFFF。</span><span class="sxs-lookup"><span data-stu-id="9af29-470">Its code point can range from U+DC00 to U+DFFF.</span></span> <span data-ttu-id="9af29-471">单独的代理项具有其自身; 的任何解释它是有意义的仅当使用作为代理项对的一部分。</span><span class="sxs-lookup"><span data-stu-id="9af29-471">An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-472">下面的代码示例演示<xref:System.Char.IsHighSurrogate%2A>， <xref:System.Char.IsLowSurrogate%2A>，和<xref:System.Char.IsSurrogatePair%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9af29-472">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>  
  
 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLowSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsLowSurrogate (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLowSurrogate(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsLowSurrogate(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsLowSurrogate (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsLowSurrogate(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsLowSurrogate : string * int -&gt; bool" Usage="System.char.IsLowSurrogate (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="9af29-473">一个字符串。</span><span class="sxs-lookup"><span data-stu-id="9af29-473">A string.</span></span></param>
        <param name="index"><span data-ttu-id="9af29-474"><paramref name="s" /> 中要计算的字符的位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-474">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="9af29-475">指示字符串中指定位置处的 <see cref="T:System.Char" /> 对象是否为低代理项。</span><span class="sxs-lookup"><span data-stu-id="9af29-475">Indicates whether the <see cref="T:System.Char" /> object at the specified position in a string is a low surrogate.</span></span></summary>
        <returns><span data-ttu-id="9af29-476">如果 <see langword="true" /> 中指定字符的数值范围是从 U+DC00 到 U+DFFF，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-476"><see langword="true" /> if the numeric value of the specified character in the <paramref name="s" /> parameter ranges from U+DC00 through U+DFFF; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-477">`index`参数是从零开始。</span><span class="sxs-lookup"><span data-stu-id="9af29-477">The `index` parameter is zero-based.</span></span>  
  
 <span data-ttu-id="9af29-478">除了表示使用 16 位代码点的单个字符，utf-16 编码允许抽象字符来表示使用两个 16 位码位，这被称为代理项对。</span><span class="sxs-lookup"><span data-stu-id="9af29-478">In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair.</span></span> <span data-ttu-id="9af29-479">在此对的第二个元素是低代理项。</span><span class="sxs-lookup"><span data-stu-id="9af29-479">The second element in this pair is the low surrogate.</span></span> <span data-ttu-id="9af29-480">其码位的范围从 u+dc00 到 U + DFFF。</span><span class="sxs-lookup"><span data-stu-id="9af29-480">Its code point can range from U+DC00 to U+DFFF.</span></span> <span data-ttu-id="9af29-481">单独的代理项具有其自身; 的任何解释它是有意义的仅当使用作为代理项对的一部分。</span><span class="sxs-lookup"><span data-stu-id="9af29-481">An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-482">下面的代码示例演示<xref:System.Char.IsHighSurrogate%2A>， <xref:System.Char.IsLowSurrogate%2A>，和<xref:System.Char.IsSurrogatePair%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9af29-482">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>  
  
 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9af29-483"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-483"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9af29-484"><paramref name="index" /> 不是 <paramref name="s" /> 内的位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-484"><paramref name="index" /> is not a position within <paramref name="s" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsNumber">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9af29-485">指示 Unicode 字符是否属于数字类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-485">Indicates whether a Unicode character is categorized as a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public static bool IsNumber (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNumber(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsNumber(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNumber (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumber(char c);" />
      <MemberSignature Language="F#" Value="static member IsNumber : char -&gt; bool" Usage="System.char.IsNumber c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="9af29-486">要计算的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-486">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="9af29-487">指示指定的 Unicode 字符是否属于数字类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-487">Indicates whether the specified Unicode character is categorized as a number.</span></span></summary>
        <returns><span data-ttu-id="9af29-488">如果 <see langword="true" /> 是一个数字，则为 <paramref name="c" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-488"><see langword="true" /> if <paramref name="c" /> is a number; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-489">此方法可确定是否<xref:System.Char>的任何数值的 Unicode 类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-489">This method determines whether a <xref:System.Char> is of any numeric Unicode category.</span></span> <span data-ttu-id="9af29-490">除了包含数字，数字包括字符、 分数、 下标、 上标、 罗马数字、 货币分子和循环的数。</span><span class="sxs-lookup"><span data-stu-id="9af29-490">In addition to including digits, numbers include characters, fractions, subscripts, superscripts, Roman numerals, currency numerators, and encircled numbers.</span></span> <span data-ttu-id="9af29-491">此方法与形成对比<xref:System.Char.IsDigit%2A>方法，这可确定是否<xref:System.Char>是基数 10 位数字。</span><span class="sxs-lookup"><span data-stu-id="9af29-491">This method contrasts with the <xref:System.Char.IsDigit%2A> method, which determines whether a <xref:System.Char> is a radix-10 digit.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9af29-492"><xref:System.Char.IsNumber%28System.Char%29>方法不应以确定是否一个字符串，包含的数字字符 （例如，通过调用方法对字符串中每个字符）。</span><span class="sxs-lookup"><span data-stu-id="9af29-492">The <xref:System.Char.IsNumber%28System.Char%29> method is not intended to determine whether a string consists of numeric characters (for example, by calling the method for each character in a string).</span></span> <span data-ttu-id="9af29-493">若要确定字符串是否包含数字字符，调用的重载之一`TryParse`方法 (如<xref:System.Int32.TryParse%2A?displayProperty=nameWithType>或<xref:System.Double.TryParse%2A?displayProperty=nameWithType>的整型或浮点型类型。</span><span class="sxs-lookup"><span data-stu-id="9af29-493">To determine whether a string consists of numeric characters, call one of the overloads of the `TryParse` method (such as <xref:System.Int32.TryParse%2A?displayProperty=nameWithType> or <xref:System.Double.TryParse%2A?displayProperty=nameWithType> of an integral or floating point type.</span></span>  
  
 <span data-ttu-id="9af29-494">有效的数字是的成员<xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>， <xref:System.Globalization.UnicodeCategory.LetterNumber?displayProperty=nameWithType>，或<xref:System.Globalization.UnicodeCategory.OtherNumber?displayProperty=nameWithType>类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-494">Valid numbers are members of the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>, <xref:System.Globalization.UnicodeCategory.LetterNumber?displayProperty=nameWithType>, or <xref:System.Globalization.UnicodeCategory.OtherNumber?displayProperty=nameWithType> category.</span></span>  
  
 <span data-ttu-id="9af29-495"><xref:System.Char.IsNumber%28System.Char%29>方法假设`c`对应于单一语言字符，并检查是否该字符表示的数字。</span><span class="sxs-lookup"><span data-stu-id="9af29-495">The <xref:System.Char.IsNumber%28System.Char%29> method assumes that `c` corresponds to a single linguistic character and checks whether that character represents a number.</span></span> <span data-ttu-id="9af29-496">但是，由两个表示 Unicode 标准中的某些数字<xref:System.Char>形成一个代理项对的对象。</span><span class="sxs-lookup"><span data-stu-id="9af29-496">However, some numbers in the Unicode standard are represented by two <xref:System.Char> objects that form a surrogate pair.</span></span> <span data-ttu-id="9af29-497">例如，数字系统爱琴包含码位 U + 10107 至 U + 10133。</span><span class="sxs-lookup"><span data-stu-id="9af29-497">For example, the Aegean numbering system consists of code points U+10107 through U+10133.</span></span> <span data-ttu-id="9af29-498">下面的示例使用<xref:System.Char.ConvertFromUtf32%2A>方法可实例化一个字符串，表示爱琴海的第一个。</span><span class="sxs-lookup"><span data-stu-id="9af29-498">The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents AEGEAN NUMBER ONE.</span></span> <span data-ttu-id="9af29-499">如示例所示，输出<xref:System.Char.IsNumber%28System.Char%29>方法将返回`false`如果它传递一个高代理项或低代理项的此字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-499">As the output from the example shows, the <xref:System.Char.IsNumber%28System.Char%29> method returns `false` if it is passed either a high surrogate or a low surrogate of this character.</span></span>  
  
 [!code-csharp[System.Char.IsNumber#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsNumber/CS/isnumber1.cs#1)]
 [!code-vb[System.Char.IsNumber#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsNumber/VB/isnumber1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="9af29-500">下面的示例演示<xref:System.Char.IsNumber%2A>。</span><span class="sxs-lookup"><span data-stu-id="9af29-500">The following example demonstrates <xref:System.Char.IsNumber%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsNumber#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsNumber/CPP/isnumber.cpp#8)]
 [!code-csharp[System.Char.IsNumber#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsNumber/CS/isnumber.cs#8)]
 [!code-vb[System.Char.IsNumber#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsNumber/VB/isnumber.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsDigit(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsNumber">
      <MemberSignature Language="C#" Value="public static bool IsNumber (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNumber(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsNumber(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsNumber (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsNumber(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsNumber : string * int -&gt; bool" Usage="System.char.IsNumber (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="9af29-501">一个字符串。</span><span class="sxs-lookup"><span data-stu-id="9af29-501">A string.</span></span></param>
        <param name="index"><span data-ttu-id="9af29-502"><paramref name="s" /> 中要计算的字符的位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-502">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="9af29-503">指示指定字符串中位于指定位置的字符是否属于数字类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-503">Indicates whether the character at the specified position in a specified string is categorized as a number.</span></span></summary>
        <returns><span data-ttu-id="9af29-504">如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个数字，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-504"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a number; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-505">此方法可确定是否<xref:System.Char>的任何数值的 Unicode 类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-505">This method determines whether a <xref:System.Char> is of any numeric Unicode category.</span></span> <span data-ttu-id="9af29-506">除了包含数字，数字包括字符、 分数、 下标、 上标、 罗马数字、 货币分子和循环的数。</span><span class="sxs-lookup"><span data-stu-id="9af29-506">In addition to including digits, numbers include characters, fractions, subscripts, superscripts, Roman numerals, currency numerators, and encircled numbers.</span></span> <span data-ttu-id="9af29-507">此方法与形成对比<xref:System.Char.IsDigit%2A>方法，这可确定是否<xref:System.Char>是基数 10 位数字。</span><span class="sxs-lookup"><span data-stu-id="9af29-507">This method contrasts with the <xref:System.Char.IsDigit%2A> method, which determines whether a <xref:System.Char> is a radix-10 digit.</span></span>  
  
 <span data-ttu-id="9af29-508">在字符串中的字符位置从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="9af29-508">Character positions in a string are indexed starting from zero.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9af29-509"><xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29>方法不应以确定是否一个字符串，包含的数字字符 （例如，通过调用方法对字符串中每个字符）。</span><span class="sxs-lookup"><span data-stu-id="9af29-509">The <xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29> method is not intended to determine whether a string consists of numeric characters (for example, by calling the method for each character in a string).</span></span> <span data-ttu-id="9af29-510">若要确定字符串是否包含数字字符，调用的重载之一`TryParse`方法 (如<xref:System.Int32.TryParse%2A?displayProperty=nameWithType>或<xref:System.Double.TryParse%2A?displayProperty=nameWithType>的整型或浮点型类型。</span><span class="sxs-lookup"><span data-stu-id="9af29-510">To determine whether a string consists of numeric characters, call one of the overloads of the `TryParse` method (such as <xref:System.Int32.TryParse%2A?displayProperty=nameWithType> or <xref:System.Double.TryParse%2A?displayProperty=nameWithType> of an integral or floating point type.</span></span>  
  
 <span data-ttu-id="9af29-511">有效的数字是的成员<xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>， <xref:System.Globalization.UnicodeCategory.LetterNumber?displayProperty=nameWithType>，或<xref:System.Globalization.UnicodeCategory.OtherNumber?displayProperty=nameWithType>类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-511">Valid numbers are members of the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber?displayProperty=nameWithType>, <xref:System.Globalization.UnicodeCategory.LetterNumber?displayProperty=nameWithType>, or <xref:System.Globalization.UnicodeCategory.OtherNumber?displayProperty=nameWithType> category.</span></span>  
  
 <span data-ttu-id="9af29-512">如果<xref:System.Char>位置处的对象`index`第一个字符是一个有效的代理项对，<xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29>方法确定是否将代理项对窗体的一个数字。</span><span class="sxs-lookup"><span data-stu-id="9af29-512">If the <xref:System.Char> object at position `index` is the first character of a valid surrogate pair, the <xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29> method determines whether the surrogate pair forms a numeric digit.</span></span> <span data-ttu-id="9af29-513">例如，数字系统爱琴包含码位 U + 10107 至 U + 10133。</span><span class="sxs-lookup"><span data-stu-id="9af29-513">For example, the Aegean numbering system consists of code points U+10107 through U+10133.</span></span> <span data-ttu-id="9af29-514">下面的示例使用<xref:System.Char.ConvertFromUtf32%2A>方法可实例化一个字符串，表示爱琴海的第一个。</span><span class="sxs-lookup"><span data-stu-id="9af29-514">The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents AEGEAN NUMBER ONE.</span></span> <span data-ttu-id="9af29-515">如示例所示，输出<xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29>方法将返回`true`如果它传递爱琴海第一个高代理项。</span><span class="sxs-lookup"><span data-stu-id="9af29-515">As the output from the example shows, the <xref:System.Char.IsNumber%28System.String%2CSystem.Int32%29> method returns `true` if it is passed the high surrogate of AEGEAN NUMBER ONE.</span></span> <span data-ttu-id="9af29-516">但是，如果它传递的低代理项，则它会考虑仅低代理项的类别并返回`false`。</span><span class="sxs-lookup"><span data-stu-id="9af29-516">However, if it is passed the low surrogate, it considers only the category of the low surrogate and returns `false`.</span></span>  
  
 [!code-csharp[System.Char.IsNumber#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsNumber/CS/isnumber1.cs#2)]
 [!code-vb[System.Char.IsNumber#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsNumber/VB/isnumber1.vb#2)]  
  
   
  
## Examples  
 <span data-ttu-id="9af29-517">下面的示例演示<xref:System.Char.IsNumber%2A>。</span><span class="sxs-lookup"><span data-stu-id="9af29-517">The following example demonstrates <xref:System.Char.IsNumber%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsNumber#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsNumber/CPP/isnumber.cpp#8)]
 [!code-csharp[System.Char.IsNumber#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsNumber/CS/isnumber.cs#8)]
 [!code-vb[System.Char.IsNumber#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsNumber/VB/isnumber.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9af29-518"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-518"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9af29-519"><paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-519"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
        <altmember cref="M:System.Char.IsDigit(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsPunctuation">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9af29-520">指示 Unicode 字符是否属于标点符号类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-520">Indicates whether a Unicode character is categorized as a punctuation mark.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-521">有效的标点符号是中的以下类别的成员<xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`， `DashPunctuation`， `OpenPunctuation`， `ClosePunctuation`， `InititalQuotePunctuation`， `FinalQuotePunctuation`，或`OtherPunctuation`。</span><span class="sxs-lookup"><span data-stu-id="9af29-521">Valid punctuation marks are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`, `DashPunctuation`, `OpenPunctuation`, `ClosePunctuation`, `InititalQuotePunctuation`, `FinalQuotePunctuation`, or `OtherPunctuation`.</span></span> <span data-ttu-id="9af29-522">它们包括字符与下表中列出的 Unicode 码位。</span><span class="sxs-lookup"><span data-stu-id="9af29-522">They include characters with the Unicode code points listed in the following table.</span></span>  
  
|||||  
|-|-|-|-|  
|<span data-ttu-id="9af29-523">U+0021 到 U + 0023</span><span class="sxs-lookup"><span data-stu-id="9af29-523">U+0021 to U+0023</span></span>|<span data-ttu-id="9af29-524">U + 060 C 和 U + 060 D</span><span class="sxs-lookup"><span data-stu-id="9af29-524">U+060C and U+060D</span></span>|<span data-ttu-id="9af29-525">U + 1800 到 U + 180A</span><span class="sxs-lookup"><span data-stu-id="9af29-525">U+1800 to U+180A</span></span>|<span data-ttu-id="9af29-526">U + 3014 到 U + 301F</span><span class="sxs-lookup"><span data-stu-id="9af29-526">U+3014 to U+301F</span></span>|  
|<span data-ttu-id="9af29-527">U + 0025 到 U + 002A</span><span class="sxs-lookup"><span data-stu-id="9af29-527">U+0025 to U+002A</span></span>|<span data-ttu-id="9af29-528">U+061B</span><span class="sxs-lookup"><span data-stu-id="9af29-528">U+061B</span></span>|<span data-ttu-id="9af29-529">U + 1944年和 U + 1945</span><span class="sxs-lookup"><span data-stu-id="9af29-529">U+1944 and U+1945</span></span>|<span data-ttu-id="9af29-530">U+3030</span><span class="sxs-lookup"><span data-stu-id="9af29-530">U+3030</span></span>|  
|<span data-ttu-id="9af29-531">U + 002 C 到 U + 002F</span><span class="sxs-lookup"><span data-stu-id="9af29-531">U+002C to U+002F</span></span>|<span data-ttu-id="9af29-532">U + 061E 和 U + 061F</span><span class="sxs-lookup"><span data-stu-id="9af29-532">U+061E and U+061F</span></span>|<span data-ttu-id="9af29-533">U + 19DE 和 U + 19DF</span><span class="sxs-lookup"><span data-stu-id="9af29-533">U+19DE and U+19DF</span></span>|<span data-ttu-id="9af29-534">U + 303D</span><span class="sxs-lookup"><span data-stu-id="9af29-534">U+303D</span></span>|  
|<span data-ttu-id="9af29-535">U + 003A 和 U + 003B</span><span class="sxs-lookup"><span data-stu-id="9af29-535">U+003A and U+003B</span></span>|<span data-ttu-id="9af29-536">U + 066A 到 U + 066 D</span><span class="sxs-lookup"><span data-stu-id="9af29-536">U+066A to U+066D</span></span>|<span data-ttu-id="9af29-537">U + 1A1E 和 U + 1A1F</span><span class="sxs-lookup"><span data-stu-id="9af29-537">U+1A1E and U+1A1F</span></span>|<span data-ttu-id="9af29-538">U + 30A0</span><span class="sxs-lookup"><span data-stu-id="9af29-538">U+30A0</span></span>|  
|<span data-ttu-id="9af29-539">U + 003F 和 U + 0040</span><span class="sxs-lookup"><span data-stu-id="9af29-539">U+003F and U+0040</span></span>|<span data-ttu-id="9af29-540">U+06D4</span><span class="sxs-lookup"><span data-stu-id="9af29-540">U+06D4</span></span>|<span data-ttu-id="9af29-541">U + 1B5A 到 U + 1B60</span><span class="sxs-lookup"><span data-stu-id="9af29-541">U+1B5A to U+1B60</span></span>|<span data-ttu-id="9af29-542">U + 30FB</span><span class="sxs-lookup"><span data-stu-id="9af29-542">U+30FB</span></span>|  
|<span data-ttu-id="9af29-543">U + 005B 到 U + 005 D</span><span class="sxs-lookup"><span data-stu-id="9af29-543">U+005B to U+005D</span></span>|<span data-ttu-id="9af29-544">U+0700 到 U + 070 D</span><span class="sxs-lookup"><span data-stu-id="9af29-544">U+0700 to U+070D</span></span>|<span data-ttu-id="9af29-545">U + 2010 到 U + 2027</span><span class="sxs-lookup"><span data-stu-id="9af29-545">U+2010 to U+2027</span></span>|<span data-ttu-id="9af29-546">U + A874 到 U + A877</span><span class="sxs-lookup"><span data-stu-id="9af29-546">U+A874 to U+A877</span></span>|  
|<span data-ttu-id="9af29-547">U+005F</span><span class="sxs-lookup"><span data-stu-id="9af29-547">U+005F</span></span>|<span data-ttu-id="9af29-548">U + 07F7 到 U + 07F9</span><span class="sxs-lookup"><span data-stu-id="9af29-548">U+07F7 to U+07F9</span></span>|<span data-ttu-id="9af29-549">U+2030 到 U + 2043</span><span class="sxs-lookup"><span data-stu-id="9af29-549">U+2030 to U+2043</span></span>|<span data-ttu-id="9af29-550">U + FD3E 和 U + FD3F</span><span class="sxs-lookup"><span data-stu-id="9af29-550">U+FD3E and U+FD3F</span></span>|  
|<span data-ttu-id="9af29-551">U + 007B</span><span class="sxs-lookup"><span data-stu-id="9af29-551">U+007B</span></span>|<span data-ttu-id="9af29-552">U + 0964年和 U + 0965</span><span class="sxs-lookup"><span data-stu-id="9af29-552">U+0964 and U+0965</span></span>|<span data-ttu-id="9af29-553">U + 2045 到 U + 2051</span><span class="sxs-lookup"><span data-stu-id="9af29-553">U+2045 to U+2051</span></span>|<span data-ttu-id="9af29-554">到 U + FE19 U+FE10</span><span class="sxs-lookup"><span data-stu-id="9af29-554">U+FE10 to U+FE19</span></span>|  
|<span data-ttu-id="9af29-555">U + 007 D</span><span class="sxs-lookup"><span data-stu-id="9af29-555">U+007D</span></span>|<span data-ttu-id="9af29-556">U+0970</span><span class="sxs-lookup"><span data-stu-id="9af29-556">U+0970</span></span>|<span data-ttu-id="9af29-557">U + 2053 到 U + 205E</span><span class="sxs-lookup"><span data-stu-id="9af29-557">U+2053 to U+205E</span></span>|<span data-ttu-id="9af29-558">到 U + FE52 U+FE30</span><span class="sxs-lookup"><span data-stu-id="9af29-558">U+FE30 to U+FE52</span></span>|  
|<span data-ttu-id="9af29-559">U+00A1</span><span class="sxs-lookup"><span data-stu-id="9af29-559">U+00A1</span></span>|<span data-ttu-id="9af29-560">U+0DF4</span><span class="sxs-lookup"><span data-stu-id="9af29-560">U+0DF4</span></span>|<span data-ttu-id="9af29-561">U + 207 D 和 U + 207E</span><span class="sxs-lookup"><span data-stu-id="9af29-561">U+207D and  U+207E</span></span>|<span data-ttu-id="9af29-562">U + FE54 到 U + FE61</span><span class="sxs-lookup"><span data-stu-id="9af29-562">U+FE54 to U+FE61</span></span>|  
|<span data-ttu-id="9af29-563">U + 00AB</span><span class="sxs-lookup"><span data-stu-id="9af29-563">U+00AB</span></span>|<span data-ttu-id="9af29-564">U + 0E4F 到 U + 0E5B</span><span class="sxs-lookup"><span data-stu-id="9af29-564">U+0E4F to U+0E5B</span></span>|<span data-ttu-id="9af29-565">U + 208 D 和 U + 208E</span><span class="sxs-lookup"><span data-stu-id="9af29-565">U+208D and U+208E</span></span>|<span data-ttu-id="9af29-566">U+FE63</span><span class="sxs-lookup"><span data-stu-id="9af29-566">U+FE63</span></span>|  
|<span data-ttu-id="9af29-567">U + 00AD</span><span class="sxs-lookup"><span data-stu-id="9af29-567">U+00AD</span></span>|<span data-ttu-id="9af29-568">U + 0F04 到 U + 0F12</span><span class="sxs-lookup"><span data-stu-id="9af29-568">U+0F04 to U+0F12</span></span>|<span data-ttu-id="9af29-569">U + 2329年和 U + 232A</span><span class="sxs-lookup"><span data-stu-id="9af29-569">U+2329 and U+232A</span></span>|<span data-ttu-id="9af29-570">U+FE68</span><span class="sxs-lookup"><span data-stu-id="9af29-570">U+FE68</span></span>|  
|<span data-ttu-id="9af29-571">U + 00B7</span><span class="sxs-lookup"><span data-stu-id="9af29-571">U+00B7</span></span>|<span data-ttu-id="9af29-572">U + 0F3A 到 U + 0F3D</span><span class="sxs-lookup"><span data-stu-id="9af29-572">U+0F3A to U+0F3D</span></span>|<span data-ttu-id="9af29-573">U + 2768 到 U + 2775</span><span class="sxs-lookup"><span data-stu-id="9af29-573">U+2768 to U+2775</span></span>|<span data-ttu-id="9af29-574">U + FE6A 和 U + FE6B</span><span class="sxs-lookup"><span data-stu-id="9af29-574">U+FE6A and U+FE6B</span></span>|  
|<span data-ttu-id="9af29-575">U + 00BB</span><span class="sxs-lookup"><span data-stu-id="9af29-575">U+00BB</span></span>|<span data-ttu-id="9af29-576">U+0F85</span><span class="sxs-lookup"><span data-stu-id="9af29-576">U+0F85</span></span>|<span data-ttu-id="9af29-577">U + 27C 5 到 U + 27C 6</span><span class="sxs-lookup"><span data-stu-id="9af29-577">U+27C5 to U+27C6</span></span>|<span data-ttu-id="9af29-578">U + FF01 到 U + FF03</span><span class="sxs-lookup"><span data-stu-id="9af29-578">U+FF01 to U+FF03</span></span>|  
|<span data-ttu-id="9af29-579">U + 00BF</span><span class="sxs-lookup"><span data-stu-id="9af29-579">U+00BF</span></span>|<span data-ttu-id="9af29-580">U + 0FD0 和 U + 0FD1</span><span class="sxs-lookup"><span data-stu-id="9af29-580">U+0FD0 and U+0FD1</span></span>|<span data-ttu-id="9af29-581">U + 27E6 到 U + 27EB</span><span class="sxs-lookup"><span data-stu-id="9af29-581">U+27E6 to U+27EB</span></span>|<span data-ttu-id="9af29-582">U + FF05 到 U + FF0A</span><span class="sxs-lookup"><span data-stu-id="9af29-582">U+FF05 to U+FF0A</span></span>|  
|<span data-ttu-id="9af29-583">U+037E</span><span class="sxs-lookup"><span data-stu-id="9af29-583">U+037E</span></span>|<span data-ttu-id="9af29-584">U + 104A 到 U + 104F</span><span class="sxs-lookup"><span data-stu-id="9af29-584">U+104A to U+104F</span></span>|<span data-ttu-id="9af29-585">U + 2983 到 U + 2998</span><span class="sxs-lookup"><span data-stu-id="9af29-585">U+2983 to U+2998</span></span>|<span data-ttu-id="9af29-586">U + FF0C 到 U + FF0F</span><span class="sxs-lookup"><span data-stu-id="9af29-586">U+FF0C to U+FF0F</span></span>|  
|<span data-ttu-id="9af29-587">U+0387</span><span class="sxs-lookup"><span data-stu-id="9af29-587">U+0387</span></span>|<span data-ttu-id="9af29-588">U + 10FB</span><span class="sxs-lookup"><span data-stu-id="9af29-588">U+10FB</span></span>|<span data-ttu-id="9af29-589">到 U + 29DB U + 29D 8</span><span class="sxs-lookup"><span data-stu-id="9af29-589">U+29D8 to U+29DB</span></span>|<span data-ttu-id="9af29-590">U + FF1A 和 U + FF1B</span><span class="sxs-lookup"><span data-stu-id="9af29-590">U+FF1A and U+FF1B</span></span>|  
|<span data-ttu-id="9af29-591">U + 055A 到 U + 055F</span><span class="sxs-lookup"><span data-stu-id="9af29-591">U+055A to U+055F</span></span>|<span data-ttu-id="9af29-592">U + 1361 到 U + 1368</span><span class="sxs-lookup"><span data-stu-id="9af29-592">U+1361 to U+1368</span></span>|<span data-ttu-id="9af29-593">U + 29 FC 和 U + 29FD</span><span class="sxs-lookup"><span data-stu-id="9af29-593">U+29FC and U+29FD</span></span>|<span data-ttu-id="9af29-594">U + FF1F 和 U + FF20</span><span class="sxs-lookup"><span data-stu-id="9af29-594">U+FF1F and U+FF20</span></span>|  
|<span data-ttu-id="9af29-595">U + 0589年和 U + 058A</span><span class="sxs-lookup"><span data-stu-id="9af29-595">U+0589 and U+058A</span></span>|<span data-ttu-id="9af29-596">U + 166 D 和 U + 166E</span><span class="sxs-lookup"><span data-stu-id="9af29-596">U+166D and U+166E</span></span>|<span data-ttu-id="9af29-597">U + 2CF9 到 U + 2CFC</span><span class="sxs-lookup"><span data-stu-id="9af29-597">U+2CF9 to U+2CFC</span></span>|<span data-ttu-id="9af29-598">U + FF3B 到 U + FF3D</span><span class="sxs-lookup"><span data-stu-id="9af29-598">U+FF3B to U+FF3D</span></span>|  
|<span data-ttu-id="9af29-599">U + 05BE</span><span class="sxs-lookup"><span data-stu-id="9af29-599">U+05BE</span></span>|<span data-ttu-id="9af29-600">U + 169B 和 U + 169 C</span><span class="sxs-lookup"><span data-stu-id="9af29-600">U+169B and U+169C</span></span>|<span data-ttu-id="9af29-601">U + 2CFE 和 U + 2CFF</span><span class="sxs-lookup"><span data-stu-id="9af29-601">U+2CFE and U+2CFF</span></span>|<span data-ttu-id="9af29-602">U+FF3F</span><span class="sxs-lookup"><span data-stu-id="9af29-602">U+FF3F</span></span>|  
|<span data-ttu-id="9af29-603">U+05C0</span><span class="sxs-lookup"><span data-stu-id="9af29-603">U+05C0</span></span>|<span data-ttu-id="9af29-604">U + 16EB 到 U + 16ED</span><span class="sxs-lookup"><span data-stu-id="9af29-604">U+16EB to U+16ED</span></span>|<span data-ttu-id="9af29-605">U + 2E00 到 U + 2E17</span><span class="sxs-lookup"><span data-stu-id="9af29-605">U+2E00 to U+2E17</span></span>|<span data-ttu-id="9af29-606">U + FF5B</span><span class="sxs-lookup"><span data-stu-id="9af29-606">U+FF5B</span></span>|  
|<span data-ttu-id="9af29-607">U+05C3</span><span class="sxs-lookup"><span data-stu-id="9af29-607">U+05C3</span></span>|<span data-ttu-id="9af29-608">U + 1735年和 U + 1736</span><span class="sxs-lookup"><span data-stu-id="9af29-608">U+1735 and U+1736</span></span>|<span data-ttu-id="9af29-609">U + 2E1C 和 U + 2E1D</span><span class="sxs-lookup"><span data-stu-id="9af29-609">U+2E1C and U+2E1D</span></span>|<span data-ttu-id="9af29-610">U + FF5D</span><span class="sxs-lookup"><span data-stu-id="9af29-610">U+FF5D</span></span>|  
|<span data-ttu-id="9af29-611">U+05C6</span><span class="sxs-lookup"><span data-stu-id="9af29-611">U+05C6</span></span>|<span data-ttu-id="9af29-612">U + 17D 4 到 U + 17D 6</span><span class="sxs-lookup"><span data-stu-id="9af29-612">U+17D4 to U+17D6</span></span>|<span data-ttu-id="9af29-613">U + 3001 到 U + 3003</span><span class="sxs-lookup"><span data-stu-id="9af29-613">U+3001 to U+3003</span></span>|<span data-ttu-id="9af29-614">U + FF5F 到 U + FF65</span><span class="sxs-lookup"><span data-stu-id="9af29-614">U+FF5F to U+FF65</span></span>|  
|<span data-ttu-id="9af29-615">U + 05F3 和 U + 05F4</span><span class="sxs-lookup"><span data-stu-id="9af29-615">U+05F3 and U+05F4</span></span>|<span data-ttu-id="9af29-616">到 U + 17DA U + 17D 8</span><span class="sxs-lookup"><span data-stu-id="9af29-616">U+17D8 to U+17DA</span></span>|<span data-ttu-id="9af29-617">U + 3008 到 U + 3011</span><span class="sxs-lookup"><span data-stu-id="9af29-617">U+3008 to U+3011</span></span>||  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsPunctuation">
      <MemberSignature Language="C#" Value="public static bool IsPunctuation (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPunctuation(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsPunctuation(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPunctuation (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPunctuation(char c);" />
      <MemberSignature Language="F#" Value="static member IsPunctuation : char -&gt; bool" Usage="System.char.IsPunctuation c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="9af29-618">要计算的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-618">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="9af29-619">指示指定的 Unicode 字符是否属于标点符号类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-619">Indicates whether the specified Unicode character is categorized as a punctuation mark.</span></span></summary>
        <returns><span data-ttu-id="9af29-620">如果 <see langword="true" /> 是一个标点符号，则为 <paramref name="c" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-620"><see langword="true" /> if <paramref name="c" /> is a punctuation mark; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-621">有效的标点符号是中的以下类别的成员<xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`， `DashPunctuation`， `OpenPunctuation`， `ClosePunctuation`， `InititalQuotePunctuation`， `FinalQuotePunctuation`，或`OtherPunctuation`。</span><span class="sxs-lookup"><span data-stu-id="9af29-621">Valid punctuation marks are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`, `DashPunctuation`, `OpenPunctuation`, `ClosePunctuation`, `InititalQuotePunctuation`, `FinalQuotePunctuation`, or `OtherPunctuation`.</span></span> <span data-ttu-id="9af29-622">它们包括字符与下表中列出的 Unicode 码位。</span><span class="sxs-lookup"><span data-stu-id="9af29-622">They include characters with the Unicode code points listed in the following table.</span></span>  
  
|||||  
|-|-|-|-|  
|<span data-ttu-id="9af29-623">U+0021 到 U + 0023</span><span class="sxs-lookup"><span data-stu-id="9af29-623">U+0021 to U+0023</span></span>|<span data-ttu-id="9af29-624">U + 060 C 和 U + 060 D</span><span class="sxs-lookup"><span data-stu-id="9af29-624">U+060C and U+060D</span></span>|<span data-ttu-id="9af29-625">U + 1800 到 U + 180A</span><span class="sxs-lookup"><span data-stu-id="9af29-625">U+1800 to U+180A</span></span>|<span data-ttu-id="9af29-626">U + 3014 到 U + 301F</span><span class="sxs-lookup"><span data-stu-id="9af29-626">U+3014 to U+301F</span></span>|  
|<span data-ttu-id="9af29-627">U + 0025 到 U + 002A</span><span class="sxs-lookup"><span data-stu-id="9af29-627">U+0025 to U+002A</span></span>|<span data-ttu-id="9af29-628">U+061B</span><span class="sxs-lookup"><span data-stu-id="9af29-628">U+061B</span></span>|<span data-ttu-id="9af29-629">U + 1944年和 U + 1945</span><span class="sxs-lookup"><span data-stu-id="9af29-629">U+1944 and U+1945</span></span>|<span data-ttu-id="9af29-630">U+3030</span><span class="sxs-lookup"><span data-stu-id="9af29-630">U+3030</span></span>|  
|<span data-ttu-id="9af29-631">U + 002 C 到 U + 002F</span><span class="sxs-lookup"><span data-stu-id="9af29-631">U+002C to U+002F</span></span>|<span data-ttu-id="9af29-632">U + 061E 和 U + 061F</span><span class="sxs-lookup"><span data-stu-id="9af29-632">U+061E and U+061F</span></span>|<span data-ttu-id="9af29-633">U + 19DE 和 U + 19DF</span><span class="sxs-lookup"><span data-stu-id="9af29-633">U+19DE and U+19DF</span></span>|<span data-ttu-id="9af29-634">U + 303D</span><span class="sxs-lookup"><span data-stu-id="9af29-634">U+303D</span></span>|  
|<span data-ttu-id="9af29-635">U + 003A 和 U + 003B</span><span class="sxs-lookup"><span data-stu-id="9af29-635">U+003A and U+003B</span></span>|<span data-ttu-id="9af29-636">U + 066A 到 U + 066 D</span><span class="sxs-lookup"><span data-stu-id="9af29-636">U+066A to U+066D</span></span>|<span data-ttu-id="9af29-637">U + 1A1E 和 U + 1A1F</span><span class="sxs-lookup"><span data-stu-id="9af29-637">U+1A1E and U+1A1F</span></span>|<span data-ttu-id="9af29-638">U + 30A0</span><span class="sxs-lookup"><span data-stu-id="9af29-638">U+30A0</span></span>|  
|<span data-ttu-id="9af29-639">U + 003F 和 U + 0040</span><span class="sxs-lookup"><span data-stu-id="9af29-639">U+003F and U+0040</span></span>|<span data-ttu-id="9af29-640">U+06D4</span><span class="sxs-lookup"><span data-stu-id="9af29-640">U+06D4</span></span>|<span data-ttu-id="9af29-641">U + 1B5A 到 U + 1B60</span><span class="sxs-lookup"><span data-stu-id="9af29-641">U+1B5A to U+1B60</span></span>|<span data-ttu-id="9af29-642">U + 30FB</span><span class="sxs-lookup"><span data-stu-id="9af29-642">U+30FB</span></span>|  
|<span data-ttu-id="9af29-643">U + 005B 到 U + 005 D</span><span class="sxs-lookup"><span data-stu-id="9af29-643">U+005B to U+005D</span></span>|<span data-ttu-id="9af29-644">U+0700 到 U + 070 D</span><span class="sxs-lookup"><span data-stu-id="9af29-644">U+0700 to U+070D</span></span>|<span data-ttu-id="9af29-645">U + 2010 到 U + 2027</span><span class="sxs-lookup"><span data-stu-id="9af29-645">U+2010 to U+2027</span></span>|<span data-ttu-id="9af29-646">U + A874 到 U + A877</span><span class="sxs-lookup"><span data-stu-id="9af29-646">U+A874 to U+A877</span></span>|  
|<span data-ttu-id="9af29-647">U+005F</span><span class="sxs-lookup"><span data-stu-id="9af29-647">U+005F</span></span>|<span data-ttu-id="9af29-648">U + 07F7 到 U + 07F9</span><span class="sxs-lookup"><span data-stu-id="9af29-648">U+07F7 to U+07F9</span></span>|<span data-ttu-id="9af29-649">U+2030 到 U + 2043</span><span class="sxs-lookup"><span data-stu-id="9af29-649">U+2030 to U+2043</span></span>|<span data-ttu-id="9af29-650">U + FD3E 和 U + FD3F</span><span class="sxs-lookup"><span data-stu-id="9af29-650">U+FD3E and U+FD3F</span></span>|  
|<span data-ttu-id="9af29-651">U + 007B</span><span class="sxs-lookup"><span data-stu-id="9af29-651">U+007B</span></span>|<span data-ttu-id="9af29-652">U + 0964年和 U + 0965</span><span class="sxs-lookup"><span data-stu-id="9af29-652">U+0964 and U+0965</span></span>|<span data-ttu-id="9af29-653">U + 2045 到 U + 2051</span><span class="sxs-lookup"><span data-stu-id="9af29-653">U+2045 to U+2051</span></span>|<span data-ttu-id="9af29-654">到 U + FE19 U+FE10</span><span class="sxs-lookup"><span data-stu-id="9af29-654">U+FE10 to U+FE19</span></span>|  
|<span data-ttu-id="9af29-655">U + 007 D</span><span class="sxs-lookup"><span data-stu-id="9af29-655">U+007D</span></span>|<span data-ttu-id="9af29-656">U+0970</span><span class="sxs-lookup"><span data-stu-id="9af29-656">U+0970</span></span>|<span data-ttu-id="9af29-657">U + 2053 到 U + 205E</span><span class="sxs-lookup"><span data-stu-id="9af29-657">U+2053 to U+205E</span></span>|<span data-ttu-id="9af29-658">到 U + FE52 U+FE30</span><span class="sxs-lookup"><span data-stu-id="9af29-658">U+FE30 to U+FE52</span></span>|  
|<span data-ttu-id="9af29-659">U+00A1</span><span class="sxs-lookup"><span data-stu-id="9af29-659">U+00A1</span></span>|<span data-ttu-id="9af29-660">U+0DF4</span><span class="sxs-lookup"><span data-stu-id="9af29-660">U+0DF4</span></span>|<span data-ttu-id="9af29-661">U + 207 D 和 U + 207E</span><span class="sxs-lookup"><span data-stu-id="9af29-661">U+207D and  U+207E</span></span>|<span data-ttu-id="9af29-662">U + FE54 到 U + FE61</span><span class="sxs-lookup"><span data-stu-id="9af29-662">U+FE54 to U+FE61</span></span>|  
|<span data-ttu-id="9af29-663">U + 00AB</span><span class="sxs-lookup"><span data-stu-id="9af29-663">U+00AB</span></span>|<span data-ttu-id="9af29-664">U + 0E4F 到 U + 0E5B</span><span class="sxs-lookup"><span data-stu-id="9af29-664">U+0E4F to U+0E5B</span></span>|<span data-ttu-id="9af29-665">U + 208 D 和 U + 208E</span><span class="sxs-lookup"><span data-stu-id="9af29-665">U+208D and U+208E</span></span>|<span data-ttu-id="9af29-666">U+FE63</span><span class="sxs-lookup"><span data-stu-id="9af29-666">U+FE63</span></span>|  
|<span data-ttu-id="9af29-667">U + 00AD</span><span class="sxs-lookup"><span data-stu-id="9af29-667">U+00AD</span></span>|<span data-ttu-id="9af29-668">U + 0F04 到 U + 0F12</span><span class="sxs-lookup"><span data-stu-id="9af29-668">U+0F04 to U+0F12</span></span>|<span data-ttu-id="9af29-669">U + 2329年和 U + 232A</span><span class="sxs-lookup"><span data-stu-id="9af29-669">U+2329 and U+232A</span></span>|<span data-ttu-id="9af29-670">U+FE68</span><span class="sxs-lookup"><span data-stu-id="9af29-670">U+FE68</span></span>|  
|<span data-ttu-id="9af29-671">U + 00B7</span><span class="sxs-lookup"><span data-stu-id="9af29-671">U+00B7</span></span>|<span data-ttu-id="9af29-672">U + 0F3A 到 U + 0F3D</span><span class="sxs-lookup"><span data-stu-id="9af29-672">U+0F3A to U+0F3D</span></span>|<span data-ttu-id="9af29-673">U + 2768 到 U + 2775</span><span class="sxs-lookup"><span data-stu-id="9af29-673">U+2768 to U+2775</span></span>|<span data-ttu-id="9af29-674">U + FE6A 和 U + FE6B</span><span class="sxs-lookup"><span data-stu-id="9af29-674">U+FE6A and U+FE6B</span></span>|  
|<span data-ttu-id="9af29-675">U + 00BB</span><span class="sxs-lookup"><span data-stu-id="9af29-675">U+00BB</span></span>|<span data-ttu-id="9af29-676">U+0F85</span><span class="sxs-lookup"><span data-stu-id="9af29-676">U+0F85</span></span>|<span data-ttu-id="9af29-677">U + 27C 5 到 U + 27C 6</span><span class="sxs-lookup"><span data-stu-id="9af29-677">U+27C5 to U+27C6</span></span>|<span data-ttu-id="9af29-678">U + FF01 到 U + FF03</span><span class="sxs-lookup"><span data-stu-id="9af29-678">U+FF01 to U+FF03</span></span>|  
|<span data-ttu-id="9af29-679">U + 00BF</span><span class="sxs-lookup"><span data-stu-id="9af29-679">U+00BF</span></span>|<span data-ttu-id="9af29-680">U + 0FD0 和 U + 0FD1</span><span class="sxs-lookup"><span data-stu-id="9af29-680">U+0FD0 and U+0FD1</span></span>|<span data-ttu-id="9af29-681">U + 27E6 到 U + 27EB</span><span class="sxs-lookup"><span data-stu-id="9af29-681">U+27E6 to U+27EB</span></span>|<span data-ttu-id="9af29-682">U + FF05 到 U + FF0A</span><span class="sxs-lookup"><span data-stu-id="9af29-682">U+FF05 to U+FF0A</span></span>|  
|<span data-ttu-id="9af29-683">U+037E</span><span class="sxs-lookup"><span data-stu-id="9af29-683">U+037E</span></span>|<span data-ttu-id="9af29-684">U + 104A 到 U + 104F</span><span class="sxs-lookup"><span data-stu-id="9af29-684">U+104A to U+104F</span></span>|<span data-ttu-id="9af29-685">U + 2983 到 U + 2998</span><span class="sxs-lookup"><span data-stu-id="9af29-685">U+2983 to U+2998</span></span>|<span data-ttu-id="9af29-686">U + FF0C 到 U + FF0F</span><span class="sxs-lookup"><span data-stu-id="9af29-686">U+FF0C to U+FF0F</span></span>|  
|<span data-ttu-id="9af29-687">U+0387</span><span class="sxs-lookup"><span data-stu-id="9af29-687">U+0387</span></span>|<span data-ttu-id="9af29-688">U + 10FB</span><span class="sxs-lookup"><span data-stu-id="9af29-688">U+10FB</span></span>|<span data-ttu-id="9af29-689">到 U + 29DB U + 29D 8</span><span class="sxs-lookup"><span data-stu-id="9af29-689">U+29D8 to U+29DB</span></span>|<span data-ttu-id="9af29-690">U + FF1A 和 U + FF1B</span><span class="sxs-lookup"><span data-stu-id="9af29-690">U+FF1A and U+FF1B</span></span>|  
|<span data-ttu-id="9af29-691">U + 055A 到 U + 055F</span><span class="sxs-lookup"><span data-stu-id="9af29-691">U+055A to U+055F</span></span>|<span data-ttu-id="9af29-692">U + 1361 到 U + 1368</span><span class="sxs-lookup"><span data-stu-id="9af29-692">U+1361 to U+1368</span></span>|<span data-ttu-id="9af29-693">U + 29 FC 和 U + 29FD</span><span class="sxs-lookup"><span data-stu-id="9af29-693">U+29FC and U+29FD</span></span>|<span data-ttu-id="9af29-694">U + FF1F 和 U + FF20</span><span class="sxs-lookup"><span data-stu-id="9af29-694">U+FF1F and U+FF20</span></span>|  
|<span data-ttu-id="9af29-695">U + 0589年和 U + 058A</span><span class="sxs-lookup"><span data-stu-id="9af29-695">U+0589 and U+058A</span></span>|<span data-ttu-id="9af29-696">U + 166 D 和 U + 166E</span><span class="sxs-lookup"><span data-stu-id="9af29-696">U+166D and U+166E</span></span>|<span data-ttu-id="9af29-697">U + 2CF9 到 U + 2CFC</span><span class="sxs-lookup"><span data-stu-id="9af29-697">U+2CF9 to U+2CFC</span></span>|<span data-ttu-id="9af29-698">U + FF3B 到 U + FF3D</span><span class="sxs-lookup"><span data-stu-id="9af29-698">U+FF3B to U+FF3D</span></span>|  
|<span data-ttu-id="9af29-699">U + 05BE</span><span class="sxs-lookup"><span data-stu-id="9af29-699">U+05BE</span></span>|<span data-ttu-id="9af29-700">U + 169B 和 U + 169 C</span><span class="sxs-lookup"><span data-stu-id="9af29-700">U+169B and U+169C</span></span>|<span data-ttu-id="9af29-701">U + 2CFE 和 U + 2CFF</span><span class="sxs-lookup"><span data-stu-id="9af29-701">U+2CFE and U+2CFF</span></span>|<span data-ttu-id="9af29-702">U+FF3F</span><span class="sxs-lookup"><span data-stu-id="9af29-702">U+FF3F</span></span>|  
|<span data-ttu-id="9af29-703">U+05C0</span><span class="sxs-lookup"><span data-stu-id="9af29-703">U+05C0</span></span>|<span data-ttu-id="9af29-704">U + 16EB 到 U + 16ED</span><span class="sxs-lookup"><span data-stu-id="9af29-704">U+16EB to U+16ED</span></span>|<span data-ttu-id="9af29-705">U + 2E00 到 U + 2E17</span><span class="sxs-lookup"><span data-stu-id="9af29-705">U+2E00 to U+2E17</span></span>|<span data-ttu-id="9af29-706">U + FF5B</span><span class="sxs-lookup"><span data-stu-id="9af29-706">U+FF5B</span></span>|  
|<span data-ttu-id="9af29-707">U+05C3</span><span class="sxs-lookup"><span data-stu-id="9af29-707">U+05C3</span></span>|<span data-ttu-id="9af29-708">U + 1735年和 U + 1736</span><span class="sxs-lookup"><span data-stu-id="9af29-708">U+1735 and U+1736</span></span>|<span data-ttu-id="9af29-709">U + 2E1C 和 U + 2E1D</span><span class="sxs-lookup"><span data-stu-id="9af29-709">U+2E1C and U+2E1D</span></span>|<span data-ttu-id="9af29-710">U + FF5D</span><span class="sxs-lookup"><span data-stu-id="9af29-710">U+FF5D</span></span>|  
|<span data-ttu-id="9af29-711">U+05C6</span><span class="sxs-lookup"><span data-stu-id="9af29-711">U+05C6</span></span>|<span data-ttu-id="9af29-712">U + 17D 4 到 U + 17D 6</span><span class="sxs-lookup"><span data-stu-id="9af29-712">U+17D4 to U+17D6</span></span>|<span data-ttu-id="9af29-713">U + 3001 到 U + 3003</span><span class="sxs-lookup"><span data-stu-id="9af29-713">U+3001 to U+3003</span></span>|<span data-ttu-id="9af29-714">U + FF5F 到 U + FF65</span><span class="sxs-lookup"><span data-stu-id="9af29-714">U+FF5F to U+FF65</span></span>|  
|<span data-ttu-id="9af29-715">U + 05F3 和 U + 05F4</span><span class="sxs-lookup"><span data-stu-id="9af29-715">U+05F3 and U+05F4</span></span>|<span data-ttu-id="9af29-716">到 U + 17DA U + 17D 8</span><span class="sxs-lookup"><span data-stu-id="9af29-716">U+17D8 to U+17DA</span></span>|<span data-ttu-id="9af29-717">U + 3008 到 U + 3011</span><span class="sxs-lookup"><span data-stu-id="9af29-717">U+3008 to U+3011</span></span>||  
  
   
  
## Examples  
 <span data-ttu-id="9af29-718">下面的代码示例演示了<xref:System.Char.IsPunctuation%2A>。</span><span class="sxs-lookup"><span data-stu-id="9af29-718">The following code example demonstrates <xref:System.Char.IsPunctuation%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsPunctuation#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsPunctuation/CPP/ispunctuation.cpp#9)]
 [!code-csharp[System.Char.IsPunctuation#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsPunctuation/CS/ispunctuation.cs#9)]
 [!code-vb[System.Char.IsPunctuation#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsPunctuation/VB/ispunctuation.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsPunctuation">
      <MemberSignature Language="C#" Value="public static bool IsPunctuation (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPunctuation(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsPunctuation(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsPunctuation (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsPunctuation(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsPunctuation : string * int -&gt; bool" Usage="System.char.IsPunctuation (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="9af29-719">一个字符串。</span><span class="sxs-lookup"><span data-stu-id="9af29-719">A string.</span></span></param>
        <param name="index"><span data-ttu-id="9af29-720"><paramref name="s" /> 中要计算的字符的位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-720">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="9af29-721">指示指定字符串中位于指定位置处的字符是否属于标点符号类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-721">Indicates whether the character at the specified position in a specified string is categorized as a punctuation mark.</span></span></summary>
        <returns><span data-ttu-id="9af29-722">如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个标点符号，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-722"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a punctuation mark; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-723">在字符串中的字符位置从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="9af29-723">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="9af29-724">有效的标点符号是中的以下类别的成员<xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`， `DashPunctuation`， `OpenPunctuation`， `ClosePunctuation`， `InititalQuotePunctuation`， `FinalQuotePunctuation`，或`OtherPunctuation`。</span><span class="sxs-lookup"><span data-stu-id="9af29-724">Valid punctuation marks are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `ConnectorPunctuation`, `DashPunctuation`, `OpenPunctuation`, `ClosePunctuation`, `InititalQuotePunctuation`, `FinalQuotePunctuation`, or `OtherPunctuation`.</span></span> <span data-ttu-id="9af29-725">它们包括字符与下表中列出的 Unicode 码位。</span><span class="sxs-lookup"><span data-stu-id="9af29-725">They include characters with the Unicode code points listed in the following table.</span></span>  
  
|||||  
|-|-|-|-|  
|<span data-ttu-id="9af29-726">U+0021 到 U + 0023</span><span class="sxs-lookup"><span data-stu-id="9af29-726">U+0021 to U+0023</span></span>|<span data-ttu-id="9af29-727">U + 060 C 和 U + 060 D</span><span class="sxs-lookup"><span data-stu-id="9af29-727">U+060C and U+060D</span></span>|<span data-ttu-id="9af29-728">U + 1800 到 U + 180A</span><span class="sxs-lookup"><span data-stu-id="9af29-728">U+1800 to U+180A</span></span>|<span data-ttu-id="9af29-729">U + 3014 到 U + 301F</span><span class="sxs-lookup"><span data-stu-id="9af29-729">U+3014 to U+301F</span></span>|  
|<span data-ttu-id="9af29-730">U + 0025 到 U + 002A</span><span class="sxs-lookup"><span data-stu-id="9af29-730">U+0025 to U+002A</span></span>|<span data-ttu-id="9af29-731">U+061B</span><span class="sxs-lookup"><span data-stu-id="9af29-731">U+061B</span></span>|<span data-ttu-id="9af29-732">U + 1944年和 U + 1945</span><span class="sxs-lookup"><span data-stu-id="9af29-732">U+1944 and U+1945</span></span>|<span data-ttu-id="9af29-733">U+3030</span><span class="sxs-lookup"><span data-stu-id="9af29-733">U+3030</span></span>|  
|<span data-ttu-id="9af29-734">U + 002 C 到 U + 002F</span><span class="sxs-lookup"><span data-stu-id="9af29-734">U+002C to U+002F</span></span>|<span data-ttu-id="9af29-735">U + 061E 和 U + 061F</span><span class="sxs-lookup"><span data-stu-id="9af29-735">U+061E and U+061F</span></span>|<span data-ttu-id="9af29-736">U + 19DE 和 U + 19DF</span><span class="sxs-lookup"><span data-stu-id="9af29-736">U+19DE and U+19DF</span></span>|<span data-ttu-id="9af29-737">U + 303D</span><span class="sxs-lookup"><span data-stu-id="9af29-737">U+303D</span></span>|  
|<span data-ttu-id="9af29-738">U + 003A 和 U + 003B</span><span class="sxs-lookup"><span data-stu-id="9af29-738">U+003A and U+003B</span></span>|<span data-ttu-id="9af29-739">U + 066A 到 U + 066 D</span><span class="sxs-lookup"><span data-stu-id="9af29-739">U+066A to U+066D</span></span>|<span data-ttu-id="9af29-740">U + 1A1E 和 U + 1A1F</span><span class="sxs-lookup"><span data-stu-id="9af29-740">U+1A1E and U+1A1F</span></span>|<span data-ttu-id="9af29-741">U + 30A0</span><span class="sxs-lookup"><span data-stu-id="9af29-741">U+30A0</span></span>|  
|<span data-ttu-id="9af29-742">U + 003F 和 U + 0040</span><span class="sxs-lookup"><span data-stu-id="9af29-742">U+003F and U+0040</span></span>|<span data-ttu-id="9af29-743">U+06D4</span><span class="sxs-lookup"><span data-stu-id="9af29-743">U+06D4</span></span>|<span data-ttu-id="9af29-744">U + 1B5A 到 U + 1B60</span><span class="sxs-lookup"><span data-stu-id="9af29-744">U+1B5A to U+1B60</span></span>|<span data-ttu-id="9af29-745">U + 30FB</span><span class="sxs-lookup"><span data-stu-id="9af29-745">U+30FB</span></span>|  
|<span data-ttu-id="9af29-746">U + 005B 到 U + 005 D</span><span class="sxs-lookup"><span data-stu-id="9af29-746">U+005B to U+005D</span></span>|<span data-ttu-id="9af29-747">U+0700 到 U + 070 D</span><span class="sxs-lookup"><span data-stu-id="9af29-747">U+0700 to U+070D</span></span>|<span data-ttu-id="9af29-748">U + 2010 到 U + 2027</span><span class="sxs-lookup"><span data-stu-id="9af29-748">U+2010 to U+2027</span></span>|<span data-ttu-id="9af29-749">U + A874 到 U + A877</span><span class="sxs-lookup"><span data-stu-id="9af29-749">U+A874 to U+A877</span></span>|  
|<span data-ttu-id="9af29-750">U+005F</span><span class="sxs-lookup"><span data-stu-id="9af29-750">U+005F</span></span>|<span data-ttu-id="9af29-751">U + 07F7 到 U + 07F9</span><span class="sxs-lookup"><span data-stu-id="9af29-751">U+07F7 to U+07F9</span></span>|<span data-ttu-id="9af29-752">U+2030 到 U + 2043</span><span class="sxs-lookup"><span data-stu-id="9af29-752">U+2030 to U+2043</span></span>|<span data-ttu-id="9af29-753">U + FD3E 和 U + FD3F</span><span class="sxs-lookup"><span data-stu-id="9af29-753">U+FD3E and U+FD3F</span></span>|  
|<span data-ttu-id="9af29-754">U + 007B</span><span class="sxs-lookup"><span data-stu-id="9af29-754">U+007B</span></span>|<span data-ttu-id="9af29-755">U + 0964年和 U + 0965</span><span class="sxs-lookup"><span data-stu-id="9af29-755">U+0964 and U+0965</span></span>|<span data-ttu-id="9af29-756">U + 2045 到 U + 2051</span><span class="sxs-lookup"><span data-stu-id="9af29-756">U+2045 to U+2051</span></span>|<span data-ttu-id="9af29-757">到 U + FE19 U+FE10</span><span class="sxs-lookup"><span data-stu-id="9af29-757">U+FE10 to U+FE19</span></span>|  
|<span data-ttu-id="9af29-758">U + 007 D</span><span class="sxs-lookup"><span data-stu-id="9af29-758">U+007D</span></span>|<span data-ttu-id="9af29-759">U+0970</span><span class="sxs-lookup"><span data-stu-id="9af29-759">U+0970</span></span>|<span data-ttu-id="9af29-760">U + 2053 到 U + 205E</span><span class="sxs-lookup"><span data-stu-id="9af29-760">U+2053 to U+205E</span></span>|<span data-ttu-id="9af29-761">到 U + FE52 U+FE30</span><span class="sxs-lookup"><span data-stu-id="9af29-761">U+FE30 to U+FE52</span></span>|  
|<span data-ttu-id="9af29-762">U+00A1</span><span class="sxs-lookup"><span data-stu-id="9af29-762">U+00A1</span></span>|<span data-ttu-id="9af29-763">U+0DF4</span><span class="sxs-lookup"><span data-stu-id="9af29-763">U+0DF4</span></span>|<span data-ttu-id="9af29-764">U + 207 D 和 U + 207E</span><span class="sxs-lookup"><span data-stu-id="9af29-764">U+207D and  U+207E</span></span>|<span data-ttu-id="9af29-765">U + FE54 到 U + FE61</span><span class="sxs-lookup"><span data-stu-id="9af29-765">U+FE54 to U+FE61</span></span>|  
|<span data-ttu-id="9af29-766">U + 00AB</span><span class="sxs-lookup"><span data-stu-id="9af29-766">U+00AB</span></span>|<span data-ttu-id="9af29-767">U + 0E4F 到 U + 0E5B</span><span class="sxs-lookup"><span data-stu-id="9af29-767">U+0E4F to U+0E5B</span></span>|<span data-ttu-id="9af29-768">U + 208 D 和 U + 208E</span><span class="sxs-lookup"><span data-stu-id="9af29-768">U+208D and U+208E</span></span>|<span data-ttu-id="9af29-769">U+FE63</span><span class="sxs-lookup"><span data-stu-id="9af29-769">U+FE63</span></span>|  
|<span data-ttu-id="9af29-770">U + 00AD</span><span class="sxs-lookup"><span data-stu-id="9af29-770">U+00AD</span></span>|<span data-ttu-id="9af29-771">U + 0F04 到 U + 0F12</span><span class="sxs-lookup"><span data-stu-id="9af29-771">U+0F04 to U+0F12</span></span>|<span data-ttu-id="9af29-772">U + 2329年和 U + 232A</span><span class="sxs-lookup"><span data-stu-id="9af29-772">U+2329 and U+232A</span></span>|<span data-ttu-id="9af29-773">U+FE68</span><span class="sxs-lookup"><span data-stu-id="9af29-773">U+FE68</span></span>|  
|<span data-ttu-id="9af29-774">U + 00B7</span><span class="sxs-lookup"><span data-stu-id="9af29-774">U+00B7</span></span>|<span data-ttu-id="9af29-775">U + 0F3A 到 U + 0F3D</span><span class="sxs-lookup"><span data-stu-id="9af29-775">U+0F3A to U+0F3D</span></span>|<span data-ttu-id="9af29-776">U + 2768 到 U + 2775</span><span class="sxs-lookup"><span data-stu-id="9af29-776">U+2768 to U+2775</span></span>|<span data-ttu-id="9af29-777">U + FE6A 和 U + FE6B</span><span class="sxs-lookup"><span data-stu-id="9af29-777">U+FE6A and U+FE6B</span></span>|  
|<span data-ttu-id="9af29-778">U + 00BB</span><span class="sxs-lookup"><span data-stu-id="9af29-778">U+00BB</span></span>|<span data-ttu-id="9af29-779">U+0F85</span><span class="sxs-lookup"><span data-stu-id="9af29-779">U+0F85</span></span>|<span data-ttu-id="9af29-780">U + 27C 5 到 U + 27C 6</span><span class="sxs-lookup"><span data-stu-id="9af29-780">U+27C5 to U+27C6</span></span>|<span data-ttu-id="9af29-781">U + FF01 到 U + FF03</span><span class="sxs-lookup"><span data-stu-id="9af29-781">U+FF01 to U+FF03</span></span>|  
|<span data-ttu-id="9af29-782">U + 00BF</span><span class="sxs-lookup"><span data-stu-id="9af29-782">U+00BF</span></span>|<span data-ttu-id="9af29-783">U + 0FD0 和 U + 0FD1</span><span class="sxs-lookup"><span data-stu-id="9af29-783">U+0FD0 and U+0FD1</span></span>|<span data-ttu-id="9af29-784">U + 27E6 到 U + 27EB</span><span class="sxs-lookup"><span data-stu-id="9af29-784">U+27E6 to U+27EB</span></span>|<span data-ttu-id="9af29-785">U + FF05 到 U + FF0A</span><span class="sxs-lookup"><span data-stu-id="9af29-785">U+FF05 to U+FF0A</span></span>|  
|<span data-ttu-id="9af29-786">U+037E</span><span class="sxs-lookup"><span data-stu-id="9af29-786">U+037E</span></span>|<span data-ttu-id="9af29-787">U + 104A 到 U + 104F</span><span class="sxs-lookup"><span data-stu-id="9af29-787">U+104A to U+104F</span></span>|<span data-ttu-id="9af29-788">U + 2983 到 U + 2998</span><span class="sxs-lookup"><span data-stu-id="9af29-788">U+2983 to U+2998</span></span>|<span data-ttu-id="9af29-789">U + FF0C 到 U + FF0F</span><span class="sxs-lookup"><span data-stu-id="9af29-789">U+FF0C to U+FF0F</span></span>|  
|<span data-ttu-id="9af29-790">U+0387</span><span class="sxs-lookup"><span data-stu-id="9af29-790">U+0387</span></span>|<span data-ttu-id="9af29-791">U + 10FB</span><span class="sxs-lookup"><span data-stu-id="9af29-791">U+10FB</span></span>|<span data-ttu-id="9af29-792">到 U + 29DB U + 29D 8</span><span class="sxs-lookup"><span data-stu-id="9af29-792">U+29D8 to U+29DB</span></span>|<span data-ttu-id="9af29-793">U + FF1A 和 U + FF1B</span><span class="sxs-lookup"><span data-stu-id="9af29-793">U+FF1A and U+FF1B</span></span>|  
|<span data-ttu-id="9af29-794">U + 055A 到 U + 055F</span><span class="sxs-lookup"><span data-stu-id="9af29-794">U+055A to U+055F</span></span>|<span data-ttu-id="9af29-795">U + 1361 到 U + 1368</span><span class="sxs-lookup"><span data-stu-id="9af29-795">U+1361 to U+1368</span></span>|<span data-ttu-id="9af29-796">U + 29 FC 和 U + 29FD</span><span class="sxs-lookup"><span data-stu-id="9af29-796">U+29FC and U+29FD</span></span>|<span data-ttu-id="9af29-797">U + FF1F 和 U + FF20</span><span class="sxs-lookup"><span data-stu-id="9af29-797">U+FF1F and U+FF20</span></span>|  
|<span data-ttu-id="9af29-798">U + 0589年和 U + 058A</span><span class="sxs-lookup"><span data-stu-id="9af29-798">U+0589 and U+058A</span></span>|<span data-ttu-id="9af29-799">U + 166 D 和 U + 166E</span><span class="sxs-lookup"><span data-stu-id="9af29-799">U+166D and U+166E</span></span>|<span data-ttu-id="9af29-800">U + 2CF9 到 U + 2CFC</span><span class="sxs-lookup"><span data-stu-id="9af29-800">U+2CF9 to U+2CFC</span></span>|<span data-ttu-id="9af29-801">U + FF3B 到 U + FF3D</span><span class="sxs-lookup"><span data-stu-id="9af29-801">U+FF3B to U+FF3D</span></span>|  
|<span data-ttu-id="9af29-802">U + 05BE</span><span class="sxs-lookup"><span data-stu-id="9af29-802">U+05BE</span></span>|<span data-ttu-id="9af29-803">U + 169B 和 U + 169 C</span><span class="sxs-lookup"><span data-stu-id="9af29-803">U+169B and U+169C</span></span>|<span data-ttu-id="9af29-804">U + 2CFE 和 U + 2CFF</span><span class="sxs-lookup"><span data-stu-id="9af29-804">U+2CFE and U+2CFF</span></span>|<span data-ttu-id="9af29-805">U+FF3F</span><span class="sxs-lookup"><span data-stu-id="9af29-805">U+FF3F</span></span>|  
|<span data-ttu-id="9af29-806">U+05C0</span><span class="sxs-lookup"><span data-stu-id="9af29-806">U+05C0</span></span>|<span data-ttu-id="9af29-807">U + 16EB 到 U + 16ED</span><span class="sxs-lookup"><span data-stu-id="9af29-807">U+16EB to U+16ED</span></span>|<span data-ttu-id="9af29-808">U + 2E00 到 U + 2E17</span><span class="sxs-lookup"><span data-stu-id="9af29-808">U+2E00 to U+2E17</span></span>|<span data-ttu-id="9af29-809">U + FF5B</span><span class="sxs-lookup"><span data-stu-id="9af29-809">U+FF5B</span></span>|  
|<span data-ttu-id="9af29-810">U+05C3</span><span class="sxs-lookup"><span data-stu-id="9af29-810">U+05C3</span></span>|<span data-ttu-id="9af29-811">U + 1735年和 U + 1736</span><span class="sxs-lookup"><span data-stu-id="9af29-811">U+1735 and U+1736</span></span>|<span data-ttu-id="9af29-812">U + 2E1C 和 U + 2E1D</span><span class="sxs-lookup"><span data-stu-id="9af29-812">U+2E1C and U+2E1D</span></span>|<span data-ttu-id="9af29-813">U + FF5D</span><span class="sxs-lookup"><span data-stu-id="9af29-813">U+FF5D</span></span>|  
|<span data-ttu-id="9af29-814">U+05C6</span><span class="sxs-lookup"><span data-stu-id="9af29-814">U+05C6</span></span>|<span data-ttu-id="9af29-815">U + 17D 4 到 U + 17D 6</span><span class="sxs-lookup"><span data-stu-id="9af29-815">U+17D4 to U+17D6</span></span>|<span data-ttu-id="9af29-816">U + 3001 到 U + 3003</span><span class="sxs-lookup"><span data-stu-id="9af29-816">U+3001 to U+3003</span></span>|<span data-ttu-id="9af29-817">U + FF5F 到 U + FF65</span><span class="sxs-lookup"><span data-stu-id="9af29-817">U+FF5F to U+FF65</span></span>|  
|<span data-ttu-id="9af29-818">U + 05F3 和 U + 05F4</span><span class="sxs-lookup"><span data-stu-id="9af29-818">U+05F3 and U+05F4</span></span>|<span data-ttu-id="9af29-819">到 U + 17DA U + 17D 8</span><span class="sxs-lookup"><span data-stu-id="9af29-819">U+17D8 to U+17DA</span></span>|<span data-ttu-id="9af29-820">U + 3008 到 U + 3011</span><span class="sxs-lookup"><span data-stu-id="9af29-820">U+3008 to U+3011</span></span>||  
  
   
  
## Examples  
 <span data-ttu-id="9af29-821">下面的代码示例演示了<xref:System.Char.IsPunctuation%2A>。</span><span class="sxs-lookup"><span data-stu-id="9af29-821">The following code example demonstrates <xref:System.Char.IsPunctuation%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsPunctuation#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsPunctuation/CPP/ispunctuation.cpp#9)]
 [!code-csharp[System.Char.IsPunctuation#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsPunctuation/CS/ispunctuation.cs#9)]
 [!code-vb[System.Char.IsPunctuation#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsPunctuation/VB/ispunctuation.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9af29-822"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-822"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9af29-823"><paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-823"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSeparator">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9af29-824">指示 Unicode 字符是否属于分隔符类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-824">Indicates whether a Unicode character is categorized as a separator character.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-825">Unicode 标准可识别分隔符的三个子的类别：</span><span class="sxs-lookup"><span data-stu-id="9af29-825">The Unicode standard recognizes three subcategories of separators:</span></span>  
  
-   <span data-ttu-id="9af29-826">空格分隔符 (<xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType>类别)，其中包括 \u0020 等字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-826">Space separators (the <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> category), which includes characters such as \u0020.</span></span>  
  
-   <span data-ttu-id="9af29-827">行分隔符 (<xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType>类别)，其中包括 \u2028。</span><span class="sxs-lookup"><span data-stu-id="9af29-827">Line separators (the <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> category), which includes \u2028.</span></span>  
  
-   <span data-ttu-id="9af29-828">段落分隔符 (<xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType>类别)，其中包括 \u2029。</span><span class="sxs-lookup"><span data-stu-id="9af29-828">Paragraph separators (the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> category), which includes \u2029.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9af29-829">Unicode 标准将字符 \u000A (LF)、 \u000C (FF) 和 \u000D (CR) 分类为控制字符 (的成员<xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType>类别)，而不是分隔符字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-829">The Unicode standard classifies the characters \u000A (LF), \u000C (FF), and \u000D (CR) as control characters (members of the <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> category), not as separator characters.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSeparator">
      <MemberSignature Language="C#" Value="public static bool IsSeparator (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSeparator(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSeparator(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSeparator (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSeparator(char c);" />
      <MemberSignature Language="F#" Value="static member IsSeparator : char -&gt; bool" Usage="System.char.IsSeparator c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="9af29-830">要计算的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-830">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="9af29-831">指示指定的 Unicode 字符是否属于分隔符类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-831">Indicates whether the specified Unicode character is categorized as a separator character.</span></span></summary>
        <returns><span data-ttu-id="9af29-832">如果 <see langword="true" /> 是分隔符，则为 <paramref name="c" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-832"><see langword="true" /> if <paramref name="c" /> is a separator character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-833">Unicode 标准可识别分隔符的三个子的类别：</span><span class="sxs-lookup"><span data-stu-id="9af29-833">The Unicode standard recognizes three subcategories of separators:</span></span>  
  
-   <span data-ttu-id="9af29-834">空格分隔符 (<xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType>类别)，其中包括 \u0020 等字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-834">Space separators (the <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> category), which includes characters such as \u0020.</span></span>  
  
-   <span data-ttu-id="9af29-835">行分隔符 (<xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType>类别)，其中包括 \u2028。</span><span class="sxs-lookup"><span data-stu-id="9af29-835">Line separators (the <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> category), which includes \u2028.</span></span>  
  
-   <span data-ttu-id="9af29-836">段落分隔符 (<xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType>类别)，其中包括 \u2029。</span><span class="sxs-lookup"><span data-stu-id="9af29-836">Paragraph separators (the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> category), which includes \u2029.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9af29-837">Unicode 标准将字符 \u000A (LF)、 \u000C (FF) 和 \u000D (CR) 分类为控制字符 (的成员<xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType>类别)，而不是分隔符字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-837">The Unicode standard classifies the characters \u000A (LF), \u000C (FF), and \u000D (CR) as control characters (members of the <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> category), not as separator characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-838">以下示例列出了<xref:System.Char>归类为分隔符字符的对象。</span><span class="sxs-lookup"><span data-stu-id="9af29-838">The following example lists the <xref:System.Char> objects that are classified as separator characters.</span></span>  
  
 [!code-cpp[System.Char.IsSeparator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSeparator/CPP/isseparator1.cpp#1)]
 [!code-csharp[System.Char.IsSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSeparator/CS/isseparator1.cs#1)]
 [!code-vb[System.Char.IsSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSeparator/VB/isseparator1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="IsSeparator">
      <MemberSignature Language="C#" Value="public static bool IsSeparator (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSeparator(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSeparator(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSeparator (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSeparator(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsSeparator : string * int -&gt; bool" Usage="System.char.IsSeparator (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="9af29-839">一个字符串。</span><span class="sxs-lookup"><span data-stu-id="9af29-839">A string.</span></span></param>
        <param name="index"><span data-ttu-id="9af29-840"><paramref name="s" /> 中要计算的字符的位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-840">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="9af29-841">指示指定字符串中位于指定位置处的字符是否属于分隔符类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-841">Indicates whether the character at the specified position in a specified string is categorized as a separator character.</span></span></summary>
        <returns><span data-ttu-id="9af29-842">如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个分隔符，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-842"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a separator character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-843">在字符串中的字符位置从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="9af29-843">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="9af29-844">Unicode 标准可识别分隔符的三个子的类别：</span><span class="sxs-lookup"><span data-stu-id="9af29-844">The Unicode standard recognizes three subcategories of separators:</span></span>  
  
-   <span data-ttu-id="9af29-845">空格分隔符 (<xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType>类别)，其中包括 \u0020 等字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-845">Space separators (the <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> category), which includes characters such as \u0020.</span></span>  
  
-   <span data-ttu-id="9af29-846">行分隔符 (<xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType>类别)，其中包括 \u2028。</span><span class="sxs-lookup"><span data-stu-id="9af29-846">Line separators (the <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> category), which includes \u2028.</span></span>  
  
-   <span data-ttu-id="9af29-847">段落分隔符 (<xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType>类别)，其中包括 \u2029。</span><span class="sxs-lookup"><span data-stu-id="9af29-847">Paragraph separators (the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> category), which includes \u2029.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9af29-848">Unicode 标准将字符 \u000A (LF)、 \u000C (FF) 和 \u000D (CR) 分类为控制字符 (的成员<xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType>类别)，而不是分隔符字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-848">The Unicode standard classifies the characters \u000A (LF), \u000C (FF), and \u000D (CR) as control characters (members of the <xref:System.Globalization.UnicodeCategory.Control?displayProperty=nameWithType> category), not as separator characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-849">下面的示例演示<xref:System.Char.IsSeparator%2A>。</span><span class="sxs-lookup"><span data-stu-id="9af29-849">The following example demonstrates <xref:System.Char.IsSeparator%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsSeparator#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSeparator/CPP/isseparator.cpp#10)]
 [!code-csharp[System.Char.IsSeparator#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSeparator/CS/isseparator.cs#10)]
 [!code-vb[System.Char.IsSeparator#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSeparator/VB/isseparator.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9af29-850"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-850"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9af29-851"><paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-851"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSurrogate">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9af29-852">指示字符是否具有代理项代码单位。</span><span class="sxs-lookup"><span data-stu-id="9af29-852">Indicates whether a character has a surrogate code unit.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsSurrogate (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSurrogate(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSurrogate(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSurrogate (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSurrogate(char c);" />
      <MemberSignature Language="F#" Value="static member IsSurrogate : char -&gt; bool" Usage="System.char.IsSurrogate c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="9af29-853">要计算的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-853">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="9af29-854">指示指定的字符是否具有指定的代理项代码单位。</span><span class="sxs-lookup"><span data-stu-id="9af29-854">Indicates whether the specified character has a surrogate code unit.</span></span></summary>
        <returns><span data-ttu-id="9af29-855">如果 <see langword="true" /> 为高代理项或低代理项，则为 <paramref name="c" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-855"><see langword="true" /> if <paramref name="c" /> is either a high surrogate or a low surrogate; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-856">代理项是<xref:System.Char>使用 utf-16 代码单位从 u+d800 到 U + DFFF 的范围中的对象。</span><span class="sxs-lookup"><span data-stu-id="9af29-856">A surrogate is a <xref:System.Char> object with a UTF-16 code unit in the range from U+D800 to U+DFFF.</span></span> <span data-ttu-id="9af29-857">每个字符且在此范围内的代码单元属于<xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-857">Each character with a code unit in this range belongs to the <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType> category.</span></span> <span data-ttu-id="9af29-858">单独的代理项代码单位不具有其自己的任何解释，但具有含义仅当使用作为代理项对的一部分。</span><span class="sxs-lookup"><span data-stu-id="9af29-858">The individual surrogate code unit has no interpretation of its own, but has meaning only when used as part of a surrogate pair.</span></span> <span data-ttu-id="9af29-859">有关代理项对的详细信息，请参阅上的 Unicode 标准[Unicode 主页](https://go.microsoft.com/fwlink/?linkid=37123)。</span><span class="sxs-lookup"><span data-stu-id="9af29-859">For more information about surrogate pairs, see the Unicode Standard at the [Unicode home page](https://go.microsoft.com/fwlink/?linkid=37123).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-860">下面的示例演示<xref:System.Char.IsSurrogate%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9af29-860">The following example demonstrates the <xref:System.Char.IsSurrogate%2A> method.</span></span>  
  
 [!code-cpp[System.Char.IsSurrogate#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSurrogate/CPP/issurrogate.cpp#11)]
 [!code-csharp[System.Char.IsSurrogate#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSurrogate/CS/issurrogate.cs#11)]
 [!code-vb[System.Char.IsSurrogate#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSurrogate/VB/issurrogate.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Char.IsHighSurrogate" />
        <altmember cref="Overload:System.Char.IsLowSurrogate" />
        <altmember cref="Overload:System.Char.IsSurrogatePair" />
      </Docs>
    </Member>
    <Member MemberName="IsSurrogate">
      <MemberSignature Language="C#" Value="public static bool IsSurrogate (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSurrogate(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSurrogate(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSurrogate (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSurrogate(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsSurrogate : string * int -&gt; bool" Usage="System.char.IsSurrogate (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="9af29-861">一个字符串。</span><span class="sxs-lookup"><span data-stu-id="9af29-861">A string.</span></span></param>
        <param name="index"><span data-ttu-id="9af29-862"><paramref name="s" /> 中要计算的字符的位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-862">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="9af29-863">指示指定字符串中位于指定位置的字符是否具有代理项代码单位。</span><span class="sxs-lookup"><span data-stu-id="9af29-863">Indicates whether the character at the specified position in a specified string has a surrogate code unit.</span></span></summary>
        <returns><span data-ttu-id="9af29-864">如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个高代理项或低代理项，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-864"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a either a high surrogate or a low surrogate; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-865">在字符串中的字符位置从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="9af29-865">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="9af29-866">代理项是<xref:System.Char>使用 utf-16 代码单位从 u+d800 到 U + DFFF 的范围中的对象。</span><span class="sxs-lookup"><span data-stu-id="9af29-866">A surrogate is a <xref:System.Char> object with a UTF-16 code unit in the range from U+D800 to U+DFFF.</span></span> <span data-ttu-id="9af29-867">每个字符且在此范围内的代码单元属于<xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType>类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-867">Each character with a code unit in this range belongs to the <xref:System.Globalization.UnicodeCategory.Surrogate?displayProperty=nameWithType> category.</span></span> <span data-ttu-id="9af29-868">单独的代理项代码单位不具有其自己的任何解释，但具有含义仅当使用作为代理项对的一部分。</span><span class="sxs-lookup"><span data-stu-id="9af29-868">The individual surrogate code unit has no interpretation of its own, but has meaning only when used as part of a surrogate pair.</span></span> <span data-ttu-id="9af29-869">有关代理项对的详细信息，请参阅上的 Unicode 标准[Unicode 主页](https://go.microsoft.com/fwlink/?linkid=37123)。</span><span class="sxs-lookup"><span data-stu-id="9af29-869">For more information about surrogate pairs, see the Unicode Standard at the [Unicode home page](https://go.microsoft.com/fwlink/?linkid=37123).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-870">下面的代码示例演示了<xref:System.Char.IsSurrogate%2A>。</span><span class="sxs-lookup"><span data-stu-id="9af29-870">The following code example demonstrates <xref:System.Char.IsSurrogate%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsSurrogate#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSurrogate/CPP/issurrogate.cpp#11)]
 [!code-csharp[System.Char.IsSurrogate#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSurrogate/CS/issurrogate.cs#11)]
 [!code-vb[System.Char.IsSurrogate#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSurrogate/VB/issurrogate.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9af29-871"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-871"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9af29-872"><paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-872"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="Overload:System.Char.IsHighSurrogate" />
        <altmember cref="Overload:System.Char.IsLowSurrogate" />
        <altmember cref="Overload:System.Char.IsSurrogatePair" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSurrogatePair">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9af29-873">指示两个指定的 <see cref="T:System.Char" /> 对象是否形成一个代理项对。</span><span class="sxs-lookup"><span data-stu-id="9af29-873">Indicates whether two specified <see cref="T:System.Char" /> objects form a surrogate pair.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSurrogatePair">
      <MemberSignature Language="C#" Value="public static bool IsSurrogatePair (char highSurrogate, char lowSurrogate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSurrogatePair(char highSurrogate, char lowSurrogate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSurrogatePair(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSurrogatePair (highSurrogate As Char, lowSurrogate As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSurrogatePair(char highSurrogate, char lowSurrogate);" />
      <MemberSignature Language="F#" Value="static member IsSurrogatePair : char * char -&gt; bool" Usage="System.char.IsSurrogatePair (highSurrogate, lowSurrogate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="highSurrogate" Type="System.Char" />
        <Parameter Name="lowSurrogate" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="highSurrogate"><span data-ttu-id="9af29-874">要作为代理项对的高代理项进行计算的字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-874">The character to evaluate as the high surrogate of a surrogate pair.</span></span></param>
        <param name="lowSurrogate"><span data-ttu-id="9af29-875">要作为代理项对的低代理项进行计算的字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-875">The character to evaluate as the low surrogate of a surrogate pair.</span></span></param>
        <summary><span data-ttu-id="9af29-876">指示两个指定的 <see cref="T:System.Char" /> 对象是否形成一个代理项对。</span><span class="sxs-lookup"><span data-stu-id="9af29-876">Indicates whether the two specified <see cref="T:System.Char" /> objects form a surrogate pair.</span></span></summary>
        <returns><span data-ttu-id="9af29-877">如果 <see langword="true" /> 参数的数值范围是从 U+D800 到 U+DBFF，且 <paramref name="highSurrogate" /> 参数的数值是从 U+DC00 到 U+DFFF，则为 <paramref name="lowSurrogate" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-877"><see langword="true" /> if the numeric value of the <paramref name="highSurrogate" /> parameter ranges from U+D800 through U+DBFF, and the numeric value of the <paramref name="lowSurrogate" /> parameter ranges from U+DC00 through U+DFFF; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-878">通常，由单个 16 位 Unicode 代码单元表示单个字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-878">Ordinarily, a single character is represented by a single 16-bit Unicode code unit.</span></span> <span data-ttu-id="9af29-879">Utf-16 编码还支持的代理项对，从而允许单个抽象字符来表示的两个 16 位代码单元。</span><span class="sxs-lookup"><span data-stu-id="9af29-879">UTF-16 encoding also supports surrogate pairs, which allow a single abstract character to be represented by two 16-bit code units.</span></span> <span data-ttu-id="9af29-880">第一个代码单元，其值的范围从 u+d800 到 U + DBFF，是高代理项。</span><span class="sxs-lookup"><span data-stu-id="9af29-880">The first code unit, whose value can range from U+D800 to U+DBFF, is the high surrogate.</span></span> <span data-ttu-id="9af29-881">第二个代码单元，其值的范围从 u+dc00 到 U + DFFF，则低代理项。</span><span class="sxs-lookup"><span data-stu-id="9af29-881">The second code unit, whose value can range from U+DC00 to U+DFFF, is the low surrogate.</span></span> <span data-ttu-id="9af29-882">单独的代理项码位具有其自己的解释。</span><span class="sxs-lookup"><span data-stu-id="9af29-882">Individual surrogate code points have no interpretation of their own.</span></span> <span data-ttu-id="9af29-883">有关代理项字符和 Unicode 标准的详细信息，请参阅[Unicode 主页](https://go.microsoft.com/fwlink/?LinkId=37123)。</span><span class="sxs-lookup"><span data-stu-id="9af29-883">For more information about surrogates and the Unicode Standard, see the [Unicode home page](https://go.microsoft.com/fwlink/?LinkId=37123).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-884">下面的代码示例演示<xref:System.Char.IsHighSurrogate%2A>， <xref:System.Char.IsLowSurrogate%2A>，和<xref:System.Char.IsSurrogatePair%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9af29-884">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>  
  
 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.IsHighSurrogate(System.Char)" />
        <altmember cref="M:System.Char.IsLowSurrogate(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsSurrogatePair">
      <MemberSignature Language="C#" Value="public static bool IsSurrogatePair (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSurrogatePair(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSurrogatePair(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSurrogatePair (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSurrogatePair(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsSurrogatePair : string * int -&gt; bool" Usage="System.char.IsSurrogatePair (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="9af29-885">一个字符串。</span><span class="sxs-lookup"><span data-stu-id="9af29-885">A string.</span></span></param>
        <param name="index"><span data-ttu-id="9af29-886"><paramref name="s" /> 中要计算的字符对的开始位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-886">The starting position of the pair of characters to evaluate within <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="9af29-887">指示字符串中指定位置处的两个相邻 <see cref="T:System.Char" /> 对象是否形成一个代理项对。</span><span class="sxs-lookup"><span data-stu-id="9af29-887">Indicates whether two adjacent <see cref="T:System.Char" /> objects at a specified position in a string form a surrogate pair.</span></span></summary>
        <returns><span data-ttu-id="9af29-888">如果 <see langword="true" /> 参数包括 <paramref name="s" /> 和 <paramref name="index" /> + 1 位置处的相邻字符，并且 <paramref name="index" /> 位置处字符的数值范围从 U+D800 到 U+DBFF，<paramref name="index" />+1 位置处字符的数值范围从 U+DC00 到 U+DFFF，则为 <paramref name="index" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-888"><see langword="true" /> if the <paramref name="s" /> parameter includes adjacent characters at positions <paramref name="index" /> and <paramref name="index" /> + 1, and the numeric value of the character at position <paramref name="index" /> ranges from U+D800 through U+DBFF, and the numeric value of the character at position <paramref name="index" />+1 ranges from U+DC00 through U+DFFF; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-889">通常，由单个 16 位 Unicode 代码单元表示单个字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-889">Ordinarily, a single character is represented by a single 16-bit Unicode code unit.</span></span> <span data-ttu-id="9af29-890">Utf-16 编码还支持的代理项对，从而允许单个抽象字符来表示的两个 16 位代码单元。</span><span class="sxs-lookup"><span data-stu-id="9af29-890">UTF-16 encoding also supports surrogate pairs, which allow a single abstract character to be represented by two 16-bit code units.</span></span> <span data-ttu-id="9af29-891">第一个代码单元，其值的范围从 u+d800 到 U + DBFF，是高代理项。</span><span class="sxs-lookup"><span data-stu-id="9af29-891">The first code unit, whose value can range from U+D800 to U+DBFF, is the high surrogate.</span></span> <span data-ttu-id="9af29-892">第二个代码单元，其值的范围从 u+dc00 到 U + DFFF，则低代理项。</span><span class="sxs-lookup"><span data-stu-id="9af29-892">The second code unit, whose value can range from U+DC00 to U+DFFF, is the low surrogate.</span></span> <span data-ttu-id="9af29-893">单独的代理项码位具有其自己的解释。</span><span class="sxs-lookup"><span data-stu-id="9af29-893">Individual surrogate code points have no interpretation of their own.</span></span> <span data-ttu-id="9af29-894">有关代理项字符和 Unicode 标准的详细信息，请参阅[Unicode 主页](https://go.microsoft.com/fwlink/?LinkId=37123)。</span><span class="sxs-lookup"><span data-stu-id="9af29-894">For more information about surrogates and the Unicode Standard, see the [Unicode home page](https://go.microsoft.com/fwlink/?LinkId=37123).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-895">下面的代码示例演示<xref:System.Char.IsHighSurrogate%2A>， <xref:System.Char.IsLowSurrogate%2A>，和<xref:System.Char.IsSurrogatePair%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9af29-895">The following code example demonstrates the <xref:System.Char.IsHighSurrogate%2A>, <xref:System.Char.IsLowSurrogate%2A>, and <xref:System.Char.IsSurrogatePair%2A> methods.</span></span>  
  
 [!code-cpp[char.surrogate#1](~/samples/snippets/cpp/VS_Snippets_CLR/char.surrogate/CPP/sur.cpp#1)]
 [!code-csharp[char.surrogate#1](~/samples/snippets/csharp/VS_Snippets_CLR/char.surrogate/CS/sur.cs#1)]
 [!code-vb[char.surrogate#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/char.surrogate/VB/sur.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9af29-896"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-896"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9af29-897"><paramref name="index" /> 不是 <paramref name="s" /> 内的位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-897"><paramref name="index" /> is not a position within <paramref name="s" />.</span></span></exception>
        <altmember cref="M:System.Char.IsHighSurrogate(System.Char)" />
        <altmember cref="M:System.Char.IsLowSurrogate(System.Char)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSymbol">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9af29-898">指示 Unicode 字符是否属于符号字符类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-898">Indicates whether a Unicode character is categorized as a symbol character.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-899">有效的符号是中的以下类别的成员<xref:System.Globalization.UnicodeCategory>: `MathSymbol`， `CurrencySymbol`， `ModifierSymbol`，和`OtherSymbol`。</span><span class="sxs-lookup"><span data-stu-id="9af29-899">Valid symbols are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `MathSymbol`, `CurrencySymbol`, `ModifierSymbol`, and `OtherSymbol`.</span></span>  
  
 <span data-ttu-id="9af29-900">Unicode 标准中的符号是一组松散定义的字符包括以下各项：</span><span class="sxs-lookup"><span data-stu-id="9af29-900">Symbols in the Unicode standard are a loosely defined set of characters that include the following:</span></span>  
  
-   <span data-ttu-id="9af29-901">货币符号。</span><span class="sxs-lookup"><span data-stu-id="9af29-901">Currency symbols.</span></span>  
  
-   <span data-ttu-id="9af29-902">Letterlike 符号，其中包括一系列数学字母数字符号，以及诸如 ℅、 № 之类的符号和™。</span><span class="sxs-lookup"><span data-stu-id="9af29-902">Letterlike symbols, which include a set of mathematical alphanumeric symbols as well as symbols such as ℅, №, and ™.</span></span>  
  
-   <span data-ttu-id="9af29-903">数字形式，如上标和下标。</span><span class="sxs-lookup"><span data-stu-id="9af29-903">Number forms, such as subscripts and superscripts.</span></span>  
  
-   <span data-ttu-id="9af29-904">数学运算符和箭头。</span><span class="sxs-lookup"><span data-stu-id="9af29-904">Mathematical operators and arrows.</span></span>  
  
-   <span data-ttu-id="9af29-905">几何符号。</span><span class="sxs-lookup"><span data-stu-id="9af29-905">Geometric symbols.</span></span>  
  
-   <span data-ttu-id="9af29-906">技术符号。</span><span class="sxs-lookup"><span data-stu-id="9af29-906">Technical symbols.</span></span>  
  
-   <span data-ttu-id="9af29-907">Braille 模式。</span><span class="sxs-lookup"><span data-stu-id="9af29-907">Braille patterns.</span></span>  
  
-   <span data-ttu-id="9af29-908">丁贝符。</span><span class="sxs-lookup"><span data-stu-id="9af29-908">Dingbats.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsSymbol">
      <MemberSignature Language="C#" Value="public static bool IsSymbol (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSymbol(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSymbol(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSymbol (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSymbol(char c);" />
      <MemberSignature Language="F#" Value="static member IsSymbol : char -&gt; bool" Usage="System.char.IsSymbol c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="9af29-909">要计算的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-909">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="9af29-910">指示指定的 Unicode 字符是否属于符号字符类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-910">Indicates whether the specified Unicode character is categorized as a symbol character.</span></span></summary>
        <returns><span data-ttu-id="9af29-911">如果 <see langword="true" /> 是符号字符，则为 <paramref name="c" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-911"><see langword="true" /> if <paramref name="c" /> is a symbol character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-912">有效的符号是中的以下类别的成员<xref:System.Globalization.UnicodeCategory>: `MathSymbol`， `CurrencySymbol`， `ModifierSymbol`，和`OtherSymbol`。</span><span class="sxs-lookup"><span data-stu-id="9af29-912">Valid symbols are members of the following categories in <xref:System.Globalization.UnicodeCategory>: `MathSymbol`, `CurrencySymbol`, `ModifierSymbol`, and `OtherSymbol`.</span></span>  
  
 <span data-ttu-id="9af29-913">Unicode 标准中的符号是一组松散定义的字符包括以下各项：</span><span class="sxs-lookup"><span data-stu-id="9af29-913">Symbols in the Unicode standard are a loosely defined set of characters that include the following:</span></span>  
  
-   <span data-ttu-id="9af29-914">货币符号。</span><span class="sxs-lookup"><span data-stu-id="9af29-914">Currency symbols.</span></span>  
  
-   <span data-ttu-id="9af29-915">Letterlike 符号，其中包括一系列数学字母数字符号，以及诸如 ℅、 № 之类的符号和™。</span><span class="sxs-lookup"><span data-stu-id="9af29-915">Letterlike symbols, which include a set of mathematical alphanumeric symbols as well as symbols such as ℅, №, and ™.</span></span>  
  
-   <span data-ttu-id="9af29-916">数字形式，如上标和下标。</span><span class="sxs-lookup"><span data-stu-id="9af29-916">Number forms, such as subscripts and superscripts.</span></span>  
  
-   <span data-ttu-id="9af29-917">数学运算符和箭头。</span><span class="sxs-lookup"><span data-stu-id="9af29-917">Mathematical operators and arrows.</span></span>  
  
-   <span data-ttu-id="9af29-918">几何符号。</span><span class="sxs-lookup"><span data-stu-id="9af29-918">Geometric symbols.</span></span>  
  
-   <span data-ttu-id="9af29-919">技术符号。</span><span class="sxs-lookup"><span data-stu-id="9af29-919">Technical symbols.</span></span>  
  
-   <span data-ttu-id="9af29-920">Braille 模式。</span><span class="sxs-lookup"><span data-stu-id="9af29-920">Braille patterns.</span></span>  
  
-   <span data-ttu-id="9af29-921">丁贝符。</span><span class="sxs-lookup"><span data-stu-id="9af29-921">Dingbats.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-922">下面的代码示例演示了<xref:System.Char.IsSymbol%2A>。</span><span class="sxs-lookup"><span data-stu-id="9af29-922">The following code example demonstrates <xref:System.Char.IsSymbol%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsSymbol#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSymbol/CPP/issymbol.cpp#12)]
 [!code-csharp[System.Char.IsSymbol#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSymbol/CS/issymbol.cs#12)]
 [!code-vb[System.Char.IsSymbol#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSymbol/VB/issymbol.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
      </Docs>
    </Member>
    <Member MemberName="IsSymbol">
      <MemberSignature Language="C#" Value="public static bool IsSymbol (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSymbol(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsSymbol(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsSymbol (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsSymbol(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsSymbol : string * int -&gt; bool" Usage="System.char.IsSymbol (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="9af29-923">一个字符串。</span><span class="sxs-lookup"><span data-stu-id="9af29-923">A string.</span></span></param>
        <param name="index"><span data-ttu-id="9af29-924"><paramref name="s" /> 中要计算的字符的位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-924">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="9af29-925">指示指定字符串中位于指定位置处的字符是否属于符号字符类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-925">Indicates whether the character at the specified position in a specified string is categorized as a symbol character.</span></span></summary>
        <returns><span data-ttu-id="9af29-926">如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个符号字符，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-926"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is a symbol character; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-927">在字符串中的字符位置从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="9af29-927">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="9af29-928">有效的符号是中的以下类别的成员<xref:System.Globalization.UnicodeCategory?displayProperty=nameWithType>: `MathSymbol`， `CurrencySymbol`， `ModifierSymbol`，和`OtherSymbol`。</span><span class="sxs-lookup"><span data-stu-id="9af29-928">Valid symbols are members of the following categories in <xref:System.Globalization.UnicodeCategory?displayProperty=nameWithType>: `MathSymbol`, `CurrencySymbol`, `ModifierSymbol`, and `OtherSymbol`.</span></span>  
  
 <span data-ttu-id="9af29-929">Unicode 标准中的符号是一组松散定义的字符包括以下各项：</span><span class="sxs-lookup"><span data-stu-id="9af29-929">Symbols in the Unicode standard are a loosely defined set of characters that include the following:</span></span>  
  
-   <span data-ttu-id="9af29-930">货币符号。</span><span class="sxs-lookup"><span data-stu-id="9af29-930">Currency symbols.</span></span>  
  
-   <span data-ttu-id="9af29-931">Letterlike 符号，其中包括一系列数学字母数字符号，以及诸如 ℅、 № 之类的符号和™。</span><span class="sxs-lookup"><span data-stu-id="9af29-931">Letterlike symbols, which include a set of mathematical alphanumeric symbols as well as symbols such as ℅, №, and ™.</span></span>  
  
-   <span data-ttu-id="9af29-932">数字形式，如上标和下标。</span><span class="sxs-lookup"><span data-stu-id="9af29-932">Number forms, such as subscripts and superscripts.</span></span>  
  
-   <span data-ttu-id="9af29-933">数学运算符和箭头。</span><span class="sxs-lookup"><span data-stu-id="9af29-933">Mathematical operators and arrows.</span></span>  
  
-   <span data-ttu-id="9af29-934">几何符号。</span><span class="sxs-lookup"><span data-stu-id="9af29-934">Geometric symbols.</span></span>  
  
-   <span data-ttu-id="9af29-935">技术符号。</span><span class="sxs-lookup"><span data-stu-id="9af29-935">Technical symbols.</span></span>  
  
-   <span data-ttu-id="9af29-936">Braille 模式。</span><span class="sxs-lookup"><span data-stu-id="9af29-936">Braille patterns.</span></span>  
  
-   <span data-ttu-id="9af29-937">丁贝符。</span><span class="sxs-lookup"><span data-stu-id="9af29-937">Dingbats.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-938">下面的代码示例演示了<xref:System.Char.IsSymbol%2A>。</span><span class="sxs-lookup"><span data-stu-id="9af29-938">The following code example demonstrates <xref:System.Char.IsSymbol%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsSymbol#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsSymbol/CPP/issymbol.cpp#12)]
 [!code-csharp[System.Char.IsSymbol#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsSymbol/CS/issymbol.cs#12)]
 [!code-vb[System.Char.IsSymbol#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsSymbol/VB/issymbol.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9af29-939"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-939"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9af29-940"><paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-940"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsUpper">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9af29-941">指示 Unicode 字符是否属于大写字母类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-941">Indicates whether a Unicode character is categorized as an uppercase letter.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsUpper">
      <MemberSignature Language="C#" Value="public static bool IsUpper (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUpper(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsUpper(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUpper (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUpper(char c);" />
      <MemberSignature Language="F#" Value="static member IsUpper : char -&gt; bool" Usage="System.char.IsUpper c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="9af29-942">要计算的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-942">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="9af29-943">指示指定的 Unicode 字符是否属于大写字母类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-943">Indicates whether the specified Unicode character is categorized as an uppercase letter.</span></span></summary>
        <returns><span data-ttu-id="9af29-944">如果 <see langword="true" /> 是一个大写字母，则为 <paramref name="c" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-944"><see langword="true" /> if <paramref name="c" /> is an uppercase letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-945">有效的大写形式是中的以下类别的成员<xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`。</span><span class="sxs-lookup"><span data-stu-id="9af29-945">Valid uppercase letters are members of the following category in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="M:System.Char.IsLower(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IsUpper">
      <MemberSignature Language="C#" Value="public static bool IsUpper (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUpper(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsUpper(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsUpper (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsUpper(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsUpper : string * int -&gt; bool" Usage="System.char.IsUpper (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="9af29-946">一个字符串。</span><span class="sxs-lookup"><span data-stu-id="9af29-946">A string.</span></span></param>
        <param name="index"><span data-ttu-id="9af29-947"><paramref name="s" /> 中要计算的字符的位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-947">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="9af29-948">指示指定字符串中位于指定位置处的字符是否属于大写字母类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-948">Indicates whether the character at the specified position in a specified string is categorized as an uppercase letter.</span></span></summary>
        <returns><span data-ttu-id="9af29-949">如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个大写字母，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-949"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is an uppercase letter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-950">在字符串中的字符位置从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="9af29-950">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="9af29-951">有效的大写形式是中的以下类别的成员<xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`。</span><span class="sxs-lookup"><span data-stu-id="9af29-951">Valid uppercase letters are members of the following category in <xref:System.Globalization.UnicodeCategory>: `UppercaseLetter`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9af29-952"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-952"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9af29-953"><paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-953"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsWhiteSpace">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9af29-954">指示 Unicode 字符是否属于空格类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-954">Indicates whether a Unicode character is categorized as white space.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-955">空白字符是以下的 Unicode 字符：</span><span class="sxs-lookup"><span data-stu-id="9af29-955">White space characters are the following Unicode characters:</span></span>  
  
-   <span data-ttu-id="9af29-956">成员<xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType>类别，其中包括空格的字符 (U + 0020)，无中断空格 (U + 00A0)、 欧甘文空间标记 (U + 1680)，EN 四 (U + 2000)、 EM 四 （U + 2001 年），EN 空格 (U + 2002)、 EM 空格 (U + 2003)，三个每个 EM 空间 （U + 2004 年），四个每个 EM 空间 (U+ 2005)，每个 EM 六个空间 (U + 2006)，数字空格 (U + 2007)，标点精简空格 (U + 2008)，空格 (U + 2009)，细空格 (U + 200A)、 窄无中断空格 (U + 202F)、 中等数学空格 (U + 205F) 和表意空格 (U + 3000)。</span><span class="sxs-lookup"><span data-stu-id="9af29-956">Members of the <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> category, which includes the characters SPACE (U+0020), NO-BREAK SPACE (U+00A0), OGHAM SPACE MARK (U+1680), EN QUAD (U+2000), EM QUAD (U+2001), EN SPACE (U+2002), EM SPACE (U+2003), THREE-PER-EM SPACE (U+2004), FOUR-PER-EM SPACE (U+2005), SIX-PER-EM SPACE (U+2006), FIGURE SPACE (U+2007), PUNCTUATION SPACE (U+2008), THIN SPACE (U+2009), HAIR SPACE (U+200A), NARROW NO-BREAK SPACE (U+202F), MEDIUM MATHEMATICAL SPACE (U+205F), and IDEOGRAPHIC SPACE (U+3000).</span></span>  
  
-   <span data-ttu-id="9af29-957">成员<xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType>类别，只包含行分隔符字符 (U + 2028)。</span><span class="sxs-lookup"><span data-stu-id="9af29-957">Members of the <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> category, which consists solely of the LINE SEPARATOR character (U+2028).</span></span>  
  
-   <span data-ttu-id="9af29-958">成员<xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType>类别，只包含段落分隔符字符 (U + 2029)。</span><span class="sxs-lookup"><span data-stu-id="9af29-958">Members of the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> category, which consists solely of the PARAGRAPH SEPARATOR character (U+2029).</span></span>  
  
-   <span data-ttu-id="9af29-959">字符表的字符 (U + 0009) 线路源 (U + 000A)、 行表 (U + 000B)、 换页符 (U + 000 C)、 回车符 (U + 000d)、 传感器和接下来线路 (U + 0085)。</span><span class="sxs-lookup"><span data-stu-id="9af29-959">The characters CHARACTER TABULATION (U+0009), LINE FEED (U+000A), LINE TABULATION (U+000B), FORM FEED (U+000C), CARRIAGE RETURN (U+000D), and NEXT LINE (U+0085).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsWhiteSpace">
      <MemberSignature Language="C#" Value="public static bool IsWhiteSpace (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsWhiteSpace(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsWhiteSpace(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsWhiteSpace (c As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsWhiteSpace(char c);" />
      <MemberSignature Language="F#" Value="static member IsWhiteSpace : char -&gt; bool" Usage="System.char.IsWhiteSpace c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="9af29-960">要计算的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-960">The Unicode character to evaluate.</span></span></param>
        <summary><span data-ttu-id="9af29-961">指示指定的 Unicode 字符是否属于空格类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-961">Indicates whether the specified Unicode character is categorized as white space.</span></span></summary>
        <returns><span data-ttu-id="9af29-962">如果 <see langword="true" /> 是空格，则为 <paramref name="c" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-962"><see langword="true" /> if <paramref name="c" /> is white space; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-963">空白字符是以下的 Unicode 字符：</span><span class="sxs-lookup"><span data-stu-id="9af29-963">White space characters are the following Unicode characters:</span></span>  
  
-   <span data-ttu-id="9af29-964">成员<xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType>类别，其中包括空格的字符 (U + 0020)，无中断空格 (U + 00A0)、 欧甘文空间标记 (U + 1680)，EN 四 (U + 2000)、 EM 四 （U + 2001 年），EN 空格 (U + 2002)、 EM 空格 (U + 2003)，三个每个 EM 空间 （U + 2004 年），四个每个 EM 空间 (U+ 2005)，每个 EM 六个空间 (U + 2006)，数字空格 (U + 2007)，标点精简空格 (U + 2008)，空格 (U + 2009)，细空格 (U + 200A)、 窄无中断空格 (U + 202F)、 中等数学空格 (U + 205F) 和表意空格 (U + 3000)。</span><span class="sxs-lookup"><span data-stu-id="9af29-964">Members of the <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> category, which includes the characters SPACE (U+0020), NO-BREAK SPACE (U+00A0), OGHAM SPACE MARK (U+1680), EN QUAD (U+2000), EM QUAD (U+2001), EN SPACE (U+2002), EM SPACE (U+2003), THREE-PER-EM SPACE (U+2004), FOUR-PER-EM SPACE (U+2005), SIX-PER-EM SPACE (U+2006), FIGURE SPACE (U+2007), PUNCTUATION SPACE (U+2008), THIN SPACE (U+2009), HAIR SPACE (U+200A), NARROW NO-BREAK SPACE (U+202F), MEDIUM MATHEMATICAL SPACE (U+205F), and IDEOGRAPHIC SPACE (U+3000).</span></span>  
  
-   <span data-ttu-id="9af29-965">成员<xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType>类别，只包含行分隔符字符 (U + 2028)。</span><span class="sxs-lookup"><span data-stu-id="9af29-965">Members of the <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> category, which consists solely of the LINE SEPARATOR character (U+2028).</span></span>  
  
-   <span data-ttu-id="9af29-966">成员<xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType>类别，只包含段落分隔符字符 (U + 2029)。</span><span class="sxs-lookup"><span data-stu-id="9af29-966">Members of the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> category, which consists solely of the PARAGRAPH SEPARATOR character (U+2029).</span></span>  
  
-   <span data-ttu-id="9af29-967">字符表的字符 (U + 0009) 线路源 (U + 000A)、 行表 (U + 000B)、 换页符 (U + 000 C)、 回车符 (U + 000d)、 传感器和接下来线路 (U + 0085)。</span><span class="sxs-lookup"><span data-stu-id="9af29-967">The characters CHARACTER TABULATION (U+0009), LINE FEED (U+000A), LINE TABULATION (U+000B), FORM FEED (U+000C), CARRIAGE RETURN (U+000D), and NEXT LINE (U+0085).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-968">下面的示例演示<xref:System.Char.IsWhiteSpace%28System.Char%29>方法。</span><span class="sxs-lookup"><span data-stu-id="9af29-968">The following example demonstrates the <xref:System.Char.IsWhiteSpace%28System.Char%29> method.</span></span>  
  
 [!code-cpp[System.Char.IsWhiteSpace#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/CPP/iswhitespace.cpp#14)]
 [!code-csharp[System.Char.IsWhiteSpace#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/CS/iswhitespace.cs#14)]
 [!code-vb[System.Char.IsWhiteSpace#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/VB/iswhitespace.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="IsWhiteSpace">
      <MemberSignature Language="C#" Value="public static bool IsWhiteSpace (string s, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsWhiteSpace(string s, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.IsWhiteSpace(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsWhiteSpace (s As String, index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsWhiteSpace(System::String ^ s, int index);" />
      <MemberSignature Language="F#" Value="static member IsWhiteSpace : string * int -&gt; bool" Usage="System.char.IsWhiteSpace (s, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="9af29-969">一个字符串。</span><span class="sxs-lookup"><span data-stu-id="9af29-969">A string.</span></span></param>
        <param name="index"><span data-ttu-id="9af29-970"><paramref name="s" /> 中要计算的字符的位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-970">The position of the character to evaluate in <paramref name="s" />.</span></span></param>
        <summary><span data-ttu-id="9af29-971">指示指定字符串中位于指定位置处的字符是否属于空格类别。</span><span class="sxs-lookup"><span data-stu-id="9af29-971">Indicates whether the character at the specified position in a specified string is categorized as white space.</span></span></summary>
        <returns><span data-ttu-id="9af29-972">如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是空格，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-972"><see langword="true" /> if the character at position <paramref name="index" /> in <paramref name="s" /> is white space; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-973">在字符串中的字符位置从零开始编制索引。</span><span class="sxs-lookup"><span data-stu-id="9af29-973">Character positions in a string are indexed starting from zero.</span></span>  
  
 <span data-ttu-id="9af29-974">空白字符是以下的 Unicode 字符：</span><span class="sxs-lookup"><span data-stu-id="9af29-974">White space characters are the following Unicode characters:</span></span>  
  
-   <span data-ttu-id="9af29-975">成员<xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType>类别，其中包括空格的字符 (U + 0020)，无中断空格 (U + 00A0)、 欧甘文空间标记 (U + 1680)，EN 四 (U + 2000)、 EM 四 （U + 2001 年），EN 空格 (U + 2002)、 EM 空格 (U + 2003)，三个每个 EM 空间 （U + 2004 年），四个每个 EM 空间 (U+ 2005)，每个 EM 六个空间 (U + 2006)，数字空格 (U + 2007)，标点精简空格 (U + 2008)，空格 (U + 2009)，细空格 (U + 200A)、 窄无中断空格 (U + 202F)、 中等数学空格 (U + 205F) 和表意空格 (U + 3000)。</span><span class="sxs-lookup"><span data-stu-id="9af29-975">Members of the <xref:System.Globalization.UnicodeCategory.SpaceSeparator?displayProperty=nameWithType> category, which includes the characters SPACE (U+0020), NO-BREAK SPACE (U+00A0), OGHAM SPACE MARK (U+1680), EN QUAD (U+2000), EM QUAD (U+2001), EN SPACE (U+2002), EM SPACE (U+2003), THREE-PER-EM SPACE (U+2004), FOUR-PER-EM SPACE (U+2005), SIX-PER-EM SPACE (U+2006), FIGURE SPACE (U+2007), PUNCTUATION SPACE (U+2008), THIN SPACE (U+2009), HAIR SPACE (U+200A), NARROW NO-BREAK SPACE (U+202F), MEDIUM MATHEMATICAL SPACE (U+205F), and IDEOGRAPHIC SPACE (U+3000).</span></span>  
  
-   <span data-ttu-id="9af29-976">成员<xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType>类别，只包含行分隔符字符 (U + 2028)。</span><span class="sxs-lookup"><span data-stu-id="9af29-976">Members of the <xref:System.Globalization.UnicodeCategory.LineSeparator?displayProperty=nameWithType> category, which consists solely of the LINE SEPARATOR character (U+2028).</span></span>  
  
-   <span data-ttu-id="9af29-977">成员<xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType>类别，只包含段落分隔符字符 (U + 2029)。</span><span class="sxs-lookup"><span data-stu-id="9af29-977">Members of the <xref:System.Globalization.UnicodeCategory.ParagraphSeparator?displayProperty=nameWithType> category, which consists solely of the PARAGRAPH SEPARATOR character (U+2029).</span></span>  
  
-   <span data-ttu-id="9af29-978">字符表的字符 (U + 0009) 线路源 (U + 000A)、 行表 (U + 000B)、 换页符 (U + 000 C)、 回车符 (U + 000d)、 传感器和接下来线路 (U + 0085)。</span><span class="sxs-lookup"><span data-stu-id="9af29-978">The characters CHARACTER TABULATION (U+0009), LINE FEED (U+000A), LINE TABULATION (U+000B), FORM FEED (U+000C), CARRIAGE RETURN (U+000D), and NEXT LINE (U+0085).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-979">下面的代码示例演示了<xref:System.Char.IsWhiteSpace%2A>。</span><span class="sxs-lookup"><span data-stu-id="9af29-979">The following code example demonstrates <xref:System.Char.IsWhiteSpace%2A>.</span></span>  
  
 [!code-cpp[System.Char.IsWhiteSpace#14](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/CPP/iswhitespace.cpp#14)]
 [!code-csharp[System.Char.IsWhiteSpace#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/CS/iswhitespace.cs#14)]
 [!code-vb[System.Char.IsWhiteSpace#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.IsWhiteSpace/VB/iswhitespace.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9af29-980"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-980"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9af29-981"><paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</span><span class="sxs-lookup"><span data-stu-id="9af29-981"><paramref name="index" /> is less than zero or greater than the last position in <paramref name="s" />.</span></span></exception>
        <altmember cref="T:System.Boolean" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.Globalization.UnicodeCategory" />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public const char MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.Char.MaxValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MaxValue As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char MaxValue;" />
      <MemberSignature Language="F#" Value="val mutable MaxValue : char" Usage="System.char.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9af29-982">表示 <see cref="T:System.Char" /> 的最大可能值。</span><span class="sxs-lookup"><span data-stu-id="9af29-982">Represents the largest possible value of a <see cref="T:System.Char" />.</span></span> <span data-ttu-id="9af29-983">此字段为常数。</span><span class="sxs-lookup"><span data-stu-id="9af29-983">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-984">此常量的值为十六进制 0xFFFF。</span><span class="sxs-lookup"><span data-stu-id="9af29-984">The value of this constant is hexadecimal 0xFFFF.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Char.MinValue" />
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public const char MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char MinValue" />
      <MemberSignature Language="DocId" Value="F:System.Char.MinValue" />
      <MemberSignature Language="VB.NET" Value="Public Const MinValue As Char " />
      <MemberSignature Language="C++ CLI" Value="public: char MinValue;" />
      <MemberSignature Language="F#" Value="val mutable MinValue : char" Usage="System.char.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9af29-985">表示 <see cref="T:System.Char" /> 的最小可能值。</span><span class="sxs-lookup"><span data-stu-id="9af29-985">Represents the smallest possible value of a <see cref="T:System.Char" />.</span></span> <span data-ttu-id="9af29-986">此字段为常数。</span><span class="sxs-lookup"><span data-stu-id="9af29-986">This field is constant.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-987">此常量的值为十六进制 0x00。</span><span class="sxs-lookup"><span data-stu-id="9af29-987">The value of this constant is hexadecimal 0x00.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Char.MaxValue" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static char Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (s As String) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Parse(System::String ^ s);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; char" Usage="System.char.Parse s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="9af29-988">包含单个字符的字符串，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-988">A string that contains a single character, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="9af29-989">将指定字符串的值转换为它的等效 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-989">Converts the value of the specified string to its equivalent Unicode character.</span></span></summary>
        <returns><span data-ttu-id="9af29-990">一个等效于 <paramref name="s" /> 中唯一字符的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-990">A Unicode character equivalent to the sole character in <paramref name="s" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9af29-991">下面的代码示例演示了<xref:System.Char.Parse%2A>。</span><span class="sxs-lookup"><span data-stu-id="9af29-991">The following code example demonstrates <xref:System.Char.Parse%2A>.</span></span>  
  
 [!code-cpp[System.Char.Parse#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.Parse/CPP/parse.cpp#15)]
 [!code-csharp[System.Char.Parse#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.Parse/CS/parse.cs#15)]
 [!code-vb[System.Char.Parse#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.Parse/VB/parse.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9af29-992"><paramref name="s" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-992"><paramref name="s" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.FormatException"><span data-ttu-id="9af29-993"><paramref name="s" /> 的长度不是 1。</span><span class="sxs-lookup"><span data-stu-id="9af29-993">The length of <paramref name="s" /> is not 1.</span></span></exception>
        <altmember cref="M:System.Char.ToString" />
        <related type="Article" href="https://msdn.microsoft.com/library/d139bc00-3c4e-4d78-ac9a-5c951b258d28"><span data-ttu-id="9af29-994">在 .NET Framework 中分析其他字符串</span><span class="sxs-lookup"><span data-stu-id="9af29-994">Parsing Other Strings in the .NET Framework</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (value As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ value) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#GetTypeCode" />
      <MemberSignature Language="VB.NET" Value="Function GetTypeCode () As TypeCode Implements IConvertible.GetTypeCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual TypeCode System.IConvertible.GetTypeCode() = IConvertible::GetTypeCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.GetTypeCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToBoolean (provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.IConvertible.ToBoolean(IFormatProvider ^ provider) = IConvertible::ToBoolean;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToBoolean(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="9af29-995">忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="9af29-995">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="9af29-996">**注意**不支持此转换。</span><span class="sxs-lookup"><span data-stu-id="9af29-996">**Note** This conversion is not supported.</span></span> <span data-ttu-id="9af29-997">尝试这样做会引发 <see cref="T:System.InvalidCastException" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-997">Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="9af29-998">不支持此转换。</span><span class="sxs-lookup"><span data-stu-id="9af29-998">This conversion is not supported.</span></span> <span data-ttu-id="9af29-999">不返回任何值。</span><span class="sxs-lookup"><span data-stu-id="9af29-999">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="9af29-1000">不支持此转换。</span><span class="sxs-lookup"><span data-stu-id="9af29-1000">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToByte (provider As IFormatProvider) As Byte Implements IConvertible.ToByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Byte System.IConvertible.ToByte(IFormatProvider ^ provider) = IConvertible::ToByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="9af29-1001">忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="9af29-1001">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="9af29-1002">有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-1002">For a description of this member, see <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="9af29-1003">当前 <see cref="T:System.Char" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="9af29-1003">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-1004">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="9af29-1004">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="9af29-1005">它只能在 <xref:System.Char> 实例强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="9af29-1005">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="9af29-1006">建议的替代项是调用<xref:System.Convert.ToByte%28System.Char%29?displayProperty=nameWithType>方法相反。</span><span class="sxs-lookup"><span data-stu-id="9af29-1006">The recommended alternative is to call the <xref:System.Convert.ToByte%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToChar (provider As IFormatProvider) As Char Implements IConvertible.ToChar" />
      <MemberSignature Language="C++ CLI" Value=" virtual char System.IConvertible.ToChar(IFormatProvider ^ provider) = IConvertible::ToChar;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToChar(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="9af29-1007">忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="9af29-1007">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="9af29-1008">有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-1008">For a description of this member, see <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="9af29-1009">当前 <see cref="T:System.Char" /> 对象的值未更改。</span><span class="sxs-lookup"><span data-stu-id="9af29-1009">The value of the current <see cref="T:System.Char" /> object unchanged.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-1010">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="9af29-1010">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="9af29-1011">它只能在 <xref:System.Char> 实例强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="9af29-1011">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDateTime (provider As IFormatProvider) As DateTime Implements IConvertible.ToDateTime" />
      <MemberSignature Language="C++ CLI" Value=" virtual DateTime System.IConvertible.ToDateTime(IFormatProvider ^ provider) = IConvertible::ToDateTime;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDateTime(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="9af29-1012">忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="9af29-1012">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="9af29-1013">**注意**不支持此转换。</span><span class="sxs-lookup"><span data-stu-id="9af29-1013">**Note** This conversion is not supported.</span></span> <span data-ttu-id="9af29-1014">尝试这样做会引发 <see cref="T:System.InvalidCastException" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-1014">Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="9af29-1015">不返回任何值。</span><span class="sxs-lookup"><span data-stu-id="9af29-1015">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="9af29-1016">不支持此转换。</span><span class="sxs-lookup"><span data-stu-id="9af29-1016">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDecimal (provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Decimal System.IConvertible.ToDecimal(IFormatProvider ^ provider) = IConvertible::ToDecimal;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDecimal(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="9af29-1017">忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="9af29-1017">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="9af29-1018">**注意**不支持此转换。</span><span class="sxs-lookup"><span data-stu-id="9af29-1018">**Note** This conversion is not supported.</span></span> <span data-ttu-id="9af29-1019">尝试这样做会引发 <see cref="T:System.InvalidCastException" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-1019">Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="9af29-1020">不返回任何值。</span><span class="sxs-lookup"><span data-stu-id="9af29-1020">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="9af29-1021">不支持此转换。</span><span class="sxs-lookup"><span data-stu-id="9af29-1021">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToDouble (provider As IFormatProvider) As Double Implements IConvertible.ToDouble" />
      <MemberSignature Language="C++ CLI" Value=" virtual double System.IConvertible.ToDouble(IFormatProvider ^ provider) = IConvertible::ToDouble;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToDouble(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="9af29-1022">忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="9af29-1022">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="9af29-1023">**注意**不支持此转换。</span><span class="sxs-lookup"><span data-stu-id="9af29-1023">**Note** This conversion is not supported.</span></span> <span data-ttu-id="9af29-1024">尝试这样做会引发 <see cref="T:System.InvalidCastException" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-1024">Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="9af29-1025">不返回任何值。</span><span class="sxs-lookup"><span data-stu-id="9af29-1025">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="9af29-1026">不支持此转换。</span><span class="sxs-lookup"><span data-stu-id="9af29-1026">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt16 (provider As IFormatProvider) As Short Implements IConvertible.ToInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual short System.IConvertible.ToInt16(IFormatProvider ^ provider) = IConvertible::ToInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="9af29-1027">忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="9af29-1027">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="9af29-1028">有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-1028">For a description of this member, see <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="9af29-1029">当前 <see cref="T:System.Char" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="9af29-1029">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-1030">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="9af29-1030">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="9af29-1031">它只能在 <xref:System.Char> 实例强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="9af29-1031">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="9af29-1032">建议的替代项是调用<xref:System.Convert.ToInt16%28System.Char%29?displayProperty=nameWithType>方法相反。</span><span class="sxs-lookup"><span data-stu-id="9af29-1032">The recommended alternative is to call the <xref:System.Convert.ToInt16%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt32 (provider As IFormatProvider) As Integer Implements IConvertible.ToInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IConvertible.ToInt32(IFormatProvider ^ provider) = IConvertible::ToInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="9af29-1033">忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="9af29-1033">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="9af29-1034">有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-1034">For a description of this member, see <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="9af29-1035">当前 <see cref="T:System.Char" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="9af29-1035">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-1036">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="9af29-1036">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="9af29-1037">它只能在 <xref:System.Char> 实例强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="9af29-1037">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="9af29-1038">建议的替代项是调用<xref:System.Convert.ToInt32%28System.Char%29?displayProperty=nameWithType>方法相反。</span><span class="sxs-lookup"><span data-stu-id="9af29-1038">The recommended alternative is to call the <xref:System.Convert.ToInt32%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToInt64 (provider As IFormatProvider) As Long Implements IConvertible.ToInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual long System.IConvertible.ToInt64(IFormatProvider ^ provider) = IConvertible::ToInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="9af29-1039">忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="9af29-1039">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="9af29-1040">有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-1040">For a description of this member, see <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="9af29-1041">当前 <see cref="T:System.Char" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="9af29-1041">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-1042">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="9af29-1042">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="9af29-1043">它只能在 <xref:System.Char> 实例强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="9af29-1043">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="9af29-1044">建议的替代项是调用<xref:System.Convert.ToInt64%28System.Char%29?displayProperty=nameWithType>方法相反。</span><span class="sxs-lookup"><span data-stu-id="9af29-1044">The recommended alternative is to call the <xref:System.Convert.ToInt64%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSByte (provider As IFormatProvider) As SByte Implements IConvertible.ToSByte" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::SByte System.IConvertible.ToSByte(IFormatProvider ^ provider) = IConvertible::ToSByte;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSByte(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="9af29-1045">忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="9af29-1045">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="9af29-1046">有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-1046">For a description of this member, see <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="9af29-1047">当前 <see cref="T:System.Char" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="9af29-1047">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-1048">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="9af29-1048">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="9af29-1049">它只能在 <xref:System.Char> 实例强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="9af29-1049">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="9af29-1050">建议的替代项是调用<xref:System.Convert.ToSByte%28System.Char%29?displayProperty=nameWithType>方法相反。</span><span class="sxs-lookup"><span data-stu-id="9af29-1050">The recommended alternative is to call the <xref:System.Convert.ToSByte%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToSingle (provider As IFormatProvider) As Single Implements IConvertible.ToSingle" />
      <MemberSignature Language="C++ CLI" Value=" virtual float System.IConvertible.ToSingle(IFormatProvider ^ provider) = IConvertible::ToSingle;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToSingle(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="9af29-1051">忽略此参数。</span><span class="sxs-lookup"><span data-stu-id="9af29-1051">This parameter is ignored.</span></span></param>
        <summary><span data-ttu-id="9af29-1052">**注意**不支持此转换。</span><span class="sxs-lookup"><span data-stu-id="9af29-1052">**Note** This conversion is not supported.</span></span> <span data-ttu-id="9af29-1053">尝试这样做会引发 <see cref="T:System.InvalidCastException" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-1053">Attempting to do so throws an <see cref="T:System.InvalidCastException" />.</span></span></summary>
        <returns><span data-ttu-id="9af29-1054">不返回任何值。</span><span class="sxs-lookup"><span data-stu-id="9af29-1054">No value is returned.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="9af29-1055">不支持此转换。</span><span class="sxs-lookup"><span data-stu-id="9af29-1055">This conversion is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToString">
      <MemberSignature Language="C#" Value="string IConvertible.ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IConvertible.ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (provider As IFormatProvider) As String Implements IConvertible.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IConvertible.ToString(IFormatProvider ^ provider) = IConvertible::ToString;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.IConvertible.ToType(Type ^ type, IFormatProvider ^ provider) = IConvertible::ToType;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToType(System.Type,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="9af29-1056"><see cref="T:System.Type" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="9af29-1056">A <see cref="T:System.Type" /> object.</span></span></param>
        <param name="provider"><span data-ttu-id="9af29-1057">一个 <see cref="T:System.IFormatProvider" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="9af29-1057">An <see cref="T:System.IFormatProvider" /> object.</span></span></param>
        <summary><span data-ttu-id="9af29-1058">有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-1058">For a description of this member, see <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="9af29-1059">指定类型的对象。</span><span class="sxs-lookup"><span data-stu-id="9af29-1059">An object of the specified type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-1060">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="9af29-1060">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="9af29-1061">它只能在 <xref:System.Char> 实例强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="9af29-1061">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="9af29-1062">建议的替代项是调用<xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29>方法相反。</span><span class="sxs-lookup"><span data-stu-id="9af29-1062">The recommended alternative is to call the <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29> method instead.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9af29-1063"><paramref name="type" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-1063"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="9af29-1064">当前 <see cref="T:System.Char" /> 对象的值不能转换为 <paramref name="type" /> 参数指定的类型。</span><span class="sxs-lookup"><span data-stu-id="9af29-1064">The value of the current <see cref="T:System.Char" /> object cannot be converted to the type specified by the <paramref name="type" /> parameter.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt16 (provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt16 System.IConvertible.ToUInt16(IFormatProvider ^ provider) = IConvertible::ToUInt16;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt16(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="9af29-1065">一个 <see cref="T:System.IFormatProvider" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="9af29-1065">An <see cref="T:System.IFormatProvider" /> object.</span></span> <span data-ttu-id="9af29-1066">（由于 <see langword="null" /> 参数已被忽略，因此指定 <paramref name="provider" />。）</span><span class="sxs-lookup"><span data-stu-id="9af29-1066">(Specify <see langword="null" /> because the <paramref name="provider" /> parameter is ignored.)</span></span></param>
        <summary><span data-ttu-id="9af29-1067">有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-1067">For a description of this member, see <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="9af29-1068">当前 <see cref="T:System.Char" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="9af29-1068">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-1069">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="9af29-1069">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="9af29-1070">它只能在 <xref:System.Char> 实例强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="9af29-1070">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="9af29-1071">建议的替代项是调用<xref:System.Convert.ToUInt16%28System.Char%29?displayProperty=nameWithType>方法相反。</span><span class="sxs-lookup"><span data-stu-id="9af29-1071">The recommended alternative is to call the <xref:System.Convert.ToUInt16%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt32 (provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt32 System.IConvertible.ToUInt32(IFormatProvider ^ provider) = IConvertible::ToUInt32;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt32(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="9af29-1072">一个 <see cref="T:System.IFormatProvider" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="9af29-1072">An <see cref="T:System.IFormatProvider" /> object.</span></span> <span data-ttu-id="9af29-1073">（由于 <see langword="null" /> 参数已被忽略，因此指定 <paramref name="provider" />。）</span><span class="sxs-lookup"><span data-stu-id="9af29-1073">(Specify <see langword="null" /> because the <paramref name="provider" /> parameter is ignored.)</span></span></param>
        <summary><span data-ttu-id="9af29-1074">有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-1074">For a description of this member, see <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="9af29-1075">当前 <see cref="T:System.Char" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="9af29-1075">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-1076">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="9af29-1076">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="9af29-1077">它只能在 <xref:System.Char> 实例强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="9af29-1077">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="9af29-1078">建议的替代项是调用<xref:System.Convert.ToUInt32%28System.Char%29?displayProperty=nameWithType>方法相反。</span><span class="sxs-lookup"><span data-stu-id="9af29-1078">The recommended alternative is to call the <xref:System.Convert.ToUInt32%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToUInt64 (provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::UInt64 System.IConvertible.ToUInt64(IFormatProvider ^ provider) = IConvertible::ToUInt64;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToUInt64(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="9af29-1079">一个 <see cref="T:System.IFormatProvider" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="9af29-1079">An <see cref="T:System.IFormatProvider" /> object.</span></span> <span data-ttu-id="9af29-1080">（由于 <see langword="null" /> 参数已被忽略，因此指定 <paramref name="provider" />。）</span><span class="sxs-lookup"><span data-stu-id="9af29-1080">(Specify <see langword="null" /> because the <paramref name="provider" /> parameter is ignored.)</span></span></param>
        <summary><span data-ttu-id="9af29-1081">有关此成员的说明，请参阅 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-1081">For a description of this member, see <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="9af29-1082">当前 <see cref="T:System.Char" /> 对象的转换值。</span><span class="sxs-lookup"><span data-stu-id="9af29-1082">The converted value of the current <see cref="T:System.Char" /> object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-1083">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="9af29-1083">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="9af29-1084">它只能在 <xref:System.Char> 实例强制转换为 <xref:System.IConvertible> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="9af29-1084">It can be used only when the <xref:System.Char> instance is cast to an <xref:System.IConvertible> interface.</span></span> <span data-ttu-id="9af29-1085">建议的替代项是调用<xref:System.Convert.ToUInt64%28System.Char%29?displayProperty=nameWithType>方法相反。</span><span class="sxs-lookup"><span data-stu-id="9af29-1085">The recommended alternative is to call the <xref:System.Convert.ToUInt64%28System.Char%29?displayProperty=nameWithType> method instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToLower">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9af29-1086">将 Unicode 字符的值转换为它的小写等效项。</span><span class="sxs-lookup"><span data-stu-id="9af29-1086">Converts the value of a Unicode character to its lowercase equivalent.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public static char ToLower (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToLower(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToLower(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToLower (c As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToLower(char c);" />
      <MemberSignature Language="F#" Value="static member ToLower : char -&gt; char" Usage="System.char.ToLower c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="9af29-1087">要转换的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-1087">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="9af29-1088">将 Unicode 字符的值转换为它的小写等效项。</span><span class="sxs-lookup"><span data-stu-id="9af29-1088">Converts the value of a Unicode character to its lowercase equivalent.</span></span></summary>
        <returns><span data-ttu-id="9af29-1089"><paramref name="c" /> 的小写等效项，或者，如果 <paramref name="c" /> 已经是小写字母或不是字母，则为 <paramref name="c" /> 的未更改值。</span><span class="sxs-lookup"><span data-stu-id="9af29-1089">The lowercase equivalent of <paramref name="c" />, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-1090">获取来自当前区域性的大小写规则。</span><span class="sxs-lookup"><span data-stu-id="9af29-1090">Casing rules are obtained from the current culture.</span></span>  
  
 <span data-ttu-id="9af29-1091">使用<xref:System.String.ToLower%2A?displayProperty=nameWithType>将字符串转换为小写。</span><span class="sxs-lookup"><span data-stu-id="9af29-1091">Use <xref:System.String.ToLower%2A?displayProperty=nameWithType> to convert a string to lowercase.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-1092">下面的示例演示<xref:System.Char.ToLower%2A>。</span><span class="sxs-lookup"><span data-stu-id="9af29-1092">The following example demonstrates <xref:System.Char.ToLower%2A>.</span></span>  
  
 [!code-cpp[System.Char.ToLower#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToLower/CPP/tolower.cpp#16)]
 [!code-csharp[System.Char.ToLower#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToLower/CS/tolower.cs#16)]
 [!code-vb[System.Char.ToLower#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToLower/VB/tolower.vb#16)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="9af29-1093">中所述[字符串使用最佳做法](~/docs/standard/base-types/best-practices-strings.md)，我们建议你避免调用替换为默认值的字符大小写和字符串大小写的方法。</span><span class="sxs-lookup"><span data-stu-id="9af29-1093">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling character-casing and string-casing methods that substitute default values.</span></span> <span data-ttu-id="9af29-1094">相反，应调用需要显式指定参数的方法。</span><span class="sxs-lookup"><span data-stu-id="9af29-1094">Instead, you should call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="9af29-1095">若要将字符转换为小写的通过使用当前区域性的大小写约定，调用<see cref="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" />方法的值的重载<see cref="P:System.Globalization.CultureInfo.CurrentCulture" />有关其<paramref name="culture" />参数。</span><span class="sxs-lookup"><span data-stu-id="9af29-1095">To convert a character to lowercase by using the casing conventions of the current culture, call the <see cref="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" /> method overload with a value of <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> for its <paramref name="culture" /> parameter.</span></span></para></block>
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public static char ToLower (char c, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToLower(char c, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToLower (c As Char, culture As CultureInfo) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToLower(char c, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="static member ToLower : char * System.Globalization.CultureInfo -&gt; char" Usage="System.char.ToLower (c, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="9af29-1096">要转换的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-1096">The Unicode character to convert.</span></span></param>
        <param name="culture"><span data-ttu-id="9af29-1097">一个对象，用于提供区域性特定的大小写规则。</span><span class="sxs-lookup"><span data-stu-id="9af29-1097">An object that supplies culture-specific casing rules.</span></span></param>
        <summary><span data-ttu-id="9af29-1098">使用指定的区域性特定格式设置信息将指定 Unicode 字符的值转换为它的小写等效项。</span><span class="sxs-lookup"><span data-stu-id="9af29-1098">Converts the value of a specified Unicode character to its lowercase equivalent using specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="9af29-1099"><paramref name="c" /> 的小写等效项（根据 <paramref name="culture" /> 进行修改），或者，如果 <paramref name="c" /> 已经是小写字母或不是字母，则为 <paramref name="c" /> 的未更改值。</span><span class="sxs-lookup"><span data-stu-id="9af29-1099">The lowercase equivalent of <paramref name="c" />, modified according to <paramref name="culture" />, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-1100">使用<xref:System.String.ToLower%2A?displayProperty=nameWithType>将字符串转换为小写。</span><span class="sxs-lookup"><span data-stu-id="9af29-1100">Use <xref:System.String.ToLower%2A?displayProperty=nameWithType> to convert a string to lowercase.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-1101">下面的代码示例演示了<xref:System.Char.ToLower%2A>。</span><span class="sxs-lookup"><span data-stu-id="9af29-1101">The following code example demonstrates <xref:System.Char.ToLower%2A>.</span></span>  
  
 [!code-cpp[System.Char.ToLower#16](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToLower/CPP/tolower.cpp#16)]
 [!code-csharp[System.Char.ToLower#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToLower/CS/tolower.cs#16)]
 [!code-vb[System.Char.ToLower#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToLower/VB/tolower.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9af29-1102"><paramref name="culture" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-1102"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToLowerInvariant">
      <MemberSignature Language="C#" Value="public static char ToLowerInvariant (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToLowerInvariant(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToLowerInvariant(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToLowerInvariant (c As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToLowerInvariant(char c);" />
      <MemberSignature Language="F#" Value="static member ToLowerInvariant : char -&gt; char" Usage="System.char.ToLowerInvariant c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="9af29-1103">要转换的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-1103">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="9af29-1104">使用固定区域性的大小写规则，将 Unicode 字符的值转换为其小写等效项。</span><span class="sxs-lookup"><span data-stu-id="9af29-1104">Converts the value of a Unicode character to its lowercase equivalent using the casing rules of the invariant culture.</span></span></summary>
        <returns><span data-ttu-id="9af29-1105"><paramref name="c" /> 参数的小写等效项，或者，如果 <paramref name="c" /> 已经是小写字母或不是字母，则为 <paramref name="c" /> 的未更改值。</span><span class="sxs-lookup"><span data-stu-id="9af29-1105">The lowercase equivalent of the <paramref name="c" /> parameter, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already lowercase or not alphabetic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-1106">如果你的应用程序不受当前区域性，并依赖于可预测的方式更改的字符大小写，则使用<xref:System.Char.ToLowerInvariant%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9af29-1106">If your application is unaffected by the current culture and depends on the case of a character changing in a predictable way, then use the <xref:System.Char.ToLowerInvariant%2A> method.</span></span> <span data-ttu-id="9af29-1107"><xref:System.Char.ToLowerInvariant%2A>方法等效于`ToLower(Char, CultureInfo.InvariantCulture)`。</span><span class="sxs-lookup"><span data-stu-id="9af29-1107">The <xref:System.Char.ToLowerInvariant%2A> method is equivalent to `ToLower(Char, CultureInfo.InvariantCulture)`.</span></span>  
  
 <span data-ttu-id="9af29-1108">使用<xref:System.String.ToLowerInvariant%2A?displayProperty=nameWithType>将字符串转换为小写。</span><span class="sxs-lookup"><span data-stu-id="9af29-1108">Use <xref:System.String.ToLowerInvariant%2A?displayProperty=nameWithType> to convert a string to lowercase.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.ToLower" />
        <altmember cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9af29-1109">将此实例的值转换为其等效的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="9af29-1109">Converts the value of this instance to its equivalent string representation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="char.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9af29-1110">将此实例的值转换为其等效的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="9af29-1110">Converts the value of this instance to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="9af29-1111">此实例的值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="9af29-1111">The string representation of the value of this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9af29-1112">下面的代码示例演示了<xref:System.Char.ToString%2A>。</span><span class="sxs-lookup"><span data-stu-id="9af29-1112">The following code example demonstrates <xref:System.Char.ToString%2A>.</span></span>  
  
 [!code-cpp[System.Char.ToString#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToString/CPP/tostring.cpp#17)]
 [!code-csharp[System.Char.ToString#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToString/CS/tostring.cs#17)]
 [!code-vb[System.Char.ToString#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToString/VB/tostring.vb#17)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToString(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (c As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(char c);" />
      <MemberSignature Language="F#" Value="static member ToString : char -&gt; string" Usage="System.char.ToString c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="9af29-1113">要转换的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-1113">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="9af29-1114">将指定的 Unicode 字符转换为它的等效字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="9af29-1114">Converts the specified Unicode character to its equivalent string representation.</span></span></summary>
        <returns><span data-ttu-id="9af29-1115"><paramref name="c" /> 值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="9af29-1115">The string representation of the value of <paramref name="c" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9af29-1116">下面的代码示例演示了<xref:System.Char.ToString%2A>。</span><span class="sxs-lookup"><span data-stu-id="9af29-1116">The following code example demonstrates <xref:System.Char.ToString%2A>.</span></span>  
  
 [!code-cpp[System.Char.ToString#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToString/CPP/tostring.cpp#17)]
 [!code-csharp[System.Char.ToString#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToString/CS/tostring.cs#17)]
 [!code-vb[System.Char.ToString#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToString/VB/tostring.vb#17)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="char.ToString provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IConvertible.ToString(System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="9af29-1117">（保留）一个对象，用于提供区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="9af29-1117">(Reserved) An object that supplies culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="9af29-1118">使用指定的区域性特定格式信息将此实例的值转换为它的等效字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="9af29-1118">Converts the value of this instance to its equivalent string representation using the specified culture-specific format information.</span></span></summary>
        <returns><span data-ttu-id="9af29-1119">此实例的值的字符串表示形式，由 <paramref name="provider" /> 指定。</span><span class="sxs-lookup"><span data-stu-id="9af29-1119">The string representation of the value of this instance as specified by <paramref name="provider" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-1120">`provider`参数将被忽略; 不参与此操作。</span><span class="sxs-lookup"><span data-stu-id="9af29-1120">The `provider` parameter is ignored; it does not participate in this operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-1121">下面的代码示例演示如何重载<xref:System.Char.ToString%2A>。</span><span class="sxs-lookup"><span data-stu-id="9af29-1121">The following code example demonstrates an overload of <xref:System.Char.ToString%2A>.</span></span>  
  
 [!code-cpp[System.Char.ToString#17](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Char.ToString/CPP/tostring.cpp#17)]
 [!code-csharp[System.Char.ToString#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Char.ToString/CS/tostring.cs#17)]
 [!code-vb[System.Char.ToString#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Char.ToString/VB/tostring.vb#17)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Parse(System.String)" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToUpper">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9af29-1122">将 Unicode 字符的值转换为它的大写等效项。</span><span class="sxs-lookup"><span data-stu-id="9af29-1122">Converts the value of a Unicode character to its uppercase equivalent.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public static char ToUpper (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToUpper(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToUpper(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUpper (c As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToUpper(char c);" />
      <MemberSignature Language="F#" Value="static member ToUpper : char -&gt; char" Usage="System.char.ToUpper c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="9af29-1123">要转换的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-1123">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="9af29-1124">将 Unicode 字符的值转换为它的大写等效项。</span><span class="sxs-lookup"><span data-stu-id="9af29-1124">Converts the value of a Unicode character to its uppercase equivalent.</span></span></summary>
        <returns><span data-ttu-id="9af29-1125"><paramref name="c" /> 的大写等效项，或者，如果 <paramref name="c" /> 已经是大写字母或不是字母，则为 <paramref name="c" /> 的未更改值。</span><span class="sxs-lookup"><span data-stu-id="9af29-1125">The uppercase equivalent of <paramref name="c" />, or the unchanged value of <paramref name="c" /> if <paramref name="c" /> is already uppercase, has no uppercase equivalent, or is not alphabetic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-1126">获取来自当前区域性的大小写规则。</span><span class="sxs-lookup"><span data-stu-id="9af29-1126">Casing rules are obtained from the current culture.</span></span>  
  
 <span data-ttu-id="9af29-1127">使用<xref:System.String.ToUpper%2A?displayProperty=nameWithType>将字符串转换为大写。</span><span class="sxs-lookup"><span data-stu-id="9af29-1127">Use <xref:System.String.ToUpper%2A?displayProperty=nameWithType> to convert a string to uppercase.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-1128">下面的示例将数组中的每个字符转换为其大写等效项。</span><span class="sxs-lookup"><span data-stu-id="9af29-1128">The following example converts each character in an array to its uppercase equivalent.</span></span>  
  
 [!code-csharp[System.Char.ToUpper#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.toupper/cs/toupper1.cs#1)]
 [!code-vb[System.Char.ToUpper#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.toupper/vb/toupper1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para><span data-ttu-id="9af29-1129">中所述[字符串使用最佳做法](~/docs/standard/base-types/best-practices-strings.md)，我们建议你避免调用替换为默认值的字符大小写和字符串大小写的方法。</span><span class="sxs-lookup"><span data-stu-id="9af29-1129">As explained in [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md), we recommend that you avoid calling character-casing and string-casing methods that substitute default values.</span></span> <span data-ttu-id="9af29-1130">相反，应调用需要显式指定参数的方法。</span><span class="sxs-lookup"><span data-stu-id="9af29-1130">Instead, you should call methods that require parameters to be explicitly specified.</span></span> <span data-ttu-id="9af29-1131">若要将转换为使用当前区域性的大小写约定大写的字符，请调用<see cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />方法的值的重载<see cref="P:System.Globalization.CultureInfo.CurrentCulture" />有关其<paramref name="culture" />参数。</span><span class="sxs-lookup"><span data-stu-id="9af29-1131">To convert a character to uppercase by using the casing conventions of the current culture, call the <see cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" /> method overload with a value of <see cref="P:System.Globalization.CultureInfo.CurrentCulture" /> for its <paramref name="culture" /> parameter.</span></span></para></block>
        <altmember cref="M:System.String.ToUpper" />
        <altmember cref="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public static char ToUpper (char c, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToUpper(char c, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUpper (c As Char, culture As CultureInfo) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToUpper(char c, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="static member ToUpper : char * System.Globalization.CultureInfo -&gt; char" Usage="System.char.ToUpper (c, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="9af29-1132">要转换的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-1132">The Unicode character to convert.</span></span></param>
        <param name="culture"><span data-ttu-id="9af29-1133">一个对象，用于提供区域性特定的大小写规则。</span><span class="sxs-lookup"><span data-stu-id="9af29-1133">An object that supplies culture-specific casing rules.</span></span></param>
        <summary><span data-ttu-id="9af29-1134">使用指定的区域性特定格式设置信息将指定 Unicode 字符的值转换为它的大写等效项。</span><span class="sxs-lookup"><span data-stu-id="9af29-1134">Converts the value of a specified Unicode character to its uppercase equivalent using specified culture-specific formatting information.</span></span></summary>
        <returns><span data-ttu-id="9af29-1135"><paramref name="c" /> 的大写等效项（根据 <paramref name="culture" /> 进行修改），或者，如果 <paramref name="c" /> 已经是大写字母、没有大写等效项或不是字母，则为 <paramref name="c" /> 的未更改值。</span><span class="sxs-lookup"><span data-stu-id="9af29-1135">The uppercase equivalent of <paramref name="c" />, modified according to <paramref name="culture" />, or the unchanged value of <paramref name="c" /> if <paramref name="c" /> is already uppercase, has no uppercase equivalent, or is not alphabetic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-1136">使用<xref:System.String.ToUpper%2A?displayProperty=nameWithType>将字符串转换为大写。</span><span class="sxs-lookup"><span data-stu-id="9af29-1136">Use <xref:System.String.ToUpper%2A?displayProperty=nameWithType> to convert a string to uppercase.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-1137">下面的示例将数组中的每个字符转换为其大写等效项，对于 EN-US 区域性、 固定区域性和 TR-TR 文化。</span><span class="sxs-lookup"><span data-stu-id="9af29-1137">The following example converts each character in an array to its uppercase equivalent for the en-US culture, the invariant culture, and the tr-TR culture.</span></span> <span data-ttu-id="9af29-1138">在此示例中，每个小写字母的大写等效项是一种情况下除外的所有区域性相同的。</span><span class="sxs-lookup"><span data-stu-id="9af29-1138">In this example, the uppercase equivalent of each lowercase letter is identical for all cultures except for one case.</span></span> <span data-ttu-id="9af29-1139">小写"i"字符 (U + 0069) 转换为"I"(U + 0049) 在 EN-US 和固定区域性，但到""(U + 0130) TR-TR 文化中。</span><span class="sxs-lookup"><span data-stu-id="9af29-1139">The lowercase "i" character (U+0069) converts to "I" (U+0049) in the en-US and invariant cultures, but to "İ" (U+0130) in the tr-TR culture.</span></span>  
  
 [!code-csharp[System.Char.ToUpper#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.char.toupper/cs/toupper5.cs#2)]
 [!code-vb[System.Char.ToUpper#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.char.toupper/vb/toupper5.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9af29-1140"><paramref name="culture" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-1140"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="M:System.String.ToUpper" />
        <altmember cref="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToUpperInvariant">
      <MemberSignature Language="C#" Value="public static char ToUpperInvariant (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToUpperInvariant(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.ToUpperInvariant(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToUpperInvariant (c As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ToUpperInvariant(char c);" />
      <MemberSignature Language="F#" Value="static member ToUpperInvariant : char -&gt; char" Usage="System.char.ToUpperInvariant c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="9af29-1141">要转换的 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-1141">The Unicode character to convert.</span></span></param>
        <summary><span data-ttu-id="9af29-1142">使用固定区域性的大小写规则，将 Unicode 字符的值转换为其大写等效项。</span><span class="sxs-lookup"><span data-stu-id="9af29-1142">Converts the value of a Unicode character to its uppercase equivalent using the casing rules of the invariant culture.</span></span></summary>
        <returns><span data-ttu-id="9af29-1143"><paramref name="c" /> 参数的小写等效项，或者，如果 <paramref name="c" /> 已经是大写字母或不是字母，则为 <paramref name="c" /> 的未更改值。</span><span class="sxs-lookup"><span data-stu-id="9af29-1143">The uppercase equivalent of the <paramref name="c" /> parameter, or the unchanged value of <paramref name="c" />, if <paramref name="c" /> is already uppercase or not alphabetic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-1144">如果你的应用程序不受当前区域性，但依赖于可预测的方式更改的字符大小写，使用<xref:System.Char.ToUpperInvariant%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="9af29-1144">If your application is unaffected by the current culture and depends on the case of a character changing in a predictable way, use the <xref:System.Char.ToUpperInvariant%2A> method.</span></span>  <span data-ttu-id="9af29-1145"><xref:System.Char.ToUpperInvariant%2A>方法等效于`ToUpper(Char, CultureInfo.InvariantCulture)`。</span><span class="sxs-lookup"><span data-stu-id="9af29-1145">The <xref:System.Char.ToUpperInvariant%2A> method is equivalent to `ToUpper(Char, CultureInfo.InvariantCulture)`.</span></span>  
  
 <span data-ttu-id="9af29-1146">使用<xref:System.String.ToUpperInvariant%2A?displayProperty=nameWithType>将字符串转换为大写。</span><span class="sxs-lookup"><span data-stu-id="9af29-1146">Use <xref:System.String.ToUpperInvariant%2A?displayProperty=nameWithType> to convert a string to uppercase.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.ToUpper" />
        <altmember cref="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out char result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] char&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Char.TryParse(System.String,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (s As String, ByRef result As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ s, [Runtime::InteropServices::Out] char % result);" />
      <MemberSignature Language="F#" Value="static member TryParse : string *  -&gt; bool" Usage="System.char.TryParse (s, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.Char" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s"><span data-ttu-id="9af29-1147">包含单个字符的字符串，或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-1147">A string that contains a single character, or <see langword="null" />.</span></span></param>
        <param name="result"><span data-ttu-id="9af29-1148">此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中的唯一字符等效的 Unicode 字符；如果转换失败，则包含未定义的值。</span><span class="sxs-lookup"><span data-stu-id="9af29-1148">When this method returns, contains a Unicode character equivalent to the sole character in <paramref name="s" />, if the conversion succeeded, or an undefined value if the conversion failed.</span></span> <span data-ttu-id="9af29-1149">如果 <paramref name="s" /> 参数为 <see langword="null" /> 或 <paramref name="s" /> 的长度不为 1，则转换失败。</span><span class="sxs-lookup"><span data-stu-id="9af29-1149">The conversion fails if the <paramref name="s" /> parameter is <see langword="null" /> or the length of <paramref name="s" /> is not 1.</span></span> <span data-ttu-id="9af29-1150">此参数未经初始化即被传递。</span><span class="sxs-lookup"><span data-stu-id="9af29-1150">This parameter is passed uninitialized.</span></span></param>
        <summary><span data-ttu-id="9af29-1151">将指定字符串的值转换为它的等效 Unicode 字符。</span><span class="sxs-lookup"><span data-stu-id="9af29-1151">Converts the value of the specified string to its equivalent Unicode character.</span></span> <span data-ttu-id="9af29-1152">一个指示转换是成功还是失败的返回代码。</span><span class="sxs-lookup"><span data-stu-id="9af29-1152">A return code indicates whether the conversion succeeded or failed.</span></span></summary>
        <returns><span data-ttu-id="9af29-1153">如果 <see langword="true" /> 参数成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9af29-1153"><see langword="true" /> if the <paramref name="s" /> parameter was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9af29-1154"><xref:System.Char.TryParse%2A>方法就像<xref:System.Char.Parse%2A>方法中，除<xref:System.Char.TryParse%2A>方法不会引发异常，如果转换失败。</span><span class="sxs-lookup"><span data-stu-id="9af29-1154">The <xref:System.Char.TryParse%2A> method is like the <xref:System.Char.Parse%2A> method, except the <xref:System.Char.TryParse%2A> method does not throw an exception if the conversion fails.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9af29-1155">下面的代码示例演示如何重载<xref:System.Char.TryParse%2A>方法对多个基类型，并<xref:System.DateTime.TryParseExact%2A>方法<xref:System.DateTime>基类型。</span><span class="sxs-lookup"><span data-stu-id="9af29-1155">The following code example demonstrates overloads of the <xref:System.Char.TryParse%2A> method for several base types, and the <xref:System.DateTime.TryParseExact%2A> method for the <xref:System.DateTime> base type.</span></span>  
  
 [!code-cpp[T.TryParse#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.TryParse/CPP/tp.cpp#1)]
 [!code-csharp[T.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.TryParse/CS/tp.cs#1)]
 [!code-vb[T.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.TryParse/VB/tp.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Char.Parse(System.String)" />
        <altmember cref="M:System.Char.ToString" />
        <related type="Article" href="https://msdn.microsoft.com/library/d139bc00-3c4e-4d78-ac9a-5c951b258d28"><span data-ttu-id="9af29-1156">在 .NET Framework 中分析其他字符串</span><span class="sxs-lookup"><span data-stu-id="9af29-1156">Parsing Other Strings in the .NET Framework</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>