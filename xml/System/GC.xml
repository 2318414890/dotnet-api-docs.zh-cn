<Type Name="GC" FullName="System.GC">
  <TypeSignature Language="C#" Value="public static class GC" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit GC extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.GC" />
  <TypeSignature Language="VB.NET" Value="Public Class GC" />
  <TypeSignature Language="C++ CLI" Value="public ref class GC abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="91149-101">控制系统垃圾回收器（一种自动回收未使用内存的服务）。</span><span class="sxs-lookup"><span data-stu-id="91149-101">Controls the system garbage collector, a service that automatically reclaims unused memory.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91149-102">垃圾回收器控制的分配和释放的托管内存的公共语言运行时组件。</span><span class="sxs-lookup"><span data-stu-id="91149-102">The garbage collector is a common language runtime component that controls the allocation and release of managed memory.</span></span> <span data-ttu-id="91149-103">此类中的方法影响在对象上并释放资源对象分配了执行垃圾回收时。</span><span class="sxs-lookup"><span data-stu-id="91149-103">The methods in this class influence when garbage collection is performed on an object and when resources allocated by an object are released.</span></span> <span data-ttu-id="91149-104">此类中的属性提供有关可用的内存总量信息在系统和年龄类别中或生成，分配给对象的内存。</span><span class="sxs-lookup"><span data-stu-id="91149-104">Properties in this class provide information about the total amount of memory available in the system and the age category, or generation, of memory allocated to an object.</span></span>  
  
 <span data-ttu-id="91149-105">垃圾回收器跟踪并回收托管内存中分配的对象。</span><span class="sxs-lookup"><span data-stu-id="91149-105">The garbage collector tracks and reclaims objects allocated in managed memory.</span></span> <span data-ttu-id="91149-106">定期，垃圾回收器执行垃圾回收回收内存分配给没有有效的引用的对象。</span><span class="sxs-lookup"><span data-stu-id="91149-106">Periodically, the garbage collector performs garbage collection to reclaim memory allocated to objects for which there are no valid references.</span></span> <span data-ttu-id="91149-107">当无法满足内存要求，使用可用的可用内存，垃圾回收时会自动发生。</span><span class="sxs-lookup"><span data-stu-id="91149-107">Garbage collection happens automatically when a request for memory cannot be satisfied using available free memory.</span></span> <span data-ttu-id="91149-108">或者，应用程序可以强制使用垃圾收集<xref:System.GC.Collect%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="91149-108">Alternatively, an application can force garbage collection using the <xref:System.GC.Collect%2A> method.</span></span>  
  
 <span data-ttu-id="91149-109">垃圾回收包含以下步骤：</span><span class="sxs-lookup"><span data-stu-id="91149-109">Garbage collection consists of the following steps:</span></span>  
  
1.  <span data-ttu-id="91149-110">垃圾回收器搜索的托管代码中引用的托管对象。</span><span class="sxs-lookup"><span data-stu-id="91149-110">The garbage collector searches for managed objects that are referenced in managed code.</span></span>  
  
2.  <span data-ttu-id="91149-111">垃圾回收器尝试完成未引用的对象。</span><span class="sxs-lookup"><span data-stu-id="91149-111">The garbage collector tries to finalize objects that are not referenced.</span></span>  
  
3.  <span data-ttu-id="91149-112">垃圾回收器释放未引用的对象，并回收其内存。</span><span class="sxs-lookup"><span data-stu-id="91149-112">The garbage collector frees objects that are not referenced and reclaims their memory.</span></span>  
  
 <span data-ttu-id="91149-113">本主题包括以下部分：</span><span class="sxs-lookup"><span data-stu-id="91149-113">This topic includes the following sections:</span></span>  
  
 <span data-ttu-id="91149-114">[垃圾回收器和非托管的资源](#unmanaged) </span><span class="sxs-lookup"><span data-stu-id="91149-114">[The garbage collector and unmanaged resources](#unmanaged) </span></span>  
 <span data-ttu-id="91149-115">[对象老化和代](#generations) </span><span class="sxs-lookup"><span data-stu-id="91149-115">[Object aging and generations](#generations) </span></span>  
 [<span data-ttu-id="91149-116">不允许垃圾回收</span><span class="sxs-lookup"><span data-stu-id="91149-116">Disallowing garbage collection</span></span>](#NoGCRegion)  
  
<a name="unmanaged"></a>   
## <a name="the-garbage-collector-and-unmanaged-resources"></a><span data-ttu-id="91149-117">垃圾回收器和非托管的资源</span><span class="sxs-lookup"><span data-stu-id="91149-117">The garbage collector and unmanaged resources</span></span>  
 <span data-ttu-id="91149-118">在回收中，垃圾回收器将不会释放对象如果在托管代码中找到对对象的一个或多个引用。</span><span class="sxs-lookup"><span data-stu-id="91149-118">During a collection, the garbage collector will not free an object if it finds one or more references to the object in managed code.</span></span> <span data-ttu-id="91149-119">但是，垃圾回收器不能识别对一个对象从非托管代码的引用，并且可能会释放正在使用非托管代码中以独占方式除非明确禁止执行此操作的对象。</span><span class="sxs-lookup"><span data-stu-id="91149-119">However, the garbage collector does not recognize references to an object from unmanaged code, and might free objects that are being used exclusively in unmanaged code unless explicitly prevented from doing so.</span></span> <span data-ttu-id="91149-120"><xref:System.GC.KeepAlive%2A>方法提供了一种机制，防止垃圾回收器收集中非托管代码仍在使用的对象。</span><span class="sxs-lookup"><span data-stu-id="91149-120">The <xref:System.GC.KeepAlive%2A> method provides a mechanism that prevents the garbage collector from collecting objects that are still in use in unmanaged code.</span></span>  
  
 <span data-ttu-id="91149-121">除了托管的内存分配，垃圾回收器的实现不维护有关对象，如文件句柄或数据库连接保持的资源的信息。</span><span class="sxs-lookup"><span data-stu-id="91149-121">Aside from managed memory allocations, implementations of the garbage collector do not maintain information about resources held by an object, such as file handles or database connections.</span></span> <span data-ttu-id="91149-122">当类型使用该类型的实例进行回收之前，必须释放的非托管的资源时，该类型可以实现终结器。</span><span class="sxs-lookup"><span data-stu-id="91149-122">When a type uses unmanaged resources that must be released before instances of the type are reclaimed, the type can implement a finalizer.</span></span>  
  
 <span data-ttu-id="91149-123">在大多数情况下，终结器实现的重写<xref:System.Object.Finalize%2A?displayProperty=nameWithType>方法; 但是，在 C# 或 c + + 编写的类型实现析构函数，哪些编译器将转换为的重写<xref:System.Object.Finalize%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="91149-123">In most cases, finalizers are implemented by overriding the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method; however, types written in C# or C++ implement destructors, which compilers turn into an override of <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="91149-124">在大多数情况下，如果对象具有终结器中，垃圾回收器调用它之前释放该对象。</span><span class="sxs-lookup"><span data-stu-id="91149-124">In most cases, if an object has a finalizer, the garbage collector calls it prior to freeing the object.</span></span> <span data-ttu-id="91149-125">但是，垃圾回收器不需要在所有情况下; 调用终结器例如，<xref:System.GC.SuppressFinalize%2A>方法显式阻止调用对象的终结器。</span><span class="sxs-lookup"><span data-stu-id="91149-125">However, the garbage collector is not required to call finalizers in all situations; for example, the <xref:System.GC.SuppressFinalize%2A> method explicitly prevents an object's finalizer from being called.</span></span> <span data-ttu-id="91149-126">此外，垃圾回收器不需要使用一个特定的线程来完成对象，或确保用于相互引用，而是可用于垃圾回收的对象调用终结器的顺序。</span><span class="sxs-lookup"><span data-stu-id="91149-126">Also, the garbage collector is not required to use a specific thread to finalize objects, or guarantee the order in which finalizers are called for objects that reference each other but are otherwise available for garbage collection.</span></span>  
  
 <span data-ttu-id="91149-127">在资源必须释放在特定时间的情况下，类可以实现<xref:System.IDisposable>接口，其中包含<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>执行资源管理和清理任务的方法。</span><span class="sxs-lookup"><span data-stu-id="91149-127">In scenarios where resources must be released at a specific time, classes can implement the <xref:System.IDisposable> interface, which contains the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> method that performs resource management and cleanup tasks.</span></span> <span data-ttu-id="91149-128">类实现<xref:System.IDisposable.Dispose%2A>必须指定为它们的类协定中，如果类使用者调用方法，以清理该对象。</span><span class="sxs-lookup"><span data-stu-id="91149-128">Classes that implement <xref:System.IDisposable.Dispose%2A> must specify, as part of their class contract, if and when class consumers call the method to clean up the object.</span></span> <span data-ttu-id="91149-129">垃圾回收器不会默认情况下，调用<xref:System.IDisposable.Dispose%2A>方法; 但是，实现<xref:System.IDisposable.Dispose%2A>方法可以调用方法<xref:System.GC>类自定义垃圾回收器的终止行为。</span><span class="sxs-lookup"><span data-stu-id="91149-129">The garbage collector does not, by default, call the <xref:System.IDisposable.Dispose%2A> method; however, implementations of the <xref:System.IDisposable.Dispose%2A> method can call methods in the <xref:System.GC> class to customize the finalization behavior of the garbage collector.</span></span>  
  
 <span data-ttu-id="91149-130">对象终止和的释放模式的详细信息，请参阅[清洗向上非托管资源](~/docs/standard/garbage-collection/unmanaged.md)。</span><span class="sxs-lookup"><span data-stu-id="91149-130">For more information on object finalization and the dispose pattern, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
<a name="generations"></a>   
## <a name="object-aging-and-generations"></a><span data-ttu-id="91149-131">对象老化和代</span><span class="sxs-lookup"><span data-stu-id="91149-131">Object aging and generations</span></span>  
 <span data-ttu-id="91149-132">公共语言运行时在垃圾回收器支持使用代的对象期限。</span><span class="sxs-lookup"><span data-stu-id="91149-132">The garbage collector in the common language runtime supports object aging using generations.</span></span> <span data-ttu-id="91149-133">代次是一个内存中的对象的相对时间度量单位。</span><span class="sxs-lookup"><span data-stu-id="91149-133">A generation is a unit of measure of the relative age of objects in memory.</span></span> <span data-ttu-id="91149-134">生成编号或的对象的保留时间指示属于对象的代。</span><span class="sxs-lookup"><span data-stu-id="91149-134">The generation number, or age, of an object indicates the generation to which an object belongs.</span></span> <span data-ttu-id="91149-135">创建多个对象最近是一部分较新的代，并且具有较低的生成编号不是对象创建前面的应用程序生命周期。</span><span class="sxs-lookup"><span data-stu-id="91149-135">Objects created more recently are part of newer generations, and have lower generation numbers than objects created earlier in the application life cycle.</span></span> <span data-ttu-id="91149-136">在最新生成的对象是第 0 代中。</span><span class="sxs-lookup"><span data-stu-id="91149-136">Objects in the most recent generation are in generation 0.</span></span> <span data-ttu-id="91149-137">此实现的垃圾回收器支持的对象的三代、 第 0、 1 和 2。</span><span class="sxs-lookup"><span data-stu-id="91149-137">This implementation of the garbage collector supports three generations of objects, generations 0, 1, and 2.</span></span> <span data-ttu-id="91149-138">你可以检索的值<xref:System.GC.MaxGeneration%2A>属性来确定系统支持的最大代数。</span><span class="sxs-lookup"><span data-stu-id="91149-138">You can retrieve the value of the <xref:System.GC.MaxGeneration%2A> property to determine the maximum generation number supported by the system.</span></span>  
  
 <span data-ttu-id="91149-139">对象老化允许在一组特定的代，而无需需垃圾回收器评估所有代上的应用程序迁移到目标垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-139">Object aging allows applications to target garbage collection at a specific set of generations rather than requiring the garbage collector to evaluate all generations.</span></span> <span data-ttu-id="91149-140">重载的<xref:System.GC.Collect%2A>方法包括`generation`参数允许你指定最后一代进行垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-140">Overloads of the <xref:System.GC.Collect%2A> method that include a `generation` parameter allow you to specify the oldest generation to be garbage collected.</span></span>  
  
<a name="NoGCRegion"></a>   
## <a name="disallowing-garbage-collection"></a><span data-ttu-id="91149-141">不允许垃圾回收</span><span class="sxs-lookup"><span data-stu-id="91149-141">Disallowing garbage collection</span></span>  
 <span data-ttu-id="91149-142">从开始[!INCLUDE[net_v46](~/includes/net-v46-md.md)]，垃圾回收器支持无 GC 区域延迟模式，可以在垃圾回收如何产生负面影响应用的性能的关键路径执行期间使用。</span><span class="sxs-lookup"><span data-stu-id="91149-142">Starting with the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], the garbage collector supports a no GC region latency mode that can be used during the execution of critical paths in which garbage collection can adversely affect an app's performance.</span></span> <span data-ttu-id="91149-143">无 GC 区域延迟模式要求您指定可由垃圾回收器不受干扰分配的内存量。</span><span class="sxs-lookup"><span data-stu-id="91149-143">The no GC region latency mode requires that you specify an amount of memory that can be allocated without interference from the garbage collector.</span></span> <span data-ttu-id="91149-144">如果运行时可以分配的内存，运行时将不会执行垃圾回收，在关键路径中的代码执行时。</span><span class="sxs-lookup"><span data-stu-id="91149-144">If the runtime can allocate that memory, the runtime will not perform a garbage collection while code in the critical path is executing.</span></span>  
  
 <span data-ttu-id="91149-145">通过调用的重载之一定义的无 GC 区域的关键路径的开头<xref:System.GC.TryStartNoGCRegion%2A>。</span><span class="sxs-lookup"><span data-stu-id="91149-145">You define the beginning of the critical path of the no GC region by calling one of the overloads of the <xref:System.GC.TryStartNoGCRegion%2A>.</span></span> <span data-ttu-id="91149-146">通过调用中指定其关键路径的末尾<xref:System.GC.EndNoGCRegion%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="91149-146">You specify the end of its critical path by calling the <xref:System.GC.EndNoGCRegion%2A> method.</span></span>  
  
 <span data-ttu-id="91149-147">无法将调用传给<xref:System.GC.TryStartNoGCRegion%2A>方法，并且你应只调用<xref:System.GC.EndNoGCRegion%2A>方法如果运行时当前处于无 GC 区域延迟模式。</span><span class="sxs-lookup"><span data-stu-id="91149-147">You cannot nest calls to the <xref:System.GC.TryStartNoGCRegion%2A> method, and you should only call the <xref:System.GC.EndNoGCRegion%2A> method if the runtime is currently in no GC region latency mode.</span></span> <span data-ttu-id="91149-148">换而言之，不应调用<xref:System.GC.TryStartNoGCRegion%2A>多次 （在第一个方法调用后，后续调用将不会成功），并且不应需要调用<xref:System.GC.EndNoGCRegion%2A>成功只是因为第一次调用到<xref:System.GC.TryStartNoGCRegion%2A>成功。</span><span class="sxs-lookup"><span data-stu-id="91149-148">In other words, you should not call <xref:System.GC.TryStartNoGCRegion%2A> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <xref:System.GC.EndNoGCRegion%2A> to succeed just because the first call to <xref:System.GC.TryStartNoGCRegion%2A> succeeded.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91149-149">下面的示例使用多个 GC 方法以获取生成和有关未使用的对象的块的内存信息并将其打印到控制台。</span><span class="sxs-lookup"><span data-stu-id="91149-149">The following example uses several GC methods to get generation and memory information about a block of unused objects and print it to the console.</span></span> <span data-ttu-id="91149-150">然后收集未使用的对象，并显示生成的内存总量。</span><span class="sxs-lookup"><span data-stu-id="91149-150">The unused objects are then collected, and the resulting memory totals are displayed.</span></span>  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.GCSettings" />
  </Docs>
  <Members>
    <Member MemberName="AddMemoryPressure">
      <MemberSignature Language="C#" Value="public static void AddMemoryPressure (long bytesAllocated);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddMemoryPressure(int64 bytesAllocated) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.AddMemoryPressure(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddMemoryPressure (bytesAllocated As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddMemoryPressure(long bytesAllocated);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytesAllocated" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="bytesAllocated"><span data-ttu-id="91149-151">已分配的非托管内存的增量。</span><span class="sxs-lookup"><span data-stu-id="91149-151">The incremental amount of unmanaged memory that has been allocated.</span></span></param>
        <summary><span data-ttu-id="91149-152">通知运行时在安排垃圾回收时应考虑分配大量的非托管内存。</span><span class="sxs-lookup"><span data-stu-id="91149-152">Informs the runtime of a large allocation of unmanaged memory that should be taken into account when scheduling garbage collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91149-153">确定何时安排垃圾回收时，运行时将考虑在内分配托管的内存量。</span><span class="sxs-lookup"><span data-stu-id="91149-153">In determining when to schedule garbage collection, the runtime takes into account how much managed memory is allocated.</span></span> <span data-ttu-id="91149-154">如果一个小的托管的对象分配大量的非托管内存，运行时仅托管的内存，将考虑在内，从而低估安排垃圾回收的紧急性。</span><span class="sxs-lookup"><span data-stu-id="91149-154">If a small managed object allocates a large amount of unmanaged memory, the runtime takes into account only the managed memory, and thus underestimates the urgency of scheduling garbage collection.</span></span> <span data-ttu-id="91149-155"><xref:System.GC.AddMemoryPressure%2A>方法通知运行时在系统内存此额外的压力。</span><span class="sxs-lookup"><span data-stu-id="91149-155">The <xref:System.GC.AddMemoryPressure%2A> method informs the runtime of this additional pressure on system memory.</span></span>  
  
 <span data-ttu-id="91149-156">在最简单的使用情况模式中，托管的对象分配构造函数中的非托管的内存和释放在`Dispose`或`Finalize`方法。</span><span class="sxs-lookup"><span data-stu-id="91149-156">In the simplest usage pattern, a managed object allocates unmanaged memory in the constructor and releases it in the `Dispose` or `Finalize` method.</span></span> <span data-ttu-id="91149-157">调用<xref:System.GC.AddMemoryPressure%2A>方法之后分配非托管的内存中，并调用<xref:System.GC.RemoveMemoryPressure%2A>方法之后将其释放。</span><span class="sxs-lookup"><span data-stu-id="91149-157">Call the <xref:System.GC.AddMemoryPressure%2A> method after allocating the unmanaged memory, and call the <xref:System.GC.RemoveMemoryPressure%2A> method after releasing it.</span></span>  
  
 <span data-ttu-id="91149-158">在更复杂的情况下，其中的非托管的内存分配非常大的变化的托管对象的生存期内，可以调用<xref:System.GC.AddMemoryPressure%2A>和<xref:System.GC.RemoveMemoryPressure%2A>方法进行通信的运行时对这些增量更改。</span><span class="sxs-lookup"><span data-stu-id="91149-158">In more complicated scenarios, where the unmanaged memory allocation changes substantially during the lifetime of the managed object, you can call the <xref:System.GC.AddMemoryPressure%2A> and <xref:System.GC.RemoveMemoryPressure%2A> methods to communicate these incremental changes to the runtime.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="91149-159">你必须确保删除完全您添加的压力量。</span><span class="sxs-lookup"><span data-stu-id="91149-159">You must ensure that you remove exactly the amount of pressure you add.</span></span> <span data-ttu-id="91149-160">如果不这样做可能会较长时间的时间运行的应用程序中的系统的性能产生负面影响。</span><span class="sxs-lookup"><span data-stu-id="91149-160">Failing to do so can adversely affect the performance of the system in applications that run for long periods of time.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="91149-161"><paramref name="bytesAllocated" /> 小于或等于 0。</span><span class="sxs-lookup"><span data-stu-id="91149-161"><paramref name="bytesAllocated" /> is less than or equal to 0.</span></span>  
  
 <span data-ttu-id="91149-162">或</span><span class="sxs-lookup"><span data-stu-id="91149-162">-or-</span></span>  
  
 <span data-ttu-id="91149-163">在 32 位的计算机上，<paramref name="bytesAllocated" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="91149-163">On a 32-bit computer, <paramref name="bytesAllocated" /> is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="91149-164">在操作垃圾回收优先级时调用非托管的代码的功能。</span><span class="sxs-lookup"><span data-stu-id="91149-164">for the ability to call unmanaged code when manipulating garbage-collection priority.</span></span> <span data-ttu-id="91149-165">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="91149-165">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="91149-166">需要完全信任直接调用方。</span><span class="sxs-lookup"><span data-stu-id="91149-166">requires full trust for the immediate caller.</span></span> <span data-ttu-id="91149-167">此成员不能由部分受信任或不透明的代码。</span><span class="sxs-lookup"><span data-stu-id="91149-167">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CancelFullGCNotification">
      <MemberSignature Language="C#" Value="public static void CancelFullGCNotification ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CancelFullGCNotification() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.CancelFullGCNotification" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CancelFullGCNotification ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CancelFullGCNotification();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91149-168">取消注册垃圾回收通知。</span><span class="sxs-lookup"><span data-stu-id="91149-168">Cancels the registration of a garbage collection notification.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91149-169">此方法用于取消使用已注册垃圾回收通知<xref:System.GC.RegisterForFullGCNotification%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="91149-169">This method cancels a garbage collection notification that was registered by using the <xref:System.GC.RegisterForFullGCNotification%2A> method.</span></span> <span data-ttu-id="91149-170">不需要调整阈值参数值在对后续调用之前调用此方法<xref:System.GC.RegisterForFullGCNotification%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="91149-170">You do not have to call this method before adjusting threshold parameter values in subsequent calls to the <xref:System.GC.RegisterForFullGCNotification%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91149-171">下面的示例取消垃圾回收注册。</span><span class="sxs-lookup"><span data-stu-id="91149-171">The following example cancels a garbage collection registration.</span></span> <span data-ttu-id="91149-172">此示例摘自更大的示例为提供[垃圾回收通知](~/docs/standard/garbage-collection/notifications.md)主题。</span><span class="sxs-lookup"><span data-stu-id="91149-172">This example is part of a larger example provided for the [Garbage Collection Notifications](~/docs/standard/garbage-collection/notifications.md) topic.</span></span>  
  
 [!code-cpp[GCNotification#7](~/samples/snippets/cpp/VS_Snippets_CLR/GCNotification/cpp/program.cpp#7)]
 [!code-csharp[GCNotification#7](~/samples/snippets/csharp/VS_Snippets_CLR/GCNotification/cs/Program.cs#7)]
 [!code-vb[GCNotification#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/GCNotification/vb/program.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="91149-173">此成员在启用并发垃圾回收时不可用。</span><span class="sxs-lookup"><span data-stu-id="91149-173">This member is not available when concurrent garbage collection is enabled.</span></span> <span data-ttu-id="91149-174">若要了解如何禁用并发垃圾回收，请参阅 [&lt;gcConcurrent&gt;](~/docs/framework/configure-apps/file-schema/runtime/gcconcurrent-element.md) 运行时设置。</span><span class="sxs-lookup"><span data-stu-id="91149-174">See the [&lt;gcConcurrent&gt;](~/docs/framework/configure-apps/file-schema/runtime/gcconcurrent-element.md) runtime setting for information about how to disable concurrent garbage collection.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="91149-175">直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="91149-175">for full trust for the immediate caller.</span></span> <span data-ttu-id="91149-176">此成员不能由部分信任的代码使用。</span><span class="sxs-lookup"><span data-stu-id="91149-176">This member cannot be used by partially trusted code.</span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="91149-177">需要完全信任直接调用方。</span><span class="sxs-lookup"><span data-stu-id="91149-177">requires full trust for the immediate caller.</span></span> <span data-ttu-id="91149-178">此成员不能由部分受信任或不透明的代码。</span><span class="sxs-lookup"><span data-stu-id="91149-178">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Collect">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="91149-179">强制进行垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-179">Forces garbage collection.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91149-180">强制对所有代进行即时垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-180">Forces an immediate garbage collection of all generations.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91149-181">使用此方法来尝试回收不可访问的全部内存。</span><span class="sxs-lookup"><span data-stu-id="91149-181">Use this method to try to reclaim all memory that is inaccessible.</span></span> <span data-ttu-id="91149-182">它执行阻碍性垃圾回收对所有代。</span><span class="sxs-lookup"><span data-stu-id="91149-182">It performs a blocking garbage collection of all generations.</span></span>  
  
 <span data-ttu-id="91149-183">所有对象，而不考虑多长时间已在内存中，被都视为集合;但是，不收集托管代码中引用的对象。</span><span class="sxs-lookup"><span data-stu-id="91149-183">All objects, regardless of how long they have been in memory, are considered for collection; however, objects that are referenced in managed code are not collected.</span></span> <span data-ttu-id="91149-184">此方法用于强制系统尝试回收最大可用内存量。</span><span class="sxs-lookup"><span data-stu-id="91149-184">Use this method to force the system to try to reclaim the maximum amount of available memory.</span></span>  
  
 <span data-ttu-id="91149-185">从开始[!INCLUDE[net_v451](~/includes/net-v451-md.md)]，您可以通过设置压缩大型对象堆 (LOH)<xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType>属性<xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>之前调用<xref:System.GC.Collect%2A>方法，如下面的示例演示。</span><span class="sxs-lookup"><span data-stu-id="91149-185">Starting with the [!INCLUDE[net_v451](~/includes/net-v451-md.md)], you can compact the large object heap (LOH) by setting the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> property to <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType> before calling the <xref:System.GC.Collect%2A> method, as the following example illustrates.</span></span>  
  
 [!code-csharp[System.Runtime.GCSettings#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.gcsettings/cs/lohcompactionmode1.cs#1)]
 [!code-vb[System.Runtime.GCSettings#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.gcsettings/vb/lohcompactionmode1.vb#1)]  
  
   
  
## Examples  
 <span data-ttu-id="91149-186">下面的示例演示如何使用<xref:System.GC.Collect%2A>方法以在每一代的内存上执行回收。</span><span class="sxs-lookup"><span data-stu-id="91149-186">The following example demonstrates how to use the <xref:System.GC.Collect%2A> method to perform a collection on all generations of memory.</span></span> <span data-ttu-id="91149-187">代码生成未使用的对象，一个数字，然后调用<xref:System.GC.Collect%2A>方法以从内存中清除它们。</span><span class="sxs-lookup"><span data-stu-id="91149-187">The code generates a number of unused objects, and then calls the <xref:System.GC.Collect%2A> method to clean them from memory.</span></span>  
  
 [!code-cpp[System.GC.Collect Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.Collect Example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.Collect Example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.Collect Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect (int generation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect(int32 generation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect (generation As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect(int generation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="generation"><span data-ttu-id="91149-188">最后一代进行垃圾回收次数。</span><span class="sxs-lookup"><span data-stu-id="91149-188">The number of the oldest generation to be garbage collected.</span></span></param>
        <summary><span data-ttu-id="91149-189">强制对 0 代到指定代进行即时垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-189">Forces an immediate garbage collection from generation 0 through a specified generation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91149-190">使用此方法来尝试回收不可访问的内存。</span><span class="sxs-lookup"><span data-stu-id="91149-190">Use this method to try to reclaim memory that is inaccessible.</span></span> <span data-ttu-id="91149-191">但是，使用此方法不保证回收指定的代中的所有无法访问内存。</span><span class="sxs-lookup"><span data-stu-id="91149-191">However, using this method does not guarantee that all inaccessible memory in the specified generation is reclaimed.</span></span>  
  
 <span data-ttu-id="91149-192">如果实现对象老化时，垃圾回收器不会回收对象生成编号大于指定的代。</span><span class="sxs-lookup"><span data-stu-id="91149-192">If object aging is implemented, the garbage collector does not collect objects with a generation number that is higher than the specified generation.</span></span> <span data-ttu-id="91149-193">如果未实现对象老化，垃圾回收器将在垃圾回收期间考虑的所有对象。</span><span class="sxs-lookup"><span data-stu-id="91149-193">If object aging is not implemented, the garbage collector considers all objects during the garbage collection.</span></span>  
  
 <span data-ttu-id="91149-194">使用<xref:System.GC.MaxGeneration%2A>属性来确定的最大有效值`generation`参数。</span><span class="sxs-lookup"><span data-stu-id="91149-194">Use the <xref:System.GC.MaxGeneration%2A> property to determine the maximum valid value of the `generation` parameter.</span></span>  
  
 <span data-ttu-id="91149-195">要考虑所有对象，而不管其代垃圾回收器，请使用此方法不采用参数的版本。</span><span class="sxs-lookup"><span data-stu-id="91149-195">To have the garbage collector consider all objects regardless of their generation, use the version of this method that takes no parameters.</span></span> <span data-ttu-id="91149-196">具有垃圾回收器回收对象基于<xref:System.GCCollectionMode>设置，请使用<xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%29?displayProperty=nameWithType>方法重载。</span><span class="sxs-lookup"><span data-stu-id="91149-196">To have the garbage collector reclaim objects based on a <xref:System.GCCollectionMode> setting, use the <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%29?displayProperty=nameWithType> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91149-197">下面的示例演示如何使用<xref:System.GC.Collect%2A>方法以执行回收的内存的各个层上。</span><span class="sxs-lookup"><span data-stu-id="91149-197">The following example demonstrates how to use the <xref:System.GC.Collect%2A> method to perform a collection on individual layers of memory.</span></span> <span data-ttu-id="91149-198">代码生成未使用的对象，一个数字，然后调用<xref:System.GC.Collect%2A>方法以从内存中清除它们。</span><span class="sxs-lookup"><span data-stu-id="91149-198">The code generates a number of unused objects, and then calls the <xref:System.GC.Collect%2A> method to clean them from memory.</span></span>  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="91149-199"><paramref name="generation" /> 无效。</span><span class="sxs-lookup"><span data-stu-id="91149-199"><paramref name="generation" /> is not valid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect (int generation, GCCollectionMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect(int32 generation, valuetype System.GCCollectionMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect(System.Int32,System.GCCollectionMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect (generation As Integer, mode As GCCollectionMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect(int generation, GCCollectionMode mode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" />
        <Parameter Name="mode" Type="System.GCCollectionMode" />
      </Parameters>
      <Docs>
        <param name="generation"><span data-ttu-id="91149-200">最后一代进行垃圾回收次数。</span><span class="sxs-lookup"><span data-stu-id="91149-200">The number of the oldest generation to be garbage collected.</span></span></param>
        <param name="mode"><span data-ttu-id="91149-201">一个枚举值，指定垃圾回收是强制进行（<see cref="F:System.GCCollectionMode.Default" /> 或 <see cref="F:System.GCCollectionMode.Forced" />）还是优化 (<see cref="F:System.GCCollectionMode.Optimized" />)。</span><span class="sxs-lookup"><span data-stu-id="91149-201">An enumeration value that specifies whether the garbage collection is forced (<see cref="F:System.GCCollectionMode.Default" /> or <see cref="F:System.GCCollectionMode.Forced" />) or optimized (<see cref="F:System.GCCollectionMode.Optimized" />).</span></span></param>
        <summary><span data-ttu-id="91149-202">强制在 <see cref="T:System.GCCollectionMode" /> 值所指定的时间对 0 代到指定代进行垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-202">Forces a garbage collection from generation 0 through a specified generation, at a time specified by a <see cref="T:System.GCCollectionMode" /> value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91149-203">使用`mode`参数来指定是否垃圾回收应该立即进行还是仅时间是否最佳若要回收对象。</span><span class="sxs-lookup"><span data-stu-id="91149-203">Use the `mode` parameter to specify whether garbage collection should occur immediately or only if the time is optimal to reclaim objects.</span></span> <span data-ttu-id="91149-204">使用此方法不保证回收指定的代中的所有无法访问内存。</span><span class="sxs-lookup"><span data-stu-id="91149-204">Using this method does not guarantee that all inaccessible memory in the specified generation is reclaimed.</span></span>  
  
 <span data-ttu-id="91149-205">若要调整你的应用程序中重要期间垃圾回收的侵入性，设置<xref:System.Runtime.GCSettings.LatencyMode%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="91149-205">To adjust the intrusiveness of garbage collection during critical periods in your application, set the <xref:System.Runtime.GCSettings.LatencyMode%2A> property.</span></span>  
  
 <span data-ttu-id="91149-206">垃圾回收器不会回收对象超过指定的更高版本生成编号`generation`参数。</span><span class="sxs-lookup"><span data-stu-id="91149-206">The garbage collector does not collect objects with a generation number higher than specified by the `generation` parameter.</span></span> <span data-ttu-id="91149-207">使用<xref:System.GC.MaxGeneration%2A>属性来确定的最大有效值`generation`。</span><span class="sxs-lookup"><span data-stu-id="91149-207">Use the <xref:System.GC.MaxGeneration%2A> property to determine the maximum valid value of `generation`.</span></span>  
  
 <span data-ttu-id="91149-208">要考虑所有对象，而不管其代垃圾回收器，请使用此方法不采用参数的版本。</span><span class="sxs-lookup"><span data-stu-id="91149-208">To have the garbage collector consider all objects regardless of their generation, use the version of this method that takes no parameters.</span></span>  
  
 <span data-ttu-id="91149-209">若要让垃圾回收器回收到指定的代中的对象的对象，请使用<xref:System.GC.Collect%28System.Int32%29?displayProperty=nameWithType>方法重载。</span><span class="sxs-lookup"><span data-stu-id="91149-209">To have the garbage collector reclaim objects up to a specified generation of objects, use the <xref:System.GC.Collect%28System.Int32%29?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="91149-210">指定最大代数，将收集所有对象。</span><span class="sxs-lookup"><span data-stu-id="91149-210">When you specify the maximum generation, all objects are collected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91149-211">下面的示例强制的第 2 代对象进行垃圾回收<xref:System.GCCollectionMode.Optimized>设置。</span><span class="sxs-lookup"><span data-stu-id="91149-211">The following example forces a garbage collection for generation 2 objects with the <xref:System.GCCollectionMode.Optimized> setting.</span></span>  
  
 [!code-csharp[System.GC.GCCollectionMode#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.GCCollectionMode/cs/Program.cs#1)]
 [!code-vb[System.GC.GCCollectionMode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.GCCollectionMode/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="91149-212"><paramref name="generation" /> 无效。</span><span class="sxs-lookup"><span data-stu-id="91149-212"><paramref name="generation" /> is not valid.</span></span>  
  
 <span data-ttu-id="91149-213">或</span><span class="sxs-lookup"><span data-stu-id="91149-213">-or-</span></span>  
  
 <span data-ttu-id="91149-214"><paramref name="mode" /> 不是 <see cref="T:System.GCCollectionMode" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="91149-214"><paramref name="mode" /> is not one of the <see cref="T:System.GCCollectionMode" /> values.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect (int generation, GCCollectionMode mode, bool blocking);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect(int32 generation, valuetype System.GCCollectionMode mode, bool blocking) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect(System.Int32,System.GCCollectionMode,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect (generation As Integer, mode As GCCollectionMode, blocking As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect(int generation, GCCollectionMode mode, bool blocking);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" />
        <Parameter Name="mode" Type="System.GCCollectionMode" />
        <Parameter Name="blocking" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="generation"><span data-ttu-id="91149-215">最后一代进行垃圾回收次数。</span><span class="sxs-lookup"><span data-stu-id="91149-215">The number of the oldest generation to be garbage collected.</span></span></param>
        <param name="mode"><span data-ttu-id="91149-216">一个枚举值，指定垃圾回收是强制进行（<see cref="F:System.GCCollectionMode.Default" /> 或 <see cref="F:System.GCCollectionMode.Forced" />）还是优化 (<see cref="F:System.GCCollectionMode.Optimized" />)。</span><span class="sxs-lookup"><span data-stu-id="91149-216">An enumeration value that specifies whether the garbage collection is forced (<see cref="F:System.GCCollectionMode.Default" /> or <see cref="F:System.GCCollectionMode.Forced" />) or optimized (<see cref="F:System.GCCollectionMode.Optimized" />).</span></span></param>
        <param name="blocking">
          <span data-ttu-id="91149-217"><see langword="true" /> 执行阻碍性垃圾回收；<see langword="false" /> 在可能的情况下执行后台垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-217"><see langword="true" /> to perform a blocking garbage collection; <see langword="false" /> to perform a background garbage collection where possible.</span></span></param>
        <summary><span data-ttu-id="91149-218">在由 <see cref="T:System.GCCollectionMode" /> 值指定的时间，强制对 0 代到指定代进行垃圾回收，另有数值指定回收是否应该为阻碍性。</span><span class="sxs-lookup"><span data-stu-id="91149-218">Forces a garbage collection from generation 0 through a specified generation, at a time specified by a <see cref="T:System.GCCollectionMode" /> value, with a value specifying whether the collection should be blocking.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91149-219">下表总结了`mode`和`blocking`参数：</span><span class="sxs-lookup"><span data-stu-id="91149-219">The following table summarizes the interaction of the `mode` and `blocking` parameters:</span></span>  
  
|`mode`|<span data-ttu-id="91149-220">`blocking` 为 `true`</span><span class="sxs-lookup"><span data-stu-id="91149-220">`blocking` is `true`</span></span>|<span data-ttu-id="91149-221">`blocking` 为 `false`</span><span class="sxs-lookup"><span data-stu-id="91149-221">`blocking` is `false`</span></span>|  
|-|-|-|  
|<span data-ttu-id="91149-222"><xref:System.GCCollectionMode.Forced> 或 <xref:System.GCCollectionMode.Default></span><span class="sxs-lookup"><span data-stu-id="91149-222"><xref:System.GCCollectionMode.Forced> or <xref:System.GCCollectionMode.Default></span></span>|<span data-ttu-id="91149-223">尽快执行阻塞回收。</span><span class="sxs-lookup"><span data-stu-id="91149-223">A blocking collection is performed as soon as possible.</span></span> <span data-ttu-id="91149-224">如果后台回收正在进行和`generation`为 0 或 1，<xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29>方法立即触发阻碍性回收，并在回收完成时返回。</span><span class="sxs-lookup"><span data-stu-id="91149-224">If a background collection is in progress and `generation` is 0 or 1, the <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> method immediately triggers a blocking collection and returns when the collection is finished.</span></span> <span data-ttu-id="91149-225">如果后台回收正在进行和`generation`为 2，方法等待后台回收完成，触发阻止第 2 代回收，然后返回。</span><span class="sxs-lookup"><span data-stu-id="91149-225">If a background collection is in progress and `generation` is 2, the method waits until the background collection is finished, triggers a blocking generation 2 collection, and then returns.</span></span>|<span data-ttu-id="91149-226">尽快执行回收。</span><span class="sxs-lookup"><span data-stu-id="91149-226">A collection is performed as soon as possible.</span></span> <span data-ttu-id="91149-227"><xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> 方法请求执行后台回收，但这并没有保证；阻止式回收仍可执行，具体视环境而定。</span><span class="sxs-lookup"><span data-stu-id="91149-227">The <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> method requests a background collection, but this is not guaranteed; depending on the circumstances, a blocking collection may still be performed.</span></span> <span data-ttu-id="91149-228">如果后台回收正在进行，该方法将立即返回。</span><span class="sxs-lookup"><span data-stu-id="91149-228">If a background collection is already in progress, the method returns immediately.</span></span>|  
|<xref:System.GCCollectionMode.Optimized>|<span data-ttu-id="91149-229">可能会执行阻止式回收，具体视垃圾回收器的状态和 `generation` 参数而定。</span><span class="sxs-lookup"><span data-stu-id="91149-229">A blocking collection may be performed, depending on the state of the garbage collector and the `generation` parameter.</span></span> <span data-ttu-id="91149-230">垃圾回收器会尽量提供最佳性能。</span><span class="sxs-lookup"><span data-stu-id="91149-230">The garbage collector tries to provide optimal performance.</span></span>|<span data-ttu-id="91149-231">根据垃圾回收器的状态，有时可执行回收。</span><span class="sxs-lookup"><span data-stu-id="91149-231">A collection may be performed, depending on the state of the garbage collector.</span></span> <span data-ttu-id="91149-232"><xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> 方法请求执行后台回收，但这并没有保证；阻止式回收仍可执行，具体视环境而定。</span><span class="sxs-lookup"><span data-stu-id="91149-232">The <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> method requests a background collection, but this is not guaranteed; depending on the circumstances, a blocking collection may still be performed.</span></span> <span data-ttu-id="91149-233">垃圾回收器会尽量提供最佳性能。</span><span class="sxs-lookup"><span data-stu-id="91149-233">The garbage collector tries to provide optimal performance.</span></span> <span data-ttu-id="91149-234">如果后台回收正在进行，该方法将立即返回。</span><span class="sxs-lookup"><span data-stu-id="91149-234">If a background collection is already in progress, the method returns immediately.</span></span>|  
  
 <span data-ttu-id="91149-235">如果调用<xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29>方法执行完整的阻碍性垃圾回收时，你还可以通过设置压缩大型对象堆<xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType>属性<xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>之前调用<xref:System.GC.Collect%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="91149-235">If a call to the <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%29> method performs a full blocking garbage collection, you can also compact the large object heap by setting the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> property to <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType> before calling the <xref:System.GC.Collect%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="91149-236"><paramref name="generation" /> 无效。</span><span class="sxs-lookup"><span data-stu-id="91149-236"><paramref name="generation" /> is not valid.</span></span>  
  
 <span data-ttu-id="91149-237">或</span><span class="sxs-lookup"><span data-stu-id="91149-237">-or-</span></span>  
  
 <span data-ttu-id="91149-238"><paramref name="mode" /> 不是 <see cref="T:System.GCCollectionMode" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="91149-238"><paramref name="mode" /> is not one of the <see cref="T:System.GCCollectionMode" /> values.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Collect">
      <MemberSignature Language="C#" Value="public static void Collect (int generation, GCCollectionMode mode, bool blocking, bool compacting);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Collect(int32 generation, valuetype System.GCCollectionMode mode, bool blocking, bool compacting) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.Collect(System.Int32,System.GCCollectionMode,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Collect (generation As Integer, mode As GCCollectionMode, blocking As Boolean, compacting As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Collect(int generation, GCCollectionMode mode, bool blocking, bool compacting);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" />
        <Parameter Name="mode" Type="System.GCCollectionMode" />
        <Parameter Name="blocking" Type="System.Boolean" />
        <Parameter Name="compacting" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="generation"><span data-ttu-id="91149-239">最后一代进行垃圾回收次数。</span><span class="sxs-lookup"><span data-stu-id="91149-239">The number of the oldest generation to be garbage collected.</span></span></param>
        <param name="mode"><span data-ttu-id="91149-240">一个枚举值，指定垃圾回收是强制进行（<see cref="F:System.GCCollectionMode.Default" /> 或 <see cref="F:System.GCCollectionMode.Forced" />）还是优化 (<see cref="F:System.GCCollectionMode.Optimized" />)。</span><span class="sxs-lookup"><span data-stu-id="91149-240">An enumeration value that specifies whether the garbage collection is forced (<see cref="F:System.GCCollectionMode.Default" /> or <see cref="F:System.GCCollectionMode.Forced" />) or optimized (<see cref="F:System.GCCollectionMode.Optimized" />).</span></span></param>
        <param name="blocking">
          <span data-ttu-id="91149-241"><see langword="true" /> 执行阻碍性垃圾回收；<see langword="false" /> 在可能的情况下执行后台垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-241"><see langword="true" /> to perform a blocking garbage collection; <see langword="false" /> to perform a background garbage collection where possible.</span></span></param>
        <param name="compacting">
          <span data-ttu-id="91149-242"><see langword="true" /> 表示压缩小对象堆；<see langword="false" /> 表示仅进行清理。</span><span class="sxs-lookup"><span data-stu-id="91149-242"><see langword="true" /> to compact the small object heap; <see langword="false" /> to sweep only.</span></span></param>
        <summary><span data-ttu-id="91149-243">在由 <see cref="T:System.GCCollectionMode" /> 值指定的时间，强制对 0 代到指定代进行垃圾回收，另有数值指定回收应该为阻碍性还是压缩性。</span><span class="sxs-lookup"><span data-stu-id="91149-243">Forces a garbage collection from generation 0 through a specified generation, at a time specified by a <see cref="T:System.GCCollectionMode" /> value, with values that specify whether the collection should be blocking and compacting.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91149-244">如果`blocking`是`false`，GC 决定是否执行后台或阻碍性垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-244">If `blocking` is `false`, the GC decides whether to perform a background or a blocking garbage collection.</span></span> <span data-ttu-id="91149-245">如果`compacting`是`true`，它执行阻碍性垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-245">If `compacting` is `true`, it performs a blocking garbage collection.</span></span>  
  
 <span data-ttu-id="91149-246">如果`compacting`是`true`，运行时压缩小对象堆 (SOH)。</span><span class="sxs-lookup"><span data-stu-id="91149-246">If `compacting` is `true`, the runtime compacts the small object heap (SOH).</span></span> <span data-ttu-id="91149-247">除非不会压缩大型对象堆 (LOH)<xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType>属性设置为<xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="91149-247">The large object heap (LOH) is not compacted unless the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> property is set to <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>.</span></span> <span data-ttu-id="91149-248">请注意，这包括所有阻止垃圾回收，不只是完全阻止垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-248">Note that this includes all blocking garbage collections, not just full blocking garbage collections.</span></span>  
  
 <span data-ttu-id="91149-249">你可以调用<xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29>方法来减少托管的堆大小可能的最小，如下面的代码段所示。</span><span class="sxs-lookup"><span data-stu-id="91149-249">You can call the <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29> method to reduce the managed heap to the smallest size possible, as the following code fragment illustrates.</span></span>  
  
 [!code-csharp[System.GC.Collect#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect/cs/collect4.cs#1)]
 [!code-vb[System.GC.Collect#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect/vb/collect4.vb#1)]  
  
 <span data-ttu-id="91149-250">指定`true`为`compacting`自变量可保证压缩、 完整的阻碍性垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-250">Specifying `true` for the `compacting` argument guarantees a compacting, full blocking garbage collection.</span></span> <span data-ttu-id="91149-251">设置<xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType>属性<xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType>可确保压缩的 LOH 和 SOH。</span><span class="sxs-lookup"><span data-stu-id="91149-251">Setting the <xref:System.Runtime.GCSettings.LargeObjectHeapCompactionMode%2A?displayProperty=nameWithType> property to <xref:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce?displayProperty=nameWithType> ensures that both the LOH and SOH are compacted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionCount">
      <MemberSignature Language="C#" Value="public static int CollectionCount (int generation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CollectionCount(int32 generation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.CollectionCount(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CollectionCount (generation As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int CollectionCount(int generation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generation" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="generation"><span data-ttu-id="91149-252">对象的代，将针对此代确定垃圾回收计数。</span><span class="sxs-lookup"><span data-stu-id="91149-252">The generation of objects for which the garbage collection count is to be determined.</span></span></param>
        <summary><span data-ttu-id="91149-253">返回已经对对象的指定代进行的垃圾回收次数。</span><span class="sxs-lookup"><span data-stu-id="91149-253">Returns the number of times garbage collection has occurred for the specified generation of objects.</span></span></summary>
        <returns><span data-ttu-id="91149-254">自启动进程以来已经对指定代进行的垃圾回收次数。</span><span class="sxs-lookup"><span data-stu-id="91149-254">The number of times garbage collection has occurred for the specified generation since the process was started.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91149-255">如果你实现您自己的资源管理，你可能需要通过调用定期强制垃圾回收<xref:System.GC.Collect%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="91149-255">If you implement your own resource management, you might need to force garbage collection periodically by calling the <xref:System.GC.Collect%2A> method.</span></span> <span data-ttu-id="91149-256">由于这是代价高昂的操作，你可以通过跳过该调用，最近发生垃圾回收时提高性能。</span><span class="sxs-lookup"><span data-stu-id="91149-256">Because this is an expensive operation, you can improve performance by skipping the call when a garbage collection has occurred recently.</span></span> <span data-ttu-id="91149-257">保存返回的值<xref:System.GC.CollectionCount%2A>后立即调用<xref:System.GC.Collect%2A>。</span><span class="sxs-lookup"><span data-stu-id="91149-257">Save the value returned by <xref:System.GC.CollectionCount%2A> immediately after calling <xref:System.GC.Collect%2A>.</span></span> <span data-ttu-id="91149-258">下次你需要调用<xref:System.GC.Collect%2A>，比较返回的当前值<xref:System.GC.CollectionCount%2A>为保存的值。</span><span class="sxs-lookup"><span data-stu-id="91149-258">The next time you need to call <xref:System.GC.Collect%2A>, compare the current value returned by <xref:System.GC.CollectionCount%2A> to the saved value.</span></span> <span data-ttu-id="91149-259">如果两个值相等，没有任何集合出现在此期间，它是合乎情理调用<xref:System.GC.Collect%2A>试。</span><span class="sxs-lookup"><span data-stu-id="91149-259">If the two values are equal, no collection has occurred in the interim and it is reasonable to call <xref:System.GC.Collect%2A> again.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="91149-260"><paramref name="generation" /> 小于 0。</span><span class="sxs-lookup"><span data-stu-id="91149-260"><paramref name="generation" /> is less than 0.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndNoGCRegion">
      <MemberSignature Language="C#" Value="public static void EndNoGCRegion ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EndNoGCRegion() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.EndNoGCRegion" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EndNoGCRegion ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EndNoGCRegion();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91149-261">结束无 GC 区域延迟模式。</span><span class="sxs-lookup"><span data-stu-id="91149-261">Ends the no GC region latency mode.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91149-262"><xref:System.GC.EndNoGCRegion%2A>方法抛出异常<xref:System.InvalidOperationException>如果垃圾回收器不处于无 GC 区域延迟模式。</span><span class="sxs-lookup"><span data-stu-id="91149-262">The <xref:System.GC.EndNoGCRegion%2A> method throws an <xref:System.InvalidOperationException> if the garbage collector is not in no GC region latency mode.</span></span> <span data-ttu-id="91149-263">在任何以下情况下发生这种情况：</span><span class="sxs-lookup"><span data-stu-id="91149-263">This occurs under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="91149-264"><xref:System.GC.TryStartNoGCRegion%2A>以前未调用方法。</span><span class="sxs-lookup"><span data-stu-id="91149-264">The <xref:System.GC.TryStartNoGCRegion%2A> method was not called previously.</span></span>  
  
-   <span data-ttu-id="91149-265">调用<xref:System.GC.TryStartNoGCRegion%2A>方法返回`false`。</span><span class="sxs-lookup"><span data-stu-id="91149-265">The call to the <xref:System.GC.TryStartNoGCRegion%2A> method returned `false`.</span></span>  
  
-   <span data-ttu-id="91149-266">调用<xref:System.GC.TryStartNoGCRegion%2A>方法引发了异常。</span><span class="sxs-lookup"><span data-stu-id="91149-266">The call to the <xref:System.GC.TryStartNoGCRegion%2A> method threw an exception.</span></span>  
  
 <span data-ttu-id="91149-267">你可以通过使用类似以下的代码来防止任一这些原因的异常：</span><span class="sxs-lookup"><span data-stu-id="91149-267">You can prevent an exception for any of these reasons by using code such as the following:</span></span>  
  
 [!code-csharp[System.GC.EndNoGCRegion#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.endnogcregion/cs/endnogcregion1.cs#1)]
 [!code-vb[System.GC.EndNoGCRegion#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.endnogcregion/vb/endnogcregion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="91149-268">垃圾回收器不处于无 GC 区域延迟模式。</span><span class="sxs-lookup"><span data-stu-id="91149-268">The garbage collector is not in no GC region latency mode.</span></span>  
  
 <span data-ttu-id="91149-269">或</span><span class="sxs-lookup"><span data-stu-id="91149-269">-or-</span></span>  
  
 <span data-ttu-id="91149-270">无 GC 区域延迟模式已结束，可能是因为已引发垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-270">The no GC region latency mode was ended previously because a garbage collection was induced.</span></span>  
  
 <span data-ttu-id="91149-271">或</span><span class="sxs-lookup"><span data-stu-id="91149-271">-or-</span></span>  
  
 <span data-ttu-id="91149-272">内存分配超过了 <see cref="M:System.GC.TryStartNoGCRegion(System.Int64)" /> 方法调用中指定的量。</span><span class="sxs-lookup"><span data-stu-id="91149-272">A memory allocation exceeded the amount specified in the call to the <see cref="M:System.GC.TryStartNoGCRegion(System.Int64)" /> method.</span></span></exception>
        <altmember cref="M:System.GC.TryStartNoGCRegion(System.Int64)" />
        <altmember cref="P:System.Runtime.GCSettings.LatencyMode" />
      </Docs>
    </Member>
    <Member MemberName="GetAllocatedBytesForCurrentThread">
      <MemberSignature Language="C#" Value="public static long GetAllocatedBytesForCurrentThread ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetAllocatedBytesForCurrentThread() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.GetAllocatedBytesForCurrentThread" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllocatedBytesForCurrentThread () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long GetAllocatedBytesForCurrentThread();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetGeneration">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="91149-273">返回对象的当前代数。</span><span class="sxs-lookup"><span data-stu-id="91149-273">Returns the current generation number of an object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetGeneration">
      <MemberSignature Language="C#" Value="public static int GetGeneration (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetGeneration(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.GetGeneration(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetGeneration (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetGeneration(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="91149-274">检索其代信息的对象。</span><span class="sxs-lookup"><span data-stu-id="91149-274">The object that generation information is retrieved for.</span></span></param>
        <summary><span data-ttu-id="91149-275">返回指定对象的当前代数。</span><span class="sxs-lookup"><span data-stu-id="91149-275">Returns the current generation number of the specified object.</span></span></summary>
        <returns><span data-ttu-id="91149-276"><paramref name="obj" /> 的当前代数。</span><span class="sxs-lookup"><span data-stu-id="91149-276">The current generation number of <paramref name="obj" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91149-277">使用此方法来确定的一个对象，对象的保留时间，然后使用该信息与<xref:System.GC.Collect%2A>方法，以强制垃圾回收器收集对象在相同的生成过程中。</span><span class="sxs-lookup"><span data-stu-id="91149-277">Use this method to determine the age of an object, and then use that information with the <xref:System.GC.Collect%2A> method to force the garbage collector to collect objects in the same generation.</span></span> <span data-ttu-id="91149-278">当你有一组对象，将创建作为一个组，且在同一时间变为不可访问，例如，使用此方法。</span><span class="sxs-lookup"><span data-stu-id="91149-278">For example, use this method when you have a set of objects that are created as a group and that become inaccessible at the same time.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91149-279">下面的示例演示如何使用<xref:System.GC.GetGeneration%2A>方法来确定对象的保留时间。</span><span class="sxs-lookup"><span data-stu-id="91149-279">The following example demonstrates how to use the <xref:System.GC.GetGeneration%2A> method to determine the age of an object.</span></span> <span data-ttu-id="91149-280">此示例将执行垃圾回收来清理内存和比较预发布集合在控制台中的内存总量。</span><span class="sxs-lookup"><span data-stu-id="91149-280">The example then performs garbage collections to clean up memory and compare the pre and post collection memory totals in the console.</span></span>  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.GC.MaxGeneration" />
      </Docs>
    </Member>
    <Member MemberName="GetGeneration">
      <MemberSignature Language="C#" Value="public static int GetGeneration (WeakReference wo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetGeneration(class System.WeakReference wo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.GetGeneration(System.WeakReference)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetGeneration (wo As WeakReference) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetGeneration(WeakReference ^ wo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wo" Type="System.WeakReference" />
      </Parameters>
      <Docs>
        <param name="wo"><span data-ttu-id="91149-281">引用要确定其代数的目标对象的 <see cref="T:System.WeakReference" />。</span><span class="sxs-lookup"><span data-stu-id="91149-281">A <see cref="T:System.WeakReference" /> that refers to the target object whose generation number is to be determined.</span></span></param>
        <summary><span data-ttu-id="91149-282">返回指定弱引用的目标的当前代数。</span><span class="sxs-lookup"><span data-stu-id="91149-282">Returns the current generation number of the target of a specified weak reference.</span></span></summary>
        <returns><span data-ttu-id="91149-283"><paramref name="wo" /> 的目标的当前代数。</span><span class="sxs-lookup"><span data-stu-id="91149-283">The current generation number of the target of <paramref name="wo" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="91149-284">下面的示例演示了利用<xref:System.GC.GetGeneration%2A>方法来确定的弱引用对象的保留时间。</span><span class="sxs-lookup"><span data-stu-id="91149-284">The following example demonstrates the use of the <xref:System.GC.GetGeneration%2A> method to determine the age of a weak reference object.</span></span>  
  
 [!code-cpp[System.GC.GetGenerationWeak Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.GetGenerationWeak Example/CPP/systemgcgetgenerationweak.cpp#1)]
 [!code-csharp[System.GC.GetGenerationWeak Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.GetGenerationWeak Example/CS/systemgcgetgenerationweak.cs#1)]
 [!code-vb[System.GC.GetGenerationWeak Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.GetGenerationWeak Example/VB/systemgcgetgenerationweak.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="91149-285">已经对 <paramref name="wo" /> 执行了垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-285">Garbage collection has already been performed on <paramref name="wo" />.</span></span></exception>
        <altmember cref="P:System.GC.MaxGeneration" />
      </Docs>
    </Member>
    <Member MemberName="GetTotalMemory">
      <MemberSignature Language="C#" Value="public static long GetTotalMemory (bool forceFullCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetTotalMemory(bool forceFullCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.GetTotalMemory(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTotalMemory (forceFullCollection As Boolean) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long GetTotalMemory(bool forceFullCollection);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forceFullCollection" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="forceFullCollection">
          <span data-ttu-id="91149-286">如果此方法可以在返回之前等待垃圾回收发生，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="91149-286"><see langword="true" /> to indicate that this method can wait for garbage collection to occur before returning; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="91149-287">检索当前认为要分配的字节数。</span><span class="sxs-lookup"><span data-stu-id="91149-287">Retrieves the number of bytes currently thought to be allocated.</span></span> <span data-ttu-id="91149-288">一个参数，指示此方法是否可以等待较短间隔再返回，以便系统回收垃圾和终结对象。</span><span class="sxs-lookup"><span data-stu-id="91149-288">A parameter indicates whether this method can wait a short interval before returning, to allow the system to collect garbage and finalize objects.</span></span></summary>
        <returns><span data-ttu-id="91149-289">一个数字，它是托管内存中当前所分配字节数的可用的最佳近似值。</span><span class="sxs-lookup"><span data-stu-id="91149-289">A number that is the best available approximation of the number of bytes currently allocated in managed memory.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91149-290">如果`forceFullCollection`参数是`true`，此方法将时系统回收垃圾和终结对象在返回之前等待较短间隔。</span><span class="sxs-lookup"><span data-stu-id="91149-290">If the `forceFullCollection` parameter is `true`, this method waits a short interval before returning while the system collects garbage and finalizes objects.</span></span> <span data-ttu-id="91149-291">间隔持续时间为内部指定的限制由已完成的垃圾回收的数量和恢复周期之间的内存量的更改。</span><span class="sxs-lookup"><span data-stu-id="91149-291">The duration of the interval is an internally specified limit determined by the number of garbage collection cycles completed and the change in the amount of memory recovered between cycles.</span></span> <span data-ttu-id="91149-292">收集所有不可访问的内存时，垃圾回收器不能保证。</span><span class="sxs-lookup"><span data-stu-id="91149-292">The garbage collector does not guarantee that all inaccessible memory is collected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91149-293">下面的示例演示如何使用<xref:System.GC.GetTotalMemory%2A>方法以获取并显示当前分配在托管内存中的字节数。</span><span class="sxs-lookup"><span data-stu-id="91149-293">The following example demonstrates how to use the <xref:System.GC.GetTotalMemory%2A> method to get and display the number of bytes currently allocated in managed memory.</span></span>  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepAlive">
      <MemberSignature Language="C#" Value="public static void KeepAlive (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void KeepAlive(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.KeepAlive(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub KeepAlive (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void KeepAlive(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="91149-294">要引用的对象。</span><span class="sxs-lookup"><span data-stu-id="91149-294">The object to reference.</span></span></param>
        <summary><span data-ttu-id="91149-295">引用指定对象，使其从当前例程开始到调用此方法的那一刻为止均不符合进行垃圾回收的条件。</span><span class="sxs-lookup"><span data-stu-id="91149-295">References the specified object, which makes it ineligible for garbage collection from the start of the current routine to the point where this method is called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91149-296">用途<xref:System.GC.KeepAlive%2A>方法是确保会遇到正在过早地垃圾回收器回收对象的引用是否存在。</span><span class="sxs-lookup"><span data-stu-id="91149-296">The purpose of the <xref:System.GC.KeepAlive%2A> method is to ensure the existence of a reference to an object that is at risk of being prematurely reclaimed by the garbage collector.</span></span> <span data-ttu-id="91149-297">一个常见的方案，可能发生这种情况是当在托管的代码或数据，没有对对象的引用，但仍在使用的对象处于非托管代码如 Win32 Api，非托管 Dll，或者使用 COM 的方法</span><span class="sxs-lookup"><span data-stu-id="91149-297">A common scenario where this might happen is when there are no references to the object in managed code or data, but the object is still in use in unmanaged code such as Win32 APIs, unmanaged DLLs, or methods using COM.</span></span>  
  
 <span data-ttu-id="91149-298">此方法引用`obj`参数，从而使该对象再次进行垃圾回收从例程开始到点，按执行顺序调用此方法。</span><span class="sxs-lookup"><span data-stu-id="91149-298">This method references the `obj` parameter, making that object ineligible for garbage collection from the start of the routine to the point, in execution order, where this method is called.</span></span> <span data-ttu-id="91149-299">在结束时，不范围的开始处，说明进行操作，此方法的代码其中`obj`必须可用。</span><span class="sxs-lookup"><span data-stu-id="91149-299">Code this method at the end, not the beginning, of the range of instructions where `obj` must be available.</span></span>  
  
 <span data-ttu-id="91149-300"><xref:System.GC.KeepAlive%2A>方法不执行任何操作并不生成扩展中作为参数传递的对象的生存期以外的任何副作用。</span><span class="sxs-lookup"><span data-stu-id="91149-300">The <xref:System.GC.KeepAlive%2A> method performs no operation and produces no side effects other than extending the lifetime of the object passed in as a parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91149-301">下面的代码示例的开始处创建一个其`Main`方法并不是指该对象再次之前结束时，当<xref:System.GC.KeepAlive%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="91149-301">The following code example creates an object at the beginning of its `Main` method and does not refer to the object again until the end, when the <xref:System.GC.KeepAlive%2A> method is called.</span></span> <span data-ttu-id="91149-302">对象仍然存在持续时间 30 秒的`Main`方法，即使调用<xref:System.GC.Collect%2A>和<xref:System.GC.WaitForPendingFinalizers%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="91149-302">The object persists for the 30-second duration of the `Main` method, despite calls to the <xref:System.GC.Collect%2A> and <xref:System.GC.WaitForPendingFinalizers%2A> methods.</span></span>  
  
 [!code-cpp[System.GC.KeepAlive Example2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.KeepAlive Example2/CPP/gckeepalive.cpp#1)]
 [!code-csharp[System.GC.KeepAlive Example2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.KeepAlive Example2/CS/gckeepalive.cs#1)]
 [!code-vb[System.GC.KeepAlive Example2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.KeepAlive Example2/VB/gckeepalive.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxGeneration">
      <MemberSignature Language="C#" Value="public static int MaxGeneration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxGeneration" />
      <MemberSignature Language="DocId" Value="P:System.GC.MaxGeneration" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MaxGeneration As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MaxGeneration { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="91149-303">获取系统当前支持的最大代数。</span><span class="sxs-lookup"><span data-stu-id="91149-303">Gets the maximum number of generations that the system currently supports.</span></span></summary>
        <value><span data-ttu-id="91149-304">从零到所支持的最大代数间的一个值。</span><span class="sxs-lookup"><span data-stu-id="91149-304">A value that ranges from zero to the maximum number of supported generations.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91149-305">生成编号或年龄，对象是对象的生命周期的实现定义的相对度量。</span><span class="sxs-lookup"><span data-stu-id="91149-305">The generation number, or age, of an object is an implementation-defined relative measure of an object's lifespan.</span></span> <span data-ttu-id="91149-306">最新创建的对象是第 0 代中，最旧的对象是小于或等于生成返回级别<xref:System.GC.MaxGeneration%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="91149-306">The most recently created objects are in generation 0 and the oldest objects are in a generation less than or equal to the generation returned by the <xref:System.GC.MaxGeneration%2A> property.</span></span>  
  
 <span data-ttu-id="91149-307">垃圾回收器假定较新的内存是更有可能适合于较旧的内存比垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-307">The garbage collector assumes that newer memory is more likely to be eligible for garbage collection than older memory.</span></span> <span data-ttu-id="91149-308">因此，垃圾回收器可以提高其性能通过调整它回收内存，每次的世代号和<xref:System.GC.MaxGeneration%2A>属性值可以随时间增长。</span><span class="sxs-lookup"><span data-stu-id="91149-308">Therefore, the garbage collector improves its performance by adjusting generation numbers each time it reclaims memory, and the <xref:System.GC.MaxGeneration%2A> property value can grow over time.</span></span>  
  
 <span data-ttu-id="91149-309">如果实现对象老化，<xref:System.GC.MaxGeneration%2A>属性返回系统使用的最大代数; 否则，此属性返回零。</span><span class="sxs-lookup"><span data-stu-id="91149-309">If object aging is implemented, the <xref:System.GC.MaxGeneration%2A> property returns the maximum generation number used by the system; otherwise, this property returns zero.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91149-310">下面的示例演示如何 MaxGeneration 属性用于在使用中当前显示的最大代数。</span><span class="sxs-lookup"><span data-stu-id="91149-310">The following example demonstrates how to use the MaxGeneration property to display the largest generation number currently in use.</span></span>  
  
 [!code-cpp[System.GC.Collect Int Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.gc.collect int example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.Collect Int Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.collect int example/CS/class1.cs#1)]
 [!code-vb[System.GC.Collect Int Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.collect int example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="91149-311">对于此实现，返回的值<see cref="P:System.GC.MaxGeneration" />属性一定正在执行的应用程序的生存期内保持不变。</span><span class="sxs-lookup"><span data-stu-id="91149-311">For this implementation, the value returned by the <see cref="P:System.GC.MaxGeneration" /> property is guaranteed to remain constant for the lifetime of an executing application.</span></span>  
  
 <span data-ttu-id="91149-312">使用<see cref="P:System.GC.MaxGeneration" />属性来确定在调用时可以指定的最大值<see cref="M:System.GC.Collect(System.Int32)" />采用生成参数的方法。</span><span class="sxs-lookup"><span data-stu-id="91149-312">Use the <see cref="P:System.GC.MaxGeneration" /> property to determine the maximum value you can specify when calling the <see cref="M:System.GC.Collect(System.Int32)" /> method that takes a generation parameter.</span></span></para>
        </block>
        <altmember cref="M:System.GC.GetGeneration(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterForFullGCNotification">
      <MemberSignature Language="C#" Value="public static void RegisterForFullGCNotification (int maxGenerationThreshold, int largeObjectHeapThreshold);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterForFullGCNotification(int32 maxGenerationThreshold, int32 largeObjectHeapThreshold) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.RegisterForFullGCNotification(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterForFullGCNotification (maxGenerationThreshold As Integer, largeObjectHeapThreshold As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterForFullGCNotification(int maxGenerationThreshold, int largeObjectHeapThreshold);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxGenerationThreshold" Type="System.Int32" />
        <Parameter Name="largeObjectHeapThreshold" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="maxGenerationThreshold"><span data-ttu-id="91149-313">一个介于 1 和 99 之间的数字，指定根据在第 2 代中分配的对象，应何时引发通知。</span><span class="sxs-lookup"><span data-stu-id="91149-313">A number between 1 and 99 that specifies when the notification should be raised based on the objects allocated in generation 2.</span></span></param>
        <param name="largeObjectHeapThreshold"><span data-ttu-id="91149-314">一个介于 1 和 99 之间的数字，指定根据大对象堆中分配的对象，应何时引发通知。</span><span class="sxs-lookup"><span data-stu-id="91149-314">A number between 1 and 99 that specifies when the notification should be raised based on objects allocated in the large object heap.</span></span></param>
        <summary><span data-ttu-id="91149-315">指定当条件支持完整垃圾回收以及回收完成时，应引发垃圾回收通知。</span><span class="sxs-lookup"><span data-stu-id="91149-315">Specifies that a garbage collection notification should be raised when conditions favor full garbage collection and when the collection has been completed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91149-316">为每一代垃圾回收器设置到该代的分配阈值。</span><span class="sxs-lookup"><span data-stu-id="91149-316">For each generation, the garbage collector sets a threshold for allocations into that generation.</span></span> <span data-ttu-id="91149-317">分配的大小超过此阈值，将该代上触发垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-317">When the size of allocations exceeds this threshold, a garbage collection is triggered on that generation.</span></span> <span data-ttu-id="91149-318">有关示例中，如果生成 2 的阈值为 20 MB （这意味着 20 MB 存在第 1 代集合和提升到第 2 代），超过 20 MB 后仍存在第 1 代和提示到第 2 代，将尝试下一个垃圾回收作为第 2 代回收。</span><span class="sxs-lookup"><span data-stu-id="91149-318">For example, if generation 2’s threshold is 20MB (which means that 20MB survives generation 1 collections and is promoted into generation 2), and more than 20MB has survived generation 1 and is prompted into generation 2, the next garbage collection will be attempted as a generation 2 collection.</span></span> <span data-ttu-id="91149-319">同样，如果大型对象堆 (LOH) 的阈值为 20 MB 和你的应用程序已经分配了多个 20 MB 的大型对象下, 一次垃圾回收将还尝试为第 2 代回收 （因为 gen2 垃圾回收中，才会收集 LOH）。</span><span class="sxs-lookup"><span data-stu-id="91149-319">Similarly, if the large object heap's (LOH's) threshold is 20MB and your app has allocated more than 20MB of large objects, the next garbage collection will also be attempted as a generation 2 collection (since the LOH is only collected in gen2 garbage collections).</span></span>  
  
 <span data-ttu-id="91149-320">`maxGenerationThreshold`和`largeObjectHeapThreshold`阈值控制你多少提前通知完整的垃圾回收发生前。</span><span class="sxs-lookup"><span data-stu-id="91149-320">The `maxGenerationThreshold` and `largeObjectHeapThreshold` thresholds control how much in advance you are notified before a full garbage collection occurs.</span></span> <span data-ttu-id="91149-321">阈值越大，之间通知和下一次完整的垃圾回收可能发生的多个分配。</span><span class="sxs-lookup"><span data-stu-id="91149-321">The greater the threshold, the more allocations that can occur between notification and the next full garbage collection.</span></span>  
  
 <span data-ttu-id="91149-322">如果必须由公共语言运行库的完整垃圾回收会对你的应用程序性能产生负面影响的情况下，你可以要求时运行时即将会进行完整的垃圾回收和绕过该集合由通知自行引发集合 (使用<xref:System.GC.Collect%2A>方法) 仍有利条件时。</span><span class="sxs-lookup"><span data-stu-id="91149-322">If you have situations in which a full garbage collection by the common language runtime would adversely affect your application's performance, you can ask to be notified when the runtime is about to do a full garbage collection and circumvent that collection by inducing a collection yourself (using the <xref:System.GC.Collect%2A> method) when conditions are still favorable.</span></span> <span data-ttu-id="91149-323">除了更改自己的垃圾收集计划，完整 GC 通知适合以下方案中：</span><span class="sxs-lookup"><span data-stu-id="91149-323">In addition to changing the garbage collection schedule yourself, full GC notification is useful in following the scenarios:</span></span>  
  
-   <span data-ttu-id="91149-324">有关完整的垃圾回收的方法监视，并当系统通知你该正在接近，减小实时数据的大小 （例如，通过释放某些缓存条目）。</span><span class="sxs-lookup"><span data-stu-id="91149-324">You monitor for the approach of a full garbage collection and, when you are notified that one is approaching, you reduce live data size (for example, by releasing some cache entries).</span></span> <span data-ttu-id="91149-325">因此，当垃圾回收发生时，它就可以以回收更多内存。</span><span class="sxs-lookup"><span data-stu-id="91149-325">As a result, when the garbage collection occurs, it is able to reclaim more memory.</span></span>  
  
-   <span data-ttu-id="91149-326">你的监视器的完整垃圾回收完成，以便你可以收集一些统计信息。</span><span class="sxs-lookup"><span data-stu-id="91149-326">You monitor for the completion of a full garbage collection so that you can collect some statistics.</span></span>  <span data-ttu-id="91149-327">例如，你可能想要度量在 GC 完成堆的大小，以便你了解实时数据的大小。</span><span class="sxs-lookup"><span data-stu-id="91149-327">For example, you might want to measure the size of the heap at GC completion so that you know the size of live data.</span></span> <span data-ttu-id="91149-328">（完整 GC，堆后在其最小大小。）</span><span class="sxs-lookup"><span data-stu-id="91149-328">(After a full GC, the heap is at its smallest size.)</span></span>  
  
 <span data-ttu-id="91149-329">有关什么表示完整的垃圾回收的详细信息，请参阅[垃圾回收通知](~/docs/standard/garbage-collection/notifications.md)。</span><span class="sxs-lookup"><span data-stu-id="91149-329">For more information about what represents a full garbage collection, see [Garbage Collection Notifications](~/docs/standard/garbage-collection/notifications.md).</span></span>  
  
 <span data-ttu-id="91149-330">当你注册垃圾回收通知时，通知您可以接近完整垃圾回收时，完成后。</span><span class="sxs-lookup"><span data-stu-id="91149-330">When you register for a garbage collection notification, you can be notified when a full garbage collection is approaching and when it is completed.</span></span> <span data-ttu-id="91149-331">此模式类似于操作系统如何监视低内存通知。</span><span class="sxs-lookup"><span data-stu-id="91149-331">This pattern resembles how the operating system monitors for low memory notifications.</span></span>  
  
 <span data-ttu-id="91149-332">使用以下准则来指定`maxGenerationThreshold`和`largeObjectHeapThreshold`参数：</span><span class="sxs-lookup"><span data-stu-id="91149-332">Use the following guidelines for specifying the `maxGenerationThreshold` and `largeObjectHeapThreshold` parameters:</span></span>  
  
-   <span data-ttu-id="91149-333">阈值值越大，更多的分配将发生之间的通知和完整垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-333">The larger the threshold value, the more allocations will occur between the notification and the full garbage collection.</span></span>  
  
     <span data-ttu-id="91149-334">更大的阈值值提供更多运行时便会检查接近集合的机会。</span><span class="sxs-lookup"><span data-stu-id="91149-334">A larger threshold value provides more opportunities for the runtime to check for an approaching collection.</span></span> <span data-ttu-id="91149-335">这会增加将通知您的可能性。</span><span class="sxs-lookup"><span data-stu-id="91149-335">This increases the likelihood that you will be notified.</span></span> <span data-ttu-id="91149-336">但是，因为那样会导致多个分配运行时引发的下次回收之前，不应设置过高的阈值。</span><span class="sxs-lookup"><span data-stu-id="91149-336">However, you should not set the threshold too high because that results in a more allocations before the runtime induces the next collection.</span></span>  
  
     <span data-ttu-id="91149-337">当你自己引发回收收到通知使用较高阈值的值后时，不是运行时的下一次回收将回收进行回收更少的对象。</span><span class="sxs-lookup"><span data-stu-id="91149-337">When you induce a collection yourself upon notification using a high threshold value, fewer objects are reclaimed than would be reclaimed by the runtime's next collection.</span></span>  
  
-   <span data-ttu-id="91149-338">越小阈值、 通知和完整垃圾回收之间的更少分配。</span><span class="sxs-lookup"><span data-stu-id="91149-338">The smaller the threshold value, the fewer the allocations between notification and the full garbage collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91149-339">下面的示例演示如何注册垃圾回收通知并启动的线程来监视垃圾回收通知的状态。</span><span class="sxs-lookup"><span data-stu-id="91149-339">The following example shows how to register a garbage collection notification and start a thread to monitor the status of the garbage collection notification.</span></span> <span data-ttu-id="91149-340">此代码示例摘自更大的示例为提供[垃圾回收通知](~/docs/standard/garbage-collection/notifications.md)主题。</span><span class="sxs-lookup"><span data-stu-id="91149-340">This code example is part of a larger example provided for [Garbage Collection Notifications](~/docs/standard/garbage-collection/notifications.md) topic.</span></span>  
  
 [!code-cpp[GCNotification#2](~/samples/snippets/cpp/VS_Snippets_CLR/GCNotification/cpp/program.cpp#2)]
 [!code-csharp[GCNotification#2](~/samples/snippets/csharp/VS_Snippets_CLR/GCNotification/cs/Program.cs#2)]
 [!code-vb[GCNotification#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/GCNotification/vb/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="91149-341"><paramref name="maxGenerationThreshold" /> 或 <paramref name="largeObjectHeapThreshold" /> 不在 1 和 99 之间。</span><span class="sxs-lookup"><span data-stu-id="91149-341"><paramref name="maxGenerationThreshold" /> or <paramref name="largeObjectHeapThreshold" /> is not between 1 and 99.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="91149-342">直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="91149-342">for full trust for the immediate caller.</span></span> <span data-ttu-id="91149-343">此成员不能由部分信任的代码使用。</span><span class="sxs-lookup"><span data-stu-id="91149-343">This member cannot be used by partially trusted code.</span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="91149-344">需要完全信任直接调用方。</span><span class="sxs-lookup"><span data-stu-id="91149-344">requires full trust for the immediate caller.</span></span> <span data-ttu-id="91149-345">此成员不能由部分受信任或不透明的代码。</span><span class="sxs-lookup"><span data-stu-id="91149-345">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="RemoveMemoryPressure">
      <MemberSignature Language="C#" Value="public static void RemoveMemoryPressure (long bytesAllocated);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveMemoryPressure(int64 bytesAllocated) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.RemoveMemoryPressure(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveMemoryPressure (bytesAllocated As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveMemoryPressure(long bytesAllocated);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytesAllocated" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="bytesAllocated"><span data-ttu-id="91149-346">已释放的非托管内存量。</span><span class="sxs-lookup"><span data-stu-id="91149-346">The amount of unmanaged memory that has been released.</span></span></param>
        <summary><span data-ttu-id="91149-347">通知运行时已释放非托管内存，在安排垃圾回收时不需要再考虑它。</span><span class="sxs-lookup"><span data-stu-id="91149-347">Informs the runtime that unmanaged memory has been released and no longer needs to be taken into account when scheduling garbage collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91149-348">确定何时安排垃圾回收时，运行时将考虑在内分配托管的内存量。</span><span class="sxs-lookup"><span data-stu-id="91149-348">In determining when to schedule garbage collection, the runtime takes into account how much managed memory is allocated.</span></span> <span data-ttu-id="91149-349">如果一个小的托管的对象分配大量的非托管内存，运行时仅托管的内存，将考虑在内，从而低估安排垃圾回收的紧急性。</span><span class="sxs-lookup"><span data-stu-id="91149-349">If a small managed object allocates a large amount of unmanaged memory, the runtime takes into account only the managed memory, and thus underestimates the urgency of scheduling garbage collection.</span></span> <span data-ttu-id="91149-350"><xref:System.GC.AddMemoryPressure%2A>方法通知运行时在系统内存，此额外的压力和<xref:System.GC.RemoveMemoryPressure%2A>方法将通知运行时已释放额外的压力。</span><span class="sxs-lookup"><span data-stu-id="91149-350">The <xref:System.GC.AddMemoryPressure%2A> method informs the runtime of this additional pressure on system memory, and the <xref:System.GC.RemoveMemoryPressure%2A> method informs the runtime that the additional pressure has been released.</span></span>  
  
 <span data-ttu-id="91149-351">在最简单的使用情况模式中，托管的对象分配构造函数中的非托管的内存和释放在`Dispose`或`Finalize`方法。</span><span class="sxs-lookup"><span data-stu-id="91149-351">In the simplest usage pattern, a managed object allocates unmanaged memory in the constructor and releases it in the `Dispose` or `Finalize` method.</span></span> <span data-ttu-id="91149-352">调用<xref:System.GC.AddMemoryPressure%2A>方法之后分配非托管的内存中，并调用<xref:System.GC.RemoveMemoryPressure%2A>方法之后将其释放。</span><span class="sxs-lookup"><span data-stu-id="91149-352">Call the <xref:System.GC.AddMemoryPressure%2A> method after allocating the unmanaged memory, and call the <xref:System.GC.RemoveMemoryPressure%2A> method after releasing it.</span></span>  
  
 <span data-ttu-id="91149-353">在更复杂的情况下，其中的非托管的内存分配非常大的变化的托管对象的生存期内，可以调用<xref:System.GC.AddMemoryPressure%2A>和<xref:System.GC.RemoveMemoryPressure%2A>方法进行通信的运行时对这些增量更改。</span><span class="sxs-lookup"><span data-stu-id="91149-353">In more complicated scenarios, where the unmanaged memory allocation changes substantially during the lifetime of the managed object, you can call the <xref:System.GC.AddMemoryPressure%2A> and <xref:System.GC.RemoveMemoryPressure%2A> methods to communicate these incremental changes to the runtime.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="91149-354">你必须确保删除完全您添加的压力量。</span><span class="sxs-lookup"><span data-stu-id="91149-354">You must ensure that you remove exactly the amount of pressure you add.</span></span> <span data-ttu-id="91149-355">如果不这样做可能会较长时间的时间运行的应用程序中的系统的性能产生负面影响。</span><span class="sxs-lookup"><span data-stu-id="91149-355">Failing to do so can adversely affect the performance of the system in applications that run for long periods of time.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="91149-356"><paramref name="bytesAllocated" /> 小于或等于 0。</span><span class="sxs-lookup"><span data-stu-id="91149-356"><paramref name="bytesAllocated" /> is less than or equal to 0.</span></span>  
  
 <span data-ttu-id="91149-357">或</span><span class="sxs-lookup"><span data-stu-id="91149-357">-or-</span></span>  
  
 <span data-ttu-id="91149-358">在 32 位的计算机上，<paramref name="bytesAllocated" /> 大于 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="91149-358">On a 32-bit computer, <paramref name="bytesAllocated" /> is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="91149-359">在操作垃圾回收优先级时调用非托管的代码的功能。</span><span class="sxs-lookup"><span data-stu-id="91149-359">for the ability to call unmanaged code when manipulating garbage-collection priority.</span></span> <span data-ttu-id="91149-360">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="91149-360">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="91149-361">需要完全信任直接调用方。</span><span class="sxs-lookup"><span data-stu-id="91149-361">requires full trust for the immediate caller.</span></span> <span data-ttu-id="91149-362">此成员不能由部分受信任或不透明的代码。</span><span class="sxs-lookup"><span data-stu-id="91149-362">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ReRegisterForFinalize">
      <MemberSignature Language="C#" Value="public static void ReRegisterForFinalize (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReRegisterForFinalize(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.ReRegisterForFinalize(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ReRegisterForFinalize (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ReRegisterForFinalize(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="91149-363">必须为其调用终结器的对象。</span><span class="sxs-lookup"><span data-stu-id="91149-363">The object that a finalizer must be called for.</span></span></param>
        <summary><span data-ttu-id="91149-364">请求系统调用指定对象的终结器，此前已为该对象调用 <see cref="M:System.GC.SuppressFinalize(System.Object)" />。</span><span class="sxs-lookup"><span data-stu-id="91149-364">Requests that the system call the finalizer for the specified object for which <see cref="M:System.GC.SuppressFinalize(System.Object)" /> has previously been called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91149-365"><xref:System.GC.ReRegisterForFinalize%2A>方法将添加`obj`参数的垃圾回收器释放对象前会请求终止的对象的列表。</span><span class="sxs-lookup"><span data-stu-id="91149-365">The <xref:System.GC.ReRegisterForFinalize%2A> method adds the `obj` parameter to the list of objects that request finalization before the garbage collector frees the object.</span></span> <span data-ttu-id="91149-366">`obj`参数必须是此方法的调用方。</span><span class="sxs-lookup"><span data-stu-id="91149-366">The `obj` parameter must be the caller of this method.</span></span>  
  
 <span data-ttu-id="91149-367">调用<xref:System.GC.ReRegisterForFinalize%2A>方法并不保证垃圾回收器将调用对象的终结器。</span><span class="sxs-lookup"><span data-stu-id="91149-367">Calling the <xref:System.GC.ReRegisterForFinalize%2A> method does not guarantee that the garbage collector will call an object's finalizer.</span></span>  
  
 <span data-ttu-id="91149-368">默认情况下，实现终结器的所有对象都添加到需要终止; 的对象的列表但是，对象可能已终止，或者可能已通过调用禁用终止<xref:System.GC.SuppressFinalize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="91149-368">By default, all objects that implement finalizers are added to the list of objects that require finalization; however, an object might have already been finalized or might have disabled finalization by calling the <xref:System.GC.SuppressFinalize%2A> method.</span></span>  
  
 <span data-ttu-id="91149-369">终结器可以使用此方法使重新起用自己或它所引用的对象。</span><span class="sxs-lookup"><span data-stu-id="91149-369">A finalizer can use this method to resurrect itself or an object that it references.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91149-370">下面的示例演示如何使用 ReRegisterForFinalize 方法以完成第二个对象垃圾回收后的时间。</span><span class="sxs-lookup"><span data-stu-id="91149-370">The following example demonstrates how to use the ReRegisterForFinalize method to finalize an object a second time after garbage collection.</span></span>  
  
 [!code-cpp[System.GC.ReregisterForFinalize Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.ReRegisterForFinalize Example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.ReregisterForFinalize Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.ReRegisterForFinalize Example/CS/class1.cs#1)]
 [!code-vb[System.GC.ReregisterForFinalize Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.ReRegisterForFinalize Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="91149-371"><paramref name="obj" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="91149-371"><paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.GC.SuppressFinalize(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SuppressFinalize">
      <MemberSignature Language="C#" Value="public static void SuppressFinalize (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SuppressFinalize(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.SuppressFinalize(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SuppressFinalize (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SuppressFinalize(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="91149-372">不得执行其终结器的对象。</span><span class="sxs-lookup"><span data-stu-id="91149-372">The object whose finalizer must not be executed.</span></span></param>
        <summary><span data-ttu-id="91149-373">请求公共语言运行时不要调用指定对象的终结器。</span><span class="sxs-lookup"><span data-stu-id="91149-373">Requests that the common language runtime not call the finalizer for the specified object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91149-374">此方法的对象标头中该位设置设置`obj`，在调用终结器时将运行时检查。</span><span class="sxs-lookup"><span data-stu-id="91149-374">This method sets a bit in the object header of `obj`, which the runtime checks when calling finalizers.</span></span> <span data-ttu-id="91149-375">终结器中，表示<xref:System.Object.Finalize%2A?displayProperty=nameWithType>方法，用于在一个对象进行垃圾回收之前，释放非托管的资源。</span><span class="sxs-lookup"><span data-stu-id="91149-375">A finalizer, which is represented by the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method, is used to release unmanaged resources before an object is garbage-collected.</span></span> <span data-ttu-id="91149-376">如果`obj`没有终结器中，调用<xref:System.GC.SuppressFinalize%2A>方法不起作用。</span><span class="sxs-lookup"><span data-stu-id="91149-376">If `obj` does not have a finalizer, the call to the <xref:System.GC.SuppressFinalize%2A> method has no effect.</span></span>  
  
 <span data-ttu-id="91149-377">对象实现<xref:System.IDisposable>接口可以从对象的调用此方法<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>实现以防止垃圾回收器调用<xref:System.Object.Finalize%2A?displayProperty=nameWithType>对不需要它的对象。</span><span class="sxs-lookup"><span data-stu-id="91149-377">Objects that implement the <xref:System.IDisposable> interface can call this method from the object's <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation to prevent the garbage collector from calling <xref:System.Object.Finalize%2A?displayProperty=nameWithType> on an object that does not require it.</span></span> <span data-ttu-id="91149-378">通常情况下，这样做是为了防止终结器释放非托管的资源，已释放了<xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>实现。</span><span class="sxs-lookup"><span data-stu-id="91149-378">Typically, this is done to prevent the finalizer from releasing unmanaged resources that have already been freed by the <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> implementation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91149-379">下面的示例演示如何使用<xref:System.GC.SuppressFinalize%2A>在资源类，以防止从调用冗余垃圾回收中的方法。</span><span class="sxs-lookup"><span data-stu-id="91149-379">The following example demonstrates how to use the <xref:System.GC.SuppressFinalize%2A> method in a resource class to prevent a redundant garbage collection from being called.</span></span> <span data-ttu-id="91149-380">该示例使用[释放模式](~/docs/standard/design-guidelines/dispose-pattern.md)同时释放托管资源 (即对象实现<xref:System.IDisposable>) 和非托管资源。</span><span class="sxs-lookup"><span data-stu-id="91149-380">The example uses the [dispose pattern](~/docs/standard/design-guidelines/dispose-pattern.md) to free both managed resources (that is, objects that implement <xref:System.IDisposable>) and unmanaged resources.</span></span>  
  
 [!code-csharp[System.GC.SuppressFinalize#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.gc.suppressfinalize/cs/suppressfinalize1.cs#1)]
 [!code-vb[System.GC.SuppressFinalize#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.gc.suppressfinalize/vb/suppressfinalize1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="91149-381"><paramref name="obj" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="91149-381"><paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.GC.ReRegisterForFinalize(System.Object)" />
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TryStartNoGCRegion">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="91149-382">在关键路径执行期间尝试禁止垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-382">Attempts to disallow garbage collection during the execution of a critical path.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="91149-383">无法将调用传给<xref:System.GC.TryStartNoGCRegion%2A>方法，并且你应只调用<xref:System.GC.EndNoGCRegion%2A>方法如果运行时当前处于无 GC 区域延迟模式。</span><span class="sxs-lookup"><span data-stu-id="91149-383">You cannot nest calls to the <xref:System.GC.TryStartNoGCRegion%2A> method, and you should only call the <xref:System.GC.EndNoGCRegion%2A> method if the runtime is currently in no GC region latency mode.</span></span> <span data-ttu-id="91149-384">换而言之，不应调用<xref:System.GC.TryStartNoGCRegion%2A>多次 （在第一个方法调用后，后续调用将不会成功），并且不应需要调用<xref:System.GC.EndNoGCRegion%2A>成功只是因为第一次调用到<xref:System.GC.TryStartNoGCRegion%2A>成功。</span><span class="sxs-lookup"><span data-stu-id="91149-384">In other words, you should not call <xref:System.GC.TryStartNoGCRegion%2A> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <xref:System.GC.EndNoGCRegion%2A> to succeed just because the first call to <xref:System.GC.TryStartNoGCRegion%2A> succeeded.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.GC.EndNoGCRegion" />
      </Docs>
    </MemberGroup>
    <Member MemberName="TryStartNoGCRegion">
      <MemberSignature Language="C#" Value="public static bool TryStartNoGCRegion (long totalSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryStartNoGCRegion(int64 totalSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.TryStartNoGCRegion(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStartNoGCRegion (totalSize As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryStartNoGCRegion(long totalSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalSize" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="totalSize"><span data-ttu-id="91149-385">在不会触发垃圾回收的情况下分配的内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="91149-385">The amount of memory in bytes to allocate without triggering a garbage collection.</span></span> <span data-ttu-id="91149-386">它必须小于或等于临时段的大小。</span><span class="sxs-lookup"><span data-stu-id="91149-386">It must be less than or equal to the size of an ephemeral segment.</span></span> <span data-ttu-id="91149-387">有关暂时段大小的信息，请参阅[垃圾回收基础知识](~/docs/standard/garbage-collection/fundamentals.md)一文中“暂时代和暂时段”一节。</span><span class="sxs-lookup"><span data-stu-id="91149-387">For information on the size of an ephemeral segment, see the "Ephemeral generations and segments" section in the [Fundamentals of Garbage Collection](~/docs/standard/garbage-collection/fundamentals.md) article.</span></span></param>
        <summary><span data-ttu-id="91149-388">如果指定数量的内存可用，则在关键路径执行期间尝试禁止垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-388">Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available.</span></span></summary>
        <returns>
          <span data-ttu-id="91149-389">如果运行时能够调配所需数量的内存，且垃圾回收器能够进入无 GC 区域延迟模式，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="91149-389"><see langword="true" /> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91149-390"><xref:System.GC.TryStartNoGCRegion%28System.Int64%29>方法尝试将垃圾回收器放在应用程序执行代码的关键区域的同时，不允许垃圾回收无 GC 区域延迟模式。</span><span class="sxs-lookup"><span data-stu-id="91149-390">The <xref:System.GC.TryStartNoGCRegion%28System.Int64%29> method attempts to place the garbage collector in no GC region latency mode, which disallows garbage collection while an app executes a critical region of code.</span></span>  <span data-ttu-id="91149-391">如果无法最初分配请求的内存量运行时，垃圾回收器尝试释放更多的内存中执行完整的阻碍性垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-391">If the runtime is unable to initially allocate the requested amount of memory, the garbage collector performs a full blocking garbage collection in an attempt to free additional memory.</span></span> <span data-ttu-id="91149-392">垃圾回收器进入无 GC 区域延迟模式，如果无法分配所需的数量的内存，在这种情况下为实际 2 \*`totalSize`字节 (它将尝试分配`totalSize`小对象堆的字节数和`totalSize`大型对象堆的字节数)。</span><span class="sxs-lookup"><span data-stu-id="91149-392">The garbage collector enters no GC region latency mode if it is able to allocate the required amount of memory, which in this case is actually 2 \* `totalSize` bytes (it attempts to allocate `totalSize` bytes for the small object heap and `totalSize` bytes for the large object heap).</span></span>  
  
 <span data-ttu-id="91149-393">`totalSize` 必须足够大，以处理在关键路径中发生的所有内存分配。</span><span class="sxs-lookup"><span data-stu-id="91149-393">`totalSize` must be large enough to handle all memory allocations that occur in the critical path.</span></span> <span data-ttu-id="91149-394">这包括分配的应用程序中，以及运行时使应用程序的代表的分配。</span><span class="sxs-lookup"><span data-stu-id="91149-394">This includes allocations by the app, as well as allocations that the runtime makes on the app's behalf.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="91149-395">无法将调用传给<xref:System.GC.TryStartNoGCRegion%2A>方法，并且你应只调用<xref:System.GC.EndNoGCRegion%2A>方法如果运行时当前处于无 GC 区域延迟模式。</span><span class="sxs-lookup"><span data-stu-id="91149-395">You cannot nest calls to the <xref:System.GC.TryStartNoGCRegion%2A> method, and you should only call the <xref:System.GC.EndNoGCRegion%2A> method if the runtime is currently in no GC region latency mode.</span></span> <span data-ttu-id="91149-396">换而言之，不应调用<xref:System.GC.TryStartNoGCRegion%2A>多次 （在第一个方法调用后，后续调用将不会成功），并且不应需要调用<xref:System.GC.EndNoGCRegion%2A>成功只是因为第一次调用到<xref:System.GC.TryStartNoGCRegion%2A>成功。</span><span class="sxs-lookup"><span data-stu-id="91149-396">In other words, you should not call <xref:System.GC.TryStartNoGCRegion%2A> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <xref:System.GC.EndNoGCRegion%2A> to succeed just because the first call to <xref:System.GC.TryStartNoGCRegion%2A> succeeded.</span></span>  
  
 <span data-ttu-id="91149-397">通过调用退出无 GC 区域延迟模式<xref:System.GC.EndNoGCRegion%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="91149-397">You exit the no GC region latency mode by calling the <xref:System.GC.EndNoGCRegion%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="91149-398"><paramref name="totalSize" /> 超出了暂时段大小。</span><span class="sxs-lookup"><span data-stu-id="91149-398"><paramref name="totalSize" /> exceeds the ephemeral segment size.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="91149-399">进程已进入无 GC 区域延迟模式。</span><span class="sxs-lookup"><span data-stu-id="91149-399">The process is already in no GC region latency mode.</span></span></exception>
        <altmember cref="M:System.GC.EndNoGCRegion" />
      </Docs>
    </Member>
    <Member MemberName="TryStartNoGCRegion">
      <MemberSignature Language="C#" Value="public static bool TryStartNoGCRegion (long totalSize, bool disallowFullBlockingGC);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryStartNoGCRegion(int64 totalSize, bool disallowFullBlockingGC) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.TryStartNoGCRegion(System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStartNoGCRegion (totalSize As Long, disallowFullBlockingGC As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryStartNoGCRegion(long totalSize, bool disallowFullBlockingGC);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalSize" Type="System.Int64" />
        <Parameter Name="disallowFullBlockingGC" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="totalSize"><span data-ttu-id="91149-400">在不会触发垃圾回收的情况下分配的内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="91149-400">The amount of memory in bytes to allocate without triggering a garbage collection.</span></span> <span data-ttu-id="91149-401">它必须小于或等于临时段的大小。</span><span class="sxs-lookup"><span data-stu-id="91149-401">It must be less than or equal to the size of an ephemeral segment.</span></span> <span data-ttu-id="91149-402">有关暂时段大小的信息，请参阅[垃圾回收基础知识](~/docs/standard/garbage-collection/fundamentals.md)一文中“暂时代和暂时段”一节。</span><span class="sxs-lookup"><span data-stu-id="91149-402">For information on the size of an ephemeral segment, see the "Ephemeral generations and segments" section in the [Fundamentals of Garbage Collection](~/docs/standard/garbage-collection/fundamentals.md) article.</span></span></param>
        <param name="disallowFullBlockingGC">
          <span data-ttu-id="91149-403"><see langword="true" /> 表示如果垃圾回收器最初无法分配 <c>totalSize</c> 字节，则忽略完整的阻碍性垃圾回收；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="91149-403"><see langword="true" /> to omit a full blocking garbage collection if the garbage collector is initially unable to allocate <c>totalSize</c> bytes; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="91149-404">如果指定数量的内存可用，则在关键路径执行期间尝试禁止垃圾回收；并在初始没有足够内存可用的情况下，控制垃圾回收器是否进行完整的阻碍性垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-404">Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available, and controls whether the garbage collector does a full blocking garbage collection if not enough memory is initially available.</span></span></summary>
        <returns>
          <span data-ttu-id="91149-405">如果运行时能够调配所需数量的内存，且垃圾回收器能够进入无 GC 区域延迟模式，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="91149-405"><see langword="true" /> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91149-406"><xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Boolean%29>方法尝试将垃圾回收器放在应用程序执行代码的关键区域的同时，不允许垃圾回收无 GC 区域延迟模式。</span><span class="sxs-lookup"><span data-stu-id="91149-406">The <xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Boolean%29> method attempts to place the garbage collector in no GC region latency mode, which disallows garbage collection while an app executes a critical region of code.</span></span>  <span data-ttu-id="91149-407">如果运行时无法最初分配请求的内存量和`disallowFullBlockingGC`自变量是`false`、 垃圾回收器尝试释放更多的内存中执行完整的阻碍性垃圾回收; 否则为分配失败，并且该方法返回`false`。</span><span class="sxs-lookup"><span data-stu-id="91149-407">If the runtime is unable to initially allocate the requested amount of memory and the `disallowFullBlockingGC` argument is `false`, the garbage collector performs a full blocking garbage collection in an attempt to free additional memory; otherwise, the allocation fails, and the method returns `false`.</span></span> <span data-ttu-id="91149-408">垃圾回收器进入无 GC 区域延迟模式，如果无法分配所需的数量的内存，在这种情况下为实际 2 \* `totalSize` (它将尝试分配`totalSize`针对小型对象堆和`totalSize`为大型对象堆)。</span><span class="sxs-lookup"><span data-stu-id="91149-408">The garbage collector enters no GC region latency mode if it is able to allocate the required amount of memory, which in this case is actually 2 \* `totalSize` (it attempts to allocate `totalSize` for the small object heap and `totalSize` for the large object heap).</span></span>  
  
 <span data-ttu-id="91149-409">`totalSize` 必须足够大，以处理在关键路径中发生的所有内存分配。</span><span class="sxs-lookup"><span data-stu-id="91149-409">`totalSize` must be large enough to handle all memory allocations that occur in the critical path.</span></span> <span data-ttu-id="91149-410">这包括分配的应用程序中，以及运行时使应用程序的代表的分配。</span><span class="sxs-lookup"><span data-stu-id="91149-410">This includes allocations by the app, as well as allocations that the runtime makes on the app's behalf.</span></span>  
  
 <span data-ttu-id="91149-411">设置`disallowFullBlockingGC`到`true`以防止完整的阻碍性垃圾回收集合最初可用没有足够的内存是否是在负载平衡方案中最有用： 一个系统可以调用此方法，并报告本身为准备好接受请求，如果它返回`true`，并且具有负载平衡器将请求重定向到其他系统，如果它返回`false`。</span><span class="sxs-lookup"><span data-stu-id="91149-411">Setting `disallowFullBlockingGC` to `true` to prevent a full blocking garbage collection if not enough memory is initially available is most useful in load balancing scenarios: one system can call this method and report itself as ready to accept requests if it returns `true`, and have the load balancer redirect requests to other systems if it returns `false`.</span></span> <span data-ttu-id="91149-412">它可以进行完整的阻碍性垃圾回收时不处理请求通过调用<xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29>方法。</span><span class="sxs-lookup"><span data-stu-id="91149-412">It can then do a full blocking garbage collection when it's not handling requests by calling the <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="91149-413">无法将调用传给<xref:System.GC.TryStartNoGCRegion%2A>方法，并且你应只调用<xref:System.GC.EndNoGCRegion%2A>方法如果运行时当前处于无 GC 区域延迟模式。</span><span class="sxs-lookup"><span data-stu-id="91149-413">You cannot nest calls to the <xref:System.GC.TryStartNoGCRegion%2A> method, and you should only call the <xref:System.GC.EndNoGCRegion%2A> method if the runtime is currently in no GC region latency mode.</span></span> <span data-ttu-id="91149-414">换而言之，不应调用<xref:System.GC.TryStartNoGCRegion%2A>多次 （在第一个方法调用后，后续调用将不会成功），并且不应需要调用<xref:System.GC.EndNoGCRegion%2A>成功只是因为第一次调用到<xref:System.GC.TryStartNoGCRegion%2A>成功。</span><span class="sxs-lookup"><span data-stu-id="91149-414">In other words, you should not call <xref:System.GC.TryStartNoGCRegion%2A> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <xref:System.GC.EndNoGCRegion%2A> to succeed just because the first call to <xref:System.GC.TryStartNoGCRegion%2A> succeeded.</span></span>  
  
 <span data-ttu-id="91149-415">通过调用退出无 GC 区域延迟模式<xref:System.GC.EndNoGCRegion%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="91149-415">You exit the no GC region latency mode by calling the <xref:System.GC.EndNoGCRegion%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="91149-416"><paramref name="totalSize" /> 超出了暂时段大小。</span><span class="sxs-lookup"><span data-stu-id="91149-416"><paramref name="totalSize" /> exceeds the ephemeral segment size.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="91149-417">进程已进入无 GC 区域延迟模式。</span><span class="sxs-lookup"><span data-stu-id="91149-417">The process is already in no GC region latency mode.</span></span></exception>
        <altmember cref="M:System.GC.EndNoGCRegion" />
      </Docs>
    </Member>
    <Member MemberName="TryStartNoGCRegion">
      <MemberSignature Language="C#" Value="public static bool TryStartNoGCRegion (long totalSize, long lohSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryStartNoGCRegion(int64 totalSize, int64 lohSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.TryStartNoGCRegion(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStartNoGCRegion (totalSize As Long, lohSize As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryStartNoGCRegion(long totalSize, long lohSize);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalSize" Type="System.Int64" />
        <Parameter Name="lohSize" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="totalSize"><span data-ttu-id="91149-418">在不会触发垃圾回收的情况下分配的内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="91149-418">The amount of memory in bytes to allocate without triggering a garbage collection.</span></span> <span data-ttu-id="91149-419"><c>totalSize</c> –<c>lohSize</c> 必须小于或等于暂时段的大小。</span><span class="sxs-lookup"><span data-stu-id="91149-419"><c>totalSize</c> –<c>lohSize</c> must be less than or equal to the size of an ephemeral segment.</span></span> <span data-ttu-id="91149-420">有关暂时段大小的信息，请参阅[垃圾回收基础知识](~/docs/standard/garbage-collection/fundamentals.md)一文中“暂时代和暂时段”一节。</span><span class="sxs-lookup"><span data-stu-id="91149-420">For information on the size of an ephemeral segment, see the "Ephemeral generations and segments" section in the [Fundamentals of Garbage Collection](~/docs/standard/garbage-collection/fundamentals.md) article.</span></span></param>
        <param name="lohSize"><span data-ttu-id="91149-421"><c>totalSize</c> 中用于大对象堆 (LOH) 分配的字节数。</span><span class="sxs-lookup"><span data-stu-id="91149-421">The number of bytes in <c>totalSize</c> to use for large object heap (LOH) allocations.</span></span></param>
        <summary><span data-ttu-id="91149-422">如果指定数量的内存可用于大对象堆和小对象堆，则在关键路径执行期间尝试禁止垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-422">Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available for the large object heap and the small object heap.</span></span></summary>
        <returns>
          <span data-ttu-id="91149-423">如果运行时能够调配所需数量的内存，且垃圾回收器能够进入无 GC 区域延迟模式，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="91149-423"><see langword="true" /> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91149-424"><xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Int64%29>方法尝试将垃圾回收器放在应用程序执行代码的关键区域的同时，不允许垃圾回收无 GC 区域延迟模式。</span><span class="sxs-lookup"><span data-stu-id="91149-424">The <xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Int64%29> method attempts to place the garbage collector in no GC region latency mode, which disallows garbage collection while an app executes a critical region of code.</span></span>  <span data-ttu-id="91149-425">如果无法最初分配请求的内存量运行时，垃圾回收器尝试释放更多的内存中执行完整的阻碍性垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-425">If the runtime is unable to initially allocate the requested amount of memory, the garbage collector performs a full blocking garbage collection in an attempt to free additional memory.</span></span> <span data-ttu-id="91149-426">垃圾回收器进入无 GC 区域延迟模式，如果能够分配`lohSize`为 LOH 和`totalSize`–`lohSize`针对小型对象堆 (SOH)。</span><span class="sxs-lookup"><span data-stu-id="91149-426">The garbage collector enters no GC region latency mode if it is able to allocate `lohSize` for the LOH and `totalSize` – `lohSize` for the small object heap (SOH).</span></span>  
  
 <span data-ttu-id="91149-427">`lohSize` 必须具有足够大小以处理有关 LOH，发生在关键路径中的所有内存分配和`totalSize`–`lohSize`必须足够大，无法都处理的 SOH 发生在关键路径中的所有内存分配。</span><span class="sxs-lookup"><span data-stu-id="91149-427">`lohSize` must be large enough to handle all memory allocations that occur in the critical path for the LOH, and `totalSize` – `lohSize` must be large enough to handle all memory allocations that occur in the critical path for the SOH.</span></span> <span data-ttu-id="91149-428">这包括分配的应用程序中，以及运行时使应用程序的代表的分配。</span><span class="sxs-lookup"><span data-stu-id="91149-428">This includes allocations by the app, as well as allocations that the runtime makes on the app's behalf.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="91149-429">无法将调用传给<xref:System.GC.TryStartNoGCRegion%2A>方法，并且你应只调用<xref:System.GC.EndNoGCRegion%2A>方法如果运行时当前处于无 GC 区域延迟模式。</span><span class="sxs-lookup"><span data-stu-id="91149-429">You cannot nest calls to the <xref:System.GC.TryStartNoGCRegion%2A> method, and you should only call the <xref:System.GC.EndNoGCRegion%2A> method if the runtime is currently in no GC region latency mode.</span></span> <span data-ttu-id="91149-430">换而言之，不应调用<xref:System.GC.TryStartNoGCRegion%2A>多次 （在第一个方法调用后，后续调用将不会成功），并且不应需要调用<xref:System.GC.EndNoGCRegion%2A>成功只是因为第一次调用到<xref:System.GC.TryStartNoGCRegion%2A>成功。</span><span class="sxs-lookup"><span data-stu-id="91149-430">In other words, you should not call <xref:System.GC.TryStartNoGCRegion%2A> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <xref:System.GC.EndNoGCRegion%2A> to succeed just because the first call to <xref:System.GC.TryStartNoGCRegion%2A> succeeded.</span></span>  
  
 <span data-ttu-id="91149-431">通过调用退出无 GC 区域延迟模式<xref:System.GC.EndNoGCRegion%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="91149-431">You exit the no GC region latency mode by calling the <xref:System.GC.EndNoGCRegion%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="91149-432"><paramref name="totalSize" /> – <paramref name="lohSize" /> 超出了暂时段大小。</span><span class="sxs-lookup"><span data-stu-id="91149-432"><paramref name="totalSize" /> – <paramref name="lohSize" /> exceeds the ephemeral segment size.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="91149-433">进程已进入无 GC 区域延迟模式。</span><span class="sxs-lookup"><span data-stu-id="91149-433">The process is already in no GC region latency mode.</span></span></exception>
        <altmember cref="M:System.GC.EndNoGCRegion" />
      </Docs>
    </Member>
    <Member MemberName="TryStartNoGCRegion">
      <MemberSignature Language="C#" Value="public static bool TryStartNoGCRegion (long totalSize, long lohSize, bool disallowFullBlockingGC);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryStartNoGCRegion(int64 totalSize, int64 lohSize, bool disallowFullBlockingGC) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.TryStartNoGCRegion(System.Int64,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryStartNoGCRegion (totalSize As Long, lohSize As Long, disallowFullBlockingGC As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryStartNoGCRegion(long totalSize, long lohSize, bool disallowFullBlockingGC);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="totalSize" Type="System.Int64" />
        <Parameter Name="lohSize" Type="System.Int64" />
        <Parameter Name="disallowFullBlockingGC" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="totalSize"><span data-ttu-id="91149-434">在不会触发垃圾回收的情况下分配的内存量（以字节为单位）。</span><span class="sxs-lookup"><span data-stu-id="91149-434">The amount of memory in bytes to allocate without triggering a garbage collection.</span></span> <span data-ttu-id="91149-435"><c>totalSize</c> –<c>lohSize</c> 必须小于或等于暂时段的大小。</span><span class="sxs-lookup"><span data-stu-id="91149-435"><c>totalSize</c> –<c>lohSize</c> must be less than or equal to the size of an ephemeral segment.</span></span> <span data-ttu-id="91149-436">有关暂时段大小的信息，请参阅[垃圾回收基础知识](~/docs/standard/garbage-collection/fundamentals.md)一文中“暂时代和暂时段”一节。</span><span class="sxs-lookup"><span data-stu-id="91149-436">For information on the size of an ephemeral segment, see the "Ephemeral generations and segments" section in the [Fundamentals of Garbage Collection](~/docs/standard/garbage-collection/fundamentals.md) article.</span></span></param>
        <param name="lohSize"><span data-ttu-id="91149-437"><c>totalSize</c> 中用于大对象堆 (LOH) 分配的字节数。</span><span class="sxs-lookup"><span data-stu-id="91149-437">The number of bytes in <c>totalSize</c> to use for large object heap (LOH) allocations.</span></span></param>
        <param name="disallowFullBlockingGC">
          <span data-ttu-id="91149-438"><see langword="true" /> 表示如果垃圾回收器初始无法分配小对象堆 (SOH) 和 LOH 上的指定内存，则忽略完整的阻碍性垃圾回收；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="91149-438"><see langword="true" /> to omit a full blocking garbage collection if the garbage collector is initially unable to allocate the specified memory on the small object heap (SOH) and LOH; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="91149-439">如果指定数量的内存可用大对象堆和小对象堆，则在关键路径执行期间尝试禁止垃圾回收；并在初始没有足够内存可用的情况下，控制垃圾回收器是否进行完整的阻碍性垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-439">Attempts to disallow garbage collection during the execution of a critical path if a specified amount of memory is available for the large object heap and the small object heap, and controls whether the garbage collector does a full blocking garbage collection if not enough memory is initially available.</span></span></summary>
        <returns>
          <span data-ttu-id="91149-440">如果运行时能够调配所需数量的内存，且垃圾回收器能够进入无 GC 区域延迟模式，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="91149-440"><see langword="true" /> if the runtime was able to commit the required amount of memory and the garbage collector is able to enter no GC region latency mode; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91149-441"><xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Int64%2CSystem.Boolean%29>方法尝试将垃圾回收器放在应用程序执行代码的关键区域的同时，不允许垃圾回收无 GC 区域延迟模式。</span><span class="sxs-lookup"><span data-stu-id="91149-441">The <xref:System.GC.TryStartNoGCRegion%28System.Int64%2CSystem.Int64%2CSystem.Boolean%29> method attempts to place the garbage collector in no GC region latency mode, which disallows garbage collection while an app executes a critical region of code.</span></span>  <span data-ttu-id="91149-442">如果运行时无法最初分配请求的内存量和`disallowFullBlockingGC`自变量是`false`、 垃圾回收器尝试释放更多的内存中执行完整的阻碍性垃圾回收; 否则为分配失败，并且该方法返回`false`。</span><span class="sxs-lookup"><span data-stu-id="91149-442">If the runtime is unable to initially allocate the requested amount of memory and the `disallowFullBlockingGC` argument is `false`, the garbage collector performs a full blocking garbage collection in an attempt to free additional memory; otherwise, the allocation fails, and the method returns `false`.</span></span> <span data-ttu-id="91149-443">垃圾回收器进入无 GC 区域延迟模式，如果能够分配`lohSize`为 LOH 和`totalSize`–`lohSize`针对小型对象堆 (SOH)。</span><span class="sxs-lookup"><span data-stu-id="91149-443">The garbage collector enters no GC region latency mode if it is able to allocate `lohSize` for the LOH and `totalSize` – `lohSize` for the small object heap (SOH).</span></span>  
  
 <span data-ttu-id="91149-444">`lohSize` 必须具有足够大小以处理有关 LOH，发生在关键路径中的所有内存分配和`totalSize`–`lohSize`必须足够大，无法都处理的 SOH 发生在关键路径中的所有内存分配。</span><span class="sxs-lookup"><span data-stu-id="91149-444">`lohSize` must be large enough to handle all memory allocations that occur in the critical path for the LOH, and `totalSize` – `lohSize` must be large enough to handle all memory allocations that occur in the critical path for the SOH.</span></span> <span data-ttu-id="91149-445">这包括分配的应用程序中，以及运行时使应用程序的代表的分配。</span><span class="sxs-lookup"><span data-stu-id="91149-445">This includes allocations by the app, as well as allocations that the runtime makes on the app's behalf.</span></span>  
  
 <span data-ttu-id="91149-446">设置`disallowFullBlockingGC`到`true`以防止完整的阻碍性垃圾回收集合最初可用没有足够的内存是否是在负载平衡方案中最有用： 一个系统可以调用此方法，并报告本身为准备好接受请求，如果它返回`true`，并且具有负载平衡器将请求重定向到其他系统，如果它返回`false`。</span><span class="sxs-lookup"><span data-stu-id="91149-446">Setting `disallowFullBlockingGC` to `true` to prevent a full blocking garbage collection if not enough memory is initially available is most useful in load balancing scenarios: one system can call this method and report itself as ready to accept requests if it returns `true`, and have the load balancer redirect requests to other systems if it returns `false`.</span></span> <span data-ttu-id="91149-447">它可以进行完整的阻碍性垃圾回收时不处理请求通过调用<xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29>方法。</span><span class="sxs-lookup"><span data-stu-id="91149-447">It can then do a full blocking garbage collection when it's not handling requests by calling the <xref:System.GC.Collect%28System.Int32%2CSystem.GCCollectionMode%2CSystem.Boolean%2CSystem.Boolean%29> method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="91149-448">无法将调用传给<xref:System.GC.TryStartNoGCRegion%2A>方法，并且你应只调用<xref:System.GC.EndNoGCRegion%2A>方法如果运行时当前处于无 GC 区域延迟模式。</span><span class="sxs-lookup"><span data-stu-id="91149-448">You cannot nest calls to the <xref:System.GC.TryStartNoGCRegion%2A> method, and you should only call the <xref:System.GC.EndNoGCRegion%2A> method if the runtime is currently in no GC region latency mode.</span></span> <span data-ttu-id="91149-449">换而言之，不应调用<xref:System.GC.TryStartNoGCRegion%2A>多次 （在第一个方法调用后，后续调用将不会成功），并且不应需要调用<xref:System.GC.EndNoGCRegion%2A>成功只是因为第一次调用到<xref:System.GC.TryStartNoGCRegion%2A>成功。</span><span class="sxs-lookup"><span data-stu-id="91149-449">In other words, you should not call <xref:System.GC.TryStartNoGCRegion%2A> multiple times (after the first method call, subsequent calls will not succeed), and you should not expect calls to <xref:System.GC.EndNoGCRegion%2A> to succeed just because the first call to <xref:System.GC.TryStartNoGCRegion%2A> succeeded.</span></span>  
  
 <span data-ttu-id="91149-450">通过调用退出无 GC 区域延迟模式<xref:System.GC.EndNoGCRegion%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="91149-450">You exit the no GC region latency mode by calling the <xref:System.GC.EndNoGCRegion%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="91149-451"><paramref name="totalSize" /> – <paramref name="lohSize" /> 超出了暂时段大小。</span><span class="sxs-lookup"><span data-stu-id="91149-451"><paramref name="totalSize" /> – <paramref name="lohSize" /> exceeds the ephemeral segment size.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="91149-452">进程已进入无 GC 区域延迟模式。</span><span class="sxs-lookup"><span data-stu-id="91149-452">The process is already in no GC region latency mode.</span></span></exception>
        <altmember cref="M:System.GC.EndNoGCRegion" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitForFullGCApproach">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="91149-453">返回已注册通知的状态，用于确定公共语言运行时是否即将引发完整、阻碍性垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-453">Returns the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime is imminent.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitForFullGCApproach">
      <MemberSignature Language="C#" Value="public static GCNotificationStatus WaitForFullGCApproach ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.GCNotificationStatus WaitForFullGCApproach() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForFullGCApproach" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitForFullGCApproach () As GCNotificationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static GCNotificationStatus WaitForFullGCApproach();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.GCNotificationStatus</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91149-454">返回已注册通知的状态，用于确定公共语言运行时是否即将引发完整、阻碍性垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-454">Returns the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime is imminent.</span></span></summary>
        <returns><span data-ttu-id="91149-455">已注册垃圾回收通知的状态。</span><span class="sxs-lookup"><span data-stu-id="91149-455">The status of the registered garbage collection notification.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91149-456">使用<xref:System.GCNotificationStatus>返回此方法以确定当前已由使用注册的垃圾回收通知的状态的枚举<xref:System.GC.RegisterForFullGCNotification%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="91149-456">Use the <xref:System.GCNotificationStatus> enumeration returned by this method to determine the status of the current garbage collection notification that was registered by using the <xref:System.GC.RegisterForFullGCNotification%2A> method.</span></span> <span data-ttu-id="91149-457">你还可以使用<xref:System.GC.WaitForFullGCComplete%2A>方法来确定完整的垃圾回收是否已完成。</span><span class="sxs-lookup"><span data-stu-id="91149-457">You can also use the <xref:System.GC.WaitForFullGCComplete%2A> method to determine whether the full garbage collection has completed.</span></span>  
  
 <span data-ttu-id="91149-458">当在枚举返回<xref:System.GCNotificationStatus.Succeeded>，你可以执行任务，例如阻止分配和使用自行引发回收其他对象<xref:System.GC.Collect%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="91149-458">When the enumeration returns <xref:System.GCNotificationStatus.Succeeded>, you can do tasks such as preventing additional objects from being allocated and inducing a collection yourself with the <xref:System.GC.Collect%2A> method.</span></span> <span data-ttu-id="91149-459">请注意通知不保证完整的垃圾回收会发生，仅保证条件已达到阈值，支持完整垃圾回收发生。</span><span class="sxs-lookup"><span data-stu-id="91149-459">Note that the notification does not guarantee that a full garbage collection will occur, only that conditions have reached the threshold that are favorable for a full garbage collection to occur.</span></span>  
  
 <span data-ttu-id="91149-460">无限期地等待垃圾回收通知要从中获取此方法。</span><span class="sxs-lookup"><span data-stu-id="91149-460">This method waits indefinitely for a garbage collection notification to be obtained.</span></span> <span data-ttu-id="91149-461">如果你想要指定要返回如果无法获得通知的方法的超时期限，使用<xref:System.GC.WaitForFullGCApproach%28System.Int32%29?displayProperty=nameWithType>方法重载。</span><span class="sxs-lookup"><span data-stu-id="91149-461">If you want to specify a time-out period for the method to return if the notification cannot be obtained, use the <xref:System.GC.WaitForFullGCApproach%28System.Int32%29?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="91149-462">如果不指定超时情况下调用此方法，则可以调用<xref:System.GC.CancelFullGCNotification%2A>如果你在等待时间超过首选的方法。</span><span class="sxs-lookup"><span data-stu-id="91149-462">If you call this method without specifying a time-out, you can call the <xref:System.GC.CancelFullGCNotification%2A> method if you are waiting longer than preferred.</span></span>  
  
 <span data-ttu-id="91149-463">你应遵循通过调用此方法<xref:System.GC.WaitForFullGCComplete%2A>方法以确保已进行过完整的垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-463">You should follow this method with a call to the <xref:System.GC.WaitForFullGCComplete%2A> method to make sure that you have had a full garbage collection.</span></span> <span data-ttu-id="91149-464">单独调用此方法会导致不确定结果。</span><span class="sxs-lookup"><span data-stu-id="91149-464">Calling this method alone causes indeterminate results.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91149-465">下面的示例演示如何使用此方法来确定是否正在接近的完整、 阻碍性垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-465">The following example shows how to use this method to determine whether a full, blocking garbage collection is approaching.</span></span> <span data-ttu-id="91149-466">每当通知的状态是<xref:System.GCNotificationStatus.Succeeded>，用户方法`OnFullGCApproachNotify`调用以执行操作以响应接近的集合。</span><span class="sxs-lookup"><span data-stu-id="91149-466">Whenever the status of the notification is <xref:System.GCNotificationStatus.Succeeded>, the user method `OnFullGCApproachNotify` is called to perform actions in response to the approaching collection.</span></span> <span data-ttu-id="91149-467">此代码示例摘自更大的示例为提供[垃圾回收通知](~/docs/standard/garbage-collection/notifications.md)主题。</span><span class="sxs-lookup"><span data-stu-id="91149-467">This code example is part of a larger example provided for [Garbage Collection Notifications](~/docs/standard/garbage-collection/notifications.md) topic.</span></span>  
  
 [!code-cpp[GCNotification#3](~/samples/snippets/cpp/VS_Snippets_CLR/GCNotification/cpp/program.cpp#3)]
 [!code-csharp[GCNotification#3](~/samples/snippets/csharp/VS_Snippets_CLR/GCNotification/cs/Program.cs#3)]
 [!code-vb[GCNotification#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/GCNotification/vb/program.vb#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="91149-468">直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="91149-468">for full trust for the immediate caller.</span></span> <span data-ttu-id="91149-469">此成员不能由部分信任的代码使用。</span><span class="sxs-lookup"><span data-stu-id="91149-469">This member cannot be used by partially trusted code.</span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="91149-470">需要完全信任直接调用方。</span><span class="sxs-lookup"><span data-stu-id="91149-470">requires full trust for the immediate caller.</span></span> <span data-ttu-id="91149-471">此成员不能由部分受信任或不透明的代码。</span><span class="sxs-lookup"><span data-stu-id="91149-471">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="WaitForFullGCApproach">
      <MemberSignature Language="C#" Value="public static GCNotificationStatus WaitForFullGCApproach (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.GCNotificationStatus WaitForFullGCApproach(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForFullGCApproach(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitForFullGCApproach (millisecondsTimeout As Integer) As GCNotificationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static GCNotificationStatus WaitForFullGCApproach(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.GCNotificationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="91149-472">在获取通知状态前等待的时间长度。</span><span class="sxs-lookup"><span data-stu-id="91149-472">The length of time to wait before a notification status can be obtained.</span></span> <span data-ttu-id="91149-473">指定 -1 表示无限期等待。</span><span class="sxs-lookup"><span data-stu-id="91149-473">Specify -1 to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="91149-474">在指定的超时期限内，返回已注册通知的状态，用于确定公共语言运行时是否即将引发完整、阻碍性垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-474">Returns, in a specified time-out period, the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime is imminent.</span></span></summary>
        <returns><span data-ttu-id="91149-475">已注册垃圾回收通知的状态。</span><span class="sxs-lookup"><span data-stu-id="91149-475">The status of the registered garbage collection notification.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91149-476">使用<xref:System.GCNotificationStatus>返回此方法以确定当前已由使用注册的垃圾回收通知的状态的枚举<xref:System.GC.RegisterForFullGCNotification%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="91149-476">Use the <xref:System.GCNotificationStatus> enumeration returned by this method to determine the status of the current garbage collection notification that was registered by using the <xref:System.GC.RegisterForFullGCNotification%2A> method.</span></span> <span data-ttu-id="91149-477">你还可以使用<xref:System.GC.WaitForFullGCComplete%2A>方法来确定完整的垃圾回收是否已完成。</span><span class="sxs-lookup"><span data-stu-id="91149-477">You can also use the <xref:System.GC.WaitForFullGCComplete%2A> method to determine whether the full garbage collection has completed.</span></span>  
  
 <span data-ttu-id="91149-478">请注意，此方法返回立即每当获取垃圾回收通知状态，而不考虑指定的值`millisecondsTimeout`。</span><span class="sxs-lookup"><span data-stu-id="91149-478">Note that this method returns immediately whenever a garbage collection notification status is obtained, regardless of the value specified by `millisecondsTimeout`.</span></span> <span data-ttu-id="91149-479">如果垃圾回收通知状态前未获取`millisecondsTimeout`时间 out，此方法返回<xref:System.GCNotificationStatus.NotApplicable>。</span><span class="sxs-lookup"><span data-stu-id="91149-479">If a garbage collection notification status is not obtained before `millisecondsTimeout` times out, this method returns <xref:System.GCNotificationStatus.NotApplicable>.</span></span>  
  
 <span data-ttu-id="91149-480">当在枚举返回<xref:System.GCNotificationStatus.Succeeded>，你可以执行任务，例如阻止分配和使用自行引发回收其他对象<xref:System.GC.Collect%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="91149-480">When the enumeration returns <xref:System.GCNotificationStatus.Succeeded>, you can do tasks such as preventing additional objects from being allocated and inducing a collection yourself with the <xref:System.GC.Collect%2A> method.</span></span> <span data-ttu-id="91149-481">请注意通知不保证完整的垃圾回收会发生，仅保证条件已达到阈值，支持完整垃圾回收发生。</span><span class="sxs-lookup"><span data-stu-id="91149-481">Note that the notification does not guarantee that a full garbage collection will occur, only that conditions have reached the threshold that are favorable for a full garbage collection to occur.</span></span>  
  
 <span data-ttu-id="91149-482">你可以调用<xref:System.GC.CancelFullGCNotification%2A>方法时不能等待超时周期结束。</span><span class="sxs-lookup"><span data-stu-id="91149-482">You can call the <xref:System.GC.CancelFullGCNotification%2A> method when you cannot wait for the time-out period to elapse.</span></span>  
  
 <span data-ttu-id="91149-483">你应遵循通过调用此方法<xref:System.GC.WaitForFullGCComplete%2A>方法以确保已进行过完整的垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-483">You should follow this method with a call to the <xref:System.GC.WaitForFullGCComplete%2A> method to make sure that you have had a full garbage collection.</span></span> <span data-ttu-id="91149-484">单独调用此方法会导致不确定结果。</span><span class="sxs-lookup"><span data-stu-id="91149-484">Calling this method alone causes indeterminate results.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="91149-485"><paramref name="millisecondsTimeout" /> 必须为非负数或小于或等于 <see cref="F:System.Int32.MaxValue" /> 或 -1。</span><span class="sxs-lookup"><span data-stu-id="91149-485"><paramref name="millisecondsTimeout" /> must be either non-negative or less than or equal to <see cref="F:System.Int32.MaxValue" /> or -1.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="91149-486">直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="91149-486">for full trust for the immediate caller.</span></span> <span data-ttu-id="91149-487">此成员不能由部分信任的代码使用。</span><span class="sxs-lookup"><span data-stu-id="91149-487">This member cannot be used by partially trusted code.</span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="91149-488">需要完全信任直接调用方。</span><span class="sxs-lookup"><span data-stu-id="91149-488">requires full trust for the immediate caller.</span></span> <span data-ttu-id="91149-489">此成员不能由部分受信任或不透明的代码。</span><span class="sxs-lookup"><span data-stu-id="91149-489">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitForFullGCComplete">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="91149-490">返回已注册通知的状态，用于确定公共语言运行时引发的完整、阻碍性垃圾回收是否已完成。</span><span class="sxs-lookup"><span data-stu-id="91149-490">Returns the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime has completed.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitForFullGCComplete">
      <MemberSignature Language="C#" Value="public static GCNotificationStatus WaitForFullGCComplete ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.GCNotificationStatus WaitForFullGCComplete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForFullGCComplete" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitForFullGCComplete () As GCNotificationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static GCNotificationStatus WaitForFullGCComplete();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.GCNotificationStatus</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91149-491">返回已注册通知的状态，用于确定公共语言运行时引发的完整、阻碍性垃圾回收是否已完成。</span><span class="sxs-lookup"><span data-stu-id="91149-491">Returns the status of a registered notification for determining whether a full, blocking garbage collection by the common language runtime has completed.</span></span></summary>
        <returns><span data-ttu-id="91149-492">已注册垃圾回收通知的状态。</span><span class="sxs-lookup"><span data-stu-id="91149-492">The status of the registered garbage collection notification.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91149-493">使用<xref:System.GCNotificationStatus>返回此方法以确定当前已由使用注册的垃圾回收通知的状态的枚举<xref:System.GC.RegisterForFullGCNotification%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="91149-493">Use the <xref:System.GCNotificationStatus> enumeration returned by this method to determine the status of the current garbage collection notification that was registered by using the <xref:System.GC.RegisterForFullGCNotification%2A> method.</span></span> <span data-ttu-id="91149-494">你还可以使用<xref:System.GC.WaitForFullGCApproach%2A>方法来确定是否即将引发完整的垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-494">You can also use the <xref:System.GC.WaitForFullGCApproach%2A> method to determine whether a full garbage collection is imminent.</span></span>  
  
 <span data-ttu-id="91149-495">当在枚举返回<xref:System.GCNotificationStatus.Succeeded>，你可以执行任务，例如继续处理并获取集合计数与<xref:System.GC.CollectionCount%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="91149-495">When the enumeration returns <xref:System.GCNotificationStatus.Succeeded>, you can do tasks such as resuming work and obtaining a collection count with the <xref:System.GC.CollectionCount%2A> property.</span></span>  
  
 <span data-ttu-id="91149-496">无限期地等待垃圾回收通知要从中获取此方法。</span><span class="sxs-lookup"><span data-stu-id="91149-496">This method waits indefinitely for a garbage collection notification to be obtained.</span></span> <span data-ttu-id="91149-497">如果你想要指定要返回如果无法获得通知的方法的超时期限，使用<xref:System.GC.WaitForFullGCApproach%28System.Int32%29?displayProperty=nameWithType>方法重载。</span><span class="sxs-lookup"><span data-stu-id="91149-497">If you want to specify a time-out period for the method to return if the notification cannot be obtained, use the <xref:System.GC.WaitForFullGCApproach%28System.Int32%29?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="91149-498">如果不指定超时情况下调用此方法，则可以调用<xref:System.GC.CancelFullGCNotification%2A>如果你在等待时间超过首选的方法。</span><span class="sxs-lookup"><span data-stu-id="91149-498">If you call this method without specifying a time-out, you can call the <xref:System.GC.CancelFullGCNotification%2A> method if you are waiting longer than preferred.</span></span>  
  
 <span data-ttu-id="91149-499">此方法调用之前应该通过调用<xref:System.GC.WaitForFullGCApproach%2A>方法以确保已进行过完整的垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-499">This method call should be preceded with a call to the <xref:System.GC.WaitForFullGCApproach%2A> method to make sure that you have had a full garbage collection.</span></span> <span data-ttu-id="91149-500">单独调用此方法可能产生不确定结果。</span><span class="sxs-lookup"><span data-stu-id="91149-500">Calling this method alone can produce indeterminate results.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91149-501">下面的示例演示如何使用此方法来确定完整的垃圾回收是否已完成。</span><span class="sxs-lookup"><span data-stu-id="91149-501">The following example shows how to use this method to determine whether a full garbage collection has completed.</span></span> <span data-ttu-id="91149-502">每当通知的状态是<xref:System.GCNotificationStatus.Succeeded>，用户方法`OnFullGCCompletedNotify`调用以执行操作以响应已完成的集合。</span><span class="sxs-lookup"><span data-stu-id="91149-502">Whenever the status of the notification is <xref:System.GCNotificationStatus.Succeeded>, the user method `OnFullGCCompletedNotify` is called to perform actions in response to the completed collection.</span></span> <span data-ttu-id="91149-503">此代码示例摘自更大的示例为提供[垃圾回收通知](~/docs/standard/garbage-collection/notifications.md)主题。</span><span class="sxs-lookup"><span data-stu-id="91149-503">This code example is part of a larger example provided for [Garbage Collection Notifications](~/docs/standard/garbage-collection/notifications.md) topic.</span></span>  
  
 [!code-cpp[GCNotification#4](~/samples/snippets/cpp/VS_Snippets_CLR/GCNotification/cpp/program.cpp#4)]
 [!code-csharp[GCNotification#4](~/samples/snippets/csharp/VS_Snippets_CLR/GCNotification/cs/Program.cs#4)]
 [!code-vb[GCNotification#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/GCNotification/vb/program.vb#4)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="91149-504">直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="91149-504">for full trust for the immediate caller.</span></span> <span data-ttu-id="91149-505">此成员不能由部分信任的代码使用。</span><span class="sxs-lookup"><span data-stu-id="91149-505">This member cannot be used by partially trusted code.</span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="91149-506">需要完全信任直接调用方。</span><span class="sxs-lookup"><span data-stu-id="91149-506">requires full trust for the immediate caller.</span></span> <span data-ttu-id="91149-507">此成员不能由部分受信任或不透明的代码。</span><span class="sxs-lookup"><span data-stu-id="91149-507">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="WaitForFullGCComplete">
      <MemberSignature Language="C#" Value="public static GCNotificationStatus WaitForFullGCComplete (int millisecondsTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.GCNotificationStatus WaitForFullGCComplete(int32 millisecondsTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForFullGCComplete(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function WaitForFullGCComplete (millisecondsTimeout As Integer) As GCNotificationStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static GCNotificationStatus WaitForFullGCComplete(int millisecondsTimeout);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.GCNotificationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="millisecondsTimeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="millisecondsTimeout"><span data-ttu-id="91149-508">在获取通知状态前等待的时间长度。</span><span class="sxs-lookup"><span data-stu-id="91149-508">The length of time to wait before a notification status can be obtained.</span></span> <span data-ttu-id="91149-509">指定 -1 表示无限期等待。</span><span class="sxs-lookup"><span data-stu-id="91149-509">Specify -1 to wait indefinitely.</span></span></param>
        <summary><span data-ttu-id="91149-510">在指定的超时期限内，返回已注册通知的状态，用于确定公共语言运行时引发的完整、阻碍性垃圾回收是否已完成。</span><span class="sxs-lookup"><span data-stu-id="91149-510">Returns, in a specified time-out period, the status of a registered notification for determining whether a full, blocking garbage collection by common language the runtime has completed.</span></span></summary>
        <returns><span data-ttu-id="91149-511">已注册垃圾回收通知的状态。</span><span class="sxs-lookup"><span data-stu-id="91149-511">The status of the registered garbage collection notification.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91149-512">使用<xref:System.GCNotificationStatus>返回此方法以确定当前已由使用注册的垃圾回收通知的状态的枚举<xref:System.GC.RegisterForFullGCNotification%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="91149-512">Use the <xref:System.GCNotificationStatus> enumeration returned by this method to determine the status of the current garbage collection notification that was registered by using the <xref:System.GC.RegisterForFullGCNotification%2A> method.</span></span> <span data-ttu-id="91149-513">你还可以使用<xref:System.GC.WaitForFullGCApproach%2A>方法来确定是否即将引发完整的垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-513">You can also use the <xref:System.GC.WaitForFullGCApproach%2A> method to determine whether a full garbage collection is imminent.</span></span>  
  
 <span data-ttu-id="91149-514">请注意，此方法返回立即每当获取垃圾回收通知状态，而不考虑指定的值`millisecondsTimeout`。</span><span class="sxs-lookup"><span data-stu-id="91149-514">Note that this method returns immediately whenever a garbage collection notification status is obtained, regardless of the value specified by `millisecondsTimeout`.</span></span> <span data-ttu-id="91149-515">如果垃圾回收通知状态前未获取`millisecondsTimeout`时间 out，此方法返回<xref:System.GCNotificationStatus.NotApplicable>。</span><span class="sxs-lookup"><span data-stu-id="91149-515">If a garbage collection notification status is not obtained before `millisecondsTimeout` times out, this method returns <xref:System.GCNotificationStatus.NotApplicable>.</span></span>  
  
 <span data-ttu-id="91149-516">当在枚举返回<xref:System.GCNotificationStatus.Succeeded>，你可以执行任务，例如继续处理并获取集合计数与<xref:System.GC.CollectionCount%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="91149-516">When the enumeration returns <xref:System.GCNotificationStatus.Succeeded>, you can do tasks such as resuming work and obtaining a collection count with the <xref:System.GC.CollectionCount%2A> property.</span></span>  
  
 <span data-ttu-id="91149-517">你可以调用<xref:System.GC.CancelFullGCNotification%2A>方法时不能等待超时周期结束。</span><span class="sxs-lookup"><span data-stu-id="91149-517">You can call the <xref:System.GC.CancelFullGCNotification%2A> method when you cannot wait for the time-out period to elapse.</span></span>  
  
 <span data-ttu-id="91149-518">此方法调用之前应该通过调用<xref:System.GC.WaitForFullGCApproach%2A>方法以确保已进行过完整的垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="91149-518">This method call should be preceded with a call to the <xref:System.GC.WaitForFullGCApproach%2A> method to make sure that you have had a full garbage collection.</span></span> <span data-ttu-id="91149-519">单独调用此方法可能产生不确定结果。</span><span class="sxs-lookup"><span data-stu-id="91149-519">Calling this method alone can produce indeterminate results.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="91149-520"><paramref name="millisecondsTimeout" /> 必须为非负数或小于或等于 <see cref="F:System.Int32.MaxValue" /> 或 -1。</span><span class="sxs-lookup"><span data-stu-id="91149-520"><paramref name="millisecondsTimeout" /> must be either non-negative or less than or equal to <see cref="F:System.Int32.MaxValue" /> or -1.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand"><span data-ttu-id="91149-521">直接调用方的完全信任。</span><span class="sxs-lookup"><span data-stu-id="91149-521">for full trust for the immediate caller.</span></span> <span data-ttu-id="91149-522">此成员不能由部分信任的代码使用。</span><span class="sxs-lookup"><span data-stu-id="91149-522">This member cannot be used by partially trusted code.</span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="91149-523">需要完全信任直接调用方。</span><span class="sxs-lookup"><span data-stu-id="91149-523">requires full trust for the immediate caller.</span></span> <span data-ttu-id="91149-524">此成员不能由部分受信任或不透明的代码。</span><span class="sxs-lookup"><span data-stu-id="91149-524">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="WaitForPendingFinalizers">
      <MemberSignature Language="C#" Value="public static void WaitForPendingFinalizers ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WaitForPendingFinalizers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.GC.WaitForPendingFinalizers" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WaitForPendingFinalizers ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WaitForPendingFinalizers();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="91149-525">挂起当前线程，直到处理终结器队列的线程清空该队列为止。</span><span class="sxs-lookup"><span data-stu-id="91149-525">Suspends the current thread until the thread that is processing the queue of finalizers has emptied that queue.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="91149-526">当垃圾回收器发现可以回收的对象时，它会检查以确定对象的终止要求每个对象。</span><span class="sxs-lookup"><span data-stu-id="91149-526">When the garbage collector finds objects that can be reclaimed, it checks each object to determine the object's finalization requirements.</span></span> <span data-ttu-id="91149-527">如果对象实现终结器，并通过调用未禁用终止<xref:System.GC.SuppressFinalize%2A>，该对象被放置在标记为准备好进行终结的对象的列表。</span><span class="sxs-lookup"><span data-stu-id="91149-527">If an object implements a finalizer and has not disabled finalization by calling <xref:System.GC.SuppressFinalize%2A>, the object is placed in a list of objects that are marked as ready for finalization.</span></span> <span data-ttu-id="91149-528">垃圾回收器调用<xref:System.Object.Finalize%2A>此列表和中移除这些项从列表中的对象的方法。</span><span class="sxs-lookup"><span data-stu-id="91149-528">The garbage collector calls the <xref:System.Object.Finalize%2A> methods for the objects in this list and removes the entries from the list.</span></span> <span data-ttu-id="91149-529">此方法阻止，直到所有的终结器已完成运行。</span><span class="sxs-lookup"><span data-stu-id="91149-529">This method blocks until all finalizers have run to completion.</span></span>  
  
 <span data-ttu-id="91149-530">对其运行的终结器线程未指定，因此不能保证此方法将终止。</span><span class="sxs-lookup"><span data-stu-id="91149-530">The thread on which finalizers are run is unspecified, so there is no guarantee that this method will terminate.</span></span> <span data-ttu-id="91149-531">但是，可以由其他线程时中断此线程<xref:System.GC.WaitForPendingFinalizers%2A>方法正在进行。</span><span class="sxs-lookup"><span data-stu-id="91149-531">However, this thread can be interrupted by another thread while the <xref:System.GC.WaitForPendingFinalizers%2A> method is in progress.</span></span> <span data-ttu-id="91149-532">例如，你可以等待一段时间内，如果此线程仍然挂起则中断此线程的另一个线程。</span><span class="sxs-lookup"><span data-stu-id="91149-532">For example, you can start another thread that waits for a period of time and then interrupts this thread if this thread is still suspended.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="91149-533">下面的示例演示如何使用<xref:System.GC.WaitForPendingFinalizers%2A>方法挂起当前线程，直到终止所有收集的对象的已完成。</span><span class="sxs-lookup"><span data-stu-id="91149-533">The following example demonstrates how to use the <xref:System.GC.WaitForPendingFinalizers%2A> method to suspend the current thread until finalization of all the collected objects is complete.</span></span>  
  
 [!code-cpp[System.GC.WaitForPendingFinalizers Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.GC.WaitForPendingFinalizers Example/CPP/class1.cpp#1)]
 [!code-csharp[System.GC.WaitForPendingFinalizers Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.GC.WaitForPendingFinalizers Example/CS/class1.cs#1)]
 [!code-vb[System.GC.WaitForPendingFinalizers Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.GC.WaitForPendingFinalizers Example/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>