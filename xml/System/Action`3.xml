<Type Name="Action&lt;T1,T2,T3&gt;" FullName="System.Action&lt;T1,T2,T3&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e587222cee6f86aeb9422ea022d39224a4c90337" /><Meta Name="ms.sourcegitcommit" Value="42a3c35677e9d87eeb503607ae50c9d39827d414" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="12/17/2018" /><Meta Name="ms.locfileid" Value="53498040" /></Metadata><TypeSignature Language="C#" Value="public delegate void Action&lt;in T1,in T2,in T3&gt;(T1 arg1, T2 arg2, T3 arg3);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`3&lt;- T1, - T2, - T3&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`3" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T1, In T2, In T3)(arg1 As T1, arg2 As T2, arg3 As T3)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3&gt;&#xA;public delegate void Action(T1 arg1, T2 arg2, T3 arg3);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T1, 'T2, 'T3&gt; = delegate of 'T1 * 'T2 * 'T3 -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1"><span data-ttu-id="a51d3-101">此委托封装的方法的第一个参数的类型。</span><span class="sxs-lookup"><span data-stu-id="a51d3-101">The type of the first parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="T2"><span data-ttu-id="a51d3-102">此委托封装的方法的第二个参数的类型。</span><span class="sxs-lookup"><span data-stu-id="a51d3-102">The type of the second parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <typeparam name="T3"><span data-ttu-id="a51d3-103">此委托封装的方法的第三个参数的类型。</span><span class="sxs-lookup"><span data-stu-id="a51d3-103">The type of the third parameter of the method that this delegate encapsulates.</span></span></typeparam>
    <param name="arg1"><span data-ttu-id="a51d3-104">此委托封装的方法的第一个参数。</span><span class="sxs-lookup"><span data-stu-id="a51d3-104">The first parameter of the method that this delegate encapsulates.</span></span></param>
    <param name="arg2"><span data-ttu-id="a51d3-105">此委托封装的方法的第二个参数。</span><span class="sxs-lookup"><span data-stu-id="a51d3-105">The second parameter of the method that this delegate encapsulates.</span></span></param>
    <param name="arg3"><span data-ttu-id="a51d3-106">此委托封装的方法的第三个参数。</span><span class="sxs-lookup"><span data-stu-id="a51d3-106">The third parameter of the method that this delegate encapsulates.</span></span></param>
    <summary><span data-ttu-id="a51d3-107">封装一个方法，该方法具有三个参数且不返回值。</span><span class="sxs-lookup"><span data-stu-id="a51d3-107">Encapsulates a method that has three parameters and does not return a value.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a51d3-108">可以使用<xref:System.Action%603>委托作为参数传递方法，而无需显式声明自定义委托。</span><span class="sxs-lookup"><span data-stu-id="a51d3-108">You can use the <xref:System.Action%603> delegate to pass a method as a parameter without explicitly declaring a custom delegate.</span></span> <span data-ttu-id="a51d3-109">封装的方法必须对应于此委托定义的方法签名。</span><span class="sxs-lookup"><span data-stu-id="a51d3-109">The encapsulated method must correspond to the method signature that is defined by this delegate.</span></span> <span data-ttu-id="a51d3-110">这意味着，封装的方法必须具有均按值传递给它的三个参数并且不能返回值。</span><span class="sxs-lookup"><span data-stu-id="a51d3-110">This means that the encapsulated method must have three parameters that are all passed to it by value, and it must not return a value.</span></span> <span data-ttu-id="a51d3-111">(在 C# 中，该方法必须返回`void`。</span><span class="sxs-lookup"><span data-stu-id="a51d3-111">(In C#, the method must return `void`.</span></span> <span data-ttu-id="a51d3-112">在 Visual Basic 中，它必须由定义`Sub`...`End Sub`</span><span class="sxs-lookup"><span data-stu-id="a51d3-112">In Visual Basic, it must be defined by the `Sub`…`End Sub`</span></span> <span data-ttu-id="a51d3-113">构造。</span><span class="sxs-lookup"><span data-stu-id="a51d3-113">construct.</span></span> <span data-ttu-id="a51d3-114">它也可以是返回一个值，则忽略该值的方法。）通常情况下，这种方法用于执行操作。</span><span class="sxs-lookup"><span data-stu-id="a51d3-114">It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a51d3-115">若要引用的方法，有三个参数并返回一个值，请使用泛型<xref:System.Func%604>改为委托。</span><span class="sxs-lookup"><span data-stu-id="a51d3-115">To reference a method that has three parameters and returns a value, use the generic <xref:System.Func%604> delegate instead.</span></span>  
  
 <span data-ttu-id="a51d3-116">当你使用<xref:System.Action%603>委托时，您无需显式定义用于封装具有三个参数的方法的委托。</span><span class="sxs-lookup"><span data-stu-id="a51d3-116">When you use the <xref:System.Action%603> delegate, you do not have to explicitly define a delegate that encapsulates a method with three parameters.</span></span> <span data-ttu-id="a51d3-117">例如，下面的代码显式声明名为的委托`StringCopy`，并将分配到的引用`CopyStrings`给其委托实例的方法。</span><span class="sxs-lookup"><span data-stu-id="a51d3-117">For example, the following code explicitly declares a delegate named `StringCopy` and assigns a reference to the `CopyStrings` method to its delegate instance.</span></span>  
  
 [!code-csharp[System.Action~3#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~3/cs/Delegate.cs#1)]
 [!code-vb[System.Action~3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~3/vb/Delegate.vb#1)]  
  
 <span data-ttu-id="a51d3-118">下面的示例简化了此代码实例化<xref:System.Action%603>而不是显式定义一个新委托，并为其赋值命名的方法的委托。</span><span class="sxs-lookup"><span data-stu-id="a51d3-118">The following example simplifies this code by instantiating the <xref:System.Action%603> delegate instead of explicitly defining a new delegate and assigning a named method to it.</span></span>  
  
 [!code-csharp[System.Action~3#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~3/cs/Action3.cs#2)]
 [!code-vb[System.Action~3#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~3/vb/Action3.vb#2)]  
  
 <span data-ttu-id="a51d3-119">此外可以使用<xref:System.Action%603>委托与匿名方法在 C# 中，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="a51d3-119">You can also use the <xref:System.Action%603> delegate with anonymous methods in C#, as the following example illustrates.</span></span> <span data-ttu-id="a51d3-120">(有关匿名方法的介绍，请参阅[匿名方法](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)。)</span><span class="sxs-lookup"><span data-stu-id="a51d3-120">(For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)</span></span>  
  
 [!code-csharp[System.Action~3#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~3/cs/Anon.cs#3)]  
  
 <span data-ttu-id="a51d3-121">你还可以分配一个 lambda 表达式到<xref:System.Action%603>委托实例，如以下示例所示。</span><span class="sxs-lookup"><span data-stu-id="a51d3-121">You can also assign a lambda expression to an <xref:System.Action%603> delegate instance, as the following example illustrates.</span></span> <span data-ttu-id="a51d3-122">(有关 lambda 表达式的简介，请参阅[Lambda 表达式](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)。)</span><span class="sxs-lookup"><span data-stu-id="a51d3-122">(For an introduction to lambda expressions, see [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)</span></span>  
  
 [!code-csharp[System.Action~3#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~3/cs/Lambda.cs#4)]
 [!code-vb[System.Action~3#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~3/vb/lambda.vb#4)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`4" />
  </Docs>
</Type>