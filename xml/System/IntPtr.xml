<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IntPtr.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac52192def95145771b706a7a498d8ae7af18a5e827.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2192def95145771b706a7a498d8ae7af18a5e827</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.IntPtr">
          <source>A platform-specific type that is used to represent a pointer or a handle.</source>
          <target state="translated">用于表示指针或句柄的平台特定类型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>The <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> type is designed to be an integer whose size is platform-specific.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IntPtr&gt;</ph>类型都旨在成为一个其大小为特定于平台的整数。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>That is, an instance of this type is expected to be 32-bits on 32-bit hardware and operating systems, and 64-bits on 64-bit hardware and operating systems.</source>
          <target state="translated">也就是说，此类型的实例预计会在 32 位硬件和操作系统，32 位和 64 位在 64 位硬件和操作系统上。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>The <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> type can be used by languages that support pointers, and as a common means of referring to data between languages that do and do not support pointers.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IntPtr&gt;</ph>语言支持指针，并作为一种通用引用语言，并不支持指针之间的数据的方式，可以使用类型。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source><ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> objects can also be used to hold handles.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> 对象还可用来保存句柄。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>For example, instances of <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> are used extensively in the <ph id="ph2">&lt;xref:System.IO.FileStream?displayProperty=nameWithType&gt;</ph> class to hold file handles.</source>
          <target state="translated">例如，实例的<ph id="ph1">&lt;xref:System.IntPtr&gt;</ph>用于广泛在<ph id="ph2">&lt;xref:System.IO.FileStream?displayProperty=nameWithType&gt;</ph>类来保存文件句柄。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>The <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> type is CLS-compliant, while the <ph id="ph2">&lt;xref:System.UIntPtr&gt;</ph> type is not.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IntPtr&gt;</ph>类型是符合 CLS 时<ph id="ph2">&lt;xref:System.UIntPtr&gt;</ph>类型不是。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>Only the <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> type is used in the common language runtime.</source>
          <target state="translated">仅<ph id="ph1">&lt;xref:System.IntPtr&gt;</ph>类型在公共语言运行时的用法。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>The <ph id="ph1">&lt;xref:System.UIntPtr&gt;</ph> type is provided mostly to maintain architectural symmetry with the <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph> type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.UIntPtr&gt;</ph>类型主要用于维护与体系结构对称性<ph id="ph2">&lt;xref:System.IntPtr&gt;</ph>类型。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>This type implements the <ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interface.</source>
          <target state="translated">此类型实现<ph id="ph1">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph>接口。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>The following example uses managed pointers to reverse the characters in an array.</source>
          <target state="translated">下面的示例使用托管的指针反向数组中的字符。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>After it initializes a <ph id="ph1">&lt;xref:System.String&gt;</ph> object and gets its length, it does the following:</source>
          <target state="translated">它将初始化后<ph id="ph1">&lt;xref:System.String&gt;</ph>对象，并获取其长度，它执行以下：</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>Calls the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=nameWithType&gt;</ph> method to copy the Unicode string to unmanaged memory as an ANSI (one-byte) character.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=nameWithType&gt;</ph>方法将 Unicode 字符串复制到为 ANSI （单字节） 字符的非托管内存。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>The method returns an <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> object that points to the beginning of the unmanaged string.</source>
          <target state="translated">该方法返回<ph id="ph1">&lt;xref:System.IntPtr&gt;</ph>指向非托管字符串的开头的对象。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>The Visual Basic example uses this pointer directly; in the C++ and C# examples, it is cast to a pointer to a byte.</source>
          <target state="translated">Visual Basic 示例直接调用使用此指针在 c + + 和 C# 示例中，它被强制转换为指向一个字节的指针。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>Calls the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A?displayProperty=nameWithType&gt;</ph> method to allocate the same number of bytes as the unmanaged string occupies.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A?displayProperty=nameWithType&gt;</ph>方法来分配相同的字节数，如占用的非托管的字符串。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>The method returns an <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> object that points to the beginning of the unmanaged block of memory.</source>
          <target state="translated">该方法返回<ph id="ph1">&lt;xref:System.IntPtr&gt;</ph>指向非托管内存块的开头的对象。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>The Visual Basic example uses this pointer directly; in the C++ and C# examples, it is cast to a pointer to a byte.</source>
          <target state="translated">Visual Basic 示例直接调用使用此指针在 c + + 和 C# 示例中，它被强制转换为指向一个字节的指针。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>The Visual Basic example defines a variable named <ph id="ph1">`offset`</ph> that is equal to the length of the ANSI string.</source>
          <target state="translated">Visual Basic 示例定义一个名为变量<ph id="ph1">`offset`</ph>等于 ANSI 字符串的长度。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>It is used to determine the offset into unmanaged memory to which the next charter in the ANSI string is copied.</source>
          <target state="translated">它用于确定的偏移量到下一步特许的 ANSI 字符串中复制到其中的非托管内存。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>Because its starting value is the length of the string, the copy operation will copy a character from the start of the string to the end of the memory block.</source>
          <target state="translated">由于其起始值是字符串的长度，复制操作将复制的字符从字符串的开头到内存块的末尾。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>The C# and C++ examples call the <ph id="ph1">&lt;xref:System.IntPtr.ToPointer%2A&gt;</ph> method to get an unmanaged pointer to the starting address of the string and the unmanaged block of memory, and they add one less than the length of the string to the starting address of the ANSI string.</source>
          <target state="translated">C# 和 c + + 示例调用<ph id="ph1">&lt;xref:System.IntPtr.ToPointer%2A&gt;</ph>方法可用于访问的字符串和非托管的内存块的起始地址的非托管的指针并且也将添加一个小于 ANSI 字符串的起始地址的字符串的长度。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>Because the unmanaged string pointer now points to the end of the string, the copy operation will copy a character from the end of the string to the start of the memory block.</source>
          <target state="translated">因为非托管的字符串指针现在指向字符串的末尾，复制操作会将复制的字符从字符串末尾到内存块的起始位置。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>Uses a loop to copy each character from the string to the unmanaged block of memory.</source>
          <target state="translated">使用循环将每个字符从字符串复制到非托管内存块。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>The Visual Basic example calls the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.ReadByte%28System.IntPtr%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph> method to read the byte (or one-byte character) at a specified offset from the managed pointer to the ANSI string.</source>
          <target state="translated">Visual Basic 示例调用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.ReadByte%28System.IntPtr%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph>方法来为 ANSI 字符串从托管指针指定偏移量读取的字节 （或单字节字符）。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>The offset is incremented with each iteration of the loop.</source>
          <target state="translated">偏移量会循环每次迭代时递增。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>It then calls the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.WriteByte%28System.IntPtr%2CSystem.Int32%2CSystem.Byte%29?displayProperty=nameWithType&gt;</ph> method to write the byte to the memory address defined by the starting address of the unmanaged block of memory plus <ph id="ph2">`offset`</ph>.</source>
          <target state="translated">然后，它调用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.WriteByte%28System.IntPtr%2CSystem.Int32%2CSystem.Byte%29?displayProperty=nameWithType&gt;</ph>方法写入字节的内存地址由托管加上的内存块的起始地址<ph id="ph2">`offset`</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>It then decrements <ph id="ph1">`offset`</ph>.</source>
          <target state="translated">然后，它递减<ph id="ph1">`offset`</ph>。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>The C# and C++ examples perform the copy operation, then decrement the pointer to the address of the next location in the unmanaged ANSI string and increment the pointer to the next address in the unmanaged block.</source>
          <target state="translated">C# 和 c + + 示例执行复制操作，然后递减到非托管 ANSI 字符串中的下一个位置的地址指针并且递增指向非托管的块中的下一步地址的指针。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>All examples call the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=nameWithType&gt;</ph> to convert the unmanaged memory block containing the copied ANSI string to a managed Unicode <ph id="ph2">&lt;xref:System.String&gt;</ph> object.</source>
          <target state="translated">所有的示例调用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=nameWithType&gt;</ph>要转换包含托管 Unicode 的复制的 ANSI 字符串的非托管的内存块<ph id="ph2">&lt;xref:System.String&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>After displaying the original and reversed strings, all examples call the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A&gt;</ph> method to free the memory allocated for the unmanaged ANSI string and the unmanaged block of memory.</source>
          <target state="translated">在显示的原始和反向字符串之后, 所有示例都调用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A&gt;</ph>方法释放非托管的 ANSI 字符串和非托管的内存块分配的内存。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.IntPtr">
          <source>This type is thread safe.</source>
          <target state="translated">此类型是线程安全的。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="T:System.IntPtr">
          <source>Initializes a new instance of <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> 的新实例。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.IntPtr.#ctor(System.Int32)">
          <source>A pointer or handle contained in a 32-bit signed integer.</source>
          <target state="translated">32 位有符号整数中包含的指针或句柄。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.IntPtr.#ctor(System.Int32)">
          <source>Initializes a new instance of <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> using the specified 32-bit pointer or handle.</source>
          <target state="translated">使用指定的 32 位指针或句柄初始化 <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> 的新实例。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.IntPtr.#ctor(System.Int64)">
          <source>A pointer or handle contained in a 64-bit signed integer.</source>
          <target state="translated">64 位有符号整数中包含的指针或句柄。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.IntPtr.#ctor(System.Int64)">
          <source>Initializes a new instance of <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> using the specified 64-bit pointer.</source>
          <target state="translated">使用指定的 64 位指针初始化 <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> 的新实例。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.#ctor(System.Int64)">
          <source>An exception is only thrown if the value of <ph id="ph1">`value`</ph> requires more bits than the current platform supports.</source>
          <target state="translated">如果时才会引发异常的值<ph id="ph1">`value`</ph>需要比当前平台所支持的更多比特。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.IntPtr.#ctor(System.Int64)">
          <source>On a 32-bit platform, <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is too large or too small to represent as an <ph id="ph2">&lt;see cref="T:System.IntPtr" /&gt;</ph>.</source>
          <target state="translated">在 32 位的平台上，<ph id="ph1">&lt;paramref name="value" /&gt;</ph> 太大或太小，无法表示为 <ph id="ph2">&lt;see cref="T:System.IntPtr" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.IntPtr.#ctor(System.Void*)">
          <source>A pointer to an unspecified type.</source>
          <target state="translated">指向未指定类型的指针。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.IntPtr.#ctor(System.Void*)">
          <source>Initializes a new instance of <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> using the specified pointer to an unspecified type.</source>
          <target state="translated">使用指定的指向未指定类型的指针初始化 <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> 的新实例。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.#ctor(System.Void*)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.#ctor(System.Void*)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.IntPtr.Add(System.IntPtr,System.Int32)">
          <source>The pointer to add the offset to.</source>
          <target state="translated">要为其增加偏移量的指针。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.IntPtr.Add(System.IntPtr,System.Int32)">
          <source>The offset to add.</source>
          <target state="translated">要增加的偏移量。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.IntPtr.Add(System.IntPtr,System.Int32)">
          <source>Adds an offset to the value of a pointer.</source>
          <target state="translated">为指针值添加偏移量。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.IntPtr.Add(System.IntPtr,System.Int32)">
          <source>A new pointer that reflects the addition of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> to <ph id="ph2">&lt;paramref name="pointer" /&gt;</ph>.</source>
          <target state="translated">反映为 <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 增加 <ph id="ph2">&lt;paramref name="pointer" /&gt;</ph> 的新指针。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.Add(System.IntPtr,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IntPtr.Add%2A&gt;</ph> method does not throw an exception if the result is too large to represent as a pointer on the specified platform.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IntPtr.Add%2A&gt;</ph>方法不会引发异常，如果结果过大而无法表示为指定的平台上的指针。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.Add(System.IntPtr,System.Int32)">
          <source>Instead, the addition operation is performed in an unchecked context.</source>
          <target state="translated">相反，在未选中的上下文执行加法运算。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.Add(System.IntPtr,System.Int32)">
          <source>Languages that do not support operator overloading or custom operators can use this method to add an offset to the value of a pointer.</source>
          <target state="translated">不支持运算符重载或自定义运算符的语言可以使用此方法的指针值添加偏移量。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.Add(System.IntPtr,System.Int32)">
          <source>The following example instantiates an <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> object that points to the beginning of a ten-element array, and then calls the <ph id="ph2">&lt;xref:System.IntPtr.Add%2A&gt;</ph> method to iterate the elements in the array.</source>
          <target state="translated">下面的示例实例化<ph id="ph1">&lt;xref:System.IntPtr&gt;</ph>对象指向一个 10 个元素的数组，开头，然后调用<ph id="ph2">&lt;xref:System.IntPtr.Add%2A&gt;</ph>方法来循环访问数组中的元素。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.IntPtr.Equals(System.Object)">
          <source>An object to compare with this instance or <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">要与此示例比较的对象，或 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.IntPtr.Equals(System.Object)">
          <source>Returns a value indicating whether this instance is equal to a specified object.</source>
          <target state="translated">返回一个值，该值指示此实例是否等于指定的对象。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.IntPtr.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> is an instance of <ph id="ph3">&lt;see cref="T:System.IntPtr" /&gt;</ph> and equals the value of this instance; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 是 <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> 的实例并且等于此实例的值，则为 <ph id="ph3">&lt;see cref="T:System.IntPtr" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.IntPtr.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">返回此实例的哈希代码。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.IntPtr.GetHashCode">
          <source>A 32-bit signed integer hash code.</source>
          <target state="translated">32 位有符号整数哈希代码。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)">
          <source>The pointer to add the offset to.</source>
          <target state="translated">要为其增加偏移量的指针。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)">
          <source>The offset to add.</source>
          <target state="translated">要增加的偏移量。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)">
          <source>Adds an offset to the value of a pointer.</source>
          <target state="translated">为指针值添加偏移量。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)">
          <source>A new pointer that reflects the addition of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> to <ph id="ph2">&lt;paramref name="pointer" /&gt;</ph>.</source>
          <target state="translated">反映为 <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 增加 <ph id="ph2">&lt;paramref name="pointer" /&gt;</ph> 的新指针。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IntPtr.op_Addition%2A&gt;</ph> method defines the addition operation for <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IntPtr.op_Addition%2A&gt;</ph>方法定义的加法运算<ph id="ph2">&lt;xref:System.IntPtr&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)">
          <source>It enables code such as the following.</source>
          <target state="translated">它使代码如下所示。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)">
          <source>Languages that do not support custom operators can call the <ph id="ph1">&lt;xref:System.IntPtr.Add%2A&gt;</ph> method instead.</source>
          <target state="translated">不支持自定义运算符的语言可以调用<ph id="ph1">&lt;xref:System.IntPtr.Add%2A&gt;</ph>方法相反。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)">
          <source>The addition operation does not throw an exception if the result is too large to represent as a pointer on the specified platform.</source>
          <target state="translated">如果结果过大而无法表示为指定的平台上的指针，加法运算不引发异常。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)">
          <source>Instead, it is performed in an unchecked context.</source>
          <target state="translated">相反，它是在未选中的上下文中执行。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.IntPtr.Add%28System.IntPtr%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph></source>
          <target state="translated">此运算符的等效方法是 <ph id="ph1">&lt;xref:System.IntPtr.Add%28System.IntPtr%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph></target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)">
          <source>The first pointer or handle to compare.</source>
          <target state="translated">要比较的第一个指针或句柄。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)">
          <source>The second pointer or handle to compare.</source>
          <target state="translated">要比较的第二个指针或句柄。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)">
          <source>Determines whether two specified instances of <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> are equal.</source>
          <target state="translated">确定 <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> 的两个指定的实例是否相等。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value1" /&gt;</ph> equals <ph id="ph3">&lt;paramref name="value2" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="value1" /&gt;</ph> 等于 <ph id="ph3">&lt;paramref name="value2" /&gt;</ph>，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.IntPtr.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph></source>
          <target state="translated">此运算符的等效方法是 <ph id="ph1">&lt;xref:System.IntPtr.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph></target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="T:System.IntPtr">
          <source>Converts a specified data type to an <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> value, or an <ph id="ph2">&lt;see cref="T:System.IntPtr" /&gt;</ph> value to a specified data type.</source>
          <target state="translated">将指定的数据类型转换为 <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> 值，或将 <ph id="ph2">&lt;see cref="T:System.IntPtr" /&gt;</ph> 值转换为指定的数据类型。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.Int32)~System.IntPtr">
          <source>A 32-bit signed integer.</source>
          <target state="translated">32 位带符号整数。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.Int32)~System.IntPtr">
          <source>Converts the value of a 32-bit signed integer to an <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>.</source>
          <target state="translated">将 32 位有符号整数的值转换为 <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.Int32)~System.IntPtr">
          <source>A new instance of <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> initialized to <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">初始化为 <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> 的 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> 新实例。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.Int64)~System.IntPtr">
          <source>A 64-bit signed integer.</source>
          <target state="translated">64 位带符号整数。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.Int64)~System.IntPtr">
          <source>Converts the value of a 64-bit signed integer to an <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>.</source>
          <target state="translated">将 64 位有符号整数值转换为 <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.Int64)~System.IntPtr">
          <source>A new instance of <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> initialized to <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">初始化为 <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> 的 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> 新实例。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.Int64)~System.IntPtr">
          <source>On a 32-bit platform, <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is too large to represent as an <ph id="ph2">&lt;see cref="T:System.IntPtr" /&gt;</ph>.</source>
          <target state="translated">在 32 位的平台上，<ph id="ph1">&lt;paramref name="value" /&gt;</ph> 太大，无法表示为一个 <ph id="ph2">&lt;see cref="T:System.IntPtr" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int32">
          <source>The pointer or handle to convert.</source>
          <target state="translated">要转换的指针或句柄。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int32">
          <source>Converts the value of the specified <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> to a 32-bit signed integer.</source>
          <target state="translated">将指定的 <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> 的值转换为 32 位有符号整数。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int32">
          <source>The contents of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 的内容。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int32">
          <source>An exception is only thrown if the value of <ph id="ph1">`value`</ph> requires more bits than the current platform supports.</source>
          <target state="translated">如果时才会引发异常的值<ph id="ph1">`value`</ph>需要比当前平台所支持的更多比特。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int32">
          <source>On a 64-bit platform, the value of <ph id="ph1">&lt;paramref name="value" /&gt;</ph> is too large to represent as a 32-bit signed integer.</source>
          <target state="translated">在 64 位平台上，<ph id="ph1">&lt;paramref name="value" /&gt;</ph> 的值太大，无法表示为一个 32 位有符号整数。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int64">
          <source>The pointer or handle to convert.</source>
          <target state="translated">要转换的指针或句柄。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int64">
          <source>Converts the value of the specified <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> to a 64-bit signed integer.</source>
          <target state="translated">将指定的 <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> 的值转换为 64 位有符号整数。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int64">
          <source>The contents of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 的内容。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Void*">
          <source>The pointer or handle to convert.</source>
          <target state="translated">要转换的指针或句柄。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Void*">
          <source>Converts the value of the specified <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> to a pointer to an unspecified type.</source>
          <target state="translated">将指定的 <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> 的值转换为指向未指定类型的指针。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Void*">
          <source>This API is not CLS-compliant.</source>
          <target state="translated">此 API 不兼容 CLS。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Void*">
          <source>The contents of <ph id="ph1">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="value" /&gt;</ph> 的内容。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.Void*)~System.IntPtr">
          <source>A pointer to an unspecified type.</source>
          <target state="translated">指向未指定类型的指针。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.Void*)~System.IntPtr">
          <source>Converts the specified pointer to an unspecified type to an <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>.</source>
          <target state="translated">将指向未指定类型的指定指针转换为 <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.Void*)~System.IntPtr">
          <source>This API is not CLS-compliant.</source>
          <target state="translated">此 API 不兼容 CLS。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Explicit(System.Void*)~System.IntPtr">
          <source>A new instance of <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> initialized to <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">初始化为 <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> 的 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> 新实例。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Explicit(System.Void*)~System.IntPtr">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Explicit(System.Void*)~System.IntPtr">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)">
          <source>The first pointer or handle to compare.</source>
          <target state="translated">要比较的第一个指针或句柄。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)">
          <source>The second pointer or handle to compare.</source>
          <target state="translated">要比较的第二个指针或句柄。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)">
          <source>Determines whether two specified instances of <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> are not equal.</source>
          <target state="translated">确定 <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> 的两个指定的实例是否不等。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value1" /&gt;</ph> does not equal <ph id="ph3">&lt;paramref name="value2" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph2">&lt;paramref name="value1" /&gt;</ph> 不等于 <ph id="ph3">&lt;paramref name="value2" /&gt;</ph>，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.IntPtr.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph></source>
          <target state="translated">此运算符的等效方法是 <ph id="ph1">&lt;xref:System.IntPtr.Equals%28System.Object%29?displayProperty=nameWithType&gt;</ph></target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)">
          <source>The pointer to subtract the offset from.</source>
          <target state="translated">要从中减去偏移量的指针。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)">
          <source>The offset to subtract.</source>
          <target state="translated">要减去的偏移量。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)">
          <source>Subtracts an offset from the value of a pointer.</source>
          <target state="translated">从指针值中减去偏移量。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)">
          <source>A new pointer that reflects the subtraction of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> from <ph id="ph2">&lt;paramref name="pointer" /&gt;</ph>.</source>
          <target state="translated">反映从 <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 中减去 <ph id="ph2">&lt;paramref name="pointer" /&gt;</ph> 的新指针。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IntPtr.op_Subtraction%2A&gt;</ph> method defines the subtraction operation for <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IntPtr.op_Subtraction%2A&gt;</ph>方法定义的减法运算<ph id="ph2">&lt;xref:System.IntPtr&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)">
          <source>It enables code such as the following.</source>
          <target state="translated">它使代码如下所示。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)">
          <source>Languages that do not support custom operators can call the <ph id="ph1">&lt;xref:System.IntPtr.Subtract%2A&gt;</ph> method instead.</source>
          <target state="translated">不支持自定义运算符的语言可以调用<ph id="ph1">&lt;xref:System.IntPtr.Subtract%2A&gt;</ph>方法相反。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)">
          <source>The subtraction operation does not throw an exception if the result is too small to represent as a pointer on the specified platform.</source>
          <target state="translated">减法运算不引发异常，如果结果为太小而无法表示为指定的平台上的指针。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)">
          <source>Instead, it is performed in an unchecked context.</source>
          <target state="translated">相反，它是在未选中的上下文中执行。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.IntPtr.Subtract%28System.IntPtr%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph></source>
          <target state="translated">此运算符的等效方法是 <ph id="ph1">&lt;xref:System.IntPtr.Subtract%28System.IntPtr%2CSystem.Int32%29?displayProperty=nameWithType&gt;</ph></target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="P:System.IntPtr.Size">
          <source>Gets the size of this instance.</source>
          <target state="translated">获取此实例的大小。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IntPtr.Size">
          <source>The size of a pointer or handle in this process, measured in bytes.</source>
          <target state="translated">此进程中的指针或句柄的大小（以字节为单位）。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IntPtr.Size">
          <source>The value of this property is 4 in a 32-bit process, and 8 in a 64-bit process.</source>
          <target state="translated">此属性的值在 32 位进程中为 4，在 64 位进程中为 8。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.IntPtr.Size">
          <source>You can define the process type by setting the <ph id="ph1">&lt;see langword="/platform" /&gt;</ph> switch when you compile your code with the C# and Visual Basic compilers.</source>
          <target state="translated">通过 C# 和 Visual Basic 编译器编译代码时，可以通过设置 <ph id="ph1">&lt;see langword="/platform" /&gt;</ph> 开关定义该进程类型。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.IntPtr.Subtract(System.IntPtr,System.Int32)">
          <source>The pointer to subtract the offset from.</source>
          <target state="translated">要从中减去偏移量的指针。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.IntPtr.Subtract(System.IntPtr,System.Int32)">
          <source>The offset to subtract.</source>
          <target state="translated">要减去的偏移量。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.IntPtr.Subtract(System.IntPtr,System.Int32)">
          <source>Subtracts an offset from the value of a pointer.</source>
          <target state="translated">从指针值中减去偏移量。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" uid="M:System.IntPtr.Subtract(System.IntPtr,System.Int32)">
          <source>A new pointer that reflects the subtraction of <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> from <ph id="ph2">&lt;paramref name="pointer" /&gt;</ph>.</source>
          <target state="translated">反映从 <ph id="ph1">&lt;paramref name="offset" /&gt;</ph> 中减去 <ph id="ph2">&lt;paramref name="pointer" /&gt;</ph> 的新指针。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.Subtract(System.IntPtr,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.IntPtr.Subtract%2A&gt;</ph> method does not throw an exception if the result is too small to represent as a pointer on the specified platform.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.IntPtr.Subtract%2A&gt;</ph>方法不会引发异常，如果结果为太小而无法表示为指定的平台上的指针。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.Subtract(System.IntPtr,System.Int32)">
          <source>Instead, the subtraction operation is performed in an unchecked context.</source>
          <target state="translated">相反，在未选中的上下文执行减法运算。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.Subtract(System.IntPtr,System.Int32)">
          <source>Languages that do not support operator overloading or custom operators can use this method to subtract an offset from the value of a pointer.</source>
          <target state="translated">不支持运算符重载或自定义运算符的语言可以使用此方法要减去的偏移量的指针的值。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.Subtract(System.IntPtr,System.Int32)">
          <source>The following example instantiates an <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> object that points to the end of a ten-element array, and then calls the <ph id="ph2">&lt;xref:System.IntPtr.Subtract%2A&gt;</ph> method to iterate the elements in the array in reverse order.</source>
          <target state="translated">下面的示例实例化<ph id="ph1">&lt;xref:System.IntPtr&gt;</ph>对象，指向数组末尾之间的 10 个元素，然后呼叫<ph id="ph2">&lt;xref:System.IntPtr.Subtract%2A&gt;</ph>方法以按逆序循环访问数组中的元素。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.IntPtr.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object to populate with data.</source>
          <target state="translated">要填充数据的 <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.IntPtr.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The destination for this serialization.</source>
          <target state="translated">此序列化的目标。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.IntPtr.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>(This parameter is not used; specify <ph id="ph1">&lt;see langword="null" /&gt;</ph>.)</source>
          <target state="translated">（未使用此参数；指定 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。）</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.IntPtr.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Populates a <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object with the data needed to serialize the current <ph id="ph2">&lt;see cref="T:System.IntPtr" /&gt;</ph> object.</source>
          <target state="translated">使用序列化当前的 <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> 对象所需的所有数据填充 <ph id="ph2">&lt;see cref="T:System.IntPtr" /&gt;</ph> 对象。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This method populates the <ph id="ph1">`info`</ph> parameter with the value of the current <ph id="ph2">&lt;xref:System.IntPtr&gt;</ph> object.</source>
          <target state="translated">此方法填充<ph id="ph1">`info`</ph>参数，并且当前值<ph id="ph2">&lt;xref:System.IntPtr&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.IntPtr.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source><ph id="ph1">&lt;paramref name="info" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="info" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>requires full trust for the immediate caller.</source>
          <target state="translated">需要完全信任直接调用方。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This member cannot be used by partially trusted or transparent code.</source>
          <target state="translated">此成员不能由部分受信任或不透明的代码。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.IntPtr.ToInt32">
          <source>Converts the value of this instance to a 32-bit signed integer.</source>
          <target state="translated">将此实例的值转换为 32 位有符号整数。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.IntPtr.ToInt32">
          <source>A 32-bit signed integer equal to the value of this instance.</source>
          <target state="translated">与此实例的值相等的 32 位有符号整数。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.IntPtr.ToInt32">
          <source>On a 64-bit platform, the value of this instance is too large or too small to represent as a 32-bit signed integer.</source>
          <target state="translated">在 64 位平台上，此实例的值太大或太小，无法表示为一个 32 位有符号的整数。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.IntPtr.ToInt64">
          <source>Converts the value of this instance to a 64-bit signed integer.</source>
          <target state="translated">将此实例的值转换为 64 位有符号整数。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.IntPtr.ToInt64">
          <source>A 64-bit signed integer equal to the value of this instance.</source>
          <target state="translated">与此实例的值相等的 64 位有符号整数。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.IntPtr.ToPointer">
          <source>Converts the value of this instance to a pointer to an unspecified type.</source>
          <target state="translated">将此实例的值转换为指向未指定类型的指针。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.IntPtr.ToPointer">
          <source>A pointer to <ph id="ph1">&lt;see cref="T:System.Void" /&gt;</ph>; that is, a pointer to memory containing data of an unspecified type.</source>
          <target state="translated">指向 <ph id="ph1">&lt;see cref="T:System.Void" /&gt;</ph> 的指针，即是说，该指针所指向的内存包含有未指定类型的数据。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.ToPointer">
          <source>The following example uses managed pointers to reverse the characters in an array.</source>
          <target state="translated">下面的示例使用托管的指针反向数组中的字符。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.ToPointer">
          <source>After it initializes a <ph id="ph1">&lt;xref:System.String&gt;</ph> object and gets its length, it does the following:</source>
          <target state="translated">它将初始化后<ph id="ph1">&lt;xref:System.String&gt;</ph>对象，并获取其长度，它执行以下：</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.ToPointer">
          <source>Calls the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=nameWithType&gt;</ph> method to copy the Unicode string to unmanaged memory as ANSI (one-byte) characters.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=nameWithType&gt;</ph>方法将 Unicode 字符串复制到非托管内存中，为 ANSI （单字节） 字符。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.ToPointer">
          <source>The method returns an <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> object that points to the beginning of the unmanaged string.</source>
          <target state="translated">该方法返回<ph id="ph1">&lt;xref:System.IntPtr&gt;</ph>指向非托管字符串的开头的对象。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.ToPointer">
          <source>Calls the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A?displayProperty=nameWithType&gt;</ph> method to allocate the same number of bytes as the unmanaged string occupies.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A?displayProperty=nameWithType&gt;</ph>方法来分配相同的字节数，如占用的非托管的字符串。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.ToPointer">
          <source>The method returns an <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> object that points to the beginning of the unmanaged block of memory.</source>
          <target state="translated">该方法返回<ph id="ph1">&lt;xref:System.IntPtr&gt;</ph>指向非托管内存块的开头的对象。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.ToPointer">
          <source>Calls the <ph id="ph1">&lt;xref:System.IntPtr.ToPointer%2A&gt;</ph> method to get an unmanaged pointer to the starting address of the string and the unmanaged block of memory, and adds one less than the length of the string to the starting address of the ANSI string.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.IntPtr.ToPointer%2A&gt;</ph>方法可用于访问的字符串和非托管的内存块的起始地址的非托管的指针，并将添加一个小于 ANSI 字符串的起始地址的字符串的长度。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.ToPointer">
          <source>Because the unmanaged string pointer now points to the end of the string, the copy operation will copy a character from the end of the string to the start of the memory block.</source>
          <target state="translated">因为非托管的字符串指针现在指向字符串的末尾，复制操作会将复制的字符从字符串末尾到内存块的起始位置。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.ToPointer">
          <source>Uses a loop to copy each character from the string to the unmanaged block of memory.</source>
          <target state="translated">使用循环将每个字符从字符串复制到非托管内存块。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.ToPointer">
          <source>After each copy operation, it decrements the pointer to the address of the next location in the unmanaged ANSI string and increments the pointer to the next address in the unmanaged block.</source>
          <target state="translated">操作完成后每个副本，它递减指向非托管 ANSI 字符串中的下一个位置的地址的指针，并增加指向非托管的块中的下一步地址的指针。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.ToPointer">
          <source>Calls the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=nameWithType&gt;</ph> to convert the unmanaged memory block containing the copied ANSI string to a managed Unicode <ph id="ph2">&lt;xref:System.String&gt;</ph> object.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=nameWithType&gt;</ph>要转换包含托管 Unicode 的复制的 ANSI 字符串的非托管的内存块<ph id="ph2">&lt;xref:System.String&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.ToPointer">
          <source>After displaying the original and reversed strings, calls the <ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A?displayProperty=nameWithType&gt;</ph> method to free the memory allocated for the unmanaged ANSI string and the unmanaged block of memory.</source>
          <target state="translated">后显示原始和反向字符串，调用<ph id="ph1">&lt;xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A?displayProperty=nameWithType&gt;</ph>方法释放非托管的 ANSI 字符串和非托管的内存块分配的内存。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="T:System.IntPtr">
          <source>Converts the numeric value of the current <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> object to its equivalent string representation.</source>
          <target state="translated">将当前 <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> 对象的数值转换为其等效字符串表示形式。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.IntPtr.ToString">
          <source>Converts the numeric value of the current <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> object to its equivalent string representation.</source>
          <target state="translated">将当前 <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> 对象的数值转换为其等效字符串表示形式。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.IntPtr.ToString">
          <source>The string representation of the value of this instance.</source>
          <target state="translated">此实例的值的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.ToString">
          <source>If the value of the <ph id="ph1">&lt;xref:System.IntPtr.Size%2A&gt;</ph> property for this instance is 4, then this method is equivalent to <ph id="ph2">&lt;xref:System.Int32.ToString%2A?displayProperty=nameWithType&gt;</ph>; otherwise, this method is equivalent to <ph id="ph3">&lt;xref:System.Int64.ToString%2A?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">如果值<ph id="ph1">&lt;xref:System.IntPtr.Size%2A&gt;</ph>此实例的属性是 4，则此方法等效于<ph id="ph2">&lt;xref:System.Int32.ToString%2A?displayProperty=nameWithType&gt;</ph>; 否则为此方法相当于<ph id="ph3">&lt;xref:System.Int64.ToString%2A?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.IntPtr.ToString(System.String)">
          <source>A format specification that governs how the current <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> object is converted.</source>
          <target state="translated">控制当前 <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> 对象转换方式的格式规范。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.IntPtr.ToString(System.String)">
          <source>Converts the numeric value of the current <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> object to its equivalent string representation.</source>
          <target state="translated">将当前 <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> 对象的数值转换为其等效字符串表示形式。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.IntPtr.ToString(System.String)">
          <source>The string representation of the value of the current <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> object.</source>
          <target state="translated">当前 <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> 对象的值的字符串表示形式。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.ToString(System.String)">
          <source>If the <ph id="ph1">`format`</ph> parameter is <ph id="ph2">`null`</ph> or an empty string (""), the return value is formatted with the general format specifier ("G").</source>
          <target state="translated">如果<ph id="ph1">`format`</ph>参数是<ph id="ph2">`null`</ph>或空字符串 ("")，返回值的格式与常规格式说明符 ("G")。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.ToString(System.String)">
          <source>For more information about numeric format specifiers, see the <bpt id="p1">[</bpt>Standard Numeric Format Strings<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> topic.</source>
          <target state="translated">有关数字格式说明符的详细信息，请参阅<bpt id="p1">[</bpt>标准数字格式字符串<ept id="p1">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept>主题。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.IntPtr.ToString(System.String)">
          <source>The return value is formatted using the invariant culture.</source>
          <target state="translated">返回值的格式使用固定区域性。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="F:System.IntPtr.Zero">
          <source>A read-only field that represents a pointer or handle that has been initialized to zero.</source>
          <target state="translated">表示已初始化为零的指针或句柄的只读字段。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IntPtr.Zero">
          <source>The value of this field is not equivalent to <ph id="ph1">`null`</ph>.</source>
          <target state="translated">此字段的值不等于<ph id="ph1">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IntPtr.Zero">
          <source>Use this field to efficiently determine whether an instance of <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph> has been set to a value other than zero.</source>
          <target state="translated">使用此字段可有效地确定实例是否<ph id="ph1">&lt;xref:System.IntPtr&gt;</ph>已设置为非零值。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IntPtr.Zero">
          <source>For example, assume the variable, ip, is an instance of <ph id="ph1">&lt;xref:System.IntPtr&gt;</ph>.</source>
          <target state="translated">例如，假定变量，ip，是的一个实例<ph id="ph1">&lt;xref:System.IntPtr&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IntPtr.Zero">
          <source>You can determine if it has been set by comparing it to the value returned by a constructor, for example: " <ph id="ph1">`if ip != new IntPtr(0)...`</ph> ".</source>
          <target state="translated">你可以确定是否它已设置将它与由构造函数，例如返回的值进行比较:" <ph id="ph1">`if ip != new IntPtr(0)...`</ph> "。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IntPtr.Zero">
          <source>However, invoking a constructor to get an unintialized pointer is inefficient.</source>
          <target state="translated">但是，调用构造函数来获取被初始化的指针的效率低。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IntPtr.Zero">
          <source>It is better to code either " <ph id="ph1">`if ip != IntPtr.Zero...`</ph> ", or " <ph id="ph2">`if !IntPtr.Zero.Equals(ip)...`</ph> ".</source>
          <target state="translated">它是更好的做法代码" <ph id="ph1">`if ip != IntPtr.Zero...`</ph> "，或" <ph id="ph2">`if !IntPtr.Zero.Equals(ip)...`</ph> "。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IntPtr.Zero">
          <source>When calling the Windows API from managed code, you can pass <ph id="ph1">&lt;xref:System.IntPtr.Zero?displayProperty=nameWithType&gt;</ph> instead of <ph id="ph2">`null`</ph> if an argument is expected to be either a pointer or a <ph id="ph3">`null`</ph>.</source>
          <target state="translated">当从托管代码调用 Windows API，您可以传递<ph id="ph1">&lt;xref:System.IntPtr.Zero?displayProperty=nameWithType&gt;</ph>而不是<ph id="ph2">`null`</ph>如果自变量应为任一的指针或<ph id="ph3">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IntPtr.Zero">
          <source>For example, the following call to the Windows <ph id="ph1">`CreateFile`</ph> function supplies <ph id="ph2">&lt;xref:System.IntPtr.Zero?displayProperty=nameWithType&gt;</ph> for the <ph id="ph3">`pSecurityAttributes`</ph> and <ph id="ph4">`hTemplateFile`</ph> argument values.</source>
          <target state="translated">例如，以下调用 Windows<ph id="ph1">`CreateFile`</ph>函数提供<ph id="ph2">&lt;xref:System.IntPtr.Zero?displayProperty=nameWithType&gt;</ph>为<ph id="ph3">`pSecurityAttributes`</ph>和<ph id="ph4">`hTemplateFile`</ph>自变量值。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IntPtr.Zero">
          <source>Although <ph id="ph1">&lt;xref:System.IntPtr.Zero&gt;</ph> is equivalent to <ph id="ph2">`null`</ph> for Windows API functions with parameters or return values that can be either pointers or <ph id="ph3">`null`</ph>, <ph id="ph4">&lt;xref:System.IntPtr.Zero&gt;</ph> is not equivalent to <ph id="ph5">`null`</ph>.</source>
          <target state="translated">尽管<ph id="ph1">&lt;xref:System.IntPtr.Zero&gt;</ph>等效于<ph id="ph2">`null`</ph>针对具有参数或返回值可以是指针的 Windows API 函数或<ph id="ph3">`null`</ph>，<ph id="ph4">&lt;xref:System.IntPtr.Zero&gt;</ph>不等效于<ph id="ph5">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IntPtr.Zero">
          <source>Passing <ph id="ph1">`null`</ph> to the <ph id="ph2">`IntPtr.Zero.Equals`</ph> method always returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">传递<ph id="ph1">`null`</ph>到<ph id="ph2">`IntPtr.Zero.Equals`</ph>方法始终返回<ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IntPtr.Zero">
          <source>You can also test for a <ph id="ph1">`null`</ph> return value from Windows API function calls that return either a pointer or a <ph id="ph2">`null`</ph> by comparing the returned value with <ph id="ph3">&lt;xref:System.IntPtr.Zero?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">你还可以测试<ph id="ph1">`null`</ph>与返回任一指针的 Windows API 函数调用返回值或<ph id="ph2">`null`</ph>通过比较的返回的值与<ph id="ph3">&lt;xref:System.IntPtr.Zero?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IntPtr.Zero">
          <source>For example, the call to the <ph id="ph1">`GetWindow`</ph> function in the following example tries to retrieve the handle of a non-existent window.</source>
          <target state="translated">例如，调用<ph id="ph1">`GetWindow`</ph>函数在下面的示例尝试检索不存在窗口的句柄。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="F:System.IntPtr.Zero">
          <source>If it were called from unmanaged code, the function would return <ph id="ph1">`null`</ph>, but when it is called from managed code, it returns <ph id="ph2">&lt;xref:System.IntPtr.Zero?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">如果它调用从非托管代码，该函数将返回<ph id="ph1">`null`</ph>，但当从托管代码调用时，它将返回<ph id="ph2">&lt;xref:System.IntPtr.Zero?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>