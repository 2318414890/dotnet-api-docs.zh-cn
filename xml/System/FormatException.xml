<Type Name="FormatException" FullName="System.FormatException">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7fca632d397131d7e1748084024870bc198f36ef" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39870719" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class FormatException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit FormatException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.FormatException" />
  <TypeSignature Language="VB.NET" Value="Public Class FormatException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class FormatException : SystemException" />
  <TypeSignature Language="F#" Value="type FormatException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>当自变量的格式无效或[复合格式字符串](~/docs/standard/base-types/composite-formatting.md)的格式不标准时引发的异常。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个<xref:System.FormatException>出于以下原因之一可能会引发异常：  
  
-   在将字符串转换为其他数据类型的方法调用中，该字符串不符合所需模式。 这通常发生时调用的一些方法<xref:System.Convert>类和`Parse`和`ParseExact`某些类型的方法。  
  
     在大多数情况下，尤其是当您要转换的字符串是由用户输入或从文件中读取时，才应使用`try/catch`阻止并处理<xref:System.FormatException>异常，如果转换失败。 也可以通过调用替换对转换方法的调用`TryParse`或`TryParseExact`方法，如果存在。 但是，<xref:System.FormatException>时想要分析的预定义的或硬编码字符串，将引发的异常指示程序错误。 在这种情况下，您应更正的错误而不处理异常。  
  
     字符串转换为以下类型中<xref:System>命名空间可能会引发<xref:System.FormatException>异常：  
  
    -   <xref:System.Boolean>。 <xref:System.Boolean.Parse%28System.String%29?displayProperty=nameWithType>和<xref:System.Convert.ToBoolean%28System.String%29?displayProperty=nameWithType>方法需要字符串转换为"true"是"True"、"False"false"。 任何其他值将引发<xref:System.FormatException>异常。  
  
    -   <xref:System.DateTime> 和 <xref:System.DateTimeOffset>。 根据特定区域性的格式设置约定解释日期和时间的所有数据： 当前线程区域性 （或，在某些情况下，当前应用程序域区域性），固定区域性或指定的区域性。 当您调用<xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>并<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>方法，还必须符合日期和时间数据*完全*指定一个或多个模式[标准格式字符串](~/docs/standard/base-types/standard-date-and-time-format-strings.md)或[自定义格式字符串](~/docs/standard/base-types/custom-date-and-time-format-strings.md)作为方法调用中的参数提供的。 如果它不符合预期的特定于区域性的模式，<xref:System.FormatException>引发异常。 这意味着，日期和时间数据保存在一个系统中特定于区域性的格式可能不成功分析在另一个系统。  
  
         有关分析日期和时间的详细信息，请参阅[分析日期和时间字符串](~/docs/standard/base-types/parsing-datetime.md)和引发异常的方法的文档。  
  
    -   **Guid。** GUID 的字符串表示形式必须包含 32 个十六进制数字 (0-F)，并且必须是输出的五种格式之一<xref:System.Guid.ToString%2A?displayProperty=nameWithType>方法。 有关更多信息，请参见 <xref:System.Guid.Parse%2A?displayProperty=nameWithType> 方法。  
  
    -   **数值类型，包括所有有符号的整数、 无符号的整数和浮点类型。** 要分析的字符串必须包含拉丁数字 0-9。 可能还允许正号或负号、 十进制分隔符、 组分隔符和货币符号。 尝试分析一个字符串，包含任何其他字符始终会引发<xref:System.FormatException>异常。  
  
         根据特定区域性的格式设置约定解释所有数字字符串： 当前线程区域性 （或，在某些情况下，当前应用程序域区域性），固定区域性或指定的区域性。 因此，通过使用一个区域性的约定分析数字字符串可能会失败时使用的另一个约定。  
  
         有关分析数字字符串的详细信息，请参阅[分析数字字符串](~/docs/standard/base-types/parsing-numeric.md)和引发异常的特定方法的文档。  
  
    -   **时间间隔。** 要分析的字符串必须以固定的不区分区域性的格式或定义由当前线程区域性 （或，在某些情况下，当前应用程序域区域性），以区分区域性的格式固定的区域性或指定的区域性。 如果字符串不是适当的格式，或者，如果在最小值、 天、 小时、 分钟的时间间隔的组件不存在，分析方法会引发<xref:System.FormatException>异常。 有关详细信息，请参阅的文档<xref:System.TimeSpan>分析方法引发异常。  
  
-   一个类型实现<xref:System.IFormattable>接口，它支持格式字符串的定义如何将对象转换为其字符串表示形式，并且使用了无效格式字符串。 这是最常见的格式设置操作。 在以下示例中，"Q"标准格式字符串用于复合格式字符串中设置数字的格式。 但是，"Q"不是有效[标准格式字符串](~/docs/standard/base-types/standard-numeric-format-strings.md)。  
  
     [!code-csharp[System.FormatException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/iformattable1.cs#7)]
     [!code-vb[System.FormatException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/iformattable1.vb#7)]  
  
     此异常会从一个编码错误。 若要更正此错误，请删除格式字符串或替换一个有效。 下面的示例将替换"C"（货币） 格式字符串为无效格式字符串来更正错误。  
  
     [!code-csharp[System.FormatException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/iformattable2.cs#8)]
     [!code-vb[System.FormatException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/iformattable2.vb#8)]  
  
     一个<xref:System.FormatException>也可由分析方法，例如引发异常<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType>和<xref:System.Guid.ParseExact%2A?displayProperty=nameWithType>，需要要进行分析，以完全符合格式字符串指定的模式的字符串。 以下示例中，在 GUID 的字符串表示形式应为与"G"标准格式字符串指定的模式。 但是，<xref:System.Guid>结构的实现<xref:System.IFormattable>不支持"G"格式字符串。  
  
     [!code-csharp[System.FormatException#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/iformattable3.cs#9)]
     [!code-vb[System.FormatException#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/iformattable3.vb#9)]  
  
     此异常也可能会造成编码错误。 若要更正它，请调用分析方法，无需精确的格式，如<xref:System.DateTime.Parse%2A?displayProperty=nameWithType>或<xref:System.Guid.Parse%2A?displayProperty=nameWithType>，或替换为有效的格式字符串。 下面的示例通过调用纠正错误<xref:System.Guid.Parse%2A?displayProperty=nameWithType>方法。  
  
     [!code-csharp[System.FormatException#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/iformattable4.cs#10)]
     [!code-vb[System.FormatException#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/iformattable4.vb#10)]  
  
-   一个或多个格式项中的索引[复合格式字符串](~/docs/standard/base-types/composite-formatting.md)大于对象列表或参数数组中的项的索引。 在以下示例中，在格式字符串中的格式项的最大索引为 3。 在对象列表中的项的索引都从零开始的因为此格式字符串需要要有四个项的对象列表。 相反，它具有仅三`dat`， `temp`，并`scale`，因此该代码会导致<xref:System.FormatException>运行时异常:。  
  
     [!code-csharp[System.FormatException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/example1.cs#1)]
     [!code-vb[System.FormatException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/example1.vb#1)]  
  
     在这种情况下，<xref:System.FormatException>例外情况是开发人员错误的结果。 它应该更正而不是在中处理`try/catch`块的方法是确保对象列表中的每个项对应于格式项的索引。 若要更正此示例中，更改要引用的第二个格式项的索引`dat`变量，然后递减 1 每个后续的格式项的索引。  
  
     [!code-csharp[System.FormatException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/example2.cs#2)]
     [!code-vb[System.FormatException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/example2.vb#2)]  
  
-   复合格式字符串不是格式正确的。 在此情况下，<xref:System.FormatException>异常始终是开发人员错误的结果。 它应该更正而不是在中处理`try/catch`块。  
  
     尝试在字符串中，添加文本大括号，如下面的示例不，将引发的异常。  
  
     [!code-csharp[System.String.Format#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa3.cs#23)]
     [!code-vb[System.String.Format#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa3.vb#23)]  
  
     复合格式字符串中包含文本大括号的推荐的方法是将其包含在对象列表并使用格式项用于将其插入到结果字符串。 例如，可以修改以前的复合格式字符串，如下所示。  
  
     [!code-csharp[System.String.Format#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.String.Format/cs/qa3.cs#24)]
     [!code-vb[System.String.Format#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.String.Format/vb/qa3.vb#24)]  
  
     如果格式字符串包含拼写错误，也会引发异常。 以下调用到<xref:System.String.Format%2A?displayProperty=nameWithType>方法省略右大括号，并对左大括号与右括号。  
  
     [!code-csharp[System.FormatException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/example3.cs#3)]
     [!code-vb[System.FormatException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/example3.vb#3)]  
  
     若要更正此错误，请确保所有开始标记和右大括号相对应。  
  
     [!code-csharp[System.FormatException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/example3.cs#4)]
     [!code-vb[System.FormatException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/example3.vb#4)]  
  
-   您提供的复合格式设置方法作为强类型的参数数组中的对象列表和<xref:System.FormatException>异常指示一个或多个格式项的索引超出对象列表中的参数的数量。 这是因为数组类型之间没有显式转换存在，因此，编译器将数组作为一个参数而不是参数数组。 例如，以下调用到<xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>方法会抛出<xref:System.FormatException>异常，尽管格式项的最高的索引为 3 和类型的参数数组<xref:System.Int32>包含四个元素。  
  
     [!code-csharp[System.FormatException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/qa1.cs#5)]
     [!code-vb[System.FormatException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/qa1.vb#5)]  
  
     而不是处理此异常，则应消除及其原因。 因为 Visual Basic 既不 C# 可以将一个整数数组转换为对象数组，必须在调用复合格式设置方法之前自行执行转换。 下面的示例提供了一种实现。  
  
     [!code-csharp[System.FormatException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.formatexception/cs/qa2.cs#6)]
     [!code-vb[System.FormatException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.formatexception/vb/qa2.vb#6)]  
  
 <xref:System.FormatException> 使用 HRESULT COR_E_FORMAT，其值 0x80131537。  
  
 <xref:System.FormatException>类派生自<xref:System.Exception>并添加任何独特的成员。 有关实例的初始属性值的列表<xref:System.FormatException>，请参阅<xref:System.FormatException.%23ctor%2A>构造函数。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.FormatException" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormatException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FormatException.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FormatException();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.FormatException" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数初始化<xref:System.Exception.Message%2A>为系统提供的错误进行描述，如"格式无效。"的消息的新实例的属性 此消息将考虑当前系统区域性。  
  
 下表显示 <xref:System.FormatException> 的实例的初始属性值。  
  
|Property|值|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|空引用（在 Visual Basic 中为 `Nothing`）。|  
|<xref:System.Exception.Message%2A>|本地化的错误消息字符串。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormatException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FormatException.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FormatException(System::String ^ message);" />
      <MemberSignature Language="F#" Value="new FormatException : string -&gt; FormatException" Usage="new System.FormatException message" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">描述错误的消息。</param>
        <summary>使用指定的错误消息初始化 <see cref="T:System.FormatException" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数初始化<xref:System.Exception.Message%2A?displayProperty=nameWithType>属性的新的异常使用`message`参数。 `message` 的内容被设计为人可理解的形式。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。  
  
 下表显示 <xref:System.FormatException> 的实例的初始属性值。  
  
|Property|值|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|空引用（在 Visual Basic 中为 `Nothing`）。|  
|<xref:System.Exception.Message%2A>|错误消息字符串。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected FormatException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; FormatException(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new FormatException : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; FormatException" Usage="new System.FormatException (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">承载序列化对象数据的对象。</param>
        <param name="context">关于来源和目标的上下文信息</param>
        <summary>用序列化数据初始化 <see cref="T:System.FormatException" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在反序列化过程中调用该构造函数来重建通过流传输的异常对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormatException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FormatException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (message As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FormatException(System::String ^ message, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new FormatException : string * Exception -&gt; FormatException" Usage="new System.FormatException (message, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">解释异常原因的错误信息。</param>
        <param name="innerException">导致当前异常的异常。 如果 <c>innerException</c> 参数不是空引用（在 Visual Basic 中为 <see langword="Nothing" />），则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
        <summary>使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.FormatException" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因前一个异常而直接引发的异常应在 <xref:System.Exception.InnerException%2A> 属性中包含对前一个异常的引用。 <xref:System.Exception.InnerException%2A> 属性返回传递到构造函数中的相同值，或者如果 `Nothing` 属性不向构造函数提供内部异常值，则为空引用（在 Visual Basic 中为 <xref:System.Exception.InnerException%2A>）。  
  
 下表显示 <xref:System.FormatException> 的实例的初始属性值。  
  
|Property|值|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|内部异常引用。|  
|<xref:System.Exception.Message%2A>|错误消息字符串。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
      </Docs>
    </Member>
  </Members>
</Type>