<Type Name="StringComparer" FullName="System.StringComparer">
  <TypeSignature Language="C#" Value="public abstract class StringComparer : System.Collections.Generic.IComparer&lt;string&gt;, System.Collections.Generic.IEqualityComparer&lt;string&gt;, System.Collections.IComparer, System.Collections.IEqualityComparer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit StringComparer extends System.Object implements class System.Collections.Generic.IComparer`1&lt;string&gt;, class System.Collections.Generic.IEqualityComparer`1&lt;string&gt;, class System.Collections.IComparer, class System.Collections.IEqualityComparer" />
  <TypeSignature Language="DocId" Value="T:System.StringComparer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class StringComparer&#xA;Implements IComparer, IComparer(Of String), IEqualityComparer, IEqualityComparer(Of String)" />
  <TypeSignature Language="C++ CLI" Value="public ref class StringComparer abstract : System::Collections::Generic::IComparer&lt;System::String ^&gt;, System::Collections::Generic::IEqualityComparer&lt;System::String ^&gt;, System::Collections::IComparer, System::Collections::IEqualityComparer" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IComparer&lt;System.String&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEqualityComparer&lt;System.String&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IComparer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEqualityComparer</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="90594-101">表示一种字符串比较操作，该操作使用特定的大小写以及基于区域性的比较规则或序号比较规则。</span><span class="sxs-lookup"><span data-stu-id="90594-101">Represents a string comparison operation that uses specific case and culture-based or ordinal comparison rules.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90594-102">一个对象派生自<xref:System.StringComparer>类包含基于字符串的比较、 相等性，并考虑到这两个用例和特定于区域性的比较规则的哈希代码操作。</span><span class="sxs-lookup"><span data-stu-id="90594-102">An object derived from the <xref:System.StringComparer> class embodies string-based comparison, equality, and hash code operations that take into account both case and culture-specific comparison rules.</span></span> <span data-ttu-id="90594-103">你可以使用<xref:System.StringComparer>类，以创建特定类型的比较在泛型集合中的元素进行排序。</span><span class="sxs-lookup"><span data-stu-id="90594-103">You can use the <xref:System.StringComparer> class to create a type-specific comparison to sort the elements in a generic collection.</span></span> <span data-ttu-id="90594-104">类，如<xref:System.Collections.Hashtable>， <xref:System.Collections.Generic.Dictionary%602>， <xref:System.Collections.SortedList>，和<xref:System.Collections.Generic.SortedList%602>使用<xref:System.StringComparer>类进行排序。</span><span class="sxs-lookup"><span data-stu-id="90594-104">Classes such as <xref:System.Collections.Hashtable>, <xref:System.Collections.Generic.Dictionary%602>, <xref:System.Collections.SortedList>, and <xref:System.Collections.Generic.SortedList%602> use the <xref:System.StringComparer> class for sorting purposes.</span></span>  
  
 <span data-ttu-id="90594-105">由表示的比较运算<xref:System.StringComparer>类定义进行区分大小写或不区分大小写，并使用任一 word （区分区域性） 或序号 （不区分区域性） 比较规则。</span><span class="sxs-lookup"><span data-stu-id="90594-105">A comparison operation that is represented by the <xref:System.StringComparer> class is defined to be either case-sensitive or case-insensitive, and use either word (culture-sensitive) or ordinal (culture-insensitive) comparison rules.</span></span> <span data-ttu-id="90594-106">有关 word 和序号比较规则的详细信息，请参阅<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="90594-106">For more information about word and ordinal comparison rules, see <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>.</span></span>  
  
## <a name="implemented-properties"></a><span data-ttu-id="90594-107">实现的属性</span><span class="sxs-lookup"><span data-stu-id="90594-107">Implemented Properties</span></span>  
 <span data-ttu-id="90594-108">你可能是有关如何使用混淆<xref:System.StringComparer>由于了矛盾类属性。</span><span class="sxs-lookup"><span data-stu-id="90594-108">You might be confused about how to use the <xref:System.StringComparer> class properties because of a seeming contradiction.</span></span> <span data-ttu-id="90594-109"><xref:System.StringComparer>声明类`abstract`(`MustInherit`在 Visual Basic 中)，这意味着其成员可以仅在从派生的类的对象上调用<xref:System.StringComparer>类。</span><span class="sxs-lookup"><span data-stu-id="90594-109">The <xref:System.StringComparer> class is declared `abstract` (`MustInherit` in Visual Basic), which means its members can be invoked only on an object of a class derived from the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="90594-110">矛盾在于的每个属性<xref:System.StringComparer>声明类`static`(`Shared`在 Visual Basic 中)，这意味着属性可以无需首先创建派生的类调用。</span><span class="sxs-lookup"><span data-stu-id="90594-110">The contradiction is that each property of the <xref:System.StringComparer> class is declared `static` (`Shared` in Visual Basic), which means the property can be invoked without first creating a derived class.</span></span>  
  
 <span data-ttu-id="90594-111">你可以调用<xref:System.StringComparer>属性直接因为每个属性会实际返回派生自的匿名类的实例<xref:System.StringComparer>类。</span><span class="sxs-lookup"><span data-stu-id="90594-111">You can call a <xref:System.StringComparer> property directly because each property actually returns an instance of an anonymous class that is derived from the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="90594-112">因此，每个属性值的类型是<xref:System.StringComparer>，这不是匿名类的基类的匿名类型类本身。</span><span class="sxs-lookup"><span data-stu-id="90594-112">Consequently, the type of each property value is <xref:System.StringComparer>, which is the base class of the anonymous class, not the type of the anonymous class itself.</span></span> <span data-ttu-id="90594-113">每个<xref:System.StringComparer>类属性返回<xref:System.StringComparer>支持预定义的用例和比较规则的对象。</span><span class="sxs-lookup"><span data-stu-id="90594-113">Each <xref:System.StringComparer> class property returns a <xref:System.StringComparer> object that supports predefined case and comparison rules.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90594-114">下面的示例演示属性和<xref:System.StringComparer.Create%2A>方法<xref:System.StringComparer>类。</span><span class="sxs-lookup"><span data-stu-id="90594-114">The following example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="90594-115">该示例演示如何不同<xref:System.StringComparer>对象排序三个版本的拉丁字母字母 I。</span><span class="sxs-lookup"><span data-stu-id="90594-115">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.String" />
    <altmember cref="T:System.Globalization.CompareOptions" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected StringComparer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; StringComparer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="90594-116">初始化 <see cref="T:System.StringComparer" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="90594-116">Initializes a new instance of the <see cref="T:System.StringComparer" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Compare">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90594-117">比较两个对象或字符串，并返回其相对排序顺序的指示。</span><span class="sxs-lookup"><span data-stu-id="90594-117">Compares two objects or strings and returns an indication of their relative sort order.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public int Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compare (x As Object, y As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Compare(System::Object ^ x, System::Object ^ y);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="90594-118">要与 <c>y</c> 比较的对象。</span><span class="sxs-lookup"><span data-stu-id="90594-118">An object to compare to <c>y</c>.</span></span></param>
        <param name="y"><span data-ttu-id="90594-119">要与 <c>x</c> 比较的对象。</span><span class="sxs-lookup"><span data-stu-id="90594-119">An object to compare to <c>x</c>.</span></span></param>
        <summary><span data-ttu-id="90594-120">当在派生类中重写时，将比较两个对象并返回其相对排序顺序的指示。</span><span class="sxs-lookup"><span data-stu-id="90594-120">When overridden in a derived class, compares two objects and returns an indication of their relative sort order.</span></span></summary>
        <returns><span data-ttu-id="90594-121">一个有符号整数，指示 <paramref name="x" /> 和 <paramref name="y" /> 的相对值，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="90594-121">A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="90594-122"><list type="table"><listheader><term> 值</span><span class="sxs-lookup"><span data-stu-id="90594-122"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="90594-123"></term><description> 含义</span><span class="sxs-lookup"><span data-stu-id="90594-123"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="90594-124"></description></listheader><item><term> 小于零</span><span class="sxs-lookup"><span data-stu-id="90594-124"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="90594-125"></term><description><paramref name="x" /> 在排序顺序中位于 <paramref name="y" /> 之前。</span><span class="sxs-lookup"><span data-stu-id="90594-125"></term><description><paramref name="x" /> precedes  <paramref name="y" /> in the sort order.</span></span>  
  
 <span data-ttu-id="90594-126">或</span><span class="sxs-lookup"><span data-stu-id="90594-126">-or-</span></span>  
  
 <span data-ttu-id="90594-127"><paramref name="x" /> 是 <see langword="null" />，且 <paramref name="y" /> 不是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="90594-127"><paramref name="x" /> is <see langword="null" /> and <paramref name="y" /> is not <see langword="null" />.</span></span>  
  
 <span data-ttu-id="90594-128"></description></item><item><term> 零</span><span class="sxs-lookup"><span data-stu-id="90594-128"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="90594-129"></term><description><paramref name="x" /> 等于 <paramref name="y" />。</span><span class="sxs-lookup"><span data-stu-id="90594-129"></term><description><paramref name="x" /> is equal to <paramref name="y" />.</span></span>  
  
 <span data-ttu-id="90594-130">或</span><span class="sxs-lookup"><span data-stu-id="90594-130">-or-</span></span>  
  
 <span data-ttu-id="90594-131"><paramref name="x" /> 和 <paramref name="y" /> 均为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="90594-131"><paramref name="x" /> and <paramref name="y" /> are both <see langword="null" />.</span></span>  
  
 <span data-ttu-id="90594-132"></description></item><item><term> 大于零</span><span class="sxs-lookup"><span data-stu-id="90594-132"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="90594-133"></term><description><paramref name="x" /> 在排序顺序中位于 <paramref name="y" /> 之后。</span><span class="sxs-lookup"><span data-stu-id="90594-133"></term><description><paramref name="x" /> follows <paramref name="y" /> in the sort order.</span></span>  
  
 <span data-ttu-id="90594-134">或</span><span class="sxs-lookup"><span data-stu-id="90594-134">-or-</span></span>  
  
 <span data-ttu-id="90594-135"><paramref name="y" /> 是 <see langword="null" />，且 <paramref name="x" /> 不是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="90594-135"><paramref name="y" /> is <see langword="null" /> and <paramref name="x" /> is not <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90594-136"><xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType>方法是比效率稍有提高<xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType>方法因为不能转换的`x`和`y`执行比较所需的自变量。</span><span class="sxs-lookup"><span data-stu-id="90594-136">The <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> method is slightly more efficient than the <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> method because no conversion of the `x` and `y` arguments is needed to perform the comparison.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="90594-137"><paramref name="x" /> 或 <paramref name="y" /> 都不是 <see cref="T:System.String" /> 对象，并且 <paramref name="x" /> 或 <paramref name="y" /> 都不实现 <see cref="T:System.IComparable" /> 接口。</span><span class="sxs-lookup"><span data-stu-id="90594-137">Neither <paramref name="x" /> nor <paramref name="y" /> is a <see cref="T:System.String" /> object, and neither <paramref name="x" /> nor <paramref name="y" /> implements the <see cref="T:System.IComparable" /> interface.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public abstract int Compare (string x, string y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string x, string y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Compare(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Compare (x As String, y As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int Compare(System::String ^ x, System::String ^ y);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IComparer`1.Compare(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.String" />
        <Parameter Name="y" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="90594-138">要与 <c>y</c> 比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="90594-138">A string to compare to <c>y</c>.</span></span></param>
        <param name="y"><span data-ttu-id="90594-139">要与 <c>x</c> 比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="90594-139">A string to compare to <c>x</c>.</span></span></param>
        <summary><span data-ttu-id="90594-140">当在派生类中重写时，将比较两个字符串并返回其相对排序顺序的指示。</span><span class="sxs-lookup"><span data-stu-id="90594-140">When overridden in a derived class, compares two strings and returns an indication of their relative sort order.</span></span></summary>
        <returns><span data-ttu-id="90594-141">一个有符号整数，指示 <paramref name="x" /> 和 <paramref name="y" /> 的相对值，如下表所示。</span><span class="sxs-lookup"><span data-stu-id="90594-141">A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in the following table.</span></span>  
  
 <span data-ttu-id="90594-142"><list type="table"><listheader><term> 值</span><span class="sxs-lookup"><span data-stu-id="90594-142"><list type="table"><listheader><term> Value</span></span>  
  
 <span data-ttu-id="90594-143"></term><description> 含义</span><span class="sxs-lookup"><span data-stu-id="90594-143"></term><description> Meaning</span></span>  
  
 <span data-ttu-id="90594-144"></description></listheader><item><term> 小于零</span><span class="sxs-lookup"><span data-stu-id="90594-144"></description></listheader><item><term> Less than zero</span></span>  
  
 <span data-ttu-id="90594-145"></term><description><paramref name="x" /> 在排序顺序中位于 <paramref name="y" /> 之前。</span><span class="sxs-lookup"><span data-stu-id="90594-145"></term><description><paramref name="x" /> precedes <paramref name="y" /> in the sort order.</span></span>  
  
 <span data-ttu-id="90594-146">或</span><span class="sxs-lookup"><span data-stu-id="90594-146">-or-</span></span>  
  
 <span data-ttu-id="90594-147"><paramref name="x" /> 是 <see langword="null" />，且 <paramref name="y" /> 不是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="90594-147"><paramref name="x" /> is <see langword="null" /> and <paramref name="y" /> is not <see langword="null" />.</span></span>  
  
 <span data-ttu-id="90594-148"></description></item><item><term> 零</span><span class="sxs-lookup"><span data-stu-id="90594-148"></description></item><item><term> Zero</span></span>  
  
 <span data-ttu-id="90594-149"></term><description><paramref name="x" /> 等于 <paramref name="y" />。</span><span class="sxs-lookup"><span data-stu-id="90594-149"></term><description><paramref name="x" /> is equal to <paramref name="y" />.</span></span>  
  
 <span data-ttu-id="90594-150">或</span><span class="sxs-lookup"><span data-stu-id="90594-150">-or-</span></span>  
  
 <span data-ttu-id="90594-151"><paramref name="x" /> 和 <paramref name="y" /> 均为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="90594-151"><paramref name="x" /> and <paramref name="y" /> are both <see langword="null" />.</span></span>  
  
 <span data-ttu-id="90594-152"></description></item><item><term> 大于零</span><span class="sxs-lookup"><span data-stu-id="90594-152"></description></item><item><term> Greater than zero</span></span>  
  
 <span data-ttu-id="90594-153"></term><description><paramref name="x" /> 在排序顺序中位于 <paramref name="y" /> 之后。</span><span class="sxs-lookup"><span data-stu-id="90594-153"></term><description><paramref name="x" /> follows <paramref name="y" /> in the sort order.</span></span>  
  
 <span data-ttu-id="90594-154">或</span><span class="sxs-lookup"><span data-stu-id="90594-154">-or-</span></span>  
  
 <span data-ttu-id="90594-155"><paramref name="y" /> 是 <see langword="null" />，且 <paramref name="x" /> 不是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="90594-155"><paramref name="y" /> is <see langword="null" /> and <paramref name="x" /> is not <see langword="null" />.</span></span>  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90594-156"><xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType>方法是比效率稍有提高<xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType>方法因为不能转换的`x`和`y`执行比较所需的自变量。</span><span class="sxs-lookup"><span data-stu-id="90594-156">The <xref:System.StringComparer.Compare%28System.String%2CSystem.String%29?displayProperty=nameWithType> method is slightly more efficient than the <xref:System.StringComparer.Compare%28System.Object%2CSystem.Object%29?displayProperty=nameWithType> method because no conversion of the `x` and `y` arguments is needed to perform the comparison.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static StringComparer Create (System.Globalization.CultureInfo culture, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.StringComparer Create(class System.Globalization.CultureInfo culture, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (culture As CultureInfo, ignoreCase As Boolean) As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static StringComparer ^ Create(System::Globalization::CultureInfo ^ culture, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="culture"><span data-ttu-id="90594-157">一个区域性，其语言规则用于执行字符串比较。</span><span class="sxs-lookup"><span data-stu-id="90594-157">A culture whose linguistic rules are used to perform a string comparison.</span></span></param>
        <param name="ignoreCase">
          <span data-ttu-id="90594-158"><see langword="true" /> 指定比较操作不区分大小写；<see langword="false" /> 指定比较操作区分大小写。</span><span class="sxs-lookup"><span data-stu-id="90594-158"><see langword="true" /> to specify that comparison operations be case-insensitive; <see langword="false" /> to specify that comparison operations be case-sensitive.</span></span></param>
        <summary><span data-ttu-id="90594-159">创建 <see cref="T:System.StringComparer" /> 对象，该对象根据指定区域性的规则对字符串进行比较。</span><span class="sxs-lookup"><span data-stu-id="90594-159">Creates a <see cref="T:System.StringComparer" /> object that compares strings according to the rules of a specified culture.</span></span></summary>
        <returns><span data-ttu-id="90594-160">一个新 <see cref="T:System.StringComparer" /> 对象，该对象根据 <paramref name="culture" /> 参数使用的比较规则以及 <paramref name="ignoreCase" /> 参数指定的大小写规则执行字符串比较。</span><span class="sxs-lookup"><span data-stu-id="90594-160">A new <see cref="T:System.StringComparer" /> object that performs string comparisons according to the comparison rules used by the <paramref name="culture" /> parameter and the case rule specified by the <paramref name="ignoreCase" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="90594-161">下面的代码示例演示属性和<xref:System.StringComparer.Create%2A>方法<xref:System.StringComparer>类。</span><span class="sxs-lookup"><span data-stu-id="90594-161">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="90594-162">该示例演示如何不同<xref:System.StringComparer>对象排序三个版本的拉丁字母字母 I。</span><span class="sxs-lookup"><span data-stu-id="90594-162">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90594-163"><paramref name="culture" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="90594-163"><paramref name="culture" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static StringComparer Create (System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.StringComparer Create(class System.Globalization.CultureInfo culture, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Create(System.Globalization.CultureInfo,System.Globalization.CompareOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (culture As CultureInfo, options As CompareOptions) As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static StringComparer ^ Create(System::Globalization::CultureInfo ^ culture, System::Globalization::CompareOptions options);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="culture">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public static StringComparer CurrentCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentCulture As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ CurrentCulture { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90594-164">获取一个 <see cref="T:System.StringComparer" /> 对象，该对象使用当前区域性的单词比较规则执行区分大小写的字符串比较。</span><span class="sxs-lookup"><span data-stu-id="90594-164">Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive string comparison using the word comparison rules of the current culture.</span></span></summary>
        <value><span data-ttu-id="90594-165">一个新 <see cref="T:System.StringComparer" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="90594-165">A new <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90594-166"><xref:System.StringComparer>返回<xref:System.StringComparer.CurrentCulture%2A>与语言相关字符串时，可以使用属性。</span><span class="sxs-lookup"><span data-stu-id="90594-166">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.CurrentCulture%2A> property can be used when strings are linguistically relevant.</span></span> <span data-ttu-id="90594-167">例如，如果字符串未显示给用户，或如果字符串都是用户交互的结果，应使用区分区域性的字符串比较字符串数据进行排序。</span><span class="sxs-lookup"><span data-stu-id="90594-167">For example, if strings are displayed to the user, or if strings are the result of user interaction, culture-sensitive string comparison should be used to order the string data.</span></span>  
  
 <span data-ttu-id="90594-168">当前的区域性是<xref:System.Globalization.CultureInfo>与当前线程关联的对象。</span><span class="sxs-lookup"><span data-stu-id="90594-168">The current culture is the <xref:System.Globalization.CultureInfo> object associated with the current thread.</span></span>  
  
 <span data-ttu-id="90594-169"><xref:System.StringComparer.CurrentCulture%2A>属性实际返回派生自的匿名类的一个实例<xref:System.StringComparer>类。</span><span class="sxs-lookup"><span data-stu-id="90594-169">The <xref:System.StringComparer.CurrentCulture%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
 <span data-ttu-id="90594-170">每次调用<xref:System.StringComparer.CurrentCulture%2A>属性`get`访问器返回一个新<xref:System.StringComparer>对象，如以下代码所示。</span><span class="sxs-lookup"><span data-stu-id="90594-170">Each call to the <xref:System.StringComparer.CurrentCulture%2A> property `get` accessor returns a new <xref:System.StringComparer> object, as the following code shows.</span></span>  
  
 [!code-csharp[System.StringComparer.CurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/cs/CompareObjects.cs#1)]
 [!code-vb[System.StringComparer.CurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/vb/CompareObjects.vb#1)]  
  
 <span data-ttu-id="90594-171">为了提高性能，可以将存储<xref:System.StringComparer>对象中的本地变量，而不是检索的值<xref:System.StringComparer.CurrentCulture%2A>属性多次。</span><span class="sxs-lookup"><span data-stu-id="90594-171">To improve performance, you can store the <xref:System.StringComparer> object in a local variable rather than retrieve the value of the <xref:System.StringComparer.CurrentCulture%2A> property multiple times.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90594-172">下面的代码示例演示属性和<xref:System.StringComparer.Create%2A>方法<xref:System.StringComparer>类。</span><span class="sxs-lookup"><span data-stu-id="90594-172">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="90594-173">该示例演示如何不同<xref:System.StringComparer>对象排序三个版本的拉丁字母字母 I。</span><span class="sxs-lookup"><span data-stu-id="90594-173">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentCultureIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer CurrentCultureIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer CurrentCultureIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.CurrentCultureIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentCultureIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ CurrentCultureIgnoreCase { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90594-174">获取一个 <see cref="T:System.StringComparer" /> 对象，该对象使用当前区域性的单词比较规则执行不区分大小写的字符串比较。</span><span class="sxs-lookup"><span data-stu-id="90594-174">Gets a <see cref="T:System.StringComparer" /> object that performs case-insensitive string comparisons using the word comparison rules of the current culture.</span></span></summary>
        <value><span data-ttu-id="90594-175">一个新 <see cref="T:System.StringComparer" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="90594-175">A new <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90594-176">当前的区域性是<xref:System.Globalization.CultureInfo>与当前线程关联的对象。</span><span class="sxs-lookup"><span data-stu-id="90594-176">The current culture is the <xref:System.Globalization.CultureInfo> object associated with the current thread.</span></span>  
  
 <span data-ttu-id="90594-177"><xref:System.StringComparer>返回<xref:System.StringComparer.CurrentCultureIgnoreCase%2A>时字符串是与语言相关但其大小写并不可以使用属性。</span><span class="sxs-lookup"><span data-stu-id="90594-177">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property can be used when strings are linguistically relevant but their case is not.</span></span> <span data-ttu-id="90594-178">例如，如果向用户显示字符串，但用例并不重要，则区分区域性，应使用不区分大小写的字符串比较字符串数据进行排序。</span><span class="sxs-lookup"><span data-stu-id="90594-178">For example, if strings are displayed to the user but case is unimportant, culture-sensitive, case-insensitive string comparison should be used to order the string data.</span></span>  
  
 <span data-ttu-id="90594-179"><xref:System.StringComparer.CurrentCultureIgnoreCase%2A>属性实际返回派生自的匿名类的一个实例<xref:System.StringComparer>类。</span><span class="sxs-lookup"><span data-stu-id="90594-179">The <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
 <span data-ttu-id="90594-180">每次调用<xref:System.StringComparer.CurrentCultureIgnoreCase%2A>属性`get`访问器返回一个新<xref:System.StringComparer>对象，如以下代码所示。</span><span class="sxs-lookup"><span data-stu-id="90594-180">Each call to the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property `get` accessor returns a new <xref:System.StringComparer> object, as the following code shows.</span></span>  
  
 [!code-csharp[System.StringComparer.CurrentCulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/cs/CompareObjects.cs#2)]
 [!code-vb[System.StringComparer.CurrentCulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer.CurrentCulture/vb/CompareObjects.vb#2)]  
  
 <span data-ttu-id="90594-181">为了提高性能，可以将存储<xref:System.StringComparer>对象中的本地变量，而不是检索的值<xref:System.StringComparer.CurrentCultureIgnoreCase%2A>属性多次。</span><span class="sxs-lookup"><span data-stu-id="90594-181">To improve performance, you can store the <xref:System.StringComparer> object in a local variable rather than retrieve the value of the <xref:System.StringComparer.CurrentCultureIgnoreCase%2A> property multiple times.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90594-182">当在派生类中重写时，指示两个对象或字符串是否相等。</span><span class="sxs-lookup"><span data-stu-id="90594-182">When overridden in a derived class, indicates whether two objects or strings are equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (x As Object, y As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Object ^ x, System::Object ^ y);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="90594-183">要与 <c>y</c> 比较的对象。</span><span class="sxs-lookup"><span data-stu-id="90594-183">An object to compare to <c>y</c>.</span></span></param>
        <param name="y"><span data-ttu-id="90594-184">要与 <c>x</c> 比较的对象。</span><span class="sxs-lookup"><span data-stu-id="90594-184">An object to compare to <c>x</c>.</span></span></param>
        <summary><span data-ttu-id="90594-185">当在派生类中重写时，指示两个对象是否相等。</span><span class="sxs-lookup"><span data-stu-id="90594-185">When overridden in a derived class, indicates whether two objects are equal.</span></span></summary>
        <returns>
          <span data-ttu-id="90594-186">如果 <see langword="true" /> 和 <paramref name="x" /> 引用同一对象，或者 <paramref name="y" /> 和 <paramref name="x" /> 是相同的对象类型且这些对象相等，或者 <paramref name="y" /> 和 <paramref name="x" /> 都是 <paramref name="y" />，则为 <see langword="null" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="90594-186"><see langword="true" /> if <paramref name="x" /> and <paramref name="y" /> refer to the same object, or <paramref name="x" /> and <paramref name="y" /> are both the same type of object and those objects are equal, or both <paramref name="x" /> and <paramref name="y" /> are <see langword="null" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90594-187">因为运行时没有要取消装箱`x`或`y`如果它们是值类型或尝试向下转换到`x`或`y`为如果它们是引用类型、 字符串<xref:System.StringComparer.Equals%28System.String%2CSystem.String%29>方法可能比效率稍有提高<xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29>方法。</span><span class="sxs-lookup"><span data-stu-id="90594-187">Because the runtime does not have to unbox `x` or `y` if they are value types or attempt to downcast `x` or `y` to strings if they are reference types, the <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> method may be slightly more efficient than the <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public abstract bool Equals (string x, string y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(string x, string y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.Equals(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Equals (x As String, y As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Equals(System::String ^ x, System::String ^ y);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.String" />
        <Parameter Name="y" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="90594-188">要与 <c>y</c> 比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="90594-188">A string to compare to <c>y</c>.</span></span></param>
        <param name="y"><span data-ttu-id="90594-189">要与 <c>x</c> 比较的字符串。</span><span class="sxs-lookup"><span data-stu-id="90594-189">A string to compare to <c>x</c>.</span></span></param>
        <summary><span data-ttu-id="90594-190">当在派生类中重写时，指示两个字符串是否相等。</span><span class="sxs-lookup"><span data-stu-id="90594-190">When overridden in a derived class, indicates whether two strings are equal.</span></span></summary>
        <returns>
          <span data-ttu-id="90594-191">如果 <see langword="true" /> 和 <paramref name="x" /> 引用同一对象，或者 <paramref name="y" /> 和 <paramref name="x" /> 相等，或者 <paramref name="y" /> 和 <paramref name="x" /> 都是 <paramref name="y" />，则为 <see langword="null" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="90594-191"><see langword="true" /> if <paramref name="x" /> and <paramref name="y" /> refer to the same object, or <paramref name="x" /> and <paramref name="y" /> are equal, or <paramref name="x" /> and <paramref name="y" /> are <see langword="null" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90594-192">因为运行时没有要取消装箱`x`或`y`如果它们是值类型或尝试向下转换到`x`或`y`为如果它们是引用类型、 字符串<xref:System.StringComparer.Equals%28System.String%2CSystem.String%29>方法可能比效率稍有提高<xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29>方法。</span><span class="sxs-lookup"><span data-stu-id="90594-192">Because the runtime does not have to unbox `x` or `y` if they are value types or attempt to downcast `x` or `y` to strings if they are reference types, the <xref:System.StringComparer.Equals%28System.String%2CSystem.String%29> method may be slightly more efficient than the <xref:System.StringComparer.Equals%28System.Object%2CSystem.Object%29> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromComparison">
      <MemberSignature Language="C#" Value="public static StringComparer FromComparison (StringComparison comparisonType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.StringComparer FromComparison(valuetype System.StringComparison comparisonType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.FromComparison(System.StringComparison)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromComparison (comparisonType As StringComparison) As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static StringComparer ^ FromComparison(StringComparison comparisonType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparisonType" Type="System.StringComparison" />
      </Parameters>
      <Docs>
        <param name="comparisonType">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetHashCode">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="90594-193">当在派生类中重写时，将获取当前 <see cref="T:System.StringComparer" /> 对象的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="90594-193">When overridden in a derived class, gets the hash code for the current <see cref="T:System.StringComparer" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.GetHashCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode (obj As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int GetHashCode(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.GetHashCode(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="90594-194">一个对象。</span><span class="sxs-lookup"><span data-stu-id="90594-194">An object.</span></span></param>
        <summary><span data-ttu-id="90594-195">当在派生类中重写时，将获取指定对象的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="90594-195">When overridden in a derived class, gets the hash code for the specified object.</span></span></summary>
        <returns><span data-ttu-id="90594-196">根据 <paramref name="obj" /> 参数的值计算出的 32 位有符号哈希代码。</span><span class="sxs-lookup"><span data-stu-id="90594-196">A 32-bit signed hash code calculated from the value of the <paramref name="obj" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90594-197"><xref:System.StringComparer.GetHashCode%28System.String%29>方法是比效率更高<xref:System.StringComparer.GetHashCode%2A>方法因为`obj`参数无需取消装箱执行该操作。</span><span class="sxs-lookup"><span data-stu-id="90594-197">The <xref:System.StringComparer.GetHashCode%28System.String%29> method is more efficient than the <xref:System.StringComparer.GetHashCode%2A> method because the `obj` parameter does not have to be unboxed to perform the operation.</span></span>  
  
 <span data-ttu-id="90594-198"><xref:System.StringComparer.GetHashCode%28System.Object%29>方法分配的大小成正比的内存量`obj`来计算的哈希代码`obj`。</span><span class="sxs-lookup"><span data-stu-id="90594-198">The <xref:System.StringComparer.GetHashCode%28System.Object%29> method allocates an amount of memory that is proportional to the size of `obj` to calculate the hash code of `obj`.</span></span> <span data-ttu-id="90594-199">在大的字符串的情况下尝试检索的哈希代码可能引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="90594-199">In the case of large strings, trying to retrieve the hash code can throw an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="90594-200">相反，你可以使用可在计算哈希代码时分配固定的内存量的替代算法。</span><span class="sxs-lookup"><span data-stu-id="90594-200">Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes.</span></span> <span data-ttu-id="90594-201">若要使用此算法，添加[< NetFx45_CultureAwareComparerGetHashCode_LongStrings >](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md)元素[\<运行时 >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)你的应用程序配置文件节。</span><span class="sxs-lookup"><span data-stu-id="90594-201">To use this algorithm, add the [<NetFx45_CultureAwareComparerGetHashCode_LongStrings>](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) element to the [\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your application's configuration file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="90594-202">没有足够的内存可用于分配计算哈希代码所需的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="90594-202">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90594-203"><paramref name="obj" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="90594-203"><paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <exception cref="  &#xA;            T:System.ArgumentException"><span data-ttu-id="90594-204">没有足够的内存可用于分配计算哈希代码所需的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="90594-204">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public abstract int GetHashCode (string obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(string obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.GetHashCode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetHashCode (obj As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract int GetHashCode(System::String ^ obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="90594-205">一个字符串。</span><span class="sxs-lookup"><span data-stu-id="90594-205">A string.</span></span></param>
        <summary><span data-ttu-id="90594-206">当在派生类中重写时，将获取指定字符串的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="90594-206">When overridden in a derived class, gets the hash code for the specified string.</span></span></summary>
        <returns><span data-ttu-id="90594-207">根据 <paramref name="obj" /> 参数的值计算出的 32 位有符号哈希代码。</span><span class="sxs-lookup"><span data-stu-id="90594-207">A 32-bit signed hash code calculated from the value of the <paramref name="obj" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90594-208"><xref:System.StringComparer.GetHashCode%28System.String%29>方法是比效率更高<xref:System.StringComparer.GetHashCode%28System.Object%29>方法因为`obj`参数无需取消装箱执行该操作。</span><span class="sxs-lookup"><span data-stu-id="90594-208">The <xref:System.StringComparer.GetHashCode%28System.String%29> method is more efficient than the <xref:System.StringComparer.GetHashCode%28System.Object%29> method because the `obj` parameter does not have to be unboxed to perform the operation.</span></span>  
  
 <span data-ttu-id="90594-209"><xref:System.StringComparer.GetHashCode%28System.String%29>方法分配的大小成正比的内存量`obj`来计算的哈希代码`obj`。</span><span class="sxs-lookup"><span data-stu-id="90594-209">The <xref:System.StringComparer.GetHashCode%28System.String%29> method allocates an amount of memory that is proportional to the size of `obj` to calculate the hash code of `obj`.</span></span> <span data-ttu-id="90594-210">在大的字符串的情况下尝试检索的哈希代码可能引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="90594-210">In the case of large strings, trying to retrieve the hash code can throw an <xref:System.ArgumentException>.</span></span> <span data-ttu-id="90594-211">相反，你可以使用可在计算哈希代码时分配固定的内存量的替代算法。</span><span class="sxs-lookup"><span data-stu-id="90594-211">Instead, you can use an alternate algorithm that allocates a fixed amount of memory when calculating hash codes.</span></span> <span data-ttu-id="90594-212">若要使用此算法，添加[< NetFx45_CultureAwareComparerGetHashCode_LongStrings >](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md)元素[\<运行时 >](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md)你的应用程序配置文件节。</span><span class="sxs-lookup"><span data-stu-id="90594-212">To use this algorithm, add the [<NetFx45_CultureAwareComparerGetHashCode_LongStrings>](~/docs/framework/configure-apps/file-schema/runtime/netfx45-cultureawarecomparergethashcode-longstrings-element.md) element to the [\<runtime>](~/docs/framework/configure-apps/file-schema/runtime/runtime-element.md) section of your application's configuration file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="90594-213">没有足够的内存可用于分配计算哈希代码所需的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="90594-213">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="90594-214"><paramref name="obj" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="90594-214"><paramref name="obj" /> is <see langword="null" />.</span></span></exception>
        <exception cref="  &#xA;            T:System.ArgumentException"><span data-ttu-id="90594-215">没有足够的内存可用于分配计算哈希代码所需的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="90594-215">Not enough memory is available to allocate the buffer that is required to compute the hash code.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="InvariantCulture">
      <MemberSignature Language="C#" Value="public static StringComparer InvariantCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer InvariantCulture" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.InvariantCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCulture As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ InvariantCulture { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90594-216">获取一个 <see cref="T:System.StringComparer" /> 对象，该对象使用固定区域性的单词比较规则执行区分大小写的字符串比较。</span><span class="sxs-lookup"><span data-stu-id="90594-216">Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive string comparison using the word comparison rules of the invariant culture.</span></span></summary>
        <value><span data-ttu-id="90594-217">一个新 <see cref="T:System.StringComparer" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="90594-217">A new <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90594-218"><xref:System.StringComparer>返回<xref:System.StringComparer.InvariantCulture%2A>属性对字符串进行比较以与语言相关的方式，但它不是适用于任何特定区域性中显示。</span><span class="sxs-lookup"><span data-stu-id="90594-218">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.InvariantCulture%2A> property compares strings in a linguistically relevant manner, but it is not suitable for display in any particular culture.</span></span> <span data-ttu-id="90594-219">其主要应用程序是为将跨区域性相同的方式的顺序字符串。</span><span class="sxs-lookup"><span data-stu-id="90594-219">Its major application is to order strings in a way that will be identical across cultures.</span></span>  
  
 <span data-ttu-id="90594-220">固定区域性是<xref:System.Globalization.CultureInfo>返回对象<xref:System.Globalization.CultureInfo.InvariantCulture%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="90594-220">The invariant culture is the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property.</span></span>  
  
 <span data-ttu-id="90594-221"><xref:System.StringComparer.InvariantCulture%2A>属性实际返回派生自的匿名类的一个实例<xref:System.StringComparer>类。</span><span class="sxs-lookup"><span data-stu-id="90594-221">The <xref:System.StringComparer.InvariantCulture%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90594-222">下面的代码示例演示属性和<xref:System.StringComparer.Create%2A>方法<xref:System.StringComparer>类。</span><span class="sxs-lookup"><span data-stu-id="90594-222">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="90594-223">该示例演示如何不同<xref:System.StringComparer>对象排序三个版本的拉丁字母字母 I。</span><span class="sxs-lookup"><span data-stu-id="90594-223">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvariantCultureIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer InvariantCultureIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer InvariantCultureIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.InvariantCultureIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCultureIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ InvariantCultureIgnoreCase { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90594-224">获取一个 <see cref="T:System.StringComparer" /> 对象，该对象使用固定区域性的单词比较规则执行不区分大小写的字符串比较。</span><span class="sxs-lookup"><span data-stu-id="90594-224">Gets a <see cref="T:System.StringComparer" /> object that performs a case-insensitive string comparison using the word comparison rules of the invariant culture.</span></span></summary>
        <value><span data-ttu-id="90594-225">一个新 <see cref="T:System.StringComparer" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="90594-225">A new <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90594-226"><xref:System.StringComparer>返回<xref:System.StringComparer.InvariantCultureIgnoreCase%2A>属性对字符串进行比较的方式与语言相关的不区分大小写，但它不是适用于任何特定区域性中显示。</span><span class="sxs-lookup"><span data-stu-id="90594-226">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> property compares strings in a linguistically relevant manner that ignores case, but it is not suitable for display in any particular culture.</span></span> <span data-ttu-id="90594-227">其主要应用程序是为将跨区域性相同的方式的顺序字符串。</span><span class="sxs-lookup"><span data-stu-id="90594-227">Its major application is to order strings in a way that will be identical across cultures.</span></span>  
  
 <span data-ttu-id="90594-228">固定区域性是<xref:System.Globalization.CultureInfo>返回对象<xref:System.Globalization.CultureInfo.InvariantCulture%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="90594-228">The invariant culture is the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property.</span></span>  
  
 <span data-ttu-id="90594-229"><xref:System.StringComparer.InvariantCultureIgnoreCase%2A>属性实际返回派生自的匿名类的一个实例<xref:System.StringComparer>类。</span><span class="sxs-lookup"><span data-stu-id="90594-229">The <xref:System.StringComparer.InvariantCultureIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ordinal">
      <MemberSignature Language="C#" Value="public static StringComparer Ordinal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer Ordinal" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.Ordinal" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Ordinal As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ Ordinal { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90594-230">获取一个 <see cref="T:System.StringComparer" /> 对象，该对象执行区分大小写的序号字符串比较。</span><span class="sxs-lookup"><span data-stu-id="90594-230">Gets a <see cref="T:System.StringComparer" /> object that performs a case-sensitive ordinal string comparison.</span></span></summary>
        <value><span data-ttu-id="90594-231"><see cref="T:System.StringComparer" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="90594-231">A <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90594-232"><xref:System.StringComparer>返回<xref:System.StringComparer.Ordinal%2A>属性执行独立于语言的简单字节比较。</span><span class="sxs-lookup"><span data-stu-id="90594-232">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.Ordinal%2A> property performs a simple byte comparison that is independent of language.</span></span> <span data-ttu-id="90594-233">比较字符串，则生成的以编程方式或比较区分大小写的资源，例如密码时，这是最合适。</span><span class="sxs-lookup"><span data-stu-id="90594-233">This is most appropriate when comparing strings that are generated programmatically or when comparing case-sensitive resources such as passwords.</span></span>  
  
 <span data-ttu-id="90594-234"><xref:System.StringComparer.Ordinal%2A>属性实际返回派生自的匿名类的一个实例<xref:System.StringComparer>类。</span><span class="sxs-lookup"><span data-stu-id="90594-234">The <xref:System.StringComparer.Ordinal%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90594-235">下面的代码示例演示属性和<xref:System.StringComparer.Create%2A>方法<xref:System.StringComparer>类。</span><span class="sxs-lookup"><span data-stu-id="90594-235">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="90594-236">该示例演示如何不同<xref:System.StringComparer>对象排序三个版本的拉丁字母字母 I。</span><span class="sxs-lookup"><span data-stu-id="90594-236">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrdinalIgnoreCase">
      <MemberSignature Language="C#" Value="public static StringComparer OrdinalIgnoreCase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.StringComparer OrdinalIgnoreCase" />
      <MemberSignature Language="DocId" Value="P:System.StringComparer.OrdinalIgnoreCase" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property OrdinalIgnoreCase As StringComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property StringComparer ^ OrdinalIgnoreCase { StringComparer ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="90594-237">获取一个 <see cref="T:System.StringComparer" /> 对象，该对象执行不区分大小写的序号字符串比较。</span><span class="sxs-lookup"><span data-stu-id="90594-237">Gets a <see cref="T:System.StringComparer" /> object that performs a case-insensitive ordinal string comparison.</span></span></summary>
        <value><span data-ttu-id="90594-238"><see cref="T:System.StringComparer" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="90594-238">A <see cref="T:System.StringComparer" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="90594-239"><xref:System.StringComparer>返回<xref:System.StringComparer.OrdinalIgnoreCase%2A>属性以要进行比较，就像它们转换为大写使用固定区域性的约定的字符串处理字符，然后执行无关的简单字节比较语言。</span><span class="sxs-lookup"><span data-stu-id="90594-239">The <xref:System.StringComparer> returned by the <xref:System.StringComparer.OrdinalIgnoreCase%2A> property treats the characters in the strings to compare as if they were converted to uppercase using the conventions of the invariant culture, and then performs a simple byte comparison that is independent of language.</span></span> <span data-ttu-id="90594-240">比较字符串，则生成的以编程方式或比较不区分大小写的资源，例如路径和文件名时，这是最合适。</span><span class="sxs-lookup"><span data-stu-id="90594-240">This is most appropriate when comparing strings that are generated programmatically or when comparing case-insensitive resources such as paths and filenames.</span></span>  
  
 <span data-ttu-id="90594-241"><xref:System.StringComparer.OrdinalIgnoreCase%2A>属性实际返回派生自的匿名类的一个实例<xref:System.StringComparer>类。</span><span class="sxs-lookup"><span data-stu-id="90594-241">The <xref:System.StringComparer.OrdinalIgnoreCase%2A> property actually returns an instance of an anonymous class derived from the <xref:System.StringComparer> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="90594-242">下面的代码示例演示属性和<xref:System.StringComparer.Create%2A>方法<xref:System.StringComparer>类。</span><span class="sxs-lookup"><span data-stu-id="90594-242">The following code example demonstrates the properties and the <xref:System.StringComparer.Create%2A> method of the <xref:System.StringComparer> class.</span></span> <span data-ttu-id="90594-243">该示例演示如何不同<xref:System.StringComparer>对象排序三个版本的拉丁字母字母 I。</span><span class="sxs-lookup"><span data-stu-id="90594-243">The example illustrates how different <xref:System.StringComparer> objects sort three versions of the Latin letter I.</span></span>  
  
 [!code-cpp[System.StringComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.StringComparer/cpp/omni.cpp#1)]
 [!code-csharp[System.StringComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.StringComparer/cs/omni.cs#1)]
 [!code-vb[System.StringComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.StringComparer/vb/omni.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IComparer.Compare">
      <MemberSignature Language="C#" Value="int IComparer.Compare (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IComparer.Compare(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IComparer#Compare(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Compare (x As Object, y As Object) As Integer Implements IComparer.Compare" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IComparer.Compare(System::Object ^ x, System::Object ^ y) = System::Collections::IComparer::Compare;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IComparer.Compare(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEqualityComparer.Equals">
      <MemberSignature Language="C#" Value="bool IEqualityComparer.Equals (object x, object y);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IEqualityComparer.Equals(object x, object y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (x As Object, y As Object) As Boolean Implements IEqualityComparer.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IEqualityComparer.Equals(System::Object ^ x, System::Object ^ y) = System::Collections::IEqualityComparer::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Object" />
        <Parameter Name="y" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="x">To be added.</param>
        <param name="y">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEqualityComparer.GetHashCode">
      <MemberSignature Language="C#" Value="int IEqualityComparer.GetHashCode (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IEqualityComparer.GetHashCode(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.StringComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (obj As Object) As Integer Implements IEqualityComparer.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IEqualityComparer.GetHashCode(System::Object ^ obj) = System::Collections::IEqualityComparer::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEqualityComparer.GetHashCode(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>