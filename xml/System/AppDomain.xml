<Type Name="AppDomain" FullName="System.AppDomain">
  <Metadata><Meta Name="ms.openlocfilehash" Value="40ea79988bc31dd09a52c0a55c2ef2c71dcc4eb7" /><Meta Name="ms.sourcegitcommit" Value="adc8598fd19d91438cacaa8fa7ce613e28c8218e" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="12/11/2018" /><Meta Name="ms.locfileid" Value="53231906" /></Metadata><TypeSignature Language="C#" Value="public sealed class AppDomain : MarshalByRefObject, _AppDomain, System.Security.IEvidenceFactory" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit AppDomain extends System.MarshalByRefObject implements class System._AppDomain, class System.Security.IEvidenceFactory" />
  <TypeSignature Language="DocId" Value="T:System.AppDomain" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AppDomain&#xA;Inherits MarshalByRefObject&#xA;Implements _AppDomain, IEvidenceFactory" />
  <TypeSignature Language="C++ CLI" Value="public ref class AppDomain sealed : MarshalByRefObject, _AppDomain, System::Security::IEvidenceFactory" />
  <TypeSignature Language="F#" Value="type AppDomain = class&#xA;    inherit MarshalByRefObject&#xA;    interface _AppDomain&#xA;    interface IEvidenceFactory" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System._AppDomain</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.IEvidenceFactory</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System._AppDomain))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="d7ccd-101">表示应用程序域，它是一个应用程序在其中执行的独立环境。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-101">Represents an application domain, which is an isolated environment where applications execute.</span></span> <span data-ttu-id="d7ccd-102">此类不能被继承。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-103">应用程序域，由表示<xref:System.AppDomain>对象，可帮助为执行托管的代码提供隔离、 卸载和安全边界。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-103">Application domains, which are represented by <xref:System.AppDomain> objects, help provide isolation, unloading, and security boundaries for executing managed code.</span></span>  
  
-   <span data-ttu-id="d7ccd-104">使用应用程序域隔离可能会终止进程的任务。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-104">Use application domains to isolate tasks that might bring down a process.</span></span> <span data-ttu-id="d7ccd-105">如果状态<xref:System.AppDomain>的正在执行的任务变得不稳定，<xref:System.AppDomain>而不会影响该过程，可以卸载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-105">If the state of the <xref:System.AppDomain> that's executing a task becomes unstable, the <xref:System.AppDomain> can be unloaded without affecting the process.</span></span> <span data-ttu-id="d7ccd-106">进程必须运行很长一段无需重新启动时，这很重要。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-106">This is important when a process must run for long periods without restarting.</span></span> <span data-ttu-id="d7ccd-107">此外可以使用应用程序域隔离不应共享数据的任务。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-107">You can also use application domains to isolate tasks that should not share data.</span></span>  
  
-   <span data-ttu-id="d7ccd-108">如果程序集加载到默认应用程序域，它不能从内存中卸载进程运行时。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-108">If an assembly is loaded into the default application domain, it cannot be unloaded from memory while the process is running.</span></span> <span data-ttu-id="d7ccd-109">但是，如果您打开第二个应用程序域加载和执行程序集，程序集是卸载该应用程序域卸载时。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-109">However, if you open a second application domain to load and execute the assembly, the assembly is unloaded when that application domain is unloaded.</span></span> <span data-ttu-id="d7ccd-110">使用此方法最大程度减少偶尔使用大型 Dll 的长时间运行进程的工作集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-110">Use this technique to minimize the working set of long-running processes that occasionally use large DLLs.</span></span>  
  
 <span data-ttu-id="d7ccd-111">可以在单个进程; 中运行多个应用程序域但是，没有应用程序域和线程之间具有一对一的相关性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-111">Multiple application domains can run in a single process; however, there is not a one-to-one correlation between application domains and threads.</span></span> <span data-ttu-id="d7ccd-112">多个线程可以属于单个应用程序域，并且给定的线程并不局限于单个应用程序域，在任何给定时间，而在单个应用程序域中执行一个线程。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-112">Several threads can belong to a single application domain, and while a given thread is not confined to a single application domain, at any given time, a thread executes in a single application domain.</span></span>  
  
 <span data-ttu-id="d7ccd-113">使用创建应用程序域<xref:System.AppDomain.CreateDomain%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-113">Application domains are created using the <xref:System.AppDomain.CreateDomain%2A> method.</span></span> <span data-ttu-id="d7ccd-114"><xref:System.AppDomain> 使用实例来加载和执行程序集 (<xref:System.Reflection.Assembly>)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-114"><xref:System.AppDomain> instances are used to load and execute assemblies (<xref:System.Reflection.Assembly>).</span></span> <span data-ttu-id="d7ccd-115">当<xref:System.AppDomain>是不能再在使用中，可能会被卸载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-115">When an <xref:System.AppDomain> is no longer in use, it can be unloaded.</span></span>  
  
 <span data-ttu-id="d7ccd-116"><xref:System.AppDomain>类实现一组事件，使应用程序进行响应时的应用程序域将被卸载，加载程序集或引发未经处理的异常。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-116">The <xref:System.AppDomain> class implements a set of events that enable applications to respond when an assembly is loaded, when an application domain will be unloaded, or when an unhandled exception is thrown.</span></span>  
  
 <span data-ttu-id="d7ccd-117">使用应用程序域的详细信息，请参阅[应用程序域](~/docs/framework/app-domains/application-domains.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-117">For more information on using application domains, see [Application Domains](~/docs/framework/app-domains/application-domains.md).</span></span>  
  
 <span data-ttu-id="d7ccd-118">此类实现<xref:System.MarshalByRefObject>， <xref:System._AppDomain>，和<xref:System.Security.IEvidenceFactory>接口。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-118">This class implements the <xref:System.MarshalByRefObject>, <xref:System._AppDomain>, and <xref:System.Security.IEvidenceFactory> interfaces.</span></span>  
  
 <span data-ttu-id="d7ccd-119">决不要创建的可远程处理包装<xref:System.AppDomain>对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-119">You should never create a remotable wrapper for an <xref:System.AppDomain> object.</span></span> <span data-ttu-id="d7ccd-120">执行此操作可以将发布到的远程引用<xref:System.AppDomain>，如公开方法<xref:System.AppDomain.CreateInstance%2A>远程访问和有效地销毁该代码访问安全性<xref:System.AppDomain>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-120">Doing so could publish a remote reference to that <xref:System.AppDomain>, exposing methods such as <xref:System.AppDomain.CreateInstance%2A> to remote access and effectively destroying code access security for that <xref:System.AppDomain>.</span></span> <span data-ttu-id="d7ccd-121">恶意客户端连接到远程<xref:System.AppDomain>无法获取任何资源的访问权限<xref:System.AppDomain>本身有权访问。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-121">Malicious clients connecting to the remoted <xref:System.AppDomain> could obtain access to any resource the <xref:System.AppDomain> itself has access to.</span></span> <span data-ttu-id="d7ccd-122">不要创建可远程处理的任何类型，将扩展包装<xref:System.MarshalByRefObject>并实现恶意客户端无法用于绕过安全系统的方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-122">Do not create remotable wrappers for any type that extends <xref:System.MarshalByRefObject> and that implements methods that could be used by malicious clients to bypass the security system.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="d7ccd-123">默认值为<xref:System.AppDomainSetup.DisallowCodeDownload%2A?displayProperty=nameWithType>属性是`false`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-123">The default value for the <xref:System.AppDomainSetup.DisallowCodeDownload%2A?displayProperty=nameWithType> property is `false`.</span></span> <span data-ttu-id="d7ccd-124">此设置是不安全的服务。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-124">This setting is unsafe for services.</span></span> <span data-ttu-id="d7ccd-125">若要防止服务下载部分受信任的代码，请将此属性设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-125">To prevent services from downloading partially trusted code, set this property to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-126">此示例演示如何创建一个新<xref:System.AppDomain>，实例化类型中的新<xref:System.AppDomain>，并与该类型的对象进行通信。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-126">This example shows how to create a new <xref:System.AppDomain>, instantiate a type in that new <xref:System.AppDomain>, and communicate with that type's object.</span></span> <span data-ttu-id="d7ccd-127">此外，此示例演示如何卸载<xref:System.AppDomain>导致要进行垃圾回收的对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-127">In addition, this example shows how to unload the <xref:System.AppDomain> causing the object to be garbage collected.</span></span>  
  
 [!code-cpp[AppDomainX#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomainX/cpp/AppDomainX.cpp#1)]
 [!code-csharp[AppDomainX#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomainX/cs/AppDomainX.cs#1)]
 [!code-vb[AppDomainX#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomainX/VB/AppDomainX.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/07ea8438-7a34-49f0-a7e8-3d6ff7e4a482"><span data-ttu-id="d7ccd-128">如何：配置应用程序域</span><span class="sxs-lookup"><span data-stu-id="d7ccd-128">How To: Configure an Application Domain</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/ba1fa43e-49f5-47d9-bd7f-3024af16f4ba"><span data-ttu-id="d7ccd-129">如何：创建应用程序域</span><span class="sxs-lookup"><span data-stu-id="d7ccd-129">How To: Create an Application Domain</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/1432aa2d-bd83-4346-bf3b-a1b7920e2aa9"><span data-ttu-id="d7ccd-130">如何：将程序集加载到应用程序域中</span><span class="sxs-lookup"><span data-stu-id="d7ccd-130">How to: Load Assemblies into an Application Domain</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/f356116d-e415-4f7c-a332-6e6a60227192"><span data-ttu-id="d7ccd-131">如何：卸载应用程序域</span><span class="sxs-lookup"><span data-stu-id="d7ccd-131">How to: Unload an Application Domain</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="ActivationContext">
      <MemberSignature Language="C#" Value="public ActivationContext ActivationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ActivationContext ActivationContext" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.ActivationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActivationContext As ActivationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property ActivationContext ^ ActivationContext { ActivationContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ActivationContext : ActivationContext" Usage="System.AppDomain.ActivationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ActivationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7ccd-132">获取当前应用程序域的激活上下文。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-132">Gets the activation context for the current application domain.</span></span></summary>
        <value><span data-ttu-id="d7ccd-133">一个对象，表示当前应用程序域的激活上下文；或者如果域没有激活上下文，则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-133">An object that represents the activation context for the current application domain, or <see langword="null" /> if the domain has no activation context.</span></span></value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="d7ccd-134">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-134">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="d7ccd-135">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-135">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AppendPrivatePath">
      <MemberSignature Language="C#" Value="public void AppendPrivatePath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AppendPrivatePath(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.AppendPrivatePath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendPrivatePath (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AppendPrivatePath(System::String ^ path);" />
      <MemberSignature Language="F#" Value="abstract member AppendPrivatePath : string -&gt; unit&#xA;override this.AppendPrivatePath : string -&gt; unit" Usage="appDomain.AppendPrivatePath path" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.AppendPrivatePath(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("AppDomain.AppendPrivatePath has been deprecated. Please investigate the use of AppDomainSetup.PrivateBinPath instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("AppDomain.AppendPrivatePath has been deprecated. Please investigate the use of AppDomainSetup.PrivateBinPath instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="d7ccd-136">要追加到专用路径的目录名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-136">The name of the directory to be appended to the private path.</span></span></param>
        <summary><span data-ttu-id="d7ccd-137">将指定的目录名追加到专用路径列表。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-137">Appends the specified directory name to the private path list.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-138">不建议使用此属性，因为它可能会更改之后它们必须已经加载的程序集探测路径。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-138">The use of this property is not recommended, because it might change the probing path for assemblies after they have already been loaded.</span></span> <span data-ttu-id="d7ccd-139">改用 <xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=nameWithType> 属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-139">Use the <xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=nameWithType> property instead.</span></span>  
  
 <span data-ttu-id="d7ccd-140">专用路径或相对搜索路径是相对于程序集解析程序，探测专用程序集的基目录的路径。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-140">The private path, or relative search path, is the path relative to the base directory where the assembly resolver probes for private assemblies.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-141">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-141">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="d7ccd-142">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-142">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="d7ccd-143">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-143">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ApplicationIdentity">
      <MemberSignature Language="C#" Value="public ApplicationIdentity ApplicationIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ApplicationIdentity ApplicationIdentity" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.ApplicationIdentity" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ApplicationIdentity As ApplicationIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property ApplicationIdentity ^ ApplicationIdentity { ApplicationIdentity ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationIdentity : ApplicationIdentity" Usage="System.AppDomain.ApplicationIdentity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ApplicationIdentity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7ccd-144">获得应用程序域中的应用程序标识。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-144">Gets the identity of the application in the application domain.</span></span></summary>
        <value><span data-ttu-id="d7ccd-145">标识应用程序域中应用程序的对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-145">An object that identifies the application in the application domain.</span></span></value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="d7ccd-146">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-146">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="d7ccd-147">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-147">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ApplicationTrust">
      <MemberSignature Language="C#" Value="public System.Security.Policy.ApplicationTrust ApplicationTrust { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Policy.ApplicationTrust ApplicationTrust" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.ApplicationTrust" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ApplicationTrust As ApplicationTrust" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Policy::ApplicationTrust ^ ApplicationTrust { System::Security::Policy::ApplicationTrust ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationTrust : System.Security.Policy.ApplicationTrust" Usage="System.AppDomain.ApplicationTrust" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Policy.ApplicationTrust</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7ccd-148">获取说明授予应用程序的权限以及应用程序是否拥有允许其运行的信任级别的信息。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-148">Gets information describing permissions granted to an application and whether the application has a trust level that allows it to run.</span></span></summary>
        <value><span data-ttu-id="d7ccd-149">封装应用程序域中应用程序的权限及信任信息的对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-149">An object that encapsulates permission and trust information for the application in the application domain.</span></span></value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="d7ccd-150">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-150">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="d7ccd-151">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-151">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ApplyPolicy">
      <MemberSignature Language="C#" Value="public string ApplyPolicy (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ApplyPolicy(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ApplyPolicy(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyPolicy (assemblyName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ApplyPolicy(System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.ApplyPolicy : string -&gt; string" Usage="appDomain.ApplyPolicy assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="d7ccd-152">程序集显示名称，采用 <see cref="P:System.Reflection.Assembly.FullName" /> 属性提供的格式。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-152">The assembly display name, in the form provided by the <see cref="P:System.Reflection.Assembly.FullName" /> property.</span></span></param>
        <summary><span data-ttu-id="d7ccd-153">返回应用策略后的程序集显示名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-153">Returns the assembly display name after policy has been applied.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-154">包含应用策略后的程序集显示名称的字符串。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-154">A string containing the assembly display name after policy has been applied.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-155"><xref:System.AppDomain.ApplyPolicy%2A>方法采用程序集的显示名称，并返回策略后的显示名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-155">The <xref:System.AppDomain.ApplyPolicy%2A> method takes an assembly display name and returns the post-policy display name.</span></span> <span data-ttu-id="d7ccd-156">这是您需要加载使用策略、 程序集，因为仅反射上下文不适用于策略的情况下很有用。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-156">This is useful if you need to load an assembly using policy, because the reflection-only context does not apply policy.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyLoad">
      <MemberSignature Language="C#" Value="public event AssemblyLoadEventHandler AssemblyLoad;" />
      <MemberSignature Language="ILAsm" Value=".event class System.AssemblyLoadEventHandler AssemblyLoad" />
      <MemberSignature Language="DocId" Value="E:System.AppDomain.AssemblyLoad" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AssemblyLoad As AssemblyLoadEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event AssemblyLoadEventHandler ^ AssemblyLoad;" />
      <MemberSignature Language="F#" Value="member this.AssemblyLoad : AssemblyLoadEventHandler " Usage="member this.AssemblyLoad : System.AssemblyLoadEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System._AppDomain.AssemblyLoad</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AssemblyLoadEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7ccd-157">在加载程序集时发生。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-157">Occurs when an assembly is loaded.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-158"><xref:System.AssemblyLoadEventHandler>委托此事件指示哪些程序集被加载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-158">The <xref:System.AssemblyLoadEventHandler> delegate for this event indicates what assembly was loaded.</span></span>  
  
 <span data-ttu-id="d7ccd-159">若要注册此事件的事件处理程序，必须具有所需的权限，或<xref:System.Security.SecurityException>引发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-159">To register an event handler for this event, you must have the required permissions, or a <xref:System.Security.SecurityException> is thrown.</span></span>  
  
 <span data-ttu-id="d7ccd-160">有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-160">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-161">下面的示例演示如何<xref:System.AppDomain.AssemblyLoad>事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-161">The following sample demonstrates the <xref:System.AppDomain.AssemblyLoad> event.</span></span>  
  
 <span data-ttu-id="d7ccd-162">有关运行此代码示例，必须提供完全限定的程序集名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-162">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="d7ccd-163">有关如何获取完全限定的程序集名称的信息，请参阅[程序集名称](~/docs/framework/app-domains/assembly-names.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-163">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_AssemblyLoad#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_AssemblyLoad/CPP/assemblyload.cpp#1)]
 [!code-csharp[AppDomain_AssemblyLoad#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_AssemblyLoad/CS/assemblyload.cs#1)]
 [!code-vb[AppDomain_AssemblyLoad#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_AssemblyLoad/VB/assemblyload.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="d7ccd-164">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-164">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="d7ccd-165">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-165">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AssemblyResolve">
      <MemberSignature Language="C#" Value="public event ResolveEventHandler AssemblyResolve;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ResolveEventHandler AssemblyResolve" />
      <MemberSignature Language="DocId" Value="E:System.AppDomain.AssemblyResolve" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AssemblyResolve As ResolveEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event ResolveEventHandler ^ AssemblyResolve;" />
      <MemberSignature Language="F#" Value="member this.AssemblyResolve : ResolveEventHandler " Usage="member this.AssemblyResolve : System.ResolveEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System._AppDomain.AssemblyResolve</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ResolveEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7ccd-166">在对程序集的解析失败时发生。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-166">Occurs when the resolution of an assembly fails.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-167">它负责<xref:System.ResolveEventHandler>对于此事件，将返回该程序集指定<xref:System.ResolveEventArgs.Name%2A?displayProperty=nameWithType>属性，或返回空值，如果无法识别该程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-167">It is the responsibility of the <xref:System.ResolveEventHandler> for this event to return the assembly that is specified by the <xref:System.ResolveEventArgs.Name%2A?displayProperty=nameWithType> property, or to return null if the assembly is not recognized.</span></span> <span data-ttu-id="d7ccd-168">程序集必须加载到执行上下文;如果加载到只反射上下文中，导致引发此事件则加载会失败。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-168">The assembly must be loaded into an execution context; if it is loaded into the reflection-only context, the load that caused this event to be raised fails.</span></span>  
  
 <span data-ttu-id="d7ccd-169">使用此事件的指南，请参阅[解析程序集加载](~/docs/framework/app-domains/resolve-assembly-loads.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-169">For guidance on the use of this event, see [Resolving Assembly Loads](~/docs/framework/app-domains/resolve-assembly-loads.md).</span></span>  
  
 <span data-ttu-id="d7ccd-170">开头[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，则<xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType>属性返回请求无法解析的程序集加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-170">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the <xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType> property returns the assembly that requested the assembly load that could not be resolved.</span></span> <span data-ttu-id="d7ccd-171">例如，加载程序可能无法加载请求的程序集的依赖项，因为请求的程序集和其依赖项不在探测路径中。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-171">For example, the loader might be unable to load a dependency of the requesting assembly because the requesting assembly and its dependency are not in the probing path.</span></span> <span data-ttu-id="d7ccd-172">如果多个依赖项的版本可用，知道请求的程序集的标识可能很有用或标识正确的版本中，查找依赖项中。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-172">Knowing the identity of the requesting assembly might be useful in locating the dependency or in identifying the correct version, if more than one version of the dependency is available.</span></span> <span data-ttu-id="d7ccd-173">有关详情，请参阅<xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-173">For more information, see <xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d7ccd-174">开头[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]，则<xref:System.ResolveEventHandler>事件引发的所有程序集，包括资源程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-174">Beginning with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the <xref:System.ResolveEventHandler> event is raised for all assemblies, including resource assemblies.</span></span> <span data-ttu-id="d7ccd-175">在早期版本中的资源程序集不引发事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-175">In earlier versions, the event was not raised for resource assemblies.</span></span> <span data-ttu-id="d7ccd-176">如果本地化操作系统，则可能会调用处理程序多个时间： 为每个区域性回退链中的一次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-176">If the operating system is localized, the handler might be called multiple times: once for each culture in the fallback chain.</span></span>  
  
 <span data-ttu-id="d7ccd-177">对于此事件，<xref:System.ResolveEventArgs.Name%2A?displayProperty=nameWithType>属性返回的程序集名称之前应用策略。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-177">For this event, the <xref:System.ResolveEventArgs.Name%2A?displayProperty=nameWithType> property returns the assembly name before policy is applied.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d7ccd-178">如果此事件注册了多个事件处理程序，直到事件处理程序返回一个值的顺序事件 handlersarecalled 这并不是`null`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-178">If more than one event handler is registered for this event, the event handlersarecalled in order until an event handler returns a value that isn't `null`.</span></span> <span data-ttu-id="d7ccd-179">后续的事件处理程序将被忽略。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-179">Subsequent event handlers are ignored.</span></span>  
  
 <span data-ttu-id="d7ccd-180">有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-180">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-181">下面的示例演示如何<xref:System.AppDomain.AssemblyResolve>事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-181">The following sample demonstrates the <xref:System.AppDomain.AssemblyResolve> event.</span></span>  
  
 <span data-ttu-id="d7ccd-182">有关运行此代码示例，必须提供完全限定的程序集名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-182">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="d7ccd-183">有关如何获取完全限定的程序集名称的信息，请参阅[程序集名称](~/docs/framework/app-domains/assembly-names.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-183">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AssemblyResolve#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyResolve/CPP/assemblyresolve.cpp#1)]
 [!code-csharp[AssemblyResolve#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyResolve/CS/assemblyresolve.cs#1)]
 [!code-vb[AssemblyResolve#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyResolve/VB/assemblyresolve.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="d7ccd-184">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-184">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="d7ccd-185">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-185">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="P:System.ResolveEventArgs.RequestingAssembly" />
        <related type="Article" href="https://msdn.microsoft.com/library/5099e549-f4fd-49fb-a290-549edd456c6a"><span data-ttu-id="d7ccd-186">解决程序集加载</span><span class="sxs-lookup"><span data-stu-id="d7ccd-186">Resolving Assembly Loads</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BaseDirectory">
      <MemberSignature Language="C#" Value="public string BaseDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseDirectory" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.BaseDirectory" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BaseDirectory { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseDirectory : string" Usage="System.AppDomain.BaseDirectory" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System._AppDomain.BaseDirectory</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7ccd-187">获取基目录，它由程序集冲突解决程序用来探测程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-187">Gets the base directory that the assembly resolver uses to probe for assemblies.</span></span></summary>
        <value><span data-ttu-id="d7ccd-188">基目录，由程序集冲突解决程序用来探测程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-188">The base directory that the assembly resolver uses to probe for assemblies.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-189">此属性对应于<xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-189">This property corresponds to the <xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="d7ccd-190">它也可以检索使用<xref:System.AppDomain.GetData%2A>与字符串"APPBASE"的方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-190">It can also be retrieved using the <xref:System.AppDomain.GetData%2A> method with the string "APPBASE".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-191">下面的代码示例创建一个新的应用程序域，指定要加载到域中搜索的程序集时要使用的基目录。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-191">The following code example creates a new application domain, specifying a base directory to use when searching for assemblies to load into the domain.</span></span> <span data-ttu-id="d7ccd-192">该示例然后使用<xref:System.AppDomain.BaseDirectory%2A>属性获取的基目录路径，用于显示到控制台。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-192">The example then uses the <xref:System.AppDomain.BaseDirectory%2A> property to obtain the base directory path, for display to the console.</span></span>  
  
 [!code-cpp[ADSetup#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADSetup/CPP/adsetup.cpp#1)]
 [!code-csharp[ADSetup#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADSetup/CS/adsetup.cs#1)]
 [!code-vb[ADSetup#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADSetup/VB/adsetup.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-193">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-193">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="d7ccd-194">访问路径本身中的信息，如果包括路径采用的是窗体"file://"或\\\UNC\dir 或"c:\\"。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-194">for access to the information in the path itself, including if the path is in the form "file://" or \\\UNC\dir or "c:\\".</span></span> <span data-ttu-id="d7ccd-195">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-195">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <altmember cref="P:System.AppDomainSetup.ApplicationBase" />
      </Docs>
    </Member>
    <Member MemberName="ClearPrivatePath">
      <MemberSignature Language="C#" Value="public void ClearPrivatePath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearPrivatePath() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ClearPrivatePath" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearPrivatePath ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ClearPrivatePath();" />
      <MemberSignature Language="F#" Value="abstract member ClearPrivatePath : unit -&gt; unit&#xA;override this.ClearPrivatePath : unit -&gt; unit" Usage="appDomain.ClearPrivatePath " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.ClearPrivatePath</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("AppDomain.ClearPrivatePath has been deprecated. Please investigate the use of AppDomainSetup.PrivateBinPath instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("AppDomain.ClearPrivatePath has been deprecated. Please investigate the use of AppDomainSetup.PrivateBinPath instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d7ccd-196">将指定专用程序集位置的路径重置为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-196">Resets the path that specifies the location of private assemblies to the empty string ("").</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-197">专用路径是相对于公共语言运行时搜索来定位私有程序集的基目录的路径。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-197">The private path is a path relative to the base directory that the common language runtime searches to locate private assemblies.</span></span>  
  
 <span data-ttu-id="d7ccd-198">有关详情，请参阅<xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-198">For more information, see <xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-199">下面的代码示例演示如何使用<xref:System.AppDomain.ClearPrivatePath%2A>方法从时程序集都会加载用于搜索的专用路径列表中删除所有条目。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-199">The following code example demonstrates how to use the <xref:System.AppDomain.ClearPrivatePath%2A> method to remove all entries from the list of private paths to search when assemblies are loaded.</span></span>  
  
 <span data-ttu-id="d7ccd-200">此方法现已过时，并且不应使用新的开发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-200">This method is now obsolete, and should not be used for new development.</span></span>  
  
 [!code-cpp[ADClearPrivatePath#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADClearPrivatePath/CPP/adclearprivatepath.cpp#1)]
 [!code-csharp[ADClearPrivatePath#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADClearPrivatePath/CS/adclearprivatepath.cs#1)]
 [!code-vb[ADClearPrivatePath#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADClearPrivatePath/VB/adclearprivatepath.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-201">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-201">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="d7ccd-202">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-202">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="d7ccd-203">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-203">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="F:System.String.Empty" />
      </Docs>
    </Member>
    <Member MemberName="ClearShadowCopyPath">
      <MemberSignature Language="C#" Value="public void ClearShadowCopyPath ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearShadowCopyPath() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ClearShadowCopyPath" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearShadowCopyPath ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ClearShadowCopyPath();" />
      <MemberSignature Language="F#" Value="abstract member ClearShadowCopyPath : unit -&gt; unit&#xA;override this.ClearShadowCopyPath : unit -&gt; unit" Usage="appDomain.ClearShadowCopyPath " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.ClearShadowCopyPath</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use AppDomainSetup.ShadowCopyDirectories")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("AppDomain.ClearShadowCopyPath has been deprecated. Please investigate the use of AppDomainSetup.ShadowCopyDirectories instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d7ccd-204">将包含影像复制的程序集的目录列表重置为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-204">Resets the list of directories containing shadow copied assemblies to the empty string ("").</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-205">卷影复制路径是存储的卷影复制程序集的位置的目录列表。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-205">The shadow copy path is a list of directories where shadow copied assemblies are stored.</span></span>  
  
 <span data-ttu-id="d7ccd-206">有关详细信息，请参阅<xref:System.AppDomainSetup.ShadowCopyDirectories%2A?displayProperty=nameWithType>并[卷影复制程序集](~/docs/framework/app-domains/shadow-copy-assemblies.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-206">For more information, see <xref:System.AppDomainSetup.ShadowCopyDirectories%2A?displayProperty=nameWithType> and [Shadow Copying Assemblies](~/docs/framework/app-domains/shadow-copy-assemblies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-207">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-207">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="d7ccd-208">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-208">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="d7ccd-209">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-209">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="F:System.String.Empty" />
        <related type="Article" href="~/docs/framework/app-domains/shadow-copy-assemblies.md"><span data-ttu-id="d7ccd-210">卷影复制程序集</span><span class="sxs-lookup"><span data-stu-id="d7ccd-210">Shadow Copying Assemblies</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateComInstanceFrom">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d7ccd-211">创建指定 COM 类型的新实例。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-211">Creates a new instance of a specified COM type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateComInstanceFrom">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom (string assemblyName, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom(string assemblyName, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateComInstanceFrom (assemblyName As String, typeName As String) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::Remoting::ObjectHandle ^ CreateComInstanceFrom(System::String ^ assemblyName, System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.CreateComInstanceFrom : string * string -&gt; System.Runtime.Remoting.ObjectHandle" Usage="appDomain.CreateComInstanceFrom (assemblyName, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="d7ccd-212">文件的名称，该文件包含定义所请求的类型的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-212">The name of a file containing an assembly that defines the requested type.</span></span></param>
        <param name="typeName"><span data-ttu-id="d7ccd-213">所请求类型的名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-213">The name of the requested type.</span></span></param>
        <summary><span data-ttu-id="d7ccd-214">创建指定 COM 类型的新实例。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-214">Creates a new instance of a specified COM type.</span></span> <span data-ttu-id="d7ccd-215">形参指定文件的名称，该文件包含含有类型和类型名称的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-215">Parameters specify the name of a file that contains an assembly containing the type and the name of the type.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-216">一个对象，该对象是 <paramref name="typeName" /> 指定的新实例的包装。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-216">An object that is a wrapper for the new instance specified by <paramref name="typeName" />.</span></span> <span data-ttu-id="d7ccd-217">返回值需要打开包装才能访问真实对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-217">The return value needs to be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-218">使用此方法以远程创建对象，而无需本地加载该类型。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-218">Use this method to create objects remotely without having to load the type locally.</span></span>  
  
 <span data-ttu-id="d7ccd-219">返回值必须为打开包装才能访问真实对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-219">The return value must to be unwrapped to access the real object.</span></span>  
  
 <span data-ttu-id="d7ccd-220">一个<xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=nameWithType>值的属性`true`必须应用显式或默认情况下对此方法的 COM 类型，创建该类型; 的实例为<xref:System.TypeLoadException>引发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-220">A <xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=nameWithType> attribute with a value of `true` must be applied either explicitly or by default to the COM type for this method to create an instance of that type; otherwise, <xref:System.TypeLoadException> is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-221">下面的示例演示如何</span><span class="sxs-lookup"><span data-stu-id="d7ccd-221">The following sample demonstrates</span></span>  
  
 [!code-cpp[AppDomain_CreateComInstanceFrom#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_CreateComInstanceFrom/CPP/createcominstancefrom.cpp#1)]
 [!code-csharp[AppDomain_CreateComInstanceFrom#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_CreateComInstanceFrom/CS/createcominstancefrom.cs#1)]
 [!code-vb[AppDomain_CreateComInstanceFrom#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_CreateComInstanceFrom/VB/createcominstancefrom.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-222"><paramref name="assemblyName" /> 或 <paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-222"><paramref name="assemblyName" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="d7ccd-223">无法加载此类型。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-223">The type cannot be loaded.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-224">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-224">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="d7ccd-225">未找到公共无形参构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-225">No public parameterless constructor was found.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-226"><paramref name="assemblyName" /> 未找到。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-226"><paramref name="assemblyName" /> is not found.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="d7ccd-227"><paramref name="typeName" /> 是一个抽象类。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-227"><paramref name="typeName" /> is an abstract class.</span></span>  
  
<span data-ttu-id="d7ccd-228">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-228">-or-</span></span> 
<span data-ttu-id="d7ccd-229">使用晚期绑定机制调用了此成员。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-229">This member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7ccd-230">调用方不能为非继承自 <see cref="T:System.MarshalByRefObject" /> 的对象提供激活属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-230">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7ccd-231"><paramref name="assemblyName" /> 为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-231"><paramref name="assemblyName" /> is an empty string ("").</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-232"><paramref name="assemblyName" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-232"><paramref name="assemblyName" /> is not a valid assembly.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-233">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-233">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="d7ccd-234">所引用的 COM 对象为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-234">The COM object that is being referred to is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="d7ccd-235">它能够读取包含程序集清单的文件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-235">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="d7ccd-236">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="d7ccd-236">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-237">它能够访问的程序集的位置，如果该程序集不在本地。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-237">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <altmember cref="M:System.Activator.CreateComInstanceFrom(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateComInstanceFrom">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom (string assemblyFile, string typeName, byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom(string assemblyFile, string typeName, unsigned int8[] hashValue, valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateComInstanceFrom(System.String,System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateComInstanceFrom (assemblyFile As String, typeName As String, hashValue As Byte(), hashAlgorithm As AssemblyHashAlgorithm) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::Remoting::ObjectHandle ^ CreateComInstanceFrom(System::String ^ assemblyFile, System::String ^ typeName, cli::array &lt;System::Byte&gt; ^ hashValue, System::Configuration::Assemblies::AssemblyHashAlgorithm hashAlgorithm);" />
      <MemberSignature Language="F#" Value="member this.CreateComInstanceFrom : string * string * byte[] * System.Configuration.Assemblies.AssemblyHashAlgorithm -&gt; System.Runtime.Remoting.ObjectHandle" Usage="appDomain.CreateComInstanceFrom (assemblyFile, typeName, hashValue, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="hashValue" Type="System.Byte[]" />
        <Parameter Name="hashAlgorithm" Type="System.Configuration.Assemblies.AssemblyHashAlgorithm" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="d7ccd-238">文件的名称，该文件包含定义所请求的类型的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-238">The name of a file containing an assembly that defines the requested type.</span></span></param>
        <param name="typeName"><span data-ttu-id="d7ccd-239">所请求类型的名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-239">The name of the requested type.</span></span></param>
        <param name="hashValue"><span data-ttu-id="d7ccd-240">表示计算所得的哈希代码的值。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-240">Represents the value of the computed hash code.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="d7ccd-241">表示程序集清单使用的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-241">Represents the hash algorithm used by the assembly manifest.</span></span></param>
        <summary><span data-ttu-id="d7ccd-242">创建指定 COM 类型的新实例。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-242">Creates a new instance of a specified COM type.</span></span> <span data-ttu-id="d7ccd-243">形参指定文件的名称，该文件包含含有类型和类型名称的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-243">Parameters specify the name of a file that contains an assembly containing the type and the name of the type.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-244">一个对象，该对象是 <paramref name="typeName" /> 指定的新实例的包装。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-244">An object that is a wrapper for the new instance specified by <paramref name="typeName" />.</span></span> <span data-ttu-id="d7ccd-245">返回值需要打开包装才能访问真实对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-245">The return value needs to be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-246">使用此方法以远程创建对象，而无需本地加载该类型。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-246">Use this method to create objects remotely without having to load the type locally.</span></span>  
  
 <span data-ttu-id="d7ccd-247">返回值必须为打开包装才能访问真实对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-247">The return value must to be unwrapped to access the real object.</span></span>  
  
 <span data-ttu-id="d7ccd-248">一个<xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=nameWithType>值的属性`true`必须应用显式或默认情况下对此方法的 COM 类型，创建该类型; 的实例为<xref:System.TypeLoadException>引发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-248">A <xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=nameWithType> attribute with a value of `true` must be applied either explicitly or by default to the COM type for this method to create an instance of that type; otherwise, <xref:System.TypeLoadException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-249"><paramref name="assemblyName" /> 或 <paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-249"><paramref name="assemblyName" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="d7ccd-250">无法加载此类型。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-250">The type cannot be loaded.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-251">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-251">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="d7ccd-252">未找到公共无形参构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-252">No public parameterless constructor was found.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-253"><paramref name="assemblyFile" /> 未找到。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-253"><paramref name="assemblyFile" /> is not found.</span></span></exception>
        <exception cref="T:System.MemberAccessException"><span data-ttu-id="d7ccd-254"><paramref name="typeName" /> 是一个抽象类。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-254"><paramref name="typeName" /> is an abstract class.</span></span>  
  
<span data-ttu-id="d7ccd-255">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-255">-or-</span></span> 
<span data-ttu-id="d7ccd-256">使用晚期绑定机制调用了此成员。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-256">This member was invoked with a late-binding mechanism.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7ccd-257">调用方不能为非继承自 <see cref="T:System.MarshalByRefObject" /> 的对象提供激活属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-257">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7ccd-258"><paramref name="assemblyFile" /> 为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-258"><paramref name="assemblyFile" /> is the empty string ("").</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-259"><paramref name="assemblyFile" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-259"><paramref name="assemblyFile" /> is not a valid assembly.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-260">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-260">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="d7ccd-261">所引用的 COM 对象为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-261">The COM object that is being referred to is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="d7ccd-262">它能够读取包含程序集清单的文件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-262">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="d7ccd-263">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="d7ccd-263">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-264">它能够访问的程序集的位置，如果该程序集不在本地。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-264">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <altmember cref="M:System.Activator.CreateComInstanceFrom(System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDomain">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d7ccd-265">创建新的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-265">Creates a new application domain.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDomain">
      <MemberSignature Language="C#" Value="public static AppDomain CreateDomain (string friendlyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AppDomain CreateDomain(string friendlyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateDomain(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDomain (friendlyName As String) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static AppDomain ^ CreateDomain(System::String ^ friendlyName);" />
      <MemberSignature Language="F#" Value="static member CreateDomain : string -&gt; AppDomain" Usage="System.AppDomain.CreateDomain friendlyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="friendlyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="friendlyName"><span data-ttu-id="d7ccd-266">域的友好名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-266">The friendly name of the domain.</span></span></param>
        <summary><span data-ttu-id="d7ccd-267">使用指定的名称新建应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-267">Creates a new application domain with the specified name.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-268">新创建的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-268">The newly created application domain.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-269">`friendlyName`参数用于确定对人类有意义的方式中的域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-269">The `friendlyName` parameter is intended to identify the domain in a manner that is meaningful to humans.</span></span> <span data-ttu-id="d7ccd-270">此字符串应适合在用户界面中显示。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-270">This string should be suitable for display in user interfaces.</span></span>  
  
 <span data-ttu-id="d7ccd-271">此方法的重载使用<xref:System.AppDomainSetup>默认应用程序域中的信息。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-271">This method overload uses the <xref:System.AppDomainSetup> information from the default application domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-272">下面的示例演示一般情况下，如何创建使用其中一个域<xref:System.AppDomain.CreateDomain%2A>重载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-272">The following sample demonstrates, in general, how to create a domain using one of the <xref:System.AppDomain.CreateDomain%2A> overloads.</span></span>  
  
 [!code-cpp[AppDomain_Setup#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_Setup/CPP/setup.cpp#1)]
 [!code-csharp[AppDomain_Setup#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_Setup/CS/setup.cs#1)]
 [!code-vb[AppDomain_Setup#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_Setup/VB/setup.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-273"><paramref name="friendlyName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-273"><paramref name="friendlyName" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-274">若要提供的证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-274">to provide evidence.</span></span> <span data-ttu-id="d7ccd-275">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-275">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <altmember cref="P:System.AppDomain.FriendlyName" />
      </Docs>
    </Member>
    <Member MemberName="CreateDomain">
      <MemberSignature Language="C#" Value="public static AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AppDomain CreateDomain(string friendlyName, class System.Security.Policy.Evidence securityInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDomain (friendlyName As String, securityInfo As Evidence) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static AppDomain ^ CreateDomain(System::String ^ friendlyName, System::Security::Policy::Evidence ^ securityInfo);" />
      <MemberSignature Language="F#" Value="static member CreateDomain : string * System.Security.Policy.Evidence -&gt; AppDomain" Usage="System.AppDomain.CreateDomain (friendlyName, securityInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="friendlyName" Type="System.String" />
        <Parameter Name="securityInfo" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="friendlyName"><span data-ttu-id="d7ccd-276">域的友好名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-276">The friendly name of the domain.</span></span> <span data-ttu-id="d7ccd-277">此友好名称可在用户界面中显示以标识域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-277">This friendly name can be displayed in user interfaces to identify the domain.</span></span> <span data-ttu-id="d7ccd-278">有关详情，请参阅<see cref="P:System.AppDomain.FriendlyName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-278">For more information, see <see cref="P:System.AppDomain.FriendlyName" />.</span></span></param>
        <param name="securityInfo"><span data-ttu-id="d7ccd-279">确定代码标识的证据，该代码在应用程序域中运行。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-279">Evidence that establishes the identity of the code that runs in the application domain.</span></span> <span data-ttu-id="d7ccd-280">传递 <see langword="null" /> 以使用当前应用程序域的证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-280">Pass <see langword="null" /> to use the evidence of the current application domain.</span></span></param>
        <summary><span data-ttu-id="d7ccd-281">使用所提供的证据创建具有给定名称的新应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-281">Creates a new application domain with the given name using the supplied evidence.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-282">新创建的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-282">The newly created application domain.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-283">此方法的重载使用<xref:System.AppDomainSetup>默认应用程序域中的信息。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-283">This method overload uses the <xref:System.AppDomainSetup> information from the default application domain.</span></span>  
  
 <span data-ttu-id="d7ccd-284">如果`securityInfo`是未提供，使用从当前的应用程序域证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-284">If `securityInfo` is not supplied, the evidence from the current application domain is used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d7ccd-285">不使用此方法的重载来创建沙盒应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-285">Do not use this method overload to create sandboxed application domains.</span></span> <span data-ttu-id="d7ccd-286">开头[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，为提供的证据`securityInfo`不会再影响应用程序域的授予集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-286">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the evidence that is supplied for `securityInfo` no longer affects the grant set of the application domain.</span></span> <span data-ttu-id="d7ccd-287">使用<xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29>方法重载来创建沙盒应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-287">Use the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29> method overload to create sandboxed application domains.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-288">下面的示例演示一般情况下，如何创建使用其中一个域<xref:System.AppDomain.CreateDomain%2A>重载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-288">The following sample demonstrates, in general, how to create a domain using one of the <xref:System.AppDomain.CreateDomain%2A> overloads.</span></span>  
  
 [!code-cpp[AppDomain_Setup#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_Setup/CPP/setup.cpp#1)]
 [!code-csharp[AppDomain_Setup#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_Setup/CS/setup.cs#1)]
 [!code-vb[AppDomain_Setup#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_Setup/VB/setup.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-289"><paramref name="friendlyName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-289"><paramref name="friendlyName" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-290">若要提供的证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-290">to provide evidence.</span></span> <span data-ttu-id="d7ccd-291">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-291">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateDomain">
      <MemberSignature Language="C#" Value="public static AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo, AppDomainSetup info);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AppDomain CreateDomain(string friendlyName, class System.Security.Policy.Evidence securityInfo, class System.AppDomainSetup info) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDomain (friendlyName As String, securityInfo As Evidence, info As AppDomainSetup) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static AppDomain ^ CreateDomain(System::String ^ friendlyName, System::Security::Policy::Evidence ^ securityInfo, AppDomainSetup ^ info);" />
      <MemberSignature Language="F#" Value="static member CreateDomain : string * System.Security.Policy.Evidence * AppDomainSetup -&gt; AppDomain" Usage="System.AppDomain.CreateDomain (friendlyName, securityInfo, info)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="friendlyName" Type="System.String" />
        <Parameter Name="securityInfo" Type="System.Security.Policy.Evidence" />
        <Parameter Name="info" Type="System.AppDomainSetup" />
      </Parameters>
      <Docs>
        <param name="friendlyName"><span data-ttu-id="d7ccd-292">域的友好名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-292">The friendly name of the domain.</span></span> <span data-ttu-id="d7ccd-293">此友好名称可在用户界面中显示以标识域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-293">This friendly name can be displayed in user interfaces to identify the domain.</span></span> <span data-ttu-id="d7ccd-294">有关详情，请参阅<see cref="P:System.AppDomain.FriendlyName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-294">For more information, see <see cref="P:System.AppDomain.FriendlyName" />.</span></span></param>
        <param name="securityInfo"><span data-ttu-id="d7ccd-295">确定代码标识的证据，该代码在应用程序域中运行。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-295">Evidence that establishes the identity of the code that runs in the application domain.</span></span> <span data-ttu-id="d7ccd-296">传递 <see langword="null" /> 以使用当前应用程序域的证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-296">Pass <see langword="null" /> to use the evidence of the current application domain.</span></span></param>
        <param name="info"><span data-ttu-id="d7ccd-297">包含应用程序域初始化信息的对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-297">An object that contains application domain initialization information.</span></span></param>
        <summary><span data-ttu-id="d7ccd-298">使用指定的名称、证据和应用程序域设置信息创建新的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-298">Creates a new application domain using the specified name, evidence, and application domain setup information.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-299">新创建的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-299">The newly created application domain.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-300">如果`info`是未提供，此方法的重载使用<xref:System.AppDomainSetup>默认应用程序域中的信息。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-300">If `info` is not supplied, this method overload uses the <xref:System.AppDomainSetup> information from the default application domain.</span></span>  
  
 <span data-ttu-id="d7ccd-301">如果`securityInfo`是未提供，使用从当前的应用程序域证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-301">If `securityInfo` is not supplied, the evidence from the current application domain is used.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d7ccd-302">不使用此方法的重载来创建沙盒应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-302">Do not use this method overload to create sandboxed application domains.</span></span> <span data-ttu-id="d7ccd-303">开头[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，为提供的证据`securityInfo`不会再影响应用程序域的授予集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-303">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the evidence that is supplied for `securityInfo` no longer affects the grant set of the application domain.</span></span> <span data-ttu-id="d7ccd-304">使用<xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29>方法重载来创建沙盒应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-304">Use the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29> method overload to create sandboxed application domains.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-305">下面的示例演示一般情况下，如何创建使用其中一个域<xref:System.AppDomain.CreateDomain%2A>重载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-305">The following sample demonstrates, in general, how to create a domain using one of the <xref:System.AppDomain.CreateDomain%2A> overloads.</span></span>  
  
 [!code-cpp[AppDomain_Setup#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_Setup/CPP/setup.cpp#1)]
 [!code-csharp[AppDomain_Setup#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_Setup/CS/setup.cs#1)]
 [!code-vb[AppDomain_Setup#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_Setup/VB/setup.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-306"><paramref name="friendlyName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-306"><paramref name="friendlyName" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-307">若要提供的证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-307">to provide evidence.</span></span> <span data-ttu-id="d7ccd-308">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-308">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateDomain">
      <MemberSignature Language="C#" Value="public static AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo, AppDomainSetup info, System.Security.PermissionSet grantSet, params System.Security.Policy.StrongName[] fullTrustAssemblies);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AppDomain CreateDomain(string friendlyName, class System.Security.Policy.Evidence securityInfo, class System.AppDomainSetup info, class System.Security.PermissionSet grantSet, class System.Security.Policy.StrongName[] fullTrustAssemblies) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDomain (friendlyName As String, securityInfo As Evidence, info As AppDomainSetup, grantSet As PermissionSet, ParamArray fullTrustAssemblies As StrongName()) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static AppDomain ^ CreateDomain(System::String ^ friendlyName, System::Security::Policy::Evidence ^ securityInfo, AppDomainSetup ^ info, System::Security::PermissionSet ^ grantSet, ... cli::array &lt;System::Security::Policy::StrongName ^&gt; ^ fullTrustAssemblies);" />
      <MemberSignature Language="F#" Value="static member CreateDomain : string * System.Security.Policy.Evidence * AppDomainSetup * System.Security.PermissionSet * System.Security.Policy.StrongName[] -&gt; AppDomain" Usage="System.AppDomain.CreateDomain (friendlyName, securityInfo, info, grantSet, fullTrustAssemblies)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="friendlyName" Type="System.String" />
        <Parameter Name="securityInfo" Type="System.Security.Policy.Evidence" />
        <Parameter Name="info" Type="System.AppDomainSetup" />
        <Parameter Name="grantSet" Type="System.Security.PermissionSet" />
        <Parameter Name="fullTrustAssemblies" Type="System.Security.Policy.StrongName[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="friendlyName"><span data-ttu-id="d7ccd-309">域的友好名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-309">The friendly name of the domain.</span></span> <span data-ttu-id="d7ccd-310">此友好名称可在用户界面中显示以标识域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-310">This friendly name can be displayed in user interfaces to identify the domain.</span></span> <span data-ttu-id="d7ccd-311">有关更多信息，请参见 <see cref="P:System.AppDomain.FriendlyName" /> 的说明。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-311">For more information, see the description of <see cref="P:System.AppDomain.FriendlyName" />.</span></span></param>
        <param name="securityInfo"><span data-ttu-id="d7ccd-312">确定代码标识的证据，该代码在应用程序域中运行。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-312">Evidence that establishes the identity of the code that runs in the application domain.</span></span> <span data-ttu-id="d7ccd-313">传递 <see langword="null" /> 以使用当前应用程序域的证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-313">Pass <see langword="null" /> to use the evidence of the current application domain.</span></span></param>
        <param name="info"><span data-ttu-id="d7ccd-314">包含应用程序域初始化信息的对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-314">An object that contains application domain initialization information.</span></span></param>
        <param name="grantSet"><span data-ttu-id="d7ccd-315">一个默认权限集，被授予加载到新应用程序域的所有无特定权限的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-315">A default permission set that is granted to all assemblies loaded into the new application domain that do not have specific grants.</span></span></param>
        <param name="fullTrustAssemblies"><span data-ttu-id="d7ccd-316">一组强名称，表示在新应用程序域中被认为完全受信任的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-316">An array of strong names representing assemblies to be considered fully trusted in the new application domain.</span></span></param>
        <summary><span data-ttu-id="d7ccd-317">使用指定的名称、证据、应用程序域设置信息、默认权限集和一组完全受信任的程序集创建新的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-317">Creates a new application domain using the specified name, evidence, application domain setup information, default permission set, and array of fully trusted assemblies.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-318">新创建的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-318">The newly created application domain.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-319">必须设置<xref:System.AppDomainSetup.ApplicationBase%2A>的属性<xref:System.AppDomainSetup>对象，它提供有关`info`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-319">You must set the <xref:System.AppDomainSetup.ApplicationBase%2A> property of the <xref:System.AppDomainSetup> object that you supply for `info`.</span></span> <span data-ttu-id="d7ccd-320">否则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-320">Otherwise, an exception is thrown.</span></span>  
  
 <span data-ttu-id="d7ccd-321">如果`securityInfo`是未提供，使用从当前的应用程序域证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-321">If `securityInfo` is not supplied, the evidence from the current application domain is used.</span></span>  
  
 <span data-ttu-id="d7ccd-322">为提供的信息`grantSet`并`fullTrustAssemblies`用于创建<xref:System.Security.Policy.ApplicationTrust>新的应用程序域的对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-322">The information provided for `grantSet` and `fullTrustAssemblies` is used to create an <xref:System.Security.Policy.ApplicationTrust> object for the new application domain.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-323"><paramref name="friendlyName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-323"><paramref name="friendlyName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7ccd-324">应用程序域为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-324">The application domain is <see langword="null" />.</span></span>  
  
<span data-ttu-id="d7ccd-325">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-325">-or-</span></span> 
<span data-ttu-id="d7ccd-326"><see cref="P:System.AppDomainSetup.ApplicationBase" /> 属性在为 <paramref name="info" /> 提供的 <see cref="T:System.AppDomainSetup" /> 对象上没有设置。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-326">The <see cref="P:System.AppDomainSetup.ApplicationBase" /> property is not set on the <see cref="T:System.AppDomainSetup" /> object that is supplied for <paramref name="info" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-327">有关创建和操作应用程序域的功能。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-327">for the ability to create and manipulate an application domain.</span></span> <span data-ttu-id="d7ccd-328">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-328">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain" />.</span></span> <span data-ttu-id="d7ccd-329">安全操作： <see cref="F:System.Security.Permissions.SecurityAction.Demand" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-329">Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateDomain">
      <MemberSignature Language="C#" Value="public static AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo, string appBasePath, string appRelativeSearchPath, bool shadowCopyFiles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AppDomain CreateDomain(string friendlyName, class System.Security.Policy.Evidence securityInfo, string appBasePath, string appRelativeSearchPath, bool shadowCopyFiles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDomain (friendlyName As String, securityInfo As Evidence, appBasePath As String, appRelativeSearchPath As String, shadowCopyFiles As Boolean) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static AppDomain ^ CreateDomain(System::String ^ friendlyName, System::Security::Policy::Evidence ^ securityInfo, System::String ^ appBasePath, System::String ^ appRelativeSearchPath, bool shadowCopyFiles);" />
      <MemberSignature Language="F#" Value="static member CreateDomain : string * System.Security.Policy.Evidence * string * string * bool -&gt; AppDomain" Usage="System.AppDomain.CreateDomain (friendlyName, securityInfo, appBasePath, appRelativeSearchPath, shadowCopyFiles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="friendlyName" Type="System.String" />
        <Parameter Name="securityInfo" Type="System.Security.Policy.Evidence" />
        <Parameter Name="appBasePath" Type="System.String" />
        <Parameter Name="appRelativeSearchPath" Type="System.String" />
        <Parameter Name="shadowCopyFiles" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="friendlyName"><span data-ttu-id="d7ccd-330">域的友好名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-330">The friendly name of the domain.</span></span> <span data-ttu-id="d7ccd-331">此友好名称可在用户界面中显示以标识域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-331">This friendly name can be displayed in user interfaces to identify the domain.</span></span> <span data-ttu-id="d7ccd-332">有关详情，请参阅<see cref="P:System.AppDomain.FriendlyName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-332">For more information, see <see cref="P:System.AppDomain.FriendlyName" />.</span></span></param>
        <param name="securityInfo"><span data-ttu-id="d7ccd-333">确定代码标识的证据，该代码在应用程序域中运行。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-333">Evidence that establishes the identity of the code that runs in the application domain.</span></span> <span data-ttu-id="d7ccd-334">传递 <see langword="null" /> 以使用当前应用程序域的证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-334">Pass <see langword="null" /> to use the evidence of the current application domain.</span></span></param>
        <param name="appBasePath"><span data-ttu-id="d7ccd-335">基目录，由程序集冲突解决程序用来探测程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-335">The base directory that the assembly resolver uses to probe for assemblies.</span></span> <span data-ttu-id="d7ccd-336">有关详情，请参阅<see cref="P:System.AppDomain.BaseDirectory" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-336">For more information, see <see cref="P:System.AppDomain.BaseDirectory" />.</span></span></param>
        <param name="appRelativeSearchPath"><span data-ttu-id="d7ccd-337">相对于基目录的路径，在此程序集冲突解决程序应探测专用程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-337">The path relative to the base directory where the assembly resolver should probe for private assemblies.</span></span> <span data-ttu-id="d7ccd-338">有关详情，请参阅<see cref="P:System.AppDomain.RelativeSearchPath" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-338">For more information, see <see cref="P:System.AppDomain.RelativeSearchPath" />.</span></span></param>
        <param name="shadowCopyFiles"><span data-ttu-id="d7ccd-339">如果为 <see langword="true" />，则向此应用程序域中加载程序集的卷影副本。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-339">If <see langword="true" />, a shadow copy of an assembly is loaded into this application domain.</span></span></param>
        <summary><span data-ttu-id="d7ccd-340">使用证据、应用程序基路径、相对搜索路径和指定是否向应用程序域中加载程序集的影像副本的形参创建具有给定名称的新应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-340">Creates a new application domain with the given name, using evidence, application base path, relative search path, and a parameter that specifies whether a shadow copy of an assembly is to be loaded into the application domain.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-341">新创建的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-341">The newly created application domain.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-342">如果`securityInfo`是未提供，使用从当前的应用程序域证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-342">If `securityInfo` is not supplied, the evidence from the current application domain is used.</span></span>  
  
 <span data-ttu-id="d7ccd-343">有关卷影复制的详细信息，请参阅<xref:System.AppDomain.ShadowCopyFiles%2A>并[卷影复制程序集](~/docs/framework/app-domains/shadow-copy-assemblies.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-343">For more information about shadow copying, see <xref:System.AppDomain.ShadowCopyFiles%2A> and [Shadow Copying Assemblies](~/docs/framework/app-domains/shadow-copy-assemblies.md).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d7ccd-344">不使用此方法的重载来创建沙盒应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-344">Do not use this method overload to create sandboxed application domains.</span></span> <span data-ttu-id="d7ccd-345">开头[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，为提供的证据`securityInfo`不会再影响应用程序域的授予集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-345">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the evidence that is supplied for `securityInfo` no longer affects the grant set of the application domain.</span></span> <span data-ttu-id="d7ccd-346">使用<xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29>方法重载来创建沙盒应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-346">Use the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29> method overload to create sandboxed application domains.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-347">下面的示例演示一般情况下，如何创建使用其中一个域<xref:System.AppDomain.CreateDomain%2A>重载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-347">The following sample demonstrates, in general, how to create a domain using one of the <xref:System.AppDomain.CreateDomain%2A> overloads.</span></span>  
  
 [!code-cpp[AppDomain_Setup#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_Setup/CPP/setup.cpp#1)]
 [!code-csharp[AppDomain_Setup#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_Setup/CS/setup.cs#1)]
 [!code-vb[AppDomain_Setup#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_Setup/VB/setup.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-348"><paramref name="friendlyName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-348"><paramref name="friendlyName" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-349">若要提供的证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-349">to provide evidence.</span></span> <span data-ttu-id="d7ccd-350">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-350">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="CreateDomain">
      <MemberSignature Language="C#" Value="public static AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo, string appBasePath, string appRelativeSearchPath, bool shadowCopyFiles, AppDomainInitializer adInit, string[] adInitArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AppDomain CreateDomain(string friendlyName, class System.Security.Policy.Evidence securityInfo, string appBasePath, string appRelativeSearchPath, bool shadowCopyFiles, class System.AppDomainInitializer adInit, string[] adInitArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean,System.AppDomainInitializer,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateDomain (friendlyName As String, securityInfo As Evidence, appBasePath As String, appRelativeSearchPath As String, shadowCopyFiles As Boolean, adInit As AppDomainInitializer, adInitArgs As String()) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static AppDomain ^ CreateDomain(System::String ^ friendlyName, System::Security::Policy::Evidence ^ securityInfo, System::String ^ appBasePath, System::String ^ appRelativeSearchPath, bool shadowCopyFiles, AppDomainInitializer ^ adInit, cli::array &lt;System::String ^&gt; ^ adInitArgs);" />
      <MemberSignature Language="F#" Value="static member CreateDomain : string * System.Security.Policy.Evidence * string * string * bool * AppDomainInitializer * string[] -&gt; AppDomain" Usage="System.AppDomain.CreateDomain (friendlyName, securityInfo, appBasePath, appRelativeSearchPath, shadowCopyFiles, adInit, adInitArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="friendlyName" Type="System.String" />
        <Parameter Name="securityInfo" Type="System.Security.Policy.Evidence" />
        <Parameter Name="appBasePath" Type="System.String" />
        <Parameter Name="appRelativeSearchPath" Type="System.String" />
        <Parameter Name="shadowCopyFiles" Type="System.Boolean" />
        <Parameter Name="adInit" Type="System.AppDomainInitializer" />
        <Parameter Name="adInitArgs" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="friendlyName"><span data-ttu-id="d7ccd-351">域的友好名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-351">The friendly name of the domain.</span></span> <span data-ttu-id="d7ccd-352">此友好名称可在用户界面中显示以标识域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-352">This friendly name can be displayed in user interfaces to identify the domain.</span></span> <span data-ttu-id="d7ccd-353">有关详情，请参阅<see cref="P:System.AppDomain.FriendlyName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-353">For more information, see <see cref="P:System.AppDomain.FriendlyName" />.</span></span></param>
        <param name="securityInfo"><span data-ttu-id="d7ccd-354">确定代码标识的证据，该代码在应用程序域中运行。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-354">Evidence that establishes the identity of the code that runs in the application domain.</span></span> <span data-ttu-id="d7ccd-355">传递 <see langword="null" /> 以使用当前应用程序域的证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-355">Pass <see langword="null" /> to use the evidence of the current application domain.</span></span></param>
        <param name="appBasePath"><span data-ttu-id="d7ccd-356">基目录，由程序集冲突解决程序用来探测程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-356">The base directory that the assembly resolver uses to probe for assemblies.</span></span> <span data-ttu-id="d7ccd-357">有关详情，请参阅<see cref="P:System.AppDomain.BaseDirectory" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-357">For more information, see <see cref="P:System.AppDomain.BaseDirectory" />.</span></span></param>
        <param name="appRelativeSearchPath"><span data-ttu-id="d7ccd-358">相对于基目录的路径，在此程序集冲突解决程序应探测专用程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-358">The path relative to the base directory where the assembly resolver should probe for private assemblies.</span></span> <span data-ttu-id="d7ccd-359">有关详情，请参阅<see cref="P:System.AppDomain.RelativeSearchPath" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-359">For more information, see <see cref="P:System.AppDomain.RelativeSearchPath" />.</span></span></param>
        <param name="shadowCopyFiles"><span data-ttu-id="d7ccd-360">如果为 <see langword="true" />，则将程序集的卷影副本加载到应用程序域中。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-360"><see langword="true" /> to load a shadow copy of an assembly into the application domain.</span></span></param>
        <param name="adInit"><span data-ttu-id="d7ccd-361"><see cref="T:System.AppDomainInitializer" /> 委托，表示初始化新的 <see cref="T:System.AppDomain" /> 对象时调用的回调方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-361">An <see cref="T:System.AppDomainInitializer" /> delegate that represents a callback method to invoke when the new <see cref="T:System.AppDomain" /> object is initialized.</span></span></param>
        <param name="adInitArgs"><span data-ttu-id="d7ccd-362">字符串实参数组，在初始化新的 <see cref="T:System.AppDomain" /> 对象时传递给由 <paramref name="adInit" /> 表示的回调。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-362">An array of string arguments to be passed to the callback represented by <paramref name="adInit" />, when the new <see cref="T:System.AppDomain" /> object is initialized.</span></span></param>
        <summary><span data-ttu-id="d7ccd-363">使用证据、应用程序基路径、相对搜索路径和指定是否向应用程序域中加载程序集的影像副本的形参创建具有给定名称的新应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-363">Creates a new application domain with the given name, using evidence, application base path, relative search path, and a parameter that specifies whether a shadow copy of an assembly is to be loaded into the application domain.</span></span> <span data-ttu-id="d7ccd-364">指定在初始化应用程序域时调用的回调方法，以及传递回调方法的字符串实参数组。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-364">Specifies a callback method that is invoked when the application domain is initialized, and an array of string arguments to pass the callback method.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-365">新创建的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-365">The newly created application domain.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-366">所表示的方法`adInit`新创建的应用程序域的上下文中执行。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-366">The method represented by `adInit` is executed in the context of the newly created application domain.</span></span>  
  
 <span data-ttu-id="d7ccd-367">如果`securityInfo`是未提供，使用从当前的应用程序域证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-367">If `securityInfo` is not supplied, the evidence from the current application domain is used.</span></span>  
  
 <span data-ttu-id="d7ccd-368">有关卷影复制的详细信息，请参阅<xref:System.AppDomain.ShadowCopyFiles%2A>并[卷影复制程序集](~/docs/framework/app-domains/shadow-copy-assemblies.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-368">For more information about shadow copying, see <xref:System.AppDomain.ShadowCopyFiles%2A> and [Shadow Copying Assemblies](~/docs/framework/app-domains/shadow-copy-assemblies.md).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d7ccd-369">不使用此方法的重载来创建沙盒应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-369">Do not use this method overload to create sandboxed application domains.</span></span> <span data-ttu-id="d7ccd-370">开头[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，为提供的证据`securityInfo`不会再影响应用程序域的授予集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-370">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the evidence that is supplied for `securityInfo` no longer affects the grant set of the application domain.</span></span> <span data-ttu-id="d7ccd-371">使用<xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29>方法重载来创建沙盒应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-371">Use the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29> method overload to create sandboxed application domains.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-372"><paramref name="friendlyName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-372"><paramref name="friendlyName" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-373">若要提供的证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-373">to provide evidence.</span></span> <span data-ttu-id="d7ccd-374">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-374">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateInstance">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d7ccd-375">创建在指定程序集中定义的指定类型的新实例。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-375">Creates a new instance of a specified type defined in a specified assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstance(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstance (assemblyName As String, typeName As String) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjectHandle ^ CreateInstance(System::String ^ assemblyName, System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : string * string -&gt; System.Runtime.Remoting.ObjectHandle&#xA;override this.CreateInstance : string * string -&gt; System.Runtime.Remoting.ObjectHandle" Usage="appDomain.CreateInstance (assemblyName, typeName)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.CreateInstance(System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="d7ccd-376">程序集的显示名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-376">The display name of the assembly.</span></span> <span data-ttu-id="d7ccd-377">请参阅 <see cref="P:System.Reflection.Assembly.FullName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-377">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="typeName"><span data-ttu-id="d7ccd-378"><see cref="P:System.Type.FullName" /> 属性返回的所请求类型的完全限定名称，包含命名空间而不是程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-378">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <summary><span data-ttu-id="d7ccd-379">创建在指定程序集中定义的指定类型的新实例。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-379">Creates a new instance of the specified type defined in the specified assembly.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-380">一个对象，该对象是 <paramref name="typeName" /> 指定的新实例的包装。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-380">An object that is a wrapper for the new instance specified by <paramref name="typeName" />.</span></span> <span data-ttu-id="d7ccd-381">返回值需要打开包装才能访问真实对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-381">The return value needs to be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-382">此方法调用的默认构造函数`typeName`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-382">This method calls the default constructor for `typeName`.</span></span>  
  
 <span data-ttu-id="d7ccd-383">请参阅<xref:System.Reflection.AssemblyName>的格式为`assemblyName`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-383">See <xref:System.Reflection.AssemblyName> for the format of `assemblyName`.</span></span>  
  
 <span data-ttu-id="d7ccd-384">尝试调用<xref:System.AppDomain.CreateInstance%2A>在目标上不是当前的应用程序域的应用程序域将导致目标应用程序域中的程序集的成功加载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-384">An attempt to call <xref:System.AppDomain.CreateInstance%2A> on a target application domain that is not the current application domain will result in a successful load of the assembly in the target application domain.</span></span> <span data-ttu-id="d7ccd-385">由于<xref:System.Reflection.Assembly>不是<xref:System.MarshalByRefObject>，当此方法尝试返回<xref:System.Reflection.Assembly>到当前应用程序域加载程序集，公共语言运行时将尝试将该程序集加载到当前应用程序域和负载可能会失败。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-385">Since an <xref:System.Reflection.Assembly> is not <xref:System.MarshalByRefObject>, when this method attempts to return the <xref:System.Reflection.Assembly> for the loaded assembly to the current application domain, the common language runtime will try to load the assembly into the current application domain and the load might fail.</span></span> <span data-ttu-id="d7ccd-386">加载到当前应用程序域的程序集可能不同于不同的两个应用程序域的路径设置是否首先加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-386">The assembly that is loaded into the current application domain might be different from the assembly that was loaded first if the path settings for the two application domains are different.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-387">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-387">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-388"><paramref name="assemblyName" /> 或 <paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-388"><paramref name="assemblyName" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-389"><paramref name="assemblyName" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-389"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-390">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-390">-or-</span></span> 
<span data-ttu-id="d7ccd-391">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyName" /> 是用更高的版本编译的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-391">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-392">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-392">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-393">未找到 <paramref name="assemblyName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-393"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="d7ccd-394">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-394">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="d7ccd-395">未找到匹配的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-395">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="d7ccd-396">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-396"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="d7ccd-397">此示例为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-397">This instance is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="d7ccd-398">用于读取从文件或目录，以及用于访问路径本身中的信息的访问权限。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-398">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="d7ccd-399">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-399">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-400">它能够访问的程序集的位置，如果该程序集不在本地。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-400">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-401">表示创建委托的实例时调用非托管的代码的能力。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-401">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="d7ccd-402">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="d7ccd-402">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <altmember cref="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstance(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstance (assemblyName As String, typeName As String, activationAttributes As Object()) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjectHandle ^ CreateInstance(System::String ^ assemblyName, System::String ^ typeName, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : string * string * obj[] -&gt; System.Runtime.Remoting.ObjectHandle&#xA;override this.CreateInstance : string * string * obj[] -&gt; System.Runtime.Remoting.ObjectHandle" Usage="appDomain.CreateInstance (assemblyName, typeName, activationAttributes)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.CreateInstance(System.String,System.String,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="d7ccd-403">程序集的显示名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-403">The display name of the assembly.</span></span> <span data-ttu-id="d7ccd-404">请参阅 <see cref="P:System.Reflection.Assembly.FullName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-404">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="typeName"><span data-ttu-id="d7ccd-405"><see cref="P:System.Type.FullName" /> 属性返回的所请求类型的完全限定名称，包含命名空间而不是程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-405">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="d7ccd-406">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-406">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="d7ccd-407">通常，为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-407">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="d7ccd-408">此参数与客户端激活的对象相关。客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-408">This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="d7ccd-409">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-409">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="d7ccd-410">创建在指定程序集中定义的指定类型的新实例。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-410">Creates a new instance of the specified type defined in the specified assembly.</span></span> <span data-ttu-id="d7ccd-411">形参指定激活特性数组。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-411">A parameter specifies an array of activation attributes.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-412">一个对象，该对象是 <paramref name="typeName" /> 指定的新实例的包装。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-412">An object that is a wrapper for the new instance specified by <paramref name="typeName" />.</span></span> <span data-ttu-id="d7ccd-413">返回值需要打开包装才能访问真实对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-413">The return value needs to be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-414">此方法调用的默认构造函数`typeName`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-414">This method calls the default constructor for `typeName`.</span></span>  
  
 <span data-ttu-id="d7ccd-415">请参阅<xref:System.Reflection.AssemblyName>的格式为`assemblyName`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-415">See <xref:System.Reflection.AssemblyName> for the format of `assemblyName`.</span></span>  
  
 <span data-ttu-id="d7ccd-416">尝试调用<xref:System.AppDomain.CreateInstance%2A>在目标上不是当前的应用程序域的应用程序域将导致目标应用程序域中的程序集的成功加载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-416">An attempt to call <xref:System.AppDomain.CreateInstance%2A> on a target application domain that is not the current application domain will result in a successful load of the assembly in the target application domain.</span></span> <span data-ttu-id="d7ccd-417">由于<xref:System.Reflection.Assembly>不是<xref:System.MarshalByRefObject>，当此方法尝试返回<xref:System.Reflection.Assembly>到当前应用程序域加载程序集，公共语言运行时将尝试将该程序集加载到当前应用程序域和负载可能会失败。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-417">Since an <xref:System.Reflection.Assembly> is not <xref:System.MarshalByRefObject>, when this method attempts to return the <xref:System.Reflection.Assembly> for the loaded assembly to the current application domain, the common language runtime will try to load the assembly into the current application domain and the load might fail.</span></span> <span data-ttu-id="d7ccd-418">加载到当前应用程序域的程序集可能不同于不同的两个应用程序域的路径设置是否首先加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-418">The assembly that is loaded into the current application domain might be different from the assembly that was loaded first if the path settings for the two application domains are different.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-419">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-419">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-420"><paramref name="assemblyName" /> 或 <paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-420"><paramref name="assemblyName" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-421"><paramref name="assemblyName" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-421"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-422">或</span><span class="sxs-lookup"><span data-stu-id="d7ccd-422">-or-</span></span> 
<span data-ttu-id="d7ccd-423">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyName" /> 是用更高的版本编译的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-423">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-424">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-424">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-425">未找到 <paramref name="assemblyName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-425"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="d7ccd-426">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-426">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="d7ccd-427">未找到匹配的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-427">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7ccd-428">调用方不能为非继承自 <see cref="T:System.MarshalByRefObject" /> 的对象提供激活属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-428">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="d7ccd-429">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-429"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="d7ccd-430">此示例为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-430">This instance is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="d7ccd-431">它能够读取包含程序集清单的文件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-431">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="d7ccd-432">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="d7ccd-432">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-433">它能够访问的程序集的位置，如果该程序集不在本地。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-433">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-434">表示创建委托的实例时调用非托管的代码的能力。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-434">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="d7ccd-435">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="d7ccd-435">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="d7ccd-436">它能够调用类型的所有成员上的操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-436">for the ability to invoke operations on all type members.</span></span> <span data-ttu-id="d7ccd-437">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="d7ccd-437">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::Remoting::ObjectHandle ^ CreateInstance(System::String ^ assemblyName, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberSignature Language="F#" Value="member this.CreateInstance : string * string * bool * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] -&gt; System.Runtime.Remoting.ObjectHandle" Usage="appDomain.CreateInstance (assemblyName, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="d7ccd-438">程序集的显示名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-438">The display name of the assembly.</span></span> <span data-ttu-id="d7ccd-439">请参阅 <see cref="P:System.Reflection.Assembly.FullName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-439">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="typeName"><span data-ttu-id="d7ccd-440"><see cref="P:System.Type.FullName" /> 属性返回的所请求类型的完全限定名称，包含命名空间而不是程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-440">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="d7ccd-441">一个布尔值，指示是否执行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-441">A Boolean value specifying whether to perform a case-sensitive search or not.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="d7ccd-442">影响 <paramref name="typeName" /> 构造函数搜索的零个或多个位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-442">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="d7ccd-443">如果 <paramref name="bindingAttr" /> 为零，则对公共构造函数进行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-443">If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="d7ccd-444">一个对象，它使用反射启用绑定、参数类型的强制、成员的调用和 <see cref="T:System.Reflection.MemberInfo" /> 对象的检索。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-444">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects using reflection.</span></span> <span data-ttu-id="d7ccd-445">如果 <paramref name="binder" /> 为 null，则使用默认联编程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-445">If <paramref name="binder" /> is null, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="d7ccd-446">要传递给构造函数的实参。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-446">The arguments to pass to the constructor.</span></span> <span data-ttu-id="d7ccd-447">此实参数组必须在数量、顺序和类型方面与要调用的构造函数的形参匹配。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-447">This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="d7ccd-448">如果默认的构造函数是首选构造函数，则 <paramref name="args" /> 必须为空数组或 Null。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-448">If the default constructor is preferred, <paramref name="args" /> must be an empty array or null.</span></span></param>
        <param name="culture"><span data-ttu-id="d7ccd-449">区域性特定的信息，这些信息控制将 <paramref name="args" /> 强制转换为 <paramref name="typeName" /> 构造函数所声明的正式类型。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-449">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="d7ccd-450">如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-450">If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="d7ccd-451">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-451">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="d7ccd-452">通常，为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-452">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="d7ccd-453">此参数与客户端激活的对象相关。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-453">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="d7ccd-454">客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-454">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="d7ccd-455">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-455">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="d7ccd-456">创建在指定程序集中定义的指定类型的新实例。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-456">Creates a new instance of the specified type defined in the specified assembly.</span></span> <span data-ttu-id="d7ccd-457">形参指定联编程序、绑定标志、构造函数实参、用于解释实参的特定于区域性的信息，以及可选激活特性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-457">Parameters specify a binder, binding flags, constructor arguments, culture-specific information used to interpret arguments, and optional activation attributes.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-458">一个对象，该对象是 <paramref name="typeName" /> 指定的新实例的包装。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-458">An object that is a wrapper for the new instance specified by <paramref name="typeName" />.</span></span> <span data-ttu-id="d7ccd-459">返回值需要打开包装才能访问真实对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-459">The return value needs to be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-460">请参阅<xref:System.Reflection.AssemblyName>的格式为`assemblyName`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-460">See <xref:System.Reflection.AssemblyName> for the format of `assemblyName`.</span></span>  
  
 <span data-ttu-id="d7ccd-461">尝试调用<xref:System.AppDomain.CreateInstance%2A>在目标上不是当前的应用程序域的应用程序域将导致目标应用程序域中的程序集的成功加载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-461">An attempt to call <xref:System.AppDomain.CreateInstance%2A> on a target application domain that is not the current application domain will result in a successful load of the assembly in the target application domain.</span></span> <span data-ttu-id="d7ccd-462">由于<xref:System.Reflection.Assembly>不是<xref:System.MarshalByRefObject>，当此方法尝试返回<xref:System.Reflection.Assembly>到当前应用程序域加载程序集，公共语言运行时将尝试将该程序集加载到当前应用程序域和负载可能会失败。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-462">Since an <xref:System.Reflection.Assembly> is not <xref:System.MarshalByRefObject>, when this method attempts to return the <xref:System.Reflection.Assembly> for the loaded assembly to the current application domain, the common language runtime will try to load the assembly into the current application domain and the load might fail.</span></span> <span data-ttu-id="d7ccd-463">加载到当前应用程序域的程序集可能不同于不同的两个应用程序域的路径设置是否首先加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-463">The assembly that is loaded into the current application domain might be different from the assembly that was loaded first if the path settings for the two application domains are different.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-464">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-464">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-465"><paramref name="assemblyName" /> 或 <paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-465"><paramref name="assemblyName" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-466"><paramref name="assemblyName" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-466"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-467">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-467">-or-</span></span> 
 <span data-ttu-id="d7ccd-468"><paramref name="assemblyName" /> 使用高于当前所加载版本的公共语言运行时版本编译而成。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-468"><paramref name="assemblyName" /> was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-469">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-469">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-470">未找到 <paramref name="assemblyName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-470"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="d7ccd-471">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-471">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="d7ccd-472">未找到匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-472">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7ccd-473">调用方不能为非继承自 <see cref="T:System.MarshalByRefObject" /> 的对象提供激活属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-473">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="d7ccd-474">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-474"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="d7ccd-475">此示例为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-475">This instance is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="d7ccd-476">它能够读取包含程序集清单的文件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-476">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="d7ccd-477">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="d7ccd-477">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-478">它能够访问的程序集的位置，如果该程序集不在本地。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-478">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-479">表示创建委托的实例时调用非托管的代码的能力。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-479">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="d7ccd-480">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="d7ccd-480">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="d7ccd-481">它能够调用类型的所有成员上的操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-481">for the ability to invoke operations on all type members.</span></span> <span data-ttu-id="d7ccd-482">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="d7ccd-482">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjectHandle CreateInstance(string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjectHandle ^ CreateInstance(System::String ^ assemblyName, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes, System::Security::Policy::Evidence ^ securityAttributes);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : string * string * bool * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] * System.Security.Policy.Evidence -&gt; System.Runtime.Remoting.ObjectHandle&#xA;override this.CreateInstance : string * string * bool * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] * System.Security.Policy.Evidence -&gt; System.Runtime.Remoting.ObjectHandle" Usage="appDomain.CreateInstance (assemblyName, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes, securityAttributes)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of CreateInstance which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
        <Parameter Name="securityAttributes" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="d7ccd-483">程序集的显示名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-483">The display name of the assembly.</span></span> <span data-ttu-id="d7ccd-484">请参阅 <see cref="P:System.Reflection.Assembly.FullName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-484">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="typeName"><span data-ttu-id="d7ccd-485"><see cref="P:System.Type.FullName" /> 属性返回的所请求类型的完全限定名称，包含命名空间而不是程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-485">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="d7ccd-486">一个布尔值，指示是否执行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-486">A Boolean value specifying whether to perform a case-sensitive search or not.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="d7ccd-487">影响 <paramref name="typeName" /> 构造函数搜索的零个或多个位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-487">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="d7ccd-488">如果 <paramref name="bindingAttr" /> 为零，则对公共构造函数进行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-488">If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="d7ccd-489">一个对象，它使用反射启用绑定、参数类型的强制、成员的调用和 <see cref="T:System.Reflection.MemberInfo" /> 对象的检索。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-489">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects using reflection.</span></span> <span data-ttu-id="d7ccd-490">如果 <paramref name="binder" /> 为 null，则使用默认联编程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-490">If <paramref name="binder" /> is null, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="d7ccd-491">要传递给构造函数的实参。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-491">The arguments to pass to the constructor.</span></span> <span data-ttu-id="d7ccd-492">此实参数组必须在数量、顺序和类型方面与要调用的构造函数的形参匹配。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-492">This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="d7ccd-493">如果默认的构造函数是首选构造函数，则 <paramref name="args" /> 必须为空数组或 Null。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-493">If the default constructor is preferred, <paramref name="args" /> must be an empty array or null.</span></span></param>
        <param name="culture"><span data-ttu-id="d7ccd-494">区域性特定的信息，这些信息控制将 <paramref name="args" /> 强制转换为 <paramref name="typeName" /> 构造函数所声明的正式类型。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-494">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="d7ccd-495">如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-495">If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="d7ccd-496">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-496">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="d7ccd-497">通常，为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-497">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="d7ccd-498">此参数与客户端激活的对象相关。客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-498">This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="d7ccd-499">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-499">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <param name="securityAttributes"><span data-ttu-id="d7ccd-500">用于授权创建 <paramref name="typeName" /> 的信息。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-500">Information used to authorize creation of <paramref name="typeName" />.</span></span></param>
        <summary><span data-ttu-id="d7ccd-501">创建在指定程序集中定义的指定类型的新实例。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-501">Creates a new instance of the specified type defined in the specified assembly.</span></span> <span data-ttu-id="d7ccd-502">参数指定联编程序、绑定标志、构造函数自变量、特定于区域性的信息，这些信息用于解释自变量、激活特性和授权，以创建类型。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-502">Parameters specify a binder, binding flags, constructor arguments, culture-specific information used to interpret arguments, activation attributes, and authorization to create the type.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-503">一个对象，该对象是 <paramref name="typeName" /> 指定的新实例的包装。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-503">An object that is a wrapper for the new instance specified by <paramref name="typeName" />.</span></span> <span data-ttu-id="d7ccd-504">返回值需要打开包装才能访问真实对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-504">The return value needs to be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-505">请参阅<xref:System.Reflection.AssemblyName>的格式为`assemblyName`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-505">See <xref:System.Reflection.AssemblyName> for the format of `assemblyName`.</span></span>  
  
 <span data-ttu-id="d7ccd-506">尝试调用<xref:System.AppDomain.CreateInstance%2A>在目标上不是当前的应用程序域的应用程序域将导致目标应用程序域中的程序集的成功加载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-506">An attempt to call <xref:System.AppDomain.CreateInstance%2A> on a target application domain that is not the current application domain will result in a successful load of the assembly in the target application domain.</span></span> <span data-ttu-id="d7ccd-507">由于<xref:System.Reflection.Assembly>不是<xref:System.MarshalByRefObject>，当此方法尝试返回<xref:System.Reflection.Assembly>到当前应用程序域加载程序集，公共语言运行时将尝试将该程序集加载到当前应用程序域和负载可能会失败。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-507">Since an <xref:System.Reflection.Assembly> is not <xref:System.MarshalByRefObject>, when this method attempts to return the <xref:System.Reflection.Assembly> for the loaded assembly to the current application domain, the common language runtime will try to load the assembly into the current application domain and the load might fail.</span></span> <span data-ttu-id="d7ccd-508">加载到当前应用程序域的程序集可能不同于不同的两个应用程序域的路径设置是否首先加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-508">The assembly that is loaded into the current application domain might be different from the assembly that was loaded first if the path settings for the two application domains are different.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-509">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-509">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-510"><paramref name="assemblyName" /> 或 <paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-510"><paramref name="assemblyName" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-511"><paramref name="assemblyName" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-511"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-512">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-512">-or-</span></span> 
<span data-ttu-id="d7ccd-513">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyName" /> 是用更高的版本编译的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-513">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-514">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-514">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-515">未找到 <paramref name="assemblyName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-515"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="d7ccd-516">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-516">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="d7ccd-517">未找到匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-517">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7ccd-518">调用方不能为非继承自 <see cref="T:System.MarshalByRefObject" /> 的对象提供激活属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-518">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span>  
  
<span data-ttu-id="d7ccd-519">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-519">-or-</span></span> 
 <span data-ttu-id="d7ccd-520"><paramref name="securityAttributes" /> 不是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-520"><paramref name="securityAttributes" /> is not <see langword="null" />.</span></span> <span data-ttu-id="d7ccd-521">未启用旧版 CAS 策略时，<paramref name="securityAttributes" /> 应该为 <see langword="null." /></span><span class="sxs-lookup"><span data-stu-id="d7ccd-521">When legacy CAS policy is not enabled, <paramref name="securityAttributes" /> should be <see langword="null." /></span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="d7ccd-522">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-522"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="d7ccd-523">此示例为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-523">This instance is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="d7ccd-524">它能够读取包含程序集清单的文件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-524">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="d7ccd-525">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="d7ccd-525">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-526">它能够访问的程序集的位置，如果该程序集不在本地。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-526">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-527">若要提供的证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-527">to provide evidence.</span></span> <span data-ttu-id="d7ccd-528">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-528">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="d7ccd-529">它能够调用类型的所有成员上的操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-529">for the ability to invoke operations on all type members.</span></span> <span data-ttu-id="d7ccd-530">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="d7ccd-530">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateInstanceAndUnwrap">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d7ccd-531">创建指定类型的新实例。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-531">Creates a new instance of a specified type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateInstanceAndUnwrap">
      <MemberSignature Language="C#" Value="public object CreateInstanceAndUnwrap (string assemblyName, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateInstanceAndUnwrap(string assemblyName, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstanceAndUnwrap (assemblyName As String, typeName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateInstanceAndUnwrap(System::String ^ assemblyName, System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.CreateInstanceAndUnwrap : string * string -&gt; obj" Usage="appDomain.CreateInstanceAndUnwrap (assemblyName, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="d7ccd-532">程序集的显示名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-532">The display name of the assembly.</span></span> <span data-ttu-id="d7ccd-533">请参阅 <see cref="P:System.Reflection.Assembly.FullName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-533">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="typeName"><span data-ttu-id="d7ccd-534"><see cref="P:System.Type.FullName" /> 属性返回的所请求类型的完全限定名称，包含命名空间而不是程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-534">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <summary><span data-ttu-id="d7ccd-535">创建指定类型的新实例。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-535">Creates a new instance of the specified type.</span></span> <span data-ttu-id="d7ccd-536">形参指定定义类型的程序集以及类型的名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-536">Parameters specify the assembly where the type is defined, and the name of the type.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-537"><paramref name="typeName" /> 所指定对象的实例。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-537">An instance of the object specified by <paramref name="typeName" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-538">这是一个便利方法，将组合在一起<xref:System.AppDomain.CreateInstance%2A>和<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-538">This is a convenience method that combines <xref:System.AppDomain.CreateInstance%2A> and <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d7ccd-539">此方法调用的默认构造函数`typeName`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-539">This method calls the default constructor for `typeName`.</span></span>  
  
 <span data-ttu-id="d7ccd-540">请参阅<xref:System.Reflection.AssemblyName>的格式为`assemblyName`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-540">See <xref:System.Reflection.AssemblyName> for the format of `assemblyName`.</span></span> <span data-ttu-id="d7ccd-541">请参阅<xref:System.Type.FullName%2A?displayProperty=nameWithType>属性的格式`typeName`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-541">See the <xref:System.Type.FullName%2A?displayProperty=nameWithType> property for the format of `typeName`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7ccd-542">如果进行早期绑定调用的方法`M`的类型的对象`T1`返回<xref:System.AppDomain.CreateInstanceAndUnwrap%2A>，和方法可对类型的对象的方法的早期绑定调用`T2`程序集中`C`以外当前程序集或包含的程序集`T1`，程序集`C`加载到当前应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-542">If you make an early-bound call to a method `M` of an object of type `T1` that was returned by <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>, and that method makes an early-bound call to a method of an object of type `T2` in an assembly `C` other than the current assembly or the assembly containing `T1`, assembly `C` is loaded into the current application domain.</span></span> <span data-ttu-id="d7ccd-543">即使早期绑定调用也会发生这种加载`T1.M()`中的正文进行<xref:System.Reflection.Emit.DynamicMethod>，或其他动态生成的代码中。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-543">This loading occurs even if the early-bound call to `T1.M()` was made in the body of a <xref:System.Reflection.Emit.DynamicMethod>, or in other dynamically generated code.</span></span> <span data-ttu-id="d7ccd-544">如果当前域是默认域，程序集`C`在进程结束前不能卸载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-544">If the current domain is the default domain, assembly `C` cannot be unloaded until the process ends.</span></span> <span data-ttu-id="d7ccd-545">如果当前域更高版本尝试加载程序集`C`，负载可能会失败。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-545">If the current domain later attempts to load assembly `C`, the load might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-546">下面的代码示例显示了另一个应用程序域中执行代码的最简单方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-546">The following code example shows the simplest way to execute code in another application domain.</span></span> <span data-ttu-id="d7ccd-547">该示例定义一个名为类`Worker`，它继承自<xref:System.MarshalByRefObject>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-547">The example defines a class named `Worker` that inherits from <xref:System.MarshalByRefObject>.</span></span> <span data-ttu-id="d7ccd-548">`Worker`类定义的方法，将显示在其中执行的应用程序域的名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-548">The `Worker` class defines a method that displays the name of the application domain in which it is executing.</span></span> <span data-ttu-id="d7ccd-549">该示例创建的实例`Worker`在默认应用程序域和新的应用程序域中。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-549">The example creates instances of `Worker` in the default application domain and in a new application domain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7ccd-550">包含的程序集`Worker`必须加载到这两个应用程序域，但是它可以加载仅在新的应用程序域中存在的其他程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-550">The assembly that contains `Worker` must be loaded into both application domains, but it can load other assemblies that exist only in the new application domain.</span></span>  
  
 [!code-cpp[CreateInstanceAndUnwrap2#1](~/samples/snippets/cpp/VS_Snippets_CLR/CreateInstanceAndUnwrap2/cpp/source.cpp#1)]
 [!code-csharp[CreateInstanceAndUnwrap2#1](~/samples/snippets/csharp/VS_Snippets_CLR/CreateInstanceAndUnwrap2/cs/source.cs#1)]
 [!code-vb[CreateInstanceAndUnwrap2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CreateInstanceAndUnwrap2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-551"><paramref name="assemblyName" /> 或 <paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-551"><paramref name="assemblyName" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="d7ccd-552">未找到匹配的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-552">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="d7ccd-553">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-553"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-554">未找到 <paramref name="assemblyName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-554"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="d7ccd-555">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-555">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-556">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-556">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-557"><paramref name="assemblyName" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-557"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-558">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-558">-or-</span></span> 
<span data-ttu-id="d7ccd-559">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyName" /> 是用更高的版本编译的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-559">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-560">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-560">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="d7ccd-561">它能够读取该文件包含程序集清单，或如果要从不同的清单文件的模块创建一种类型。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-561">for the ability to read the file containing the assembly manifest, or if you are creating a type from a module other than the manifest file.</span></span> <span data-ttu-id="d7ccd-562">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="d7ccd-562">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-563">它能够访问的程序集的位置，如果该程序集不在本地。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-563">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <altmember cref="M:System.AppDomain.CreateInstance(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceAndUnwrap">
      <MemberSignature Language="C#" Value="public object CreateInstanceAndUnwrap (string assemblyName, string typeName, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateInstanceAndUnwrap(string assemblyName, string typeName, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstanceAndUnwrap (assemblyName As String, typeName As String, activationAttributes As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateInstanceAndUnwrap(System::String ^ assemblyName, System::String ^ typeName, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberSignature Language="F#" Value="member this.CreateInstanceAndUnwrap : string * string * obj[] -&gt; obj" Usage="appDomain.CreateInstanceAndUnwrap (assemblyName, typeName, activationAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="d7ccd-564">程序集的显示名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-564">The display name of the assembly.</span></span> <span data-ttu-id="d7ccd-565">请参阅 <see cref="P:System.Reflection.Assembly.FullName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-565">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="typeName"><span data-ttu-id="d7ccd-566"><see cref="P:System.Type.FullName" /> 属性返回的所请求类型的完全限定名称，包含命名空间而不是程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-566">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="d7ccd-567">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-567">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="d7ccd-568">通常，为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-568">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="d7ccd-569">此参数与客户端激活的对象相关。客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-569">This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="d7ccd-570">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-570">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="d7ccd-571">创建指定类型的新实例。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-571">Creates a new instance of the specified type.</span></span> <span data-ttu-id="d7ccd-572">形参指定定义类型的程序集、类型的名称和激活特性的数组。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-572">Parameters specify the assembly where the type is defined, the name of the type, and an array of activation attributes.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-573"><paramref name="typeName" /> 所指定对象的实例。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-573">An instance of the object specified by <paramref name="typeName" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-574">这是一个便利方法，将组合在一起<xref:System.AppDomain.CreateInstance%2A>和<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-574">This is a convenience method that combines <xref:System.AppDomain.CreateInstance%2A> and <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d7ccd-575">此方法调用的默认构造函数`typeName`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-575">This method calls the default constructor for `typeName`.</span></span>  
  
 <span data-ttu-id="d7ccd-576">请参阅<xref:System.Reflection.AssemblyName>的格式为`assemblyName`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-576">See <xref:System.Reflection.AssemblyName> for the format of `assemblyName`.</span></span> <span data-ttu-id="d7ccd-577">请参阅<xref:System.Type.FullName%2A?displayProperty=nameWithType>属性的格式`typeName`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-577">See the <xref:System.Type.FullName%2A?displayProperty=nameWithType> property for the format of `typeName`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7ccd-578">如果进行早期绑定调用的方法`M`的类型的对象`T1`返回<xref:System.AppDomain.CreateInstanceAndUnwrap%2A>，和方法可对类型的对象的方法的早期绑定调用`T2`程序集中`C`以外当前程序集或包含的程序集`T1`，程序集`C`加载到当前应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-578">If you make an early-bound call to a method `M` of an object of type `T1` that was returned by <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>, and that method makes an early-bound call to a method of an object of type `T2` in an assembly `C` other than the current assembly or the assembly containing `T1`, assembly `C` is loaded into the current application domain.</span></span> <span data-ttu-id="d7ccd-579">即使早期绑定调用也会发生这种加载`T1.M()`中的正文进行<xref:System.Reflection.Emit.DynamicMethod>，或其他动态生成的代码中。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-579">This loading occurs even if the early-bound call to `T1.M()` was made in the body of a <xref:System.Reflection.Emit.DynamicMethod>, or in other dynamically generated code.</span></span> <span data-ttu-id="d7ccd-580">如果当前域是默认域，程序集`C`在进程结束前不能卸载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-580">If the current domain is the default domain, assembly `C` cannot be unloaded until the process ends.</span></span> <span data-ttu-id="d7ccd-581">如果当前域更高版本尝试加载程序集`C`，负载可能会失败。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-581">If the current domain later attempts to load assembly `C`, the load might fail.</span></span>  
  
   
  
## Examples  
 [!code-cpp[ADDyno#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADDyno/CPP/addyno.cpp#1)]
 [!code-csharp[ADDyno#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADDyno/CS/addyno.cs#1)]
 [!code-vb[ADDyno#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADDyno/VB/addyno.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-582"><paramref name="assemblyName" /> 或 <paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-582"><paramref name="assemblyName" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="d7ccd-583">未找到匹配的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-583">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="d7ccd-584">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-584"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-585">未找到 <paramref name="assemblyName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-585"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="d7ccd-586">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-586">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7ccd-587">调用方不能为非继承自 <see cref="T:System.MarshalByRefObject" /> 的对象提供激活属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-587">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-588">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-588">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-589"><paramref name="assemblyName" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-589"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-590">或</span><span class="sxs-lookup"><span data-stu-id="d7ccd-590">-or-</span></span> 
<span data-ttu-id="d7ccd-591">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyName" /> 是用更高的版本编译的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-591">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-592">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-592">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="d7ccd-593">它能够读取包含程序集清单的文件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-593">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="d7ccd-594">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="d7ccd-594">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-595">它能够访问的程序集的位置，如果该程序集不在本地。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-595">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-596">表示创建委托的实例时调用非托管的代码的能力。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-596">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="d7ccd-597">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="d7ccd-597">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="d7ccd-598">它能够调用类型的所有成员上的操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-598">for the ability to invoke operations on all type members.</span></span> <span data-ttu-id="d7ccd-599">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="d7ccd-599">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.AppDomain.CreateInstance(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceAndUnwrap">
      <MemberSignature Language="C#" Value="public object CreateInstanceAndUnwrap (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateInstanceAndUnwrap(string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateInstanceAndUnwrap(System::String ^ assemblyName, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberSignature Language="F#" Value="member this.CreateInstanceAndUnwrap : string * string * bool * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] -&gt; obj" Usage="appDomain.CreateInstanceAndUnwrap (assemblyName, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="d7ccd-600">程序集的显示名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-600">The display name of the assembly.</span></span> <span data-ttu-id="d7ccd-601">请参阅 <see cref="P:System.Reflection.Assembly.FullName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-601">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="typeName"><span data-ttu-id="d7ccd-602"><see cref="P:System.Type.FullName" /> 属性返回的所请求类型的完全限定名称，包含命名空间而不是程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-602">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="d7ccd-603">一个布尔值，指示是否执行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-603">A Boolean value specifying whether to perform a case-sensitive search or not.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="d7ccd-604">影响 <paramref name="typeName" /> 构造函数搜索的零个或多个位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-604">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="d7ccd-605">如果 <paramref name="bindingAttr" /> 为零，则对公共构造函数进行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-605">If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="d7ccd-606">一个对象，它使用反射启用绑定、参数类型的强制、成员的调用和 <see cref="T:System.Reflection.MemberInfo" /> 对象的检索。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-606">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects using reflection.</span></span> <span data-ttu-id="d7ccd-607">如果 <paramref name="binder" /> 为 null，则使用默认联编程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-607">If <paramref name="binder" /> is null, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="d7ccd-608">要传递给构造函数的实参。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-608">The arguments to pass to the constructor.</span></span> <span data-ttu-id="d7ccd-609">此实参数组必须在数量、顺序和类型方面与要调用的构造函数的形参匹配。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-609">This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="d7ccd-610">如果默认的构造函数是首选构造函数，则 <paramref name="args" /> 必须为空数组或 Null。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-610">If the default constructor is preferred, <paramref name="args" /> must be an empty array or null.</span></span></param>
        <param name="culture"><span data-ttu-id="d7ccd-611">用于控制类型强制的特定于区域性的对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-611">A culture-specific object used to govern the coercion of types.</span></span> <span data-ttu-id="d7ccd-612">如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前线程的 <see langword="CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-612">If <paramref name="culture" /> is <see langword="null" />, the <see langword="CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="d7ccd-613">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-613">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="d7ccd-614">通常是包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-614">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object.</span></span> <span data-ttu-id="d7ccd-615">指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-615">that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="d7ccd-616">此参数与客户端激活的对象相关。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-616">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="d7ccd-617">客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-617">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="d7ccd-618">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-618">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="d7ccd-619">创建在指定的程序集中定义的指定类型的新实例，指定是否忽略类型名称的大小写，并指定绑定特性和用于选择要创建的类型的联编程序、构造函数的自变量、区域性以及激活特性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-619">Creates a new instance of the specified type defined in the specified assembly, specifying whether the case of the type name is ignored; the binding attributes and the binder that are used to select the type to be created; the arguments of the constructor; the culture; and the activation attributes.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-620"><paramref name="typeName" /> 所指定对象的实例。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-620">An instance of the object specified by <paramref name="typeName" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-621">这是一个便利方法，将组合在一起<xref:System.AppDomain.CreateInstance%2A>和<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-621">This is a convenience method that combines <xref:System.AppDomain.CreateInstance%2A> and <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="d7ccd-622">请参阅<xref:System.Reflection.AssemblyName>的格式为`assemblyName`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-622">See <xref:System.Reflection.AssemblyName> for the format of `assemblyName`.</span></span> <span data-ttu-id="d7ccd-623">请参阅<xref:System.Type.FullName%2A?displayProperty=nameWithType>属性的格式`typeName`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-623">See the <xref:System.Type.FullName%2A?displayProperty=nameWithType> property for the format of `typeName`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7ccd-624">如果进行早期绑定调用的方法`M`的类型的对象`T1`返回<xref:System.AppDomain.CreateInstanceAndUnwrap%2A>，和方法可对类型的对象的方法的早期绑定调用`T2`程序集中`C`以外当前程序集或包含的程序集`T1`，程序集`C`加载到当前应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-624">If you make an early-bound call to a method `M` of an object of type `T1` that was returned by <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>, and that method makes an early-bound call to a method of an object of type `T2` in an assembly `C` other than the current assembly or the assembly containing `T1`, assembly `C` is loaded into the current application domain.</span></span> <span data-ttu-id="d7ccd-625">即使早期绑定调用也会发生这种加载`T1.M()`中的正文进行<xref:System.Reflection.Emit.DynamicMethod>，或其他动态生成的代码中。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-625">This loading occurs even if the early-bound call to `T1.M()` was made in the body of a <xref:System.Reflection.Emit.DynamicMethod>, or in other dynamically generated code.</span></span> <span data-ttu-id="d7ccd-626">如果当前域是默认域，程序集`C`在进程结束前不能卸载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-626">If the current domain is the default domain, assembly `C` cannot be unloaded until the process ends.</span></span> <span data-ttu-id="d7ccd-627">如果当前域更高版本尝试加载程序集`C`，负载可能会失败。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-627">If the current domain later attempts to load assembly `C`, the load might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-628">下面的示例演示如何使用`ignoreCase`参数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-628">The following sample demonstrates the use of the `ignoreCase` parameter.</span></span>  
  
 [!code-cpp[AppDomain_CreateInstance_IgnoreCase#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_CreateInstance_IgnoreCase/CPP/ignorecase.cpp#1)]
 [!code-csharp[AppDomain_CreateInstance_IgnoreCase#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_CreateInstance_IgnoreCase/CS/ignorecase.cs#1)]
 [!code-vb[AppDomain_CreateInstance_IgnoreCase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_CreateInstance_IgnoreCase/VB/ignorecase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-629"><paramref name="assemblyName" /> 或 <paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-629"><paramref name="assemblyName" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="d7ccd-630">未找到匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-630">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="d7ccd-631">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-631"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-632">未找到 <paramref name="assemblyName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-632"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="d7ccd-633">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-633">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7ccd-634">调用方不能为非继承自 <see cref="T:System.MarshalByRefObject" /> 的对象提供激活属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-634">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-635">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-635">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-636"><paramref name="assemblyName" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-636"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-637">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-637">-or-</span></span> 
 <span data-ttu-id="d7ccd-638"><paramref name="assemblyName" /> 使用高于当前所加载版本的公共语言运行时版本编译而成。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-638"><paramref name="assemblyName" /> was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-639">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-639">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="d7ccd-640">它能够读取包含程序集清单的文件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-640">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="d7ccd-641">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="d7ccd-641">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-642">它能够访问的程序集的位置，如果该程序集不在本地。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-642">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-643">表示创建委托的实例时调用非托管的代码的能力。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-643">for the ability to call unmanaged code when creating an instance of a delegate.</span></span> <span data-ttu-id="d7ccd-644">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="d7ccd-644">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="d7ccd-645">它能够调用类型的所有成员上的操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-645">for the ability to invoke operations on all type members.</span></span> <span data-ttu-id="d7ccd-646">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="d7ccd-646">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.AppDomain.CreateInstance(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceAndUnwrap">
      <MemberSignature Language="C#" Value="public object CreateInstanceAndUnwrap (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateInstanceAndUnwrap(string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateInstanceAndUnwrap(System::String ^ assemblyName, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes, System::Security::Policy::Evidence ^ securityAttributes);" />
      <MemberSignature Language="F#" Value="member this.CreateInstanceAndUnwrap : string * string * bool * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] * System.Security.Policy.Evidence -&gt; obj" Usage="appDomain.CreateInstanceAndUnwrap (assemblyName, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes, securityAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of CreateInstanceAndUnwrap which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
        <Parameter Name="securityAttributes" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="d7ccd-647">程序集的显示名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-647">The display name of the assembly.</span></span> <span data-ttu-id="d7ccd-648">请参阅 <see cref="P:System.Reflection.Assembly.FullName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-648">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="typeName"><span data-ttu-id="d7ccd-649"><see cref="P:System.Type.FullName" /> 属性返回的所请求类型的完全限定名称，包含命名空间而不是程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-649">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="d7ccd-650">一个布尔值，指示是否执行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-650">A Boolean value specifying whether to perform a case-sensitive search or not.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="d7ccd-651">影响 <paramref name="typeName" /> 构造函数搜索的零个或多个位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-651">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="d7ccd-652">如果 <paramref name="bindingAttr" /> 为零，则对公共构造函数进行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-652">If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="d7ccd-653">一个对象，它使用反射启用绑定、参数类型的强制、成员的调用和 <see cref="T:System.Reflection.MemberInfo" /> 对象的检索。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-653">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects using reflection.</span></span> <span data-ttu-id="d7ccd-654">如果 <paramref name="binder" /> 为 null，则使用默认联编程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-654">If <paramref name="binder" /> is null, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="d7ccd-655">要传递给构造函数的实参。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-655">The arguments to pass to the constructor.</span></span> <span data-ttu-id="d7ccd-656">此实参数组必须在数量、顺序和类型方面与要调用的构造函数的形参匹配。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-656">This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="d7ccd-657">如果默认的构造函数是首选构造函数，则 <paramref name="args" /> 必须为空数组或 Null。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-657">If the default constructor is preferred, <paramref name="args" /> must be an empty array or null.</span></span></param>
        <param name="culture"><span data-ttu-id="d7ccd-658">用于控制类型强制的特定于区域性的对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-658">A culture-specific object used to govern the coercion of types.</span></span> <span data-ttu-id="d7ccd-659">如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前线程的 <see langword="CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-659">If <paramref name="culture" /> is <see langword="null" />, the <see langword="CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="d7ccd-660">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-660">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="d7ccd-661">通常，为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-661">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="d7ccd-662">此参数与客户端激活的对象相关。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-662">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="d7ccd-663">客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-663">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="d7ccd-664">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-664">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <param name="securityAttributes"><span data-ttu-id="d7ccd-665">用于授权创建 <paramref name="typeName" /> 的信息。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-665">Information used to authorize creation of <paramref name="typeName" />.</span></span></param>
        <summary><span data-ttu-id="d7ccd-666">创建指定类型的新实例。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-666">Creates a new instance of the specified type.</span></span> <span data-ttu-id="d7ccd-667">形参指定类型的名称以及查找和创建该类型的方式。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-667">Parameters specify the name of the type, and how it is found and created.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-668"><paramref name="typeName" /> 所指定对象的实例。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-668">An instance of the object specified by <paramref name="typeName" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-669">这是一个便利方法，将组合在一起<xref:System.AppDomain.CreateInstance%2A>和<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-669">This is a convenience method that combines <xref:System.AppDomain.CreateInstance%2A> and <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="d7ccd-670">请参阅<xref:System.Reflection.AssemblyName>的格式为`assemblyName`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-670">See <xref:System.Reflection.AssemblyName> for the format of `assemblyName`.</span></span> <span data-ttu-id="d7ccd-671">请参阅<xref:System.Type.FullName%2A?displayProperty=nameWithType>属性的格式`typeName`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-671">See the <xref:System.Type.FullName%2A?displayProperty=nameWithType> property for the format of `typeName`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7ccd-672">如果进行早期绑定调用的方法`M`的类型的对象`T1`返回<xref:System.AppDomain.CreateInstanceAndUnwrap%2A>，和方法可对类型的对象的方法的早期绑定调用`T2`程序集中`C`以外当前程序集或包含的程序集`T1`，程序集`C`加载到当前应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-672">If you make an early-bound call to a method `M` of an object of type `T1` that was returned by <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>, and that method makes an early-bound call to a method of an object of type `T2` in an assembly `C` other than the current assembly or the assembly containing `T1`, assembly `C` is loaded into the current application domain.</span></span> <span data-ttu-id="d7ccd-673">即使早期绑定调用也会发生这种加载`T1.M()`中的正文进行<xref:System.Reflection.Emit.DynamicMethod>，或其他动态生成的代码中。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-673">This loading occurs even if the early-bound call to `T1.M()` was made in the body of a <xref:System.Reflection.Emit.DynamicMethod>, or in other dynamically generated code.</span></span> <span data-ttu-id="d7ccd-674">如果当前域是默认域，程序集`C`在进程结束前不能卸载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-674">If the current domain is the default domain, assembly `C` cannot be unloaded until the process ends.</span></span> <span data-ttu-id="d7ccd-675">如果当前域更高版本尝试加载程序集`C`，负载可能会失败。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-675">If the current domain later attempts to load assembly `C`, the load might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-676">下面的示例演示如何使用`ignoreCase`参数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-676">The following sample demonstrates the use of the `ignoreCase` parameter.</span></span>  
  
 [!code-cpp[AppDomain_CreateInstance_IgnoreCase#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_CreateInstance_IgnoreCase/CPP/ignorecase.cpp#1)]
 [!code-csharp[AppDomain_CreateInstance_IgnoreCase#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_CreateInstance_IgnoreCase/CS/ignorecase.cs#1)]
 [!code-vb[AppDomain_CreateInstance_IgnoreCase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_CreateInstance_IgnoreCase/VB/ignorecase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-677"><paramref name="assemblyName" /> 或 <paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-677"><paramref name="assemblyName" /> or <paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="d7ccd-678">未找到匹配的构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-678">No matching constructor was found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="d7ccd-679">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-679"><paramref name="typename" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-680">未找到 <paramref name="assemblyName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-680"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="d7ccd-681">调用方没有权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-681">The caller does not have permission to call this constructor.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7ccd-682">调用方不能为非继承自 <see cref="T:System.MarshalByRefObject" /> 的对象提供激活属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-682">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-683">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-683">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-684"><paramref name="assemblyName" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-684"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-685">或</span><span class="sxs-lookup"><span data-stu-id="d7ccd-685">-or-</span></span> 
<span data-ttu-id="d7ccd-686">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyName" /> 是用更高的版本编译的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-686">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-687">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-687">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="d7ccd-688">它能够读取包含程序集清单的文件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-688">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="d7ccd-689">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="d7ccd-689">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-690">它能够访问的程序集的位置，如果该程序集不在本地。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-690">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-691">若要使用的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-691">to load an assembly with evidence.</span></span> <span data-ttu-id="d7ccd-692">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-692">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.ReflectionPermission"><span data-ttu-id="d7ccd-693">它能够调用类型的所有成员上的操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-693">for the ability to invoke operations on all type members.</span></span> <span data-ttu-id="d7ccd-694">关联的枚举： <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span><span class="sxs-lookup"><span data-stu-id="d7ccd-694">Associated enumeration: <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" /></span></span></permission>
        <altmember cref="M:System.AppDomain.CreateInstance(System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateInstanceFrom">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d7ccd-695">创建在指定程序集文件中定义的指定类型的新实例。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-695">Creates a new instance of a specified type defined in the specified assembly file.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceFrom(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstanceFrom (assemblyFile As String, typeName As String) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(System::String ^ assemblyFile, System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstanceFrom : string * string -&gt; System.Runtime.Remoting.ObjectHandle&#xA;override this.CreateInstanceFrom : string * string -&gt; System.Runtime.Remoting.ObjectHandle" Usage="appDomain.CreateInstanceFrom (assemblyFile, typeName)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.CreateInstanceFrom(System.String,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="d7ccd-696">文件的名称（包括路径），该文件包含定义所请求类型的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-696">The name, including the path, of a file that contains an assembly that defines the requested type.</span></span> <span data-ttu-id="d7ccd-697">该程序集是使用 <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> 方法加载的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-697">The assembly is loaded using the <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> method.</span></span></param>
        <param name="typeName"><span data-ttu-id="d7ccd-698"><see cref="P:System.Type.FullName" /> 属性返回的所请求类型的完全限定名称，包含命名空间而不是程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-698">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <summary><span data-ttu-id="d7ccd-699">创建在指定程序集文件中定义的指定类型的新实例。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-699">Creates a new instance of the specified type defined in the specified assembly file.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-700">一个对象，它是新实例的包装，或者如果找不到 <see langword="null" />，则为 <paramref name="typeName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-700">An object that is a wrapper for the new instance, or <see langword="null" /> if <paramref name="typeName" /> is not found.</span></span> <span data-ttu-id="d7ccd-701">返回值需要打开包装才能访问真实对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-701">The return value needs to be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-702">默认构造函数`typeName`调用。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-702">The default constructor for `typeName` is invoked.</span></span>  
  
 <span data-ttu-id="d7ccd-703">有关更多信息，请参见 <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-703">For more information, see the <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="d7ccd-704">当<xref:System.AppDomain.CreateInstanceFrom%2A>方法用于在目标应用程序域，而不从其进行调用的应用程序域中创建一个实例，该程序集是加载目标应用程序域中。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-704">When the <xref:System.AppDomain.CreateInstanceFrom%2A> method is used to create an instance in a target application domain, other than the application domain from which the call is made, the assembly is loaded in the target application domain.</span></span> <span data-ttu-id="d7ccd-705">但是，如果在调用应用程序域实例解包，以某些方式使用未包装的实例可能导致程序集加载到调用应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-705">However, if the instance is unwrapped in the calling application domain, using the unwrapped instance in certain ways can cause the assembly to be loaded into the calling application domain.</span></span> <span data-ttu-id="d7ccd-706">例如，该实例进行解包后，可能会请求其类型信息、 要调用其方法后期绑定的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-706">For example, after the instance is unwrapped, its type information might be requested, in order to call its methods late-bound.</span></span> <span data-ttu-id="d7ccd-707">程序集加载到调用应用程序域时，会发生异常。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-707">When the assembly is loaded into the calling application domain, exceptions can occur.</span></span>  
  
-   <span data-ttu-id="d7ccd-708">如果在同一程序集中的另一个版本之前加载到调用应用程序域，或调用应用程序域加载路径是不同的目标应用程序域的异常，如<xref:System.MissingMethodException>可能发生。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-708">If another version of the same assembly was previously loaded into the calling application domain, or if the load path of the calling application domain is different from that of the target application domain, exceptions such as <xref:System.MissingMethodException> can occur.</span></span>  
  
-   <span data-ttu-id="d7ccd-709">如果调用应用程序域进行早期绑定调用的实例类型，<xref:System.InvalidCastException>可能会尝试强制转换实例时引发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-709">If the calling application domain makes early-bound calls to the instance type, <xref:System.InvalidCastException> can be thrown when an attempt is made to cast the instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-710">下面的示例演示如何使用<xref:System.AppDomain.CreateInstanceFrom%28System.String%2CSystem.String%29>方法重载来在目标应用程序域中创建对象的实例并调用其方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-710">The following example shows how to use the <xref:System.AppDomain.CreateInstanceFrom%28System.String%2CSystem.String%29> method overload to create an instance of an object in a target application domain and call its methods.</span></span>  
  
 <span data-ttu-id="d7ccd-711">该示例定义了`MarshallableExample`类，该类可以跨应用程序域边界封送。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-711">The example defines the `MarshallableExample` class, which can be marshaled across application domain boundaries.</span></span> <span data-ttu-id="d7ccd-712">此示例生成一个对当前正在执行的程序集的路径、 创建目标应用程序域，并使用<xref:System.AppDomain.CreateInstanceFrom%28System.String%2CSystem.String%29>方法重载来示例程序集加载到目标应用程序域并创建一个实例的`MarshallableExample`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-712">The example builds a path to the currently executing assembly, creates a target application domain, and uses the <xref:System.AppDomain.CreateInstanceFrom%28System.String%2CSystem.String%29> method overload to load the example assembly into the target application domain and create an instance of `MarshallableExample`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7ccd-713">路径是绝对地址在此示例中，但相对路径也将起作用，因为<xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType>方法用于加载程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-713">The path is absolute in this example, but a relative path would also work because the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=nameWithType> method is used to load the assembly.</span></span>  
  
 <span data-ttu-id="d7ccd-714">取消包装操作对象句柄之后, 的示例演示三种方法可以在目标应用程序域中使用对象：</span><span class="sxs-lookup"><span data-stu-id="d7ccd-714">After unwrapping the object handle, the example demonstrates three ways to use an object in a target application domain:</span></span>  
  
-   <span data-ttu-id="d7ccd-715">与使用反射的后期绑定调用的方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-715">Invoking a method with late binding, using reflection.</span></span> <span data-ttu-id="d7ccd-716">这需要类型信息，这会导致要加载到调用方的应用程序域的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-716">This requires type information, which causes the assembly to be loaded into the application domain of the caller.</span></span> <span data-ttu-id="d7ccd-717">（在此示例中，它已经加载。）</span><span class="sxs-lookup"><span data-stu-id="d7ccd-717">(In this example, it is already loaded.)</span></span>  
  
-   <span data-ttu-id="d7ccd-718">强制转换为调用方和被调用方所知的接口的对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-718">Casting the object to an interface known to both the caller and the callee.</span></span> <span data-ttu-id="d7ccd-719">如果在调用程序集或在调用方和被调用方所引用的第三个程序集中定义接口，则调用的程序集不是加载到调用方的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-719">If the interface is defined in the calling assembly or in a third assembly referenced by both the caller and the callee, the called assembly is not loaded into the application domain of the caller.</span></span>  
  
-   <span data-ttu-id="d7ccd-720">直接调用方知道其类型时使用的对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-720">Using the object directly when its type is known to the caller.</span></span> <span data-ttu-id="d7ccd-721">程序集必须加载到调用方的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-721">The assembly must be loaded into the application domain of the caller.</span></span>  
  
 <span data-ttu-id="d7ccd-722">若要避免被调用的程序集加载到调用方的应用程序域的另一个方法是调用方为派生<xref:System.MarshalByRefObject>类和定义可以在目标应用程序域中运行的方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-722">Another way to avoid loading the called assembly into the application domain of the caller is for the caller to derive from the <xref:System.MarshalByRefObject> class and to define a method that can be run in the target application domain.</span></span> <span data-ttu-id="d7ccd-723">该方法可以使用反射来检查目标程序集，因为目标程序集已加载到目标应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-723">That method can use reflection to examine a target assembly, because the target assembly is already loaded into the target application domain.</span></span> <span data-ttu-id="d7ccd-724">有关示例，请参阅<xref:System.AppDomain.DynamicDirectory%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-724">See the example for the <xref:System.AppDomain.DynamicDirectory%2A> property.</span></span>  
  
 [!code-cpp[System.AppDomain.CreateInstanceFrom_StringString#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.appdomain.createinstancefrom_stringstring/cpp/example.cpp#1)]
 [!code-csharp[System.AppDomain.CreateInstanceFrom_StringString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.appdomain.createinstancefrom_stringstring/cs/example.cs#1)]
 [!code-vb[System.AppDomain.CreateInstanceFrom_StringString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.appdomain.createinstancefrom_stringstring/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-725"><paramref name="assemblyFile" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-725"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="d7ccd-726">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-726">-or-</span></span> 
 <span data-ttu-id="d7ccd-727"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-727"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-728">未找到 <paramref name="assemblyFile" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-728"><paramref name="assemblyFile" /> was not found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="d7ccd-729">在 <paramref name="assemblyFile" /> 中未找到 <paramref name="typeName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-729"><paramref name="typeName" /> was not found in <paramref name="assemblyFile" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-730">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-730">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="d7ccd-731">未找到无形参的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-731">No parameterless public constructor was found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="d7ccd-732">调用方没有足够的权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-732">The caller does not have sufficient permission to call this constructor.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-733"><paramref name="assemblyFile" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-733"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-734">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-734">-or-</span></span> 
<span data-ttu-id="d7ccd-735">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyFile" /> 是用更高的版本编译的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-735">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-736">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-736">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="d7ccd-737">此示例为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-737">This instance is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="d7ccd-738">它能够读取包含程序集清单的文件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-738">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="d7ccd-739">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="d7ccd-739">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-740">它能够访问的程序集的位置，如果该程序集不在本地。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-740">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <altmember cref="M:System.Activator.CreateInstanceFrom(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstanceFrom (assemblyFile As String, typeName As String, activationAttributes As Object()) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(System::String ^ assemblyFile, System::String ^ typeName, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstanceFrom : string * string * obj[] -&gt; System.Runtime.Remoting.ObjectHandle&#xA;override this.CreateInstanceFrom : string * string * obj[] -&gt; System.Runtime.Remoting.ObjectHandle" Usage="appDomain.CreateInstanceFrom (assemblyFile, typeName, activationAttributes)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.CreateInstanceFrom(System.String,System.String,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="d7ccd-741">文件的名称（包括路径），该文件包含定义所请求类型的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-741">The name, including the path, of a file that contains an assembly that defines the requested type.</span></span> <span data-ttu-id="d7ccd-742">该程序集是使用 <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> 方法加载的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-742">The assembly is loaded using the <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> method.</span></span></param>
        <param name="typeName"><span data-ttu-id="d7ccd-743"><see cref="P:System.Type.FullName" /> 属性返回的所请求类型的完全限定名称，包含命名空间而不是程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-743">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="d7ccd-744">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-744">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="d7ccd-745">通常，为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-745">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="d7ccd-746">此参数与客户端激活的对象相关。客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-746">This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="d7ccd-747">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-747">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="d7ccd-748">创建在指定程序集文件中定义的指定类型的新实例。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-748">Creates a new instance of the specified type defined in the specified assembly file.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-749">一个对象，它是新实例的包装，或者如果找不到 <see langword="null" />，则为 <paramref name="typeName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-749">An object that is a wrapper for the new instance, or <see langword="null" /> if <paramref name="typeName" /> is not found.</span></span> <span data-ttu-id="d7ccd-750">返回值需要打开包装才能访问真实对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-750">The return value needs to be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-751">默认构造函数`typeName`调用。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-751">The default constructor for `typeName` is invoked.</span></span>  
  
 <span data-ttu-id="d7ccd-752">有关此方法的详细信息，请参阅<xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-752">For more information about this method, see the <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="d7ccd-753">当<xref:System.AppDomain.CreateInstanceFrom%2A>方法用于在目标应用程序域，而不从其进行调用的应用程序域中创建一个实例，该程序集是加载目标应用程序域中。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-753">When the <xref:System.AppDomain.CreateInstanceFrom%2A> method is used to create an instance in a target application domain, other than the application domain from which the call is made, the assembly is loaded in the target application domain.</span></span> <span data-ttu-id="d7ccd-754">但是，如果在调用应用程序域实例解包，以某些方式使用未包装的实例可能导致程序集加载到调用应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-754">However, if the instance is unwrapped in the calling application domain, using the unwrapped instance in certain ways can cause the assembly to be loaded into the calling application domain.</span></span> <span data-ttu-id="d7ccd-755">例如，该实例进行解包后，可能会请求其类型信息、 要调用其方法后期绑定的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-755">For example, after the instance is unwrapped, its type information might be requested, in order to call its methods late-bound.</span></span> <span data-ttu-id="d7ccd-756">程序集加载到调用应用程序域时，会发生异常。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-756">When the assembly is loaded into the calling application domain, exceptions can occur.</span></span>  
  
-   <span data-ttu-id="d7ccd-757">如果在同一程序集中的另一个版本之前加载到调用应用程序域，或调用应用程序域加载路径是不同的目标应用程序域的异常，如<xref:System.MissingMethodException>可能发生。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-757">If another version of the same assembly was previously loaded into the calling application domain, or if the load path of the calling application domain is different from that of the target application domain, exceptions such as <xref:System.MissingMethodException> can occur.</span></span>  
  
-   <span data-ttu-id="d7ccd-758">如果调用应用程序域进行早期绑定调用的实例类型，<xref:System.InvalidCastException>可能会尝试强制转换实例时引发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-758">If the calling application domain makes early-bound calls to the instance type, <xref:System.InvalidCastException> can be thrown when an attempt is made to cast the instance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-759"><paramref name="assemblyFile" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-759"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-760">未找到 <paramref name="assemblyFile" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-760"><paramref name="assemblyFile" /> was not found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="d7ccd-761">在 <paramref name="assemblyFile" /> 中未找到 <paramref name="typeName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-761"><paramref name="typeName" /> was not found in <paramref name="assemblyFile" />.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="d7ccd-762">调用方没有足够的权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-762">The caller does not have sufficient permission to call this constructor.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="d7ccd-763">未找到匹配的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-763">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7ccd-764">调用方不能为非继承自 <see cref="T:System.MarshalByRefObject" /> 的对象提供激活属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-764">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-765">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-765">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-766"><paramref name="assemblyFile" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-766"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-767">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-767">-or-</span></span> 
<span data-ttu-id="d7ccd-768">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyFile" /> 是用更高的版本编译的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-768">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-769">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-769">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="d7ccd-770">此示例为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-770">This instance is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="d7ccd-771">它能够读取包含程序集清单的文件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-771">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="d7ccd-772">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="d7ccd-772">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-773">它能够访问的程序集的位置，如果该程序集不在本地。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-773">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <altmember cref="M:System.Activator.CreateInstanceFrom(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(System::String ^ assemblyFile, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberSignature Language="F#" Value="member this.CreateInstanceFrom : string * string * bool * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] -&gt; System.Runtime.Remoting.ObjectHandle" Usage="appDomain.CreateInstanceFrom (assemblyFile, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="d7ccd-774">文件的名称（包括路径），该文件包含定义所请求类型的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-774">The name, including the path, of a file that contains an assembly that defines the requested type.</span></span> <span data-ttu-id="d7ccd-775">该程序集是使用 <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> 方法加载的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-775">The assembly is loaded using the <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> method.</span></span></param>
        <param name="typeName"><span data-ttu-id="d7ccd-776"><see cref="P:System.Type.FullName" /> 属性返回的所请求类型的完全限定名称，包含命名空间而不是程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-776">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="d7ccd-777">一个布尔值，指示是否执行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-777">A Boolean value specifying whether to perform a case-sensitive search or not.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="d7ccd-778">影响 <paramref name="typeName" /> 构造函数搜索的零个或多个位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-778">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="d7ccd-779">如果 <paramref name="bindingAttr" /> 为零，则对公共构造函数进行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-779">If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="d7ccd-780">一个对象，它启用绑定、对参数类型的强制、对成员的调用，以及通过反射对 <see cref="T:System.Reflection.MemberInfo" /> 对象的检索。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-780">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span></span> <span data-ttu-id="d7ccd-781">如果 <paramref name="binder" /> 为 null，则使用默认联编程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-781">If <paramref name="binder" /> is null, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="d7ccd-782">要传递给构造函数的实参。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-782">The arguments to pass to the constructor.</span></span> <span data-ttu-id="d7ccd-783">此实参数组必须在数量、顺序和类型方面与要调用的构造函数的形参匹配。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-783">This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="d7ccd-784">如果默认的构造函数是首选构造函数，则 <paramref name="args" /> 必须为空数组或 Null。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-784">If the default constructor is preferred, <paramref name="args" /> must be an empty array or null.</span></span></param>
        <param name="culture"><span data-ttu-id="d7ccd-785">区域性特定的信息，这些信息控制将 <paramref name="args" /> 强制转换为 <paramref name="typeName" /> 构造函数所声明的正式类型。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-785">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="d7ccd-786">如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-786">If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="d7ccd-787">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-787">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="d7ccd-788">通常，为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-788">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="d7ccd-789">此参数与客户端激活的对象相关。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-789">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="d7ccd-790">客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-790">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="d7ccd-791">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-791">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="d7ccd-792">创建在指定程序集文件中定义的指定类型的新实例。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-792">Creates a new instance of the specified type defined in the specified assembly file.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-793">一个对象，它是新实例的包装，或者如果找不到 <see langword="null" />，则为 <paramref name="typeName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-793">An object that is a wrapper for the new instance, or <see langword="null" /> if <paramref name="typeName" /> is not found.</span></span> <span data-ttu-id="d7ccd-794">返回值需要打开包装才能访问真实对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-794">The return value needs to be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-795">有关更多信息，请参见 <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-795">For more information, see the <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="d7ccd-796">当<xref:System.AppDomain.CreateInstanceFrom%2A>方法用于在目标应用程序域，而不从其进行调用的应用程序域中创建一个实例，该程序集是加载目标应用程序域中。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-796">When the <xref:System.AppDomain.CreateInstanceFrom%2A> method is used to create an instance in a target application domain, other than the application domain from which the call is made, the assembly is loaded in the target application domain.</span></span> <span data-ttu-id="d7ccd-797">但是，如果在调用应用程序域实例解包，以某些方式使用未包装的实例可能导致程序集加载到调用应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-797">However, if the instance is unwrapped in the calling application domain, using the unwrapped instance in certain ways can cause the assembly to be loaded into the calling application domain.</span></span> <span data-ttu-id="d7ccd-798">例如，该实例进行解包后，可能会请求其类型信息、 要调用其方法后期绑定的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-798">For example, after the instance is unwrapped, its type information might be requested, in order to call its methods late-bound.</span></span> <span data-ttu-id="d7ccd-799">程序集加载到调用应用程序域时，会发生异常。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-799">When the assembly is loaded into the calling application domain, exceptions can occur.</span></span>  
  
-   <span data-ttu-id="d7ccd-800">如果在同一程序集中的另一个版本之前加载到调用应用程序域，或调用应用程序域加载路径是不同的目标应用程序域的异常，如<xref:System.MissingMethodException>可能发生。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-800">If another version of the same assembly was previously loaded into the calling application domain, or if the load path of the calling application domain is different from that of the target application domain, exceptions such as <xref:System.MissingMethodException> can occur.</span></span>  
  
-   <span data-ttu-id="d7ccd-801">如果调用应用程序域进行早期绑定调用的实例类型，<xref:System.InvalidCastException>可能会尝试强制转换实例时引发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-801">If the calling application domain makes early-bound calls to the instance type, <xref:System.InvalidCastException> can be thrown when an attempt is made to cast the instance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-802"><paramref name="assemblyFile" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-802"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="d7ccd-803">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-803">-or-</span></span> 
 <span data-ttu-id="d7ccd-804"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-804"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7ccd-805">调用方不能为非继承自 <see cref="T:System.MarshalByRefObject" /> 的对象提供激活属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-805">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-806">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-806">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-807">未找到 <paramref name="assemblyFile" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-807"><paramref name="assemblyFile" /> was not found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="d7ccd-808">在 <paramref name="assemblyFile" /> 中未找到 <paramref name="typeName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-808"><paramref name="typeName" /> was not found in <paramref name="assemblyFile" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="d7ccd-809">未找到匹配的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-809">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="d7ccd-810">调用方没有足够的权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-810">The caller does not have sufficient permission to call this constructor.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-811"><paramref name="assemblyFile" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-811"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-812">或</span><span class="sxs-lookup"><span data-stu-id="d7ccd-812">-or-</span></span> 
 <span data-ttu-id="d7ccd-813"><paramref name="assemblyFile" /> 使用高于当前所加载版本的公共语言运行时版本编译而成。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-813"><paramref name="assemblyFile" /> was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-814">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-814">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="d7ccd-815">此示例为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-815">This instance is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="d7ccd-816">它能够读取包含程序集清单的文件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-816">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="d7ccd-817">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="d7ccd-817">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-818">它能够访问的程序集的位置，如果该程序集不在本地。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-818">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <altmember cref="M:System.Activator.CreateInstanceFrom(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFrom">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjectHandle CreateInstanceFrom(string assemblyFile, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjectHandle ^ CreateInstanceFrom(System::String ^ assemblyFile, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes, System::Security::Policy::Evidence ^ securityAttributes);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstanceFrom : string * string * bool * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] * System.Security.Policy.Evidence -&gt; System.Runtime.Remoting.ObjectHandle&#xA;override this.CreateInstanceFrom : string * string * bool * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] * System.Security.Policy.Evidence -&gt; System.Runtime.Remoting.ObjectHandle" Usage="appDomain.CreateInstanceFrom (assemblyFile, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes, securityAttributes)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of CreateInstanceFrom which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
        <Parameter Name="securityAttributes" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="d7ccd-819">文件的名称（包括路径），该文件包含定义所请求类型的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-819">The name, including the path, of a file that contains an assembly that defines the requested type.</span></span> <span data-ttu-id="d7ccd-820">该程序集是使用 <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> 方法加载的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-820">The assembly is loaded using the <see cref="M:System.Reflection.Assembly.LoadFrom(System.String)" /> method.</span></span></param>
        <param name="typeName"><span data-ttu-id="d7ccd-821"><see cref="P:System.Type.FullName" /> 属性返回的所请求类型的完全限定名称，包含命名空间而不是程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-821">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="d7ccd-822">一个布尔值，指示是否执行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-822">A Boolean value specifying whether to perform a case-sensitive search or not.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="d7ccd-823">影响 <paramref name="typeName" /> 构造函数搜索的零个或多个位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-823">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="d7ccd-824">如果 <paramref name="bindingAttr" /> 为零，则对公共构造函数进行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-824">If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="d7ccd-825">一个对象，它启用绑定、对参数类型的强制、对成员的调用，以及通过反射对 <see cref="T:System.Reflection.MemberInfo" /> 对象的检索。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-825">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span></span> <span data-ttu-id="d7ccd-826">如果 <paramref name="binder" /> 为 null，则使用默认联编程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-826">If <paramref name="binder" /> is null, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="d7ccd-827">要传递给构造函数的实参。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-827">The arguments to pass to the constructor.</span></span> <span data-ttu-id="d7ccd-828">此实参数组必须在数量、顺序和类型方面与要调用的构造函数的形参匹配。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-828">This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="d7ccd-829">如果默认的构造函数是首选构造函数，则 <paramref name="args" /> 必须为空数组或 Null。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-829">If the default constructor is preferred, <paramref name="args" /> must be an empty array or null.</span></span></param>
        <param name="culture"><span data-ttu-id="d7ccd-830">区域性特定的信息，这些信息控制将 <paramref name="args" /> 强制转换为 <paramref name="typeName" /> 构造函数所声明的正式类型。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-830">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="d7ccd-831">如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-831">If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="d7ccd-832">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-832">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="d7ccd-833">通常，为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-833">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="d7ccd-834">此参数与客户端激活的对象相关。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-834">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="d7ccd-835">客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-835">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="d7ccd-836">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-836">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <param name="securityAttributes"><span data-ttu-id="d7ccd-837">用于授权创建 <paramref name="typeName" /> 的信息。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-837">Information used to authorize creation of <paramref name="typeName" />.</span></span></param>
        <summary><span data-ttu-id="d7ccd-838">创建在指定程序集文件中定义的指定类型的新实例。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-838">Creates a new instance of the specified type defined in the specified assembly file.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-839">一个对象，它是新实例的包装，或者如果找不到 <see langword="null" />，则为 <paramref name="typeName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-839">An object that is a wrapper for the new instance, or <see langword="null" /> if <paramref name="typeName" /> is not found.</span></span> <span data-ttu-id="d7ccd-840">返回值需要打开包装才能访问真实对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-840">The return value needs to be unwrapped to access the real object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-841">有关此方法的详细信息，请参阅<xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-841">For more information about this method, see the <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="d7ccd-842">当<xref:System.AppDomain.CreateInstanceFrom%2A>方法用于在目标应用程序域，而不从其进行调用的应用程序域中创建一个实例，该程序集是加载目标应用程序域中。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-842">When the <xref:System.AppDomain.CreateInstanceFrom%2A> method is used to create an instance in a target application domain, other than the application domain from which the call is made, the assembly is loaded in the target application domain.</span></span> <span data-ttu-id="d7ccd-843">但是，如果在调用应用程序域实例解包，以某些方式使用未包装的实例可能导致程序集加载到调用应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-843">However, if the instance is unwrapped in the calling application domain, using the unwrapped instance in certain ways can cause the assembly to be loaded into the calling application domain.</span></span> <span data-ttu-id="d7ccd-844">例如，该实例进行解包后，可能会请求其类型信息、 要调用其方法后期绑定的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-844">For example, after the instance is unwrapped, its type information might be requested, in order to call its methods late-bound.</span></span> <span data-ttu-id="d7ccd-845">程序集加载到调用应用程序域时，会发生异常。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-845">When the assembly is loaded into the calling application domain, exceptions can occur.</span></span>  
  
-   <span data-ttu-id="d7ccd-846">如果在同一程序集中的另一个版本之前加载到调用应用程序域，或调用应用程序域加载路径是不同的目标应用程序域的异常，如<xref:System.MissingMethodException>可能发生。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-846">If another version of the same assembly was previously loaded into the calling application domain, or if the load path of the calling application domain is different from that of the target application domain, exceptions such as <xref:System.MissingMethodException> can occur.</span></span>  
  
-   <span data-ttu-id="d7ccd-847">如果调用应用程序域进行早期绑定调用的实例类型，<xref:System.InvalidCastException>可能会尝试强制转换实例时引发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-847">If the calling application domain makes early-bound calls to the instance type, <xref:System.InvalidCastException> can be thrown when an attempt is made to cast the instance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-848"><paramref name="assemblyFile" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-848"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="d7ccd-849">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-849">-or-</span></span> 
 <span data-ttu-id="d7ccd-850"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-850"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7ccd-851">调用方不能为非继承自 <see cref="T:System.MarshalByRefObject" /> 的对象提供激活属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-851">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span>  
  
<span data-ttu-id="d7ccd-852">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-852">-or-</span></span> 
 <span data-ttu-id="d7ccd-853"><paramref name="securityAttributes" /> 不是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-853"><paramref name="securityAttributes" /> is not <see langword="null" />.</span></span> <span data-ttu-id="d7ccd-854">未启用旧版 CAS 策略时，<paramref name="securityAttributes" /> 应为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-854">When legacy CAS policy is not enabled, <paramref name="securityAttributes" /> should be <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-855">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-855">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-856">未找到 <paramref name="assemblyFile" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-856"><paramref name="assemblyFile" /> was not found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="d7ccd-857">在 <paramref name="assemblyFile" /> 中未找到 <paramref name="typeName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-857"><paramref name="typeName" /> was not found in <paramref name="assemblyFile" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="d7ccd-858">未找到匹配的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-858">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="d7ccd-859">调用方没有足够的权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-859">The caller does not have sufficient permission to call this constructor.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-860"><paramref name="assemblyFile" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-860"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-861">或</span><span class="sxs-lookup"><span data-stu-id="d7ccd-861">-or-</span></span> 
<span data-ttu-id="d7ccd-862">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyFile" /> 是用更高的版本编译的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-862">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-863">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-863">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="d7ccd-864">此示例为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-864">This instance is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="d7ccd-865">它能够读取包含程序集清单的文件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-865">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="d7ccd-866">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="d7ccd-866">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-867">它能够访问的程序集的位置，如果该程序集不在本地。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-867">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-868">若要提供的证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-868">to provide evidence.</span></span> <span data-ttu-id="d7ccd-869">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-869">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <altmember cref="M:System.Activator.CreateInstanceFrom(System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateInstanceFromAndUnwrap">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d7ccd-870">创建在指定程序集文件中定义的指定类型的新实例。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-870">Creates a new instance of a specified type defined in the specified assembly file.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateInstanceFromAndUnwrap">
      <MemberSignature Language="C#" Value="public object CreateInstanceFromAndUnwrap (string assemblyName, string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateInstanceFromAndUnwrap(string assemblyName, string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstanceFromAndUnwrap (assemblyName As String, typeName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateInstanceFromAndUnwrap(System::String ^ assemblyName, System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.CreateInstanceFromAndUnwrap : string * string -&gt; obj" Usage="appDomain.CreateInstanceFromAndUnwrap (assemblyName, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="d7ccd-871">定义所请求类型的程序集的文件名和路径。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-871">The file name and path of the assembly that defines the requested type.</span></span></param>
        <param name="typeName"><span data-ttu-id="d7ccd-872"><see cref="P:System.Type.FullName" /> 属性返回的所请求类型的完全限定名称，包含命名空间而不是程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-872">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <summary><span data-ttu-id="d7ccd-873">创建在指定程序集文件中定义的指定类型的新实例。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-873">Creates a new instance of the specified type defined in the specified assembly file.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-874">请求的对象，或者如果找不到 <paramref name="typeName" /> 则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-874">The requested object, or <see langword="null" /> if <paramref name="typeName" /> is not found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-875">这是一个便利方法，将组合在一起<xref:System.AppDomain.CreateInstanceFrom%2A>和<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-875">This is a convenience method that combines <xref:System.AppDomain.CreateInstanceFrom%2A> and <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d7ccd-876">此方法调用的默认构造函数`typeName`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-876">This method calls the default constructor for `typeName`.</span></span>  
  
 <span data-ttu-id="d7ccd-877">有关更多信息，请参见 <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> 方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-877">For more information, see the <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-878"><paramref name="assemblyName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-878"><paramref name="assemblyName" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="d7ccd-879">或</span><span class="sxs-lookup"><span data-stu-id="d7ccd-879">-or-</span></span> 
 <span data-ttu-id="d7ccd-880"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-880"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-881">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-881">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-882">未找到 <paramref name="assemblyName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-882"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="d7ccd-883">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typeName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-883"><paramref name="typeName" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="d7ccd-884">未找到无形参的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-884">No parameterless public constructor was found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="d7ccd-885">调用方没有足够的权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-885">The caller does not have sufficient permission to call this constructor.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-886"><paramref name="assemblyName" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-886"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-887">或</span><span class="sxs-lookup"><span data-stu-id="d7ccd-887">-or-</span></span> 
<span data-ttu-id="d7ccd-888">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyName" /> 是用更高的版本编译的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-888">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-889">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-889">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="d7ccd-890">它能够读取包含程序集清单的文件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-890">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="d7ccd-891">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="d7ccd-891">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-892">它能够访问的程序集的位置，如果该程序集不在本地。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-892">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <altmember cref="M:System.Activator.CreateInstanceFrom(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFromAndUnwrap">
      <MemberSignature Language="C#" Value="public object CreateInstanceFromAndUnwrap (string assemblyName, string typeName, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateInstanceFromAndUnwrap(string assemblyName, string typeName, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateInstanceFromAndUnwrap (assemblyName As String, typeName As String, activationAttributes As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateInstanceFromAndUnwrap(System::String ^ assemblyName, System::String ^ typeName, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberSignature Language="F#" Value="member this.CreateInstanceFromAndUnwrap : string * string * obj[] -&gt; obj" Usage="appDomain.CreateInstanceFromAndUnwrap (assemblyName, typeName, activationAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="d7ccd-893">定义所请求类型的程序集的文件名和路径。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-893">The file name and path of the assembly that defines the requested type.</span></span></param>
        <param name="typeName"><span data-ttu-id="d7ccd-894">所请求类型的完全限定名，包括命名空间而不是程序集（请参见 <see cref="P:System.Type.FullName" /> 属性）。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-894">The fully qualified name of the requested type, including the namespace but not the assembly (see the <see cref="P:System.Type.FullName" /> property).</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="d7ccd-895">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-895">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="d7ccd-896">通常，为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-896">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="d7ccd-897">此参数与客户端激活的对象相关。客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-897">This parameter is related to client-activated objects.Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="d7ccd-898">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-898">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="d7ccd-899">创建在指定程序集文件中定义的指定类型的新实例。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-899">Creates a new instance of the specified type defined in the specified assembly file.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-900">请求的对象，或者如果找不到 <paramref name="typeName" /> 则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-900">The requested object, or <see langword="null" /> if <paramref name="typeName" /> is not found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-901">这是一个便利方法，将组合在一起<xref:System.AppDomain.CreateInstanceFrom%2A>和<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-901">This is a convenience method that combines <xref:System.AppDomain.CreateInstanceFrom%2A> and <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="d7ccd-902">此方法调用的默认构造函数`typeName`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-902">This method calls the default constructor for `typeName`.</span></span>  
  
 <span data-ttu-id="d7ccd-903">有关此方法的详细信息，请参阅<xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-903">For more information about this method, see the <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-904"><paramref name="assemblyName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-904"><paramref name="assemblyName" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="d7ccd-905">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-905">-or-</span></span> 
 <span data-ttu-id="d7ccd-906"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-906"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7ccd-907">调用方不能为非继承自 <see cref="T:System.MarshalByRefObject" /> 的对象提供激活属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-907">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-908">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-908">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-909">未找到 <paramref name="assemblyName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-909"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="d7ccd-910">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typeName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-910"><paramref name="typeName" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="d7ccd-911">未找到无形参的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-911">No parameterless public constructor was found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="d7ccd-912">调用方没有足够的权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-912">The caller does not have sufficient permission to call this constructor.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-913"><paramref name="assemblyName" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-913"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-914">或</span><span class="sxs-lookup"><span data-stu-id="d7ccd-914">-or-</span></span> 
<span data-ttu-id="d7ccd-915">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyName" /> 是用更高的版本编译的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-915">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-916">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-916">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="d7ccd-917">它能够读取包含程序集清单的文件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-917">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="d7ccd-918">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="d7ccd-918">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-919">它能够访问的程序集的位置，如果该程序集不在本地。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-919">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <altmember cref="M:System.Activator.CreateInstanceFrom(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFromAndUnwrap">
      <MemberSignature Language="C#" Value="public object CreateInstanceFromAndUnwrap (string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateInstanceFromAndUnwrap(string assemblyFile, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateInstanceFromAndUnwrap(System::String ^ assemblyFile, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes);" />
      <MemberSignature Language="F#" Value="member this.CreateInstanceFromAndUnwrap : string * string * bool * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] -&gt; obj" Usage="appDomain.CreateInstanceFromAndUnwrap (assemblyFile, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="d7ccd-920">定义所请求类型的程序集的文件名和路径。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-920">The file name and path of the assembly that defines the requested type.</span></span></param>
        <param name="typeName"><span data-ttu-id="d7ccd-921"><see cref="P:System.Type.FullName" /> 属性返回的所请求类型的完全限定名称，包含命名空间而不是程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-921">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="d7ccd-922">一个布尔值，指示是否执行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-922">A Boolean value specifying whether to perform a case-sensitive search or not.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="d7ccd-923">影响 <paramref name="typeName" /> 构造函数搜索的零个或多个位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-923">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="d7ccd-924">如果 <paramref name="bindingAttr" /> 为零，则对公共构造函数进行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-924">If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="d7ccd-925">一个对象，它启用绑定、对参数类型的强制、对成员的调用，以及通过反射对 <see cref="T:System.Reflection.MemberInfo" /> 对象的检索。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-925">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span></span> <span data-ttu-id="d7ccd-926">如果 <paramref name="binder" /> 为 null，则使用默认联编程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-926">If <paramref name="binder" /> is null, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="d7ccd-927">要传递给构造函数的实参。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-927">The arguments to pass to the constructor.</span></span> <span data-ttu-id="d7ccd-928">此实参数组必须在数量、顺序和类型方面与要调用的构造函数的形参匹配。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-928">This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="d7ccd-929">如果默认的构造函数是首选构造函数，则 <paramref name="args" /> 必须为空数组或 Null。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-929">If the default constructor is preferred, <paramref name="args" /> must be an empty array or null.</span></span></param>
        <param name="culture"><span data-ttu-id="d7ccd-930">区域性特定的信息，这些信息控制将 <paramref name="args" /> 强制转换为 <paramref name="typeName" /> 构造函数所声明的正式类型。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-930">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="d7ccd-931">如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-931">If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="d7ccd-932">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-932">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="d7ccd-933">通常，为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-933">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="d7ccd-934">此参数与客户端激活的对象相关。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-934">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="d7ccd-935">客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-935">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="d7ccd-936">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-936">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <summary><span data-ttu-id="d7ccd-937">创建在指定的程序集文件中定义的指定类型的新实例，指定是否忽略类型名称的大小写，并指定绑定特性和用于选择要创建的类型的联编程序、构造函数的自变量、区域性以及激活特性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-937">Creates a new instance of the specified type defined in the specified assembly file, specifying whether the case of the type name is ignored; the binding attributes and the binder that are used to select the type to be created; the arguments of the constructor; the culture; and the activation attributes.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-938">请求的对象，或者如果找不到 <paramref name="typeName" /> 则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-938">The requested object, or <see langword="null" /> if <paramref name="typeName" /> is not found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-939">这是一个便利方法，将组合在一起<xref:System.AppDomain.CreateInstanceFrom%2A>和<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-939">This is a convenience method that combines <xref:System.AppDomain.CreateInstanceFrom%2A> and <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="d7ccd-940">有关此方法的详细信息，请参阅<xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-940">For more information about this method, see the <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-941"><paramref name="assemblyName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-941"><paramref name="assemblyName" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="d7ccd-942">或</span><span class="sxs-lookup"><span data-stu-id="d7ccd-942">-or-</span></span> 
 <span data-ttu-id="d7ccd-943"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-943"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7ccd-944">调用方不能为非继承自 <see cref="T:System.MarshalByRefObject" /> 的对象提供激活属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-944">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-945">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-945">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-946">未找到 <paramref name="assemblyName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-946"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="d7ccd-947">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typeName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-947"><paramref name="typeName" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="d7ccd-948">未找到匹配的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-948">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="d7ccd-949">调用方没有足够的权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-949">The caller does not have sufficient permission to call this constructor.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-950"><paramref name="assemblyName" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-950"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-951">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-951">-or-</span></span> 
 <span data-ttu-id="d7ccd-952"><paramref name="assemblyName" /> 使用高于当前所加载版本的公共语言运行时版本编译而成。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-952"><paramref name="assemblyName" /> was compiled with a later version of the common language runtime that the version that is currently loaded.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-953">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-953">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="d7ccd-954">它能够读取包含程序集清单的文件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-954">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="d7ccd-955">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="d7ccd-955">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-956">它能够访问的程序集的位置，如果该程序集不在本地。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-956">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <altmember cref="M:System.Activator.CreateInstanceFrom(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceFromAndUnwrap">
      <MemberSignature Language="C#" Value="public object CreateInstanceFromAndUnwrap (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object CreateInstanceFromAndUnwrap(string assemblyName, string typeName, bool ignoreCase, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, object[] args, class System.Globalization.CultureInfo culture, object[] activationAttributes, class System.Security.Policy.Evidence securityAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ CreateInstanceFromAndUnwrap(System::String ^ assemblyName, System::String ^ typeName, bool ignoreCase, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::Object ^&gt; ^ activationAttributes, System::Security::Policy::Evidence ^ securityAttributes);" />
      <MemberSignature Language="F#" Value="member this.CreateInstanceFromAndUnwrap : string * string * bool * System.Reflection.BindingFlags * System.Reflection.Binder * obj[] * System.Globalization.CultureInfo * obj[] * System.Security.Policy.Evidence -&gt; obj" Usage="appDomain.CreateInstanceFromAndUnwrap (assemblyName, typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes, securityAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of CreateInstanceFromAndUnwrap which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="activationAttributes" Type="System.Object[]" />
        <Parameter Name="securityAttributes" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="d7ccd-957">定义所请求类型的程序集的文件名和路径。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-957">The file name and path of the assembly that defines the requested type.</span></span></param>
        <param name="typeName"><span data-ttu-id="d7ccd-958"><see cref="P:System.Type.FullName" /> 属性返回的所请求类型的完全限定名称，包含命名空间而不是程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-958">The fully qualified name of the requested type, including the namespace but not the assembly, as returned by the <see cref="P:System.Type.FullName" /> property.</span></span></param>
        <param name="ignoreCase"><span data-ttu-id="d7ccd-959">一个布尔值，指示是否执行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-959">A Boolean value specifying whether to perform a case-sensitive search or not.</span></span></param>
        <param name="bindingAttr"><span data-ttu-id="d7ccd-960">影响 <paramref name="typeName" /> 构造函数搜索的零个或多个位标志的组合。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-960">A combination of zero or more bit flags that affect the search for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="d7ccd-961">如果 <paramref name="bindingAttr" /> 为零，则对公共构造函数进行区分大小写的搜索。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-961">If <paramref name="bindingAttr" /> is zero, a case-sensitive search for public constructors is conducted.</span></span></param>
        <param name="binder"><span data-ttu-id="d7ccd-962">一个对象，它启用绑定、对参数类型的强制、对成员的调用，以及通过反射对 <see cref="T:System.Reflection.MemberInfo" /> 对象的检索。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-962">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <see cref="T:System.Reflection.MemberInfo" /> objects through reflection.</span></span> <span data-ttu-id="d7ccd-963">如果 <paramref name="binder" /> 为 null，则使用默认联编程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-963">If <paramref name="binder" /> is null, the default binder is used.</span></span></param>
        <param name="args"><span data-ttu-id="d7ccd-964">要传递给构造函数的实参。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-964">The arguments to pass to the constructor.</span></span> <span data-ttu-id="d7ccd-965">此实参数组必须在数量、顺序和类型方面与要调用的构造函数的形参匹配。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-965">This array of arguments must match in number, order, and type the parameters of the constructor to invoke.</span></span> <span data-ttu-id="d7ccd-966">如果默认的构造函数是首选构造函数，则 <paramref name="args" /> 必须为空数组或 Null。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-966">If the default constructor is preferred, <paramref name="args" /> must be an empty array or null.</span></span></param>
        <param name="culture"><span data-ttu-id="d7ccd-967">区域性特定的信息，这些信息控制将 <paramref name="args" /> 强制转换为 <paramref name="typeName" /> 构造函数所声明的正式类型。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-967">Culture-specific information that governs the coercion of <paramref name="args" /> to the formal types declared for the <paramref name="typeName" /> constructor.</span></span> <span data-ttu-id="d7ccd-968">如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-968">If <paramref name="culture" /> is <see langword="null" />, the <see cref="T:System.Globalization.CultureInfo" /> for the current thread is used.</span></span></param>
        <param name="activationAttributes"><span data-ttu-id="d7ccd-969">包含一个或多个可以参与激活的特性的数组。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-969">An array of one or more attributes that can participate in activation.</span></span> <span data-ttu-id="d7ccd-970">通常，为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-970">Typically, an array that contains a single <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> object that specifies the URL that is required to activate a remote object.</span></span>  
  
<span data-ttu-id="d7ccd-971">此参数与客户端激活的对象相关。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-971">This parameter is related to client-activated objects.</span></span> <span data-ttu-id="d7ccd-972">客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-972">Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.</span></span> <span data-ttu-id="d7ccd-973">应改用 Windows Communication Foundation 来开发分布式应用程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-973">Distributed applications should instead use Windows Communication Foundation.</span></span></param>
        <param name="securityAttributes"><span data-ttu-id="d7ccd-974">用于授权创建 <paramref name="typeName" /> 的信息。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-974">Information used to authorize creation of <paramref name="typeName" />.</span></span></param>
        <summary><span data-ttu-id="d7ccd-975">创建在指定程序集文件中定义的指定类型的新实例。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-975">Creates a new instance of the specified type defined in the specified assembly file.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-976">请求的对象，或者如果找不到 <paramref name="typeName" /> 则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-976">The requested object, or <see langword="null" /> if <paramref name="typeName" /> is not found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-977">这是一个便利方法，将组合在一起<xref:System.AppDomain.CreateInstanceFrom%2A>和<xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-977">This is a convenience method that combines <xref:System.AppDomain.CreateInstanceFrom%2A> and <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="d7ccd-978">有关此方法的详细信息，请参阅<xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-978">For more information about this method, see the <xref:System.Activator.CreateInstanceFrom%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-979"><paramref name="assemblyName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-979"><paramref name="assemblyName" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="d7ccd-980">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-980">-or-</span></span> 
 <span data-ttu-id="d7ccd-981"><paramref name="typeName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-981"><paramref name="typeName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7ccd-982">调用方不能为非继承自 <see cref="T:System.MarshalByRefObject" /> 的对象提供激活属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-982">The caller cannot provide activation attributes for an object that does not inherit from <see cref="T:System.MarshalByRefObject" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-983">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-983">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-984">未找到 <paramref name="assemblyName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-984"><paramref name="assemblyName" /> was not found.</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="d7ccd-985">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typeName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-985"><paramref name="typeName" /> was not found in <paramref name="assemblyName" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="d7ccd-986">未找到匹配的公共构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-986">No matching public constructor was found.</span></span></exception>
        <exception cref="T:System.MethodAccessException"><span data-ttu-id="d7ccd-987">调用方没有足够的权限调用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-987">The caller does not have sufficient permission to call this constructor.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-988"><paramref name="assemblyName" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-988"><paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-989">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-989">-or-</span></span> 
<span data-ttu-id="d7ccd-990">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyName" /> 是用更高的版本编译的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-990">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-991">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-991">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermissionAccess"><span data-ttu-id="d7ccd-992">它能够读取包含程序集清单的文件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-992">for the ability to read the file containing the assembly manifest.</span></span> <span data-ttu-id="d7ccd-993">关联的枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span><span class="sxs-lookup"><span data-stu-id="d7ccd-993">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-994">它能够访问的程序集的位置，如果该程序集不在本地。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-994">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
        <altmember cref="M:System.Activator.CreateInstanceFrom(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CurrentDomain">
      <MemberSignature Language="C#" Value="public static AppDomain CurrentDomain { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.AppDomain CurrentDomain" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.CurrentDomain" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentDomain As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property AppDomain ^ CurrentDomain { AppDomain ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDomain : AppDomain" Usage="System.AppDomain.CurrentDomain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7ccd-995">获取当前 <see cref="T:System.Threading.Thread" /> 的当前应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-995">Gets the current application domain for the current <see cref="T:System.Threading.Thread" />.</span></span></summary>
        <value><span data-ttu-id="d7ccd-996">当前应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-996">The current application domain.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d7ccd-997">下面的代码示例创建一个新的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-997">The following code example creates a new application domain.</span></span> <span data-ttu-id="d7ccd-998"><xref:System.AppDomain.CurrentDomain%2A>属性用于获取<xref:System.AppDomain>对象，表示当前应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-998">The <xref:System.AppDomain.CurrentDomain%2A> property is used to obtain an <xref:System.AppDomain> object that represents the current application domain.</span></span> <span data-ttu-id="d7ccd-999"><xref:System.AppDomain.FriendlyName%2A>属性提供当前应用程序域，然后在命令行上显示的名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-999">The <xref:System.AppDomain.FriendlyName%2A> property provides the name of the current application domain, which is then displayed at the command line.</span></span>  
  
 [!code-cpp[ADApplicationBase#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADApplicationBase/CPP/adapplicationbase.cpp#1)]
 [!code-csharp[ADApplicationBase#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADApplicationBase/CS/adapplicationbase.cs#1)]
 [!code-vb[ADApplicationBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADApplicationBase/VB/adapplicationbase.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefineDynamicAssembly">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d7ccd-1000">在当前应用程序域中定义动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1000">Defines a dynamic assembly in the current application domain.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDynamicAssembly (name As AssemblyName, access As AssemblyBuilderAccess) As AssemblyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access);" />
      <MemberSignature Language="F#" Value="abstract member DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess -&gt; System.Reflection.Emit.AssemblyBuilder&#xA;override this.DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess -&gt; System.Reflection.Emit.AssemblyBuilder" Usage="appDomain.DefineDynamicAssembly (name, access)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="d7ccd-1001">动态程序集的唯一标识。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1001">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="d7ccd-1002">动态程序集的访问模式。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1002">The access mode for the dynamic assembly.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1003">以指定名称和访问模式定义动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1003">Defines a dynamic assembly with the specified name and access mode.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1004">含指定名称和访问模式的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1004">A dynamic assembly with the specified name and access mode.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1005">此方法只应该用于当前应用程序域中定义动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1005">This method should only be used to define a dynamic assembly in the current application domain.</span></span> <span data-ttu-id="d7ccd-1006">有关详细信息，请参阅<xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1006">For more information, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7ccd-1007">在开发期间用于发出动态程序集的代码，建议你使用的重载<xref:System.AppDomain.DefineDynamicAssembly%2A>方法，它指定证据和权限，提供你想要有，并且包含的动态程序集的证据<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType>中`refusedPermissions`.</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1007">During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the <xref:System.AppDomain.DefineDynamicAssembly%2A> method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> in `refusedPermissions`.</span></span> <span data-ttu-id="d7ccd-1008">其中包括<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification>在`refusedPermissions`参数可确保验证 MSIL。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1008">Including <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> in the `refusedPermissions` parameter ensures that the MSIL is verified.</span></span> <span data-ttu-id="d7ccd-1009">此技术的一个限制是，它还会导致<xref:System.Security.SecurityException>与要求完全信任的代码一起使用时引发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1009">A limitation of this technique is that it also causes <xref:System.Security.SecurityException> to be thrown when used with code that demands full trust.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-1010">下面的示例演示如何<xref:System.AppDomain.DefineDynamicAssembly%2A>方法和<xref:System.AppDomain.AssemblyResolve>事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1010">The following sample demonstrates the <xref:System.AppDomain.DefineDynamicAssembly%2A> method and <xref:System.AppDomain.AssemblyResolve> event.</span></span>  
  
 <span data-ttu-id="d7ccd-1011">有关运行此代码示例，必须提供完全限定的程序集名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1011">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="d7ccd-1012">有关如何获取完全限定的程序集名称的信息，请参阅[程序集名称](~/docs/framework/app-domains/assembly-names.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1012">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CPP/definedynamicassembly.cpp#1)]
 [!code-csharp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CS/definedynamicassembly.cs#1)]
 [!code-vb[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/VB/definedynamicassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-1013"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1013"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7ccd-1014"><paramref name="name" /> 的 <see langword="Name" /> 属性为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1014">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="d7ccd-1015">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1015">-or-</span></span> 
<span data-ttu-id="d7ccd-1016"><paramref name="name" /> 的 <see langword="Name" /> 属性以空格开头，或包含正斜杠或反斜杠。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1016">The <see langword="Name" /> property of <paramref name="name" /> begins with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1017">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1017">The operation is attempted on an unloaded application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDynamicAssembly (name As AssemblyName, access As AssemblyBuilderAccess, assemblyAttributes As IEnumerable(Of CustomAttributeBuilder)) As AssemblyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::Collections::Generic::IEnumerable&lt;System::Reflection::Emit::CustomAttributeBuilder ^&gt; ^ assemblyAttributes);" />
      <MemberSignature Language="F#" Value="member this.DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * seq&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; -&gt; System.Reflection.Emit.AssemblyBuilder" Usage="appDomain.DefineDynamicAssembly (name, access, assemblyAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="assemblyAttributes" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="d7ccd-1018">动态程序集的唯一标识。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1018">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="d7ccd-1019">动态程序集的访问模式。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1019">The access mode for the dynamic assembly.</span></span></param>
        <param name="assemblyAttributes"><span data-ttu-id="d7ccd-1020">要应用于程序集的可枚举特性列表；如果无特性，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1020">An enumerable list of attributes to be applied to the assembly, or <see langword="null" /> if there are no attributes.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1021">使用指定的名称、访问模式和自定义特性定义动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1021">Defines a dynamic assembly with the specified name, access mode, and custom attributes.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1022">具有指定名称和功能的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1022">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1023">使用此方法重载来指定属性，除非在已应用创建动态程序集时，可能无法正常工作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1023">Use this method overload to specify attributes that do not work correctly unless they are applied when a dynamic assembly is created.</span></span> <span data-ttu-id="d7ccd-1024">例如，安全属性，如<xref:System.Security.SecurityTransparentAttribute>和<xref:System.Security.SecurityCriticalAttribute>即使添加了创建动态程序集后，可能无法正常工作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1024">For example, security attributes such as <xref:System.Security.SecurityTransparentAttribute> and <xref:System.Security.SecurityCriticalAttribute> do not work correctly if they are added after a dynamic assembly has been created.</span></span>  
  
 <span data-ttu-id="d7ccd-1025">应使用此方法只能用于当前应用程序域中定义动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1025">This method should be used only to define a dynamic assembly in the current application domain.</span></span> <span data-ttu-id="d7ccd-1026">有关此限制的详细信息，请参阅<xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1026">For more information about this restriction, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
 <span data-ttu-id="d7ccd-1027">中引入了此方法重载[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1027">This method overload is introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-1028">下面的代码示例演示如何创建动态程序集具有<xref:System.Security.SecurityTransparentAttribute>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1028">The following code sample shows how to create a dynamic assembly that has the <xref:System.Security.SecurityTransparentAttribute>.</span></span> <span data-ttu-id="d7ccd-1029">必须将属性指定的数组的元素为<xref:System.Reflection.Emit.CustomAttributeBuilder>对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1029">The attribute must be specified as an element of an array of <xref:System.Reflection.Emit.CustomAttributeBuilder> objects.</span></span>  
  
 <span data-ttu-id="d7ccd-1030">创建的第一步<xref:System.Reflection.Emit.CustomAttributeBuilder>以获取该属性的构造函数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1030">The first step in creating the <xref:System.Reflection.Emit.CustomAttributeBuilder> is to obtain a constructor for the attribute.</span></span> <span data-ttu-id="d7ccd-1031">构造函数没有任何参数，因此<xref:System.Type.GetConstructor%2A>的空数组与调用方法<xref:System.Type>对象来表示参数的类型。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1031">The constructor has no parameters, so the <xref:System.Type.GetConstructor%2A> method is called with an empty array of <xref:System.Type> objects to represent the types of the parameters.</span></span> <span data-ttu-id="d7ccd-1032">第二步是将生成<xref:System.Reflection.ConstructorInfo>对象的构造函数<xref:System.Reflection.Emit.CustomAttributeBuilder>类，以及类型的空数组<xref:System.Object>来表示的参数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1032">The second step is to pass the resulting <xref:System.Reflection.ConstructorInfo> object to the constructor for the <xref:System.Reflection.Emit.CustomAttributeBuilder> class, together with an empty array of type <xref:System.Object> to represent the arguments.</span></span>  
  
 <span data-ttu-id="d7ccd-1033">得到<xref:System.Reflection.Emit.CustomAttributeBuilder>随后将传递到<xref:System.AppDomain.DefineDynamicAssembly%2A>方法作为数组的唯一元素。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1033">The resulting <xref:System.Reflection.Emit.CustomAttributeBuilder> is then passed to the <xref:System.AppDomain.DefineDynamicAssembly%2A> method as the only element of an array.</span></span>  
  
 <span data-ttu-id="d7ccd-1034">示例代码在新的动态程序集中定义模块和一个类型，然后显示该程序集的属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1034">The example code defines a module and a type in the new dynamic assembly, and then displays the assembly's attributes.</span></span>  
  
 [!code-cpp[DefineDynamicAssemblyWithAttributes#1](~/samples/snippets/cpp/VS_Snippets_CLR/DefineDynamicAssemblyWithAttributes/cpp/source.cpp#1)]
 [!code-csharp[DefineDynamicAssemblyWithAttributes#1](~/samples/snippets/csharp/VS_Snippets_CLR/DefineDynamicAssemblyWithAttributes/cs/source.cs#1)]
 [!code-vb[DefineDynamicAssemblyWithAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DefineDynamicAssemblyWithAttributes/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-1035"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1035"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7ccd-1036"><paramref name="name" /> 的 <see langword="Name" /> 属性为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1036">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="d7ccd-1037">或</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1037">-or-</span></span> 
<span data-ttu-id="d7ccd-1038"><paramref name="name" /> 的 <see langword="Name" /> 属性以空白开始，或者包含正斜杠或反斜杠。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1038">The <see langword="Name" /> property of <paramref name="name" /> starts with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1039">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1039">The operation is attempted on an unloaded application domain.</span></span></exception>
        <altmember cref="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::Security::Policy::Evidence ^ evidence);" />
      <MemberSignature Language="F#" Value="abstract member DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * System.Security.Policy.Evidence -&gt; System.Reflection.Emit.AssemblyBuilder&#xA;override this.DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * System.Security.Policy.Evidence -&gt; System.Reflection.Emit.AssemblyBuilder" Usage="appDomain.DefineDynamicAssembly (name, access, evidence)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Declarative security for assembly level is no longer enforced")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Assembly level declarative security is obsolete and is no longer enforced by the CLR by default.  See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="d7ccd-1040">动态程序集的唯一标识。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1040">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="d7ccd-1041">访问动态程序集所采用的模式。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1041">The mode in which the dynamic assembly will be accessed.</span></span></param>
        <param name="evidence"><span data-ttu-id="d7ccd-1042">为动态程序集提供的证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1042">The evidence supplied for the dynamic assembly.</span></span> <span data-ttu-id="d7ccd-1043">该证据始终作为最后一组用于策略解析的证据来使用。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1043">The evidence is used unaltered as the final set of evidence used for policy resolution.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1044">使用指定名称、访问模式和证据定义动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1044">Defines a dynamic assembly using the specified name, access mode, and evidence.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1045">具有指定名称和功能的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1045">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1046">只有完全受信任调用方可以提供其`evidence`定义动态时<xref:System.Reflection.Assembly>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1046">Only fully trusted callers can supply their `evidence` when defining a dynamic <xref:System.Reflection.Assembly>.</span></span> <span data-ttu-id="d7ccd-1047">在运行时将映射<xref:System.Security.Policy.Evidence>通过安全策略，以确定授予的权限。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1047">The runtime will map the <xref:System.Security.Policy.Evidence> through the security policy to determine the granted permissions.</span></span> <span data-ttu-id="d7ccd-1048">部分受信任的调用方必须提供 null `evidence`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1048">Partially trusted callers must supply a null `evidence`.</span></span> <span data-ttu-id="d7ccd-1049">如果`evidence`是`null`，在运行时将复制的权限集，即，当前授予和拒绝集，从调用方的<xref:System.Reflection.Assembly>到动态<xref:System.Reflection.Assembly>正在定义，并将策略标记为已解决。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1049">If `evidence` is `null`, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller's <xref:System.Reflection.Assembly> to the dynamic <xref:System.Reflection.Assembly> being defined and marks policy as resolved.</span></span>  
  
 <span data-ttu-id="d7ccd-1050">如果动态<xref:System.Reflection.Assembly>是保存到磁盘，后面的加载将获取基于与位置相关联的策略授予其中<xref:System.Reflection.Assembly>已保存。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1050">If the dynamic <xref:System.Reflection.Assembly> is saved to disk, subsequent loads will get grants based on policies associated with the location where the <xref:System.Reflection.Assembly> was saved.</span></span>  
  
 <span data-ttu-id="d7ccd-1051">此方法只应该用于当前应用程序域中定义动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1051">This method should only be used to define a dynamic assembly in the current application domain.</span></span> <span data-ttu-id="d7ccd-1052">有关详细信息，请参阅<xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1052">For more information, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7ccd-1053">在开发期间用于发出动态程序集的代码，建议你使用的重载<xref:System.AppDomain.DefineDynamicAssembly%2A>方法，它指定证据和权限，提供你想要有，并且包含的动态程序集的证据<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType>中`refusedPermissions`.</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1053">During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the <xref:System.AppDomain.DefineDynamicAssembly%2A> method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> in `refusedPermissions`.</span></span> <span data-ttu-id="d7ccd-1054">其中包括<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification>在`refusedPermissions`参数可确保验证 MSIL。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1054">Including <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> in the `refusedPermissions` parameter ensures that the MSIL is verified.</span></span> <span data-ttu-id="d7ccd-1055">此技术的一个限制是，它还会导致<xref:System.Security.SecurityException>与要求完全信任的代码一起使用时引发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1055">A limitation of this technique is that it also causes <xref:System.Security.SecurityException> to be thrown when used with code that demands full trust.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-1056">下面的示例演示如何<xref:System.AppDomain.DefineDynamicAssembly%2A>方法和<xref:System.AppDomain.AssemblyResolve>事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1056">The following sample demonstrates the <xref:System.AppDomain.DefineDynamicAssembly%2A> method and the <xref:System.AppDomain.AssemblyResolve> event.</span></span>  
  
 <span data-ttu-id="d7ccd-1057">首先，此代码示例尝试创建的实例`MyDynamicType`通过调用<xref:System.AppDomain.CreateInstance%2A>方法替换为无效的程序集名称，并捕获产生的异常。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1057">First, the code example tries to create an instance of `MyDynamicType` by calling the <xref:System.AppDomain.CreateInstance%2A> method with an invalid assembly name, and catches the resulting exception.</span></span>  
  
 <span data-ttu-id="d7ccd-1058">然后，该代码示例添加的事件处理程序<xref:System.AppDomain.AssemblyResolve>事件，并再次尝试创建的实例`MyDynamicType`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1058">The code example then adds an event handler for the <xref:System.AppDomain.AssemblyResolve> event, and again tries to create an instance of`MyDynamicType`.</span></span> <span data-ttu-id="d7ccd-1059">在调用<xref:System.AppDomain.CreateInstance%2A>，则<xref:System.AppDomain.AssemblyResolve>为无效的程序集引发事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1059">During the call to <xref:System.AppDomain.CreateInstance%2A>, the <xref:System.AppDomain.AssemblyResolve> event is raised for the invalid assembly.</span></span> <span data-ttu-id="d7ccd-1060">事件处理程序将创建包含名为的类型的动态程序集`MyDynamicType`，提供的类型无参数构造函数，并返回新的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1060">The event handler creates a dynamic assembly that contains a type named `MyDynamicType`, gives the type a parameterless constructor, and returns the new dynamic assembly.</span></span> <span data-ttu-id="d7ccd-1061">在调用<xref:System.AppDomain.CreateInstance%2A>成功，然后完成的构造函数和`MyDynamicType`在控制台上显示一条消息。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1061">The call to <xref:System.AppDomain.CreateInstance%2A> then finishes successfully, and the constructor for `MyDynamicType` displays a message at the console.</span></span>  
  
 [!code-cpp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CPP/definedynamicassembly.cpp#1)]
 [!code-csharp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CS/definedynamicassembly.cs#1)]
 [!code-vb[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/VB/definedynamicassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-1062"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1062"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7ccd-1063"><paramref name="name" /> 的 <see langword="Name" /> 属性为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1063">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="d7ccd-1064">或</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1064">-or-</span></span> 
<span data-ttu-id="d7ccd-1065"><paramref name="name" /> 的 <see langword="Name" /> 属性以空格开头，或包含正斜杠或反斜杠。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1065">The <see langword="Name" /> property of <paramref name="name" /> begins with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1066">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1066">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-1067">若要使用的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1067">to load an assembly with evidence.</span></span> <span data-ttu-id="d7ccd-1068">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1068">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, string dir) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDynamicAssembly (name As AssemblyName, access As AssemblyBuilderAccess, dir As String) As AssemblyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::String ^ dir);" />
      <MemberSignature Language="F#" Value="abstract member DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * string -&gt; System.Reflection.Emit.AssemblyBuilder&#xA;override this.DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * string -&gt; System.Reflection.Emit.AssemblyBuilder" Usage="appDomain.DefineDynamicAssembly (name, access, dir)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="dir" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="d7ccd-1069">动态程序集的唯一标识。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1069">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="d7ccd-1070">访问动态程序集所采用的模式。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1070">The mode in which the dynamic assembly will be accessed.</span></span></param>
        <param name="dir"><span data-ttu-id="d7ccd-1071">保存程序集的目录的名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1071">The name of the directory where the assembly will be saved.</span></span> <span data-ttu-id="d7ccd-1072">如果 <paramref name="dir" /> 是 <see langword="null" />，目录将默认为当前目录。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1072">If <paramref name="dir" /> is <see langword="null" />, the directory defaults to the current directory.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1073">使用指定名称、访问模式和存储目录定义动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1073">Defines a dynamic assembly using the specified name, access mode, and storage directory.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1074">具有指定名称和功能的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1074">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1075">此方法只应该用于当前应用程序域中定义动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1075">This method should only be used to define a dynamic assembly in the current application domain.</span></span> <span data-ttu-id="d7ccd-1076">有关详细信息，请参阅<xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1076">For more information, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7ccd-1077">在开发期间用于发出动态程序集的代码，建议你使用的重载<xref:System.AppDomain.DefineDynamicAssembly%2A>方法，它指定证据和权限，提供你想要有，并且包含的动态程序集的证据<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType>中`refusedPermissions`.</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1077">During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the <xref:System.AppDomain.DefineDynamicAssembly%2A> method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> in `refusedPermissions`.</span></span> <span data-ttu-id="d7ccd-1078">其中包括<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification>在`refusedPermissions`参数可确保验证 MSIL。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1078">Including <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> in the `refusedPermissions` parameter ensures that the MSIL is verified.</span></span> <span data-ttu-id="d7ccd-1079">此技术的一个限制是，它还会导致<xref:System.Security.SecurityException>与要求完全信任的代码一起使用时引发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1079">A limitation of this technique is that it also causes <xref:System.Security.SecurityException> to be thrown when used with code that demands full trust.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-1080">下面的示例演示如何<xref:System.AppDomain.DefineDynamicAssembly%2A>方法和<xref:System.AppDomain.AssemblyResolve>事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1080">The following sample demonstrates the <xref:System.AppDomain.DefineDynamicAssembly%2A> method and <xref:System.AppDomain.AssemblyResolve> event.</span></span>  
  
 <span data-ttu-id="d7ccd-1081">有关运行此代码示例，必须提供完全限定的程序集名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1081">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="d7ccd-1082">有关如何获取完全限定的程序集名称的信息，请参阅[程序集名称](~/docs/framework/app-domains/assembly-names.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1082">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CPP/definedynamicassembly.cpp#1)]
 [!code-csharp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CS/definedynamicassembly.cs#1)]
 [!code-vb[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/VB/definedynamicassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-1083"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1083"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7ccd-1084"><paramref name="name" /> 的 <see langword="Name" /> 属性为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1084">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="d7ccd-1085">或</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1085">-or-</span></span> 
<span data-ttu-id="d7ccd-1086"><paramref name="name" /> 的 <see langword="Name" /> 属性以空格开头，或包含正斜杠或反斜杠。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1086">The <see langword="Name" /> property of <paramref name="name" /> begins with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1087">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1087">The operation is attempted on an unloaded application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes, System.Security.SecurityContextSource securityContextSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes, valuetype System.Security.SecurityContextSource securityContextSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder},System.Security.SecurityContextSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::Collections::Generic::IEnumerable&lt;System::Reflection::Emit::CustomAttributeBuilder ^&gt; ^ assemblyAttributes, System::Security::SecurityContextSource securityContextSource);" />
      <MemberSignature Language="F#" Value="member this.DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * seq&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; * System.Security.SecurityContextSource -&gt; System.Reflection.Emit.AssemblyBuilder" Usage="appDomain.DefineDynamicAssembly (name, access, assemblyAttributes, securityContextSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="assemblyAttributes" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt;" />
        <Parameter Name="securityContextSource" Type="System.Security.SecurityContextSource" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="d7ccd-1088">动态程序集的唯一标识。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1088">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="d7ccd-1089">动态程序集的访问模式。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1089">The access mode for the dynamic assembly.</span></span></param>
        <param name="assemblyAttributes"><span data-ttu-id="d7ccd-1090">要应用于程序集的可枚举特性列表；如果无特性，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1090">An enumerable list of attributes to be applied to the assembly, or <see langword="null" /> if there are no attributes.</span></span></param>
        <param name="securityContextSource"><span data-ttu-id="d7ccd-1091">安全上下文的源。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1091">The source of the security context.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1092">定义具有指定名称、访问模式和自定义特性的动态程序集，并将指定源用于动态程序集的安全上下文。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1092">Defines a dynamic assembly with the specified name, access mode, and custom attributes, and using the specified source for its security context.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1093">具有指定名称和功能的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1093">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1094">使用此方法重载来指定属性，除非在已应用创建动态程序集时，可能无法正常工作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1094">Use this method overload to specify attributes that do not work correctly unless they are applied when a dynamic assembly is created.</span></span> <span data-ttu-id="d7ccd-1095">例如，安全属性，如<xref:System.Security.SecurityTransparentAttribute>和<xref:System.Security.SecurityCriticalAttribute>即使添加了创建动态程序集后，可能无法正常工作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1095">For example, security attributes such as <xref:System.Security.SecurityTransparentAttribute> and <xref:System.Security.SecurityCriticalAttribute> do not work correctly if they are added after a dynamic assembly has been created.</span></span>  
  
 <span data-ttu-id="d7ccd-1096">应使用此方法只能用于当前应用程序域中定义动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1096">This method should be used only to define a dynamic assembly in the current application domain.</span></span> <span data-ttu-id="d7ccd-1097">有关此限制的详细信息，请参阅<xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1097">For more information about this restriction, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-1098"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1098"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7ccd-1099"><paramref name="name" /> 的 <see langword="Name" /> 属性为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1099">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="d7ccd-1100">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1100">-or-</span></span> 
<span data-ttu-id="d7ccd-1101"><paramref name="name" /> 的 <see langword="Name" /> 属性以空白开始，或者包含正斜杠或反斜杠。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1101">The <see langword="Name" /> property of <paramref name="name" /> starts with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1102">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1102">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="d7ccd-1103"><paramref name="securityContextSource" /> 的值不是枚举值之一。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1103">The value of <paramref name="securityContextSource" /> was not one of the enumeration values.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, string dir, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::String ^ dir, System::Security::Policy::Evidence ^ evidence);" />
      <MemberSignature Language="F#" Value="abstract member DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * string * System.Security.Policy.Evidence -&gt; System.Reflection.Emit.AssemblyBuilder&#xA;override this.DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * string * System.Security.Policy.Evidence -&gt; System.Reflection.Emit.AssemblyBuilder" Usage="appDomain.DefineDynamicAssembly (name, access, dir, evidence)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Declarative security for assembly level is no longer enforced")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of DefineDynamicAssembly which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkId=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="dir" Type="System.String" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="d7ccd-1104">动态程序集的唯一标识。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1104">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="d7ccd-1105">访问动态程序集所采用的模式。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1105">The mode in which the dynamic assembly will be accessed.</span></span></param>
        <param name="dir"><span data-ttu-id="d7ccd-1106">保存程序集的目录的名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1106">The name of the directory where the assembly will be saved.</span></span> <span data-ttu-id="d7ccd-1107">如果 <paramref name="dir" /> 是 <see langword="null" />，目录将默认为当前目录。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1107">If <paramref name="dir" /> is <see langword="null" />, the directory defaults to the current directory.</span></span></param>
        <param name="evidence"><span data-ttu-id="d7ccd-1108">为动态程序集提供的证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1108">The evidence supplied for the dynamic assembly.</span></span> <span data-ttu-id="d7ccd-1109">该证据始终作为最后一组用于策略解析的证据来使用。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1109">The evidence is used unaltered as the final set of evidence used for policy resolution.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1110">使用指定名称、访问模式、存储目录和证据定义动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1110">Defines a dynamic assembly using the specified name, access mode, storage directory, and evidence.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1111">具有指定名称和功能的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1111">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1112">只有完全受信任调用方可以提供其`evidence`定义动态时<xref:System.Reflection.Assembly>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1112">Only fully trusted callers can supply their `evidence` when defining a dynamic <xref:System.Reflection.Assembly>.</span></span> <span data-ttu-id="d7ccd-1113">在运行时将映射<xref:System.Security.Policy.Evidence>通过安全策略，以确定授予的权限。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1113">The runtime will map the <xref:System.Security.Policy.Evidence> through the security policy to determine the granted permissions.</span></span> <span data-ttu-id="d7ccd-1114">部分受信任的调用方必须提供 null `evidence`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1114">Partially trusted callers must supply a null `evidence`.</span></span> <span data-ttu-id="d7ccd-1115">如果`evidence`是`null`，在运行时将复制的权限集，即，当前授予和拒绝集，从调用方的<xref:System.Reflection.Assembly>到动态<xref:System.Reflection.Assembly>正在定义，并将策略标记为已解决。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1115">If `evidence` is `null`, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller's <xref:System.Reflection.Assembly> to the dynamic <xref:System.Reflection.Assembly> being defined and marks policy as resolved.</span></span>  
  
 <span data-ttu-id="d7ccd-1116">如果动态<xref:System.Reflection.Assembly>是保存到磁盘，后面的加载将获取基于与位置相关联的策略授予其中<xref:System.Reflection.Assembly>已保存。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1116">If the dynamic <xref:System.Reflection.Assembly> is saved to disk, subsequent loads will get grants based on policies associated with the location where the <xref:System.Reflection.Assembly> was saved.</span></span>  
  
 <span data-ttu-id="d7ccd-1117">此方法只应该用于当前应用程序域中定义动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1117">This method should only be used to define a dynamic assembly in the current application domain.</span></span> <span data-ttu-id="d7ccd-1118">有关详细信息，请参阅<xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1118">For more information, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7ccd-1119">在开发期间用于发出动态程序集的代码，建议你使用的重载<xref:System.AppDomain.DefineDynamicAssembly%2A>方法，它指定证据和权限，提供你想要有，并且包含的动态程序集的证据<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType>中`refusedPermissions`.</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1119">During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the <xref:System.AppDomain.DefineDynamicAssembly%2A> method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> in `refusedPermissions`.</span></span> <span data-ttu-id="d7ccd-1120">其中包括<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification>在`refusedPermissions`参数可确保验证 MSIL。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1120">Including <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> in the `refusedPermissions` parameter ensures that the MSIL is verified.</span></span> <span data-ttu-id="d7ccd-1121">此技术的一个限制是，它还会导致<xref:System.Security.SecurityException>与要求完全信任的代码一起使用时引发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1121">A limitation of this technique is that it also causes <xref:System.Security.SecurityException> to be thrown when used with code that demands full trust.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-1122">下面的示例演示如何<xref:System.AppDomain.DefineDynamicAssembly%2A>方法和<xref:System.AppDomain.AssemblyResolve>事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1122">The following sample demonstrates the <xref:System.AppDomain.DefineDynamicAssembly%2A> method and <xref:System.AppDomain.AssemblyResolve> event.</span></span>  
  
 <span data-ttu-id="d7ccd-1123">有关运行此代码示例，必须提供完全限定的程序集名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1123">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="d7ccd-1124">有关如何获取完全限定的程序集名称的信息，请参阅[程序集名称](~/docs/framework/app-domains/assembly-names.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1124">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CPP/definedynamicassembly.cpp#1)]
 [!code-csharp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CS/definedynamicassembly.cs#1)]
 [!code-vb[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/VB/definedynamicassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-1125"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1125"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7ccd-1126"><paramref name="name" /> 的 <see langword="Name" /> 属性为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1126">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="d7ccd-1127">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1127">-or-</span></span> 
<span data-ttu-id="d7ccd-1128"><paramref name="name" /> 的 <see langword="Name" /> 属性以空格开头，或包含正斜杠或反斜杠。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1128">The <see langword="Name" /> property of <paramref name="name" /> begins with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1129">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1129">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-1130">若要使用的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1130">to load an assembly with evidence.</span></span> <span data-ttu-id="d7ccd-1131">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1131">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, class System.Security.PermissionSet requiredPermissions, class System.Security.PermissionSet optionalPermissions, class System.Security.PermissionSet refusedPermissions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDynamicAssembly (name As AssemblyName, access As AssemblyBuilderAccess, requiredPermissions As PermissionSet, optionalPermissions As PermissionSet, refusedPermissions As PermissionSet) As AssemblyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::Security::PermissionSet ^ requiredPermissions, System::Security::PermissionSet ^ optionalPermissions, System::Security::PermissionSet ^ refusedPermissions);" />
      <MemberSignature Language="F#" Value="abstract member DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * System.Security.PermissionSet * System.Security.PermissionSet * System.Security.PermissionSet -&gt; System.Reflection.Emit.AssemblyBuilder&#xA;override this.DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * System.Security.PermissionSet * System.Security.PermissionSet * System.Security.PermissionSet -&gt; System.Reflection.Emit.AssemblyBuilder" Usage="appDomain.DefineDynamicAssembly (name, access, requiredPermissions, optionalPermissions, refusedPermissions)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Declarative security for assembly level is no longer enforced")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Assembly level declarative security is obsolete and is no longer enforced by the CLR by default.  See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="requiredPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="optionalPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="refusedPermissions" Type="System.Security.PermissionSet" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="d7ccd-1132">动态程序集的唯一标识。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1132">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="d7ccd-1133">访问动态程序集所采用的模式。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1133">The mode in which the dynamic assembly will be accessed.</span></span></param>
        <param name="requiredPermissions"><span data-ttu-id="d7ccd-1134">必需的权限请求。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1134">The required permissions request.</span></span></param>
        <param name="optionalPermissions"><span data-ttu-id="d7ccd-1135">可选的权限请求。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1135">The optional permissions request.</span></span></param>
        <param name="refusedPermissions"><span data-ttu-id="d7ccd-1136">被拒绝的权限请求。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1136">The refused permissions request.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1137">使用指定名称、访问模式和权限请求定义动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1137">Defines a dynamic assembly using the specified name, access mode, and permission requests.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1138">具有指定名称和功能的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1138">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1139">为指定的权限请求`requiredPermissions`， `optionalPermissions`，和`refusedPermissions`不使用除非保存该动态程序集并将其重新加载到内存。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1139">The permission requests specified for `requiredPermissions`, `optionalPermissions`, and `refusedPermissions` are not used unless the dynamic assembly has been saved and reloaded into memory.</span></span> <span data-ttu-id="d7ccd-1140">若要指定永远不会保存到磁盘中，使用的重载的瞬态程序集的权限请求<xref:System.AppDomain.DefineDynamicAssembly%2A>方法，它指定证据和所请求的权限，并提供<xref:System.Security.Policy.Evidence>对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1140">To specify permission requests for a transient assembly that is never saved to disk, use an overload of the <xref:System.AppDomain.DefineDynamicAssembly%2A> method that specifies evidence as well as requested permissions, and supply an <xref:System.Security.Policy.Evidence> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7ccd-1141">在开发期间用于发出动态程序集的代码，建议你使用的重载<xref:System.AppDomain.DefineDynamicAssembly%2A>方法，它指定证据和权限，提供你想要有，并且包含的动态程序集的证据<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType>中`refusedPermissions`.</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1141">During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the <xref:System.AppDomain.DefineDynamicAssembly%2A> method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> in `refusedPermissions`.</span></span> <span data-ttu-id="d7ccd-1142">其中包括<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification>在`refusedPermissions`参数可确保验证 MSIL。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1142">Including <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> in the `refusedPermissions` parameter ensures that the MSIL is verified.</span></span> <span data-ttu-id="d7ccd-1143">此技术的一个限制是，它还会导致<xref:System.Security.SecurityException>与要求完全信任的代码一起使用时引发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1143">A limitation of this technique is that it also causes <xref:System.Security.SecurityException> to be thrown when used with code that demands full trust.</span></span>  
  
 <span data-ttu-id="d7ccd-1144">此方法只应该用于当前应用程序域中定义动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1144">This method should only be used to define a dynamic assembly in the current application domain.</span></span> <span data-ttu-id="d7ccd-1145">有关详细信息，请参阅<xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1145">For more information, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-1146">下面的示例演示如何<xref:System.AppDomain.DefineDynamicAssembly%2A>方法和<xref:System.AppDomain.AssemblyResolve>事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1146">The following sample demonstrates the <xref:System.AppDomain.DefineDynamicAssembly%2A> method and <xref:System.AppDomain.AssemblyResolve> event.</span></span>  
  
 <span data-ttu-id="d7ccd-1147">有关运行此代码示例，必须提供完全限定的程序集名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1147">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="d7ccd-1148">有关如何获取完全限定的程序集名称的信息，请参阅[程序集名称](~/docs/framework/app-domains/assembly-names.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1148">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CPP/definedynamicassembly.cpp#1)]
 [!code-csharp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CS/definedynamicassembly.cs#1)]
 [!code-vb[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/VB/definedynamicassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-1149"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1149"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7ccd-1150"><paramref name="name" /> 的 <see langword="Name" /> 属性为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1150">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="d7ccd-1151">或</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1151">-or-</span></span> 
<span data-ttu-id="d7ccd-1152"><paramref name="name" /> 的 <see langword="Name" /> 属性以空格开头，或包含正斜杠或反斜杠。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1152">The <see langword="Name" /> property of <paramref name="name" /> begins with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1153">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1153">The operation is attempted on an unloaded application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, bool isSynchronized, System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, string dir, bool isSynchronized, class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDynamicAssembly (name As AssemblyName, access As AssemblyBuilderAccess, dir As String, isSynchronized As Boolean, assemblyAttributes As IEnumerable(Of CustomAttributeBuilder)) As AssemblyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::String ^ dir, bool isSynchronized, System::Collections::Generic::IEnumerable&lt;System::Reflection::Emit::CustomAttributeBuilder ^&gt; ^ assemblyAttributes);" />
      <MemberSignature Language="F#" Value="member this.DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * string * bool * seq&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; -&gt; System.Reflection.Emit.AssemblyBuilder" Usage="appDomain.DefineDynamicAssembly (name, access, dir, isSynchronized, assemblyAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="dir" Type="System.String" />
        <Parameter Name="isSynchronized" Type="System.Boolean" />
        <Parameter Name="assemblyAttributes" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="d7ccd-1154">动态程序集的唯一标识。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1154">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="d7ccd-1155">访问动态程序集所采用的模式。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1155">The mode in which the dynamic assembly will be accessed.</span></span></param>
        <param name="dir"><span data-ttu-id="d7ccd-1156">保存动态程序集的目录的名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1156">The name of the directory where the dynamic assembly will be saved.</span></span> <span data-ttu-id="d7ccd-1157">如果 <paramref name="dir" /> 为 <see langword="null" />，则使用当前目录。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1157">If <paramref name="dir" /> is <see langword="null" />, the current directory is used.</span></span></param>
        <param name="isSynchronized"><span data-ttu-id="d7ccd-1158">若要在动态程序集中同步模块、类型和成员的创建，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1158"><see langword="true" /> to synchronize the creation of modules, types, and members in the dynamic assembly; otherwise, <see langword="false" />.</span></span></param>
        <param name="assemblyAttributes"><span data-ttu-id="d7ccd-1159">要应用于程序集的可枚举特性列表；如果无特性，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1159">An enumerable list of attributes to be applied to the assembly, or <see langword="null" /> if there are no attributes.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1160">使用指定名称、访问模式、存储目录和同步选项定义动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1160">Defines a dynamic assembly using the specified name, access mode, storage directory, and synchronization option.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1161">具有指定名称和功能的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1161">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1162">使用此方法重载来指定属性，除非在已应用创建动态程序集时，可能无法正常工作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1162">Use this method overload to specify attributes that do not work correctly unless they are applied when a dynamic assembly is created.</span></span> <span data-ttu-id="d7ccd-1163">例如，安全属性，如<xref:System.Security.SecurityTransparentAttribute>和<xref:System.Security.SecurityCriticalAttribute>即使添加了创建动态程序集后，可能无法正常工作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1163">For example, security attributes such as <xref:System.Security.SecurityTransparentAttribute> and <xref:System.Security.SecurityCriticalAttribute> do not work correctly if they are added after a dynamic assembly has been created.</span></span>  
  
 <span data-ttu-id="d7ccd-1164">如果`isSynchronized`是`true`，生成的以下方法<xref:System.Reflection.Emit.AssemblyBuilder>将同步： <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>， <xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A>， <xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A>， <xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A>， <xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A>，和<xref:System.Reflection.Emit.AssemblyBuilder.Save%2A>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1164">If `isSynchronized` is `true`, the following methods of the resulting <xref:System.Reflection.Emit.AssemblyBuilder> will be synchronized: <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A>, and <xref:System.Reflection.Emit.AssemblyBuilder.Save%2A>.</span></span> <span data-ttu-id="d7ccd-1165">如果在不同的线程上调用这些方法的两个程序，一个将另完成之前一直阻止。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1165">If two of these methods are called on different threads, one will block until the other is completed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-1166"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1166"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7ccd-1167"><paramref name="name" /> 的 <see langword="Name" /> 属性为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1167">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="d7ccd-1168">或</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1168">-or-</span></span> 
<span data-ttu-id="d7ccd-1169"><paramref name="name" /> 的 <see langword="Name" /> 属性以空白开始，或者包含正斜杠或反斜杠。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1169">The <see langword="Name" /> property of <paramref name="name" /> starts with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1170">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1170">The operation is attempted on an unloaded application domain.</span></span></exception>
        <altmember cref="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Security.Policy.Evidence evidence, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, class System.Security.Policy.Evidence evidence, class System.Security.PermissionSet requiredPermissions, class System.Security.PermissionSet optionalPermissions, class System.Security.PermissionSet refusedPermissions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::Security::Policy::Evidence ^ evidence, System::Security::PermissionSet ^ requiredPermissions, System::Security::PermissionSet ^ optionalPermissions, System::Security::PermissionSet ^ refusedPermissions);" />
      <MemberSignature Language="F#" Value="abstract member DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * System.Security.Policy.Evidence * System.Security.PermissionSet * System.Security.PermissionSet * System.Security.PermissionSet -&gt; System.Reflection.Emit.AssemblyBuilder&#xA;override this.DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * System.Security.Policy.Evidence * System.Security.PermissionSet * System.Security.PermissionSet * System.Security.PermissionSet -&gt; System.Reflection.Emit.AssemblyBuilder" Usage="appDomain.DefineDynamicAssembly (name, access, evidence, requiredPermissions, optionalPermissions, refusedPermissions)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Declarative security for assembly level is no longer enforced")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
        <Parameter Name="requiredPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="optionalPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="refusedPermissions" Type="System.Security.PermissionSet" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="d7ccd-1171">动态程序集的唯一标识。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1171">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="d7ccd-1172">访问动态程序集所采用的模式。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1172">The mode in which the dynamic assembly will be accessed.</span></span></param>
        <param name="evidence"><span data-ttu-id="d7ccd-1173">为动态程序集提供的证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1173">The evidence supplied for the dynamic assembly.</span></span> <span data-ttu-id="d7ccd-1174">该证据始终作为最后一组用于策略解析的证据来使用。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1174">The evidence is used unaltered as the final set of evidence used for policy resolution.</span></span></param>
        <param name="requiredPermissions"><span data-ttu-id="d7ccd-1175">必需的权限请求。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1175">The required permissions request.</span></span></param>
        <param name="optionalPermissions"><span data-ttu-id="d7ccd-1176">可选的权限请求。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1176">The optional permissions request.</span></span></param>
        <param name="refusedPermissions"><span data-ttu-id="d7ccd-1177">被拒绝的权限请求。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1177">The refused permissions request.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1178">使用指定名称、访问模式、证据和权限请求定义动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1178">Defines a dynamic assembly using the specified name, access mode, evidence, and permission requests.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1179">具有指定名称和功能的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1179">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1180">为指定的权限请求`requiredPermissions`， `optionalPermissions`，并`refusedPermissions`才会使用`evidence`还提供，或如果动态程序集是保存和重新加载到内存。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1180">The permission requests specified for `requiredPermissions`, `optionalPermissions`, and `refusedPermissions` are used only if `evidence` is also supplied, or if the dynamic assembly is saved and reloaded into memory.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7ccd-1181">在开发期间用于发出动态程序集的代码，建议您包含<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType>在`refusedPermissions`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1181">During the development of code that emits dynamic assemblies, it is recommended that you include <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> in `refusedPermissions`.</span></span> <span data-ttu-id="d7ccd-1182">其中包括<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification>在`refusedPermissions`参数可确保验证 MSIL。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1182">Including <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> in the `refusedPermissions` parameter ensures that the MSIL is verified.</span></span> <span data-ttu-id="d7ccd-1183">此技术的一个限制是，它还会导致<xref:System.Security.SecurityException>与要求完全信任的代码一起使用时引发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1183">A limitation of this technique is that it also causes <xref:System.Security.SecurityException> to be thrown when used with code that demands full trust.</span></span>  
  
 <span data-ttu-id="d7ccd-1184">只有完全受信任调用方可以提供其`evidence`定义动态时<xref:System.Reflection.Assembly>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1184">Only fully trusted callers can supply their `evidence` when defining a dynamic <xref:System.Reflection.Assembly>.</span></span> <span data-ttu-id="d7ccd-1185">在运行时将映射<xref:System.Security.Policy.Evidence>通过安全策略，以确定授予的权限。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1185">The runtime will map the <xref:System.Security.Policy.Evidence> through the security policy to determine the granted permissions.</span></span> <span data-ttu-id="d7ccd-1186">部分受信任的调用方必须提供 null `evidence`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1186">Partially trusted callers must supply a null `evidence`.</span></span> <span data-ttu-id="d7ccd-1187">如果`evidence`是`null`，在运行时将复制的权限集，即，当前授予和拒绝集，从调用方的<xref:System.Reflection.Assembly>到动态<xref:System.Reflection.Assembly>正在定义，并将策略标记为已解决。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1187">If `evidence` is `null`, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller's <xref:System.Reflection.Assembly> to the dynamic <xref:System.Reflection.Assembly> being defined and marks policy as resolved.</span></span>  
  
 <span data-ttu-id="d7ccd-1188">如果动态<xref:System.Reflection.Assembly>是保存到磁盘，后面的加载将获取基于与位置相关联的策略授予其中<xref:System.Reflection.Assembly>已保存。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1188">If the dynamic <xref:System.Reflection.Assembly> is saved to disk, subsequent loads will get grants based on policies associated with the location where the <xref:System.Reflection.Assembly> was saved.</span></span>  
  
 <span data-ttu-id="d7ccd-1189">此方法只应该用于当前应用程序域中定义动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1189">This method should only be used to define a dynamic assembly in the current application domain.</span></span> <span data-ttu-id="d7ccd-1190">有关详细信息，请参阅<xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1190">For more information, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-1191">下面的示例演示如何<xref:System.AppDomain.DefineDynamicAssembly%2A>方法和<xref:System.AppDomain.AssemblyResolve>事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1191">The following sample demonstrates the <xref:System.AppDomain.DefineDynamicAssembly%2A> method and <xref:System.AppDomain.AssemblyResolve> event.</span></span>  
  
 <span data-ttu-id="d7ccd-1192">有关运行此代码示例，必须提供完全限定的程序集名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1192">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="d7ccd-1193">有关如何获取完全限定的程序集名称的信息，请参阅[程序集名称](~/docs/framework/app-domains/assembly-names.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1193">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CPP/definedynamicassembly.cpp#1)]
 [!code-csharp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CS/definedynamicassembly.cs#1)]
 [!code-vb[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/VB/definedynamicassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-1194"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1194"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7ccd-1195"><paramref name="name" /> 的 <see langword="Name" /> 属性为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1195">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="d7ccd-1196">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1196">-or-</span></span> 
<span data-ttu-id="d7ccd-1197"><paramref name="name" /> 的 <see langword="Name" /> 属性以空格开头，或包含正斜杠或反斜杠。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1197">The <see langword="Name" /> property of <paramref name="name" /> begins with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1198">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1198">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-1199">若要使用的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1199">to load an assembly with evidence.</span></span> <span data-ttu-id="d7ccd-1200">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1200">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, string dir, class System.Security.PermissionSet requiredPermissions, class System.Security.PermissionSet optionalPermissions, class System.Security.PermissionSet refusedPermissions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineDynamicAssembly (name As AssemblyName, access As AssemblyBuilderAccess, dir As String, requiredPermissions As PermissionSet, optionalPermissions As PermissionSet, refusedPermissions As PermissionSet) As AssemblyBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::String ^ dir, System::Security::PermissionSet ^ requiredPermissions, System::Security::PermissionSet ^ optionalPermissions, System::Security::PermissionSet ^ refusedPermissions);" />
      <MemberSignature Language="F#" Value="abstract member DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * string * System.Security.PermissionSet * System.Security.PermissionSet * System.Security.PermissionSet -&gt; System.Reflection.Emit.AssemblyBuilder&#xA;override this.DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * string * System.Security.PermissionSet * System.Security.PermissionSet * System.Security.PermissionSet -&gt; System.Reflection.Emit.AssemblyBuilder" Usage="appDomain.DefineDynamicAssembly (name, access, dir, requiredPermissions, optionalPermissions, refusedPermissions)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Declarative security for assembly level is no longer enforced")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="dir" Type="System.String" />
        <Parameter Name="requiredPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="optionalPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="refusedPermissions" Type="System.Security.PermissionSet" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="d7ccd-1201">动态程序集的唯一标识。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1201">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="d7ccd-1202">访问动态程序集所采用的模式。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1202">The mode in which the dynamic assembly will be accessed.</span></span></param>
        <param name="dir"><span data-ttu-id="d7ccd-1203">保存程序集的目录的名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1203">The name of the directory where the assembly will be saved.</span></span> <span data-ttu-id="d7ccd-1204">如果 <paramref name="dir" /> 是 <see langword="null" />，目录将默认为当前目录。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1204">If <paramref name="dir" /> is <see langword="null" />, the directory defaults to the current directory.</span></span></param>
        <param name="requiredPermissions"><span data-ttu-id="d7ccd-1205">必需的权限请求。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1205">The required permissions request.</span></span></param>
        <param name="optionalPermissions"><span data-ttu-id="d7ccd-1206">可选的权限请求。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1206">The optional permissions request.</span></span></param>
        <param name="refusedPermissions"><span data-ttu-id="d7ccd-1207">被拒绝的权限请求。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1207">The refused permissions request.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1208">使用指定名称、访问模式、存储目录和权限请求定义动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1208">Defines a dynamic assembly using the specified name, access mode, storage directory, and permission requests.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1209">具有指定名称和功能的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1209">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1210">为指定的权限请求`requiredPermissions`， `optionalPermissions`，和`refusedPermissions`不使用除非保存该动态程序集并将其重新加载到内存。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1210">The permission requests specified for `requiredPermissions`, `optionalPermissions`, and `refusedPermissions` are not used unless the dynamic assembly has been saved and reloaded into memory.</span></span> <span data-ttu-id="d7ccd-1211">若要指定永远不会保存到磁盘中，使用的重载的瞬态程序集的权限请求<xref:System.AppDomain.DefineDynamicAssembly%2A>方法，它指定证据和所请求的权限，并提供<xref:System.Security.Policy.Evidence>对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1211">To specify permission requests for a transient assembly that is never saved to disk, use an overload of the <xref:System.AppDomain.DefineDynamicAssembly%2A> method that specifies evidence as well as requested permissions, and supply an <xref:System.Security.Policy.Evidence> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7ccd-1212">在开发期间用于发出动态程序集的代码，建议你使用的重载<xref:System.AppDomain.DefineDynamicAssembly%2A>方法，它指定证据和权限，提供你想要有，并且包含的动态程序集的证据<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType>中`refusedPermissions`.</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1212">During the development of code that emits dynamic assemblies, it is recommended that you use an overload of the <xref:System.AppDomain.DefineDynamicAssembly%2A> method that specifies evidence and permissions, supply the evidence you want the dynamic assembly to have, and include <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> in `refusedPermissions`.</span></span> <span data-ttu-id="d7ccd-1213">其中包括<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification>在`refusedPermissions`参数可确保验证 MSIL。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1213">Including <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> in the `refusedPermissions` parameter ensures that the MSIL is verified.</span></span> <span data-ttu-id="d7ccd-1214">此技术的一个限制是，它还会导致<xref:System.Security.SecurityException>与要求完全信任的代码一起使用时引发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1214">A limitation of this technique is that it also causes <xref:System.Security.SecurityException> to be thrown when used with code that demands full trust.</span></span>  
  
 <span data-ttu-id="d7ccd-1215">此方法只应该用于当前应用程序域中定义动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1215">This method should only be used to define a dynamic assembly in the current application domain.</span></span> <span data-ttu-id="d7ccd-1216">有关详细信息，请参阅<xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1216">For more information, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-1217">下面的示例演示如何<xref:System.AppDomain.DefineDynamicAssembly%2A>方法和<xref:System.AppDomain.AssemblyResolve>事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1217">The following sample demonstrates the <xref:System.AppDomain.DefineDynamicAssembly%2A> method and <xref:System.AppDomain.AssemblyResolve> event.</span></span>  
  
 <span data-ttu-id="d7ccd-1218">有关运行此代码示例，必须提供完全限定的程序集名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1218">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="d7ccd-1219">有关如何获取完全限定的程序集名称的信息，请参阅[程序集名称](~/docs/framework/app-domains/assembly-names.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1219">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CPP/definedynamicassembly.cpp#1)]
 [!code-csharp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CS/definedynamicassembly.cs#1)]
 [!code-vb[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/VB/definedynamicassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-1220"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1220"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7ccd-1221"><paramref name="name" /> 的 <see langword="Name" /> 属性为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1221">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="d7ccd-1222">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1222">-or-</span></span> 
<span data-ttu-id="d7ccd-1223"><paramref name="name" /> 的 <see langword="Name" /> 属性以空格开头，或包含正斜杠或反斜杠。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1223">The <see langword="Name" /> property of <paramref name="name" /> begins with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1224">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1224">The operation is attempted on an unloaded application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, System.Security.Policy.Evidence evidence, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, string dir, class System.Security.Policy.Evidence evidence, class System.Security.PermissionSet requiredPermissions, class System.Security.PermissionSet optionalPermissions, class System.Security.PermissionSet refusedPermissions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::String ^ dir, System::Security::Policy::Evidence ^ evidence, System::Security::PermissionSet ^ requiredPermissions, System::Security::PermissionSet ^ optionalPermissions, System::Security::PermissionSet ^ refusedPermissions);" />
      <MemberSignature Language="F#" Value="abstract member DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * string * System.Security.Policy.Evidence * System.Security.PermissionSet * System.Security.PermissionSet * System.Security.PermissionSet -&gt; System.Reflection.Emit.AssemblyBuilder&#xA;override this.DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * string * System.Security.Policy.Evidence * System.Security.PermissionSet * System.Security.PermissionSet * System.Security.PermissionSet -&gt; System.Reflection.Emit.AssemblyBuilder" Usage="appDomain.DefineDynamicAssembly (name, access, dir, evidence, requiredPermissions, optionalPermissions, refusedPermissions)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Declarative security for assembly level is no longer enforced")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Assembly level declarative security is obsolete and is no longer enforced by the CLR by default.  Please see http://go.microsoft.com/fwlink/?LinkId=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="dir" Type="System.String" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
        <Parameter Name="requiredPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="optionalPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="refusedPermissions" Type="System.Security.PermissionSet" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="d7ccd-1225">动态程序集的唯一标识。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1225">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="d7ccd-1226">访问动态程序集所采用的模式。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1226">The mode in which the dynamic assembly will be accessed.</span></span></param>
        <param name="dir"><span data-ttu-id="d7ccd-1227">保存程序集的目录的名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1227">The name of the directory where the assembly will be saved.</span></span> <span data-ttu-id="d7ccd-1228">如果 <paramref name="dir" /> 是 <see langword="null" />，目录将默认为当前目录。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1228">If <paramref name="dir" /> is <see langword="null" />, the directory defaults to the current directory.</span></span></param>
        <param name="evidence"><span data-ttu-id="d7ccd-1229">为动态程序集提供的证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1229">The evidence supplied for the dynamic assembly.</span></span> <span data-ttu-id="d7ccd-1230">该证据始终作为最后一组用于策略解析的证据来使用。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1230">The evidence is used unaltered as the final set of evidence used for policy resolution.</span></span></param>
        <param name="requiredPermissions"><span data-ttu-id="d7ccd-1231">必需的权限请求。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1231">The required permissions request.</span></span></param>
        <param name="optionalPermissions"><span data-ttu-id="d7ccd-1232">可选的权限请求。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1232">The optional permissions request.</span></span></param>
        <param name="refusedPermissions"><span data-ttu-id="d7ccd-1233">被拒绝的权限请求。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1233">The refused permissions request.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1234">使用指定名称、访问模式、存储目录、证据和权限请求定义动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1234">Defines a dynamic assembly using the specified name, access mode, storage directory, evidence, and permission requests.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1235">具有指定名称和功能的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1235">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1236">为指定的权限请求`requiredPermissions`， `optionalPermissions`，并`refusedPermissions`才会使用`evidence`还提供，或如果动态程序集是保存和重新加载到内存。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1236">The permission requests specified for `requiredPermissions`, `optionalPermissions`, and `refusedPermissions` are used only if `evidence` is also supplied, or if the dynamic assembly is saved and reloaded into memory.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7ccd-1237">在开发期间用于发出动态程序集的代码，建议您包含<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType>在`refusedPermissions`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1237">During the development of code that emits dynamic assemblies, it is recommended that you include <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> in `refusedPermissions`.</span></span> <span data-ttu-id="d7ccd-1238">其中包括<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification>在`refusedPermissions`参数可确保验证 MSIL。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1238">Including <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> in the `refusedPermissions` parameter ensures that the MSIL is verified.</span></span> <span data-ttu-id="d7ccd-1239">此技术的一个限制是，它还会导致<xref:System.Security.SecurityException>与要求完全信任的代码一起使用时引发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1239">A limitation of this technique is that it also causes <xref:System.Security.SecurityException> to be thrown when used with code that demands full trust.</span></span>  
  
 <span data-ttu-id="d7ccd-1240">只有完全受信任调用方可以提供其`evidence`定义动态时<xref:System.Reflection.Assembly>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1240">Only fully trusted callers can supply their `evidence` when defining a dynamic <xref:System.Reflection.Assembly>.</span></span> <span data-ttu-id="d7ccd-1241">在运行时将映射<xref:System.Security.Policy.Evidence>通过安全策略，以确定授予的权限。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1241">The runtime will map the <xref:System.Security.Policy.Evidence> through the security policy to determine the granted permissions.</span></span> <span data-ttu-id="d7ccd-1242">部分受信任的调用方必须提供 null `evidence`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1242">Partially trusted callers must supply a null `evidence`.</span></span> <span data-ttu-id="d7ccd-1243">如果`evidence`是`null`，在运行时将复制的权限集，即，当前授予和拒绝集，从调用方的<xref:System.Reflection.Assembly>到动态<xref:System.Reflection.Assembly>正在定义，并将策略标记为已解决。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1243">If `evidence` is `null`, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller's <xref:System.Reflection.Assembly> to the dynamic <xref:System.Reflection.Assembly> being defined and marks policy as resolved.</span></span>  
  
 <span data-ttu-id="d7ccd-1244">如果动态<xref:System.Reflection.Assembly>是保存到磁盘，后面的加载将获取基于与位置相关联的策略授予其中<xref:System.Reflection.Assembly>已保存。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1244">If the dynamic <xref:System.Reflection.Assembly> is saved to disk, subsequent loads will get grants based on policies associated with the location where the <xref:System.Reflection.Assembly> was saved.</span></span>  
  
 <span data-ttu-id="d7ccd-1245">此方法只应该用于当前应用程序域中定义动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1245">This method should only be used to define a dynamic assembly in the current application domain.</span></span> <span data-ttu-id="d7ccd-1246">有关详细信息，请参阅<xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1246">For more information, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-1247">下面的示例演示如何<xref:System.AppDomain.DefineDynamicAssembly%2A>方法和<xref:System.AppDomain.AssemblyResolve>事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1247">The following sample demonstrates the <xref:System.AppDomain.DefineDynamicAssembly%2A> method and <xref:System.AppDomain.AssemblyResolve> event.</span></span>  
  
 <span data-ttu-id="d7ccd-1248">有关运行此代码示例，必须提供完全限定的程序集名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1248">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="d7ccd-1249">有关如何获取完全限定的程序集名称的信息，请参阅[程序集名称](~/docs/framework/app-domains/assembly-names.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1249">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CPP/definedynamicassembly.cpp#1)]
 [!code-csharp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CS/definedynamicassembly.cs#1)]
 [!code-vb[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/VB/definedynamicassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-1250"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1250"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7ccd-1251"><paramref name="name" /> 的 <see langword="Name" /> 属性为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1251">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="d7ccd-1252">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1252">-or-</span></span> 
<span data-ttu-id="d7ccd-1253"><paramref name="name" /> 的 <see langword="Name" /> 属性以空格开头，或包含正斜杠或反斜杠。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1253">The <see langword="Name" /> property of <paramref name="name" /> begins with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1254">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1254">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-1255">若要使用的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1255">to load an assembly with evidence.</span></span> <span data-ttu-id="d7ccd-1256">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1256">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, System.Security.Policy.Evidence evidence, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions, bool isSynchronized);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, string dir, class System.Security.Policy.Evidence evidence, class System.Security.PermissionSet requiredPermissions, class System.Security.PermissionSet optionalPermissions, class System.Security.PermissionSet refusedPermissions, bool isSynchronized) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::String ^ dir, System::Security::Policy::Evidence ^ evidence, System::Security::PermissionSet ^ requiredPermissions, System::Security::PermissionSet ^ optionalPermissions, System::Security::PermissionSet ^ refusedPermissions, bool isSynchronized);" />
      <MemberSignature Language="F#" Value="abstract member DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * string * System.Security.Policy.Evidence * System.Security.PermissionSet * System.Security.PermissionSet * System.Security.PermissionSet * bool -&gt; System.Reflection.Emit.AssemblyBuilder&#xA;override this.DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * string * System.Security.Policy.Evidence * System.Security.PermissionSet * System.Security.PermissionSet * System.Security.PermissionSet * bool -&gt; System.Reflection.Emit.AssemblyBuilder" Usage="appDomain.DefineDynamicAssembly (name, access, dir, evidence, requiredPermissions, optionalPermissions, refusedPermissions, isSynchronized)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Declarative security for assembly level is no longer enforced")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="dir" Type="System.String" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
        <Parameter Name="requiredPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="optionalPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="refusedPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="isSynchronized" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="d7ccd-1257">动态程序集的唯一标识。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1257">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="d7ccd-1258">访问动态程序集所采用的模式。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1258">The mode in which the dynamic assembly will be accessed.</span></span></param>
        <param name="dir"><span data-ttu-id="d7ccd-1259">保存动态程序集的目录的名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1259">The name of the directory where the dynamic assembly will be saved.</span></span> <span data-ttu-id="d7ccd-1260">如果 <paramref name="dir" /> 是 <see langword="null" />，目录将默认为当前目录。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1260">If <paramref name="dir" /> is <see langword="null" />, the directory defaults to the current directory.</span></span></param>
        <param name="evidence"><span data-ttu-id="d7ccd-1261">为动态程序集提供的证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1261">The evidence supplied for the dynamic assembly.</span></span> <span data-ttu-id="d7ccd-1262">该证据始终作为最后一组用于策略解析的证据来使用。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1262">The evidence is used unaltered as the final set of evidence used for policy resolution.</span></span></param>
        <param name="requiredPermissions"><span data-ttu-id="d7ccd-1263">必需的权限请求。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1263">The required permissions request.</span></span></param>
        <param name="optionalPermissions"><span data-ttu-id="d7ccd-1264">可选的权限请求。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1264">The optional permissions request.</span></span></param>
        <param name="refusedPermissions"><span data-ttu-id="d7ccd-1265">被拒绝的权限请求。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1265">The refused permissions request.</span></span></param>
        <param name="isSynchronized"><span data-ttu-id="d7ccd-1266">若要在动态程序集中同步模块、类型和成员的创建，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1266"><see langword="true" /> to synchronize the creation of modules, types, and members in the dynamic assembly; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1267">使用指定名称、访问模式、存储目录、证据、权限请求和同步选项定义动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1267">Defines a dynamic assembly using the specified name, access mode, storage directory, evidence, permission requests, and synchronization option.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1268">具有指定名称和功能的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1268">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1269">为指定的权限请求`requiredPermissions`， `optionalPermissions`，并`refusedPermissions`才会使用`evidence`还提供，或如果动态程序集是保存和重新加载到内存。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1269">The permission requests specified for `requiredPermissions`, `optionalPermissions`, and `refusedPermissions` are used only if `evidence` is also supplied, or if the dynamic assembly is saved and reloaded into memory.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7ccd-1270">在开发期间用于发出动态程序集的代码，建议您包含<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType>在`refusedPermissions`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1270">During the development of code that emits dynamic assemblies, it is recommended that you include <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> in `refusedPermissions`.</span></span> <span data-ttu-id="d7ccd-1271">其中包括<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification>在`refusedPermissions`参数可确保验证 MSIL。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1271">Including <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification> in the `refusedPermissions` parameter ensures that the MSIL is verified.</span></span> <span data-ttu-id="d7ccd-1272">此技术的一个限制是，它还会导致<xref:System.Security.SecurityException>与要求完全信任的代码一起使用时引发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1272">A limitation of this technique is that it also causes <xref:System.Security.SecurityException> to be thrown when used with code that demands full trust.</span></span>  
  
 <span data-ttu-id="d7ccd-1273">只有完全受信任调用方可以提供其证据定义动态时<xref:System.Reflection.Assembly>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1273">Only fully trusted callers can supply their evidence when defining a dynamic <xref:System.Reflection.Assembly>.</span></span> <span data-ttu-id="d7ccd-1274">在运行时将映射<xref:System.Security.Policy.Evidence>通过安全策略，以确定授予的权限。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1274">The runtime will map the <xref:System.Security.Policy.Evidence> through the security policy to determine the granted permissions.</span></span> <span data-ttu-id="d7ccd-1275">部分受信任的调用方必须提供`null`为`evidence`参数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1275">Partially trusted callers must supply `null` for the `evidence` parameter.</span></span> <span data-ttu-id="d7ccd-1276">如果`evidence`是`null`，在运行时将复制的权限集，即，当前授予和拒绝集，从调用方的<xref:System.Reflection.Assembly>到动态<xref:System.Reflection.Assembly>正在定义，并将策略标记为已解决。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1276">If `evidence` is `null`, the runtime copies the permission sets, that is, the current grant and deny sets, from the caller's <xref:System.Reflection.Assembly> to the dynamic <xref:System.Reflection.Assembly> being defined and marks policy as resolved.</span></span>  
  
 <span data-ttu-id="d7ccd-1277">如果动态<xref:System.Reflection.Assembly>是保存到磁盘，后面的加载将获取基于与位置相关联的策略授予其中<xref:System.Reflection.Assembly>已保存。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1277">If the dynamic <xref:System.Reflection.Assembly> is saved to disk, subsequent loads will get grants based on policies associated with the location where the <xref:System.Reflection.Assembly> was saved.</span></span>  
  
 <span data-ttu-id="d7ccd-1278">如果`isSynchronized`是`true`，生成的以下方法<xref:System.Reflection.Emit.AssemblyBuilder>将同步： <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>， <xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A>， <xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A>， <xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A>， <xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A>，和<xref:System.Reflection.Emit.AssemblyBuilder.Save%2A>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1278">If `isSynchronized` is `true`, the following methods of the resulting <xref:System.Reflection.Emit.AssemblyBuilder> will be synchronized: <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A>, and <xref:System.Reflection.Emit.AssemblyBuilder.Save%2A>.</span></span> <span data-ttu-id="d7ccd-1279">如果在不同的线程上调用这些方法的两个程序，一个将其他完成之前一直阻止。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1279">If two of these methods are called on different threads, one will block until the other completes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-1280">下面的示例演示如何<xref:System.AppDomain.DefineDynamicAssembly%2A>方法和<xref:System.AppDomain.AssemblyResolve>事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1280">The following sample demonstrates the <xref:System.AppDomain.DefineDynamicAssembly%2A> method and <xref:System.AppDomain.AssemblyResolve> event.</span></span>  
  
 <span data-ttu-id="d7ccd-1281">有关运行此代码示例，必须提供完全限定的程序集名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1281">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="d7ccd-1282">有关如何获取完全限定的程序集名称的信息，请参阅[程序集名称](~/docs/framework/app-domains/assembly-names.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1282">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CPP/definedynamicassembly.cpp#1)]
 [!code-csharp[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/CS/definedynamicassembly.cs#1)]
 [!code-vb[AppDomain_DefineDynamicAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DefineDynamicAssembly/VB/definedynamicassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-1283"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1283"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7ccd-1284"><paramref name="name" /> 的 <see langword="Name" /> 属性为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1284">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="d7ccd-1285">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1285">-or-</span></span> 
<span data-ttu-id="d7ccd-1286"><paramref name="name" /> 的 <see langword="Name" /> 属性以空格开头，或包含正斜杠或反斜杠。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1286">The <see langword="Name" /> property of <paramref name="name" /> begins with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1287">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1287">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-1288">若要使用的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1288">to load an assembly with evidence.</span></span> <span data-ttu-id="d7ccd-1289">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1289">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DefineDynamicAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, System.Security.Policy.Evidence evidence, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions, bool isSynchronized, System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly(class System.Reflection.AssemblyName name, valuetype System.Reflection.Emit.AssemblyBuilderAccess access, string dir, class System.Security.Policy.Evidence evidence, class System.Security.PermissionSet requiredPermissions, class System.Security.PermissionSet optionalPermissions, class System.Security.PermissionSet refusedPermissions, bool isSynchronized, class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.String,System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Boolean,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Emit::AssemblyBuilder ^ DefineDynamicAssembly(System::Reflection::AssemblyName ^ name, System::Reflection::Emit::AssemblyBuilderAccess access, System::String ^ dir, System::Security::Policy::Evidence ^ evidence, System::Security::PermissionSet ^ requiredPermissions, System::Security::PermissionSet ^ optionalPermissions, System::Security::PermissionSet ^ refusedPermissions, bool isSynchronized, System::Collections::Generic::IEnumerable&lt;System::Reflection::Emit::CustomAttributeBuilder ^&gt; ^ assemblyAttributes);" />
      <MemberSignature Language="F#" Value="member this.DefineDynamicAssembly : System.Reflection.AssemblyName * System.Reflection.Emit.AssemblyBuilderAccess * string * System.Security.Policy.Evidence * System.Security.PermissionSet * System.Security.PermissionSet * System.Security.PermissionSet * bool * seq&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; -&gt; System.Reflection.Emit.AssemblyBuilder" Usage="appDomain.DefineDynamicAssembly (name, access, dir, evidence, requiredPermissions, optionalPermissions, refusedPermissions, isSynchronized, assemblyAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Declarative security for assembly level is no longer enforced")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Emit.AssemblyBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.Reflection.AssemblyName" />
        <Parameter Name="access" Type="System.Reflection.Emit.AssemblyBuilderAccess" />
        <Parameter Name="dir" Type="System.String" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
        <Parameter Name="requiredPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="optionalPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="refusedPermissions" Type="System.Security.PermissionSet" />
        <Parameter Name="isSynchronized" Type="System.Boolean" />
        <Parameter Name="assemblyAttributes" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt;" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="d7ccd-1290">动态程序集的唯一标识。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1290">The unique identity of the dynamic assembly.</span></span></param>
        <param name="access"><span data-ttu-id="d7ccd-1291">访问动态程序集所采用的模式。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1291">The mode in which the dynamic assembly will be accessed.</span></span></param>
        <param name="dir"><span data-ttu-id="d7ccd-1292">保存动态程序集的目录的名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1292">The name of the directory where the dynamic assembly will be saved.</span></span> <span data-ttu-id="d7ccd-1293">如果 <paramref name="dir" /> 为 <see langword="null" />，则使用当前目录。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1293">If <paramref name="dir" /> is <see langword="null" />, the current directory is used.</span></span></param>
        <param name="evidence"><span data-ttu-id="d7ccd-1294">为动态程序集提供的证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1294">The evidence that is supplied for the dynamic assembly.</span></span> <span data-ttu-id="d7ccd-1295">该证据始终作为最后一组用于策略解析的证据来使用。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1295">The evidence is used unaltered as the final set of evidence used for policy resolution.</span></span></param>
        <param name="requiredPermissions"><span data-ttu-id="d7ccd-1296">必需的权限请求。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1296">The required permissions request.</span></span></param>
        <param name="optionalPermissions"><span data-ttu-id="d7ccd-1297">可选的权限请求。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1297">The optional permissions request.</span></span></param>
        <param name="refusedPermissions"><span data-ttu-id="d7ccd-1298">被拒绝的权限请求。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1298">The refused permissions request.</span></span></param>
        <param name="isSynchronized"><span data-ttu-id="d7ccd-1299">若要在动态程序集中同步模块、类型和成员的创建，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1299"><see langword="true" /> to synchronize the creation of modules, types, and members in the dynamic assembly; otherwise, <see langword="false" />.</span></span></param>
        <param name="assemblyAttributes"><span data-ttu-id="d7ccd-1300">要应用于程序集的可枚举特性列表；如果无特性，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1300">An enumerable list of attributes to be applied to the assembly, or <see langword="null" /> if there are no attributes.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1301">使用指定的名称、访问模式、存储目录、证据、权限请求、同步选项和自定义特性定义动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1301">Defines a dynamic assembly with the specified name, access mode, storage directory, evidence, permission requests, synchronization option, and custom attributes.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1302">具有指定名称和功能的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1302">A dynamic assembly with the specified name and features.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1303">使用此方法重载来指定属性，除非在已应用创建动态程序集时，可能无法正常工作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1303">Use this method overload to specify attributes that do not work correctly unless they are applied when a dynamic assembly is created.</span></span> <span data-ttu-id="d7ccd-1304">例如，安全属性，如<xref:System.Security.SecurityTransparentAttribute>和<xref:System.Security.SecurityCriticalAttribute>即使添加了创建动态程序集后，可能无法正常工作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1304">For example, security attributes such as <xref:System.Security.SecurityTransparentAttribute> and <xref:System.Security.SecurityCriticalAttribute> do not work correctly if they are added after a dynamic assembly has been created.</span></span>  
  
 <span data-ttu-id="d7ccd-1305">为指定的权限请求`requiredPermissions`， `optionalPermissions`，并`refusedPermissions`参数才会使用`evidence`还提供参数，或如果动态程序集是保存和重新加载到内存。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1305">The permission requests specified for the `requiredPermissions`, `optionalPermissions`, and `refusedPermissions` parameters are used only if the `evidence` parameter is also supplied, or if the dynamic assembly is saved and reloaded into memory.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7ccd-1306">开发时发出动态程序集的代码，我们建议您包括<xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType>标记中`refusedPermissions`参数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1306">When you develop code that emits dynamic assemblies, we recommend that you include the <xref:System.Security.Permissions.SecurityPermissionFlag.SkipVerification?displayProperty=nameWithType> flag in the `refusedPermissions` parameter.</span></span> <span data-ttu-id="d7ccd-1307">包含此标志可确保的 Microsoft 中间语言 (MSIL) 将进行验证。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1307">The inclusion of this flag ensures that the Microsoft intermediate language (MSIL) will be verified.</span></span> <span data-ttu-id="d7ccd-1308">此方法会检测无意间生成不可验证的代码，否则为这是很难检测到。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1308">This technique will detect the unintentional generation of unverifiable code, which otherwise is very difficult to detect.</span></span> <span data-ttu-id="d7ccd-1309">此技术的一个限制是，它还会导致<xref:System.Security.SecurityException>要求完全信任的代码中使用它时引发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1309">A limitation of this technique is that it also causes <xref:System.Security.SecurityException> to be thrown when it is used with code that demands full trust.</span></span>  
  
 <span data-ttu-id="d7ccd-1310">只有完全受信任调用方可以提供证据定义动态时<xref:System.Reflection.Assembly>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1310">Only fully trusted callers can supply evidence when defining a dynamic <xref:System.Reflection.Assembly>.</span></span> <span data-ttu-id="d7ccd-1311">运行时将映射<xref:System.Security.Policy.Evidence>通过安全策略，以确定授予的权限。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1311">The runtime maps the <xref:System.Security.Policy.Evidence> through the security policy to determine the granted permissions.</span></span> <span data-ttu-id="d7ccd-1312">部分受信任的调用方必须提供`null`为`evidence`参数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1312">Partially trusted callers must supply `null` for the `evidence` parameter.</span></span> <span data-ttu-id="d7ccd-1313">如果`evidence`是`null`，运行时将从调用方的程序集的权限集 （即，当前授予和拒绝集） 复制到正在定义中，并将策略标记为已解决的动态程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1313">If `evidence` is `null`, the runtime copies the permission sets (that is, the current grant and deny sets) from the caller's assembly to the dynamic assembly that is being defined, and marks the policy as resolved.</span></span>  
  
 <span data-ttu-id="d7ccd-1314">如果动态程序集保存到磁盘，后续加载会授予基于与保存动态程序集的位置相关联的策略。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1314">If the dynamic assembly is saved to disk, subsequent loads will get grants based on policies that are associated with the location where the dynamic assembly was saved.</span></span>  
  
 <span data-ttu-id="d7ccd-1315">如果`isSynchronized`是`true`，生成的以下方法<xref:System.Reflection.Emit.AssemblyBuilder>将同步： <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>， <xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A>， <xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A>， <xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A>， <xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A>，和<xref:System.Reflection.Emit.AssemblyBuilder.Save%2A>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1315">If `isSynchronized` is `true`, the following methods of the resulting <xref:System.Reflection.Emit.AssemblyBuilder> will be synchronized: <xref:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.DefineResource%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.AddResourceFile%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule%2A>, <xref:System.Reflection.Emit.AssemblyBuilder.SetEntryPoint%2A>, and <xref:System.Reflection.Emit.AssemblyBuilder.Save%2A>.</span></span> <span data-ttu-id="d7ccd-1316">如果在不同的线程上调用这些方法的两个程序，一个将另完成之前一直阻止。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1316">If two of these methods are called on different threads, one will block until the other is completed.</span></span>  
  
 <span data-ttu-id="d7ccd-1317">中引入了此方法重载[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1317">This method overload is introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)].</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-1318"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1318"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7ccd-1319"><paramref name="name" /> 的 <see langword="Name" /> 属性为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1319">The <see langword="Name" /> property of <paramref name="name" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="d7ccd-1320">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1320">-or-</span></span> 
<span data-ttu-id="d7ccd-1321"><paramref name="name" /> 的 <see langword="Name" /> 属性以空白开始，或者包含正斜杠或反斜杠。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1321">The <see langword="Name" /> property of <paramref name="name" /> starts with white space, or contains a forward or backward slash.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1322">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1322">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-1323">若要使用的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1323">to load an assembly with evidence.</span></span> <span data-ttu-id="d7ccd-1324">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1324">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <altmember cref="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)" />
      </Docs>
    </Member>
    <Member MemberName="DoCallBack">
      <MemberSignature Language="C#" Value="public void DoCallBack (CrossAppDomainDelegate callBackDelegate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DoCallBack(class System.CrossAppDomainDelegate callBackDelegate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.DoCallBack(System.CrossAppDomainDelegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DoCallBack (callBackDelegate As CrossAppDomainDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DoCallBack(CrossAppDomainDelegate ^ callBackDelegate);" />
      <MemberSignature Language="F#" Value="abstract member DoCallBack : CrossAppDomainDelegate -&gt; unit&#xA;override this.DoCallBack : CrossAppDomainDelegate -&gt; unit" Usage="appDomain.DoCallBack callBackDelegate" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.DoCallBack(System.CrossAppDomainDelegate)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callBackDelegate" Type="System.CrossAppDomainDelegate" />
      </Parameters>
      <Docs>
        <param name="callBackDelegate"><span data-ttu-id="d7ccd-1325">指定要调用的方法的委托。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1325">A delegate that specifies a method to call.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1326">在另一个应用程序域中执行代码，该应用程序域由指定的委托标识。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1326">Executes the code in another application domain that is identified by the specified delegate.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1327">`callBackDelegate` 可以指定封送按值， <xref:System.MarshalByRefObject>，或<xref:System.ContextBoundObject>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1327">`callBackDelegate` can specify a marshal-by-value, <xref:System.MarshalByRefObject>, or <xref:System.ContextBoundObject>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-1328">下面的示例演示了如何使用静态<xref:System.AppDomain.DoCallBack%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1328">The following sample demonstrates using a static <xref:System.AppDomain.DoCallBack%2A> method.</span></span>  
  
 [!code-cpp[AppDomain_DoCallBack#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DoCallBack/CPP/docallback_static.cpp#1)]
 [!code-csharp[AppDomain_DoCallBack#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DoCallBack/CS/docallback_static.cs#1)]
 [!code-vb[AppDomain_DoCallBack#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DoCallBack/VB/docallback_static.vb#1)]  
  
 <span data-ttu-id="d7ccd-1329">下面的示例演示了如何使用<xref:System.AppDomain.DoCallBack%2A>按值的方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1329">The following sample demonstrates using the <xref:System.AppDomain.DoCallBack%2A> method by value.</span></span>  
  
 [!code-cpp[AppDomain_DoCallBack#2](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DoCallBack/CPP/docallback_byval.cpp#2)]
 [!code-csharp[AppDomain_DoCallBack#2](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DoCallBack/CS/docallback_byval.cs#2)]
 [!code-vb[AppDomain_DoCallBack#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DoCallBack/VB/docallback_byval.vb#2)]  
  
 <span data-ttu-id="d7ccd-1330">下面的示例演示了如何使用<xref:System.AppDomain.DoCallBack%2A>方法按引用。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1330">The following sample demonstrates using the <xref:System.AppDomain.DoCallBack%2A> method by reference.</span></span>  
  
 [!code-cpp[AppDomain_DoCallBack#3](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_DoCallBack/CPP/docallback_byref.cpp#3)]
 [!code-csharp[AppDomain_DoCallBack#3](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_DoCallBack/CS/docallback_byref.cs#3)]
 [!code-vb[AppDomain_DoCallBack#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_DoCallBack/VB/docallback_byref.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-1331"><paramref name="callBackDelegate" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1331"><paramref name="callBackDelegate" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DomainManager">
      <MemberSignature Language="C#" Value="public AppDomainManager DomainManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AppDomainManager DomainManager" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.DomainManager" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DomainManager As AppDomainManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property AppDomainManager ^ DomainManager { AppDomainManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DomainManager : AppDomainManager" Usage="System.AppDomain.DomainManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AppDomainManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7ccd-1332">获得初始化应用程序域时主机提供的域管理器。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1332">Gets the domain manager that was provided by the host when the application domain was initialized.</span></span></summary>
        <value><span data-ttu-id="d7ccd-1333">一个对象，表示初始化应用程序域时主机提供的域管理器；或者如果没有提供域管理器，则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1333">An object that represents the domain manager provided by the host when the application domain was initialized, or <see langword="null" /> if no domain manager was provided.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1334">公共语言运行时 (CLR) 的非托管的主机可以提供域管理器。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1334">An unmanaged host of the common language runtime (CLR) can provide a domain manager.</span></span> <span data-ttu-id="d7ccd-1335">域管理器可以参与初始化新的应用程序域并提供其他管理器，如<xref:System.Security.HostSecurityManager>，该元素参与应用程序域的操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1335">The domain manager can participate in initializing the new application domain and supply other managers, such as a <xref:System.Security.HostSecurityManager>, that participate in the operations of the application domain.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="d7ccd-1336">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1336">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="d7ccd-1337">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1337">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DomainUnload">
      <MemberSignature Language="C#" Value="public event EventHandler DomainUnload;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DomainUnload" />
      <MemberSignature Language="DocId" Value="E:System.AppDomain.DomainUnload" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DomainUnload As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ DomainUnload;" />
      <MemberSignature Language="F#" Value="member this.DomainUnload : EventHandler " Usage="member this.DomainUnload : System.EventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System._AppDomain.DomainUnload</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>remove: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7ccd-1338">在即将卸载 <see cref="T:System.AppDomain" /> 时发生。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1338">Occurs when an <see cref="T:System.AppDomain" /> is about to be unloaded.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1339"><xref:System.EventHandler>委托卸载应用程序域之前，此事件可以执行任何终止活动。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1339">The <xref:System.EventHandler> delegate for this event can perform any termination activities before the application domain is unloaded.</span></span>  
  
 <span data-ttu-id="d7ccd-1340">需要对其执行处理卸载时每个应用程序域应注册此事件的事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1340">Each application domain that needs to perform processing when it is unloaded should register an event handler for this event.</span></span> <span data-ttu-id="d7ccd-1341">共享的事件处理程序不应使用，因为<xref:System.EventHandler>委托将无法识别的域正在卸载模块。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1341">A shared event handler should not be used, because the <xref:System.EventHandler> delegate does not identify the domain that is being unloaded.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7ccd-1342">默认应用程序域中永远不会引发此事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1342">This event is never raised in the default application domain.</span></span>  
  
 <span data-ttu-id="d7ccd-1343">不进行有关线程引发事件的假设。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1343">Do not make assumptions about the thread the event is raised on.</span></span> <span data-ttu-id="d7ccd-1344">可以在比调用不同的线程上引发该事件<xref:System.AppDomain.Unload%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1344">The event can be raised on a different thread than the one that called the <xref:System.AppDomain.Unload%2A> method.</span></span>  
  
 <span data-ttu-id="d7ccd-1345">有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1345">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DynamicDirectory">
      <MemberSignature Language="C#" Value="public string DynamicDirectory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DynamicDirectory" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.DynamicDirectory" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DynamicDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DynamicDirectory { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DynamicDirectory : string" Usage="System.AppDomain.DynamicDirectory" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System._AppDomain.DynamicDirectory</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7ccd-1346">获取目录，它由程序集冲突解决程序用来探测动态创建的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1346">Gets the directory that the assembly resolver uses to probe for dynamically created assemblies.</span></span></summary>
        <value><span data-ttu-id="d7ccd-1347">目录，它由程序集冲突解决程序用来探测动态创建的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1347">The directory that the assembly resolver uses to probe for dynamically created assemblies.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1348">若要设置的动态目录，将分配到的基目录路径<xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=nameWithType>属性的<xref:System.AppDomainSetup>将用于创建新的应用程序域的对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1348">To set the dynamic directory, assign a base directory path to the <xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=nameWithType> property of the <xref:System.AppDomainSetup> object that will be used to create the new application domain.</span></span> <span data-ttu-id="d7ccd-1349">通过简单名称是将分配到的字符串的哈希代码子目录添加修改分配给属性的基目录路径<xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=nameWithType>属性，因此在基目录的格式是*原始路径* \\*哈希代码*。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1349">The base directory path you assign to the property is modified by the addition of a subdirectory whose simple name is the hash code of the string you assign to the <xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=nameWithType> property, so the format of the base directory is *original path*\\*hash code*.</span></span> <span data-ttu-id="d7ccd-1350">动态目录是此基目录的子目录。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1350">The dynamic directory is a subdirectory of this base directory.</span></span> <span data-ttu-id="d7ccd-1351">其简单的名称为的值<xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=nameWithType>属性，因此其格式是*原始路径*\\*哈希代码*\\*应用程序名称*。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1351">Its simple name is the value of the <xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=nameWithType> property, so its format is *original path*\\*hash code*\\*application name*.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-1352">下面的示例创建与目录的动态程序集的应用程序域、 发出动态程序集并将其存储在动态目录中，将程序集加载到新的应用程序域并使用它。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1352">The following example creates an application domain with a directory for dynamic assemblies, emits a dynamic assembly and stores it in the dynamic directory, and then loads the assembly into the new application domain and uses it.</span></span>  
  
 <span data-ttu-id="d7ccd-1353">此示例将创建<xref:System.AppDomainSetup>对象并设置其<xref:System.AppDomainSetup.ApplicationName%2A>属性设置为"示例"并将其<xref:System.AppDomainSetup.DynamicBase%2A>属性设置为"C:\DynamicAssemblyDir"。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1353">The example creates an <xref:System.AppDomainSetup> object and sets its <xref:System.AppDomainSetup.ApplicationName%2A> property to "Example" and its <xref:System.AppDomainSetup.DynamicBase%2A> property to "C:\DynamicAssemblyDir".</span></span> <span data-ttu-id="d7ccd-1354">该示例然后显示<xref:System.AppDomainSetup.DynamicBase%2A>属性，以显示应用程序名称的哈希代码具有已追加为最初分配的路径的子目录。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1354">The example then displays the <xref:System.AppDomainSetup.DynamicBase%2A> property, to show that the hash code of the application name has been appended as a subdirectory of the path that was originally assigned.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7ccd-1355">在此示例中的基目录被用于示例应用程序位于探测路径外部。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1355">The base directory in this example is intended to be outside the probing path for the example application.</span></span> <span data-ttu-id="d7ccd-1356">请确保编译中的其他位置的示例。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1356">Be sure to compile the example in a different location.</span></span> <span data-ttu-id="d7ccd-1357">每次运行该示例删除在基目录及其所有的子目录。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1357">Delete the base directory and all its subdirectories each time you run the example.</span></span>  
  
 <span data-ttu-id="d7ccd-1358">该示例创建一个新的应用程序域，使用<xref:System.AppDomainSetup>对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1358">The example creates a new application domain, using the <xref:System.AppDomainSetup> object.</span></span> <span data-ttu-id="d7ccd-1359">该示例使用<xref:System.AppDomain.DynamicDirectory%2A>属性检索的目录的名称，因此它可以创建目录。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1359">The example uses the <xref:System.AppDomain.DynamicDirectory%2A> property to retrieve the name of the directory, so it can create the directory.</span></span> <span data-ttu-id="d7ccd-1360">（该示例可以轻松地创建目录事先通过连接的原始路径、 应用程序名称和应用程序名称的哈希代码。）</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1360">(The example could just as easily create the directory beforehand by concatenating the original path, the hash code of the application name, and the application name.)</span></span>  
  
 <span data-ttu-id="d7ccd-1361">本示例具有`GenerateDynamicAssembly`方法发出的程序集名为`DynamicHelloWorld.dll`并将其存储在新应用程序域的动态目录。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1361">The example has a `GenerateDynamicAssembly` method that emits an assembly named `DynamicHelloWorld.dll` and stores it in the new application domain's dynamic directory.</span></span> <span data-ttu-id="d7ccd-1362">动态程序集包含一种类型， `HelloWorld`，具有一个静态方法 (`Shared`方法在 Visual Basic 中的) 名为`HelloFromAD`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1362">The dynamic assembly contains one type, `HelloWorld`, that has a static method (`Shared` method in Visual Basic) named `HelloFromAD`.</span></span> <span data-ttu-id="d7ccd-1363">调用此方法显示应用程序域的名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1363">Calling this method displays the name of the application domain.</span></span>  
  
 <span data-ttu-id="d7ccd-1364">`Example`类派生自<xref:System.MarshalByRefObject>，因此该示例可以创建类的实例中，新应用程序域并调用其`Test`方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1364">The `Example` class derives from <xref:System.MarshalByRefObject>, so the example can create an instance of the class in the new application domain and call its `Test` method.</span></span> <span data-ttu-id="d7ccd-1365">`Test`方法加载的动态程序集按其显示名称，并调用静态`HelloFromAD`方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1365">The `Test` method loads the dynamic assembly by its display name and calls the static `HelloFromAD` method.</span></span>  
  
 <span data-ttu-id="d7ccd-1366">可以显示后正常的探测路径搜索动态目录，通过编写代码的名为程序集`DynamicHelloWorld.dll`并将其编译为此示例中的相同目录中。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1366">You can show that the dynamic directory is searched after the normal probing paths by writing code for an assembly named `DynamicHelloWorld.dll` and compiling it in the same directory as this example.</span></span> <span data-ttu-id="d7ccd-1367">程序集必须具有一个名为类`HelloWorld`与名为静态方法`HelloFromAD`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1367">The assembly must have a class named `HelloWorld` with a static method named `HelloFromAD`.</span></span> <span data-ttu-id="d7ccd-1368">此方法不需要具有相同的功能中这些示例。它可以只需将字符串显示到控制台。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1368">This method does not have to have the same functionality as the one in the example; it can simply display a string to the console.</span></span> <span data-ttu-id="d7ccd-1369">程序集还必须具有<xref:System.Reflection.AssemblyVersionAttribute>设置其版本为 1.0.0.0 的属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1369">The assembly must also have an <xref:System.Reflection.AssemblyVersionAttribute> attribute that sets its version to 1.0.0.0.</span></span> <span data-ttu-id="d7ccd-1370">运行示例时，动态目录中搜索之前，找到在当前目录中编译的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1370">When you run the example, the assembly you compiled in the current directory is found before the dynamic directory is searched.</span></span>  
  
 [!code-cpp[ADDynamicBase#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADDynamicBase/CPP/addynamicbase.cpp#1)]
 [!code-csharp[ADDynamicBase#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADDynamicBase/CS/addynamicbase.cs#1)]
 [!code-vb[ADDynamicBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADDynamicBase/VB/addynamicbase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1371">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1371">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="d7ccd-1372">用于访问的路径信息。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1372">for access to the path information.</span></span> <span data-ttu-id="d7ccd-1373">关联枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1373">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Evidence">
      <MemberSignature Language="C#" Value="public System.Security.Policy.Evidence Evidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Policy.Evidence Evidence" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.Evidence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Evidence As Evidence" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Policy::Evidence ^ Evidence { System::Security::Policy::Evidence ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Evidence : System.Security.Policy.Evidence" Usage="System.AppDomain.Evidence" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Security.IEvidenceFactory.Evidence</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Policy.Evidence</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7ccd-1374">获取与该应用程序域关联的 <see cref="T:System.Security.Policy.Evidence" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1374">Gets the <see cref="T:System.Security.Policy.Evidence" /> associated with this application domain.</span></span></summary>
        <value><span data-ttu-id="d7ccd-1375">与该应用程序域关联的证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1375">The evidence associated with this application domain.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1376">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1376">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-1377">若要使用的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1377">to load an assembly with evidence.</span></span> <span data-ttu-id="d7ccd-1378">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1378">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span> <span data-ttu-id="d7ccd-1379">安全操作： <see cref="F:System.Security.Permissions.SecurityAction.Demand" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1379">Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExecuteAssembly">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d7ccd-1380">执行指定文件中包含的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1380">Executes the assembly contained in the specified file.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExecuteAssembly">
      <MemberSignature Language="C#" Value="public int ExecuteAssembly (string assemblyFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ExecuteAssembly(string assemblyFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssembly(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteAssembly (assemblyFile As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int ExecuteAssembly(System::String ^ assemblyFile);" />
      <MemberSignature Language="F#" Value="abstract member ExecuteAssembly : string -&gt; int&#xA;override this.ExecuteAssembly : string -&gt; int" Usage="appDomain.ExecuteAssembly assemblyFile" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.ExecuteAssembly(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="d7ccd-1381">包含要执行程序集的文件的名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1381">The name of the file that contains the assembly to execute.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1382">执行指定文件中包含的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1382">Executes the assembly contained in the specified file.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1383">程序集的入口点返回的值。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1383">The value returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1384">程序集开始在.NET Framework 标头中指定的入口点执行。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1384">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="d7ccd-1385">此方法不会创建新的进程或应用程序域，并且它不在新线程上执行的入口点方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1385">This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
 <span data-ttu-id="d7ccd-1386">此方法加载程序集使用<xref:System.Reflection.Assembly.LoadFile%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1386">This method loads assemblies using the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span> <span data-ttu-id="d7ccd-1387">此外可以执行使用的程序集<xref:System.AppDomain.ExecuteAssemblyByName%2A>方法，加载程序集使用<xref:System.Reflection.Assembly.Load%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1387">You can also execute assemblies using the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method, which loads assemblies using the <xref:System.Reflection.Assembly.Load%2A> method.</span></span>  
  
 <span data-ttu-id="d7ccd-1388">若要创建<xref:System.AppDomain>若要加载并执行，请使用<xref:System.AppDomain.CreateDomain%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1388">To create the <xref:System.AppDomain> to load and execute, use the <xref:System.AppDomain.CreateDomain%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-1389">下面的示例演示了如何使用的重载之一<xref:System.AppDomain.ExecuteAssembly%2A>在两个不同的域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1389">The following sample demonstrates using one of the overloads of <xref:System.AppDomain.ExecuteAssembly%2A> on two different domains.</span></span>  
  
 [!code-cpp[AppDomain_ExecuteAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CPP/executeassembly.cpp#1)]
 [!code-csharp[AppDomain_ExecuteAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CS/executeassembly.cs#1)]
 [!code-vb[AppDomain_ExecuteAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_ExecuteAssembly/VB/executeassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-1390"><paramref name="assemblyFile" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1390"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-1391"><paramref name="assemblyFile" /> 未找到。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1391"><paramref name="assemblyFile" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-1392"><paramref name="assemblyFile" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1392"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-1393">或</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1393">-or-</span></span> 
<span data-ttu-id="d7ccd-1394">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyFile" /> 是用更高版本编译的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1394">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1395">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1395">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-1396">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1396">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="d7ccd-1397">指定的程序集没有入口点。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1397">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="d7ccd-1398">用于读取从文件或目录，以及用于访问路径本身中的信息的访问权限。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1398">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="d7ccd-1399">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1399">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-1400">用于读取不以"file://"开头的 URI。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1400">for reading a URI that does not begin with "file://".</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="d7ccd-1401">若要执行的控制台应用程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1401">to execute a console application.</span></span> <span data-ttu-id="d7ccd-1402">关联枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1402">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAssembly">
      <MemberSignature Language="C#" Value="public int ExecuteAssembly (string assemblyFile, System.Security.Policy.Evidence assemblySecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ExecuteAssembly(string assemblyFile, class System.Security.Policy.Evidence assemblySecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteAssembly (assemblyFile As String, assemblySecurity As Evidence) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int ExecuteAssembly(System::String ^ assemblyFile, System::Security::Policy::Evidence ^ assemblySecurity);" />
      <MemberSignature Language="F#" Value="abstract member ExecuteAssembly : string * System.Security.Policy.Evidence -&gt; int&#xA;override this.ExecuteAssembly : string * System.Security.Policy.Evidence -&gt; int" Usage="appDomain.ExecuteAssembly (assemblyFile, assemblySecurity)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of ExecuteAssembly which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="assemblySecurity" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="d7ccd-1403">包含要执行程序集的文件的名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1403">The name of the file that contains the assembly to execute.</span></span></param>
        <param name="assemblySecurity"><span data-ttu-id="d7ccd-1404">用于加载程序集的证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1404">Evidence for loading the assembly.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1405">使用指定的证据执行指定文件中包含的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1405">Executes the assembly contained in the specified file, using the specified evidence.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1406">程序集的入口点返回的值。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1406">The value returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1407">程序集开始在.NET Framework 标头中指定的入口点执行。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1407">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="d7ccd-1408"><xref:System.AppDomain.ExecuteAssembly%2A>方法不会创建新的进程或应用程序域，并且它不在新线程上执行的入口点方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1408">The <xref:System.AppDomain.ExecuteAssembly%2A> method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
 <span data-ttu-id="d7ccd-1409">此方法加载程序集使用<xref:System.Reflection.Assembly.LoadFile%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1409">This method loads assemblies using the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span> <span data-ttu-id="d7ccd-1410">此外可以执行使用的程序集<xref:System.AppDomain.ExecuteAssemblyByName%2A>方法，加载程序集使用<xref:System.Reflection.Assembly.Load%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1410">You can also execute assemblies using the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method, which loads assemblies using the <xref:System.Reflection.Assembly.Load%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-1411">下面的示例演示了如何使用的重载之一<xref:System.AppDomain.ExecuteAssembly%2A>在两个不同的域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1411">The following sample demonstrates using one of the overloads of <xref:System.AppDomain.ExecuteAssembly%2A> on two different domains.</span></span>  
  
 [!code-cpp[AppDomain_ExecuteAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CPP/executeassembly.cpp#1)]
 [!code-csharp[AppDomain_ExecuteAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CS/executeassembly.cs#1)]
 [!code-vb[AppDomain_ExecuteAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_ExecuteAssembly/VB/executeassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-1412"><paramref name="assemblyFile" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1412"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-1413"><paramref name="assemblyFile" /> 未找到。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1413"><paramref name="assemblyFile" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-1414"><paramref name="assemblyFile" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1414"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-1415">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1415">-or-</span></span> 
<span data-ttu-id="d7ccd-1416">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyFile" /> 是用更高版本编译的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1416">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1417">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1417">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-1418">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1418">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="d7ccd-1419">指定的程序集没有入口点。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1419">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-1420">若要使用的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1420">to load an assembly with evidence.</span></span> <span data-ttu-id="d7ccd-1421">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1421">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="d7ccd-1422">用于读取从文件或目录，以及用于访问路径本身中的信息的访问权限。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1422">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="d7ccd-1423">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1423">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-1424">用于读取不以"file://"开头的 URI。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1424">for reading a URI that does not begin with "file://".</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="d7ccd-1425">若要执行的控制台应用程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1425">to execute a console application.</span></span> <span data-ttu-id="d7ccd-1426">关联枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1426">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAssembly">
      <MemberSignature Language="C#" Value="public int ExecuteAssembly (string assemblyFile, string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteAssembly(string assemblyFile, string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssembly(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteAssembly (assemblyFile As String, args As String()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteAssembly(System::String ^ assemblyFile, cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.ExecuteAssembly : string * string[] -&gt; int" Usage="appDomain.ExecuteAssembly (assemblyFile, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="d7ccd-1427">包含要执行程序集的文件的名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1427">The name of the file that contains the assembly to execute.</span></span></param>
        <param name="args"><span data-ttu-id="d7ccd-1428">程序集的入口点的自变量。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1428">The arguments to the entry point of the assembly.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1429">使用指定的自变量执行指定文件中包含的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1429">Executes the assembly contained in the specified file, using the specified arguments.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1430">程序集的入口点返回的值。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1430">The value that is returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1431">程序集开始在.NET Framework 标头中指定的入口点执行。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1431">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="d7ccd-1432">此方法不会创建新的进程或应用程序域，并且它不在新线程上执行的入口点方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1432">This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
 <span data-ttu-id="d7ccd-1433">此方法加载程序集使用<xref:System.Reflection.Assembly.LoadFile%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1433">This method loads assemblies using the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span> <span data-ttu-id="d7ccd-1434">此外可以执行使用的程序集<xref:System.AppDomain.ExecuteAssemblyByName%2A>方法，加载程序集使用<xref:System.Reflection.Assembly.Load%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1434">You can also execute assemblies using the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method, which loads assemblies using the <xref:System.Reflection.Assembly.Load%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-1435">下面的示例演示了如何使用的重载之一<xref:System.AppDomain.ExecuteAssembly%2A>在两个不同的域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1435">The following sample demonstrates using one of the overloads of <xref:System.AppDomain.ExecuteAssembly%2A> on two different domains.</span></span>  
  
 [!code-cpp[AppDomain_ExecuteAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CPP/executeassembly.cpp#1)]
 [!code-csharp[AppDomain_ExecuteAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CS/executeassembly.cs#1)]
 [!code-vb[AppDomain_ExecuteAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_ExecuteAssembly/VB/executeassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-1436"><paramref name="assemblyFile" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1436"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-1437"><paramref name="assemblyFile" /> 未找到。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1437"><paramref name="assemblyFile" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-1438"><paramref name="assemblyFile" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1438"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-1439">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1439">-or-</span></span> 
 <span data-ttu-id="d7ccd-1440"><paramref name="assemblyFile" /> 使用高于当前所加载版本的公共语言运行时版本编译而成。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1440"><paramref name="assemblyFile" /> was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1441">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1441">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-1442">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1442">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="d7ccd-1443">指定的程序集没有入口点。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1443">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="d7ccd-1444">用于读取从文件或目录，以及用于访问路径本身中的信息的访问权限。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1444">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="d7ccd-1445">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1445">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-1446">用于读取不以"file://"开头的 URI。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1446">for reading a URI that does not begin with "file://".</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="d7ccd-1447">若要执行的控制台应用程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1447">to execute a console application.</span></span> <span data-ttu-id="d7ccd-1448">关联枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1448">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAssembly">
      <MemberSignature Language="C#" Value="public int ExecuteAssembly (string assemblyFile, System.Security.Policy.Evidence assemblySecurity, string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ExecuteAssembly(string assemblyFile, class System.Security.Policy.Evidence assemblySecurity, string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteAssembly (assemblyFile As String, assemblySecurity As Evidence, args As String()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int ExecuteAssembly(System::String ^ assemblyFile, System::Security::Policy::Evidence ^ assemblySecurity, cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member ExecuteAssembly : string * System.Security.Policy.Evidence * string[] -&gt; int&#xA;override this.ExecuteAssembly : string * System.Security.Policy.Evidence * string[] -&gt; int" Usage="appDomain.ExecuteAssembly (assemblyFile, assemblySecurity, args)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of ExecuteAssembly which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="assemblySecurity" Type="System.Security.Policy.Evidence" />
        <Parameter Name="args" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="d7ccd-1449">包含要执行程序集的文件的名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1449">The name of the file that contains the assembly to execute.</span></span></param>
        <param name="assemblySecurity"><span data-ttu-id="d7ccd-1450">为程序集提供的证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1450">The supplied evidence for the assembly.</span></span></param>
        <param name="args"><span data-ttu-id="d7ccd-1451">程序集的入口点的自变量。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1451">The arguments to the entry point of the assembly.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1452">使用指定的证据和自变量执行指定文件中包含的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1452">Executes the assembly contained in the specified file, using the specified evidence and arguments.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1453">程序集的入口点返回的值。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1453">The value returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1454">程序集开始在.NET Framework 标头中指定的入口点执行。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1454">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="d7ccd-1455">此方法不会创建新的进程或应用程序域，并且它不在新线程上执行的入口点方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1455">This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
 <span data-ttu-id="d7ccd-1456">此方法加载程序集使用<xref:System.Reflection.Assembly.LoadFile%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1456">This method loads assemblies using the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span> <span data-ttu-id="d7ccd-1457">此外可以执行使用的程序集<xref:System.AppDomain.ExecuteAssemblyByName%2A>方法，加载程序集使用<xref:System.Reflection.Assembly.Load%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1457">You can also execute assemblies using the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method, which loads assemblies using the <xref:System.Reflection.Assembly.Load%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-1458">下面的示例演示了如何使用的重载之一<xref:System.AppDomain.ExecuteAssembly%2A>在两个不同的域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1458">The following sample demonstrates using one of the overloads of <xref:System.AppDomain.ExecuteAssembly%2A> on two different domains.</span></span>  
  
 [!code-cpp[AppDomain_ExecuteAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CPP/executeassembly.cpp#1)]
 [!code-csharp[AppDomain_ExecuteAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CS/executeassembly.cs#1)]
 [!code-vb[AppDomain_ExecuteAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_ExecuteAssembly/VB/executeassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-1459"><paramref name="assemblyFile" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1459"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-1460"><paramref name="assemblyFile" /> 未找到。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1460"><paramref name="assemblyFile" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-1461"><paramref name="assemblyFile" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1461"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-1462">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1462">-or-</span></span> 
<span data-ttu-id="d7ccd-1463">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyFile" /> 是用更高版本编译的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1463">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1464">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1464">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-1465">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1465">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7ccd-1466"><paramref name="assemblySecurity" /> 不是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1466"><paramref name="assemblySecurity" /> is not <see langword="null" />.</span></span> <span data-ttu-id="d7ccd-1467">未启用旧版 CAS 策略时，<paramref name="assemblySecurity" /> 应为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1467">When legacy CAS policy is not enabled, <paramref name="assemblySecurity" /> should be <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="d7ccd-1468">指定的程序集没有入口点。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1468">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-1469">若要使用的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1469">to load an assembly with evidence.</span></span> <span data-ttu-id="d7ccd-1470">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1470">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="d7ccd-1471">用于读取从文件或目录，以及用于访问路径本身中的信息的访问权限。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1471">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="d7ccd-1472">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1472">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-1473">用于读取不以"file://"开头的 URI。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1473">for reading a URI that does not begin with "file://".</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="d7ccd-1474">若要执行的控制台应用程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1474">to execute a console application.</span></span> <span data-ttu-id="d7ccd-1475">关联枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1475">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAssembly">
      <MemberSignature Language="C#" Value="public int ExecuteAssembly (string assemblyFile, string[] args, byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteAssembly(string assemblyFile, string[] args, unsigned int8[] hashValue, valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssembly(System.String,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteAssembly (assemblyFile As String, args As String(), hashValue As Byte(), hashAlgorithm As AssemblyHashAlgorithm) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteAssembly(System::String ^ assemblyFile, cli::array &lt;System::String ^&gt; ^ args, cli::array &lt;System::Byte&gt; ^ hashValue, System::Configuration::Assemblies::AssemblyHashAlgorithm hashAlgorithm);" />
      <MemberSignature Language="F#" Value="member this.ExecuteAssembly : string * string[] * byte[] * System.Configuration.Assemblies.AssemblyHashAlgorithm -&gt; int" Usage="appDomain.ExecuteAssembly (assemblyFile, args, hashValue, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="args" Type="System.String[]" />
        <Parameter Name="hashValue" Type="System.Byte[]" />
        <Parameter Name="hashAlgorithm" Type="System.Configuration.Assemblies.AssemblyHashAlgorithm" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="d7ccd-1476">包含要执行程序集的文件的名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1476">The name of the file that contains the assembly to execute.</span></span></param>
        <param name="args"><span data-ttu-id="d7ccd-1477">程序集的入口点的自变量。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1477">The arguments to the entry point of the assembly.</span></span></param>
        <param name="hashValue"><span data-ttu-id="d7ccd-1478">表示计算所得的哈希代码的值。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1478">Represents the value of the computed hash code.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="d7ccd-1479">表示程序集清单使用的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1479">Represents the hash algorithm used by the assembly manifest.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1480">使用指定的自变量、哈希值和哈希算法执行指定文件中包含的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1480">Executes the assembly contained in the specified file, using the specified arguments, hash value, and hash algorithm.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1481">程序集的入口点返回的值。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1481">The value that is returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1482">程序集开始在.NET Framework 标头中指定的入口点执行。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1482">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="d7ccd-1483">此方法不会创建新的进程或应用程序域，并且它不在新线程上执行的入口点方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1483">This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
 <span data-ttu-id="d7ccd-1484">此方法加载程序集使用<xref:System.Reflection.Assembly.LoadFile%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1484">This method loads assemblies using the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span> <span data-ttu-id="d7ccd-1485">此外可以执行使用的程序集<xref:System.AppDomain.ExecuteAssemblyByName%2A>方法，加载程序集使用<xref:System.Reflection.Assembly.Load%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1485">You can also execute assemblies using the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method, which loads assemblies using the <xref:System.Reflection.Assembly.Load%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-1486">下面的示例演示了如何使用的重载之一<xref:System.AppDomain.ExecuteAssembly%2A>在两个不同的域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1486">The following sample demonstrates using one of the overloads of <xref:System.AppDomain.ExecuteAssembly%2A> on two different domains.</span></span>  
  
 [!code-cpp[AppDomain_ExecuteAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CPP/executeassembly.cpp#1)]
 [!code-csharp[AppDomain_ExecuteAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CS/executeassembly.cs#1)]
 [!code-vb[AppDomain_ExecuteAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_ExecuteAssembly/VB/executeassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-1487"><paramref name="assemblyFile" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1487"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-1488"><paramref name="assemblyFile" /> 未找到。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1488"><paramref name="assemblyFile" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-1489"><paramref name="assemblyFile" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1489"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-1490">或</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1490">-or-</span></span> 
 <span data-ttu-id="d7ccd-1491"><paramref name="assemblyFile" /> 使用高于当前所加载版本的公共语言运行时版本编译而成。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1491"><paramref name="assemblyFile" /> was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1492">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1492">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-1493">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1493">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="d7ccd-1494">指定的程序集没有入口点。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1494">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="d7ccd-1495">用于读取从文件或目录，以及用于访问路径本身中的信息的访问权限。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1495">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="d7ccd-1496">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1496">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-1497">用于读取不以"file://"开头的 URI。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1497">for reading a URI that does not begin with "file://".</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="d7ccd-1498">若要执行的控制台应用程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1498">to execute a console application.</span></span> <span data-ttu-id="d7ccd-1499">关联枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1499">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAssembly">
      <MemberSignature Language="C#" Value="public int ExecuteAssembly (string assemblyFile, System.Security.Policy.Evidence assemblySecurity, string[] args, byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteAssembly(string assemblyFile, class System.Security.Policy.Evidence assemblySecurity, string[] args, unsigned int8[] hashValue, valuetype System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteAssembly (assemblyFile As String, assemblySecurity As Evidence, args As String(), hashValue As Byte(), hashAlgorithm As AssemblyHashAlgorithm) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteAssembly(System::String ^ assemblyFile, System::Security::Policy::Evidence ^ assemblySecurity, cli::array &lt;System::String ^&gt; ^ args, cli::array &lt;System::Byte&gt; ^ hashValue, System::Configuration::Assemblies::AssemblyHashAlgorithm hashAlgorithm);" />
      <MemberSignature Language="F#" Value="member this.ExecuteAssembly : string * System.Security.Policy.Evidence * string[] * byte[] * System.Configuration.Assemblies.AssemblyHashAlgorithm -&gt; int" Usage="appDomain.ExecuteAssembly (assemblyFile, assemblySecurity, args, hashValue, hashAlgorithm)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of ExecuteAssembly which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyFile" Type="System.String" />
        <Parameter Name="assemblySecurity" Type="System.Security.Policy.Evidence" />
        <Parameter Name="args" Type="System.String[]" />
        <Parameter Name="hashValue" Type="System.Byte[]" />
        <Parameter Name="hashAlgorithm" Type="System.Configuration.Assemblies.AssemblyHashAlgorithm" />
      </Parameters>
      <Docs>
        <param name="assemblyFile"><span data-ttu-id="d7ccd-1500">包含要执行程序集的文件的名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1500">The name of the file that contains the assembly to execute.</span></span></param>
        <param name="assemblySecurity"><span data-ttu-id="d7ccd-1501">为程序集提供的证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1501">The supplied evidence for the assembly.</span></span></param>
        <param name="args"><span data-ttu-id="d7ccd-1502">程序集的入口点的自变量。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1502">The arguments to the entry point of the assembly.</span></span></param>
        <param name="hashValue"><span data-ttu-id="d7ccd-1503">表示计算所得的哈希代码的值。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1503">Represents the value of the computed hash code.</span></span></param>
        <param name="hashAlgorithm"><span data-ttu-id="d7ccd-1504">表示程序集清单使用的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1504">Represents the hash algorithm used by the assembly manifest.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1505">使用指定的证据、自变量、哈希值和哈希算法执行指定文件中包含的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1505">Executes the assembly contained in the specified file, using the specified evidence, arguments, hash value, and hash algorithm.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1506">程序集的入口点返回的值。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1506">The value returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1507">程序集开始在.NET Framework 标头中指定的入口点执行。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1507">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="d7ccd-1508">此方法不会创建新的进程或应用程序域，并且它不在新线程上执行的入口点方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1508">This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
 <span data-ttu-id="d7ccd-1509">此方法加载程序集使用<xref:System.Reflection.Assembly.LoadFile%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1509">This method loads assemblies using the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span> <span data-ttu-id="d7ccd-1510">此外可以执行使用的程序集<xref:System.AppDomain.ExecuteAssemblyByName%2A>方法，加载程序集使用<xref:System.Reflection.Assembly.Load%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1510">You can also execute assemblies using the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method, which loads assemblies using the <xref:System.Reflection.Assembly.Load%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-1511">以下示例演示如何使用的重载之一<xref:System.AppDomain.ExecuteAssembly%2A>在两个不同的域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1511">Thefollowing sample demonstrates using one of the overloads of <xref:System.AppDomain.ExecuteAssembly%2A> on two different domains.</span></span>  
  
 [!code-cpp[AppDomain_ExecuteAssembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CPP/executeassembly.cpp#1)]
 [!code-csharp[AppDomain_ExecuteAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_ExecuteAssembly/CS/executeassembly.cs#1)]
 [!code-vb[AppDomain_ExecuteAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_ExecuteAssembly/VB/executeassembly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-1512"><paramref name="assemblyFile" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1512"><paramref name="assemblyFile" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-1513"><paramref name="assemblyFile" /> 未找到。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1513"><paramref name="assemblyFile" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-1514"><paramref name="assemblyFile" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1514"><paramref name="assemblyFile" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-1515">或</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1515">-or-</span></span> 
<span data-ttu-id="d7ccd-1516">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyFile" /> 是用更高版本编译的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1516">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyFile" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1517">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1517">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-1518">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1518">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7ccd-1519"><paramref name="assemblySecurity" /> 不是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1519"><paramref name="assemblySecurity" /> is not <see langword="null" />.</span></span> <span data-ttu-id="d7ccd-1520">未启用旧版 CAS 策略时，<paramref name="assemblySecurity" /> 应为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1520">When legacy CAS policy is not enabled, <paramref name="assemblySecurity" /> should be <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="d7ccd-1521">指定的程序集没有入口点。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1521">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-1522">若要使用的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1522">to load an assembly with evidence.</span></span> <span data-ttu-id="d7ccd-1523">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1523">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="d7ccd-1524">用于读取从文件或目录，以及用于访问路径本身中的信息的访问权限。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1524">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="d7ccd-1525">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1525">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-1526">用于读取不以"file://"开头的 URI。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1526">for reading a URI that does not begin with "file://".</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="d7ccd-1527">若要执行的控制台应用程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1527">to execute a console application.</span></span> <span data-ttu-id="d7ccd-1528">关联枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1528">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExecuteAssemblyByName">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d7ccd-1529">执行程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1529">Executes an assembly.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExecuteAssemblyByName">
      <MemberSignature Language="C#" Value="public int ExecuteAssemblyByName (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteAssemblyByName(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssemblyByName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteAssemblyByName (assemblyName As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteAssemblyByName(System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.ExecuteAssemblyByName : string -&gt; int" Usage="appDomain.ExecuteAssemblyByName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="d7ccd-1530">程序集的显示名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1530">The display name of the assembly.</span></span> <span data-ttu-id="d7ccd-1531">请参阅 <see cref="P:System.Reflection.Assembly.FullName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1531">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1532">在给定其显示名称的情况下执行程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1532">Executes an assembly given its display name.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1533">程序集的入口点返回的值。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1533">The value returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1534"><xref:System.AppDomain.ExecuteAssemblyByName%2A>方法提供了与类似的功能<xref:System.AppDomain.ExecuteAssembly%2A>方法，但指定的程序集的显示名称或<xref:System.Reflection.AssemblyName>而不是按文件位置。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1534">The <xref:System.AppDomain.ExecuteAssemblyByName%2A> method provides similar functionality to the <xref:System.AppDomain.ExecuteAssembly%2A> method, but specifies the assembly by display name or <xref:System.Reflection.AssemblyName> rather than by file location.</span></span> <span data-ttu-id="d7ccd-1535">因此，<xref:System.AppDomain.ExecuteAssemblyByName%2A>加载的程序集<xref:System.Reflection.Assembly.Load%2A>方法而不是与<xref:System.Reflection.Assembly.LoadFile%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1535">Therefore, <xref:System.AppDomain.ExecuteAssemblyByName%2A> loads assemblies with the <xref:System.Reflection.Assembly.Load%2A> method rather than with the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span>  
  
 <span data-ttu-id="d7ccd-1536">程序集开始在.NET Framework 标头中指定的入口点执行。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1536">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="d7ccd-1537">此方法不会创建新的进程或应用程序域，并且它不在新线程上执行的入口点方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1537">This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
 <span data-ttu-id="d7ccd-1538">若要创建<xref:System.AppDomain>若要加载并执行，请使用<xref:System.AppDomain.CreateDomain%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1538">To create the <xref:System.AppDomain> to load and execute, use the <xref:System.AppDomain.CreateDomain%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-1539"><paramref name="assemblyName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1539"><paramref name="assemblyName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-1540">找不到由 <paramref name="assemblyName" /> 指定的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1540">The assembly specified by <paramref name="assemblyName" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-1541">由 <paramref name="assemblyName" /> 指定的程序集不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1541">The assembly specified by <paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-1542">或</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1542">-or-</span></span> 
<span data-ttu-id="d7ccd-1543">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyName" /> 是用更高版本编译的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1543">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1544">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1544">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-1545">找到了由 <paramref name="assemblyName" /> 指定的程序集，但无法加载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1545">The assembly specified by <paramref name="assemblyName" /> was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="d7ccd-1546">指定的程序集没有入口点。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1546">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="d7ccd-1547">用于读取文件或目录，用于对路径本身中的信息的访问和重定向到的路径的显示名称的访问。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1547">for access to read from a file or directory, for access to the information in the path itself, and for redirecting a display name to a path.</span></span> <span data-ttu-id="d7ccd-1548">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1548">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-1549">用于访问网站，显示名称重定向到 URL 时。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1549">for access to a Web site, when a display name is redirected to a URL.</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="d7ccd-1550">若要执行的控制台应用程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1550">to execute a console application.</span></span> <span data-ttu-id="d7ccd-1551">关联枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1551">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
        <altmember cref="T:System.Reflection.AssemblyName" />
        <altmember cref="M:System.Reflection.Assembly.Load(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ExecuteAssemblyByName">
      <MemberSignature Language="C#" Value="public int ExecuteAssemblyByName (System.Reflection.AssemblyName assemblyName, params string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteAssemblyByName(class System.Reflection.AssemblyName assemblyName, string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteAssemblyByName(System::Reflection::AssemblyName ^ assemblyName, ... cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.ExecuteAssemblyByName : System.Reflection.AssemblyName * string[] -&gt; int" Usage="appDomain.ExecuteAssemblyByName (assemblyName, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.Reflection.AssemblyName" />
        <Parameter Name="args" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="d7ccd-1552"><see cref="T:System.Reflection.AssemblyName" /> 对象，表示程序集名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1552">An <see cref="T:System.Reflection.AssemblyName" /> object representing the name of the assembly.</span></span></param>
        <param name="args"><span data-ttu-id="d7ccd-1553">启动该进程时传递的命令行参数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1553">Command-line arguments to pass when starting the process.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1554">根据给定的 <see cref="T:System.Reflection.AssemblyName" /> 使用指定的自变量执行程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1554">Executes the assembly given an <see cref="T:System.Reflection.AssemblyName" />, using the specified arguments.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1555">程序集的入口点返回的值。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1555">The value that is returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1556"><xref:System.AppDomain.ExecuteAssemblyByName%2A>方法提供了与类似的功能<xref:System.AppDomain.ExecuteAssembly%2A>方法，但指定的程序集的显示名称或<xref:System.Reflection.AssemblyName>而不是按文件位置。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1556">The <xref:System.AppDomain.ExecuteAssemblyByName%2A> method provides similar functionality to the <xref:System.AppDomain.ExecuteAssembly%2A> method, but specifies the assembly by display name or <xref:System.Reflection.AssemblyName> rather than by file location.</span></span> <span data-ttu-id="d7ccd-1557">因此，<xref:System.AppDomain.ExecuteAssemblyByName%2A>加载的程序集<xref:System.Reflection.Assembly.Load%2A>方法而不是与<xref:System.Reflection.Assembly.LoadFile%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1557">Therefore, <xref:System.AppDomain.ExecuteAssemblyByName%2A> loads assemblies with the <xref:System.Reflection.Assembly.Load%2A> method rather than with the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span>  
  
 <span data-ttu-id="d7ccd-1558">程序集开始在.NET Framework 标头中指定的入口点执行。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1558">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="d7ccd-1559">此方法不会创建新的进程或应用程序域，并且它不在新线程上执行的入口点方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1559">This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-1560">找不到由 <paramref name="assemblyName" /> 指定的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1560">The assembly specified by <paramref name="assemblyName" /> is not found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-1561">找到了由 <paramref name="assemblyName" /> 指定的程序集，但无法加载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1561">The assembly specified by <paramref name="assemblyName" /> was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-1562">由 <paramref name="assemblyName" /> 指定的程序集不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1562">The assembly specified by <paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-1563">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1563">-or-</span></span> 
 <span data-ttu-id="d7ccd-1564"><paramref name="assemblyName" /> 使用高于当前所加载版本的公共语言运行时版本编译而成。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1564"><paramref name="assemblyName" /> was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1565">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1565">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="d7ccd-1566">指定的程序集没有入口点。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1566">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="d7ccd-1567">用于读取文件或目录，用于对路径本身中的信息的访问和重定向到的路径的显示名称的访问。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1567">for access to read from a file or directory, for access to the information in the path itself, and for redirecting a display name to a path.</span></span> <span data-ttu-id="d7ccd-1568">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1568">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-1569">用于访问网站，显示名称重定向到 URL 时。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1569">for access to a Web site, when a display name is redirected to a URL.</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="d7ccd-1570">若要执行的控制台应用程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1570">to execute a console application.</span></span> <span data-ttu-id="d7ccd-1571">关联枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1571">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAssemblyByName">
      <MemberSignature Language="C#" Value="public int ExecuteAssemblyByName (string assemblyName, System.Security.Policy.Evidence assemblySecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteAssemblyByName(string assemblyName, class System.Security.Policy.Evidence assemblySecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteAssemblyByName (assemblyName As String, assemblySecurity As Evidence) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteAssemblyByName(System::String ^ assemblyName, System::Security::Policy::Evidence ^ assemblySecurity);" />
      <MemberSignature Language="F#" Value="member this.ExecuteAssemblyByName : string * System.Security.Policy.Evidence -&gt; int" Usage="appDomain.ExecuteAssemblyByName (assemblyName, assemblySecurity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of ExecuteAssemblyByName which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="assemblySecurity" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="d7ccd-1572">程序集的显示名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1572">The display name of the assembly.</span></span> <span data-ttu-id="d7ccd-1573">请参阅 <see cref="P:System.Reflection.Assembly.FullName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1573">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="assemblySecurity"><span data-ttu-id="d7ccd-1574">用于加载程序集的证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1574">Evidence for loading the assembly.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1575">在给定显示名称的情况下，使用指定证据执行程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1575">Executes an assembly given its display name, using the specified evidence.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1576">程序集的入口点返回的值。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1576">The value returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1577"><xref:System.AppDomain.ExecuteAssemblyByName%2A>方法提供了与类似的功能<xref:System.AppDomain.ExecuteAssembly%2A>方法，但指定的程序集的显示名称或<xref:System.Reflection.AssemblyName>而不是按文件位置。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1577">The <xref:System.AppDomain.ExecuteAssemblyByName%2A> method provides similar functionality to the <xref:System.AppDomain.ExecuteAssembly%2A> method, but specifies the assembly by display name or <xref:System.Reflection.AssemblyName> rather than by file location.</span></span> <span data-ttu-id="d7ccd-1578">因此，<xref:System.AppDomain.ExecuteAssemblyByName%2A>加载的程序集<xref:System.Reflection.Assembly.Load%2A>方法而不是与<xref:System.Reflection.Assembly.LoadFile%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1578">Therefore, <xref:System.AppDomain.ExecuteAssemblyByName%2A> loads assemblies with the <xref:System.Reflection.Assembly.Load%2A> method rather than with the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span>  
  
 <span data-ttu-id="d7ccd-1579">程序集开始在.NET Framework 标头中指定的入口点执行。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1579">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="d7ccd-1580"><xref:System.AppDomain.ExecuteAssemblyByName%2A>方法不会创建新的进程或应用程序域，并且它不在新线程上执行的入口点方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1580">The <xref:System.AppDomain.ExecuteAssemblyByName%2A> method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7ccd-1581">当你使用<xref:System.AppDomain.ExecuteAssemblyByName%2A>方法替换<xref:System.Security.Policy.Evidence>参数，证据进行合并。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1581">When you use the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged.</span></span> <span data-ttu-id="d7ccd-1582">作为参数提供的证据<xref:System.AppDomain.ExecuteAssemblyByName%2A>方法取代加载程序提供的证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1582">Pieces of evidence supplied as an argument to the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method supersede pieces of evidence supplied by the loader.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-1583"><paramref name="assemblyName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1583"><paramref name="assemblyName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-1584">找不到由 <paramref name="assemblyName" /> 指定的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1584">The assembly specified by <paramref name="assemblyName" /> is not found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-1585">找到了由 <paramref name="assemblyName" /> 指定的程序集，但无法加载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1585">The assembly specified by <paramref name="assemblyName" /> was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-1586">由 <paramref name="assemblyName" /> 指定的程序集不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1586">The assembly specified by <paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-1587">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1587">-or-</span></span> 
<span data-ttu-id="d7ccd-1588">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyName" /> 是用更高版本编译的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1588">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1589">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1589">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="d7ccd-1590">指定的程序集没有入口点。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1590">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="d7ccd-1591">用于读取文件或目录，用于对路径本身中的信息的访问和重定向到的路径的显示名称的访问。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1591">for access to read from a file or directory, for access to the information in the path itself, and for redirecting a display name to a path.</span></span> <span data-ttu-id="d7ccd-1592">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1592">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-1593">若要使用的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1593">to load an assembly with evidence.</span></span> <span data-ttu-id="d7ccd-1594">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1594">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-1595">用于访问网站，显示名称重定向到 URL 时。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1595">for access to a Web site, when a display name is redirected to a URL.</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="d7ccd-1596">若要执行的控制台应用程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1596">to execute a console application.</span></span> <span data-ttu-id="d7ccd-1597">关联枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1597">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
        <altmember cref="T:System.Security.Policy.Evidence" />
      </Docs>
    </Member>
    <Member MemberName="ExecuteAssemblyByName">
      <MemberSignature Language="C#" Value="public int ExecuteAssemblyByName (string assemblyName, params string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteAssemblyByName(string assemblyName, string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteAssemblyByName (assemblyName As String, ParamArray args As String()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteAssemblyByName(System::String ^ assemblyName, ... cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.ExecuteAssemblyByName : string * string[] -&gt; int" Usage="appDomain.ExecuteAssemblyByName (assemblyName, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="args" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="d7ccd-1598">程序集的显示名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1598">The display name of the assembly.</span></span> <span data-ttu-id="d7ccd-1599">请参阅 <see cref="P:System.Reflection.Assembly.FullName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1599">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="args"><span data-ttu-id="d7ccd-1600">启动该进程时传递的命令行参数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1600">Command-line arguments to pass when starting the process.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1601">在给定显示名称的情况下，使用指定自变量执行程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1601">Executes the assembly given its display name, using the specified arguments.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1602">程序集的入口点返回的值。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1602">The value that is returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1603"><xref:System.AppDomain.ExecuteAssemblyByName%2A>方法提供了与类似的功能<xref:System.AppDomain.ExecuteAssembly%2A>方法，但指定的程序集的显示名称或<xref:System.Reflection.AssemblyName>而不是按文件位置。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1603">The <xref:System.AppDomain.ExecuteAssemblyByName%2A> method provides similar functionality to the <xref:System.AppDomain.ExecuteAssembly%2A> method, but specifies the assembly by display name or <xref:System.Reflection.AssemblyName> rather than by file location.</span></span> <span data-ttu-id="d7ccd-1604">因此，<xref:System.AppDomain.ExecuteAssemblyByName%2A>加载的程序集<xref:System.Reflection.Assembly.Load%2A>方法而不是与<xref:System.Reflection.Assembly.LoadFile%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1604">Therefore, <xref:System.AppDomain.ExecuteAssemblyByName%2A> loads assemblies with the <xref:System.Reflection.Assembly.Load%2A> method rather than with the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span>  
  
 <span data-ttu-id="d7ccd-1605">程序集开始在.NET Framework 标头中指定的入口点执行。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1605">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="d7ccd-1606">此方法不会创建新的进程或应用程序域，并且它不在新线程上执行的入口点方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1606">This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-1607"><paramref name="assemblyName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1607"><paramref name="assemblyName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-1608">找不到由 <paramref name="assemblyName" /> 指定的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1608">The assembly specified by <paramref name="assemblyName" /> is not found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-1609">找到了由 <paramref name="assemblyName" /> 指定的程序集，但无法加载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1609">The assembly specified by <paramref name="assemblyName" /> was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-1610">由 <paramref name="assemblyName" /> 指定的程序集不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1610">The assembly specified by <paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-1611">或</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1611">-or-</span></span> 
 <span data-ttu-id="d7ccd-1612"><paramref name="assemblyName" /> 使用高于当前所加载版本的公共语言运行时版本编译而成。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1612"><paramref name="assemblyName" /> was compiled with a later version of the common language runtime than the version that is currently loaded.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1613">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1613">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="d7ccd-1614">指定的程序集没有入口点。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1614">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="d7ccd-1615">用于读取文件或目录，用于对路径本身中的信息的访问和重定向到的路径的显示名称的访问。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1615">for access to read from a file or directory, for access to the information in the path itself, and for redirecting a display name to a path.</span></span> <span data-ttu-id="d7ccd-1616">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1616">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-1617">用于访问网站，显示名称重定向到 URL 时。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1617">for access to a Web site, when a display name is redirected to a URL.</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="d7ccd-1618">若要执行的控制台应用程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1618">to execute a console application.</span></span> <span data-ttu-id="d7ccd-1619">关联枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1619">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ExecuteAssemblyByName">
      <MemberSignature Language="C#" Value="public int ExecuteAssemblyByName (System.Reflection.AssemblyName assemblyName, System.Security.Policy.Evidence assemblySecurity, params string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteAssemblyByName(class System.Reflection.AssemblyName assemblyName, class System.Security.Policy.Evidence assemblySecurity, string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName,System.Security.Policy.Evidence,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteAssemblyByName(System::Reflection::AssemblyName ^ assemblyName, System::Security::Policy::Evidence ^ assemblySecurity, ... cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.ExecuteAssemblyByName : System.Reflection.AssemblyName * System.Security.Policy.Evidence * string[] -&gt; int" Usage="appDomain.ExecuteAssemblyByName (assemblyName, assemblySecurity, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of ExecuteAssemblyByName which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.Reflection.AssemblyName" />
        <Parameter Name="assemblySecurity" Type="System.Security.Policy.Evidence" />
        <Parameter Name="args" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="d7ccd-1620"><see cref="T:System.Reflection.AssemblyName" /> 对象，表示程序集名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1620">An <see cref="T:System.Reflection.AssemblyName" /> object representing the name of the assembly.</span></span></param>
        <param name="assemblySecurity"><span data-ttu-id="d7ccd-1621">用于加载程序集的证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1621">Evidence for loading the assembly.</span></span></param>
        <param name="args"><span data-ttu-id="d7ccd-1622">启动该进程时传递的命令行参数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1622">Command-line arguments to pass when starting the process.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1623">根据给定的 <see cref="T:System.Reflection.AssemblyName" /> 使用指定的证据和实参执行程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1623">Executes the assembly given an <see cref="T:System.Reflection.AssemblyName" />, using the specified evidence and arguments.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1624">程序集的入口点返回的值。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1624">The value returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1625"><xref:System.AppDomain.ExecuteAssemblyByName%2A>方法提供了与类似的功能<xref:System.AppDomain.ExecuteAssembly%2A>方法，但指定的程序集的显示名称或<xref:System.Reflection.AssemblyName>而不是按文件位置。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1625">The <xref:System.AppDomain.ExecuteAssemblyByName%2A> method provides similar functionality to the <xref:System.AppDomain.ExecuteAssembly%2A> method, but specifies the assembly by display name or <xref:System.Reflection.AssemblyName> rather than by file location.</span></span> <span data-ttu-id="d7ccd-1626">因此，<xref:System.AppDomain.ExecuteAssemblyByName%2A>加载的程序集<xref:System.Reflection.Assembly.Load%2A>方法而不是与<xref:System.Reflection.Assembly.LoadFile%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1626">Therefore, <xref:System.AppDomain.ExecuteAssemblyByName%2A> loads assemblies with the <xref:System.Reflection.Assembly.Load%2A> method rather than with the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span>  
  
 <span data-ttu-id="d7ccd-1627">程序集开始在.NET Framework 标头中指定的入口点执行。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1627">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="d7ccd-1628">此方法不会创建新的进程或应用程序域，并且它不在新线程上执行的入口点方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1628">This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7ccd-1629">当你使用<xref:System.AppDomain.ExecuteAssemblyByName%2A>方法替换<xref:System.Security.Policy.Evidence>参数，证据进行合并。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1629">When you use the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged.</span></span> <span data-ttu-id="d7ccd-1630">作为参数提供的证据<xref:System.AppDomain.ExecuteAssemblyByName%2A>方法取代加载程序提供的证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1630">Pieces of evidence supplied as an argument to the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method supersede pieces of evidence supplied by the loader.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-1631">找不到由 <paramref name="assemblyName" /> 指定的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1631">The assembly specified by <paramref name="assemblyName" /> is not found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-1632">找到了由 <paramref name="assemblyName" /> 指定的程序集，但无法加载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1632">The assembly specified by <paramref name="assemblyName" /> was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-1633">由 <paramref name="assemblyName" /> 指定的程序集不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1633">The assembly specified by <paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-1634">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1634">-or-</span></span> 
<span data-ttu-id="d7ccd-1635">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyName" /> 是用更高版本编译的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1635">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1636">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1636">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7ccd-1637"><paramref name="assemblySecurity" /> 不是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1637"><paramref name="assemblySecurity" /> is not <see langword="null" />.</span></span> <span data-ttu-id="d7ccd-1638">未启用旧版 CAS 策略时，<paramref name="assemblySecurity" /> 应为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1638">When legacy CAS policy is not enabled, <paramref name="assemblySecurity" /> should be <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="d7ccd-1639">指定的程序集没有入口点。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1639">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="d7ccd-1640">用于读取文件或目录，用于对路径本身中的信息的访问和重定向到的路径的显示名称的访问。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1640">for access to read from a file or directory, for access to the information in the path itself, and for redirecting a display name to a path.</span></span> <span data-ttu-id="d7ccd-1641">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1641">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-1642">若要使用的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1642">to load an assembly with evidence.</span></span> <span data-ttu-id="d7ccd-1643">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1643">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-1644">用于访问网站，显示名称重定向到 URL 时。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1644">for access to a Web site, when a display name is redirected to a URL.</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="d7ccd-1645">若要执行的控制台应用程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1645">to execute a console application.</span></span> <span data-ttu-id="d7ccd-1646">关联枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1646">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
        <altmember cref="T:System.Security.Policy.Evidence" />
      </Docs>
    </Member>
    <Member MemberName="ExecuteAssemblyByName">
      <MemberSignature Language="C#" Value="public int ExecuteAssemblyByName (string assemblyName, System.Security.Policy.Evidence assemblySecurity, params string[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteAssemblyByName(string assemblyName, class System.Security.Policy.Evidence assemblySecurity, string[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteAssemblyByName (assemblyName As String, assemblySecurity As Evidence, ParamArray args As String()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteAssemblyByName(System::String ^ assemblyName, System::Security::Policy::Evidence ^ assemblySecurity, ... cli::array &lt;System::String ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.ExecuteAssemblyByName : string * System.Security.Policy.Evidence * string[] -&gt; int" Usage="appDomain.ExecuteAssemblyByName (assemblyName, assemblySecurity, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of ExecuteAssemblyByName which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="assemblySecurity" Type="System.Security.Policy.Evidence" />
        <Parameter Name="args" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="d7ccd-1647">程序集的显示名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1647">The display name of the assembly.</span></span> <span data-ttu-id="d7ccd-1648">请参阅 <see cref="P:System.Reflection.Assembly.FullName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1648">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="assemblySecurity"><span data-ttu-id="d7ccd-1649">用于加载程序集的证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1649">Evidence for loading the assembly.</span></span></param>
        <param name="args"><span data-ttu-id="d7ccd-1650">启动该进程时传递的命令行参数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1650">Command-line arguments to pass when starting the process.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1651">在给定其显示名称的情况下，使用指定证据和自变量执行程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1651">Executes the assembly given its display name, using the specified evidence and arguments.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1652">程序集的入口点返回的值。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1652">The value returned by the entry point of the assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1653"><xref:System.AppDomain.ExecuteAssemblyByName%2A>方法提供了与类似的功能<xref:System.AppDomain.ExecuteAssembly%2A>方法，但指定的程序集的显示名称或<xref:System.Reflection.AssemblyName>而不是按文件位置。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1653">The <xref:System.AppDomain.ExecuteAssemblyByName%2A> method provides similar functionality to the <xref:System.AppDomain.ExecuteAssembly%2A> method, but specifies the assembly by display name or <xref:System.Reflection.AssemblyName> rather than by file location.</span></span> <span data-ttu-id="d7ccd-1654">因此，<xref:System.AppDomain.ExecuteAssemblyByName%2A>加载的程序集<xref:System.Reflection.Assembly.Load%2A>方法而不是与<xref:System.Reflection.Assembly.LoadFile%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1654">Therefore, <xref:System.AppDomain.ExecuteAssemblyByName%2A> loads assemblies with the <xref:System.Reflection.Assembly.Load%2A> method rather than with the <xref:System.Reflection.Assembly.LoadFile%2A> method.</span></span>  
  
 <span data-ttu-id="d7ccd-1655">程序集开始在.NET Framework 标头中指定的入口点执行。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1655">The assembly begins executing at the entry point specified in the .NET Framework header.</span></span>  
  
 <span data-ttu-id="d7ccd-1656">此方法不会创建新的进程或应用程序域，并且它不在新线程上执行的入口点方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1656">This method does not create a new process or application domain, and it does not execute the entry point method on a new thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7ccd-1657">当你使用<xref:System.AppDomain.ExecuteAssemblyByName%2A>方法替换<xref:System.Security.Policy.Evidence>参数，证据进行合并。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1657">When you use the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged.</span></span> <span data-ttu-id="d7ccd-1658">作为参数提供的证据<xref:System.AppDomain.ExecuteAssemblyByName%2A>方法取代加载程序提供的证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1658">Pieces of evidence supplied as an argument to the <xref:System.AppDomain.ExecuteAssemblyByName%2A> method supersede pieces of evidence supplied by the loader.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-1659"><paramref name="assemblyName" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1659"><paramref name="assemblyName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-1660">找不到由 <paramref name="assemblyName" /> 指定的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1660">The assembly specified by <paramref name="assemblyName" /> is not found.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-1661">找到了由 <paramref name="assemblyName" /> 指定的程序集，但无法加载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1661">The assembly specified by <paramref name="assemblyName" /> was found, but could not be loaded.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-1662">由 <paramref name="assemblyName" /> 指定的程序集不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1662">The assembly specified by <paramref name="assemblyName" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-1663">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1663">-or-</span></span> 
<span data-ttu-id="d7ccd-1664">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyName" /> 是用更高版本编译的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1664">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyName" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1665">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1665">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7ccd-1666"><paramref name="assemblySecurity" /> 不是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1666"><paramref name="assemblySecurity" /> is not <see langword="null" />.</span></span> <span data-ttu-id="d7ccd-1667">未启用旧版 CAS 策略时，<paramref name="assemblySecurity" /> 应为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1667">When legacy CAS policy is not enabled, <paramref name="assemblySecurity" /> should be <see langword="null" />.</span></span></exception>
        <exception cref="T:System.MissingMethodException"><span data-ttu-id="d7ccd-1668">指定的程序集没有入口点。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1668">The specified assembly has no entry point.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="d7ccd-1669">用于读取文件或目录，用于对路径本身中的信息的访问和重定向到的路径的显示名称的访问。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1669">for access to read from a file or directory, for access to the information in the path itself, and for redirecting a display name to a path.</span></span> <span data-ttu-id="d7ccd-1670">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1670">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-1671">若要使用的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1671">to load an assembly with evidence.</span></span> <span data-ttu-id="d7ccd-1672">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1672">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-1673">用于访问网站，显示名称重定向到 URL 时。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1673">for access to a Web site, when a display name is redirected to a URL.</span></span></permission>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="d7ccd-1674">若要执行的控制台应用程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1674">to execute a console application.</span></span> <span data-ttu-id="d7ccd-1675">关联枚举：<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1675">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span></span></permission>
        <altmember cref="T:System.Security.Policy.Evidence" />
      </Docs>
    </Member>
    <Member MemberName="FirstChanceException">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs&gt; FirstChanceException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs&gt; FirstChanceException" />
      <MemberSignature Language="DocId" Value="E:System.AppDomain.FirstChanceException" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FirstChanceException As EventHandler(Of FirstChanceExceptionEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Runtime::ExceptionServices::FirstChanceExceptionEventArgs ^&gt; ^ FirstChanceException;" />
      <MemberSignature Language="F#" Value="member this.FirstChanceException : EventHandler&lt;System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs&gt; " Usage="member this.FirstChanceException : System.EventHandler&lt;System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7ccd-1676">当托管代码抛出异常时发生，在运行时在调用堆栈中搜索应用程序域中的异常处理程序之前。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1676">Occurs when an exception is thrown in managed code, before the runtime searches the call stack for an exception handler in the application domain.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1677">此事件只是一个通知。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1677">This event is only a notification.</span></span> <span data-ttu-id="d7ccd-1678">处理此事件不处理该异常也会影响后续异常以任何方式处理。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1678">Handling this event does not handle the exception or affect subsequent exception handling in any way.</span></span> <span data-ttu-id="d7ccd-1679">引发该事件并在调用事件处理程序后，公共语言运行时 (CLR) 开始搜索异常处理程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1679">After the event has been raised and event handlers have been invoked, the common language runtime (CLR) begins to search for a handler for the exception.</span></span> <span data-ttu-id="d7ccd-1680"><xref:System.AppDomain.FirstChanceException> 第一次机会检查任何托管的异常中提供的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1680"><xref:System.AppDomain.FirstChanceException> provides the application domain with a first chance to examine any managed exception.</span></span>  
  
 <span data-ttu-id="d7ccd-1681">可以针对每个应用程序域处理此事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1681">The event can be handled per application domain.</span></span> <span data-ttu-id="d7ccd-1682">如果一个线程在执行调用时通过多个应用程序域，CLR 开始搜索匹配的异常处理程序在该应用程序域之前已注册事件处理程序，每个应用程序域中引发事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1682">If a thread passes through multiple application domains while executing a call, the event is raised in each application domain that has registered an event handler, before the CLR begins searching for a matching exception handler in that application domain.</span></span> <span data-ttu-id="d7ccd-1683">处理该事件后，为该应用程序域中匹配的异常处理程序进行搜索。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1683">After the event has been handled, a search is made for a matching exception handler in that application domain.</span></span> <span data-ttu-id="d7ccd-1684">如果找不到下, 一步的应用程序域中引发事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1684">If none is found, the event is raised in the next application domain.</span></span>  
  
 <span data-ttu-id="d7ccd-1685">必须处理发生在事件处理程序的所有异常<xref:System.AppDomain.FirstChanceException>事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1685">You must handle all exceptions that occur in the event handler for the <xref:System.AppDomain.FirstChanceException> event.</span></span> <span data-ttu-id="d7ccd-1686">否则为<xref:System.AppDomain.FirstChanceException>引发以递归方式。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1686">Otherwise, <xref:System.AppDomain.FirstChanceException> is raised recursively.</span></span> <span data-ttu-id="d7ccd-1687">这可能导致堆栈溢出和终止应用程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1687">This could result in a stack overflow and termination of the application.</span></span> <span data-ttu-id="d7ccd-1688">我们建议你实现此事件的事件处理程序为受约束的执行区域 (Cer)，以防止与基础结构相关的异常，例如内存不足或堆栈溢出异常通知时，会影响虚拟机正在处理。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1688">We recommend that you implement event handlers for this event as constrained execution regions (CERs), to keep infrastructure-related exceptions such as out-of-memory or stack overflow from affecting the virtual machine while the exception notification is being processed.</span></span>  
  
 <span data-ttu-id="d7ccd-1689">此事件不引发的异常指示损坏进程状态，例如，访问冲突，除非事件处理程序是安全关键的并且具有<xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute>属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1689">This event is not raised for exceptions that indicate corruption of process state, such as access violations, unless the event handler is security-critical and has the <xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute> attribute.</span></span>  
  
 <span data-ttu-id="d7ccd-1690">正在处理此通知事件时，公共语言运行时将挂起线程中止。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1690">The common language runtime suspends thread aborts while this notification event is being handled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-1691">下面的示例创建名为应用程序域的一系列`AD0`通过`AD3`，使用`Worker`每个应用程序域中的对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1691">The following example creates a series of application domains named `AD0` through `AD3`, with a `Worker` object in each application domain.</span></span> <span data-ttu-id="d7ccd-1692">每个`Worker`对象具有对引用`Worker`对象在下一步的应用程序域中，除`Worker`最后一个应用程序域中。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1692">Each `Worker` object has a reference to the `Worker` object in the next application domain, except for the `Worker` in the last application domain.</span></span> <span data-ttu-id="d7ccd-1693"><xref:System.AppDomain.FirstChanceException>以外的所有应用程序域中处理事件`AD1`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1693">The <xref:System.AppDomain.FirstChanceException> event is handled in all application domains except `AD1`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7ccd-1694">除了此示例中，该示例演示了多个应用程序域中的第一次异常通知，您可以发现中的简单用例[如何：接收首次异常通知](~/docs/framework/app-domains/how-to-receive-first-chance-exception-notifications.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1694">In addition to this example, which demonstrates first-chance exception notifications in multiple application domains, you can find simple use cases in [How to: Receive First-Chance Exception Notifications](~/docs/framework/app-domains/how-to-receive-first-chance-exception-notifications.md).</span></span>  
  
 <span data-ttu-id="d7ccd-1695">当已创建应用程序域时，默认应用程序域调用`TestException`方法的第一个应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1695">When the application domains have been created, the default application domain calls the `TestException` method for the first application domain.</span></span> <span data-ttu-id="d7ccd-1696">每个`Worker`对象调用`TestException`方法下一步的应用程序域，直到最后一个`Worker`引发的异常处理的或未经处理的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1696">Each `Worker` object calls the `TestException` method for the next application domain, until the last `Worker` throws an exception that is either handled or unhandled.</span></span> <span data-ttu-id="d7ccd-1697">因此，当前线程通过所有应用程序域和`TestException`添加到每个应用程序域中的堆栈。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1697">Thus, the current thread passes through all the application domains, and `TestException` is added to the stack in each application domain.</span></span>  
  
 <span data-ttu-id="d7ccd-1698">当最后一个`Worker`对象处理异常，<xref:System.AppDomain.FirstChanceException>仅在最后一个应用程序域中引发事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1698">When the last `Worker` object handles the exception, the <xref:System.AppDomain.FirstChanceException> event is raised only in the last application domain.</span></span> <span data-ttu-id="d7ccd-1699">其他应用程序域永远不会有机会处理异常，因此不会引发事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1699">The other application domains never get a chance to handle the exception, so the event is not raised.</span></span>  
  
 <span data-ttu-id="d7ccd-1700">当最后一个`Worker`对象不处理异常，<xref:System.AppDomain.FirstChanceException>具有事件处理程序的每个应用程序域中引发事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1700">When the last `Worker` object does not handle the exception, the <xref:System.AppDomain.FirstChanceException> event is raised in each application domain that has an event handler.</span></span> <span data-ttu-id="d7ccd-1701">每个事件处理程序完成后，堆栈将继续展开，直到通过默认应用程序域中捕获的异常。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1701">After each event handler has finished, the stack continues to unwind until the exception is caught by the default application domain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7ccd-1702">若要查看堆栈显示如更接近引发该事件的增长和更接近于默认应用程序域，请更改`e.Exception.Message`到`e.Exception`中`FirstChanceHandler`事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1702">To see how the stack display grows as the event is raised closer and closer to the default application domain, change `e.Exception.Message` to `e.Exception` in the `FirstChanceHandler` event handlers.</span></span> <span data-ttu-id="d7ccd-1703">请注意，当`TestException`调用跨应用程序域边界，它会出现两次： 一次为代理和存根 （stub） 的一次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1703">Notice that when `TestException` is called across application domain boundaries, it appears twice: once for the proxy and once for the stub.</span></span>  
  
 [!code-csharp[System.AppDomain.FirstChanceException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.appdomain.firstchanceexception/cs/example.cs#1)]
 [!code-vb[System.AppDomain.FirstChanceException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.appdomain.firstchanceexception/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="d7ccd-1704">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1704">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="d7ccd-1705">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1705">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="T:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs" />
        <altmember cref="E:System.AppDomain.UnhandledException" />
        <related type="Article" href="https://msdn.microsoft.com/library/66f002b8-a97d-4a6e-a503-2cec01689113"><span data-ttu-id="d7ccd-1706">如何：接收第一机会异常通知</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1706">How to: Receive First-Chance Exception Notifications</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FriendlyName">
      <MemberSignature Language="C#" Value="public string FriendlyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FriendlyName" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.FriendlyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FriendlyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FriendlyName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FriendlyName : string" Usage="System.AppDomain.FriendlyName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System._AppDomain.FriendlyName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7ccd-1707">获取此应用程序域的友好名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1707">Gets the friendly name of this application domain.</span></span></summary>
        <value><span data-ttu-id="d7ccd-1708">此应用程序域的友好名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1708">The friendly name of this application domain.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1709">默认应用程序域的友好名称是进程可执行文件的文件名。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1709">The friendly name of the default application domain is the file name of the process executable.</span></span> <span data-ttu-id="d7ccd-1710">例如，如果用于启动进程可执行文件是`"c:\MyAppDirectory\MyAssembly.exe"`，默认应用程序域的友好名称是`"MyAssembly.exe"`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1710">For example, if the executable used to start the process is `"c:\MyAppDirectory\MyAssembly.exe"`, the friendly name of the default application domain is `"MyAssembly.exe"`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-1711">下面的代码示例使用<xref:System.AppDomain.FriendlyName%2A>属性来获取当前应用程序域的友好名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1711">The following code example uses the <xref:System.AppDomain.FriendlyName%2A> property to get the friendly name of the current application domain.</span></span> <span data-ttu-id="d7ccd-1712">对于默认应用程序域，友好名称是应用程序的可执行文件的名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1712">For the default application domain, the friendly name is the name of the application's executable file.</span></span> <span data-ttu-id="d7ccd-1713">代码示例还显示有关应用程序域的其他信息。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1713">The code example also displays additional information about the application domain.</span></span>  
  
 [!code-cpp[ADApplicationBase#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADApplicationBase/CPP/adapplicationbase.cpp#1)]
 [!code-csharp[ADApplicationBase#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADApplicationBase/CS/adapplicationbase.cs#1)]
 [!code-vb[ADApplicationBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADApplicationBase/VB/adapplicationbase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1714">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1714">The operation is attempted on an unloaded application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetAssemblies">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly[] GetAssemblies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Assembly[] GetAssemblies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.GetAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAssemblies () As Assembly()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Reflection::Assembly ^&gt; ^ GetAssemblies();" />
      <MemberSignature Language="F#" Value="abstract member GetAssemblies : unit -&gt; System.Reflection.Assembly[]&#xA;override this.GetAssemblies : unit -&gt; System.Reflection.Assembly[]" Usage="appDomain.GetAssemblies " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.GetAssemblies</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d7ccd-1715">获取已加载到此应用程序域的执行上下文中的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1715">Gets the assemblies that have been loaded into the execution context of this application domain.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1716">此应用程序域中的程序集的数组。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1716">An array of assemblies in this application domain.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d7ccd-1717">下面的代码示例使用<xref:System.AppDomain.GetAssemblies%2A>方法以获取已加载到应用程序域的所有程序集的列表。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1717">The following code example uses the <xref:System.AppDomain.GetAssemblies%2A> method to get a list of all assemblies that have been loaded into the application domain.</span></span> <span data-ttu-id="d7ccd-1718">程序集将显示到控制台。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1718">The assemblies are then displayed to the console.</span></span>  
  
 <span data-ttu-id="d7ccd-1719">若要运行此代码示例，需要创建名为程序集`CustomLibrary.dll`，或更改程序集名称传递给<xref:System.AppDomain.GetAssemblies%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1719">To run this code example, you need to create an assembly named `CustomLibrary.dll`, or change the assembly name that is passed to the <xref:System.AppDomain.GetAssemblies%2A> method.</span></span>  
  
 [!code-cpp[ADGetAssemblies#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADGetAssemblies/CPP/adgetassemblies.cpp#1)]
 [!code-csharp[ADGetAssemblies#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADGetAssemblies/CS/adgetassemblies.cs#1)]
 [!code-vb[ADGetAssemblies#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADGetAssemblies/VB/adgetassemblies.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1720">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1720">The operation is attempted on an unloaded application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentThreadId">
      <MemberSignature Language="C#" Value="public static int GetCurrentThreadId ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetCurrentThreadId() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.GetCurrentThreadId" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCurrentThreadId () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetCurrentThreadId();" />
      <MemberSignature Language="F#" Value="static member GetCurrentThreadId : unit -&gt; int" Usage="System.AppDomain.GetCurrentThreadId " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("AppDomain.GetCurrentThreadId has been deprecated because it does not provide a stable Id when managed threads are running on fibers (aka lightweight threads). To get a stable identifier for a managed thread, use the ManagedThreadId property on Thread.'")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("AppDomain.GetCurrentThreadId has been deprecated because it does not provide a stable Id when managed threads are running on fibers (aka lightweight threads). To get a stable identifier for a managed thread, use the ManagedThreadId property on Thread.  http://go.microsoft.com/fwlink/?linkid=14202", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d7ccd-1721">获取当前线程标识符。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1721">Gets the current thread identifier.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1722">一个 32 位带符号整数，它是当前线程的标识符。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1722">A 32-bit signed integer that is the identifier of the current thread.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1723">使用<xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType>属性，它是稳定甚至.NET Framework 托管通过支持纤程 （即，轻量级线程） 的环境。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1723">Use the <xref:System.Threading.Thread.ManagedThreadId%2A?displayProperty=nameWithType> property, which is stable even when the .NET Framework is hosted by an environment that supports fibers (that is, lightweight threads).</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-1724">若要调用此方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1724">to call this method.</span></span> <span data-ttu-id="d7ccd-1725">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1725">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span> <span data-ttu-id="d7ccd-1726">安全操作： <see cref="F:System.Security.Permissions.SecurityAction.Demand" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1726">Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</span></span></permission>
        <altmember cref="T:System.Int32" />
        <altmember cref="P:System.Threading.Thread.ManagedThreadId" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetData(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string -&gt; obj&#xA;override this.GetData : string -&gt; obj" Usage="appDomain.GetData name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.GetData(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="d7ccd-1727">预定义应用程序域属性的名称，或已定义的应用程序域属性的名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1727">The name of a predefined application domain property, or the name of an application domain property you have defined.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1728">为指定名称获取存储在当前应用程序域中的值。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1728">Gets the value stored in the current application domain for the specified name.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1729"><paramref name="name" /> 属性的值，或 <see langword="null" />（如果属性不存在）。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1729">The value of the <paramref name="name" /> property, or <see langword="null" /> if the property does not exist.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1730">此方法用于检索名称数据对描述此实例的属性的内部缓存中的条目的值<xref:System.AppDomain>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1730">Use this method to retrieve the value of an entry in an internal cache of name-data pairs that describe properties of this instance of <xref:System.AppDomain>.</span></span> <span data-ttu-id="d7ccd-1731">请注意，比较`name`键-值对的名称是区分大小写。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1731">Note that the comparison of `name` with the name of key-value pairs is case-sensitive.</span></span>  
  
 <span data-ttu-id="d7ccd-1732">该缓存自动包含预定义的系统项的创建应用程序域时插入。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1732">The cache automatically contains predefined system entries that are inserted when the application domain is created.</span></span> <span data-ttu-id="d7ccd-1733">您可以检查它们的值与<xref:System.AppDomain.GetData%2A>方法或等效<xref:System.AppDomainSetup>属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1733">You can inspect their values with the <xref:System.AppDomain.GetData%2A> method, or the equivalent <xref:System.AppDomainSetup> properties.</span></span>  
  
 <span data-ttu-id="d7ccd-1734">可以插入或修改与自己用户定义名称数据对<xref:System.AppDomain.SetData%2A>方法，并检查其值与<xref:System.AppDomain.GetData%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1734">You can insert or modify your own user defined name-data pairs with the <xref:System.AppDomain.SetData%2A> method and inspect their values with the <xref:System.AppDomain.GetData%2A> method.</span></span>  
  
 <span data-ttu-id="d7ccd-1735">下表描述了`name`每个预定义的系统入口和其对应<xref:System.AppDomainSetup>属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1735">The following table describes the `name` of each predefined system entry and its corresponding <xref:System.AppDomainSetup> property.</span></span>  
  
|<span data-ttu-id="d7ccd-1736">Name 的值</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1736">Value of 'name'</span></span>|<span data-ttu-id="d7ccd-1737">属性</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1737">Property</span></span>|  
|---------------------|--------------|  
|<span data-ttu-id="d7ccd-1738">"APPBASE"</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1738">"APPBASE"</span></span>|<xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="d7ccd-1739">"APP_CONFIG_FILE"</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1739">"APP_CONFIG_FILE"</span></span>|<xref:System.AppDomainSetup.ConfigurationFile%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="d7ccd-1740">"APP_LAUNCH_URL"</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1740">"APP_LAUNCH_URL"</span></span>|<span data-ttu-id="d7ccd-1741">（无属性）</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1741">(no property)</span></span><br /><br /> <span data-ttu-id="d7ccd-1742">"APP_LAUNCH_URL"表示之前的任何重定向,，用户最初请求的 URL。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1742">"APP_LAUNCH_URL" represents the URL originally requested by the user, before any redirection.</span></span> <span data-ttu-id="d7ccd-1743">仅当已使用 Internet Explorer 等浏览器启动了应用程序时，它是可用。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1743">It is available only when the application has been launched with a browser such as Internet Explorer.</span></span> <span data-ttu-id="d7ccd-1744">并非所有浏览器提供此值。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1744">Not all browsers provide this value.</span></span>|  
|<span data-ttu-id="d7ccd-1745">"A P P _"</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1745">"APP_NAME"</span></span>|<xref:System.AppDomainSetup.ApplicationName%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="d7ccd-1746">"BINPATH_PROBE_ONLY"</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1746">"BINPATH_PROBE_ONLY"</span></span>|<xref:System.AppDomainSetup.PrivateBinPathProbe%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="d7ccd-1747">"CACHE_BASE"</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1747">"CACHE_BASE"</span></span>|<xref:System.AppDomainSetup.CachePath%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="d7ccd-1748">"CODE_DOWNLOAD_DISABLED"</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1748">"CODE_DOWNLOAD_DISABLED"</span></span>|<xref:System.AppDomainSetup.DisallowCodeDownload%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="d7ccd-1749">"DEV_PATH"</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1749">"DEV_PATH"</span></span>|<span data-ttu-id="d7ccd-1750">（无属性）</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1750">(no property)</span></span>|  
|<span data-ttu-id="d7ccd-1751">"DISALLOW_APP"</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1751">"DISALLOW_APP"</span></span>|<xref:System.AppDomainSetup.DisallowPublisherPolicy%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="d7ccd-1752">"DISALLOW_APP_BASE_PROBING"</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1752">"DISALLOW_APP_BASE_PROBING"</span></span>|<xref:System.AppDomainSetup.DisallowApplicationBaseProbing%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="d7ccd-1753">"DISALLOW_APP_REDIRECTS"</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1753">"DISALLOW_APP_REDIRECTS"</span></span>|<xref:System.AppDomainSetup.DisallowBindingRedirects%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="d7ccd-1754">"DYNAMIC_BASE"</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1754">"DYNAMIC_BASE"</span></span>|<xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="d7ccd-1755">"FORCE_CACHE_INSTALL"</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1755">"FORCE_CACHE_INSTALL"</span></span>|<xref:System.AppDomainSetup.ShadowCopyFiles%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="d7ccd-1756">"LICENSE_FILE"或特定于应用程序的字符串</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1756">"LICENSE_FILE", or an application-specific string</span></span>|<xref:System.AppDomainSetup.LicenseFile%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="d7ccd-1757">"LOADER_OPTIMIZATION"</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1757">"LOADER_OPTIMIZATION"</span></span>|<xref:System.AppDomainSetup.LoaderOptimization%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="d7ccd-1758">"LOCATION_URI"</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1758">"LOCATION_URI"</span></span>|<span data-ttu-id="d7ccd-1759">（无属性）</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1759">(no property)</span></span>|  
|<span data-ttu-id="d7ccd-1760">"PRIVATE_BINPATH"</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1760">"PRIVATE_BINPATH"</span></span>|<xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=nameWithType>|  
|<span data-ttu-id="d7ccd-1761">"REGEX_DEFAULT_MATCH_TIMEOUT"</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1761">"REGEX_DEFAULT_MATCH_TIMEOUT"</span></span>|<xref:System.Text.RegularExpressions.Regex.MatchTimeout%2A?displayProperty=nameWithType><br /><br /> <span data-ttu-id="d7ccd-1762">"REGEX_DEFAULT_MATCH_TIMEOUT"不是系统条目，并且其值可通过调用设置<xref:System.AppDomain.SetData%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1762">"REGEX_DEFAULT_MATCH_TIMEOUT" is not a system entry, and its value can be set by calling the <xref:System.AppDomain.SetData%2A> method.</span></span>|  
|<span data-ttu-id="d7ccd-1763">"SHADOW_COPY_DIRS"</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1763">"SHADOW_COPY_DIRS"</span></span>|<xref:System.AppDomainSetup.ShadowCopyDirectories%2A?displayProperty=nameWithType>|  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-1764">下面的示例创建一个新的应用程序域，设置在域中的系统提供值并将域的新值对。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1764">The following example creates a new application domain, sets a system-provided value for the domain, and adds a new value pair for the domain.</span></span> <span data-ttu-id="d7ccd-1765">该示例然后演示如何使用<xref:System.AppDomain.GetData%2A>方法以从这些值对检索数据并将其显示到控制台。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1765">The example then demonstrates how to use the <xref:System.AppDomain.GetData%2A> method to retrieve the data from these value pairs and display them to the console.</span></span>  
  
 [!code-cpp[ADGetData#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADGetData/CPP/adgetdata.cpp#1)]
 [!code-csharp[ADGetData#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADGetData/CS/adgetdata.cs#1)]
 [!code-vb[ADGetData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADGetData/VB/adgetdata.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-1766"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1766"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1767">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1767">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="d7ccd-1768">用于访问路径本身，如果该属性适用于路径中的信息。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1768">for access to the information in the path itself, if the property applies to a path.</span></span> <span data-ttu-id="d7ccd-1769">关联枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1769">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <altmember cref="M:System.AppDomain.SetData(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType();" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="appDomain.GetType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d7ccd-1770">获取当前实例的类型。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1770">Gets the type of the current instance.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1771">当前实例的类型。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1771">The type of the current instance.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public int Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Id" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Id { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : int" Usage="System.AppDomain.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7ccd-1772">获得一个整数，该整数唯一标识进程中的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1772">Gets an integer that uniquely identifies the application domain within the process.</span></span></summary>
        <value><span data-ttu-id="d7ccd-1773">标识应用程序域的整数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1773">An integer that identifies the application domain.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d7ccd-1774">下面的代码示例创建第二个应用程序域，并显示的默认域和新的域有关的信息。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1774">The following code example creates a second application domain and displays information about the default domain and the new domain.</span></span>  
  
 [!code-cpp[System.AppDomain.IsDefaultAppDomain#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.AppDomain.IsDefaultAppDomain/CPP/System.AppDomain.IsDefaultAppDomain.cpp#1)]
 [!code-csharp[System.AppDomain.IsDefaultAppDomain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.AppDomain.IsDefaultAppDomain/CS/source.cs#1)]
 [!code-vb[System.AppDomain.IsDefaultAppDomain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.AppDomain.IsDefaultAppDomain/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeLifetimeService">
      <MemberSignature Language="C#" Value="public override object InitializeLifetimeService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object InitializeLifetimeService() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.InitializeLifetimeService" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function InitializeLifetimeService () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ InitializeLifetimeService();" />
      <MemberSignature Language="F#" Value="override this.InitializeLifetimeService : unit -&gt; obj" Usage="appDomain.InitializeLifetimeService " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.InitializeLifetimeService</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d7ccd-1775">通过防止创建租约来给予 <see cref="T:System.AppDomain" /> 无限生存期。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1775">Gives the <see cref="T:System.AppDomain" /> an infinite lifetime by preventing a lease from being created.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1776">总是为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1776">Always <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1777">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1777">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="d7ccd-1778">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1778">requires full trust for the immediate caller.</span></span> <span data-ttu-id="d7ccd-1779">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1779">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="IsCompatibilitySwitchSet">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; IsCompatibilitySwitchSet (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Nullable`1&lt;bool&gt; IsCompatibilitySwitchSet(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.IsCompatibilitySwitchSet(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsCompatibilitySwitchSet (value As String) As Nullable(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Nullable&lt;bool&gt; IsCompatibilitySwitchSet(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.IsCompatibilitySwitchSet : string -&gt; Nullable&lt;bool&gt;" Usage="appDomain.IsCompatibilitySwitchSet value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d7ccd-1780">要测试的兼容性开关。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1780">The compatibility switch to test.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1781">获取可以为 null 的布尔值，该值指示是否设置了任何兼容性开关，如果已设置，则指定是否设置了指定的兼容性开关。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1781">Gets a nullable Boolean value that indicates whether any compatibility switches are set, and if so, whether the specified compatibility switch is set.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1782">如果未设置任何兼容性开关，则为 null 引用（Visual Basic 中的 <see langword="Nothing" />）；否则，为布尔值，指示是否设置了由 <paramref name="value" /> 指定的兼容性开关。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1782">A null reference (<see langword="Nothing" /> in Visual Basic) if no compatibility switches are set; otherwise, a Boolean value that indicates whether the compatibility switch that is specified by <paramref name="value" /> is set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1783">此方法测试是否已为当前应用程序域中设置指定兼容性开关。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1783">This method tests whether the specified compatibility switch has been set for the current application domain.</span></span> <span data-ttu-id="d7ccd-1784">兼容性开关通常还原行为 （例如，字符串的方式进行排序） 的.NET Framework 版本之间已更改。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1784">Compatibility switches typically restore a behavior (such as the way strings are sorted) that was changed between versions of the .NET Framework.</span></span>  <span data-ttu-id="d7ccd-1785">它们由调用设置<xref:System.AppDomainSetup.SetCompatibilitySwitches%2A?displayProperty=nameWithType>方法，然后再创建一个应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1785">They are set by calling the <xref:System.AppDomainSetup.SetCompatibilitySwitches%2A?displayProperty=nameWithType> method before creating an application domain.</span></span>  
  
 <span data-ttu-id="d7ccd-1786">下表提供了兼容性开关，可设置为还原的早期版本的.NET Framework 的行为的示例。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1786">The following table provides examples of compatibility switches that can be set to restore the behavior of earlier versions of the .NET Framework.</span></span>  
  
|<span data-ttu-id="d7ccd-1787">开关</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1787">Switch</span></span>|<span data-ttu-id="d7ccd-1788">含义</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1788">Meaning</span></span>|  
|------------|-------------|  
|<span data-ttu-id="d7ccd-1789">"NetFx40_LegacySecurityPolicy"</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1789">"NetFx40_LegacySecurityPolicy"</span></span>|<span data-ttu-id="d7ccd-1790">有关代码访问安全性 (CAS)[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]启用此应用程序域中。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1790">Code access security (CAS) for the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] is enabled in this application domain.</span></span> <span data-ttu-id="d7ccd-1791">请参阅[ &lt;NetFx40_LegacySecurityPolicy&gt;元素](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1791">See [&lt;NetFx40_LegacySecurityPolicy&gt; Element](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md).</span></span>|  
|<span data-ttu-id="d7ccd-1792">"NetFx40_Legacy20SortingBehavior"</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1792">"NetFx40_Legacy20SortingBehavior"</span></span>|<span data-ttu-id="d7ccd-1793">字符串排序的默认值[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]在此应用程序域中启用。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1793">String sorting defaults for the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] are enabled in this application domain.</span></span> <span data-ttu-id="d7ccd-1794">它成功要求 sort00001000.dll 安装。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1794">Its success requires sort00001000.dll to be installed.</span></span> <span data-ttu-id="d7ccd-1795">请参阅[ &lt;CompatSortNLSVersion&gt;元素](~/docs/framework/configure-apps/file-schema/runtime/compatsortnlsversion-element.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1795">See [&lt;CompatSortNLSVersion&gt; Element](~/docs/framework/configure-apps/file-schema/runtime/compatsortnlsversion-element.md).</span></span>|  
|<span data-ttu-id="d7ccd-1796">"NetFx40_Legacy40SortingBehavior"</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1796">"NetFx40_Legacy40SortingBehavior"</span></span>|<span data-ttu-id="d7ccd-1797">字符串排序的默认值[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]，并且在此应用程序域中启用 Unicode 5.0。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1797">String sorting defaults for the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]and Unicode 5.0 are enabled in this application domain.</span></span> <span data-ttu-id="d7ccd-1798">它成功需要 sort00060101.dll 安装。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1798">Its success requires sort00060101.dll to be installed.</span></span>|  
|<span data-ttu-id="d7ccd-1799">"NetFx40_TimeSpanLegacyFormatMode"</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1799">"NetFx40_TimeSpanLegacyFormatMode"</span></span>|<span data-ttu-id="d7ccd-1800"><xref:System.TimeSpan> 格式设置行为的[!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]启用此应用程序域中。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1800"><xref:System.TimeSpan> formatting behavior for the [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] is enabled in this application domain.</span></span>  <span data-ttu-id="d7ccd-1801">请参阅[ &lt;TimeSpan_LegacyFormatMode&gt;元素](~/docs/framework/configure-apps/file-schema/runtime/timespan-legacyformatmode-element.md)和"还原旧版 TimeSpan 格式设置"部分的<xref:System.TimeSpan>主题。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1801">See [&lt;TimeSpan_LegacyFormatMode&gt; Element](~/docs/framework/configure-apps/file-schema/runtime/timespan-legacyformatmode-element.md) and the "Restoring Legacy TimeSpan Formatting" section of the <xref:System.TimeSpan> topic.</span></span>|  
|<span data-ttu-id="d7ccd-1802">"UseRandomizedStringHashAlgorithm"</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1802">"UseRandomizedStringHashAlgorithm"</span></span>|<span data-ttu-id="d7ccd-1803">在运行时计算字符串的哈希代码对每个应用程序域而不是使用跨应用程序域生成一致的哈希代码的单个哈希算法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1803">The runtime calculates hash codes for strings on a per application domain basis instead of using a single hashing algorithm that produces a consistent hash code across application domains.</span></span> <span data-ttu-id="d7ccd-1804">请参阅[ &lt;userandomizedstringhashalgorithm，那么&gt;元素](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1804">See [&lt;UseRandomizedStringHashAlgorithm&gt; Element](~/docs/framework/configure-apps/file-schema/runtime/userandomizedstringhashalgorithm-element.md).</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.AppDomainSetup.SetCompatibilitySwitches(System.Collections.Generic.IEnumerable{System.String})" />
      </Docs>
    </Member>
    <Member MemberName="IsDefaultAppDomain">
      <MemberSignature Language="C#" Value="public bool IsDefaultAppDomain ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDefaultAppDomain() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.IsDefaultAppDomain" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDefaultAppDomain () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDefaultAppDomain();" />
      <MemberSignature Language="F#" Value="member this.IsDefaultAppDomain : unit -&gt; bool" Usage="appDomain.IsDefaultAppDomain " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d7ccd-1805">返回一个值，指示应用程序域是否是进程的默认应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1805">Returns a value that indicates whether the application domain is the default application domain for the process.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1806">如果当前 <see cref="T:System.AppDomain" /> 对象表示进程的默认应用程序域，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1806"><see langword="true" /> if the current <see cref="T:System.AppDomain" /> object represents the default application domain for the process; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1807">每个托管的进程都有一个默认应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1807">Every managed process has a default application domain.</span></span> <span data-ttu-id="d7ccd-1808">默认域中开始执行。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1808">Execution begins in the default domain.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-1809">下面的代码示例创建第二个应用程序域，并显示的默认域和新的域有关的信息。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1809">The following code example creates a second application domain and displays information about the default domain and the new domain.</span></span>  
  
 [!code-cpp[System.AppDomain.IsDefaultAppDomain#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.AppDomain.IsDefaultAppDomain/CPP/System.AppDomain.IsDefaultAppDomain.cpp#1)]
 [!code-csharp[System.AppDomain.IsDefaultAppDomain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.AppDomain.IsDefaultAppDomain/CS/source.cs#1)]
 [!code-vb[System.AppDomain.IsDefaultAppDomain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.AppDomain.IsDefaultAppDomain/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFinalizingForUnload">
      <MemberSignature Language="C#" Value="public bool IsFinalizingForUnload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsFinalizingForUnload() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.IsFinalizingForUnload" />
      <MemberSignature Language="VB.NET" Value="Public Function IsFinalizingForUnload () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsFinalizingForUnload();" />
      <MemberSignature Language="F#" Value="member this.IsFinalizingForUnload : unit -&gt; bool" Usage="appDomain.IsFinalizingForUnload " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d7ccd-1810">指示此应用程序域是否正在卸载以及公共语言运行时是否正在终止该域包含的对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1810">Indicates whether this application domain is unloading, and the objects it contains are being finalized by the common language runtime.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1811">如果此应用程序域正在卸载，并且公共语言运行时已开始调用终止程序，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1811"><see langword="true" /> if this application domain is unloading and the common language runtime has started invoking finalizers; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1812">一个对象的完成方法提供该对象进行垃圾回收之前执行任何必要的清理操作的机会。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1812">The finalization method for an object provides you an opportunity to perform any necessary cleanup operations before the object is garbage collected.</span></span> <span data-ttu-id="d7ccd-1813">完成后，该对象处于可访问，但处于无效状态，因而无法使用。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1813">After finalization, the object is accessible but in an invalid state and therefore unusable.</span></span> <span data-ttu-id="d7ccd-1814">最终，垃圾回收完成，并回收对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1814">Eventually, garbage collection completes and reclaims the object.</span></span>  
  
 <span data-ttu-id="d7ccd-1815">在以下情况之一调用对象的完成方法： 垃圾回收期间时公共语言运行时关闭或卸载应用程序域包含的对象时。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1815">An object's finalization method is called in one of the following situations: during garbage collection, when the common language runtime is shutting down, or when the application domain that contains the object is unloaded.</span></span> <span data-ttu-id="d7ccd-1816"><xref:System.AppDomain.IsFinalizingForUnload%2A>方法将返回`true`仅在最后一种情况; 它不返回`true`终止结果从常规垃圾回收或 CLR 关闭时。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1816">The <xref:System.AppDomain.IsFinalizingForUnload%2A> method returns `true` only in the last case; it does not return `true` if finalization results from routine garbage collection or from CLR shutdown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7ccd-1817">若要确定是否由于 CLR 关闭完成，请使用<xref:System.Environment.HasShutdownStarted%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1817">To determine whether finalization is due to CLR shutdown, use the <xref:System.Environment.HasShutdownStarted%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="d7ccd-1818">它将返回`true`终止是否由于应用程序域正在卸载或者 CLR 正在关闭。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1818">It returns `true` if finalization is due to an application domain being unloaded or to the CLR shutting down.</span></span>  
  
 <span data-ttu-id="d7ccd-1819">执行时完成方法域卸载期间，你可能想要访问引用的静态字段和已完成方法的另一个对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1819">While executing in your finalization method during domain unloading, you might want to access another object that is referenced by a static field and has a finalization method.</span></span> <span data-ttu-id="d7ccd-1820">但是，您不能可靠地这样做，因为访问的对象可能已完成。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1820">However, you cannot reliably do so because the accessed object might already have been finalized.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7ccd-1821">此规则的例外是<xref:System.Console>类，该类包含引用流对象的静态字段，但比较特殊，以便可以始终写入系统控制台中，即使在域卸载或系统关闭期间实现。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1821">An exception to this rule is the <xref:System.Console> class, which contains static fields that reference stream objects, but is implemented specially so you can always write to the system console, even during domain unloading or system shutdown.</span></span>  
  
 <span data-ttu-id="d7ccd-1822">对象的完成方法中使用此方法，以确定是否正在卸载应用程序域包含的对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1822">Use this method in an object's finalization method to determine whether the application domain that contains the object is unloading.</span></span> <span data-ttu-id="d7ccd-1823">如果是这种情况，不能可靠地访问任何已完成方法，并由静态字段引用对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1823">If that is the case, you cannot reliably access any object that has a finalization method and is referenced by a static field.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Environment.HasShutdownStarted" />
      </Docs>
    </Member>
    <Member MemberName="IsFullyTrusted">
      <MemberSignature Language="C#" Value="public bool IsFullyTrusted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFullyTrusted" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.IsFullyTrusted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFullyTrusted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFullyTrusted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFullyTrusted : bool" Usage="System.AppDomain.IsFullyTrusted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7ccd-1824">获取一个值，该值指示加载到当前应用程序域的程序集是否是以完全信任方式执行的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1824">Gets a value that indicates whether assemblies that are loaded into the current application domain execute with full trust.</span></span></summary>
        <value><span data-ttu-id="d7ccd-1825">如果加载到当前应用程序域的程序集是以完全信任方式执行的，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1825"><see langword="true" /> if assemblies that are loaded into the current application domain execute with full trust; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1826">此方法始终返回`true`在桌面上运行的应用程序的默认应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1826">This method always returns `true` for the default application domain of an application that runs on the desktop.</span></span> <span data-ttu-id="d7ccd-1827">它将返回`false`已通过使用为沙盒应用程序域<xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType>方法重载，除非应用程序域授予的权限是等效于完全信任。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1827">It returns `false` for a sandboxed application domain that was created by using the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType> method overload, unless the permissions that are granted to the application domain are equivalent to full trust.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-1828">下面的示例演示<xref:System.AppDomain.IsFullyTrusted%2A>属性和<xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType>具有完全受信任和部分受信任的应用程序域的属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1828">The following example demonstrates the <xref:System.AppDomain.IsFullyTrusted%2A> property and the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=nameWithType> property with fully trusted and partially trusted application domains.</span></span> <span data-ttu-id="d7ccd-1829">完全受信任的应用程序域是应用程序的默认应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1829">The fully trusted application domain is the default application domain for the application.</span></span> <span data-ttu-id="d7ccd-1830">通过创建部分受信任的应用程序域<xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType>方法重载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1830">The partially trusted application domain is created by using the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType> method overload.</span></span>  
  
 <span data-ttu-id="d7ccd-1831">该示例使用`Worker`派生的类<xref:System.MarshalByRefObject>，因此它可以跨应用程序域边界封送。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1831">The example uses a `Worker` class that derives from <xref:System.MarshalByRefObject>, so it can be marshaled across application domain boundaries.</span></span> <span data-ttu-id="d7ccd-1832">此示例将创建`Worker`默认应用程序域中的对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1832">The example creates a `Worker` object in the default application domain.</span></span> <span data-ttu-id="d7ccd-1833">然后，它调用`TestIsFullyTrusted`方法以显示属性值为应用程序域和加载到应用程序域的两个程序集： mscorlib 除外，它是.NET Framework 中，并将示例程序集的一部分。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1833">It then calls the `TestIsFullyTrusted` method to display the property value for the application domain and for two assemblies that are loaded into the application domain: mscorlib, which is part of the .NET Framework, and the example assembly.</span></span> <span data-ttu-id="d7ccd-1834">应用程序域是完全受信任的因此这两个程序集是完全受信任。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1834">The application domain is fully trusted, so both assemblies are fully trusted.</span></span>  
  
 <span data-ttu-id="d7ccd-1835">该示例将创建另一个`Worker`对象在沙盒应用程序域并再次调用`TestIsFullyTrusted`方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1835">The example creates another `Worker` object in a sandboxed application domain and again calls the `TestIsFullyTrusted` method.</span></span> <span data-ttu-id="d7ccd-1836">Mscorlib 始终受信任的甚至在部分受信任的应用程序域中，但示例程序集是部分受信任。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1836">Mscorlib is always trusted, even in a partially trusted application domain, but the example assembly is partially trusted.</span></span>  
  
 [!code-csharp[System.AppDomain.IsFullyTrusted#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.appdomain.isfullytrusted/cs/example.cs#1)]
 [!code-vb[System.AppDomain.IsFullyTrusted#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.appdomain.isfullytrusted/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHomogenous">
      <MemberSignature Language="C#" Value="public bool IsHomogenous { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHomogenous" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.IsHomogenous" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHomogenous As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHomogenous { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHomogenous : bool" Usage="System.AppDomain.IsHomogenous" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7ccd-1837">获取一个值，该值指示当前应用程序域是否拥有一个为加载到该应用程序域的所有程序集授予的权限集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1837">Gets a value that indicates whether the current application domain has a set of permissions that is granted to all assemblies that are loaded into the application domain.</span></span></summary>
        <value><span data-ttu-id="d7ccd-1838">如果当前应用程序域具有一组同构权限，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1838"><see langword="true" /> if the current application domain has a homogenous set of permissions; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1839">此属性返回`true`使用创建的沙盒应用程序域<xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType>方法重载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1839">This property returns `true` for sandboxed application domains that were created by using the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType> method overload.</span></span> <span data-ttu-id="d7ccd-1840">沙盒应用程序域具有一组同构权限;即，相同的权限集授予的所有部分受信任程序集加载到应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1840">Sandboxed application domains have a homogenous set of permissions; that is, the same set of permissions is granted to all partially trusted assemblies that are loaded into the application domain.</span></span> <span data-ttu-id="d7ccd-1841">沙盒应用程序域 （可选） 有强名称的程序集设置，并改为使用完全信任运行此权限不受约束的列表。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1841">A sandboxed application domain optionally has a list of strong-named assemblies that are exempt from this permission set, and instead run with full trust.</span></span>  
  
 <span data-ttu-id="d7ccd-1842">完全受信任的代码可以使用<xref:System.AppDomain.PermissionSet%2A>属性来确定沙盒应用程序域的同构的授予集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1842">Fully trusted code can use the <xref:System.AppDomain.PermissionSet%2A> property to determine the homogenous grant set of a sandboxed application domain.</span></span>  
  
 <span data-ttu-id="d7ccd-1843">此属性也会返回`true`的默认应用程序域的桌面应用程序，因为该应用程序域将为所有程序集授予完全信任。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1843">This property also returns `true` for the default application domain of a desktop application, because that application domain grants full trust to all assemblies.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.AppDomain.PermissionSet" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d7ccd-1844">将 <see cref="T:System.Reflection.Assembly" /> 加载到此应用程序域中。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1844">Loads an <see cref="T:System.Reflection.Assembly" /> into this application domain.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly Load (byte[] rawAssembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Assembly Load(unsigned int8[] rawAssembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.Load(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Load (rawAssembly As Byte()) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Assembly ^ Load(cli::array &lt;System::Byte&gt; ^ rawAssembly);" />
      <MemberSignature Language="F#" Value="abstract member Load : byte[] -&gt; System.Reflection.Assembly&#xA;override this.Load : byte[] -&gt; System.Reflection.Assembly" Usage="appDomain.Load rawAssembly" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.Load(System.Byte[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawAssembly" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="rawAssembly"><span data-ttu-id="d7ccd-1845"><see langword="byte" /> 类型的数组，它是包含已发出程序集的基于 COFF 的图像。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1845">An array of type <see langword="byte" /> that is a COFF-based image containing an emitted assembly.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1846">加载带有基于通用对象文件格式 (COFF) 的图像的 <see cref="T:System.Reflection.Assembly" />，该图像包含已发出的 <see cref="T:System.Reflection.Assembly" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1846">Loads the <see cref="T:System.Reflection.Assembly" /> with a common object file format (COFF) based image containing an emitted <see cref="T:System.Reflection.Assembly" />.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1847">加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1847">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1848">从[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，使用此方法加载程序集的信任级别是应用程序域的信任级别相同。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1848">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the trust level of an assembly that is loaded by using this method is the same as the trust level of the application domain.</span></span>  
  
 <span data-ttu-id="d7ccd-1849">此方法应仅用于将程序集加载到当前应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1849">This method should be used only to load an assembly into the current application domain.</span></span> <span data-ttu-id="d7ccd-1850">不能调用静态的互操作性调用方为方便起见提供此方法是<xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1850">This method is provided as a convenience for interoperability callers who cannot call the static <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d7ccd-1851">若要将程序集加载到其他应用程序域中，使用一种方法如<xref:System.AppDomain.CreateInstanceAndUnwrap%2A>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1851">To load assemblies into other application domains, use a method such as <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>.</span></span>  
  
 <span data-ttu-id="d7ccd-1852">普遍适用于此方法的所有重载的信息，请参阅<xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1852">For information that is common to all overloads of this method, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-1853">下面的示例演示如何使用原始程序集加载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1853">The following sample demonstrates the use of loading a raw assembly.</span></span>  
  
 <span data-ttu-id="d7ccd-1854">有关运行此代码示例，必须提供完全限定的程序集名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1854">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="d7ccd-1855">有关如何获取完全限定的程序集名称的信息，请参阅[程序集名称](~/docs/framework/app-domains/assembly-names.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1855">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_LoadRaw#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_LoadRaw/CPP/loadraw.cpp#1)]
 [!code-csharp[AppDomain_LoadRaw#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_LoadRaw/CS/loadraw.cs#1)]
 [!code-vb[AppDomain_LoadRaw#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_LoadRaw/VB/loadraw.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-1856"><paramref name="rawAssembly" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1856"><paramref name="rawAssembly" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-1857"><paramref name="rawAssembly" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1857"><paramref name="rawAssembly" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-1858">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1858">-or-</span></span> 
<span data-ttu-id="d7ccd-1859">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="rawAssembly" /> 是用更高版本编译的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1859">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="rawAssembly" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1860">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1860">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-1861">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1861">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="d7ccd-1862">用于读取从文件或目录，以及用于访问路径本身中的信息的访问权限。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1862">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="d7ccd-1863">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1863">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly Load (System.Reflection.AssemblyName assemblyRef);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Assembly Load(class System.Reflection.AssemblyName assemblyRef) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.Load(System.Reflection.AssemblyName)" />
      <MemberSignature Language="VB.NET" Value="Public Function Load (assemblyRef As AssemblyName) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Assembly ^ Load(System::Reflection::AssemblyName ^ assemblyRef);" />
      <MemberSignature Language="F#" Value="abstract member Load : System.Reflection.AssemblyName -&gt; System.Reflection.Assembly&#xA;override this.Load : System.Reflection.AssemblyName -&gt; System.Reflection.Assembly" Usage="appDomain.Load assemblyRef" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.Load(System.Reflection.AssemblyName)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyRef" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="assemblyRef"><span data-ttu-id="d7ccd-1864">描述要加载的程序集的对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1864">An object that describes the assembly to load.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1865">在给定 <see cref="T:System.Reflection.AssemblyName" /> 的情况下加载 <see cref="T:System.Reflection.Assembly" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1865">Loads an <see cref="T:System.Reflection.Assembly" /> given its <see cref="T:System.Reflection.AssemblyName" />.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1866">加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1866">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1867">此方法应仅用于将程序集加载到当前应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1867">This method should be used only to load an assembly into the current application domain.</span></span> <span data-ttu-id="d7ccd-1868">不能调用静态的互操作性调用方为方便起见提供此方法是<xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1868">This method is provided as a convenience for interoperability callers who cannot call the static <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d7ccd-1869">若要将程序集加载到其他应用程序域中，使用一种方法如<xref:System.AppDomain.CreateInstanceAndUnwrap%2A>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1869">To load assemblies into other application domains, use a method such as <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>.</span></span>  
  
 <span data-ttu-id="d7ccd-1870">如果已加载请求的程序集的版本，则此方法返回加载的程序集，即使要求不同版本。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1870">If a version of the requested assembly is already loaded, this method returns the loaded assembly, even if a different version is requested.</span></span>  
  
 <span data-ttu-id="d7ccd-1871">提供的部分程序集名称`assemblyRef`不建议。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1871">Supplying a partial assembly name for `assemblyRef` is not recommended.</span></span> <span data-ttu-id="d7ccd-1872">（一个或多个区域性、 版本或公钥标记，则省略了部分名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1872">(A partial name omits one or more of culture, version, or public key token.</span></span> <span data-ttu-id="d7ccd-1873">对于采用字符串而不是重载<xref:System.Reflection.AssemblyName>对象，"MyAssembly，版本 = 1.0.0.0"是一个示例部分的名称和"MyAssembly，版本 = 1.0.0.0，区域性 = neutral，PublicKeyToken = 18ab3442da84b47"是一个示例的完整名称。)使用部分名称具有负面影响性能。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1873">For overloads that take a string instead of an <xref:System.Reflection.AssemblyName> object, "MyAssembly, Version=1.0.0.0" is an example of a partial name and "MyAssembly, Version=1.0.0.0, Culture=neutral, PublicKeyToken=18ab3442da84b47" is an example of a full name.) Using partial names has a negative effect on performance.</span></span> <span data-ttu-id="d7ccd-1874">此外，部分程序集名称可以加载程序集从全局程序集缓存才应用程序基目录中的程序集的一个精确副本 (<xref:System.AppDomain.BaseDirectory%2A>或<xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=nameWithType>)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1874">In addition, a partial assembly name can load an assembly from the global assembly cache only if there is an exact copy of the assembly in the application base directory (<xref:System.AppDomain.BaseDirectory%2A> or <xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=nameWithType>).</span></span>  
  
 <span data-ttu-id="d7ccd-1875">如果当前<xref:System.AppDomain>对象表示应用程序域`A`，并<xref:System.AppDomain.Load%2A>方法从应用程序域调用`B`，该程序集被加载到这两个应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1875">If the current <xref:System.AppDomain> object represents application domain `A`, and the <xref:System.AppDomain.Load%2A> method is called from application domain `B`, the assembly is loaded into both application domains.</span></span> <span data-ttu-id="d7ccd-1876">例如，下面的代码加载`MyAssembly`到新的应用程序域`ChildDomain`还到应用程序域执行的代码：</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1876">For example, the following code loads `MyAssembly` into the new application domain `ChildDomain` and also into the application domain where the code executes:</span></span>  
  
 [!code-cpp[System.AppDomain.Load#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.appdomain.load/cpp/source.cpp#1)]
 [!code-csharp[System.AppDomain.Load#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.appdomain.load/cs/source.cs#1)]
 [!code-vb[System.AppDomain.Load#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.appdomain.load/vb/source.vb#1)]  
  
 <span data-ttu-id="d7ccd-1877">程序集加载到这两个域，因为<xref:System.Reflection.Assembly>不是派生自<xref:System.MarshalByRefObject>，并因此返回值的<xref:System.AppDomain.Load%2A>方法不能进行封送处理。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1877">The assembly is loaded into both domains because <xref:System.Reflection.Assembly> does not derive from <xref:System.MarshalByRefObject>, and therefore the return value of the <xref:System.AppDomain.Load%2A> method cannot be marshaled.</span></span> <span data-ttu-id="d7ccd-1878">相反，公共语言运行时尝试将该程序集加载到调用应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1878">Instead, the common language runtime tries to load the assembly into the calling application domain.</span></span> <span data-ttu-id="d7ccd-1879">加载到两个应用程序域的程序集可能是不同的两个应用程序域的路径设置是否不同。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1879">The assemblies that are loaded into the two application domains might be different if the path settings for the two application domains are different.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7ccd-1880">如果这两个<xref:System.Reflection.AssemblyName.Name%2A?displayProperty=nameWithType>属性和<xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=nameWithType>属性设置，第一次尝试加载程序集使用的显示名称 (包括版本、 区域性和等等，所返回的<xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType>属性)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1880">If both the <xref:System.Reflection.AssemblyName.Name%2A?displayProperty=nameWithType> property and the <xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=nameWithType> property are set, the first attempt to load the assembly uses the display name (including version, culture, and so on, as returned by the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=nameWithType> property).</span></span> <span data-ttu-id="d7ccd-1881">如果找不到该文件，<xref:System.Reflection.AssemblyName.CodeBase%2A>属性用来搜索该程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1881">If the file is not found, the <xref:System.Reflection.AssemblyName.CodeBase%2A> property is used to search for the assembly.</span></span> <span data-ttu-id="d7ccd-1882">如果使用找到的程序集<xref:System.Reflection.AssemblyName.CodeBase%2A>，与程序集匹配的显示名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1882">If the assembly is found using <xref:System.Reflection.AssemblyName.CodeBase%2A>, the display name is matched against the assembly.</span></span> <span data-ttu-id="d7ccd-1883">如果匹配失败，<xref:System.IO.FileLoadException>引发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1883">If the match fails, a <xref:System.IO.FileLoadException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-1884"><paramref name="assemblyRef" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1884"><paramref name="assemblyRef" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-1885"><paramref name="assemblyRef" /> 未找到。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1885"><paramref name="assemblyRef" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-1886"><paramref name="assemblyRef" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1886"><paramref name="assemblyRef" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-1887">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1887">-or-</span></span> 
<span data-ttu-id="d7ccd-1888">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyRef" /> 是用更高版本编译的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1888">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyRef" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1889">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1889">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-1890">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1890">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="d7ccd-1891">用于读取从文件或目录，以及用于访问路径本身中的信息的访问权限。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1891">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="d7ccd-1892">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1892">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly Load (string assemblyString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Assembly Load(string assemblyString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Load (assemblyString As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Assembly ^ Load(System::String ^ assemblyString);" />
      <MemberSignature Language="F#" Value="abstract member Load : string -&gt; System.Reflection.Assembly&#xA;override this.Load : string -&gt; System.Reflection.Assembly" Usage="appDomain.Load assemblyString" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.Load(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyString"><span data-ttu-id="d7ccd-1893">程序集的显示名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1893">The display name of the assembly.</span></span> <span data-ttu-id="d7ccd-1894">请参阅 <see cref="P:System.Reflection.Assembly.FullName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1894">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1895">在给定其显示名称的情况下加载 <see cref="T:System.Reflection.Assembly" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1895">Loads an <see cref="T:System.Reflection.Assembly" /> given its display name.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1896">加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1896">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1897">此方法应仅用于将程序集加载到当前应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1897">This method should be used only to load an assembly into the current application domain.</span></span> <span data-ttu-id="d7ccd-1898">不能调用静态的互操作性调用方为方便起见提供此方法是<xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1898">This method is provided as a convenience for interoperability callers who cannot call the static <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d7ccd-1899">若要将程序集加载到其他应用程序域中，使用一种方法如<xref:System.AppDomain.CreateInstanceAndUnwrap%2A>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1899">To load assemblies into other application domains, use a method such as <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>.</span></span>  
  
 <span data-ttu-id="d7ccd-1900">普遍适用于此方法的所有重载的信息，请参阅<xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1900">For information that is common to all overloads of this method, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-1901"><paramref name="assemblyString" /> 为 <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="d7ccd-1901"><paramref name="assemblyString" /> is <see langword="null" /></span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-1902"><paramref name="assemblyString" /> 未找到。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1902"><paramref name="assemblyString" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-1903"><paramref name="assemblyString" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1903"><paramref name="assemblyString" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-1904">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1904">-or-</span></span> 
<span data-ttu-id="d7ccd-1905">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyString" /> 是用更高版本编译的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1905">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyString" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1906">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1906">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-1907">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1907">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="d7ccd-1908">用于读取从文件或目录，以及用于访问路径本身中的信息的访问权限。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1908">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="d7ccd-1909">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1909">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-1910">它能够访问的程序集的位置，如果该程序集不在本地。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1910">for the ability to access the location of the assembly if the assembly is not local.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly Load (byte[] rawAssembly, byte[] rawSymbolStore);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Assembly Load(unsigned int8[] rawAssembly, unsigned int8[] rawSymbolStore) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.Load(System.Byte[],System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Load (rawAssembly As Byte(), rawSymbolStore As Byte()) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Assembly ^ Load(cli::array &lt;System::Byte&gt; ^ rawAssembly, cli::array &lt;System::Byte&gt; ^ rawSymbolStore);" />
      <MemberSignature Language="F#" Value="abstract member Load : byte[] * byte[] -&gt; System.Reflection.Assembly&#xA;override this.Load : byte[] * byte[] -&gt; System.Reflection.Assembly" Usage="appDomain.Load (rawAssembly, rawSymbolStore)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.Load(System.Byte[],System.Byte[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawAssembly" Type="System.Byte[]" />
        <Parameter Name="rawSymbolStore" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="rawAssembly"><span data-ttu-id="d7ccd-1911"><see langword="byte" /> 类型的数组，它是包含已发出程序集的基于 COFF 的图像。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1911">An array of type <see langword="byte" /> that is a COFF-based image containing an emitted assembly.</span></span></param>
        <param name="rawSymbolStore"><span data-ttu-id="d7ccd-1912"><see langword="byte" /> 类型的数组，它包含表示程序集符号的原始字节。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1912">An array of type <see langword="byte" /> containing the raw bytes representing the symbols for the assembly.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1913">加载带有基于通用对象文件格式 (COFF) 的图像的 <see cref="T:System.Reflection.Assembly" />，该图像包含已发出的 <see cref="T:System.Reflection.Assembly" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1913">Loads the <see cref="T:System.Reflection.Assembly" /> with a common object file format (COFF) based image containing an emitted <see cref="T:System.Reflection.Assembly" />.</span></span> <span data-ttu-id="d7ccd-1914">还加载表示 <see cref="T:System.Reflection.Assembly" /> 的符号的原始字节。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1914">The raw bytes representing the symbols for the <see cref="T:System.Reflection.Assembly" /> are also loaded.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1915">加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1915">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1916">从[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，使用此方法加载程序集的信任级别是应用程序域的信任级别相同。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1916">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the trust level of an assembly that is loaded by using this method is the same as the trust level of the application domain.</span></span>  
  
 <span data-ttu-id="d7ccd-1917">此方法应仅用于将程序集加载到当前应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1917">This method should be used only to load an assembly into the current application domain.</span></span> <span data-ttu-id="d7ccd-1918">不能调用静态的互操作性调用方为方便起见提供此方法是<xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1918">This method is provided as a convenience for interoperability callers who cannot call the static <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d7ccd-1919">若要将程序集加载到其他应用程序域中，使用一种方法如<xref:System.AppDomain.CreateInstanceAndUnwrap%2A>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1919">To load assemblies into other application domains, use a method such as <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>.</span></span>  
  
 <span data-ttu-id="d7ccd-1920">普遍适用于此方法的所有重载的信息，请参阅<xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1920">For information that is common to all overloads of this method, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-1921">下面的示例演示如何使用原始程序集加载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1921">The following sample demonstrates the use of loading a raw assembly.</span></span>  
  
 <span data-ttu-id="d7ccd-1922">有关运行此代码示例，必须提供完全限定的程序集名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1922">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="d7ccd-1923">有关如何获取完全限定的程序集名称的信息，请参阅[程序集名称](~/docs/framework/app-domains/assembly-names.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1923">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_LoadRaw#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_LoadRaw/CPP/loadraw.cpp#1)]
 [!code-csharp[AppDomain_LoadRaw#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_LoadRaw/CS/loadraw.cs#1)]
 [!code-vb[AppDomain_LoadRaw#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_LoadRaw/VB/loadraw.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-1924"><paramref name="rawAssembly" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1924"><paramref name="rawAssembly" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-1925"><paramref name="rawAssembly" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1925"><paramref name="rawAssembly" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-1926">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1926">-or-</span></span> 
<span data-ttu-id="d7ccd-1927">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="rawAssembly" /> 是用更高版本编译的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1927">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="rawAssembly" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1928">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1928">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-1929">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1929">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-1930">用于读取不以"file://"开头的 URI。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1930">for reading a URI that does not begin with "file://".</span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="d7ccd-1931">用于读取从文件或目录，以及用于访问路径本身中的信息的访问权限。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1931">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="d7ccd-1932">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1932">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly Load (System.Reflection.AssemblyName assemblyRef, System.Security.Policy.Evidence assemblySecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Assembly Load(class System.Reflection.AssemblyName assemblyRef, class System.Security.Policy.Evidence assemblySecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Function Load (assemblyRef As AssemblyName, assemblySecurity As Evidence) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Assembly ^ Load(System::Reflection::AssemblyName ^ assemblyRef, System::Security::Policy::Evidence ^ assemblySecurity);" />
      <MemberSignature Language="F#" Value="abstract member Load : System.Reflection.AssemblyName * System.Security.Policy.Evidence -&gt; System.Reflection.Assembly&#xA;override this.Load : System.Reflection.AssemblyName * System.Security.Policy.Evidence -&gt; System.Reflection.Assembly" Usage="appDomain.Load (assemblyRef, assemblySecurity)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of Load which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyRef" Type="System.Reflection.AssemblyName" />
        <Parameter Name="assemblySecurity" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyRef"><span data-ttu-id="d7ccd-1933">描述要加载的程序集的对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1933">An object that describes the assembly to load.</span></span></param>
        <param name="assemblySecurity"><span data-ttu-id="d7ccd-1934">用于加载程序集的证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1934">Evidence for loading the assembly.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1935">在给定 <see cref="T:System.Reflection.AssemblyName" /> 的情况下加载 <see cref="T:System.Reflection.Assembly" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1935">Loads an <see cref="T:System.Reflection.Assembly" /> given its <see cref="T:System.Reflection.AssemblyName" />.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1936">加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1936">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1937">此方法应仅用于将程序集加载到当前应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1937">This method should be used only to load an assembly into the current application domain.</span></span> <span data-ttu-id="d7ccd-1938">不能调用静态的互操作性调用方为方便起见提供此方法是<xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1938">This method is provided as a convenience for interoperability callers who cannot call the static <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d7ccd-1939">若要将程序集加载到其他应用程序域中，使用一种方法如<xref:System.AppDomain.CreateInstanceAndUnwrap%2A>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1939">To load assemblies into other application domains, use a method such as <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>.</span></span>  
  
 <span data-ttu-id="d7ccd-1940">普遍适用于此方法的所有重载的信息，请参阅<xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1940">For information that is common to all overloads of this method, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-1941"><paramref name="assemblyRef" /> 为 <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="d7ccd-1941"><paramref name="assemblyRef" /> is <see langword="null" /></span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-1942"><paramref name="assemblyRef" /> 未找到。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1942"><paramref name="assemblyRef" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-1943"><paramref name="assemblyRef" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1943"><paramref name="assemblyRef" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-1944">或</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1944">-or-</span></span> 
<span data-ttu-id="d7ccd-1945">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyRef" /> 是用更高版本编译的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1945">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyRef" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1946">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1946">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-1947">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1947">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="d7ccd-1948">用于读取从文件或目录，以及用于访问路径本身中的信息的访问权限。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1948">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="d7ccd-1949">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1949">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-1950">若要使用的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1950">to load an assembly with evidence.</span></span> <span data-ttu-id="d7ccd-1951">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1951">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-1952">用于读取路径不在窗体"file://"或"\\\UNC\dir\\"或"c:\\"。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1952">for reading a path that is not in the form "file://" or "\\\UNC\dir\\" or "c:\\".</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly Load (string assemblyString, System.Security.Policy.Evidence assemblySecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Assembly Load(string assemblyString, class System.Security.Policy.Evidence assemblySecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.Load(System.String,System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Function Load (assemblyString As String, assemblySecurity As Evidence) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Assembly ^ Load(System::String ^ assemblyString, System::Security::Policy::Evidence ^ assemblySecurity);" />
      <MemberSignature Language="F#" Value="abstract member Load : string * System.Security.Policy.Evidence -&gt; System.Reflection.Assembly&#xA;override this.Load : string * System.Security.Policy.Evidence -&gt; System.Reflection.Assembly" Usage="appDomain.Load (assemblyString, assemblySecurity)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.Load(System.String,System.Security.Policy.Evidence)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of Load which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyString" Type="System.String" />
        <Parameter Name="assemblySecurity" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="assemblyString"><span data-ttu-id="d7ccd-1953">程序集的显示名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1953">The display name of the assembly.</span></span> <span data-ttu-id="d7ccd-1954">请参阅 <see cref="P:System.Reflection.Assembly.FullName" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1954">See <see cref="P:System.Reflection.Assembly.FullName" />.</span></span></param>
        <param name="assemblySecurity"><span data-ttu-id="d7ccd-1955">用于加载程序集的证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1955">Evidence for loading the assembly.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1956">在给定其显示名称的情况下加载 <see cref="T:System.Reflection.Assembly" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1956">Loads an <see cref="T:System.Reflection.Assembly" /> given its display name.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1957">加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1957">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1958">此方法应仅用于将程序集加载到当前应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1958">This method should be used only to load an assembly into the current application domain.</span></span> <span data-ttu-id="d7ccd-1959">不能调用静态的互操作性调用方为方便起见提供此方法是<xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1959">This method is provided as a convenience for interoperability callers who cannot call the static <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d7ccd-1960">若要将程序集加载到其他应用程序域中，使用一种方法如<xref:System.AppDomain.CreateInstanceAndUnwrap%2A>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1960">To load assemblies into other application domains, use a method such as <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>.</span></span>  
  
 <span data-ttu-id="d7ccd-1961">普遍适用于此方法的所有重载的信息，请参阅<xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1961">For information that is common to all overloads of this method, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-1962"><paramref name="assemblyString" /> 为 <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="d7ccd-1962"><paramref name="assemblyString" /> is <see langword="null" /></span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="d7ccd-1963"><paramref name="assemblyString" /> 未找到。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1963"><paramref name="assemblyString" /> is not found.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-1964"><paramref name="assemblyString" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1964"><paramref name="assemblyString" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-1965">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1965">-or-</span></span> 
<span data-ttu-id="d7ccd-1966">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyString" /> 是用更高版本编译的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1966">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="assemblyString" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1967">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1967">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-1968">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1968">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-1969">若要使用的证据加载程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1969">to load an assembly with evidence.</span></span> <span data-ttu-id="d7ccd-1970">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1970">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="d7ccd-1971">用于读取从文件或目录，以及用于访问路径本身中的信息的访问权限。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1971">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="d7ccd-1972">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1972">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-1973">用于读取路径不在窗体"file://"或"\\\UNC\dir\\"或"c:\\"。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1973">for reading a path that is not in the form "file://" or "\\\UNC\dir\\" or "c:\\".</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly Load (byte[] rawAssembly, byte[] rawSymbolStore, System.Security.Policy.Evidence securityEvidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Assembly Load(unsigned int8[] rawAssembly, unsigned int8[] rawSymbolStore, class System.Security.Policy.Evidence securityEvidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Function Load (rawAssembly As Byte(), rawSymbolStore As Byte(), securityEvidence As Evidence) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Reflection::Assembly ^ Load(cli::array &lt;System::Byte&gt; ^ rawAssembly, cli::array &lt;System::Byte&gt; ^ rawSymbolStore, System::Security::Policy::Evidence ^ securityEvidence);" />
      <MemberSignature Language="F#" Value="abstract member Load : byte[] * byte[] * System.Security.Policy.Evidence -&gt; System.Reflection.Assembly&#xA;override this.Load : byte[] * byte[] * System.Security.Policy.Evidence -&gt; System.Reflection.Assembly" Usage="appDomain.Load (rawAssembly, rawSymbolStore, securityEvidence)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use an overload that does not take an Evidence parameter")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Methods which use evidence to sandbox are obsolete and will be removed in a future release of the .NET Framework. Please use an overload of Load which does not take an Evidence parameter. See http://go.microsoft.com/fwlink/?LinkId=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawAssembly" Type="System.Byte[]" />
        <Parameter Name="rawSymbolStore" Type="System.Byte[]" />
        <Parameter Name="securityEvidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="rawAssembly"><span data-ttu-id="d7ccd-1974"><see langword="byte" /> 类型的数组，它是包含已发出程序集的基于 COFF 的图像。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1974">An array of type <see langword="byte" /> that is a COFF-based image containing an emitted assembly.</span></span></param>
        <param name="rawSymbolStore"><span data-ttu-id="d7ccd-1975"><see langword="byte" /> 类型的数组，它包含表示程序集符号的原始字节。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1975">An array of type <see langword="byte" /> containing the raw bytes representing the symbols for the assembly.</span></span></param>
        <param name="securityEvidence"><span data-ttu-id="d7ccd-1976">用于加载程序集的证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1976">Evidence for loading the assembly.</span></span></param>
        <summary><span data-ttu-id="d7ccd-1977">加载带有基于通用对象文件格式 (COFF) 的图像的 <see cref="T:System.Reflection.Assembly" />，该图像包含已发出的 <see cref="T:System.Reflection.Assembly" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1977">Loads the <see cref="T:System.Reflection.Assembly" /> with a common object file format (COFF) based image containing an emitted <see cref="T:System.Reflection.Assembly" />.</span></span> <span data-ttu-id="d7ccd-1978">还加载表示 <see cref="T:System.Reflection.Assembly" /> 的符号的原始字节。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1978">The raw bytes representing the symbols for the <see cref="T:System.Reflection.Assembly" /> are also loaded.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-1979">加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1979">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-1980">从[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，使用此方法加载程序集的信任级别是应用程序域的信任级别相同。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1980">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the trust level of an assembly that is loaded by using this method is the same as the trust level of the application domain.</span></span>  
  
 <span data-ttu-id="d7ccd-1981">此方法应仅用于将程序集加载到当前应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1981">This method should be used only to load an assembly into the current application domain.</span></span> <span data-ttu-id="d7ccd-1982">不能调用静态的互操作性调用方为方便起见提供此方法是<xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1982">This method is provided as a convenience for interoperability callers who cannot call the static <xref:System.Reflection.Assembly.Load%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="d7ccd-1983">若要将程序集加载到其他应用程序域中，使用一种方法如<xref:System.AppDomain.CreateInstanceAndUnwrap%2A>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1983">To load assemblies into other application domains, use a method such as <xref:System.AppDomain.CreateInstanceAndUnwrap%2A>.</span></span>  
  
 <span data-ttu-id="d7ccd-1984">普遍适用于此方法的所有重载的信息，请参阅<xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1984">For information that is common to all overloads of this method, see the <xref:System.AppDomain.Load%28System.Reflection.AssemblyName%29> method overload.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-1985">下面的示例演示如何使用原始程序集加载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1985">The following sample demonstrates the use of loading a raw assembly.</span></span>  
  
 <span data-ttu-id="d7ccd-1986">有关运行此代码示例，必须提供完全限定的程序集名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1986">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="d7ccd-1987">有关如何获取完全限定的程序集名称的信息，请参阅[程序集名称](~/docs/framework/app-domains/assembly-names.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1987">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_LoadRaw#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_LoadRaw/CPP/loadraw.cpp#1)]
 [!code-csharp[AppDomain_LoadRaw#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_LoadRaw/CS/loadraw.cs#1)]
 [!code-vb[AppDomain_LoadRaw#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_LoadRaw/VB/loadraw.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-1988"><paramref name="rawAssembly" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1988"><paramref name="rawAssembly" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.BadImageFormatException"><span data-ttu-id="d7ccd-1989"><paramref name="rawAssembly" /> 不是有效的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1989"><paramref name="rawAssembly" /> is not a valid assembly.</span></span>  
  
<span data-ttu-id="d7ccd-1990">- 或 -</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1990">-or-</span></span> 
<span data-ttu-id="d7ccd-1991">当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="rawAssembly" /> 是用更高版本编译的。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1991">Version 2.0 or later of the common language runtime is currently loaded and <paramref name="rawAssembly" /> was compiled with a later version.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-1992">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1992">The operation is attempted on an unloaded application domain.</span></span></exception>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="d7ccd-1993">一个程序集或模块用两个不同的证据加载了两次。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1993">An assembly or module was loaded twice with two different evidences.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="d7ccd-1994"><paramref name="securityEvidence" /> 不是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1994"><paramref name="securityEvidence" /> is not <see langword="null" />.</span></span> <span data-ttu-id="d7ccd-1995">未启用旧版 CAS 策略时，<paramref name="securityEvidence" /> 应为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1995">When legacy CAS policy is not enabled, <paramref name="securityEvidence" /> should be <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-1996">若要提供的证据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1996">to provide evidence.</span></span> <span data-ttu-id="d7ccd-1997">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1997">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span></span> <span data-ttu-id="d7ccd-1998">安全操作： <see cref="F:System.Security.Permissions.SecurityAction.Demand" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1998">Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="d7ccd-1999">用于读取从文件或目录，以及用于访问路径本身中的信息的访问权限。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-1999">for access to read from a file or directory, and for access to the information in the path itself.</span></span> <span data-ttu-id="d7ccd-2000">关联枚举： <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />， <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2000">Associated enumerations: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />, <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <permission cref="T:System.Net.WebPermission"><span data-ttu-id="d7ccd-2001">用于读取路径不在窗体"file://"或"\\\UNC\dir\\"或"c:\\"。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2001">for reading a path that is not in the form "file://" or "\\\UNC\dir\\" or "c:\\".</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="MonitoringIsEnabled">
      <MemberSignature Language="C#" Value="public static bool MonitoringIsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool MonitoringIsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.MonitoringIsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property MonitoringIsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool MonitoringIsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.MonitoringIsEnabled : bool with get, set" Usage="System.AppDomain.MonitoringIsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7ccd-2002">获取或设置一个值，该值指示是否对当前进程启用应用程序域的 CPU 和内存监视。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2002">Gets or sets a value that indicates whether CPU and memory monitoring of application domains is enabled for the current process.</span></span> <span data-ttu-id="d7ccd-2003">一旦对进程启用了监视，则无法将其禁用。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2003">Once monitoring is enabled for a process, it cannot be disabled.</span></span></summary>
        <value><span data-ttu-id="d7ccd-2004">如果启用监视，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2004"><see langword="true" /> if monitoring is enabled; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-2005">这`static`属性 (`Shared`属性在 Visual Basic) 控制 CPU 和内存监视的进程中的所有应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2005">This `static` property (`Shared` property in Visual Basic) controls CPU and memory monitoring of all the application domains in the process.</span></span>  
  
 <span data-ttu-id="d7ccd-2006">如果尝试将此属性设置为`false`、 一个<xref:System.ArgumentException>引发异常，即使该属性的当前值是`false`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2006">If you attempt to set this property to `false`, a <xref:System.ArgumentException> exception is thrown, even if the current value of the property is `false`.</span></span>  
  
 <span data-ttu-id="d7ccd-2007">启用了监视后，可以使用<xref:System.AppDomain.MonitoringSurvivedMemorySize%2A>， <xref:System.AppDomain.MonitoringSurvivedProcessMemorySize%2A>， <xref:System.AppDomain.MonitoringTotalAllocatedMemorySize%2A>，和<xref:System.AppDomain.MonitoringTotalProcessorTime%2A>实例来监视 CPU 和内存使用的各个应用程序域的属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2007">Once monitoring is enabled, you can use the <xref:System.AppDomain.MonitoringSurvivedMemorySize%2A>, <xref:System.AppDomain.MonitoringSurvivedProcessMemorySize%2A>, <xref:System.AppDomain.MonitoringTotalAllocatedMemorySize%2A>, and <xref:System.AppDomain.MonitoringTotalProcessorTime%2A> instance properties to monitor CPU and memory use of individual application domains.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d7ccd-2008">当前进程试图将值 <see langword="false" /> 赋予此属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2008">The current process attempted to assign the value <see langword="false" /> to this property.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="d7ccd-2009">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2009">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="d7ccd-2010">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2010">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="https://msdn.microsoft.com/library/318bedf8-7f35-4f00-b34a-2b7b8e3fa315"><span data-ttu-id="d7ccd-2011">应用程序域资源监控</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2011">Application Domain Resource Monitoring</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/02119ab6-1e91-448e-97ad-e7b2e5c4bbbd"><span data-ttu-id="d7ccd-2012">&lt;appdomainResourceMonitoring&gt;元素</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2012">&lt;appdomainResourceMonitoring&gt; Element</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MonitoringSurvivedMemorySize">
      <MemberSignature Language="C#" Value="public long MonitoringSurvivedMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MonitoringSurvivedMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.MonitoringSurvivedMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MonitoringSurvivedMemorySize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MonitoringSurvivedMemorySize { long get(); };" />
      <MemberSignature Language="F#" Value="member this.MonitoringSurvivedMemorySize : int64" Usage="System.AppDomain.MonitoringSurvivedMemorySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7ccd-2013">获取上次回收后保留下来的，已知由当前应用程序域引用的字节数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2013">Gets the number of bytes that survived the last collection and that are known to be referenced by the current application domain.</span></span></summary>
        <value><span data-ttu-id="d7ccd-2014">保留下来的字节数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2014">The number of surviving bytes.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-2015">每个垃圾回收中的更新统计信息。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2015">The statistics are updated with each garbage collection.</span></span> <span data-ttu-id="d7ccd-2016">但是，可确保仅在完整、 阻碍性回收; 后不准确也就是说，其中包括所有的生成和停止应用程序，同时集合的集合时发生。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2016">However, they are guaranteed to be accurate only after a full, blocking collection; that is, a collection that includes all generations and that stops the application while collection occurs.</span></span> <span data-ttu-id="d7ccd-2017">例如，<xref:System.GC.Collect?displayProperty=nameWithType>方法重载执行完整、 阻碍性回收。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2017">For example, the <xref:System.GC.Collect?displayProperty=nameWithType> method overload performs a full, blocking collection.</span></span> <span data-ttu-id="d7ccd-2018">（并发集合在后台发生，并且不会阻止应用程序。）</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2018">(Concurrent collection occurs in the background and does not block the application.)</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7ccd-2019"><see langword="static" />（Visual Basic 中的 <see langword="Shared" />）<see cref="P:System.AppDomain.MonitoringIsEnabled" /> 属性设置为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2019">The <see langword="static" /> (<see langword="Shared" /> in Visual Basic) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> property is set to <see langword="false" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="d7ccd-2020">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2020">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="d7ccd-2021">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2021">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="https://msdn.microsoft.com/library/318bedf8-7f35-4f00-b34a-2b7b8e3fa315"><span data-ttu-id="d7ccd-2022">应用程序域资源监控</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2022">Application Domain Resource Monitoring</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MonitoringSurvivedProcessMemorySize">
      <MemberSignature Language="C#" Value="public static long MonitoringSurvivedProcessMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 MonitoringSurvivedProcessMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.MonitoringSurvivedProcessMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MonitoringSurvivedProcessMemorySize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property long MonitoringSurvivedProcessMemorySize { long get(); };" />
      <MemberSignature Language="F#" Value="member this.MonitoringSurvivedProcessMemorySize : int64" Usage="System.AppDomain.MonitoringSurvivedProcessMemorySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7ccd-2023">获取进程中所有应用程序域的上次回收后保留下来的总字节数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2023">Gets the total bytes that survived from the last collection for all application domains in the process.</span></span></summary>
        <value><span data-ttu-id="d7ccd-2024">进程的保留下来的总字节数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2024">The total number of surviving bytes for the process.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-2025">完整、 阻碍性回收之后，字节数当前实时上保留该数字表示托管堆。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2025">After a full, blocking collection, this number represents the number of bytes currently held live on managed heaps.</span></span> <span data-ttu-id="d7ccd-2026">它应该报告的数量接近<xref:System.GC.GetTotalMemory%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2026">It should be close to the number reported by the <xref:System.GC.GetTotalMemory%2A> method.</span></span> <span data-ttu-id="d7ccd-2027">暂时的回收之后, 该数字表示的字节数当前中实时保留暂时代。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2027">After an ephemeral collection, this number represents the number of bytes currently held live in ephemeral generations.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7ccd-2028"><see langword="static" />（Visual Basic 中的 <see langword="Shared" />）<see cref="P:System.AppDomain.MonitoringIsEnabled" /> 属性设置为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2028">The <see langword="static" /> (<see langword="Shared" /> in Visual Basic) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> property is set to <see langword="false" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="d7ccd-2029">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2029">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="d7ccd-2030">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2030">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="https://msdn.microsoft.com/library/318bedf8-7f35-4f00-b34a-2b7b8e3fa315"><span data-ttu-id="d7ccd-2031">应用程序域资源监控</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2031">Application Domain Resource Monitoring</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MonitoringTotalAllocatedMemorySize">
      <MemberSignature Language="C#" Value="public long MonitoringTotalAllocatedMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MonitoringTotalAllocatedMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.MonitoringTotalAllocatedMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MonitoringTotalAllocatedMemorySize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MonitoringTotalAllocatedMemorySize { long get(); };" />
      <MemberSignature Language="F#" Value="member this.MonitoringTotalAllocatedMemorySize : int64" Usage="System.AppDomain.MonitoringTotalAllocatedMemorySize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7ccd-2032">获取自从创建应用程序域后由应用程序域进行的所有内存分配的总大小（以字节为单位，不扣除已回收的内存）。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2032">Gets the total size, in bytes, of all memory allocations that have been made by the application domain since it was created, without subtracting memory that has been collected.</span></span></summary>
        <value><span data-ttu-id="d7ccd-2033">所有内存分配的总大小。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2033">The total size of all memory allocations.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7ccd-2034"><see langword="static" />（Visual Basic 中的 <see langword="Shared" />）<see cref="P:System.AppDomain.MonitoringIsEnabled" /> 属性设置为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2034">The <see langword="static" /> (<see langword="Shared" /> in Visual Basic) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> property is set to <see langword="false" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="d7ccd-2035">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2035">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="d7ccd-2036">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2036">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="https://msdn.microsoft.com/library/318bedf8-7f35-4f00-b34a-2b7b8e3fa315"><span data-ttu-id="d7ccd-2037">应用程序域资源监控</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2037">Application Domain Resource Monitoring</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MonitoringTotalProcessorTime">
      <MemberSignature Language="C#" Value="public TimeSpan MonitoringTotalProcessorTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan MonitoringTotalProcessorTime" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.MonitoringTotalProcessorTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MonitoringTotalProcessorTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan MonitoringTotalProcessorTime { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.MonitoringTotalProcessorTime : TimeSpan" Usage="System.AppDomain.MonitoringTotalProcessorTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7ccd-2038">获取自从进程启动后所有线程在当前应用程序域中执行时所使用的总处理器时间。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2038">Gets the total processor time that has been used by all threads while executing in the current application domain, since the process started.</span></span></summary>
        <value><span data-ttu-id="d7ccd-2039">当前应用程序域的总处理器时间。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2039">Total processor time for the current application domain.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-2040">报告应用程序域的总时间包括该应用程序域中执行的进程中的每个线程所用的时间。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2040">The total time that is reported for an application domain includes the time each thread in the process spent executing in that application domain.</span></span>  
  
 <span data-ttu-id="d7ccd-2041">线程调用非托管代码程序仍与应用程序域，并执行应用程序域调用了报告的非托管的代码所用的处理器时间。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2041">A thread that calls into unmanaged code is still associated with an application domain, and the processor time spent executing the unmanaged code is reported for the application domain where the call was made.</span></span>  
  
 <span data-ttu-id="d7ccd-2042">当线程受阻或处于休眠状态，它不会消耗处理器时间百分比。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2042">When a thread is blocked or sleeping, it does not consume processor time.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7ccd-2043"><see langword="static" />（Visual Basic 中的 <see langword="Shared" />）<see cref="P:System.AppDomain.MonitoringIsEnabled" /> 属性设置为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2043">The <see langword="static" /> (<see langword="Shared" /> in Visual Basic) <see cref="P:System.AppDomain.MonitoringIsEnabled" /> property is set to <see langword="false" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="d7ccd-2044">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2044">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="d7ccd-2045">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2045">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="https://msdn.microsoft.com/library/318bedf8-7f35-4f00-b34a-2b7b8e3fa315"><span data-ttu-id="d7ccd-2046">应用程序域资源监控</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2046">Application Domain Resource Monitoring</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PermissionSet">
      <MemberSignature Language="C#" Value="public System.Security.PermissionSet PermissionSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.PermissionSet PermissionSet" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.PermissionSet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PermissionSet As PermissionSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::PermissionSet ^ PermissionSet { System::Security::PermissionSet ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PermissionSet : System.Security.PermissionSet" Usage="System.AppDomain.PermissionSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.PermissionSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7ccd-2047">获取沙盒应用程序域的权限集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2047">Gets the permission set of a sandboxed application domain.</span></span></summary>
        <value><span data-ttu-id="d7ccd-2048">沙盒应用程序域的权限集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2048">The permission set of the sandboxed application domain.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-2049">使用创建的沙盒应用程序域<xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType>方法重载具有一组同构权限; 即，相同的权限集授予对所有部分受信任的程序集加载到应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2049">Sandboxed application domains that were created by using the <xref:System.AppDomain.CreateDomain%28System.String%2CSystem.Security.Policy.Evidence%2CSystem.AppDomainSetup%2CSystem.Security.PermissionSet%2CSystem.Security.Policy.StrongName%5B%5D%29?displayProperty=nameWithType> method overload have a homogenous set of permissions; that is, the same set of permissions is granted to all partially trusted assemblies that are loaded into the application domain.</span></span> <span data-ttu-id="d7ccd-2050">沙盒应用程序域 （可选） 有强名称的程序集设置，并改为使用完全信任运行此权限不受约束的列表。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2050">A sandboxed application domain optionally has a list of strong-named assemblies that are exempt from this permission set, and instead run with full trust.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="d7ccd-2051">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2051">Requires full trust for the immediate caller.</span></span> <span data-ttu-id="d7ccd-2052">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2052">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="P:System.AppDomain.IsHomogenous" />
      </Docs>
    </Member>
    <Member MemberName="ProcessExit">
      <MemberSignature Language="C#" Value="public event EventHandler ProcessExit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ProcessExit" />
      <MemberSignature Language="DocId" Value="E:System.AppDomain.ProcessExit" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ProcessExit As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ ProcessExit;" />
      <MemberSignature Language="F#" Value="member this.ProcessExit : EventHandler " Usage="member this.ProcessExit : System.EventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System._AppDomain.ProcessExit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>remove: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7ccd-2053">当默认应用程序域的父进程存在时发生。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2053">Occurs when the default application domain's parent process exits.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-2054"><xref:System.EventHandler>此事件可以执行终止活动，例如，关闭文件，释放存储空间等，在进程结束之前。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2054">The <xref:System.EventHandler> for this event can perform termination activities, such as closing files, releasing storage and so on, before the process ends.</span></span>  
  
 <span data-ttu-id="d7ccd-2055">从.NET Framework 2.0 版开始，在每个注册事件处理程序的应用程序域中引发此事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2055">Beginning with the .NET Framework version 2.0, this event is raised in each application domain that registers an event handler.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7ccd-2056">总执行时间的所有<xref:System.AppDomain.ProcessExit>事件处理程序是有限的就像总执行时间的所有终结器被限制在进程关闭。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2056">The total execution time of all <xref:System.AppDomain.ProcessExit> event handlers is limited, just as the total execution time of all finalizers is limited at process shutdown.</span></span> <span data-ttu-id="d7ccd-2057">默认值为两秒。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2057">The default is two seconds.</span></span> <span data-ttu-id="d7ccd-2058">非托管的主机可以通过调用来更改此执行时间[iclrpolicymanager:: Settimeout](~/docs/framework/unmanaged-api/hosting/iclrpolicymanager-settimeout-method.md)方法替换[OPR_ProcessExit](~/docs/framework/unmanaged-api/hosting/eclroperation-enumeration.md)枚举值。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2058">An unmanaged host can change this execution time by calling the [ICLRPolicyManager::SetTimeout](~/docs/framework/unmanaged-api/hosting/iclrpolicymanager-settimeout-method.md) method with the [OPR_ProcessExit](~/docs/framework/unmanaged-api/hosting/eclroperation-enumeration.md) enumeration value.</span></span>  
  
 <span data-ttu-id="d7ccd-2059">在.NET framework 1.0 和 1.1 版中，此事件是引发仅在默认应用程序域，且仅当在默认应用程序域中注册事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2059">In the .NET Framework versions 1.0 and 1.1, this event is raised only in the default application domain, and only if an event handler is registered in the default application domain.</span></span>  
  
 <span data-ttu-id="d7ccd-2060">若要注册此事件的事件处理程序，必须具有所需的权限，或<xref:System.Security.SecurityException>引发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2060">To register an event handler for this event, you must have the required permissions, or a <xref:System.Security.SecurityException> is thrown.</span></span>  
  
 <span data-ttu-id="d7ccd-2061">有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2061">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectionOnlyAssemblyResolve">
      <MemberSignature Language="C#" Value="public event ResolveEventHandler ReflectionOnlyAssemblyResolve;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ResolveEventHandler ReflectionOnlyAssemblyResolve" />
      <MemberSignature Language="DocId" Value="E:System.AppDomain.ReflectionOnlyAssemblyResolve" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ReflectionOnlyAssemblyResolve As ResolveEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event ResolveEventHandler ^ ReflectionOnlyAssemblyResolve;" />
      <MemberSignature Language="F#" Value="member this.ReflectionOnlyAssemblyResolve : ResolveEventHandler " Usage="member this.ReflectionOnlyAssemblyResolve : System.ResolveEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ResolveEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7ccd-2062">当程序集的解析在仅限反射的上下文中失败时发生。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2062">Occurs when the resolution of an assembly fails in the reflection-only context.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-2063">在仅限反射上下文中，不会自动解析依赖项。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2063">In the reflection-only context, dependencies are not resolved automatically.</span></span> <span data-ttu-id="d7ccd-2064">它们必须预加载或返回的此事件的处理程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2064">They must be preloaded or returned by the handler for this event.</span></span> <span data-ttu-id="d7ccd-2065">程序集具有尚未加载到只反射上下文中的依赖项时，引发此事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2065">This event is raised when an assembly has a dependency that is not already loaded into the reflection-only context.</span></span> <span data-ttu-id="d7ccd-2066">通过指定缺少的依赖项<xref:System.ResolveEventArgs.Name%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2066">The missing dependency is specified by the <xref:System.ResolveEventArgs.Name%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="d7ccd-2067"><xref:System.ResolveEventHandler>为此事件必须返回满足依赖项的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2067">The <xref:System.ResolveEventHandler> for this event must return an assembly that satisfies the dependency.</span></span> <span data-ttu-id="d7ccd-2068">返回的程序集必须加载到仅反射上下文。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2068">The assembly that is returned must be loaded into the reflection-only context.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d7ccd-2069">要加载到仅反射上下文的程序集缺少的依赖项仅对引发此事件 (例如，通过使用<xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>方法)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2069">This event is raised only for missing dependencies of the assembly that you are loading into the reflection-only context (for example, by using the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType> method).</span></span> <span data-ttu-id="d7ccd-2070">如果找不到要加载的程序集，它不被引发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2070">It is not raised if the assembly that you are loading cannot be found.</span></span>  
  
 <span data-ttu-id="d7ccd-2071">开头[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，则<xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType>属性返回请求无法解析的程序集加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2071">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the <xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType> property returns the assembly that requested the assembly load that could not be resolved.</span></span> <span data-ttu-id="d7ccd-2072">了解请求的程序集的标识可能标识正确版本的依赖项，如果多个版本都提供很有用。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2072">Knowing the identity of the requesting assembly might be useful in identifying the correct version of the dependency, if more than one version is available.</span></span> <span data-ttu-id="d7ccd-2073">有关详情，请参阅<xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2073">For more information, see <xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="d7ccd-2074">对于此事件，<xref:System.ResolveEventArgs.Name%2A?displayProperty=nameWithType>属性返回的程序集名称之前应用策略。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2074">For this event, the <xref:System.ResolveEventArgs.Name%2A?displayProperty=nameWithType> property returns the assembly name before policy is applied.</span></span>  
  
 <span data-ttu-id="d7ccd-2075">有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2075">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="d7ccd-2076">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2076">requires full trust for the immediate caller.</span></span> <span data-ttu-id="d7ccd-2077">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2077">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="P:System.ResolveEventArgs.RequestingAssembly" />
      </Docs>
    </Member>
    <Member MemberName="ReflectionOnlyGetAssemblies">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly[] ReflectionOnlyGetAssemblies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly[] ReflectionOnlyGetAssemblies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ReflectionOnlyGetAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public Function ReflectionOnlyGetAssemblies () As Assembly()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::Assembly ^&gt; ^ ReflectionOnlyGetAssemblies();" />
      <MemberSignature Language="F#" Value="member this.ReflectionOnlyGetAssemblies : unit -&gt; System.Reflection.Assembly[]" Usage="appDomain.ReflectionOnlyGetAssemblies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d7ccd-2078">返回已加载到应用程序域的只反射上下文中的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2078">Returns the assemblies that have been loaded into the reflection-only context of the application domain.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-2079"><see cref="T:System.Reflection.Assembly" /> 对象数组，表示加载到应用程序域的只反射上下文中的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2079">An array of <see cref="T:System.Reflection.Assembly" /> objects that represent the assemblies loaded into the reflection-only context of the application domain.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-2080">此方法返回已加载到仅反射上下文的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2080">This method returns the assemblies that have been loaded into the reflection-only context.</span></span> <span data-ttu-id="d7ccd-2081">若要获取已加载的程序集的执行，请使用<xref:System.AppDomain.GetAssemblies%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2081">To get the assemblies that have been loaded for execution, use the <xref:System.AppDomain.GetAssemblies%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-2082">下面的代码示例将插入的执行上下文，然后再到只反射上下文中加载的 System.dll 程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2082">The following code example loads the System.dll assembly into the execution context and then into the reflection-only context.</span></span> <span data-ttu-id="d7ccd-2083"><xref:System.AppDomain.GetAssemblies%2A>和<xref:System.AppDomain.ReflectionOnlyGetAssemblies%2A>方法用于显示的程序集加载到每个上下文。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2083">The <xref:System.AppDomain.GetAssemblies%2A> and <xref:System.AppDomain.ReflectionOnlyGetAssemblies%2A> methods are used to display the assemblies loaded into each context.</span></span>  
  
 [!code-cpp[AppDomain.ReflectionOnlyGetAssemblies#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain.ReflectionOnlyGetAssemblies/CPP/reflectiononly.cpp#1)]
 [!code-csharp[AppDomain.ReflectionOnlyGetAssemblies#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain.ReflectionOnlyGetAssemblies/CS/reflectiononly.cs#1)]
 [!code-vb[AppDomain.ReflectionOnlyGetAssemblies#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain.ReflectionOnlyGetAssemblies/VB/reflectiononly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-2084">尝试对已卸载的应用程序域进行操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2084">An operation is attempted on an unloaded application domain.</span></span></exception>
        <altmember cref="M:System.AppDomain.GetAssemblies" />
      </Docs>
    </Member>
    <Member MemberName="RelativeSearchPath">
      <MemberSignature Language="C#" Value="public string RelativeSearchPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RelativeSearchPath" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.RelativeSearchPath" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RelativeSearchPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RelativeSearchPath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RelativeSearchPath : string" Usage="System.AppDomain.RelativeSearchPath" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System._AppDomain.RelativeSearchPath</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7ccd-2085">获取基目录下的路径，在此程序集冲突解决程序应探测专用程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2085">Gets the path under the base directory where the assembly resolver should probe for private assemblies.</span></span></summary>
        <value><span data-ttu-id="d7ccd-2086">基目录下的路径，在此程序集冲突解决程序应探测专用程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2086">The path under the base directory where the assembly resolver should probe for private assemblies.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-2087">专用程序集部署在与应用程序相同的目录结构中。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2087">Private assemblies are deployed in the same directory structure as the application.</span></span> <span data-ttu-id="d7ccd-2088">如果通过指定的路径<xref:System.AppDomain.RelativeSearchPath%2A>属性不是在<xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=nameWithType>，它将被忽略。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2088">If the path specified by the <xref:System.AppDomain.RelativeSearchPath%2A> property is not under <xref:System.AppDomainSetup.ApplicationBase%2A?displayProperty=nameWithType>, it is ignored.</span></span>  
  
 <span data-ttu-id="d7ccd-2089">此属性返回的值设置使用<xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2089">This property returns the value set using <xref:System.AppDomainSetup.PrivateBinPath%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-2090">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2090">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission"><span data-ttu-id="d7ccd-2091">用于访问的路径信息。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2091">for access to the path information.</span></span> <span data-ttu-id="d7ccd-2092">关联枚举：<see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2092">Associated enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />.</span></span></permission>
        <altmember cref="P:System.AppDomainSetup.PrivateBinPath" />
      </Docs>
    </Member>
    <Member MemberName="ResourceResolve">
      <MemberSignature Language="C#" Value="public event ResolveEventHandler ResourceResolve;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ResolveEventHandler ResourceResolve" />
      <MemberSignature Language="DocId" Value="E:System.AppDomain.ResourceResolve" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ResourceResolve As ResolveEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event ResolveEventHandler ^ ResourceResolve;" />
      <MemberSignature Language="F#" Value="member this.ResourceResolve : ResolveEventHandler " Usage="member this.ResourceResolve : System.ResolveEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System._AppDomain.ResourceResolve</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ResolveEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7ccd-2093">当资源解析因资源不是程序集中的有效链接资源或嵌入资源而失败时发生。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2093">Occurs when the resolution of a resource fails because the resource is not a valid linked or embedded resource in the assembly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-2094"><xref:System.ResolveEventHandler>为此事件可以尝试查找包含该资源的程序集并将其返回。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2094">The <xref:System.ResolveEventHandler> for this event can attempt to locate the assembly containing the resource and return it.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="d7ccd-2095">如果解析失败，因为没有文件可以找到有效的链接资源，不引发此事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2095">This event is not raised if resolution fails because no file can be found for a valid linked resource.</span></span> <span data-ttu-id="d7ccd-2096">如果找不到清单资源流，但它不会引发如果找不到单独的资源键，则将引发该事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2096">It is raised if a manifest resource stream cannot be found, but it is not raised if an individual resource key cannot be found.</span></span>  
  
 <span data-ttu-id="d7ccd-2097">开头[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，则<xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType>属性包含请求的资源的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2097">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the <xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType> property contains the assembly that requested the resource.</span></span> <span data-ttu-id="d7ccd-2098">有关详情，请参阅<xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2098">For more information, see <xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="d7ccd-2099">若要注册此事件的事件处理程序，必须具有所需的权限，或<xref:System.Security.SecurityException>引发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2099">To register an event handler for this event, you must have the required permissions, or a <xref:System.Security.SecurityException> is thrown.</span></span>  
  
 <span data-ttu-id="d7ccd-2100">有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2100">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="d7ccd-2101">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2101">requires full trust for the immediate caller.</span></span> <span data-ttu-id="d7ccd-2102">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2102">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="P:System.ResolveEventArgs.RequestingAssembly" />
      </Docs>
    </Member>
    <Member MemberName="SetAppDomainPolicy">
      <MemberSignature Language="C#" Value="public void SetAppDomainPolicy (System.Security.Policy.PolicyLevel domainPolicy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAppDomainPolicy(class System.Security.Policy.PolicyLevel domainPolicy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.SetAppDomainPolicy(System.Security.Policy.PolicyLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAppDomainPolicy (domainPolicy As PolicyLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAppDomainPolicy(System::Security::Policy::PolicyLevel ^ domainPolicy);" />
      <MemberSignature Language="F#" Value="member this.SetAppDomainPolicy : System.Security.Policy.PolicyLevel -&gt; unit" Usage="appDomain.SetAppDomainPolicy domainPolicy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("AppDomain policy levels are obsolete")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("AppDomain policy levels are obsolete and will be removed in a future release of the .NET Framework. See http://go.microsoft.com/fwlink/?LinkID=155570 for more information.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domainPolicy" Type="System.Security.Policy.PolicyLevel" />
      </Parameters>
      <Docs>
        <param name="domainPolicy"><span data-ttu-id="d7ccd-2103">安全策略级别。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2103">The security policy level.</span></span></param>
        <summary><span data-ttu-id="d7ccd-2104">为此应用程序域确定安全策略级别。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2104">Establishes the security policy level for this application domain.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-2105">加载到程序集之前调用此方法<xref:System.AppDomain>使安全策略产生影响。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2105">Call this method before an assembly is loaded into the <xref:System.AppDomain> in order for the security policy to have effect.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-2106">下面的示例演示如何使用<xref:System.AppDomain.SetAppDomainPolicy%2A>方法设置的应用程序域的安全策略级别。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2106">The following example demonstrates how to use the <xref:System.AppDomain.SetAppDomainPolicy%2A> method to set the security policy level of an application domain.</span></span>  
  
 [!code-cpp[ADSetAppDomainPolicy#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADSetAppDomainPolicy/CPP/adsetappdomainpolicy.cpp#1)]
 [!code-csharp[ADSetAppDomainPolicy#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADSetAppDomainPolicy/CS/adsetappdomainpolicy.cs#1)]
 [!code-vb[ADSetAppDomainPolicy#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADSetAppDomainPolicy/VB/adsetappdomainpolicy.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-2107"><paramref name="domainPolicy" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2107"><paramref name="domainPolicy" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Policy.PolicyException"><span data-ttu-id="d7ccd-2108">已经设置了安全策略级别。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2108">The security policy level has already been set.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-2109">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2109">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="d7ccd-2110">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2110">requires full trust for the immediate caller.</span></span> <span data-ttu-id="d7ccd-2111">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2111">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetCachePath">
      <MemberSignature Language="C#" Value="public void SetCachePath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetCachePath(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.SetCachePath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCachePath (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetCachePath(System::String ^ path);" />
      <MemberSignature Language="F#" Value="abstract member SetCachePath : string -&gt; unit&#xA;override this.SetCachePath : string -&gt; unit" Usage="appDomain.SetCachePath path" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.SetCachePath(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use AppDomainSetup.SetCachePath")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("AppDomain.SetCachePath has been deprecated. Please investigate the use of AppDomainSetup.CachePath instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="d7ccd-2112">到卷影副本位置的完全限定路径。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2112">The fully qualified path to the shadow copy location.</span></span></param>
        <summary><span data-ttu-id="d7ccd-2113">确定指定目录路径为对程序集进行影像复制的位置。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2113">Establishes the specified directory path as the location where assemblies are shadow copied.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-2114">如果缓存路径将被忽略<xref:System.AppDomainSetup.ApplicationName%2A>未设置属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2114">The cache path is ignored if the <xref:System.AppDomainSetup.ApplicationName%2A> property is not set.</span></span> <span data-ttu-id="d7ccd-2115">请参阅 <xref:System.AppDomainSetup.CachePath%2A?displayProperty=nameWithType> 属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2115">See the <xref:System.AppDomainSetup.CachePath%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="d7ccd-2116">卷影复制的详细信息请参阅[卷影复制程序集](~/docs/framework/app-domains/shadow-copy-assemblies.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2116">For more information on shadow copying see [Shadow Copying Assemblies](~/docs/framework/app-domains/shadow-copy-assemblies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-2117">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2117">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="d7ccd-2118">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2118">requires full trust for the immediate caller.</span></span> <span data-ttu-id="d7ccd-2119">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2119">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="P:System.AppDomainSetup.CachePath" />
        <related type="Article" href="~/docs/framework/app-domains/shadow-copy-assemblies.md"><span data-ttu-id="d7ccd-2120">卷影复制程序集</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2120">Shadow Copying Assemblies</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetData">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d7ccd-2121">为应用程序域属性分配值。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2121">Assigns a value to an application domain property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string name, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string name, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.SetData(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (name As String, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetData(System::String ^ name, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * obj -&gt; unit&#xA;override this.SetData : string * obj -&gt; unit" Usage="appDomain.SetData (name, data)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.SetData(System.String,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="d7ccd-2122">要创建或更改的用户定义应用程序域属性的名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2122">The name of a user-defined application domain property to create or change.</span></span></param>
        <param name="data"><span data-ttu-id="d7ccd-2123">该属性的值。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2123">The value of the property.</span></span></param>
        <summary><span data-ttu-id="d7ccd-2124">为指定的应用程序域属性分配指定值。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2124">Assigns the specified value to the specified application domain property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-2125">使用此方法来插入项时，或修改名称数据对描述此实例的属性的内部缓存中的条目的值<xref:System.AppDomain>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2125">Use this method to insert an entry, or modify the value of an entry in an internal cache of name-data pairs that describe properties of this instance of <xref:System.AppDomain>.</span></span>  
  
 <span data-ttu-id="d7ccd-2126">该缓存自动包含预定义的系统项的创建应用程序域时插入。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2126">The cache automatically contains predefined system entries that are inserted when the application domain is created.</span></span> <span data-ttu-id="d7ccd-2127">无法插入或使用此方法修改系统项。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2127">You cannot insert or modify system entries with this method.</span></span> <span data-ttu-id="d7ccd-2128">尝试来修改系统条目的方法调用不起任何作用;该方法不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2128">A method call that attempts to modify a system entry has no effect; the method does not throw an exception.</span></span> <span data-ttu-id="d7ccd-2129">您可以检查与系统项的值<xref:System.AppDomain.GetData%2A>方法或等效<xref:System.AppDomainSetup>属性中所述<xref:System.AppDomain.GetData%2A>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2129">You can inspect the values of system entries with the <xref:System.AppDomain.GetData%2A> method, or the equivalent <xref:System.AppDomainSetup> properties described in <xref:System.AppDomain.GetData%2A>.</span></span>  
  
 <span data-ttu-id="d7ccd-2130">可以为的值调用此方法以设置评估供应"REGEX_DEFAULT_MATCH_TIMEOUT"正则表达式模式的默认超时间隔的值`name`自变量和一个<xref:System.TimeSpan>值，该值表示超时间隔的值为`data`参数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2130">You can call this method to set the value of the default timeout interval for evaluating regular expression patterns by supply "REGEX_DEFAULT_MATCH_TIMEOUT" as the value of the `name` argument and a <xref:System.TimeSpan> value that represents the timeout interval as the value of the `data` argument.</span></span> <span data-ttu-id="d7ccd-2131">此外可以插入或修改使用此方法的用户定义名称数据对和检查它们的值与<xref:System.AppDomain.GetData%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2131">You can also insert or modify your own user defined name-data pairs with this method and inspect their values with the <xref:System.AppDomain.GetData%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-2132">下面的示例演示如何使用<xref:System.AppDomain.SetData%28System.String%2CSystem.Object%29>方法来创建新的值对。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2132">The following example demonstrates how to use the <xref:System.AppDomain.SetData%28System.String%2CSystem.Object%29> method to create a new value pair.</span></span> <span data-ttu-id="d7ccd-2133">该示例然后使用<xref:System.AppDomain.GetData%2A>方法来检索值，并将其显示到控制台。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2133">The example then uses the <xref:System.AppDomain.GetData%2A> method to retrieve the value, and displays it to the console.</span></span>  
  
 [!code-cpp[ADGetData#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADGetData/CPP/adgetdata.cpp#1)]
 [!code-csharp[ADGetData#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADGetData/CS/adgetdata.cs#1)]
 [!code-vb[ADGetData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADGetData/VB/adgetdata.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-2134">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2134">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="d7ccd-2135">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2135">requires full trust for the immediate caller.</span></span> <span data-ttu-id="d7ccd-2136">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2136">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="M:System.AppDomain.GetData(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string name, object data, System.Security.IPermission permission);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetData(string name, object data, class System.Security.IPermission permission) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.SetData(System.String,System.Object,System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (name As String, data As Object, permission As IPermission)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ name, System::Object ^ data, System::Security::IPermission ^ permission);" />
      <MemberSignature Language="F#" Value="member this.SetData : string * obj * System.Security.IPermission -&gt; unit" Usage="appDomain.SetData (name, data, permission)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="permission" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="d7ccd-2137">要创建或更改的用户定义应用程序域属性的名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2137">The name of a user-defined application domain property to create or change.</span></span></param>
        <param name="data"><span data-ttu-id="d7ccd-2138">该属性的值。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2138">The value of the property.</span></span></param>
        <param name="permission"><span data-ttu-id="d7ccd-2139">检索属性时调用方需要具有的权限。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2139">The permission to demand of the caller when the property is retrieved.</span></span></param>
        <summary><span data-ttu-id="d7ccd-2140">将指定值分配给指定应用程序域属性，检索该属性时要求调用方具有指定权限。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2140">Assigns the specified value to the specified application domain property, with a specified permission to demand of the caller when the property is retrieved.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-2141">此方法用于插入或修改中描述的应用程序域的属性的名称/数据对的内部缓存自己用户定义的条目。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2141">Use this method to insert or modify your own user-defined entries in an internal cache of name/data pairs that describe properties of the application domain.</span></span> <span data-ttu-id="d7ccd-2142">当您插入一个条目时，可以指定权限请求来检索项时，强制执行。此外，可以调用此方法以设置评估供应"REGEX_DEFAULT_MATCH_TIMEOUT"正则表达式模式的默认超时间隔的值的值作为`name`自变量和一个<xref:System.TimeSpan>值，该值表示超时间隔的值作为`data`参数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2142">When you insert an entry, you can specify a permission demand to enforce when the entry is retrieved.In addition, you can call this method to set the value of the default timeout interval for evaluating regular expression patterns by supply "REGEX_DEFAULT_MATCH_TIMEOUT" as the value of the `name` argument and a <xref:System.TimeSpan> value that represents the timeout interval as the value of the `data` argument.</span></span>  
  
 <span data-ttu-id="d7ccd-2143">此方法不能用于将安全要求分配给系统定义的属性字符串。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2143">You cannot use this method to assign a security demand to a system-defined property string.</span></span>  
  
 <span data-ttu-id="d7ccd-2144">该缓存自动包含预定义的系统项的创建应用程序域时插入。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2144">The cache automatically contains predefined system entries that are inserted when the application domain is created.</span></span> <span data-ttu-id="d7ccd-2145">无法插入或使用此方法修改系统项。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2145">You cannot insert or modify system entries with this method.</span></span> <span data-ttu-id="d7ccd-2146">尝试来修改系统条目的方法调用不起任何作用;该方法不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2146">A method call that attempts to modify a system entry has no effect; the method does not throw an exception.</span></span> <span data-ttu-id="d7ccd-2147">您可以检查与系统项的值<xref:System.AppDomain.GetData%2A>方法或等效<xref:System.AppDomainSetup>属性中的备注部分所述<xref:System.AppDomain.GetData%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2147">You can inspect the values of system entries with the <xref:System.AppDomain.GetData%2A> method or the equivalent <xref:System.AppDomainSetup> properties described in the Remarks section for the <xref:System.AppDomain.GetData%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-2148"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2148"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d7ccd-2149"><paramref name="name" /> 指定系统定义的属性字符串，并且 <paramref name="permission" /> 不为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2149"><paramref name="name" /> specifies a system-defined property string and <paramref name="permission" /> is not <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="d7ccd-2150">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2150">requires full trust for the immediate caller.</span></span> <span data-ttu-id="d7ccd-2151">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2151">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetDynamicBase">
      <MemberSignature Language="C#" Value="public void SetDynamicBase (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDynamicBase(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.SetDynamicBase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetDynamicBase (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetDynamicBase(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetDynamicBase : string -&gt; unit" Usage="appDomain.SetDynamicBase path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use AppDomainSetup.DynamicBase")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("AppDomain.SetDynamicBase has been deprecated. Please investigate the use of AppDomainSetup.DynamicBase instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="d7ccd-2152">完全限定路径，是存储动态程序集的子目录的基目录。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2152">The fully qualified path that is the base directory for subdirectories where dynamic assemblies are stored.</span></span></param>
        <summary><span data-ttu-id="d7ccd-2153">建立指定的目录路径，作为存储和访问动态生成的文件的子目录的基目录。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2153">Establishes the specified directory path as the base directory for subdirectories where dynamically generated files are stored and accessed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-2154">此方法设置<xref:System.AppDomainSetup.DynamicBase%2A>属性的内部<xref:System.AppDomainSetup>与此实例关联。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2154">This method sets the <xref:System.AppDomainSetup.DynamicBase%2A> property of the internal <xref:System.AppDomainSetup> associated with this instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-2155">此方法现已过时，并且不应使用新的开发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2155">This method is now obsolete, and should not be used for new development.</span></span> <span data-ttu-id="d7ccd-2156">下面的示例演示如何使用非过时的替代项，<xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2156">The following example shows how to use the non-obsolete alternative, the <xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="d7ccd-2157">此示例的说明，请参阅<xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=nameWithType>属性或<xref:System.AppDomain.DynamicDirectory%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2157">For an explanation of this example, see the <xref:System.AppDomainSetup.DynamicBase%2A?displayProperty=nameWithType> property or the <xref:System.AppDomain.DynamicDirectory%2A> property.</span></span>  
  
 [!code-cpp[ADDynamicBase#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADDynamicBase/CPP/addynamicbase.cpp#1)]
 [!code-csharp[ADDynamicBase#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADDynamicBase/CS/addynamicbase.cs#1)]
 [!code-vb[ADDynamicBase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADDynamicBase/VB/addynamicbase.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-2158">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2158">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="d7ccd-2159">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2159">requires full trust for the immediate caller.</span></span> <span data-ttu-id="d7ccd-2160">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2160">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="P:System.AppDomainSetup.DynamicBase" />
      </Docs>
    </Member>
    <Member MemberName="SetPrincipalPolicy">
      <MemberSignature Language="C#" Value="public void SetPrincipalPolicy (System.Security.Principal.PrincipalPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPrincipalPolicy(valuetype System.Security.Principal.PrincipalPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetPrincipalPolicy (policy As PrincipalPolicy)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetPrincipalPolicy(System::Security::Principal::PrincipalPolicy policy);" />
      <MemberSignature Language="F#" Value="member this.SetPrincipalPolicy : System.Security.Principal.PrincipalPolicy -&gt; unit" Usage="appDomain.SetPrincipalPolicy policy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Principal.PrincipalPolicy" />
      </Parameters>
      <Docs>
        <param name="policy"><span data-ttu-id="d7ccd-2161"><see cref="T:System.Security.Principal.PrincipalPolicy" /> 值之一，指定要附加到线程的主体对象类型。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2161">One of the <see cref="T:System.Security.Principal.PrincipalPolicy" /> values that specifies the type of the principal object to attach to threads.</span></span></param>
        <summary><span data-ttu-id="d7ccd-2162">指定在此应用程序域中执行时如果线程尝试绑定到用户，用户和标识对象应如何附加到该线程。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2162">Specifies how principal and identity objects should be attached to a thread if the thread attempts to bind to a principal while executing in this application domain.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-2163">设置此值才有效，如果在使用前设置<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2163">Setting this value will only be effective if you set it before using the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="d7ccd-2164">例如，如果您设置<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType>到给定的主体 （例如，泛型主体），然后使用<xref:System.AppDomain.SetPrincipalPolicy%2A>方法以设置<xref:System.Security.Principal.PrincipalPolicy>到<xref:System.Security.Principal.PrincipalPolicy.WindowsPrincipal>，当前主体将保留泛型主体。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2164">For example, if you set <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> to a given principal (for example, a generic principal) and then use the <xref:System.AppDomain.SetPrincipalPolicy%2A> method to set the <xref:System.Security.Principal.PrincipalPolicy> to <xref:System.Security.Principal.PrincipalPolicy.WindowsPrincipal>, the current principal will remain the generic principal.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-2165">下面的示例演示使用的线程的影响<xref:System.AppDomain.SetPrincipalPolicy%2A>方法，以更改应用程序域的主体的策略。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2165">The following example shows the effect on threads of using the <xref:System.AppDomain.SetPrincipalPolicy%2A> method to change the principal policy of the application domain.</span></span> <span data-ttu-id="d7ccd-2166">它还显示使用的效果<xref:System.AppDomain.SetThreadPrincipal%2A>方法，以更改可用于将附加到应用程序域中线程的主体。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2166">It also shows the effect of using the <xref:System.AppDomain.SetThreadPrincipal%2A> method to change the principal that is available for attaching to threads in the application domain.</span></span>  
  
 [!code-cpp[ADPrincipal#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADPrincipal/CPP/adprincipal.cpp#1)]
 [!code-csharp[ADPrincipal#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADPrincipal/CS/adprincipal.cs#1)]
 [!code-vb[ADPrincipal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADPrincipal/VB/adprincipal.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-2167">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2167">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-2168">能够操作主体对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2168">for ability to manipulate the principal object.</span></span> <span data-ttu-id="d7ccd-2169">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2169">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span> <span data-ttu-id="d7ccd-2170">安全操作： <see cref="F:System.Security.Permissions.SecurityAction.Demand" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2170">Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetShadowCopyFiles">
      <MemberSignature Language="C#" Value="public void SetShadowCopyFiles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetShadowCopyFiles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.SetShadowCopyFiles" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetShadowCopyFiles ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetShadowCopyFiles();" />
      <MemberSignature Language="F#" Value="member this.SetShadowCopyFiles : unit -&gt; unit" Usage="appDomain.SetShadowCopyFiles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use AppDomainSetup.ShadowCopyFiles")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("AppDomain.SetShadowCopyFiles has been deprecated. Please investigate the use of AppDomainSetup.ShadowCopyFiles instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d7ccd-2171">打开影像复制功能。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2171">Turns on shadow copying.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-2172">卷影复制的详细信息，请参阅[卷影复制程序集](~/docs/framework/app-domains/shadow-copy-assemblies.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2172">For more information on shadow copying, see [Shadow Copying Assemblies](~/docs/framework/app-domains/shadow-copy-assemblies.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-2173">此方法现已过时，并且不应使用新的开发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2173">This method is now obsolete, and should not be used for new development.</span></span>  
  
 [!code-cpp[adproperties#1](~/samples/snippets/cpp/VS_Snippets_CLR/adproperties/CPP/adproperties.cpp#1)]
 [!code-csharp[adproperties#1](~/samples/snippets/csharp/VS_Snippets_CLR/adproperties/CS/adproperties.cs#1)]
 [!code-vb[adproperties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/adproperties/VB/adproperties.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-2174">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2174">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="d7ccd-2175">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2175">requires full trust for the immediate caller.</span></span> <span data-ttu-id="d7ccd-2176">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2176">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="~/docs/framework/app-domains/shadow-copy-assemblies.md"><span data-ttu-id="d7ccd-2177">卷影复制程序集</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2177">Shadow Copying Assemblies</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetShadowCopyPath">
      <MemberSignature Language="C#" Value="public void SetShadowCopyPath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetShadowCopyPath(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.SetShadowCopyPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetShadowCopyPath (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetShadowCopyPath(System::String ^ path);" />
      <MemberSignature Language="F#" Value="abstract member SetShadowCopyPath : string -&gt; unit&#xA;override this.SetShadowCopyPath : string -&gt; unit" Usage="appDomain.SetShadowCopyPath path" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.SetShadowCopyPath(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use AppDomainSetup.ShadowCopyDirectories")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("AppDomain.SetShadowCopyPath has been deprecated. Please investigate the use of AppDomainSetup.ShadowCopyDirectories instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="d7ccd-2178">目录名列表，各名称用分号隔开。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2178">A list of directory names, where each name is separated by a semicolon.</span></span></param>
        <summary><span data-ttu-id="d7ccd-2179">确定指定目录路径为要进行影像复制的程序集的位置。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2179">Establishes the specified directory path as the location of assemblies to be shadow copied.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-2180">默认情况下，卷影副本包含通过探测所发现的所有程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2180">By default, a shadow copy includes all assemblies found through probing.</span></span> <span data-ttu-id="d7ccd-2181"><xref:System.AppDomain.SetShadowCopyPath%2A>方法将卷影副本限制为指定的目录中的程序集`path`。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2181">The <xref:System.AppDomain.SetShadowCopyPath%2A> method restricts the shadow copy to the assemblies in the directories specified by `path`.</span></span>  
  
 <span data-ttu-id="d7ccd-2182"><xref:System.AppDomain.SetShadowCopyPath%2A>方法未指定要在其中搜索的程序集的其他目录。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2182">The <xref:System.AppDomain.SetShadowCopyPath%2A> method does not specify additional directories to be searched for assemblies.</span></span> <span data-ttu-id="d7ccd-2183">要进行卷影复制程序集必须已经位于搜索路径，例如下<xref:System.AppDomain.BaseDirectory%2A>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2183">Assemblies to be shadow-copied must already be located in the search path, for example under <xref:System.AppDomain.BaseDirectory%2A>.</span></span> <span data-ttu-id="d7ccd-2184"><xref:System.AppDomain.SetShadowCopyPath%2A>方法指定的搜索路径均有资格将卷影复制。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2184">The <xref:System.AppDomain.SetShadowCopyPath%2A> method specifies which search paths are eligible to be shadow-copied.</span></span>  
  
 <span data-ttu-id="d7ccd-2185">此方法设置<xref:System.AppDomainSetup.ShadowCopyDirectories%2A>属性的内部<xref:System.AppDomainSetup>与此实例关联。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2185">This method sets the <xref:System.AppDomainSetup.ShadowCopyDirectories%2A> property of the internal <xref:System.AppDomainSetup> associated with this instance.</span></span>  
  
 <span data-ttu-id="d7ccd-2186">卷影复制的详细信息，请参阅[卷影复制程序集](~/docs/framework/app-domains/shadow-copy-assemblies.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2186">For more information on shadow copying, see [Shadow Copying Assemblies](~/docs/framework/app-domains/shadow-copy-assemblies.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-2187">此方法现已过时，并且不应使用新的开发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2187">This method is now obsolete, and should not be used for new development.</span></span>  
  
 [!code-cpp[ADShadowCopy#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADShadowCopy/CPP/adshadowcopy.cpp#1)]
 [!code-csharp[ADShadowCopy#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADShadowCopy/CS/adshadowcopy.cs#1)]
 [!code-vb[ADShadowCopy#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADShadowCopy/VB/adshadowcopy.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-2188">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2188">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="d7ccd-2189">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2189">requires full trust for the immediate caller.</span></span> <span data-ttu-id="d7ccd-2190">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2190">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <related type="Article" href="~/docs/framework/app-domains/shadow-copy-assemblies.md"><span data-ttu-id="d7ccd-2191">卷影复制程序集</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2191">Shadow Copying Assemblies</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetThreadPrincipal">
      <MemberSignature Language="C#" Value="public void SetThreadPrincipal (System.Security.Principal.IPrincipal principal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetThreadPrincipal(class System.Security.Principal.IPrincipal principal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.SetThreadPrincipal(System.Security.Principal.IPrincipal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetThreadPrincipal (principal As IPrincipal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetThreadPrincipal(System::Security::Principal::IPrincipal ^ principal);" />
      <MemberSignature Language="F#" Value="member this.SetThreadPrincipal : System.Security.Principal.IPrincipal -&gt; unit" Usage="appDomain.SetThreadPrincipal principal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Principal.IPrincipal" />
      </Parameters>
      <Docs>
        <param name="principal"><span data-ttu-id="d7ccd-2192">要附加到线程的主体对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2192">The principal object to attach to threads.</span></span></param>
        <summary><span data-ttu-id="d7ccd-2193">设置在以下情况下要附加到线程的默认主体对象，即当线程在此应用程序域中执行时，如果线程尝试绑定到主体这种情况。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2193">Sets the default principal object to be attached to threads if they attempt to bind to a principal while executing in this application domain.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d7ccd-2194">下面的示例演示使用的效果<xref:System.AppDomain.SetThreadPrincipal%2A>方法，以更改可用于将附加到应用程序域中执行的线程的主体。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2194">The following example shows the effect of using the <xref:System.AppDomain.SetThreadPrincipal%2A> method to change the principal that is available for attaching to threads that are executing in the application domain.</span></span> <span data-ttu-id="d7ccd-2195">它还演示了使用的线程的影响<xref:System.AppDomain.SetPrincipalPolicy%2A>方法，以更改应用程序域的主体的策略。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2195">It also shows the effect on threads of using the <xref:System.AppDomain.SetPrincipalPolicy%2A> method to change the principal policy of the application domain.</span></span>  
  
 [!code-cpp[ADPrincipal#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADPrincipal/CPP/adprincipal.cpp#1)]
 [!code-csharp[ADPrincipal#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADPrincipal/CS/adprincipal.cs#1)]
 [!code-vb[ADPrincipal#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADPrincipal/VB/adprincipal.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-2196"><paramref name="principal" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2196"><paramref name="principal" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Policy.PolicyException"><span data-ttu-id="d7ccd-2197">已经设置了线程用户。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2197">The thread principal has already been set.</span></span></exception>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-2198">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2198">The operation is attempted on an unloaded application domain.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-2199">能够操作主体对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2199">for ability to manipulate the principal object.</span></span> <span data-ttu-id="d7ccd-2200">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2200">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span> <span data-ttu-id="d7ccd-2201">安全操作： <see cref="F:System.Security.Permissions.SecurityAction.Demand" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2201">Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetupInformation">
      <MemberSignature Language="C#" Value="public AppDomainSetup SetupInformation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AppDomainSetup SetupInformation" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.SetupInformation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SetupInformation As AppDomainSetup" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property AppDomainSetup ^ SetupInformation { AppDomainSetup ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SetupInformation : AppDomainSetup" Usage="System.AppDomain.SetupInformation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomainSetup</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7ccd-2202">获取此实例的应用程序域配置信息。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2202">Gets the application domain configuration information for this instance.</span></span></summary>
        <value><span data-ttu-id="d7ccd-2203">应用程序域初始化信息。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2203">The application domain initialization information.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-2204">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2204">The operation is attempted on an unloaded application domain.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ShadowCopyFiles">
      <MemberSignature Language="C#" Value="public bool ShadowCopyFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShadowCopyFiles" />
      <MemberSignature Language="DocId" Value="P:System.AppDomain.ShadowCopyFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShadowCopyFiles As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShadowCopyFiles { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShadowCopyFiles : bool" Usage="System.AppDomain.ShadowCopyFiles" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System._AppDomain.ShadowCopyFiles</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7ccd-2205">获取应用程序域是否配置为影像副本文件的指示。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2205">Gets an indication whether the application domain is configured to shadow copy files.</span></span></summary>
        <value><span data-ttu-id="d7ccd-2206">如果应用程序域配置为卷影副本文件，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2206"><see langword="true" /> if the application domain is configured to shadow copy files; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-2207">有关详细信息，请参阅<xref:System.AppDomainSetup.ShadowCopyFiles%2A?displayProperty=nameWithType>并[卷影复制程序集](~/docs/framework/app-domains/shadow-copy-assemblies.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2207">For more information, see <xref:System.AppDomainSetup.ShadowCopyFiles%2A?displayProperty=nameWithType> and [Shadow Copying Assemblies](~/docs/framework/app-domains/shadow-copy-assemblies.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-2208">在卸载的应用程序域上尝试该操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2208">The operation is attempted on an unloaded application domain.</span></span></exception>
        <altmember cref="P:System.AppDomainSetup.ShadowCopyFiles" />
        <related type="Article" href="~/docs/framework/app-domains/shadow-copy-assemblies.md"><span data-ttu-id="d7ccd-2209">卷影复制程序集</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2209">Shadow Copying Assemblies</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System._AppDomain.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _AppDomain.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System._AppDomain.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.System#_AppDomain#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _AppDomain.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System._AppDomain.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = _AppDomain::GetIDsOfNames;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="d7ccd-2210">留待将来使用。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2210">Reserved for future use.</span></span> <span data-ttu-id="d7ccd-2211">必须为 IID_NULL。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2211">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="d7ccd-2212">要映射的名称的传入数组。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2212">Passed-in array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="d7ccd-2213">要映射的名称的计数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2213">Count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="d7ccd-2214">要在其中解释名称的区域设置上下文。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2214">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="d7ccd-2215">调用方分配的数组，用于接收与名称对应的 ID。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2215">Caller-allocated array which receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="d7ccd-2216">将一组名称映射为对应的一组调度标识符。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2216">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-2217">此方法用于访问托管类到从非托管代码，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2217">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="d7ccd-2218">有关详细信息`IDispatch::GetIDsOfNames`，请参阅 MSDN 库。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2218">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="d7ccd-2219">不支持使用 COM <c>IDispatch</c> 接口的后期绑定访问。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2219">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System._AppDomain.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _AppDomain.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System._AppDomain.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.System#_AppDomain#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _AppDomain.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System._AppDomain.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = _AppDomain::GetTypeInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="d7ccd-2220">要返回的类型信息。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2220">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="d7ccd-2221">类型信息的区域设置标识符。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2221">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="d7ccd-2222">接收一个指针，指向请求的类型信息对象。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2222">Receives a pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="d7ccd-2223">检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2223">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-2224">此方法用于访问托管类到从非托管代码，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2224">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="d7ccd-2225">有关详细信息`IDispatch::GetTypeInfo`，请参阅 MSDN 库。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2225">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="d7ccd-2226">不支持使用 COM <c>IDispatch</c> 接口的后期绑定访问。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2226">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System._AppDomain.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _AppDomain.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System._AppDomain.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.System#_AppDomain#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _AppDomain.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System._AppDomain.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = _AppDomain::GetTypeInfoCount;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="d7ccd-2227">指向一个位置，该位置接收对象提供的类型信息接口的数量。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2227">Points to a location that receives the number of type information interfaces provided by the object.</span></span></param>
        <summary><span data-ttu-id="d7ccd-2228">检索对象提供的类型信息接口的数量（0 或 1）。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2228">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-2229">此方法用于访问托管类到从非托管代码，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2229">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="d7ccd-2230">有关详细信息`IDispatch::GetTypeInfoCount`，请参阅 MSDN 库。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2230">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="d7ccd-2231">不支持使用 COM <c>IDispatch</c> 接口的后期绑定访问。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2231">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System._AppDomain.Invoke">
      <MemberSignature Language="C#" Value="void _AppDomain.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System._AppDomain.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.System#_AppDomain#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _AppDomain.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System._AppDomain.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = _AppDomain::Invoke;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="d7ccd-2232">标识成员。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2232">Identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="d7ccd-2233">留待将来使用。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2233">Reserved for future use.</span></span> <span data-ttu-id="d7ccd-2234">必须为 IID_NULL。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2234">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="d7ccd-2235">要在其中解释参数的区域设置上下文。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2235">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="d7ccd-2236">描述调用的上下文的标志。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2236">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="d7ccd-2237">指向一个结构的指针，该结构包含一个自变量数组、一个命名自变量的 DISPID 自变量数组和数组中元素数的计数。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2237">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="d7ccd-2238">指向要存储结果的位置的指针。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2238">Pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="d7ccd-2239">指向一个包含异常信息的结构的指针。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2239">Pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="d7ccd-2240">第一个出错自变量的索引。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2240">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="d7ccd-2241">提供对某一对象公开的属性和方法的访问。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2241">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-2242">此方法用于访问托管类到从非托管代码，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2242">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="d7ccd-2243">有关详细信息`IDispatch::Invoke`，请参阅 MSDN 库。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2243">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="d7ccd-2244">不支持使用 COM <c>IDispatch</c> 接口的后期绑定访问。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2244">Late-bound access using the COM <c>IDispatch</c> interface is not supported.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="appDomain.ToString " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System._AppDomain.ToString</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d7ccd-2245">获取一个字符串表示，包含应用程序域友好名称和任意上下文策略。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2245">Obtains a string representation that includes the friendly name of the application domain and any context policies.</span></span></summary>
        <returns><span data-ttu-id="d7ccd-2246">一个字符串，通过连接字符串“Name:”、应用程序域的友好名称以及上下文策略的字符串表示或字符串“There are no context policies”而成。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2246">A string formed by concatenating the literal string "Name:", the friendly name of the application domain, and either string representations of the context policies or the string "There are no context policies."</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d7ccd-2247">下面的代码示例显示的返回值<xref:System.AppDomain.ToString%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2247">The following code example displays the return value of the <xref:System.AppDomain.ToString%2A> method.</span></span>  
  
 [!code-cpp[ADToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADToString/CPP/adtostring.cpp#1)]
 [!code-csharp[ADToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADToString/CS/adtostring.cs#1)]
 [!code-vb[ADToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADToString/VB/adtostring.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AppDomainUnloadedException"><span data-ttu-id="d7ccd-2248">当前 <see cref="T:System.AppDomain" /> 表示的应用程序域已卸载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2248">The application domain represented by the current <see cref="T:System.AppDomain" /> has been unloaded.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TypeResolve">
      <MemberSignature Language="C#" Value="public event ResolveEventHandler TypeResolve;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ResolveEventHandler TypeResolve" />
      <MemberSignature Language="DocId" Value="E:System.AppDomain.TypeResolve" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TypeResolve As ResolveEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event ResolveEventHandler ^ TypeResolve;" />
      <MemberSignature Language="F#" Value="member this.TypeResolve : ResolveEventHandler " Usage="member this.TypeResolve : System.ResolveEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System._AppDomain.TypeResolve</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ResolveEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7ccd-2249">在对类型的解析失败时发生。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2249">Occurs when the resolution of a type fails.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-2250"><xref:System.AppDomain.TypeResolve>事件发生时公共语言运行时不能确定程序集，可以创建请求的类型。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2250">The <xref:System.AppDomain.TypeResolve> event occurs when the common language runtime is unable to determine the assembly that can create the requested type.</span></span> <span data-ttu-id="d7ccd-2251">如果类型定义动态程序集中，或在动态程序集未定义类型，但运行时不知道该类型定义中的程序集，这可能发生。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2251">This can occur if the type is defined in a dynamic assembly, or the type is not defined in a dynamic assembly but the runtime does not know which assembly the type is defined in.</span></span> <span data-ttu-id="d7ccd-2252">后一种情况可能发生时<xref:System.Type.GetType%2A?displayProperty=nameWithType>调用具有程序集名称不受限定的类型名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2252">The latter situation can occur when <xref:System.Type.GetType%2A?displayProperty=nameWithType> is called with a type name that is not qualified with the assembly name.</span></span>  
  
 <span data-ttu-id="d7ccd-2253"><xref:System.ResolveEventHandler>为此事件可以尝试查找并创建类型。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2253">The <xref:System.ResolveEventHandler> for this event can attempt to locate and create the type.</span></span>  
  
 <span data-ttu-id="d7ccd-2254">但是，<xref:System.AppDomain.TypeResolve>事件，则不会运行时知道不能以查找特定程序集中的类型。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2254">However, the <xref:System.AppDomain.TypeResolve> event does not occur if the runtime knows it is not possible to find a type in certain assemblies.</span></span> <span data-ttu-id="d7ccd-2255">例如，如果因为运行时知道类型不能动态地添加到静态程序集未在静态程序集中找到的类型不会不会发生此事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2255">For example, this event does not occur if the type is not found in a static assembly because the runtime knows types cannot be added dynamically to static assemblies.</span></span>  
  
 <span data-ttu-id="d7ccd-2256">开头[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，则<xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType>属性包含请求的类型的程序集。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2256">Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the <xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType> property contains the assembly that requested the type.</span></span> <span data-ttu-id="d7ccd-2257">有关详情，请参阅<xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2257">For more information, see <xref:System.ResolveEventArgs.RequestingAssembly%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="d7ccd-2258">若要注册此事件的事件处理程序，必须具有所需的权限，或<xref:System.Security.SecurityException>引发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2258">To register an event handler for this event, you must have the required permissions, or a <xref:System.Security.SecurityException> is thrown.</span></span>  
  
 <span data-ttu-id="d7ccd-2259">有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2259">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-2260">下面的示例演示如何<xref:System.AppDomain.TypeResolve>事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2260">The following sample demonstrates the <xref:System.AppDomain.TypeResolve> event.</span></span>  
  
 <span data-ttu-id="d7ccd-2261">有关运行此代码示例，必须提供完全限定的程序集名称。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2261">For this code example to run, you must provide the fully qualified assembly name.</span></span> <span data-ttu-id="d7ccd-2262">有关如何获取完全限定的程序集名称的信息，请参阅[程序集名称](~/docs/framework/app-domains/assembly-names.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2262">For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).</span></span>  
  
 [!code-cpp[AppDomain_TypeResolve#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_TypeResolve/CPP/typeresolve.cpp#1)]
 [!code-csharp[AppDomain_TypeResolve#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_TypeResolve/CS/typeresolve.cs#1)]
 [!code-vb[AppDomain_TypeResolve#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_TypeResolve/VB/typeresolve.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="d7ccd-2263">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2263">requires full trust for the immediate caller.</span></span> <span data-ttu-id="d7ccd-2264">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2264">This member cannot be used by partially trusted or transparent code.</span></span></permission>
        <altmember cref="P:System.ResolveEventArgs.RequestingAssembly" />
      </Docs>
    </Member>
    <Member MemberName="UnhandledException">
      <MemberSignature Language="C#" Value="public event UnhandledExceptionEventHandler UnhandledException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.UnhandledExceptionEventHandler UnhandledException" />
      <MemberSignature Language="DocId" Value="E:System.AppDomain.UnhandledException" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledException As UnhandledExceptionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event UnhandledExceptionEventHandler ^ UnhandledException;" />
      <MemberSignature Language="F#" Value="member this.UnhandledException : UnhandledExceptionEventHandler " Usage="member this.UnhandledException : System.UnhandledExceptionEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System._AppDomain.UnhandledException</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>add: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>remove: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d7ccd-2265">当某个异常未被捕获时出现。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2265">Occurs when an exception is not caught.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-2266">此事件提供通知的未捕获的异常。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2266">This event provides notification of uncaught exceptions.</span></span> <span data-ttu-id="d7ccd-2267">它允许应用程序的系统默认处理程序报告给用户异常和终止应用程序之前记录有关异常的信息。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2267">It allows the application to log information about the exception before the system default handler reports the exception to the user and terminates the application.</span></span> <span data-ttu-id="d7ccd-2268">如果应用程序的状态的足够信息，则可用的其他操作可能会采取-如保存程序便于以后恢复数据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2268">If sufficient information about the state of the application is available, other actions may be undertaken - such as saving program data for later recovery.</span></span> <span data-ttu-id="d7ccd-2269">建议谨慎行事，因为未处理异常时，可能会损坏程序数据。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2269">Caution is advised, because program data can become corrupted when exceptions are not handled.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7ccd-2270">在.NET framework 1.0 和 1.1 中，应用程序终止时调试选项报告和对用户引发此事件之前，而不是后。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2270">In the .NET Framework versions 1.0 and 1.1, application termination and debugging options are reported to the user before this event is raised, rather than after.</span></span>  
  
 <span data-ttu-id="d7ccd-2271">可以在任何应用程序域中处理此事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2271">This event can be handled in any application domain.</span></span> <span data-ttu-id="d7ccd-2272">但是，不一定会引发事件在发生异常的应用程序域中。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2272">However, the event is not necessarily raised in the application domain where the exception occurred.</span></span> <span data-ttu-id="d7ccd-2273">仅当没有找到适用的异常处理程序，因此可以引发该事件的第一个位置是在生成该线程的应用程序域中的线程的整个堆栈已被展开，会处理异常。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2273">An exception is unhandled only if the entire stack for the thread has been unwound without finding an applicable exception handler, so the first place the event can be raised is in the application domain where the thread originated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7ccd-2274">在.NET framework 1.0 和 1.1 中，仅用于启动的应用程序时，系统会创建默认应用程序域时发生此事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2274">In the .NET Framework versions 1.0 and 1.1, this event occurs only for the default application domain that is created by the system when an application is started.</span></span> <span data-ttu-id="d7ccd-2275">如果应用程序可创建其他应用程序域，在这些应用程序域中指定此事件的委托无效。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2275">If an application creates additional application domains, specifying a delegate for this event in those applications domains has no effect.</span></span>  
  
 <span data-ttu-id="d7ccd-2276">如果<xref:System.AppDomain.UnhandledException>默认应用程序域中处理事件，对于任何未经处理的异常在任何线程中，无论何种应用程序域启动的线程存在引发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2276">If the <xref:System.AppDomain.UnhandledException> event is handled in the default application domain, it is raised there for any unhandled exception in any thread, no matter what application domain the thread started in.</span></span> <span data-ttu-id="d7ccd-2277">如果在具有的事件处理程序的应用程序域中启动线程<xref:System.AppDomain.UnhandledException>，该应用程序域中引发该事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2277">If the thread started in an application domain that has an event handler for <xref:System.AppDomain.UnhandledException>, the event is raised in that application domain.</span></span> <span data-ttu-id="d7ccd-2278">如果该应用程序域不是默认应用程序域，并且在默认应用程序域中还有一个事件处理程序，将这两个应用程序域中引发事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2278">If that application domain is not the default application domain, and there is also an event handler in the default application domain, the event is raised in both application domains.</span></span>  
  
 <span data-ttu-id="d7ccd-2279">例如，假设中启动线程应用程序域"AD1"调用"AD2"的应用程序域中的方法，并从那里调用的方法在应用程序域"AD3"，它将引发异常。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2279">For example, suppose a thread starts in application domain "AD1", calls a method in application domain "AD2", and from there calls a method in application domain "AD3", where it throws an exception.</span></span> <span data-ttu-id="d7ccd-2280">在其中的第一个应用程序域<xref:System.AppDomain.UnhandledException>可以引发事件是"AD1"。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2280">The first application domain in which the <xref:System.AppDomain.UnhandledException> event can be raised is "AD1".</span></span> <span data-ttu-id="d7ccd-2281">如果该应用程序域不是默认应用程序域，那么还可以在默认应用程序域中引发该事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2281">If that application domain is not the default application domain, the event can also be raised in the default application domain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7ccd-2282">公共语言运行时挂起时的事件处理程序的线程中止<xref:System.AppDomain.UnhandledException>执行事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2282">The common language runtime suspends thread aborts while event handlers for the <xref:System.AppDomain.UnhandledException> event are executing.</span></span>  
  
 <span data-ttu-id="d7ccd-2283">如果事件处理程序具有<xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute>属性带有相应标志的事件处理程序被视为受约束的执行区域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2283">If the event handler has a <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute> attribute with the appropriate flags, the event handler is treated as a constrained execution region.</span></span>  
  
 <span data-ttu-id="d7ccd-2284">从开始[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]，不会引发此事件的损坏状态的进程，如堆栈溢出，或者是访问冲突，除非事件处理程序是安全关键的并且具有异常<xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute>属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2284">Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], this event is not raised for exceptions that corrupt the state of the process, such as stack overflows or access violations, unless the event handler is security-critical and has the <xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute> attribute.</span></span>  
  
 <span data-ttu-id="d7ccd-2285">在.NET framework 1.0 和 1.1 版中，在主应用程序线程以外的线程中出现未经处理的异常由运行时捕获，并因此不会导致应用程序终止。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2285">In the .NET Framework versions 1.0 and 1.1, an unhandled exception that occurs in a thread other than the main application thread is caught by the runtime and therefore does not cause the application to terminate.</span></span> <span data-ttu-id="d7ccd-2286">因此，很可能<xref:System.AppDomain.UnhandledException>不终止的应用程序的情况下引发的事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2286">Thus, it is possible for the <xref:System.AppDomain.UnhandledException> event to be raised without the application terminating.</span></span> <span data-ttu-id="d7ccd-2287">从.NET Framework 2.0 版开始，此对子子线程中未经处理的异常已被移除，因为这种无提示失败的累积效应包含性能降低、 损坏的数据和锁定，所有这些非常难以调试。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2287">Starting with the .NET Framework version 2.0, this backstop for unhandled exceptions in child threads was removed, because the cumulative effect of such silent failures included performance degradation, corrupted data, and lockups, all of which were difficult to debug.</span></span> <span data-ttu-id="d7ccd-2288">有关详细信息，包括一系列情况下在其中运行时不会终止，请参阅[托管线程异常](~/docs/standard/threading/exceptions-in-managed-threads.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2288">For more information, including a list of cases in which the runtime does not terminate, see [Exceptions in Managed Threads](~/docs/standard/threading/exceptions-in-managed-threads.md).</span></span>  
  
 <span data-ttu-id="d7ccd-2289">若要注册此事件的事件处理程序，必须具有所需的权限，或<xref:System.Security.SecurityException>引发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2289">To register an event handler for this event, you must have the required permissions, or a <xref:System.Security.SecurityException> is thrown.</span></span>  
  
 <span data-ttu-id="d7ccd-2290">有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2290">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
## <a name="other-events-for-unhandled-exceptions"></a><span data-ttu-id="d7ccd-2291">未经处理的异常的其他事件</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2291">Other Events for Unhandled Exceptions</span></span>  
 <span data-ttu-id="d7ccd-2292">对于某些应用程序模型，<xref:System.AppDomain.UnhandledException>主应用程序线程中未经处理的异常时，可以由其他事件被抢占的事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2292">For certain application models, the <xref:System.AppDomain.UnhandledException> event can be preempted by other events if the unhandled exception occurs in the main application thread.</span></span>  
  
 <span data-ttu-id="d7ccd-2293">使用 Windows 窗体的应用程序中未经处理的异常中的主应用程序线程原因<xref:System.Windows.Forms.Application.ThreadException?displayProperty=nameWithType>事件被引发。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2293">In applications that use Windows Forms, unhandled exceptions in the main application thread cause the <xref:System.Windows.Forms.Application.ThreadException?displayProperty=nameWithType> event to be raised.</span></span> <span data-ttu-id="d7ccd-2294">如果此事件的处理，默认行为是未处理的异常不会终止该应用程序，尽管应用程序将继续处于未知状态。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2294">If this event is handled, the default behavior is that the unhandled exception does not terminate the application, although the application is left in an unknown state.</span></span> <span data-ttu-id="d7ccd-2295">在这种情况下，<xref:System.AppDomain.UnhandledException>不会引发事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2295">In that case, the <xref:System.AppDomain.UnhandledException> event is not raised.</span></span> <span data-ttu-id="d7ccd-2296">可以更改此行为，通过使用应用程序配置文件，或通过使用<xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A?displayProperty=nameWithType>方法以将模式更改为<xref:System.Windows.Forms.UnhandledExceptionMode.ThrowException?displayProperty=nameWithType>之前<xref:System.Windows.Forms.Application.ThreadException>挂接事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2296">This behavior can be changed by using the application configuration file, or by using the <xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A?displayProperty=nameWithType> method to change the mode to <xref:System.Windows.Forms.UnhandledExceptionMode.ThrowException?displayProperty=nameWithType> before the <xref:System.Windows.Forms.Application.ThreadException> event handler is hooked up.</span></span> <span data-ttu-id="d7ccd-2297">这仅适用于主应用程序线程。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2297">This applies only to the main application thread.</span></span> <span data-ttu-id="d7ccd-2298"><xref:System.AppDomain.UnhandledException>的未经处理的异常引发在其他线程中引发事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2298">The <xref:System.AppDomain.UnhandledException> event is raised for unhandled exceptions thrown in other threads.</span></span>  
  
 <span data-ttu-id="d7ccd-2299">从 Microsoft Visual Studio 2005 开始，Visual Basic 应用程序框架提供的主应用程序线程中未经处理异常的另一个事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2299">Starting with Microsoft Visual Studio 2005, the Visual Basic application framework provides another event for unhandled exceptions in the main application thread.</span></span> <span data-ttu-id="d7ccd-2300">请参阅<xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException?displayProperty=nameWithType>事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2300">See the <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException?displayProperty=nameWithType> event.</span></span> <span data-ttu-id="d7ccd-2301">此事件有一个事件参数对象使用的事件参数对象与同名<xref:System.AppDomain.UnhandledException?displayProperty=nameWithType>，但具有不同的属性。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2301">This event has an event arguments object with the same name as the event arguments object used by <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType>, but with different properties.</span></span> <span data-ttu-id="d7ccd-2302">具体而言，此事件参数对象具有<xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A>属性，它允许应用程序继续运行，将忽略未处理的异常 （和应用程序处于未知状态）。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2302">In particular, this event arguments object has an <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> property that allows the application to continue running, ignoring the unhandled exception (and leaving the application in an unknown state).</span></span> <span data-ttu-id="d7ccd-2303">在这种情况下，<xref:System.AppDomain.UnhandledException?displayProperty=nameWithType>不会引发事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2303">In that case, the <xref:System.AppDomain.UnhandledException?displayProperty=nameWithType> event is not raised.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-2304">以下示例演示了<xref:System.AppDomain.UnhandledException>事件。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2304">The followingexample demonstrates the <xref:System.AppDomain.UnhandledException> event.</span></span> <span data-ttu-id="d7ccd-2305">它定义了一个事件处理程序`MyHandler`，每当在默认应用程序域中引发未经处理的异常时调用。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2305">It defines an event handler, `MyHandler`, that is invoked whenever an unhandled exception is thrown in the default application domain.</span></span> <span data-ttu-id="d7ccd-2306">然后，它会引发两种例外情况。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2306">It then throws two exceptions.</span></span> <span data-ttu-id="d7ccd-2307">第一个由**try/catch**块。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2307">The first is handled by a **try/catch** block.</span></span> <span data-ttu-id="d7ccd-2308">第二个是未经处理并调用`MyHandle`例程之前在应用程序终止。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2308">The second is unhandled and invokes the `MyHandle` routine before the application terminates.</span></span>  
  
 [!code-cpp[AppDomain_UnhandledException#1](~/samples/snippets/cpp/VS_Snippets_CLR/AppDomain_UnhandledException/CPP/unhandledexception.cpp#1)]
 [!code-csharp[AppDomain_UnhandledException#1](~/samples/snippets/csharp/VS_Snippets_CLR/AppDomain_UnhandledException/CS/unhandledexception.cs#1)]
 [!code-vb[AppDomain_UnhandledException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AppDomain_UnhandledException/VB/unhandledexception.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="d7ccd-2309">直接调用方需要完全信任。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2309">requires full trust for the immediate caller.</span></span> <span data-ttu-id="d7ccd-2310">不能由部分受信任的或透明的代码使用此成员。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2310">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Unload">
      <MemberSignature Language="C#" Value="public static void Unload (AppDomain domain);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unload(class System.AppDomain domain) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AppDomain.Unload(System.AppDomain)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Unload (domain As AppDomain)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unload(AppDomain ^ domain);" />
      <MemberSignature Language="F#" Value="static member Unload : AppDomain -&gt; unit" Usage="System.AppDomain.Unload domain" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.MayCorruptAppDomain, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="domain" Type="System.AppDomain" />
      </Parameters>
      <Docs>
        <param name="domain"><span data-ttu-id="d7ccd-2311">要卸载的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2311">An application domain to unload.</span></span></param>
        <summary><span data-ttu-id="d7ccd-2312">卸载指定的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2312">Unloads the specified application domain.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d7ccd-2313">.NET Framework 2.0 版中没有线程专用于卸载应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2313">In the .NET Framework version 2.0 there is a thread dedicated to unloading application domains.</span></span> <span data-ttu-id="d7ccd-2314">这提高了可靠性，尤其是在.NET Framework 承载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2314">This improves reliability, especially when the .NET Framework is hosted.</span></span> <span data-ttu-id="d7ccd-2315">当线程调用<xref:System.AppDomain.Unload%2A>，目标域做标记以进行卸载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2315">When a thread calls <xref:System.AppDomain.Unload%2A>, the target domain is marked for unloading.</span></span> <span data-ttu-id="d7ccd-2316">专用的线程尝试卸载域，并在域中的所有线程都将立即都中止。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2316">The dedicated thread attempts to unload the domain, and all threads in the domain are aborted.</span></span> <span data-ttu-id="d7ccd-2317">如果一个线程不会中止，例如因为它正在执行非托管的代码，或因为正在执行它`finally`块中的，然后在一段时间后<xref:System.CannotUnloadAppDomainException>最初调用线程中引发<xref:System.AppDomain.Unload%2A>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2317">If a thread does not abort, for example because it is executing unmanaged code, or because it is executing a `finally` block, then after a period of time a <xref:System.CannotUnloadAppDomainException> is thrown in the thread that originally called <xref:System.AppDomain.Unload%2A>.</span></span> <span data-ttu-id="d7ccd-2318">如果无法最终中止的线程结束时，目标域不是卸载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2318">If the thread that could not be aborted eventually ends, the target domain is not unloaded.</span></span> <span data-ttu-id="d7ccd-2319">因此，在.NET Framework 2.0 版`domain`不能保证卸载，因为它可能无法终止正在执行的线程。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2319">Thus, in the .NET Framework version 2.0 `domain` is not guaranteed to unload, because it might not be possible to terminate executing threads.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d7ccd-2320">在某些情况下，调用<xref:System.AppDomain.Unload%2A>会导致立即<xref:System.CannotUnloadAppDomainException>，例如它在终结器调用。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2320">In some cases, calling <xref:System.AppDomain.Unload%2A> causes an immediate <xref:System.CannotUnloadAppDomainException>, for example if it is called in a finalizer.</span></span>  
  
 <span data-ttu-id="d7ccd-2321">中的线程`domain`使用终止<xref:System.Threading.Thread.Abort%2A>方法，将引发<xref:System.Threading.ThreadAbortException>线程中。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2321">The threads in `domain` are terminated using the <xref:System.Threading.Thread.Abort%2A> method, which throws a <xref:System.Threading.ThreadAbortException> in the thread.</span></span> <span data-ttu-id="d7ccd-2322">尽管立即终止线程，但它仍可以继续执行不可预测中的时间量`finally`子句。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2322">Although the thread should terminate promptly, it can continue executing for an unpredictable amount of time in a `finally` clause.</span></span>  
  
## <a name="version-compatibility"></a><span data-ttu-id="d7ccd-2323">版本兼容性</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2323">Version Compatibility</span></span>  
 <span data-ttu-id="d7ccd-2324">.NET Framework 版本 1.0 和 1.1 中，如果线程的调用中<xref:System.AppDomain.Unload%2A>是否正在`domain`，另一个线程开始执行卸载操作。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2324">In the .NET Framework version 1.0 and 1.1 if the thread that calls <xref:System.AppDomain.Unload%2A> is running in `domain`, another thread is started to perform the unload operation.</span></span> <span data-ttu-id="d7ccd-2325">如果`domain`不能卸载<xref:System.CannotUnloadAppDomainException>不在原始线程上调用，该线程中引发<xref:System.AppDomain.Unload%2A>。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2325">If `domain` cannot be unloaded, a <xref:System.CannotUnloadAppDomainException> is thrown in that thread, not in the original thread that called <xref:System.AppDomain.Unload%2A>.</span></span> <span data-ttu-id="d7ccd-2326">但是，如果调用线程<xref:System.AppDomain.Unload%2A>外部运行`domain`，线程都会收到异常。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2326">However, if the thread that calls <xref:System.AppDomain.Unload%2A> is running outside `domain`, that thread receives the exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d7ccd-2327">下面的代码示例演示如何卸载应用程序域。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2327">The following code example shows how to unload an application domain.</span></span>  
  
 [!code-cpp[ADUnload#1](~/samples/snippets/cpp/VS_Snippets_CLR/ADUnload/CPP/adunload.cpp#1)]
 [!code-csharp[ADUnload#1](~/samples/snippets/csharp/VS_Snippets_CLR/ADUnload/CS/adunload.cs#1)]
 [!code-vb[ADUnload#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ADUnload/VB/adunload.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d7ccd-2328"><paramref name="domain" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2328"><paramref name="domain" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.CannotUnloadAppDomainException"><span data-ttu-id="d7ccd-2329"><paramref name="domain" /> 未能卸载。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2329"><paramref name="domain" /> could not be unloaded.</span></span></exception>
        <exception cref="T:System.Exception"><span data-ttu-id="d7ccd-2330">在卸载进程期间出错。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2330">An error occurred during the unload process.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="d7ccd-2331">若要添加此事件的事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2331">to add an event handler for this event.</span></span> <span data-ttu-id="d7ccd-2332">关联枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2332">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain" />.</span></span> <span data-ttu-id="d7ccd-2333">安全操作： <see cref="F:System.Security.Permissions.SecurityAction.Demand" />。</span><span class="sxs-lookup"><span data-stu-id="d7ccd-2333">Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />.</span></span></permission>
      </Docs>
    </Member>
  </Members>
</Type>