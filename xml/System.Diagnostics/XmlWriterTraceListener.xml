<Type Name="XmlWriterTraceListener" FullName="System.Diagnostics.XmlWriterTraceListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="947a1f9fa7d052610f5006e95373c72b4f3aae6c" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52231195" /></Metadata><TypeSignature Language="C#" Value="public class XmlWriterTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlWriterTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.XmlWriterTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlWriterTraceListener&#xA;Inherits TextWriterTraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlWriterTraceListener : System::Diagnostics::TextWriterTraceListener" />
  <TypeSignature Language="F#" Value="type XmlWriterTraceListener = class&#xA;    inherit TextWriterTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>将跟踪或调试输出作为 XML 编码的数据定向到 <see cref="T:System.IO.TextWriter" /> 或 <see cref="T:System.IO.Stream" />（如 <see cref="T:System.IO.FileStream" />）。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  必须具有非托管代码权限来创建的实例<xref:System.Diagnostics.XmlWriterTraceListener>类。  
  
 <xref:System.Diagnostics.XmlWriterTraceListener>类将跟踪和调试信息的 XML 编码的文本流。 将 XML 输出的说明所示各表所述。 可以使用[Service Trace Viewer Tool (SvcTraceViewer.exe)](https://go.microsoft.com/fwlink/p/?LinkId=240129)来显示 XML 输出。  
  
 可以启用或禁用<xref:System.Diagnostics.XmlWriterTraceListener>通过应用程序配置文件，然后使用已配置的<xref:System.Diagnostics.XmlWriterTraceListener>在应用程序中。 另外，可以创建<xref:System.Diagnostics.XmlWriterTraceListener>在代码中。  
  
 若要配置<xref:System.Diagnostics.XmlWriterTraceListener>，编辑你的应用程序的名称对应的配置文件。 在此文件中，可以添加或删除侦听器、 为侦听器设置的属性或删除侦听器。 配置文件的格式应类似下面的示例。  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="xmlListener"   
          type="System.Diagnostics.XmlWriterTraceListener"   
          initializeData="xmlOutput.xml"   
          traceOutputOptions="ProcessId, DateTime" />  
        <remove name="Default" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
</configuration>  
```  
  
 <xref:System.Diagnostics.XmlWriterTraceListener>类继承<xref:System.Diagnostics.TraceListener.Filter%2A>属性从基类<xref:System.Diagnostics.TraceListener>。  <xref:System.Diagnostics.TraceListener.Filter%2A>属性允许另一级别的跟踪输出在侦听器的筛选。  如果存在，筛选器`Trace`方法的跟踪侦听器调用<xref:System.Diagnostics.TraceFilter.ShouldTrace%2A>筛选器以确定是否发出跟踪的方法。  
  
> [!NOTE]
>  如果尝试写入到正在使用中的文件或不可用，文件名称自动作为前缀的 guid。  
  
> [!NOTE]
>  侦听器方法旨在由方法调用<xref:System.Diagnostics.Debug>， <xref:System.Diagnostics.Trace>，和<xref:System.Diagnostics.TraceSource>类。  侦听器方法不应直接从应用程序代码调用。 <xref:System.Diagnostics.XmlWriterTraceListener>侦听器主要是以供<xref:System.Diagnostics.TraceSource>类。 <xref:System.Diagnostics.XmlWriterTraceListener.Write%2A>和<xref:System.Diagnostics.XmlWriterTraceListener.WriteLine%2A>可以调用方法<xref:System.Diagnostics.Trace>并<xref:System.Diagnostics.Debug>类和默认值提供的 XML 元素的<xref:System.Diagnostics.Trace>和<xref:System.Diagnostics.Debug>不提供的值。  
  
 下表介绍的元素和属性的 XML 输出。  
  
|元素|特性|输出|说明|  
|-------------|----------------|------------|-----------|  
|`CallStack`|无|取决于是否存在<xref:System.Diagnostics.TraceOptions.Callstack>标记中<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性。|特殊字符如 > 或 < 使用转义序列替换。 请参阅后面的转义的字符转换表。|  
|`Computer`|无|始终存在。|<xref:System.Environment.MachineName%2A> 属性的值。|  
|`Correlation`|`ActivityID`|始终存在|如果未指定，默认值为一个空的 GUID。|  
||`RelatedActivityID`|取决于是否存在`relatedActivityId`跟踪方法调用中的参数。|<xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A> 方法的 `relatedActivityId` 参数。|  
|`DataItem`|无|取决于`data`参数的<xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A>方法。|此元素可包含的元素或一个元素的数组，因此值编写为一系列`DataItem`节点下的`TraceData`元素。<br /><br /> 数据输出使用`ToString`传入的数据对象的方法。|  
|`EventID`|无|始终存在。|参数输入 (`id`)。|  
|`Execution`|`ProcessName`|始终存在。|从<xref:System.Diagnostics.TraceEventCache>。|  
||`ProcessID`|始终存在。|从<xref:System.Diagnostics.TraceEventCache>。 在 Windows 98 和 Windows Me 操作系统上，如果`ProcessID`大于的 2,147,483,647 它是负数的正值表示形式并应将转换为获取正确的进程标识符。|  
||`ThreadID`|始终存在。|从<xref:System.Diagnostics.TraceEventCache>。|  
|`Level`|无|始终存在。|参数输入 (的数值`eventType`)。 参数值大于 255 的输出形式 255。|  
|`LogicalOperationStack`|无|取决于是否存在<xref:System.Diagnostics.TraceOptions.LogicalOperationStack>标记中<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性。|不可以有多个逻辑操作，因此值编写为`LogicalOperation`节点下的`LogicalOperationStack`元素。|  
|`Message`|无|取决于存在跟踪方法调用中的消息。|如果未提供格式设置参数，则此元素是将格式化的消息。|  
|`Source`|`Name`|始终存在。|输入的参数。|  
|`SubType`|`Name`|始终存在。|输入的参数。|  
|`TimeCreated`|`SystemTime`|始终存在。|如果不存在于<xref:System.Diagnostics.TraceEventCache>，默认值为当前的时间。|  
|`TimeStamp`|无|取决于是否存在<xref:System.Diagnostics.TraceOptions.Timestamp>标记中<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性。|从<xref:System.Diagnostics.TraceEventCache>。|  
|`Type`|无|始终存在。|值始终为 3。|  
  
 下表显示 XML 输出中转义的字符。 转义发生在所有元素和特性除外`DataItem`元素，如果该对象传递给不进行转义`data`的参数<xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A>方法是<xref:System.Xml.XPath.XPathNavigator>对象。 如果<xref:System.Xml.XPath.XPathNavigator>用于数据对象，<xref:System.Xml.XPath.XPathNavigator.MoveToRoot%2A>调用方法和作为非转义的数据跟踪整个根节点。  
  
|转义字符|“值”|  
|-----------------------|-----------|  
|&|&amp;|  
|\<|&lt;|  
|>|&gt;|  
|"|&quot;|  
|\|&apos;|  
|0xD|&\#xD;|  
|0xA|&\#xA;|  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Diagnostics.XmlWriterTraceListener>类将转义和非转义的数据写入文件日志。  
  
 [!code-csharp[System.Diagnostics.XmlWriterTraceListener#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.XmlWriterTraceListener/CS/program.cs#1)]
 [!code-vb[System.Diagnostics.XmlWriterTraceListener#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.XmlWriterTraceListener/VB/module1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">表示调用非托管的代码的能力。 关联枚举：<see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />。</permission>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.Stream -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><see cref="T:System.IO.Stream" />，它表示跟踪侦听器写入的流。</param>
        <summary>通过将指定的流用作调试和跟踪输出的接收者来初始化 <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.TraceListener.Name%2A>属性初始化为空字符串 ("")。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> 为 <see langword="null" />。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">表示调用非托管的代码的能力。 关联枚举：<see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.TextWriter -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.IO.TextWriter" />，它接收来自跟踪侦听器的输出。</param>
        <summary>通过将指定的编写器用作调试和跟踪输出的接收者来初始化 <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.TraceListener.Name%2A>属性初始化为空字符串 ("")。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="writer" /> 为 <see langword="null" />。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">表示调用非托管的代码的能力。 关联枚举：<see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener filename" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">要写入的文件的名称。</param>
        <summary>通过将指定的文件用作调试和跟踪输出的接收者来初始化 <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数初始化的新实例<xref:System.IO.StreamWriter>类，指定路径上指定的文件使用<xref:System.Text.Encoding.UTF8%2A>编码。 如果该文件存在，则将它追加到。 如果该文件不存在，被创建一个新文件。  
  
> [!NOTE]
>  若要减少可能出现异常，可能导致无效输出所有字符均都替换"？"字符。  
  
 <xref:System.Diagnostics.TraceListener.Name%2A>属性初始化为空字符串 ("")。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="filename" /> 为 <see langword="null" />。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">表示调用非托管的代码的能力。 关联枚举：<see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.Stream stream, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::Stream ^ stream, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.Stream * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (stream, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stream"><see cref="T:System.IO.Stream" />，它表示跟踪侦听器写入的流。</param>
        <param name="name">新实例的名称。</param>
        <summary>通过将指定的流用作调试和跟踪输出的接收者来初始化具有指定名称的 <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数初始化<xref:System.Diagnostics.TraceListener.Name%2A>属性设置为`name`参数值或为空字符串 ("") 如果`name`参数是`null`。 名称可以用作到索引<xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType>要以编程方式更改侦听器的属性集合。 例如，下面的代码设置<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>的实例属性<xref:System.Diagnostics.XmlWriterTraceListener>其<xref:System.Diagnostics.TraceListener.Name%2A>属性是"xmlListener"。  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =   
    TraceOptions.Timestamp  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> 为 <see langword="null" />。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">表示调用非托管的代码的能力。 关联枚举：<see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (System.IO.TextWriter writer, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::IO::TextWriter ^ writer, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : System.IO.TextWriter * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (writer, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.IO.TextWriter" />，它接收来自跟踪侦听器的输出。</param>
        <param name="name">新实例的名称。</param>
        <summary>通过将指定的编写器用作调试和跟踪输出的接收者来初始化具有指定名称的 <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数初始化<xref:System.Diagnostics.TraceListener.Name%2A>属性设置为`name`参数值或为空字符串 ("") 如果`name`参数是`null`。 名称可以用作到索引<xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType>要以编程方式更改侦听器的属性集合。 例如，下面的代码设置<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>的实例属性<xref:System.Diagnostics.XmlWriterTraceListener>其<xref:System.Diagnostics.TraceListener.Name%2A>属性是"xmlListener"。  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =   
    TraceOptions.Timestamp.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="writer" /> 为 <see langword="null" />。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">表示调用非托管的代码的能力。 关联枚举：<see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterTraceListener (string filename, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterTraceListener(System::String ^ filename, System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.XmlWriterTraceListener : string * string -&gt; System.Diagnostics.XmlWriterTraceListener" Usage="new System.Diagnostics.XmlWriterTraceListener (filename, name)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">要写入的文件的名称。</param>
        <param name="name">新实例的名称。</param>
        <summary>通过将指定的文件用作调试和跟踪输出的接收者来初始化具有指定名称的 <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数初始化的新实例<xref:System.IO.StreamWriter>类，指定路径上指定的文件使用<xref:System.Text.Encoding.UTF8%2A>编码。 如果该文件存在，则将它追加到。 如果该文件不存在，被创建一个新文件。  
  
> [!NOTE]
>  若要减少可能出现异常，可能导致无效输出所有字符均都替换"？"字符。  
  
 <xref:System.Diagnostics.TraceListener.Name%2A>属性设置为`name`参数值或为空字符串 ("") 如果`name`参数是`null`。 名称可以用作到索引<xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType>要以编程方式更改侦听器的属性集合。 例如，下面的代码设置<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>的实例属性<xref:System.Diagnostics.XmlWriterTraceListener>其<xref:System.Diagnostics.TraceListener.Name%2A>属性是"xmlListener"。  
  
```  
((XmlWriterTraceListener)Trace.Listeners["xmlListener"]).TraceOutputOptions =  
    TraceOptions.Timestamp.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> 为 <see langword="null" />。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">表示调用非托管的代码的能力。 关联枚举：<see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="xmlWriterTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>关闭该侦听器的 <see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" />，以使其不再接收跟踪或调试输出。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public override void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Fail(string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Fail(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Fail (message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Fail(System::String ^ message, System::String ^ detailMessage);" />
      <MemberSignature Language="F#" Value="override this.Fail : string * string -&gt; unit" Usage="xmlWriterTraceListener.Fail (message, detailMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">要写入的错误信息。</param>
        <param name="detailMessage">要追加到错误信息的详细错误信息。</param>
        <summary>将包含错误信息和详细错误信息的跟踪信息写入文件或流中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认行为是在消息框中显示消息和详细的消息，应用程序在用户界面模式中，并对其运行时<xref:System.Diagnostics.TraceListener>实例中<xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType>集合。 默认情况下，该集合包含的一个实例<xref:System.Diagnostics.DefaultTraceListener>。 可以通过添加或删除自定义此行为<xref:System.Diagnostics.TraceListener>集合中。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">表示调用非托管的代码的能力。 关联枚举：<see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceData">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>向输出文件或流中写入跟踪数据。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj -&gt; unit" Usage="xmlWriterTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
        <param name="source">源名称。</param>
        <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" /> 值之一。</param>
        <param name="id">事件的数值标识符。</param>
        <param name="data">要发出的数据对象。</param>
        <summary>将跟踪信息、数据对象和事件信息写入文件或流中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `eventCache`， `source`， `eventType`，和`id`标头和跟踪页脚中使用参数。 `id`参数转换为无符号整数之前编写，因此为负`id`值编写为一个较大的正整数。 `data`形式写入参数`DataItem`中的节点`TraceData`元素。 `ToString`数据对象的方法用于将对象转换为字符串。  
  
> [!IMPORTANT]
>  此方法不应由应用程序代码直接调用。  它由方法调用<xref:System.Diagnostics.Debug>， <xref:System.Diagnostics.Trace>，和<xref:System.Diagnostics.TraceSource>类来写入跟踪数据。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">表示调用非托管的代码的能力。 关联枚举：<see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, ParamArray data As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, ... cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj[] -&gt; unit" Usage="xmlWriterTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
        <param name="source">源名称。</param>
        <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" /> 值之一。</param>
        <param name="id">事件的数值标识符。</param>
        <param name="data">要发出的数据对象的数组。</param>
        <summary>将跟踪信息、数据对象和事件信息写入文件或流中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `eventCache`， `source`， `eventType`，和`id`标头和跟踪页脚中使用参数。 `id`参数转换为无符号整数之前编写，因此为负`id`值编写为一个较大的正整数。 中的对象`data`方式编写参数数组`DataItem`中的节点`TraceData`元素。 `ToString`的每个数据对象的方法用于将对象转换为字符串。  
  
> [!IMPORTANT]
>  此方法不应由应用程序代码直接调用。  它由方法调用<xref:System.Diagnostics.Debug>， <xref:System.Diagnostics.Trace>，和<xref:System.Diagnostics.TraceSource>类来写入跟踪数据。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">表示调用非托管的代码的能力。 关联枚举：<see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceEvent">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将事件跟踪信息写入输出文件或流中。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string -&gt; unit" Usage="xmlWriterTraceListener.TraceEvent (eventCache, source, eventType, id, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
        <param name="source">源名称。</param>
        <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" /> 值之一。</param>
        <param name="id">事件的数值标识符。</param>
        <param name="message">要写入的消息。</param>
        <summary>将跟踪信息、消息和事件信息写入文件或流中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `eventCache`， `source`， `eventType`，和`id`标头和跟踪页脚中使用参数。 `id`参数转换为无符号整数之前编写，因此为负`id`值编写为一个较大的正整数。 `message`形式写入参数`Message`元素。  
  
> [!IMPORTANT]
>  此方法不应由应用程序代码直接调用。  它由方法调用<xref:System.Diagnostics.Debug>， <xref:System.Diagnostics.Trace>，和<xref:System.Diagnostics.TraceSource>类来写入跟踪数据。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">表示调用非托管的代码的能力。 关联枚举：<see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit" Usage="xmlWriterTraceListener.TraceEvent (eventCache, source, eventType, id, format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
        <param name="source">源名称。</param>
        <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" /> 值之一。</param>
        <param name="id">事件的数值标识符。</param>
        <param name="format">包含零个或多个格式项的格式字符串，这些项与 <paramref name="args" /> 数组中的对象相对应。</param>
        <param name="args">包含零个或多个要格式化的对象的对象数组。</param>
        <summary>将跟踪信息、格式化消息和事件信息写入文件或流中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `eventCache`， `source`， `eventType`，和`id`标头和跟踪页脚中使用参数。 `id`参数转换为无符号整数之前编写，因此为负`id`值编写为一个较大的正整数。 <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>调用方法，并传入`format`字符串并`args`作为参数，若要设置格式的数组`args`对象数组作为`Message`元素。  
  
> [!IMPORTANT]
>  此方法不应由应用程序代码直接调用。  它由方法调用<xref:System.Diagnostics.Debug>， <xref:System.Diagnostics.Trace>，和<xref:System.Diagnostics.TraceSource>类来写入跟踪数据。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">表示调用非托管的代码的能力。 关联枚举：<see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="TraceTransfer">
      <MemberSignature Language="C#" Value="public override void TraceTransfer (System.Diagnostics.TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceTransfer(class System.Diagnostics.TraceEventCache eventCache, string source, int32 id, string message, valuetype System.Guid relatedActivityId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceTransfer (eventCache As TraceEventCache, source As String, id As Integer, message As String, relatedActivityId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceTransfer(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, int id, System::String ^ message, Guid relatedActivityId);" />
      <MemberSignature Language="F#" Value="override this.TraceTransfer : System.Diagnostics.TraceEventCache * string * int * string * Guid -&gt; unit" Usage="xmlWriterTraceListener.TraceTransfer (eventCache, source, id, message, relatedActivityId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="relatedActivityId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
        <param name="source">源名称。</param>
        <param name="id">事件的数值标识符。</param>
        <param name="message">要写入的跟踪消息。</param>
        <param name="relatedActivityId">标识相关活动的 <see cref="T:System.Guid" /> 结构。</param>
        <summary>将跟踪信息（包括相关活动的标识）、消息和事件信息写入文件或流中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A>方法是否用于关联相关的跟踪。 `eventCache`， `source`， `id`，和`relatedActivityId`标头和跟踪页脚中使用参数。 `id`参数转换为无符号整数之前编写，因此为负`id`值编写为一个较大的正整数。 `message`形式写入参数`Message`元素。 <xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType>调用方法来转换`relatedActivityId`"B"的值格式的字符串，它显示在标头。 `SubTypeName`页脚中的元素标识跟踪事件的类型为<xref:System.Diagnostics.TraceEventType.Transfer>。  
  
> [!IMPORTANT]
>  <xref:System.Diagnostics.XmlWriterTraceListener.TraceTransfer%2A>方法不应由应用程序代码调用。  它旨在通过调用<xref:System.Diagnostics.TraceSource>发出的跟踪信息的对象及其<xref:System.Diagnostics.TraceSource.TraceTransfer%2A>方法。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">表示调用非托管的代码的能力。 关联枚举：<see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.Write : string -&gt; unit" Usage="xmlWriterTraceListener.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">要写入的消息。</param>
        <summary>将不包含任何其他上下文信息的原义消息写入文件或流中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A>方法中的日志输出包含上下文信息。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">表示调用非托管的代码的能力。 关联枚举：<see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.XmlWriterTraceListener.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string -&gt; unit" Usage="xmlWriterTraceListener.WriteLine message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">要写入的消息。</param>
        <summary>将不包含任何其他上下文信息且后跟当前行结束符的原义消息写入文件或流中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Diagnostics.XmlWriterTraceListener.TraceData%2A>方法中的日志输出包含上下文信息。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">表示调用非托管的代码的能力。 关联枚举：<see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />。</permission>
      </Docs>
    </Member>
  </Members>
</Type>