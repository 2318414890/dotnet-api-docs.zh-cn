<Type Name="TraceSwitch" FullName="System.Diagnostics.TraceSwitch">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d4469a0603f1631fb222c6d50085ab5fd86e92ed" />
    <Meta Name="ms.sourcegitcommit" Value="b15b8cf0f6dbc1504057c88969d9ef4b790891fe" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="05/11/2018" />
    <Meta Name="ms.locfileid" Value="34061864" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TraceSwitch : System.Diagnostics.Switch" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TraceSwitch extends System.Diagnostics.Switch" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.TraceSwitch" />
  <TypeSignature Language="VB.NET" Value="Public Class TraceSwitch&#xA;Inherits Switch" />
  <TypeSignature Language="C++ CLI" Value="public ref class TraceSwitch : System::Diagnostics::Switch" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.Switch</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.SwitchLevel(typeof(System.Diagnostics.TraceLevel))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供多级开关，用于控制跟踪和调试输出，而无需重新编译代码。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用跟踪开关来筛选出基于它们的重要性的消息。 <xref:System.Diagnostics.TraceSwitch>类提供<xref:System.Diagnostics.TraceSwitch.TraceError%2A>， <xref:System.Diagnostics.TraceSwitch.TraceWarning%2A>， <xref:System.Diagnostics.TraceSwitch.TraceInfo%2A>，和<xref:System.Diagnostics.TraceSwitch.TraceVerbose%2A>属性，以测试开关的级别。 <xref:System.Diagnostics.TraceSwitch.Level%2A>属性获取或设置开关的<xref:System.Diagnostics.TraceLevel>。  
  
 你可以设置的级别<xref:System.Diagnostics.TraceSwitch>通过应用程序配置文件，然后使用已配置的<xref:System.Diagnostics.TraceSwitch>级别应用程序中。 或者，你可以创建<xref:System.Diagnostics.TraceSwitch>中你的代码和组直接要检测特定的代码段的级别。  
  
 若要配置<xref:System.Diagnostics.TraceSwitch>，编辑你的应用程序。 在此文件中，可以添加或删除交换机、 设置开关的值，或清除所有交换机以前由应用程序设置。 配置文件的格式应类似下面的示例：  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <switches>  
      <add name="mySwitch" value="1" />  
    </switches>  
  </system.diagnostics>  
</configuration>  
```  
  
 此配置节定义<xref:System.Diagnostics.TraceSwitch>与<xref:System.Diagnostics.Switch.DisplayName%2A>设置为`mySwitch`，和<xref:System.Diagnostics.TraceSwitch.Level%2A>设置为 1，对应于枚举值<xref:System.Diagnostics.TraceLevel.Error?displayProperty=nameWithType>。  
  
> [!NOTE]
>  在 .NET Framework 2.0 版中，你可以使用文本指定开关值。 例如，`true`为<xref:System.Diagnostics.BooleanSwitch>或表示枚举值，如文本`Error`为<xref:System.Diagnostics.TraceSwitch>。 行 `<add name="mySwitch" value="Error" />` 等于 `<add name="mySwitch" value="1" />`。  
  
 在你的应用程序，你可以通过创建使用配置的交换机级别<xref:System.Diagnostics.TraceSwitch>具有相同名称，如下面的示例中所示：  
  
 [!code-cpp[Classic TraceSwitch.TraceError Example#3](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic TraceSwitch.TraceError Example/CPP/remarks.cpp#3)]
 [!code-csharp[Classic TraceSwitch.TraceError Example#3](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic TraceSwitch.TraceError Example/CS/remarks.cs#3)]
 [!code-vb[Classic TraceSwitch.TraceError Example#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic TraceSwitch.TraceError Example/VB/remarks.vb#3)]  
  
 默认情况下，该交换机<xref:System.Diagnostics.TraceSwitch.Level%2A>属性使用配置文件中指定的值设置。 如果<xref:System.Diagnostics.TraceSwitch.%23ctor%2A>构造函数不能在配置文件中，找到初始交换机设置<xref:System.Diagnostics.TraceSwitch.Level%2A>交换机的新的默认值为<xref:System.Diagnostics.TraceLevel.Off?displayProperty=nameWithType>。  
  
 你必须启用跟踪或调试才能使用交换机。 下面的语法是特定的编译器。 如果你使用除 C# 或 Visual Basic 编译器，请参阅你的编译器的文档。  
  
-   若要启用调试 C# 中，添加`/d:DEBUG`到编译器命令行编译代码，或添加时的标志`#define DEBUG`到你的文件的顶部。 在 Visual Basic 中，添加`/d:DEBUG=True`到编译器命令行的标志。  
  
-   若要启用 C# 中的跟踪，将添加`/d:TRACE`到编译器命令行编译代码，或添加时的标志`#define TRACE`到你的文件的顶部。 在 Visual Basic 中，添加`/d:TRACE=True`到编译器命令行的标志。  
  
> [!NOTE]
>  使用这些调试和跟踪编译器开关时将不再需要使用<xref:System.Diagnostics.TraceSwitch>中隔离的类。 它们仅需要结合<xref:System.Diagnostics.Trace>或<xref:System.Diagnostics.Debug>有条件地编译的方法。  
  
 有关检测应用程序的详细信息，请参阅<xref:System.Diagnostics.Debug>和<xref:System.Diagnostics.Trace>。 有关配置和使用跟踪开关的详细信息，请参阅[跟踪开关](~/docs/framework/debug-trace-profile/trace-switches.md)。  
  
> [!NOTE]
>  若要提高性能，你可以<xref:System.Diagnostics.TraceSwitch>成员`static`类中。  
  
   
  
## Examples  
 下面的代码示例创建一个新<xref:System.Diagnostics.TraceSwitch>并使用该开关确定是否要打印的错误消息。 在类级别创建交换机。 `MyMethod` 如果写入第一条错误消息<xref:System.Diagnostics.TraceSwitch.Level%2A>属性设置为<xref:System.Diagnostics.TraceLevel.Error?displayProperty=nameWithType>或更高版本。 但是，`MyMethod`不会写入第二条错误消息，如果<xref:System.Diagnostics.TraceSwitch.Level%2A>是小于<xref:System.Diagnostics.TraceLevel.Verbose?displayProperty=nameWithType>。  
  
 [!code-cpp[Classic TraceSwitch.TraceError Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic TraceSwitch.TraceError Example/CPP/source.cpp#1)]
 [!code-csharp[Classic TraceSwitch.TraceError Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic TraceSwitch.TraceError Example/CS/source.cs#1)]
 [!code-vb[Classic TraceSwitch.TraceError Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic TraceSwitch.TraceError Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.Switch" />
    <altmember cref="T:System.Diagnostics.BooleanSwitch" />
    <altmember cref="T:System.Diagnostics.TraceLevel" />
    <altmember cref="T:System.Diagnostics.Debug" />
    <altmember cref="T:System.Diagnostics.Trace" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Diagnostics.TraceSwitch" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TraceSwitch (string displayName, string description);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string displayName, string description) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceSwitch.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (displayName As String, description As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TraceSwitch(System::String ^ displayName, System::String ^ description);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="description" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="displayName">要在用户界面上显示的名称。</param>
        <param name="description">切换描述。</param>
        <summary>使用指定的显示名称和说明初始化 <see cref="T:System.Diagnostics.TraceSwitch" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要设置的级别你<xref:System.Diagnostics.TraceSwitch>，编辑配置文件对应于你的应用程序的名称。 在此文件中，你可以添加交换机和将其值设置、 删除交换机，或清除所有交换机以前由应用程序设置。 配置文件的格式应类似下面的示例：  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <switches>  
      <add name="mySwitch" value="1" />  
    </switches>  
  </system.diagnostics>  
</configuration>  
```  
  
> [!NOTE]
>  在 .NET Framework 2.0 版中，你可以使用文本指定开关值。 例如，`true`为<xref:System.Diagnostics.BooleanSwitch>或表示枚举值，如文本`Error`为<xref:System.Diagnostics.TraceSwitch>。 行 `<add name="mySwitch" value="Error" />` 等于 `<add name="mySwitch" value="1" />`。  
  
 在你的应用程序，你可以通过创建使用配置的交换机级别<xref:System.Diagnostics.TraceSwitch>具有相同名称，如下面的示例中所示：  
  
 [!code-cpp[Classic TraceSwitch.TraceError Example#3](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic TraceSwitch.TraceError Example/CPP/remarks.cpp#3)]
 [!code-csharp[Classic TraceSwitch.TraceError Example#3](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic TraceSwitch.TraceError Example/CS/remarks.cs#3)]
 [!code-vb[Classic TraceSwitch.TraceError Example#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic TraceSwitch.TraceError Example/VB/remarks.vb#3)]  
  
 当<xref:System.Diagnostics.TraceSwitch.%23ctor%2A>构造函数不能在配置文件中，找到初始交换机设置<xref:System.Diagnostics.TraceSwitch.Level%2A>新交换机的属性设置为<xref:System.Diagnostics.TraceLevel.Off?displayProperty=nameWithType>。  
  
 <xref:System.Diagnostics.TraceSwitch>类提供<xref:System.Diagnostics.TraceSwitch.TraceError%2A>， <xref:System.Diagnostics.TraceSwitch.TraceWarning%2A>， <xref:System.Diagnostics.TraceSwitch.TraceInfo%2A>，和<xref:System.Diagnostics.TraceSwitch.TraceVerbose%2A>属性，以测试<xref:System.Diagnostics.TraceSwitch.Level%2A>交换机。 <xref:System.Diagnostics.TraceSwitch.Level%2A>属性获取或设置开关的<xref:System.Diagnostics.TraceLevel>。  
  
> [!NOTE]
>  若要提高性能，你可以<xref:System.Diagnostics.TraceSwitch>成员`static`类中。  
  
   
  
## Examples  
 下面的代码示例创建一个新<xref:System.Diagnostics.TraceSwitch>并使用该开关确定是否要打印的错误消息。 在类级别创建交换机。 `MyMethod` 如果写入第一条错误消息<xref:System.Diagnostics.TraceSwitch.Level%2A>属性设置为<xref:System.Diagnostics.TraceLevel.Error?displayProperty=nameWithType>或更高版本。 但是，`MyMethod`不会写入第二条错误消息，如果<xref:System.Diagnostics.TraceSwitch.Level%2A>是小于<xref:System.Diagnostics.TraceLevel.Verbose?displayProperty=nameWithType>。  
  
 [!code-cpp[Classic TraceSwitch.TraceError Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic TraceSwitch.TraceError Example/CPP/source.cpp#1)]
 [!code-csharp[Classic TraceSwitch.TraceError Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic TraceSwitch.TraceError Example/CS/source.cs#1)]
 [!code-vb[Classic TraceSwitch.TraceError Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic TraceSwitch.TraceError Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceLevel" />
        <altmember cref="T:System.Diagnostics.Switch" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TraceSwitch (string displayName, string description, string defaultSwitchValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string displayName, string description, string defaultSwitchValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceSwitch.#ctor(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (displayName As String, description As String, defaultSwitchValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TraceSwitch(System::String ^ displayName, System::String ^ description, System::String ^ defaultSwitchValue);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="description" Type="System.String" />
        <Parameter Name="defaultSwitchValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="displayName">要在用户界面上显示的名称。</param>
        <param name="description">切换描述。</param>
        <param name="defaultSwitchValue">开关的默认值。</param>
        <summary>使用开关的指定显示名称、说明和默认值来初始化 <see cref="T:System.Diagnostics.TraceSwitch" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `displayName`参数用于设置的值<xref:System.Diagnostics.Switch.DisplayName%2A>属性，`description`参数用于设置的值<xref:System.Diagnostics.Switch.Description%2A>属性，与`defaultSwitchValue`参数是保存为一个字段，用于初始化<xref:System.Diagnostics.Switch.Value%2A>上第一个引用的属性。 请参阅<xref:System.Diagnostics.TraceSwitch.%23ctor%28System.String%2CSystem.String%29>构造函数的详细信息和代码示例。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Level">
      <MemberSignature Language="C#" Value="public System.Diagnostics.TraceLevel Level { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.TraceLevel Level" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.TraceSwitch.Level" />
      <MemberSignature Language="VB.NET" Value="Public Property Level As TraceLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::TraceLevel Level { System::Diagnostics::TraceLevel get(); void set(System::Diagnostics::TraceLevel value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.TraceLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置跟踪级别，它将确定开关所允许的消息。</summary>
        <value>
          <see cref="T:System.Diagnostics.TraceLevel" /> 值之一，它指定开关所允许的消息的级别。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要设置的级别你<xref:System.Diagnostics.TraceSwitch>，编辑配置文件对应于你的应用程序的名称。 在此文件中，你可以添加交换机和将其值设置、 删除交换机，或清除所有交换机以前由应用程序设置。 配置文件的格式应类似下面的示例：  
  
```  
<configuration>  
  <system.diagnostics>  
    <switches>  
      <add name="mySwitch" value="0" />  
      <add name="myNewSwitch" value="3" />  
      <remove name="mySwitch" />  
      <clear/>  
    </switches>  
  </system.diagnostics>  
</configuration>  
```  
  
> [!NOTE]
>  在 .NET Framework 2.0 版中，你可以使用文本指定开关值。 例如，`true`为<xref:System.Diagnostics.BooleanSwitch>或表示枚举值，如文本`Error`为<xref:System.Diagnostics.TraceSwitch>。 行 `<add name="mySwitch" value="Error" />` 等于 `<add name="mySwitch" value="1" />`。  
  
 当<xref:System.Diagnostics.TraceSwitch.%23ctor%2A>构造函数不能在配置文件中，找到初始交换机设置<xref:System.Diagnostics.TraceSwitch.Level%2A>新交换机的属性设置为<xref:System.Diagnostics.TraceLevel.Off?displayProperty=nameWithType>。  
  
 设置此属性可更新<xref:System.Diagnostics.TraceSwitch.TraceError%2A>， <xref:System.Diagnostics.TraceSwitch.TraceWarning%2A>， <xref:System.Diagnostics.TraceSwitch.TraceInfo%2A>，和<xref:System.Diagnostics.TraceSwitch.TraceVerbose%2A>属性以反映新值。  
  
   
  
## Examples  
 下面的代码示例创建一个新<xref:System.Diagnostics.TraceSwitch>并使用该开关确定是否要打印的错误消息。 在类级别创建交换机。 `MyMethod` 如果写入第一条错误消息<xref:System.Diagnostics.TraceSwitch.Level%2A>属性设置为<xref:System.Diagnostics.TraceLevel.Error?displayProperty=nameWithType>或更高版本。 但是，`MyMethod`不会写入第二条错误消息，如果<xref:System.Diagnostics.TraceSwitch.Level%2A>是小于<xref:System.Diagnostics.TraceLevel.Verbose?displayProperty=nameWithType>。  
  
 [!code-cpp[Classic TraceSwitch.Level Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic TraceSwitch.Level Example/CPP/source.cpp#1)]
 [!code-csharp[Classic TraceSwitch.Level Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic TraceSwitch.Level Example/CS/source.cs#1)]
 [!code-vb[Classic TraceSwitch.Level Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic TraceSwitch.Level Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Diagnostics.TraceSwitch.Level" /> 设置为非 <see cref="T:System.Diagnostics.TraceLevel" /> 值。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于操作与非托管代码。 关联的枚举：<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />安全操作： <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</permission>
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceLevel" />
        <altmember cref="T:System.Diagnostics.Switch" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="OnSwitchSettingChanged">
      <MemberSignature Language="C#" Value="protected override void OnSwitchSettingChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSwitchSettingChanged() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceSwitch.OnSwitchSettingChanged" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnSwitchSettingChanged ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnSwitchSettingChanged();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>更新并更正此开关的级别。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.TraceSwitch.OnSwitchSettingChanged%2A>方法使用由.NET framework，以验证并更正通过配置文件初始化开关的值。 如果配置文件中指定开关值未定义的将消息写入到所有跟踪侦听器<xref:System.Diagnostics.TraceLevel>枚举和开关设置为已定义的值。  
  
 如果你尝试在你的代码以设置<xref:System.Diagnostics.TraceSwitch.Level%2A>属性不由定义的值<xref:System.Diagnostics.TraceLevel>枚举，<xref:System.ArgumentException>引发异常。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.Switch" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="OnValueChanged">
      <MemberSignature Language="C#" Value="protected override void OnValueChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnValueChanged() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceSwitch.OnValueChanged" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnValueChanged ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnValueChanged();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将 <see cref="P:System.Diagnostics.Switch.SwitchSetting" /> 属性设置为 <see cref="P:System.Diagnostics.Switch.Value" /> 属性的整数等效值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当在内部调用此方法<xref:System.Diagnostics.Switch.Value%2A>交换机更改的属性。 该方法确保开关的值与相关的属性反映新值。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>若要重写此属性，将转换的字符串值<see cref="P:System.Diagnostics.Switch.Value" />属性为二进制，然后设置<see cref="P:System.Diagnostics.TraceSwitch.Level" />属性。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="TraceError">
      <MemberSignature Language="C#" Value="public bool TraceError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TraceError" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.TraceSwitch.TraceError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TraceError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TraceError { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，它指示开关是否允许错误处理消息。</summary>
        <value>
          如果 <see cref="P:System.Diagnostics.TraceSwitch.Level" /> 设置为 <see cref="F:System.Diagnostics.TraceLevel.Error" />、<see cref="F:System.Diagnostics.TraceLevel.Warning" />、<see cref="F:System.Diagnostics.TraceLevel.Info" /> 或 <see cref="F:System.Diagnostics.TraceLevel.Verbose" />，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用<xref:System.Diagnostics.TraceSwitch.TraceError%2A>， <xref:System.Diagnostics.TraceSwitch.TraceWarning%2A>， <xref:System.Diagnostics.TraceSwitch.TraceInfo%2A>，和<xref:System.Diagnostics.TraceSwitch.TraceVerbose%2A>属性结合<xref:System.Diagnostics.Debug>和<xref:System.Diagnostics.Trace>类发出指定的重要性或更高版本的所有消息。 当<xref:System.Diagnostics.TraceSwitch.Level%2A>属性设置为最高的重要性， <xref:System.Diagnostics.TraceLevel.Error?displayProperty=nameWithType>， <xref:System.Diagnostics.TraceLevel.Error> ，发出仅错误处理消息。  
  
   
  
## Examples  
 下面的代码示例创建一个新<xref:System.Diagnostics.TraceSwitch>并使用该开关确定是否发出错误消息。 在类级别创建交换机。 `MyMethod` 如果写入第一条错误消息<xref:System.Diagnostics.TraceSwitch.Level%2A>属性设置为<xref:System.Diagnostics.TraceLevel.Error?displayProperty=nameWithType>或更高版本。 但是，`MyMethod`不会写入第二条错误消息，如果<xref:System.Diagnostics.TraceSwitch.Level%2A>是小于<xref:System.Diagnostics.TraceLevel.Verbose?displayProperty=nameWithType>。  
  
 [!code-cpp[Classic TraceSwitch.TraceError Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic TraceSwitch.TraceError Example/CPP/source.cpp#1)]
 [!code-csharp[Classic TraceSwitch.TraceError Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic TraceSwitch.TraceError Example/CS/source.cs#1)]
 [!code-vb[Classic TraceSwitch.TraceError Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic TraceSwitch.TraceError Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.Switch" />
        <altmember cref="T:System.Diagnostics.TraceLevel" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="TraceInfo">
      <MemberSignature Language="C#" Value="public bool TraceInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TraceInfo" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.TraceSwitch.TraceInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TraceInfo As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TraceInfo { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，它指示开关是否允许信息性消息。</summary>
        <value>
          如果 <see cref="P:System.Diagnostics.TraceSwitch.Level" /> 属性设置为 <see cref="F:System.Diagnostics.TraceLevel.Info" /> 或 <see cref="F:System.Diagnostics.TraceLevel.Verbose" />，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用<xref:System.Diagnostics.TraceSwitch.TraceError%2A>， <xref:System.Diagnostics.TraceSwitch.TraceWarning%2A>， <xref:System.Diagnostics.TraceSwitch.TraceInfo%2A>，和<xref:System.Diagnostics.TraceSwitch.TraceVerbose%2A>属性结合<xref:System.Diagnostics.Debug>和<xref:System.Diagnostics.Trace>类发出指定的重要性或更高版本的所有消息。 当<xref:System.Diagnostics.TraceSwitch.Level%2A>属性设置为<xref:System.Diagnostics.TraceLevel.Warning?displayProperty=nameWithType>，发出信息性消息、 警告和错误处理消息。  
  
   
  
## Examples  
 下面的代码示例创建一个新<xref:System.Diagnostics.TraceSwitch>并使用该开关确定是否发出错误消息。 在类级别创建交换机。 `MyMethod` 如果写入第一条错误消息<xref:System.Diagnostics.TraceSwitch.Level%2A>属性设置为<xref:System.Diagnostics.TraceLevel.Info?displayProperty=nameWithType>或更高版本。 但是，`MyMethod`不会写入第二条错误消息，如果<xref:System.Diagnostics.TraceSwitch.Level%2A>是小于<xref:System.Diagnostics.TraceLevel.Verbose?displayProperty=nameWithType>。  
  
 [!code-cpp[Classic TraceSwitch.TraceInfo Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic TraceSwitch.TraceInfo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic TraceSwitch.TraceInfo Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic TraceSwitch.TraceInfo Example/CS/source.cs#1)]
 [!code-vb[Classic TraceSwitch.TraceInfo Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic TraceSwitch.TraceInfo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.Switch" />
        <altmember cref="T:System.Diagnostics.TraceLevel" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="TraceVerbose">
      <MemberSignature Language="C#" Value="public bool TraceVerbose { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TraceVerbose" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.TraceSwitch.TraceVerbose" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TraceVerbose As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TraceVerbose { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，它指示开关是否允许所有消息。</summary>
        <value>
          如果 <see cref="P:System.Diagnostics.TraceSwitch.Level" /> 属性设置为 <see cref="F:System.Diagnostics.TraceLevel.Verbose" />，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用<xref:System.Diagnostics.TraceSwitch.TraceError%2A>， <xref:System.Diagnostics.TraceSwitch.TraceWarning%2A>， <xref:System.Diagnostics.TraceSwitch.TraceInfo%2A>，和<xref:System.Diagnostics.TraceSwitch.TraceVerbose%2A>属性结合<xref:System.Diagnostics.Debug>和<xref:System.Diagnostics.Trace>类发出指定的重要性或更高版本的所有消息。 当<xref:System.Diagnostics.TraceSwitch.Level%2A>属性设置为<xref:System.Diagnostics.TraceLevel.Verbose?displayProperty=nameWithType>，所有调试和跟踪消息进行传输。  
  
   
  
## Examples  
 下面的代码示例创建一个新<xref:System.Diagnostics.TraceSwitch>并使用该开关确定是否发出错误消息。 在类级别创建交换机。 `MyMethod` 将同时写入错误消息时<xref:System.Diagnostics.TraceSwitch.Level%2A>属性设置为<xref:System.Diagnostics.TraceLevel.Verbose?displayProperty=nameWithType>。  
  
 [!code-cpp[Classic TraceSwitch.TraceError Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic TraceSwitch.TraceError Example/CPP/source.cpp#1)]
 [!code-csharp[Classic TraceSwitch.TraceError Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic TraceSwitch.TraceError Example/CS/source.cs#1)]
 [!code-vb[Classic TraceSwitch.TraceError Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic TraceSwitch.TraceError Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.Switch" />
        <altmember cref="T:System.Diagnostics.TraceLevel" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="TraceWarning">
      <MemberSignature Language="C#" Value="public bool TraceWarning { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TraceWarning" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.TraceSwitch.TraceWarning" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TraceWarning As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TraceWarning { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，它指示开关是否允许警告消息。</summary>
        <value>
          如果 <see cref="P:System.Diagnostics.TraceSwitch.Level" /> 属性设置为 <see cref="F:System.Diagnostics.TraceLevel.Warning" />、<see cref="F:System.Diagnostics.TraceLevel.Info" /> 或 <see cref="F:System.Diagnostics.TraceLevel.Verbose" />，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以使用<xref:System.Diagnostics.TraceSwitch.TraceError%2A>， <xref:System.Diagnostics.TraceSwitch.TraceWarning%2A>， <xref:System.Diagnostics.TraceSwitch.TraceInfo%2A>，和<xref:System.Diagnostics.TraceSwitch.TraceVerbose%2A>属性结合<xref:System.Diagnostics.Debug>和<xref:System.Diagnostics.Trace>类发出指定的重要性或更高版本的所有消息。 当<xref:System.Diagnostics.TraceSwitch.Level%2A>属性设置为<xref:System.Diagnostics.TraceLevel.Warning?displayProperty=nameWithType>，发出警告和错误处理消息。  
  
   
  
## Examples  
 下面的代码示例创建一个新<xref:System.Diagnostics.TraceSwitch>并使用该开关确定是否发出错误消息。 在类级别创建交换机。 `MyMethod` 如果写入第一条错误消息<xref:System.Diagnostics.TraceSwitch.Level%2A>属性设置为<xref:System.Diagnostics.TraceLevel.Warning?displayProperty=nameWithType>或更高版本。 但是，`MyMethod`不会的写入的第二个错误消息时<xref:System.Diagnostics.TraceSwitch.Level%2A>是小于<xref:System.Diagnostics.TraceLevel.Verbose?displayProperty=nameWithType>。  
  
 [!code-cpp[Classic TraceSwitch.TraceWarning Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic TraceSwitch.TraceWarning Example/CPP/source.cpp#1)]
 [!code-csharp[Classic TraceSwitch.TraceWarning Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic TraceSwitch.TraceWarning Example/CS/source.cs#1)]
 [!code-vb[Classic TraceSwitch.TraceWarning Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic TraceSwitch.TraceWarning Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.Switch" />
        <altmember cref="T:System.Diagnostics.TraceLevel" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
  </Members>
</Type>