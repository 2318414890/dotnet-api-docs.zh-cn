<Type Name="EventSchemaTraceListener" FullName="System.Diagnostics.EventSchemaTraceListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="abdcf6aaf89cf211719c282b059b7c15b4d68ff5" />
    <Meta Name="ms.sourcegitcommit" Value="b15b8cf0f6dbc1504057c88969d9ef4b790891fe" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="05/11/2018" />
    <Meta Name="ms.locfileid" Value="34061162" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EventSchemaTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventSchemaTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventSchemaTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class EventSchemaTraceListener&#xA;Inherits TextWriterTraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventSchemaTraceListener : System::Diagnostics::TextWriterTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>将端对端事件的跟踪或调试输出定向到 XML 编码的符合架构的日志文件。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventSchemaTraceListener>类提供了端到端符合架构的事件的跟踪。 你可用于跨线程的异类组件的系统的端到端跟踪<xref:System.AppDomain>，过程中和计算机边界。 标准化的事件架构 (请参阅[事件使用者的事件表示](http://go.microsoft.com/fwlink/?LinkId=78955)) 被定义为跨这些边界启用跟踪。 此外，该架构允许添加符合架构的自定义元素。 你可以使用[服务跟踪查看器工具 (SvcTraceViewer.exe)](http://go.microsoft.com/fwlink/p/?LinkId=240129)来显示事件数据。  
  
 <xref:System.Diagnostics.EventSchemaTraceListener> 使用隐式支持无锁跟踪针对日志记录的性能优化。  
  
 <xref:System.Diagnostics.EventSchemaTraceListener>类将跟踪和调试信息的 XML 编码的文本流转换的转换。 本部分中后面的表中显示了 XML 输出的说明。  
  
 你可以启用或禁用<xref:System.Diagnostics.EventSchemaTraceListener>通过应用程序配置文件中，对象，然后使用已配置<xref:System.Diagnostics.EventSchemaTraceListener>应用程序中的对象。 或者，你可以创建<xref:System.Diagnostics.EventSchemaTraceListener>在代码中的对象。 我们建议你通过应用程序配置文件启用跟踪侦听器。 有关使用跟踪和调试配置文件的信息，请参阅[跟踪和调试设置架构](http://msdn.microsoft.com/library/277ca5f6-e1c4-41b6-a47f-3a67ce5b94ac)。  
  
 若要配置<xref:System.Diagnostics.EventSchemaTraceListener>对象，修改配置文件对应于你的应用程序的名称。 在此文件中，可以添加、 删除或设置侦听器的属性。 配置文件应格式如下：  
  
```xml  
<configuration>  
    <system.diagnostics>  
        <sources>  
            <source name="TestSource" >  
                <listeners>  
                    <!--Remove the default trace listener for better performance.-->  
                    <remove name="Default"/>  
                    <!--Note: Removing the default trace listener prevents the dialog box   
                    from being displayed for Debug.Fail or Debug.Assert commands that are   
                    executed in user mode.-->  
                    <add name="eventListener"   
                      type="System.Diagnostics.EventSchemaTraceListener,  system.core"  
                      initializeData="TraceOutput.xml"   
                      traceOutputOptions="ProcessId, DateTime, Timestamp"   
                      bufferSize="65536"  
                      maximumFileSize="20480000"  
                      logRetentionOption="LimitedCircularFiles"  
                      maximumNumberOfFiles="2"/>  
                </listeners>  
            </source>  
        </sources>  
    </system.diagnostics>  
```  
  
 <xref:System.Diagnostics.EventSchemaTraceListener>类继承<xref:System.Diagnostics.TraceListener.Filter%2A>从基类的属性<xref:System.Diagnostics.TraceListener>。 <xref:System.Diagnostics.TraceListener.Filter%2A>属性允许的额外级别的筛选在侦听器的跟踪输出。 如果存在，筛选器，则`Trace`方法的跟踪侦听器调用<xref:System.Diagnostics.TraceFilter.ShouldTrace%2A>筛选器来确定是否发出跟踪的方法。  
  
 如果尝试写入到的文件正在使用或不可用，GUID 后缀是自动添加到的文件名称。  
  
> [!NOTE]
>  侦听器方法旨在由方法的调用<xref:System.Diagnostics.Debug>， <xref:System.Diagnostics.Trace>，和<xref:System.Diagnostics.TraceSource>类。 请勿直接从应用程序代码中调用该侦听器方法。 <xref:System.Diagnostics.EventSchemaTraceListener>侦听器主要适用于使用<xref:System.Diagnostics.TraceSource>类。  
  
 下表描述的元素和特性的 XML 输出。  
  
|元素|特性|输出|说明|  
|-------------|----------------|------------|-----------|  
|`CallStack`|无|取决于是否存在的<xref:System.Diagnostics.TraceOptions.Callstack>中标记出来<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性。|特殊字符如 > 或 < 替换为转义序列。 请参阅下一个表中的转义的字符转换表。|  
|`Computer`|无|始终存在。|此元素表示的值<xref:System.Environment.MachineName%2A>属性。|  
|`Correlation`|`ActivityID`|始终存在。|如果`ActivityID`未指定，则默认值是一个空 GUID。|  
||`RelatedActivityID`|取决于是否存在的`relatedActivityId`中的参数`Trace`方法调用。|`RelatedActivityID`特性都对应于`relatedActivityId`参数<xref:System.Diagnostics.EventSchemaTraceListener.TraceTransfer%2A>方法。|  
|`Data`|无|始终存在。|此元素表示参数输入 (`data`)。 每个数据对象提供一个元素。 在事件日志的情况下`Data`元素包含转义的 XML 数据。 对于数据日志，`Data`元素包含非转义的数据。 数据日志输出使用`ToString`传入的数据对象的方法。|  
|`Event`|无|始终存在。|此元素包含一个跟踪事件。|  
|`EventData`|无|事件日志的存在。|此元素表示参数输入 (`message`， `args`)。 它包含`Data`元素与通过调用创建的转义 XML 数据<xref:System.Diagnostics.EventSchemaTraceListener.TraceEvent%2A>方法。|  
|`EventID`|无|始终存在。|此元素表示参数输入 (`id`)。|  
|`Execution`|`ProcessID`|取决于是否存在的<xref:System.Diagnostics.TraceOptions.ProcessId>中标记出来<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性。|`ProcessID`中指定属性<xref:System.Diagnostics.TraceEventCache>。 在 Microsoft Windows 98 和 Windows 千禧年 Edition 操作系统上，如果`ProcessID`大于 2147483647，它是负数正数表示形式，因此应转换若要获取正确的进程标识符。|  
||`ThreadID`|当存在`ProcessID`存在。|`ThreadID`中指定属性<xref:System.Diagnostics.TraceEventCache>。|  
|`Level`|无|始终存在。|此元素表示参数输入 (的数值`eventType`)。 大于 255 的参数值都表示为级别 8，输出<xref:System.Diagnostics.TraceEventType.Information?displayProperty=nameWithType>。 跟踪事件类型<xref:System.Diagnostics.TraceEventType.Critical>， <xref:System.Diagnostics.TraceEventType.Error>， <xref:System.Diagnostics.TraceEventType.Warning>， <xref:System.Diagnostics.TraceEventType.Information>，和<xref:System.Diagnostics.TraceEventType.Verbose>分别作为级别 1、 2、 4、 8 和 10，为输出。|  
|`LogicalOperationStack`|无|取决于是否存在的<xref:System.Diagnostics.TraceOptions.LogicalOperationStack>中标记出来<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性。|只有一个逻辑操作可以存在。 因此，值编写为`LogicalOperation`下的子节点`LogicalOperationStack`元素。|  
|`OpCode`|无|当存在`Level`大于 255。|此元素表示具有数字值大于 255 的跟踪的事件类型。 <xref:System.Diagnostics.TraceEventType.Start><xref:System.Diagnostics.TraceEventType.Stop>， <xref:System.Diagnostics.TraceEventType.Suspend>， <xref:System.Diagnostics.TraceEventType.Resume>，或<xref:System.Diagnostics.TraceEventType.Transfer>分别作为级别 1、 2、 4、 8 和 10，为输出。|  
|`Provider`|`GUID`|始终存在。|始终为空。|  
|`RenderingInfo`|`Culture`|始终存在。|该属性表示的事件类型的资源字符串。 它始终是"en EN\\"。|  
|`System`|`Name`|始终存在。||  
|`TimeCreated`|`SystemTime`|取决于是否存在的<xref:System.Diagnostics.TraceOptions.DateTime>中标记出来<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性。|时间是值<xref:System.Diagnostics.TraceEventCache.DateTime%2A?displayProperty=nameWithType>属性。 此属性表示为协调世界时|  
|`TimeStamp`|无|取决于是否存在的<xref:System.Diagnostics.TraceOptions.Timestamp>中标记出来<xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A>属性。|此元素中指定<xref:System.Diagnostics.TraceEventCache>。|  
|`UserData`|无|存在数据日志。|此元素包含`Data`元素与非转义，提供用户数据从<xref:System.Diagnostics.EventSchemaTraceListener.TraceData%2A>方法。|  
  
 下表显示了 XML 输出中转义的字符。 转义发生中的所有元素和属性除外`UserData`元素，它包含用户提供，以未转义的数据。 `UserData`元素是对的调用结果<xref:System.Diagnostics.EventSchemaTraceListener.TraceData%2A>方法。  
  
|转义字符|“值”|  
|-----------------------|-----------|  
|&|&amp;|  
|\<|&lt;|  
|>|&gt;|  
|"|&quot;|  
|\|&apos;|  
|0xD|&\#xD;|  
|0xA|&\#xA;|  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Diagnostics.EventSchemaTraceListener>类。  
  
 [!code-cpp[System.Diagnostics.EventSchemaTraceListener#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/CPP/eventschematracelistener.cpp#1)]
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#1)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSchemaTraceListener (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSchemaTraceListener(System::String ^ fileName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">日志文件的路径。</param>
        <summary>通过将指定文件用作调试和跟踪输出的接收方来初始化 <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，记录一个文件的不受限制的大小。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%28System.String%29?displayProperty=nameWithType>构造函数。  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener.Ctors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/CS/program.cs#1)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener.Ctors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/VB/program.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSchemaTraceListener (string fileName, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String, name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSchemaTraceListener(System::String ^ fileName, System::String ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">日志文件的路径。</param>
        <param name="name">侦听器名称。</param>
        <summary>通过将指定文件用作调试和跟踪输出的接收方，来初始化具有指定名称的 <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%28System.String%2CSystem.String%2CSystem.Int32%29?displayProperty=nameWithType>构造函数。  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener.Ctors#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/CS/program.cs#2)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener.Ctors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/VB/program.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSchemaTraceListener (string fileName, string name, int bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string name, int32 bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String, name As String, bufferSize As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSchemaTraceListener(System::String ^ fileName, System::String ^ name, int bufferSize);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bufferSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="fileName">日志文件的路径。</param>
        <param name="name">侦听器名称。</param>
        <param name="bufferSize">输出缓冲区的大小（以字节为单位）。</param>
        <summary>通过将指定文件用作调试和跟踪输出的接收方，来初始化具有指定名称和指定缓冲区大小的 <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 出于性能考虑，`bufferSize`应是 1024 个字节的倍数。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%28System.String%2CSystem.String%2CSystem.Int32%29?displayProperty=nameWithType>构造函数。  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener.Ctors#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/CS/program.cs#3)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener.Ctors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/VB/program.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSchemaTraceListener (string fileName, string name, int bufferSize, System.Diagnostics.TraceLogRetentionOption logRetentionOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string name, int32 bufferSize, valuetype System.Diagnostics.TraceLogRetentionOption logRetentionOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String, name As String, bufferSize As Integer, logRetentionOption As TraceLogRetentionOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSchemaTraceListener(System::String ^ fileName, System::String ^ name, int bufferSize, System::Diagnostics::TraceLogRetentionOption logRetentionOption);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="logRetentionOption" Type="System.Diagnostics.TraceLogRetentionOption" />
      </Parameters>
      <Docs>
        <param name="fileName">日志文件的路径。</param>
        <param name="name">侦听器名称。</param>
        <param name="bufferSize">输出缓冲区的大小（以字节为单位）。</param>
        <param name="logRetentionOption">
          <see cref="T:System.Diagnostics.TraceLogRetentionOption" /> 值之一。</param>
        <summary>通过将具有指定日志保留策略的指定文件用作调试和跟踪输出的接收方，来初始化具有指定名称和指定缓冲区大小的 <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 出于性能考虑，`bufferSize`应是 1024 个字节的倍数。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%28System.String%2CSystem.String%2CSystem.Int32%2CSystem.Diagnostics.TraceLogRetentionOption%29?displayProperty=nameWithType>构造函数。  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener.Ctors#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/CS/program.cs#4)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener.Ctors#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/VB/program.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSchemaTraceListener (string fileName, string name, int bufferSize, System.Diagnostics.TraceLogRetentionOption logRetentionOption, long maximumFileSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string name, int32 bufferSize, valuetype System.Diagnostics.TraceLogRetentionOption logRetentionOption, int64 maximumFileSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String, name As String, bufferSize As Integer, logRetentionOption As TraceLogRetentionOption, maximumFileSize As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSchemaTraceListener(System::String ^ fileName, System::String ^ name, int bufferSize, System::Diagnostics::TraceLogRetentionOption logRetentionOption, long maximumFileSize);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="logRetentionOption" Type="System.Diagnostics.TraceLogRetentionOption" />
        <Parameter Name="maximumFileSize" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileName">日志文件的路径。</param>
        <param name="name">侦听器名称。</param>
        <param name="bufferSize">输出缓冲区的大小（以字节为单位）。</param>
        <param name="logRetentionOption">
          <see cref="T:System.Diagnostics.TraceLogRetentionOption" /> 值之一。</param>
        <param name="maximumFileSize">最大文件大小（以字节为单位）。</param>
        <summary>通过将具有指定日志保留策略和最大大小的指定文件用作调试和跟踪输出的接收方，来初始化具有指定名称和缓冲区大小的 <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 出于性能考虑，`bufferSize`和`maximumFileSize`应为 1024 个字节的倍数。 `maximumFileSize` 不是绝对值，它是一个阈值，它可能会超过直到达到最后一条消息的大小。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%28System.String%2CSystem.String%2CSystem.Int32%2CSystem.Diagnostics.TraceLogRetentionOption%2CSystem.Int64%29?displayProperty=nameWithType>构造函数。  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener.Ctors#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/CS/program.cs#5)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener.Ctors#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener.Ctors/VB/program.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maximumFileSize" /> 为负数。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSchemaTraceListener (string fileName, string name, int bufferSize, System.Diagnostics.TraceLogRetentionOption logRetentionOption, long maximumFileSize, int maximumNumberOfFiles);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string name, int32 bufferSize, valuetype System.Diagnostics.TraceLogRetentionOption logRetentionOption, int64 maximumFileSize, int32 maximumNumberOfFiles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption,System.Int64,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String, name As String, bufferSize As Integer, logRetentionOption As TraceLogRetentionOption, maximumFileSize As Long, maximumNumberOfFiles As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSchemaTraceListener(System::String ^ fileName, System::String ^ name, int bufferSize, System::Diagnostics::TraceLogRetentionOption logRetentionOption, long maximumFileSize, int maximumNumberOfFiles);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bufferSize" Type="System.Int32" />
        <Parameter Name="logRetentionOption" Type="System.Diagnostics.TraceLogRetentionOption" />
        <Parameter Name="maximumFileSize" Type="System.Int64" />
        <Parameter Name="maximumNumberOfFiles" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="fileName">日志文件的路径。</param>
        <param name="name">侦听器名称。</param>
        <param name="bufferSize">输出缓冲区的大小（以字节为单位）。</param>
        <param name="logRetentionOption">
          <see cref="T:System.Diagnostics.TraceLogRetentionOption" /> 值之一。</param>
        <param name="maximumFileSize">最大文件大小（以字节为单位）。</param>
        <param name="maximumNumberOfFiles">输出日志文件的最大数。</param>
        <summary>通过将具有指定日志保留策略、最大大小和文件计数的指定文件用作调试和跟踪输出的接收方，来初始化具有指定名称和指定缓冲区大小的 <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 出于性能考虑，`bufferSize`和`maximumFileSize`应为 1024 个字节的倍数。 `maximumFileSize` 不是绝对值的数值;它是可以直到达到最后一条消息的大小超过了阈值。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Diagnostics.EventSchemaTraceListener.%23ctor%2A>构造函数。 此代码示例是一个更大的示例为提供的一部分<xref:System.Diagnostics.EventSchemaTraceListener>类。  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#2)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maximumNumberOfFiles" /> 小于 2，<paramref name="logRetentionOption" /> 为 <see cref="F:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="BufferSize">
      <MemberSignature Language="C#" Value="public int BufferSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BufferSize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSchemaTraceListener.BufferSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BufferSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BufferSize { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取输出缓冲区的大小。</summary>
        <value>输出缓冲区的大小（以字节为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过设置属性值`bufferSize`构造函数中的参数。 出于性能原因，缓冲区大小应设置为 1024 字节的倍数。 我们建议 32 * 1024 字节的默认大小或 64\*1024 个字节，以获得最佳性能。  
  
   
  
## Examples  
 下面的代码示例演示如何显示的值<xref:System.Diagnostics.EventSchemaTraceListener.BufferSize%2A>属性。 此代码示例是一个更大的示例为提供的一部分<xref:System.Diagnostics.EventSchemaTraceListener>类。  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#5)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>关闭该侦听器的日志文件，以使其不再接收跟踪或调试输出。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public override void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Fail(string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.Fail(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Fail (message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Fail(System::String ^ message, System::String ^ detailMessage);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">要写入的基本错误消息。</param>
        <param name="detailMessage">要追加到基本错误消息中的详细错误消息。</param>
        <summary>将包含基本错误消息和详细错误消息的错误信息写入日志文件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>导致缓冲数据写入该侦听器的日志。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSupportedAttributes">
      <MemberSignature Language="C#" Value="protected override string[] GetSupportedAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string[] GetSupportedAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.GetSupportedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetSupportedAttributes () As String()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override cli::array &lt;System::String ^&gt; ^ GetSupportedAttributes();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取跟踪侦听器支持的自定义 XML 配置特性。</summary>
        <returns>一个 <see cref="T:System.String" /> 数组，其中包含此侦听器可识别的 XML 配置特性。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以在 XML 配置文件中使用此方法返回的自定义属性来控制的实例的行为的<xref:System.Diagnostics.EventSchemaTraceListener>类。 使用任何其他属性会导致配置异常。 <xref:System.Diagnostics.EventSchemaTraceListener.GetSupportedAttributes%2A>方法<xref:System.Diagnostics.EventSchemaTraceListener>数组值返回以下字符串:"bufferSize"，"logRetentionOption"，"maximumFileSize"和"maximumNumberOfFiles"。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsThreadSafe">
      <MemberSignature Language="C#" Value="public override bool IsThreadSafe { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsThreadSafe" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSchemaTraceListener.IsThreadSafe" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsThreadSafe As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsThreadSafe { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示跟踪侦听器是否是线程安全的。</summary>
        <value>始终返回 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何显示的值<xref:System.Diagnostics.EventSchemaTraceListener.IsThreadSafe%2A>属性。 此代码示例是一个更大的示例为提供的一部分<xref:System.Diagnostics.EventSchemaTraceListener>类。  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#4)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumFileSize">
      <MemberSignature Language="C#" Value="public long MaximumFileSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaximumFileSize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaximumFileSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaximumFileSize { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取日志文件的最大大小。</summary>
        <value>最大文件大小（以字节为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过设置属性值`maximumFileSize`构造函数中的参数或`maximumFileSize`配置文件中的属性。 出于性能原因，你应设置为 1024 字节的倍数的最大文件大小。 <xref:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize%2A>属性值不是绝对; 它是可以直到达到最后一条消息的大小超过了阈值。  
  
 下表显示可能的值与默认值文件大小与每个跟踪日志保留选项相关联。 这些值标记为不适用，则指示<xref:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize%2A>属性不会检查该<xref:System.Diagnostics.TraceLogRetentionOption>值。  
  
|TraceLogRetentionOption|最大文件大小|默认文件大小|  
|-----------------------------|-----------------------|-----------------------|  
|<xref:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles>|不可用|-1|  
|<xref:System.Diagnostics.TraceLogRetentionOption.LimitedSequentialFiles>|>0|4 KB|  
|<xref:System.Diagnostics.TraceLogRetentionOption.SingleFileBoundedSize>|>0|4 KB|  
|<xref:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize>|>0|4 KB|  
|<xref:System.Diagnostics.TraceLogRetentionOption.UnlimitedSequentialFiles>|>0|4 KB|  
  
   
  
## Examples  
 下面的代码示例演示如何显示的值<xref:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize%2A>属性。 此代码示例是一个更大的示例为提供的一部分<xref:System.Diagnostics.EventSchemaTraceListener>类。  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#6)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumNumberOfFiles">
      <MemberSignature Language="C#" Value="public int MaximumNumberOfFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaximumNumberOfFiles" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaximumNumberOfFiles As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaximumNumberOfFiles { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取日志文件最大数。</summary>
        <value>日志文件最大数是由文件的 <see cref="P:System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption" /> 属性的值来确定。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过设置属性值`maximumNumberOfFiles`构造函数中的参数或`maximumNumberOfFiles`配置文件中的属性。  
  
 下表显示对于文件大小和文件计数与每个跟踪日志保留选项相关联的可能和默认值。 这些值标记为不适用，则指示<xref:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles%2A>属性不会检查该<xref:System.Diagnostics.TraceLogRetentionOption>值。  
  
|TraceLogRetentionOption|最大文件数|文件默认数量|  
|-----------------------------|-----------------------------|-----------------------------|  
|<xref:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles>|不可用|1|  
|<xref:System.Diagnostics.TraceLogRetentionOption.LimitedSequentialFiles>|不可用|1|  
|<xref:System.Diagnostics.TraceLogRetentionOption.SingleFileBoundedSize>|不可用|-1|  
|<xref:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize>|>0|1|  
|<xref:System.Diagnostics.TraceLogRetentionOption.UnlimitedSequentialFiles>|>1|2|  
  
   
  
## Examples  
 下面的代码示例演示如何显示的值<xref:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles%2A>属性。 此代码示例是一个更大的示例为提供的一部分<xref:System.Diagnostics.EventSchemaTraceListener>类。  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#7)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceData">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将跟踪数据写入日志文件。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::Object ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
        <param name="source">源名称。</param>
        <param name="eventType">
          <see cref="T:System.Diagnostics.TraceEventType" /> 值之一。</param>
        <param name="id">事件的数值标识符。</param>
        <param name="data">要发出的数据对象。</param>
        <summary>将跟踪信息、单个数据对象和事件信息写入日志文件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `eventCache`， `source`， `eventType`，和`id`页眉和页脚的跟踪中使用参数。 `id`参数转换为无符号整数，它写入之前。 因此，一个负数`id`作为较大的正整数写入值。 `data`参数写作`Data`中的节点`UserData`元素。 `ToString`数据对象方法用于将对象转换为字符串。  
  
> [!IMPORTANT]
>  此方法不应直接由应用程序代码调用。 方法的调用<xref:System.Diagnostics.Debug>， <xref:System.Diagnostics.Trace>，和<xref:System.Diagnostics.TraceSource>类来写入跟踪数据。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, ParamArray data As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, ... cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
        <param name="source">源名称。</param>
        <param name="eventType">
          <see cref="T:System.Diagnostics.TraceEventType" /> 值之一。</param>
        <param name="id">事件的数值标识符。</param>
        <param name="data">要发出的数据对象的数组。</param>
        <summary>将跟踪信息、多个数据对象和事件信息写入日志文件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `eventCache`， `source`， `eventType`，和`id`页眉和页脚的跟踪中使用参数。 `id`参数转换为无符号整数，它写入之前。 因此，一个负数`id`作为较大的正整数写入值。 中的对象`data`参数数组都被编写为`Data`中的节点`UserData`元素。 `ToString`的每个数据对象的方法用于将对象转换为字符串。  
  
> [!IMPORTANT]
>  此方法不应直接由应用程序代码调用。 方法的调用<xref:System.Diagnostics.Debug>， <xref:System.Diagnostics.Trace>，和<xref:System.Diagnostics.TraceSource>类来写入跟踪数据。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceEvent">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将事件跟踪信息写入日志文件。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
        <param name="source">源名称。</param>
        <param name="eventType">
          <see cref="T:System.Diagnostics.TraceEventType" /> 值之一。</param>
        <param name="id">事件的数值标识符。</param>
        <param name="message">要写入的消息。</param>
        <summary>将跟踪信息、消息和事件信息写入日志文件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `eventCache`， `source`， `eventType`，和`id`页眉和页脚的跟踪中使用参数。 `id`参数转换为无符号整数，它写入之前。 因此，一个负数`id`作为较大的正整数写入值。 `message`参数写作`Data`中的节点`EventData`元素。  
  
> [!IMPORTANT]
>  此方法不应直接由应用程序代码调用。 方法的调用<xref:System.Diagnostics.Debug>， <xref:System.Diagnostics.Trace>，和<xref:System.Diagnostics.TraceSource>类来写入跟踪数据。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
        <param name="source">源名称。</param>
        <param name="eventType">
          <see cref="T:System.Diagnostics.TraceEventType" /> 值之一。</param>
        <param name="id">事件的数值标识符。</param>
        <param name="format">包含零个或多个格式项的格式字符串，这些项与 <c>args</c> 数组中的对象相对应。</param>
        <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
        <summary>将跟踪信息、格式化消息和事件信息写入日志文件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `eventCache`， `source`， `eventType`，和`id`页眉和页脚的跟踪中使用参数。 `id`参数转换为无符号整数，它写入之前。 因此，一个负数`id`作为较大的正整数写入值。 <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>调用方法和`format`字符串和`args`数组作为参数传递。 此方法设置的格式`args`对象数组并将写入格式化的数组作为`Data`中的节点`EventData`元素。  
  
> [!IMPORTANT]
>  此方法不应直接由应用程序代码调用。 方法的调用<xref:System.Diagnostics.Debug>， <xref:System.Diagnostics.Trace>，和<xref:System.Diagnostics.TraceSource>类来写入跟踪数据。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceLogRetentionOption">
      <MemberSignature Language="C#" Value="public System.Diagnostics.TraceLogRetentionOption TraceLogRetentionOption { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.TraceLogRetentionOption TraceLogRetentionOption" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TraceLogRetentionOption As TraceLogRetentionOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::TraceLogRetentionOption TraceLogRetentionOption { System::Diagnostics::TraceLogRetentionOption get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.TraceLogRetentionOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取该文件的跟踪日志保留选项。</summary>
        <value>
          <see cref="T:System.Diagnostics.TraceLogRetentionOption" /> 值之一。 默认值为 <see cref="F:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何显示的值<xref:System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption%2A>属性。 此代码示例是一个更大的示例为提供的一部分<xref:System.Diagnostics.EventSchemaTraceListener>类。  
  
 [!code-csharp[System.Diagnostics.EventSchemaTraceListener#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/cs/program.cs#9)]
 [!code-vb[System.Diagnostics.EventSchemaTraceListener#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.EventSchemaTraceListener/vb/program.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraceTransfer">
      <MemberSignature Language="C#" Value="public override void TraceTransfer (System.Diagnostics.TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceTransfer(class System.Diagnostics.TraceEventCache eventCache, string source, int32 id, string message, valuetype System.Guid relatedActivityId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceTransfer (eventCache As TraceEventCache, source As String, id As Integer, message As String, relatedActivityId As Guid)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceTransfer(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, int id, System::String ^ message, Guid relatedActivityId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="relatedActivityId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
        <param name="source">源名称。</param>
        <param name="id">事件的数值标识符。</param>
        <param name="message">要写入的跟踪消息。</param>
        <param name="relatedActivityId">标识相关活动的 <see cref="T:System.Guid" /> 结构。</param>
        <summary>将跟踪信息（包括相关活动的标识）、消息和事件信息写入日志文件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventSchemaTraceListener.TraceTransfer%2A>方法用于关联相关的跟踪。 `eventCache`， `source`， `id`，和`relatedActivityId`页眉和页脚的跟踪中使用参数。 `id`参数转换为无符号整数，它写入之前。 因此，一个负数`id`作为较大的正整数写入值。 `message`参数写作`Data`元素。 <xref:System.Guid.ToString%28System.String%29?displayProperty=nameWithType>调用方法来转换`relatedActivityId`值为"B"格式字符串，它显示在标头。 `Opcode`页脚中的元素标识与跟踪事件类型<xref:System.Diagnostics.TraceEventType.Transfer>。  
  
> [!IMPORTANT]
>  <xref:System.Diagnostics.EventSchemaTraceListener.TraceTransfer%2A>不应由应用程序代码调用方法。 它旨在供<xref:System.Diagnostics.TraceSource>对象发出的跟踪信息其<xref:System.Diagnostics.TraceSource.TraceTransfer%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">要写入的消息。</param>
        <summary>将消息写入日志文件，且不提供任何其他上下文信息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventSchemaTraceListener.TraceEvent%2A>调用方法来将消息记录为<xref:System.Diagnostics.TraceEventType.Information>事件。  
  
> [!IMPORTANT]
>  此方法不应直接由应用程序代码调用。 方法的调用<xref:System.Diagnostics.Debug>， <xref:System.Diagnostics.Trace>，和<xref:System.Diagnostics.TraceSource>类来写入跟踪数据。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSchemaTraceListener.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">要写入的消息。</param>
        <summary>将后跟当前行终止符的消息写入日志文件，且不提供任何其他上下文信息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventSchemaTraceListener.TraceEvent%2A>调用方法来将消息记录为<xref:System.Diagnostics.TraceEventType.Information>事件。  
  
> [!IMPORTANT]
>  此方法不应直接由应用程序代码调用。 方法的调用<xref:System.Diagnostics.Debug>， <xref:System.Diagnostics.Trace>，和<xref:System.Diagnostics.TraceSource>类来写入跟踪数据。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Writer">
      <MemberSignature Language="C#" Value="public System.IO.TextWriter Writer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.TextWriter Writer" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSchemaTraceListener.Writer" />
      <MemberSignature Language="VB.NET" Value="Public Property Writer As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::TextWriter ^ Writer { System::IO::TextWriter ^ get(); void set(System::IO::TextWriter ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置写入日志文件的基础文本编写器。</summary>
        <value>
          <see cref="T:System.IO.TextWriter" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 尝试使用 set 访问器<xref:System.Diagnostics.EventSchemaTraceListener.Writer%2A>属性引发<xref:System.NotSupportedException>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">尝试向 <see cref="P:System.Diagnostics.EventSchemaTraceListener.Writer" /> 属性分配值。</exception>
      </Docs>
    </Member>
  </Members>
</Type>