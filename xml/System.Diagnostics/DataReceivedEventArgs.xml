<Type Name="DataReceivedEventArgs" FullName="System.Diagnostics.DataReceivedEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="205ebec39040ed058ad9ffbdc4b91602849b5386" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30397211" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataReceivedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataReceivedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.DataReceivedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class DataReceivedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataReceivedEventArgs : EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Process</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供有关 <see cref="E:System.Diagnostics.Process.OutputDataReceived" /> 和 <see cref="E:System.Diagnostics.Process.ErrorDataReceived" /> 事件的数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要以异步方式收集的重定向<xref:System.Diagnostics.Process.StandardOutput%2A>或<xref:System.Diagnostics.Process.StandardError%2A>流输出的过程中，你必须创建处理重定向的流输出事件的方法的。 进程写入重定向流时调用事件处理程序方法。 事件委托调用事件处理程序的实例与<xref:System.Diagnostics.DataReceivedEventArgs>。 <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A>属性包含进程已写入到重定向流的文本行。  
  
   
  
## Examples  
 下面的代码示例演示如何执行上的重定向的异步读取的操作<xref:System.Diagnostics.Process.StandardOutput%2A>流`sort`命令。 `sort`命令是一个控制台应用程序，读取对文本输入进行排序。  
  
 该示例创建一个事件委托，它为`SortOutputHandler`事件处理程序并将其与关联<xref:System.Diagnostics.Process.OutputDataReceived>事件。 事件处理程序接收来自的重定向的文本行<xref:System.Diagnostics.Process.StandardOutput%2A>流，格式文本，并将文本写入屏幕。  
  
 [!code-cpp[Process_AsyncStreams#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/sort_async.cpp#1)]
 [!code-csharp[Process_AsyncStreams#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/sort_async.cs#1)]
 [!code-vb[Process_AsyncStreams#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/sort_async.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.DataReceivedEventHandler" />
    <altmember cref="E:System.Diagnostics.Process.OutputDataReceived" />
    <altmember cref="E:System.Diagnostics.Process.ErrorDataReceived" />
    <altmember cref="T:System.Diagnostics.Process" />
  </Docs>
  <Members>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public string Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Data" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.DataReceivedEventArgs.Data" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Data As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Data { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取写入到重定向 <see cref="T:System.Diagnostics.Process" /> 输出流的字符行。</summary>
        <value>由关联的 <see cref="T:System.Diagnostics.Process" /> 写入到其重定向 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 或 <see cref="P:System.Diagnostics.Process.StandardError" /> 流中的行。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当你将重定向<xref:System.Diagnostics.Process.StandardOutput%2A>或<xref:System.Diagnostics.Process.StandardError%2A>流<xref:System.Diagnostics.Process>到事件处理程序，事件每次都会引发该过程将行写入到重定向流。 <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A>属性是行的<xref:System.Diagnostics.Process>已写入到重定向的输出流。 事件处理程序可以使用<xref:System.Diagnostics.DataReceivedEventArgs.Data%2A>属性来筛选进程输出或将输出写入到备用位置。 例如，你可能创建的事件处理程序将所有的错误输出行存储到指定的错误日志文件。  
  
 行被定义为一系列字符后跟换行符 ("\n") 或一个回车符后面紧跟行换行符 ("\r\n")。 使用默认系统的 ANSI 代码页，行字符进行编码。 <xref:System.Diagnostics.DataReceivedEventArgs.Data%2A>属性不会不包括终止回车符或换行符。  
  
 当重定向的流已关闭时，null 行发送到事件处理程序。 确保你的事件处理程序检查<xref:System.Diagnostics.DataReceivedEventArgs.Data%2A>适当之前对其进行访问的属性。 例如，可以使用的静态方法<xref:System.String.IsNullOrEmpty%2A?displayProperty=nameWithType>验证<xref:System.Diagnostics.DataReceivedEventArgs.Data%2A>事件处理程序中的属性。  
  
   
  
## Examples  
 下面的代码示例阐释了简单的事件处理程序与关联<xref:System.Diagnostics.Process.OutputDataReceived>事件。 事件处理程序接收来自的重定向的文本行<xref:System.Diagnostics.Process.StandardOutput%2A>流，格式文本，并将文本写入屏幕。  
  
 [!code-cpp[Process_AsyncStreams#4](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/datareceivedevent.cpp#4)]
 [!code-csharp[Process_AsyncStreams#4](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/datareceivedevent.cs#4)]
 [!code-vb[Process_AsyncStreams#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/datareceivedevent.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>