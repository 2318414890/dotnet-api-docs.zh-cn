<Type Name="EventLogEntry" FullName="System.Diagnostics.EventLogEntry">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c7e853eba92ac12a35bdff18e6aa0fe055816241" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36674944" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class EventLogEntry : System.ComponentModel.Component, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit EventLogEntry extends System.ComponentModel.Component implements class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventLogEntry" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EventLogEntry&#xA;Inherits Component&#xA;Implements ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventLogEntry sealed : System::ComponentModel::Component, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type EventLogEntry = class&#xA;    inherit Component&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DesignTimeVisible(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>在事件日志中封装单个记录。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你通常不会创建的实例<xref:System.Diagnostics.EventLogEntry>直接使用时<xref:System.Diagnostics.EventLog>类。 <xref:System.Diagnostics.EventLog.Entries%2A>的成员<xref:System.Diagnostics.EventLog>类包含一套<xref:System.Diagnostics.EventLogEntry>实例，通过使用读取时循环访问<xref:System.Diagnostics.EventLogEntryCollection.Item%2A?displayProperty=nameWithType>类索引成员。  
  
> [!IMPORTANT]
>  此类型实现<xref:System.IDisposable>接口。 在使用完类型后，您应直接或间接释放类型。 若要直接释放类型，调用其<xref:System.IDisposable.Dispose%2A>中的方法`try` / `catch`块。 若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。 有关详细信息，请参阅中的"使用实现 IDisposable 的对象"部分<xref:System.IDisposable>接口主题。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.Diagnostics.EventLogEntry>类。 在此示例中，`switch`语句使用控制台输入要搜索指定的事件类型的事件日志条目。  如果找到匹配项，则在控制台显示日志项的源信息。  
  
 [!code-cpp[EventLogEntry_Source#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogEntry_Source/CPP/eventlogentry_source.cpp#1)]
 [!code-csharp[EventLogEntry_Source#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogEntry_Source/CS/eventlogentry_source.cs#1)]
 [!code-vb[EventLogEntry_Source#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogEntry_Source/VB/eventlogentry_source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.EventLog" />
    <altmember cref="T:System.Diagnostics.EventLogEntryCollection" />
    <altmember cref="T:System.Diagnostics.EventInstance" />
  </Docs>
  <Members>
    <Member MemberName="Category">
      <MemberSignature Language="C#" Value="public string Category { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Category" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.Category" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Category As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Category { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Category : string" Usage="System.Diagnostics.EventLogEntry.Category" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The category of this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与该项的 <see cref="P:System.Diagnostics.EventLogEntry.CategoryNumber" /> 属性关联的文本。</summary>
        <value>应用程序特定的类别文本。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每个应用程序 （事件源） 可以定义自己带编号的类别以及它们映射到的文本字符串。 事件查看器可以在日志中使用的类别筛选事件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">未能为与类别关联的插入字符串之一分配空间。</exception>
        <altmember cref="P:System.Diagnostics.EventLogEntry.CategoryNumber" />
        <altmember cref="P:System.Diagnostics.EventInstance.CategoryId" />
      </Docs>
    </Member>
    <Member MemberName="CategoryNumber">
      <MemberSignature Language="C#" Value="public short CategoryNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 CategoryNumber" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.CategoryNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CategoryNumber As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property short CategoryNumber { short get(); };" />
      <MemberSignature Language="F#" Value="member this.CategoryNumber : int16" Usage="System.Diagnostics.EventLogEntry.CategoryNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("An ID for the category of this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取事件日志项的类别号。</summary>
        <value>该项的应用程序特定类别号。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每个应用程序 （事件源） 可以定义自己带编号的类别以及它们映射到的文本字符串。 事件查看器可以在日志中使用的类别筛选事件。 类别必须是连续编号开头使用数字 1。 指定的类别号<xref:System.Diagnostics.EventInstance.CategoryId%2A?displayProperty=nameWithType>属性。 事件查看器可将类别显示为数字值，或者它可以作为资源标识符使用类别，以显示本地化的类别字符串。 有关详情，请参阅<xref:System.Diagnostics.EventInstance>。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogEntry.EntryType" />
        <altmember cref="P:System.Diagnostics.EventLogEntry.Category" />
        <altmember cref="P:System.Diagnostics.EventInstance.CategoryId" />
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public byte[] Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Data" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.Data" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Data As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Data { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Data : byte[]" Usage="System.Diagnostics.EventLogEntry.Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Binary data associated with this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与该项关联的二进制数据。</summary>
        <value>包含与此项关联的二进制数据的字节数组。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 获取此属性创建一个数组，其中包含的项的特定事件的二进制数据，其中显示组合的十六进制转义序列和文本格式中的事件查看器的副本。 特定于事件的数据有时用来存储应用程序将独立于事件查看器中，例如处理的信息，以使报表从日志文件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EntryType">
      <MemberSignature Language="C#" Value="public System.Diagnostics.EventLogEntryType EntryType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.EventLogEntryType EntryType" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.EntryType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EntryType As EventLogEntryType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::EventLogEntryType EntryType { System::Diagnostics::EventLogEntryType get(); };" />
      <MemberSignature Language="F#" Value="member this.EntryType : System.Diagnostics.EventLogEntryType" Usage="System.Diagnostics.EventLogEntry.EntryType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The type of this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.EventLogEntryType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取该项的事件类型。</summary>
        <value>与事件日志中的项相关联的事件类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所有事件类型具有定义完善的常用数据，并且可以根据需要包含特定于事件的数据。 每个事件是应用程序将指示它在报告事件时的单一类型。 事件查看器使用的事件类型来确定要在事件日志的列表视图中显示的图标。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.Diagnostics.EventLogEntry.EntryType%2A>属性。 在此示例中，`switch`语句使用控制台输入要搜索指定的事件日志条目<xref:System.Diagnostics.EventLogEntry.EntryType%2A>。  如果找到匹配项，则在控制台显示日志项的源信息。  
  
 [!code-cpp[EventLogEntry_Source#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogEntry_Source/CPP/eventlogentry_source.cpp#1)]
 [!code-csharp[EventLogEntry_Source#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogEntry_Source/CS/eventlogentry_source.cs#1)]
 [!code-vb[EventLogEntry_Source#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogEntry_Source/VB/eventlogentry_source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.EventLogEntryType" />
        <altmember cref="P:System.Diagnostics.EventInstance.EntryType" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Diagnostics.EventLogEntry otherEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(class System.Diagnostics.EventLogEntry otherEntry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogEntry.Equals(System.Diagnostics.EventLogEntry)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (otherEntry As EventLogEntry) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Diagnostics::EventLogEntry ^ otherEntry);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Diagnostics.EventLogEntry -&gt; bool" Usage="eventLogEntry.Equals otherEntry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherEntry" Type="System.Diagnostics.EventLogEntry" />
      </Parameters>
      <Docs>
        <param name="otherEntry">要比较的 <see cref="T:System.Diagnostics.EventLogEntry" />。</param>
        <summary>对两个事件日志项进行比较。</summary>
        <returns>如果 <see cref="T:System.Diagnostics.EventLogEntry" /> 对象完全相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法执行两个对象之间的逐字节比较。 它不会不确定是否两个<xref:System.Diagnostics.EventLogEntry>实例引用同一对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EventID">
      <MemberSignature Language="C#" Value="public int EventID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 EventID" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.EventID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EventID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int EventID { int get(); };" />
      <MemberSignature Language="F#" Value="member this.EventID : int" Usage="System.Diagnostics.EventLogEntry.EventID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("An ID number for this event entry.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use InstanceId")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前事件项的应用程序特定事件标识符。</summary>
        <value>事件消息的应用程序特定标识符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 事件日志，并且最顶部的两位掩码中，此值表示的项的事件标识符。 <xref:System.Diagnostics.EventLogEntry.InstanceId%2A>一个事件日志条目的属性表示为事件源的消息资源文件中的事件的完整的 32 位资源标识符。 来自同一源的两个事件日志项可以有匹配<xref:System.Diagnostics.EventLogEntry.EventID%2A>值，但具有不同<xref:System.Diagnostics.EventLogEntry.InstanceId%2A>存在差异导致的事件标识符最高两位的值。  
  
 如果应用程序写入事件项使用之一<xref:System.Diagnostics.EventLog.WriteEntry%2A>方法，<xref:System.Diagnostics.EventLogEntry.EventID%2A>属性匹配可选`eventId`参数。 如果应用程序编写事件使用<xref:System.Diagnostics.EventLog.WriteEvent%2A>或 Win32 API `ReportEvent`、<xref:System.Diagnostics.EventLogEntry.EventID%2A>与最高的两位掩码属性相匹配的事件的资源标识符。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogEntry.InstanceId" />
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public int Index { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Index" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.Index" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Index As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Index { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Index : int" Usage="System.Diagnostics.EventLogEntry.Index" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Sequence numer of this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取该项在事件日志中的索引。</summary>
        <value>该项在事件日志中的索引。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此数量不一定是从零开始。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InstanceId">
      <MemberSignature Language="C#" Value="public long InstanceId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 InstanceId" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.InstanceId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InstanceId As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long InstanceId { long get(); };" />
      <MemberSignature Language="F#" Value="member this.InstanceId : int64" Usage="System.Diagnostics.EventLogEntry.InstanceId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The instance ID for this event entry.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取指定事件项的消息文本的资源标识符。</summary>
        <value>资源标识符，与事件源的消息资源文件中的字符串定义对应。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventLogEntry.InstanceId%2A>属性唯一地标识配置的事件源的事件条目。 <xref:System.Diagnostics.EventLogEntry.InstanceId%2A>为事件日志条目表示为事件源的消息资源文件中的事件的完整的 32 位资源标识符。 <xref:System.Diagnostics.EventLogEntry.EventID%2A>属性等于<xref:System.Diagnostics.EventLogEntry.InstanceId%2A>与最高的两位掩码。 来自同一源的两个事件日志项可以有匹配<xref:System.Diagnostics.EventLogEntry.EventID%2A>值，但具有不同<xref:System.Diagnostics.EventLogEntry.InstanceId%2A>存在差异导致的资源标识符最高两位的值。  
  
 如果应用程序写入事件项使用之一<xref:System.Diagnostics.EventLog.WriteEntry%2A>方法，<xref:System.Diagnostics.EventLogEntry.InstanceId%2A>属性匹配可选`eventId`参数。 如果应用程序编写事件使用<xref:System.Diagnostics.EventLog.WriteEvent%2A>、<xref:System.Diagnostics.EventLogEntry.InstanceId%2A>属性中指定的资源标识符匹配<xref:System.Diagnostics.EventInstance.InstanceId%2A>的`instance`参数。 如果应用程序写入事件使用 Win32 API `ReportEvent`、<xref:System.Diagnostics.EventLogEntry.InstanceId%2A>属性中指定的资源标识符匹配`dwEventID`参数。  
  
 有关如何定义事件消息和生成事件日志资源文件的详细信息，请参阅处平台 SDK 文档中的"消息编译器"主题[ http://msdn.microsoft.com ](http://msdn.microsoft.com/)。 有关事件日志的标识符的详细信息，请参阅平台 SDK 中的"事件标识符"主题。  
  
   
  
## Examples  
 下面的代码示例中搜索事件日志中具有特定的资源标识符的项。 此代码示例显示事件消息以了解每个匹配项，并计算在日志中的匹配项的总数目。 每个条目的消息文本可能也可能不是相同的;每个事件消息取决于事件源消息文件、 插入字符串和写入时使用的参数。  
  
 [!code-cpp[EventLog_WriteEvent#10](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#10)]
 [!code-csharp[EventLog_WriteEvent#10](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#10)]
 [!code-vb[EventLog_WriteEvent#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventInstance.InstanceId" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MachineName : string" Usage="System.Diagnostics.EventLogEntry.MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The Computer on which this event entry occured.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取在其上生成该项的计算机的名称。</summary>
        <value>包含事件日志的计算机的名称。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Message">
      <MemberSignature Language="C#" Value="public string Message { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Message" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.Message" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Message As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Message { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Message : string" Usage="System.Diagnostics.EventLogEntry.Message" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.BinaryEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The message of this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与该事件项关联的本地化消息。</summary>
        <value>消息的格式化、本地化文本。 其中包含关联的替换字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 获取此属性将打开注册表项以确定包含本地化后的文本的.dll 文件的文件名。 如果测试你的源代码时，你会收到注册表错误，请验证计算机上存在的.dll 文件。 如果插入字符串包含消息中，捕获其分配中的错误。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">未能为与消息关联的插入字符串之一分配空间。</exception>
        <altmember cref="T:System.Diagnostics.EventInstance" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="ReplacementStrings">
      <MemberSignature Language="C#" Value="public string[] ReplacementStrings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ReplacementStrings" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.ReplacementStrings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReplacementStrings As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ ReplacementStrings { cli::array &lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReplacementStrings : string[]" Usage="System.Diagnostics.EventLogEntry.ReplacementStrings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Application strings for this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与事件日志项关联的替换字符串。</summary>
        <value>包含存储在事件项中的替换字符串的数组。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性只检索的替换字符串的项。 若要检索完整的消息，请阅读<xref:System.Diagnostics.EventLogEntry.Message%2A>属性。  
  
 <xref:System.Diagnostics.EventLogEntry.ReplacementStrings%2A>属性包含在事件日志条目中使用的替换字符串的本地化的版本。 如果你提供包含在你的应用程序每个目标语言的字符串的资源文件，你可以发出该计算机使用的语言中的事件日志消息。 为此，请创建的实例<xref:System.Resources.ResourceManager>包含替换字符串的资源程序集的类。 第一个参数<xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29>构造函数标识要使用的资源程序集。 使用<xref:System.Resources.ResourceManager.GetString%2A>该实例提供本地化的消息的日志事件的方法。 下面的代码会自动设置用于当前区域性的语言的消息。  
  
```  
ResourceManager LocRM = new ResourceManager("ReplacementStrings.TestStrings",   
      typeof(Program).Assembly);  
EventLog e1 = new EventLog("LocTest", "MyMachine", "LocTest");  
// Get the string associated with the current culture.  
e1.WriteEntry(LocRM.GetString("strMessage"),  
   EventLogEntryType.Information);  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogEntry.Message" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.Source" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Source : string" Usage="System.Diagnostics.EventLogEntry.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The source application of this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取生成该事件的应用程序的名称。</summary>
        <value>在事件日志中注册为该事件的源的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 事件源指示什么来记录事件。 它通常是应用程序的名称或应用程序的子组件名称如果应用程序非常大。 应用程序和服务通常写入到 （并且因此可用于的资源） 应用程序日志或自定义日志。 设备驱动程序通常写入系统日志。  
  
   
  
## Examples  
 下面的代码示例演示如何将<xref:System.Diagnostics.EventLogEntry.Source%2A>属性。 在此示例中，`switch`语句使用控制台输入要搜索指定的事件日志条目<xref:System.Diagnostics.EventLogEntry.EntryType%2A>。  如果找到匹配项，则<xref:System.Diagnostics.EventLogEntry.Source%2A>属性信息显示在控制台。  
  
 [!code-cpp[EventLogEntry_Source#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogEntry_Source/CPP/eventlogentry_source.cpp#1)]
 [!code-csharp[EventLogEntry_Source#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogEntry_Source/CS/eventlogentry_source.cs#1)]
 [!code-vb[EventLogEntry_Source#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogEntry_Source/VB/eventlogentry_source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLogEntry.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Needs serialization support")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
        <param name="context">此序列化的目标（请参见 <see cref="T:System.Runtime.Serialization.StreamingContext" />）。</param>
        <summary>使用将目标对象序列化所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeGenerated">
      <MemberSignature Language="C#" Value="public DateTime TimeGenerated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime TimeGenerated" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.TimeGenerated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeGenerated As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime TimeGenerated { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeGenerated : DateTime" Usage="System.Diagnostics.EventLogEntry.TimeGenerated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Generation time of this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取生成该事件的本地时间。</summary>
        <value>生成该事件的本地时间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员包含生成事件的时间。 这可能不是事件日志中的事件信息写入时的时间相同。 对于后者，读取<xref:System.Diagnostics.EventLogEntry.TimeWritten%2A>属性。  
  
 通常是生成一个事件的时间和它记录的时间之间的延迟。 很多重要知道生成事件的除非你想要查看的日志记录是否存在显著的滞后。 如果日志文件位于不同的服务器上并且在遇到瓶颈，则可能发生的。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogEntry.TimeWritten" />
      </Docs>
    </Member>
    <Member MemberName="TimeWritten">
      <MemberSignature Language="C#" Value="public DateTime TimeWritten { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime TimeWritten" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.TimeWritten" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeWritten As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime TimeWritten { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeWritten : DateTime" Usage="System.Diagnostics.EventLogEntry.TimeWritten" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The time at which this event entry was written to the logfile.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取在日志中写入该事件的本地时间。</summary>
        <value>在日志中写入该事件的本地时间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员包含某一事件的信息写入事件日志的时间。 这可能不在同一生成事件的时间。 对于后者，读取<xref:System.Diagnostics.EventLogEntry.TimeGenerated%2A>属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.EventLogEntry.TimeGenerated" />
      </Docs>
    </Member>
    <Member MemberName="UserName">
      <MemberSignature Language="C#" Value="public string UserName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UserName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLogEntry.UserName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UserName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserName : string" Usage="System.Diagnostics.EventLogEntry.UserName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The name of a user associated with this event entry.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取负责该事件的用户的名称。</summary>
        <value>唯一标识用户或组的安全标识符 (SID)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性通常是空白中而不是安全日志的日志的事件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">未能为用户的 SID 获取帐户信息。</exception>
        <altmember cref="P:System.Diagnostics.EventLogEntry.Source" />
      </Docs>
    </Member>
  </Members>
</Type>