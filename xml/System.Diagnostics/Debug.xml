<Type Name="Debug" FullName="System.Diagnostics.Debug">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fcf465491257980e042b06fb8c34d629c1463d98" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36675477" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Debug" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Debug extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Debug" />
  <TypeSignature Language="VB.NET" Value="Public Class Debug" />
  <TypeSignature Language="C++ CLI" Value="public ref class Debug abstract sealed" />
  <TypeSignature Language="F#" Value="type Debug = class" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Debug</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="e078c-101">Provides a set of methods and properties that help debug your code.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e078c-101">Provides a set of methods and properties that help debug your code.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e078c-102">如果你使用在方法<xref:System.Diagnostics.Debug>类以打印调试信息并检查你用断言的逻辑中，你可以使代码更可靠而不会影响传送产品的性能和代码大小。</span><span class="sxs-lookup"><span data-stu-id="e078c-102">If you use methods in the <xref:System.Diagnostics.Debug> class to print debugging information and check your logic with assertions, you can make your code more robust without impacting the performance and code size of your shipping product.</span></span>  
  
 <span data-ttu-id="e078c-103">此类提供了方法显示<xref:System.Diagnostics.Debug.Assert%2A>对话框中，并发出将始终失败的断言。</span><span class="sxs-lookup"><span data-stu-id="e078c-103">This class provides methods to display an <xref:System.Diagnostics.Debug.Assert%2A> dialog box, and to emit an assertion that will always fail.</span></span> <span data-ttu-id="e078c-104">此类提供的以下变体的写入方法： <xref:System.Diagnostics.Debug.Write%2A>， <xref:System.Diagnostics.Debug.WriteLine%2A>，<xref:System.Diagnostics.Debug.WriteIf%2A>和<xref:System.Diagnostics.Debug.WriteLineIf%2A>。</span><span class="sxs-lookup"><span data-stu-id="e078c-104">This class provides write methods in the following variations: <xref:System.Diagnostics.Debug.Write%2A>, <xref:System.Diagnostics.Debug.WriteLine%2A>, <xref:System.Diagnostics.Debug.WriteIf%2A> and <xref:System.Diagnostics.Debug.WriteLineIf%2A>.</span></span>  
  
 <span data-ttu-id="e078c-105"><xref:System.Diagnostics.BooleanSwitch>和<xref:System.Diagnostics.TraceSwitch>类提供动态控制跟踪输出方法。</span><span class="sxs-lookup"><span data-stu-id="e078c-105">The <xref:System.Diagnostics.BooleanSwitch> and <xref:System.Diagnostics.TraceSwitch> classes provide means to dynamically control the tracing output.</span></span> <span data-ttu-id="e078c-106">无需重新编译你的应用程序，可以修改这些开关的值。</span><span class="sxs-lookup"><span data-stu-id="e078c-106">You can modify the values of these switches without recompiling your application.</span></span> <span data-ttu-id="e078c-107">有关使用配置文件设置开关的信息，请参阅<xref:System.Diagnostics.Switch>类和[跟踪开关](~/docs/framework/debug-trace-profile/trace-switches.md)主题。</span><span class="sxs-lookup"><span data-stu-id="e078c-107">For information on using the configuration file to set a switch, see the <xref:System.Diagnostics.Switch> class and the [Trace Switches](~/docs/framework/debug-trace-profile/trace-switches.md) topic.</span></span>  
  
 <span data-ttu-id="e078c-108">可以通过添加自定义跟踪输出的目标<xref:System.Diagnostics.TraceListener>实例到或删除实例从<xref:System.Diagnostics.Debug.Listeners%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="e078c-108">You can customize the tracing output's target by adding <xref:System.Diagnostics.TraceListener> instances to or removing instances from the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span> <span data-ttu-id="e078c-109"><xref:System.Diagnostics.Debug.Listeners%2A>集合共享两个<xref:System.Diagnostics.Debug>和<xref:System.Diagnostics.Trace>类; 添加到其中一个类的跟踪侦听器将侦听器添加到两。</span><span class="sxs-lookup"><span data-stu-id="e078c-109">The <xref:System.Diagnostics.Debug.Listeners%2A> collection is shared by both the <xref:System.Diagnostics.Debug> and the <xref:System.Diagnostics.Trace> classes; adding a trace listener to either class adds the listener to both.</span></span> <span data-ttu-id="e078c-110">默认情况下，<xref:System.Diagnostics.DefaultTraceListener>类发出跟踪输出。</span><span class="sxs-lookup"><span data-stu-id="e078c-110">By default, the <xref:System.Diagnostics.DefaultTraceListener> class emits trace output.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e078c-111">添加到跟踪侦听器<xref:System.Diagnostics.Debug.Listeners%2A>集合可能导致异常引发时进行跟踪，如果跟踪侦听器使用的资源不可用。</span><span class="sxs-lookup"><span data-stu-id="e078c-111">Adding a trace listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection can cause an exception to be thrown while tracing, if a resource used by the trace listener is not available.</span></span> <span data-ttu-id="e078c-112">条件和引发的异常取决于跟踪侦听器，并不能在本主题中枚举。</span><span class="sxs-lookup"><span data-stu-id="e078c-112">The conditions and the exception thrown depend on the trace listener and cannot be enumerated in this topic.</span></span> <span data-ttu-id="e078c-113">它可能会有用呼叫<xref:System.Diagnostics.Debug>中的方法`try` / `catch`块来检测和处理从跟踪侦听器的任何异常。</span><span class="sxs-lookup"><span data-stu-id="e078c-113">It may be useful to place calls to the <xref:System.Diagnostics.Debug> methods in `try`/`catch` blocks to detect and handle any exceptions from trace listeners.</span></span>  
  
 <span data-ttu-id="e078c-114">你可以修改的级别的缩进使用<xref:System.Diagnostics.Debug.Indent%2A>方法或<xref:System.Diagnostics.Debug.IndentLevel%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="e078c-114">You can modify the level of indentation using the <xref:System.Diagnostics.Debug.Indent%2A> method or the <xref:System.Diagnostics.Debug.IndentLevel%2A> property.</span></span> <span data-ttu-id="e078c-115">若要修改的缩进间距，使用<xref:System.Diagnostics.Debug.IndentSize%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="e078c-115">To modify the indent spacing, use the <xref:System.Diagnostics.Debug.IndentSize%2A> property.</span></span> <span data-ttu-id="e078c-116">你可以指定是否自动在每次写入后刷新输出缓冲区，通过设置<xref:System.Diagnostics.Debug.AutoFlush%2A>属性`true`。</span><span class="sxs-lookup"><span data-stu-id="e078c-116">You can specify whether to automatically flush the output buffer after each write by setting the <xref:System.Diagnostics.Debug.AutoFlush%2A> property to `true`.</span></span>  
  
 <span data-ttu-id="e078c-117">若要设置<xref:System.Diagnostics.Debug.AutoFlush%2A>和<xref:System.Diagnostics.Debug.IndentSize%2A>为<xref:System.Diagnostics.Debug>，你可以编辑你的应用程序的名称相对应的配置文件。</span><span class="sxs-lookup"><span data-stu-id="e078c-117">To set the <xref:System.Diagnostics.Debug.AutoFlush%2A> and <xref:System.Diagnostics.Debug.IndentSize%2A> for <xref:System.Diagnostics.Debug>, you can edit the configuration file corresponding to the name of your application.</span></span> <span data-ttu-id="e078c-118">应按照下面的示例所示格式设置的配置文件。</span><span class="sxs-lookup"><span data-stu-id="e078c-118">The configuration file should be formatted as shown in the following example.</span></span>  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="true" indentsize="7" />  
  </system.diagnostics>  
</configuration>  
```  
  
 <span data-ttu-id="e078c-119"><xref:System.Diagnostics.ConditionalAttribute>特性应用于的方法<xref:System.Diagnostics.Debug>。</span><span class="sxs-lookup"><span data-stu-id="e078c-119">The <xref:System.Diagnostics.ConditionalAttribute> attribute is applied to the methods of <xref:System.Diagnostics.Debug>.</span></span> <span data-ttu-id="e078c-120">支持的编译器<xref:System.Diagnostics.ConditionalAttribute>忽略对这些方法的调用，除非将"DEBUG"定义为有条件编译符号。</span><span class="sxs-lookup"><span data-stu-id="e078c-120">Compilers that support <xref:System.Diagnostics.ConditionalAttribute> ignore calls to these methods unless "DEBUG" is defined as a conditional compilation symbol.</span></span> <span data-ttu-id="e078c-121">请参阅编译器的文档，以确定是否<xref:System.Diagnostics.ConditionalAttribute>支持以及用于定义条件编译符号的语法。</span><span class="sxs-lookup"><span data-stu-id="e078c-121">Refer to a compiler's documentation to determine whether <xref:System.Diagnostics.ConditionalAttribute> is supported and the syntax for defining a conditional compilation symbol.</span></span>  
  
> [!NOTE]
> <span data-ttu-id="e078c-122">在 Visual Studio C# 和 Visual Basic 项目中，默认情况下，"DEBUG"条件编译符号定义为调试版本和发行版本定义"TRACE"符号。</span><span class="sxs-lookup"><span data-stu-id="e078c-122">In Visual Studio C# and Visual Basic projects, by default, the "DEBUG" conditional compilation symbol is defined for debug builds, and the "TRACE" symbol is defined for both debug and release builds.</span></span> <span data-ttu-id="e078c-123">有关如何禁用此行为的信息，请参阅 Visual Studio 文档。</span><span class="sxs-lookup"><span data-stu-id="e078c-123">For information about how to disable this behavior, see the Visual Studio documentation.</span></span> <span data-ttu-id="e078c-124">有关在 Visual c + + 中的条件性调试的信息，请参阅[Debug 类 (C + + /cli CLI)](/cpp/dotnet/debug-class-cpp-cli)。</span><span class="sxs-lookup"><span data-stu-id="e078c-124">For information about conditional debugging in Visual C++, see [Debug Class (C++/CLI)](/cpp/dotnet/debug-class-cpp-cli).</span></span>
  
 <span data-ttu-id="e078c-125">若要定义在 C# 中的"DEBUG"条件编译符号，添加`/d:DEBUG`编译使用命令行，代码时，到编译器命令行选项或添加`#define DEBUG`到你的文件的顶部。</span><span class="sxs-lookup"><span data-stu-id="e078c-125">To define the "DEBUG" conditional compilation symbol in C#, add the `/d:DEBUG` option to the compiler command line when you compile your code using a command line, or add `#define DEBUG` to the top of your file.</span></span> <span data-ttu-id="e078c-126">在 Visual Basic 中，添加`/d:DEBUG=True`到编译器命令行选项或添加`#Const DEBUG=True`文件。</span><span class="sxs-lookup"><span data-stu-id="e078c-126">In Visual Basic, add the `/d:DEBUG=True` option to the compiler command line or add `#Const DEBUG=True` to the file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e078c-127">下面的示例使用<xref:System.Diagnostics.Debug>以指示的开头和末尾对程序的执行。</span><span class="sxs-lookup"><span data-stu-id="e078c-127">The following example uses <xref:System.Diagnostics.Debug> to indicate the beginning and end of a program's execution.</span></span> <span data-ttu-id="e078c-128">此示例还使用<xref:System.Diagnostics.Debug.Indent%2A>和<xref:System.Diagnostics.Debug.Unindent%2A>来区分将跟踪输出。</span><span class="sxs-lookup"><span data-stu-id="e078c-128">The example also uses <xref:System.Diagnostics.Debug.Indent%2A> and <xref:System.Diagnostics.Debug.Unindent%2A> to distinguish the tracing output.</span></span>  
  
 [!code-cpp[Classic Debug Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug Example/CS/source.cs#1)]
 [!code-vb[Classic Debug Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="e078c-129">此类型是线程安全的。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e078c-129">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Diagnostics.Trace" />
    <altmember cref="T:System.Diagnostics.Switch" />
    <altmember cref="T:System.Diagnostics.BooleanSwitch" />
    <altmember cref="T:System.Diagnostics.TraceSwitch" />
    <altmember cref="T:System.Diagnostics.TraceListener" />
    <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
    <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
    <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
    <altmember cref="T:System.Diagnostics.TraceListenerCollection" />
    <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Assert">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e078c-130">Checks for a condition; if the condition is <see langword="false" />, outputs messages and displays a message box that shows the call stack.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-130">Checks for a condition; if the condition is <see langword="false" />, outputs messages and displays a message box that shows the call stack.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Assert(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition);" />
      <MemberSignature Language="F#" Value="static member Assert : bool -&gt; unit" Usage="System.Diagnostics.Debug.Assert condition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="e078c-131">The conditional expression to evaluate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-131">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="e078c-132">If the condition is <see langword="true" />, a failure message is not sent and the message box is not displayed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-132">If the condition is <see langword="true" />, a failure message is not sent and the message box is not displayed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e078c-133">Checks for a condition; if the condition is <see langword="false" />, displays a message box that shows the call stack.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-133">Checks for a condition; if the condition is <see langword="false" />, displays a message box that shows the call stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e078c-134">默认情况下，<xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType>方法仅在调试版本中有效。</span><span class="sxs-lookup"><span data-stu-id="e078c-134">By default, the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> method works only in debug builds.</span></span> <span data-ttu-id="e078c-135">使用<xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType>方法如果你想要执行断言版本中的可生成。</span><span class="sxs-lookup"><span data-stu-id="e078c-135">Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> method if you want to do assertions in release builds.</span></span> <span data-ttu-id="e078c-136">有关详细信息，请参阅[托管代码中的断言](/visualstudio/debugger/assertions-in-managed-code)。</span><span class="sxs-lookup"><span data-stu-id="e078c-136">For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e078c-137">`Assert`方法不可用于[!INCLUDE[win8_appstore_long](~/includes/win8-appstore-long-md.md)]应用。</span><span class="sxs-lookup"><span data-stu-id="e078c-137">The `Assert` methods are not available for [!INCLUDE[win8_appstore_long](~/includes/win8-appstore-long-md.md)] apps.</span></span>  
  
 <span data-ttu-id="e078c-138">通常情况下，<xref:System.Diagnostics.Debug.Assert%28System.Boolean%29>方法用于标识程序开发过程的逻辑错误。</span><span class="sxs-lookup"><span data-stu-id="e078c-138">Typically, the <xref:System.Diagnostics.Debug.Assert%28System.Boolean%29> method is used to identify logic errors during program development.</span></span> <span data-ttu-id="e078c-139"><xref:System.Diagnostics.Debug.Assert%2A> 计算条件。</span><span class="sxs-lookup"><span data-stu-id="e078c-139"><xref:System.Diagnostics.Debug.Assert%2A> evaluates the condition.</span></span> <span data-ttu-id="e078c-140">如果结果为`false`，它将发送到失败消息<xref:System.Diagnostics.Debug.Listeners%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="e078c-140">If the result is `false`, it sends a failure message to the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span> <span data-ttu-id="e078c-141">可以通过添加自定义此行为<xref:System.Diagnostics.TraceListener>，或从中移除<xref:System.Diagnostics.Debug.Listeners%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="e078c-141">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
 <span data-ttu-id="e078c-142">当在用户界面模式下运行应用程序时，它将显示一个消息框，显示文件和行号的调用堆栈。</span><span class="sxs-lookup"><span data-stu-id="e078c-142">When the application runs in user interface mode, it displays a message box that shows the call stack with file and line numbers.</span></span> <span data-ttu-id="e078c-143">消息框包含三个按钮：**中止**，**重试**，和**忽略**。</span><span class="sxs-lookup"><span data-stu-id="e078c-143">The message box contains three buttons: **Abort**, **Retry**, and **Ignore**.</span></span> <span data-ttu-id="e078c-144">单击**中止**按钮终止应用程序。</span><span class="sxs-lookup"><span data-stu-id="e078c-144">Clicking the **Abort** button terminates the application.</span></span> <span data-ttu-id="e078c-145">单击**重试**向你发送到调试器中的代码中，如果你的应用程序运行在调试器中，或如果它不是打开调试器。</span><span class="sxs-lookup"><span data-stu-id="e078c-145">Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not.</span></span> <span data-ttu-id="e078c-146">单击**忽略**继续在代码中的下一步指令。</span><span class="sxs-lookup"><span data-stu-id="e078c-146">Clicking **Ignore** continues with the next instruction in the code.</span></span>  
  
> [!NOTE]
>  [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]<span data-ttu-id="e078c-147"> 应用不支持模式对话框框中，因此它们的行为中用户界面模式和非用户界面模式相同。</span><span class="sxs-lookup"><span data-stu-id="e078c-147"> apps do not support modal dialog boxes, so they behave the same in user interface mode and non-user interface mode.</span></span> <span data-ttu-id="e078c-148">将消息写入到活动的跟踪侦听器在调试模式下，或在发布模式下写入任何消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-148">The message is written to the active trace listeners in debugging mode, or no message is written in release mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e078c-149">在消息框显示取决于是否存在的<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="e078c-149">The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="e078c-150">如果<xref:System.Diagnostics.DefaultTraceListener>不在<xref:System.Diagnostics.Trace.Listeners%2A>集合，消息框不会显示。</span><span class="sxs-lookup"><span data-stu-id="e078c-150">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="e078c-151"><xref:System.Diagnostics.DefaultTraceListener>可以删除[&lt;清除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md)、 [&lt;删除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md)，或通过调用<xref:System.Diagnostics.TraceListenerCollection.Clear%2A>方法<xref:System.Diagnostics.Trace.Listeners%2A>属性 (`System.Diagnostics.Trace.Listeners.Clear()`)。</span><span class="sxs-lookup"><span data-stu-id="e078c-151">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="e078c-152">你可以更改的行为<xref:System.Diagnostics.DefaultTraceListener>对应于你的应用程序的名称的配置文件中。</span><span class="sxs-lookup"><span data-stu-id="e078c-152">You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application.</span></span> <span data-ttu-id="e078c-153">在此文件中，你可以启用和禁用断言消息框或设置<xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="e078c-153">In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="e078c-154">配置文件应格式如下：</span><span class="sxs-lookup"><span data-stu-id="e078c-154">The configuration file should be formatted as follows:</span></span>  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <assert assertuienabled="true" logfilename="c:\\myFile.log" />  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 <span data-ttu-id="e078c-155">下面的示例创建数组的索引、 执行某些操作来设置的值的索引，并随后调用<xref:System.Diagnostics.Debug.Assert%2A>确认的索引值是否有效。</span><span class="sxs-lookup"><span data-stu-id="e078c-155">The following example creates an index for an array, performs some action to set the value of the index, and then calls <xref:System.Diagnostics.Debug.Assert%2A> to confirm that the index value is valid.</span></span> <span data-ttu-id="e078c-156">如果不是有效，<xref:System.Diagnostics.Debug.Assert%2A>输出调用堆栈。</span><span class="sxs-lookup"><span data-stu-id="e078c-156">If it is not valid, <xref:System.Diagnostics.Debug.Assert%2A> outputs the call stack.</span></span>  
  
 [!code-cpp[Classic Debug.Assert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Assert Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Assert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Assert Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Assert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Assert Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition, System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member Assert : bool * string -&gt; unit" Usage="System.Diagnostics.Debug.Assert (condition, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="e078c-157">The conditional expression to evaluate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-157">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="e078c-158">If the condition is <see langword="true" />, the specified message is not sent and the message box is not displayed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-158">If the condition is <see langword="true" />, the specified message is not sent and the message box is not displayed.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="e078c-159">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-159">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e078c-160">Checks for a condition; if the condition is <see langword="false" />, outputs a specified message and displays a message box that shows the call stack.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-160">Checks for a condition; if the condition is <see langword="false" />, outputs a specified message and displays a message box that shows the call stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e078c-161">默认情况下，<xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType>方法仅在调试版本中有效。</span><span class="sxs-lookup"><span data-stu-id="e078c-161">By default, the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> method works only in debug builds.</span></span> <span data-ttu-id="e078c-162">使用<xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType>方法如果你想要执行断言版本中的可生成。</span><span class="sxs-lookup"><span data-stu-id="e078c-162">Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> method if you want to do assertions in release builds.</span></span> <span data-ttu-id="e078c-163">有关详细信息，请参阅[托管代码中的断言](/visualstudio/debugger/assertions-in-managed-code)。</span><span class="sxs-lookup"><span data-stu-id="e078c-163">For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code).</span></span>  
  
 <span data-ttu-id="e078c-164">通常情况下，<xref:System.Diagnostics.Debug.Assert%2A>方法用于标识程序开发过程的逻辑错误。</span><span class="sxs-lookup"><span data-stu-id="e078c-164">Typically, the <xref:System.Diagnostics.Debug.Assert%2A> method is used to identify logic errors during program development.</span></span> <span data-ttu-id="e078c-165"><xref:System.Diagnostics.Debug.Assert%2A> 计算条件。</span><span class="sxs-lookup"><span data-stu-id="e078c-165"><xref:System.Diagnostics.Debug.Assert%2A> evaluates the condition.</span></span> <span data-ttu-id="e078c-166">如果结果为`false`，它将发送到指定的诊断消息<xref:System.Diagnostics.Debug.Listeners%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="e078c-166">If the result is `false`, it sends the specified diagnostic message to the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span> <span data-ttu-id="e078c-167">可以通过添加自定义此行为<xref:System.Diagnostics.TraceListener>，或从中移除<xref:System.Diagnostics.Debug.Listeners%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="e078c-167">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
 <span data-ttu-id="e078c-168">当在用户界面模式下运行应用程序时，它将显示一个消息框，显示文件和行号的调用堆栈。</span><span class="sxs-lookup"><span data-stu-id="e078c-168">When the application runs in user interface mode, it displays a message box that shows the call stack with file and line numbers.</span></span> <span data-ttu-id="e078c-169">消息框包含三个按钮：**中止**，**重试**，和**忽略**。</span><span class="sxs-lookup"><span data-stu-id="e078c-169">The message box contains three buttons: **Abort**, **Retry**, and **Ignore**.</span></span> <span data-ttu-id="e078c-170">单击**中止**按钮终止应用程序。</span><span class="sxs-lookup"><span data-stu-id="e078c-170">Clicking the **Abort** button terminates the application.</span></span> <span data-ttu-id="e078c-171">单击**重试**向你发送到调试器中的代码中，如果你的应用程序运行在调试器中，或如果它不是打开调试器。</span><span class="sxs-lookup"><span data-stu-id="e078c-171">Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not.</span></span> <span data-ttu-id="e078c-172">单击**忽略**继续在代码中的下一步指令。</span><span class="sxs-lookup"><span data-stu-id="e078c-172">Clicking **Ignore** continues with the next instruction in the code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e078c-173">在消息框显示取决于是否存在的<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="e078c-173">The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="e078c-174">如果<xref:System.Diagnostics.DefaultTraceListener>不在<xref:System.Diagnostics.Trace.Listeners%2A>集合，消息框不会显示。</span><span class="sxs-lookup"><span data-stu-id="e078c-174">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="e078c-175"><xref:System.Diagnostics.DefaultTraceListener>可以删除[&lt;清除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md)、 [&lt;删除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md)，或通过调用<xref:System.Diagnostics.TraceListenerCollection.Clear%2A>方法<xref:System.Diagnostics.Trace.Listeners%2A>属性 (`System.Diagnostics.Trace.Listeners.Clear()`)。</span><span class="sxs-lookup"><span data-stu-id="e078c-175">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="e078c-176">你可以更改的行为<xref:System.Diagnostics.DefaultTraceListener>对应于你的应用程序的名称的配置文件中。</span><span class="sxs-lookup"><span data-stu-id="e078c-176">You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application.</span></span> <span data-ttu-id="e078c-177">在此文件中，你可以启用和禁用断言消息框或设置<xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="e078c-177">In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="e078c-178">配置文件应格式如下：</span><span class="sxs-lookup"><span data-stu-id="e078c-178">The configuration file should be formatted as follows:</span></span>  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <assert assertuienabled="true" logfilename="c:\\myFile.log" />  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 <span data-ttu-id="e078c-179">下面的示例检查是否`type`参数才有效。</span><span class="sxs-lookup"><span data-stu-id="e078c-179">The following example checks whether the `type` parameter is valid.</span></span> <span data-ttu-id="e078c-180">如果`type`是`null`，<xref:System.Diagnostics.Trace.Assert%2A>输出消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-180">If `type` is `null`, <xref:System.Diagnostics.Trace.Assert%2A> outputs a message.</span></span>  
  
 [!code-cpp[Classic Debug.Assert1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Assert1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Assert1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Assert1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Assert1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Assert1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean, message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition, System::String ^ message, System::String ^ detailMessage);" />
      <MemberSignature Language="F#" Value="static member Assert : bool * string * string -&gt; unit" Usage="System.Diagnostics.Debug.Assert (condition, message, detailMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="e078c-181">The conditional expression to evaluate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-181">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="e078c-182">If the condition is <see langword="true" />, the specified messages are not sent and the message box is not displayed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-182">If the condition is <see langword="true" />, the specified messages are not sent and the message box is not displayed.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="e078c-183">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-183">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span>
          </span>
        </param>
        <param name="detailMessage">
          <span data-ttu-id="e078c-184">The detailed message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-184">The detailed message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e078c-185">Checks for a condition; if the condition is <see langword="false" />, outputs two specified messages and displays a message box that shows the call stack.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-185">Checks for a condition; if the condition is <see langword="false" />, outputs two specified messages and displays a message box that shows the call stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e078c-186">默认情况下，<xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType>方法仅在调试版本中有效。</span><span class="sxs-lookup"><span data-stu-id="e078c-186">By default, the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> method works only in debug builds.</span></span> <span data-ttu-id="e078c-187">使用<xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType>方法如果你想要执行断言版本中的可生成。</span><span class="sxs-lookup"><span data-stu-id="e078c-187">Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> method if you want to do assertions in release builds.</span></span> <span data-ttu-id="e078c-188">有关详细信息，请参阅[托管代码中的断言](/visualstudio/debugger/assertions-in-managed-code)。</span><span class="sxs-lookup"><span data-stu-id="e078c-188">For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code).</span></span>  
  
 <span data-ttu-id="e078c-189">通常情况下，<xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%29>方法用于标识程序开发过程的逻辑错误。</span><span class="sxs-lookup"><span data-stu-id="e078c-189">Typically, the <xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%29> method is used to identify logic errors during program development.</span></span> <span data-ttu-id="e078c-190"><xref:System.Diagnostics.Debug.Assert%2A> 计算条件。</span><span class="sxs-lookup"><span data-stu-id="e078c-190"><xref:System.Diagnostics.Debug.Assert%2A> evaluates the condition.</span></span> <span data-ttu-id="e078c-191">如果结果为`false`，它将指定的诊断消息和详细的消息到发送<xref:System.Diagnostics.Debug.Listeners%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="e078c-191">If the result is `false`, it sends the specified diagnostic message and detailed message to the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span> <span data-ttu-id="e078c-192">可以通过添加自定义此行为<xref:System.Diagnostics.TraceListener>，或从中移除<xref:System.Diagnostics.Debug.Listeners%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="e078c-192">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
 <span data-ttu-id="e078c-193">当在用户界面模式下运行应用程序时，它将显示一个消息框，显示文件和行号的调用堆栈。</span><span class="sxs-lookup"><span data-stu-id="e078c-193">When the application runs in user interface mode, it displays a message box that shows the call stack with file and line numbers.</span></span> <span data-ttu-id="e078c-194">消息框包含三个按钮：**中止**，**重试**，和**忽略**。</span><span class="sxs-lookup"><span data-stu-id="e078c-194">The message box contains three buttons: **Abort**, **Retry**, and **Ignore**.</span></span> <span data-ttu-id="e078c-195">单击**中止**按钮终止应用程序。</span><span class="sxs-lookup"><span data-stu-id="e078c-195">Clicking the **Abort** button terminates the application.</span></span> <span data-ttu-id="e078c-196">单击**重试**向你发送到调试器中的代码中，如果你的应用程序运行在调试器中，或如果它不是打开调试器。</span><span class="sxs-lookup"><span data-stu-id="e078c-196">Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not.</span></span> <span data-ttu-id="e078c-197">单击**忽略**继续在代码中的下一步指令。</span><span class="sxs-lookup"><span data-stu-id="e078c-197">Clicking **Ignore** continues with the next instruction in the code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e078c-198">在消息框显示取决于是否存在的<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="e078c-198">The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="e078c-199">如果<xref:System.Diagnostics.DefaultTraceListener>不在<xref:System.Diagnostics.Trace.Listeners%2A>集合，消息框不会显示。</span><span class="sxs-lookup"><span data-stu-id="e078c-199">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="e078c-200"><xref:System.Diagnostics.DefaultTraceListener>可以删除[&lt;清除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md)、 [&lt;删除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md)，或通过调用<xref:System.Diagnostics.TraceListenerCollection.Clear%2A>方法<xref:System.Diagnostics.Trace.Listeners%2A>属性 (`System.Diagnostics.Trace.Listeners.Clear()`)。</span><span class="sxs-lookup"><span data-stu-id="e078c-200">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="e078c-201">你可以更改的行为<xref:System.Diagnostics.DefaultTraceListener>对应于你的应用程序的名称的配置文件中。</span><span class="sxs-lookup"><span data-stu-id="e078c-201">You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application.</span></span> <span data-ttu-id="e078c-202">在此文件中，你可以启用和禁用断言消息框或设置<xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="e078c-202">In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="e078c-203">配置文件应格式如下：</span><span class="sxs-lookup"><span data-stu-id="e078c-203">The configuration file should be formatted as follows:</span></span>  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <assert assertuienabled="true" logfilename="c:\\myFile.log" />  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 <span data-ttu-id="e078c-204">下面的示例检查是否`type`参数才有效。</span><span class="sxs-lookup"><span data-stu-id="e078c-204">The following example checks whether the `type` parameter is valid.</span></span> <span data-ttu-id="e078c-205">如果`type`是`null`，<xref:System.Diagnostics.Trace.Assert%2A>输出两条消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-205">If `type` is `null`, <xref:System.Diagnostics.Trace.Assert%2A> outputs two messages.</span></span>  
  
 [!code-cpp[Classic Debug.Assert2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Assert2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Assert2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Assert2 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Assert2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Assert2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message, string detailMessageFormat, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message, string detailMessageFormat, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean, message As String, detailMessageFormat As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition, System::String ^ message, System::String ^ detailMessageFormat, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member Assert : bool * string * string * obj[] -&gt; unit" Usage="System.Diagnostics.Debug.Assert (condition, message, detailMessageFormat, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessageFormat" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="e078c-206">The conditional expression to evaluate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-206">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="e078c-207">If the condition is <see langword="true" />, the specified messages are not sent and the message box is not displayed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-207">If the condition is <see langword="true" />, the specified messages are not sent and the message box is not displayed.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="e078c-208">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-208">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span>
          </span>
        </param>
        <param name="detailMessageFormat">
          <span data-ttu-id="e078c-209">The composite format string to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-209">The composite format string to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span>
          </span>
          <span data-ttu-id="e078c-210">This message contains text intermixed with zero or more format items, which correspond to objects in the <c>args</c> array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-210">This message contains text intermixed with zero or more format items, which correspond to objects in the <c>args</c> array.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="e078c-211">An object array that contains zero or more objects to format.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-211">An object array that contains zero or more objects to format.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e078c-212">Checks for a condition; if the condition is <see langword="false" />, outputs two messages (simple and formatted) and displays a message box that shows the call stack.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-212">Checks for a condition; if the condition is <see langword="false" />, outputs two messages (simple and formatted) and displays a message box that shows the call stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e078c-213">此方法使用的.NET framework 对象的值转换为它的文本表示形式，并将该表示形式嵌入在字符串中。</span><span class="sxs-lookup"><span data-stu-id="e078c-213">This method uses the  of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</span></span> <span data-ttu-id="e078c-214">生成的字符串发送到<xref:System.Diagnostics.Trace.Listeners%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="e078c-214">The resulting string is sent to the <xref:System.Diagnostics.Trace.Listeners%2A> collection.</span></span>  
  
 <span data-ttu-id="e078c-215">默认情况下，<xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType>方法仅在调试版本中有效。</span><span class="sxs-lookup"><span data-stu-id="e078c-215">By default, the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> method works only in debug builds.</span></span> <span data-ttu-id="e078c-216">使用<xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType>方法如果你想要执行断言版本中的可生成。</span><span class="sxs-lookup"><span data-stu-id="e078c-216">Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> method if you want to do assertions in release builds.</span></span> <span data-ttu-id="e078c-217">有关详细信息，请参阅[托管代码中的断言](/visualstudio/debugger/assertions-in-managed-code)。</span><span class="sxs-lookup"><span data-stu-id="e078c-217">For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code).</span></span>  
  
 <span data-ttu-id="e078c-218">通常情况下，<xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%2CSystem.Object%5B%5D%29>方法用于标识程序开发过程的逻辑错误。</span><span class="sxs-lookup"><span data-stu-id="e078c-218">Typically, the <xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%2CSystem.Object%5B%5D%29> method is used to identify logic errors during program development.</span></span> <span data-ttu-id="e078c-219"><xref:System.Diagnostics.Debug.Assert%2A> 计算条件。</span><span class="sxs-lookup"><span data-stu-id="e078c-219"><xref:System.Diagnostics.Debug.Assert%2A> evaluates the condition.</span></span> <span data-ttu-id="e078c-220">如果结果为`false`、<xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>调用方法和`detailMessageFormat`字符串和`args`数组作为参数传递。</span><span class="sxs-lookup"><span data-stu-id="e078c-220">If the result is `false`, The <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method is called and the `detailMessageFormat` string and `args` array are passed in as parameters.</span></span> <span data-ttu-id="e078c-221"><xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%2CSystem.Object%5B%5D%29> 将指定的文本消息和格式化的文本消息然后发送<xref:System.Diagnostics.Debug.Listeners%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="e078c-221"><xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%2CSystem.Object%5B%5D%29> then sends the specified text message and the formatted text message to the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span> <span data-ttu-id="e078c-222">可以通过添加自定义此行为<xref:System.Diagnostics.TraceListener>，或从中移除<xref:System.Diagnostics.Debug.Listeners%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="e078c-222">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
 <span data-ttu-id="e078c-223">当在用户界面模式下运行应用程序时，它将显示一个消息框，显示文件和行号的调用堆栈。</span><span class="sxs-lookup"><span data-stu-id="e078c-223">When the application runs in user interface mode, it displays a message box that shows the call stack with file and line numbers.</span></span> <span data-ttu-id="e078c-224">消息框包含三个按钮：**中止**，**重试**，和**忽略**。</span><span class="sxs-lookup"><span data-stu-id="e078c-224">The message box contains three buttons: **Abort**, **Retry**, and **Ignore**.</span></span> <span data-ttu-id="e078c-225">单击**中止**按钮终止应用程序。</span><span class="sxs-lookup"><span data-stu-id="e078c-225">Clicking the **Abort** button terminates the application.</span></span> <span data-ttu-id="e078c-226">单击**重试**向你发送到调试器中的代码中，如果你的应用程序运行在调试器中，或如果它不是打开调试器。</span><span class="sxs-lookup"><span data-stu-id="e078c-226">Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not.</span></span> <span data-ttu-id="e078c-227">单击**忽略**继续在代码中的下一步指令。</span><span class="sxs-lookup"><span data-stu-id="e078c-227">Clicking **Ignore** continues with the next instruction in the code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e078c-228">显示消息框是依赖于是否存在<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="e078c-228">The display of the message box is dependent on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="e078c-229">如果<xref:System.Diagnostics.DefaultTraceListener>不在<xref:System.Diagnostics.Trace.Listeners%2A>集合，消息框不会显示。</span><span class="sxs-lookup"><span data-stu-id="e078c-229">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="e078c-230"><xref:System.Diagnostics.DefaultTraceListener>可以删除[&lt;清除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md)、 [&lt;删除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md)，或通过调用<xref:System.Diagnostics.TraceListenerCollection.Clear%2A>方法<xref:System.Diagnostics.Trace.Listeners%2A>属性 (`System.Diagnostics.Trace.Listeners.Clear()`)。</span><span class="sxs-lookup"><span data-stu-id="e078c-230">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="e078c-231">你可以更改的行为<xref:System.Diagnostics.DefaultTraceListener>对应于你的应用程序的名称的配置文件中。</span><span class="sxs-lookup"><span data-stu-id="e078c-231">You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application.</span></span> <span data-ttu-id="e078c-232">在此文件中，你可以启用和禁用断言消息框或设置<xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="e078c-232">In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="e078c-233">配置文件应格式如下：</span><span class="sxs-lookup"><span data-stu-id="e078c-233">The configuration file should be formatted as follows:</span></span>  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <assert assertuienabled="true" logfilename="c:\\myFile.log" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoFlush">
      <MemberSignature Language="C#" Value="public static bool AutoFlush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool AutoFlush" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Debug.AutoFlush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property AutoFlush As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool AutoFlush { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoFlush : bool with get, set" Usage="System.Diagnostics.Debug.AutoFlush" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e078c-234">Gets or sets a value indicating whether <see cref="M:System.Diagnostics.Debug.Flush" /> should be called on the <see cref="P:System.Diagnostics.Debug.Listeners" /> after every write.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-234">Gets or sets a value indicating whether <see cref="M:System.Diagnostics.Debug.Flush" /> should be called on the <see cref="P:System.Diagnostics.Debug.Listeners" /> after every write.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e078c-235">如果每次写入后在 <see cref="P:System.Diagnostics.Debug.Listeners" /> 上调用 <see cref="M:System.Diagnostics.Debug.Flush" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-235">
              <see langword="true" /> if <see cref="M:System.Diagnostics.Debug.Flush" /> is called on the <see cref="P:System.Diagnostics.Debug.Listeners" /> after every write; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e078c-236">默认值为 `false`。</span><span class="sxs-lookup"><span data-stu-id="e078c-236">The default is `false`.</span></span>  
  
 <span data-ttu-id="e078c-237">刷新流将不会刷新其基础的编码器，除非你明确地调用<xref:System.Diagnostics.Debug.Flush%2A>或<xref:System.Diagnostics.Debug.Close%2A>。</span><span class="sxs-lookup"><span data-stu-id="e078c-237">Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.Diagnostics.Debug.Flush%2A> or <xref:System.Diagnostics.Debug.Close%2A>.</span></span> <span data-ttu-id="e078c-238">设置<xref:System.Diagnostics.Debug.AutoFlush%2A>到`true`意味着数据从缓冲区刷新到流中，但不是会刷新编码器状态。</span><span class="sxs-lookup"><span data-stu-id="e078c-238">Setting <xref:System.Diagnostics.Debug.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</span></span> <span data-ttu-id="e078c-239">这将允许编码器，以便它可以正确编码的字符的下一步块保持其状态 （部分字符）。</span><span class="sxs-lookup"><span data-stu-id="e078c-239">This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</span></span> <span data-ttu-id="e078c-240">这种情况下会影响 UTF8 和 UTF7 其中某些字符仅后才能进行编码的编码器收到的相邻字符。</span><span class="sxs-lookup"><span data-stu-id="e078c-240">This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</span></span>  
  
 <span data-ttu-id="e078c-241">若要设置<xref:System.Diagnostics.Debug.AutoFlush%2A>和<xref:System.Diagnostics.Debug.IndentSize%2A>为<xref:System.Diagnostics.Debug>，还可以编辑你的应用程序的名称相对应的配置文件。</span><span class="sxs-lookup"><span data-stu-id="e078c-241">To set the <xref:System.Diagnostics.Debug.AutoFlush%2A> and <xref:System.Diagnostics.Debug.IndentSize%2A> for <xref:System.Diagnostics.Debug>, you can also edit the configuration file corresponding to the name of your application.</span></span> <span data-ttu-id="e078c-242">应按照下面的示例所示格式设置的配置文件。</span><span class="sxs-lookup"><span data-stu-id="e078c-242">The configuration file should be formatted as shown in the following example.</span></span>  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="true" indentsize="7" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="e078c-243">用于操作与非托管代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-243">for operating with unmanaged code.</span>
          </span>
          <span data-ttu-id="e078c-244">要求值<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-244">Demand value <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public static void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Close" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Close();" />
      <MemberSignature Language="F#" Value="static member Close : unit -&gt; unit" Usage="System.Diagnostics.Debug.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e078c-245">Flushes the output buffer and then calls the <see langword="Close" /> method on each of the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-245">Flushes the output buffer and then calls the <see langword="Close" /> method on each of the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e078c-246">使用此方法时输出转到文件，如到<xref:System.Diagnostics.TextWriterTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="e078c-246">Use this method when the output goes to a file, such as to the <xref:System.Diagnostics.TextWriterTraceListener>.</span></span>  
  
 <span data-ttu-id="e078c-247">刷新流将不会刷新其基础的编码器，除非你明确地调用<xref:System.Diagnostics.Debug.Flush%2A>或<xref:System.Diagnostics.Debug.Close%2A>。</span><span class="sxs-lookup"><span data-stu-id="e078c-247">Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.Diagnostics.Debug.Flush%2A> or <xref:System.Diagnostics.Debug.Close%2A>.</span></span> <span data-ttu-id="e078c-248">设置<xref:System.Diagnostics.Debug.AutoFlush%2A>到`true`意味着数据从缓冲区刷新到流中，但不是会刷新编码器状态。</span><span class="sxs-lookup"><span data-stu-id="e078c-248">Setting <xref:System.Diagnostics.Debug.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</span></span> <span data-ttu-id="e078c-249">这将允许编码器，以便它可以正确编码的字符的下一步块保持其状态 （部分字符）。</span><span class="sxs-lookup"><span data-stu-id="e078c-249">This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</span></span> <span data-ttu-id="e078c-250">这种情况下会影响 UTF8 和 UTF7 其中某些字符仅后才能进行编码的编码器收到的相邻字符。</span><span class="sxs-lookup"><span data-stu-id="e078c-250">This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e078c-251">下面的示例创建<xref:System.Diagnostics.TextWriterTraceListener>名为`myTextListener`。</span><span class="sxs-lookup"><span data-stu-id="e078c-251">The following example creates a <xref:System.Diagnostics.TextWriterTraceListener> named `myTextListener`.</span></span> <span data-ttu-id="e078c-252">`myTextListener` 使用<xref:System.IO.StreamWriter>调用`myOutputWriter`要写入到名为的文件`TestFile.txt`。</span><span class="sxs-lookup"><span data-stu-id="e078c-252">`myTextListener` uses a <xref:System.IO.StreamWriter> called `myOutputWriter` to write to a file named `TestFile.txt`.</span></span> <span data-ttu-id="e078c-253">该示例创建的文件、 流和文本编写器，一行文本写入文件，然后刷新并关闭输出。</span><span class="sxs-lookup"><span data-stu-id="e078c-253">The example creates the file, stream, and text writer, writes one line of text to the file, and then flushes and closes the output.</span></span>  
  
 [!code-cpp[Classic Debug.Close Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Close Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Close Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Close Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="e078c-254">用于操作与非托管代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-254">for operating with unmanaged code.</span>
          </span>
          <span data-ttu-id="e078c-255">要求值<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-255">Demand value <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fail">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e078c-256">Emits an error message.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-256">Emits an error message.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public static void Fail (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fail(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Fail(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Fail (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Fail(System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member Fail : string -&gt; unit" Usage="System.Diagnostics.Debug.Fail message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="e078c-257">A message to emit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-257">A message to emit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e078c-258">Emits the specified error message.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-258">Emits the specified error message.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e078c-259">默认行为是<xref:System.Diagnostics.DefaultTraceListener>将消息输出到一个消息框时在用户界面模式并对其运行该应用程序<xref:System.Diagnostics.TraceListener>实例<xref:System.Diagnostics.Debug.Listeners%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="e078c-259">The default behavior is that the <xref:System.Diagnostics.DefaultTraceListener> outputs the message to a message box when the application is running in user interface mode and to the <xref:System.Diagnostics.TraceListener> instances in the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e078c-260">显示消息框是依赖于是否存在<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="e078c-260">The display of the message box is dependent on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="e078c-261">如果<xref:System.Diagnostics.DefaultTraceListener>不在<xref:System.Diagnostics.Trace.Listeners%2A>集合，消息框不会显示。</span><span class="sxs-lookup"><span data-stu-id="e078c-261">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="e078c-262"><xref:System.Diagnostics.DefaultTraceListener>可以删除[&lt;清除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md)、 [&lt;删除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md)，或通过调用<xref:System.Diagnostics.TraceListenerCollection.Clear%2A>方法<xref:System.Diagnostics.Trace.Listeners%2A>属性 (`System.Diagnostics.Trace.Listeners.Clear()`)。</span><span class="sxs-lookup"><span data-stu-id="e078c-262">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="e078c-263">可以通过添加自定义此行为<xref:System.Diagnostics.TraceListener>，或从中移除<xref:System.Diagnostics.Debug.Listeners%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="e078c-263">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e078c-264">下面的示例使用<xref:System.Diagnostics.Debug.Fail%2A>方法以在异常处理期间打印消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-264">The following example uses the <xref:System.Diagnostics.Debug.Fail%2A> method to print a message during exception handling.</span></span>  
  
 [!code-cpp[Classic Debug.Fail Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Fail Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Fail Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail Example/VB/source.vb#1)]  
  
 <span data-ttu-id="e078c-265">你还可以使用<xref:System.Diagnostics.Debug.Fail%2A>switch 语句中的方法。</span><span class="sxs-lookup"><span data-stu-id="e078c-265">You can also use the <xref:System.Diagnostics.Debug.Fail%2A> method in a switch statement.</span></span>  
  
 [!code-cpp[Classic Debug.Fail Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Debug.Fail Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CS/source.cs#2)]
 [!code-vb[Classic Debug.Fail Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public static void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fail(string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Fail(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Fail (message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Fail(System::String ^ message, System::String ^ detailMessage);" />
      <MemberSignature Language="F#" Value="static member Fail : string * string -&gt; unit" Usage="System.Diagnostics.Debug.Fail (message, detailMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="e078c-266">A message to emit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-266">A message to emit.</span>
          </span>
        </param>
        <param name="detailMessage">
          <span data-ttu-id="e078c-267">A detailed message to emit.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-267">A detailed message to emit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e078c-268">Emits an error message and a detailed error message.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-268">Emits an error message and a detailed error message.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e078c-269">默认行为是<xref:System.Diagnostics.DefaultTraceListener>将消息输出到一个消息框时在用户界面模式并对其运行该应用程序<xref:System.Diagnostics.TraceListener>实例<xref:System.Diagnostics.Debug.Listeners%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="e078c-269">The default behavior is that the <xref:System.Diagnostics.DefaultTraceListener> outputs the message to a message box when the application is running in user interface mode and to the <xref:System.Diagnostics.TraceListener> instances in the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e078c-270">显示消息框是依赖于是否存在<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="e078c-270">The display of the message box is dependent on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="e078c-271">如果<xref:System.Diagnostics.DefaultTraceListener>不在<xref:System.Diagnostics.Trace.Listeners%2A>集合，消息框不会显示。</span><span class="sxs-lookup"><span data-stu-id="e078c-271">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="e078c-272"><xref:System.Diagnostics.DefaultTraceListener>可以删除[&lt;清除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md)、 [&lt;删除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md)，或通过调用<xref:System.Diagnostics.TraceListenerCollection.Clear%2A>方法<xref:System.Diagnostics.Trace.Listeners%2A>属性 (`System.Diagnostics.Trace.Listeners.Clear()`)。</span><span class="sxs-lookup"><span data-stu-id="e078c-272">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="e078c-273">可以通过添加自定义此行为<xref:System.Diagnostics.TraceListener>，或从中移除<xref:System.Diagnostics.Debug.Listeners%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="e078c-273">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e078c-274">下面的示例使用<xref:System.Diagnostics.Debug.Fail%2A>方法以在异常处理期间打印消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-274">The following example uses the <xref:System.Diagnostics.Debug.Fail%2A> method to print a message during exception handling.</span></span>  
  
 [!code-cpp[Classic Debug.Fail1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Fail1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Fail1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/VB/source.vb#1)]  
  
 <span data-ttu-id="e078c-275">你还可以使用<xref:System.Diagnostics.Debug.Fail%2A>switch 语句中的方法。</span><span class="sxs-lookup"><span data-stu-id="e078c-275">You can also use the <xref:System.Diagnostics.Debug.Fail%2A> method in a switch statement.</span></span>  
  
 [!code-cpp[Classic Debug.Fail1 Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Debug.Fail1 Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CS/source.cs#2)]
 [!code-vb[Classic Debug.Fail1 Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public static void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Flush();" />
      <MemberSignature Language="F#" Value="static member Flush : unit -&gt; unit" Usage="System.Diagnostics.Debug.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e078c-276">Flushes the output buffer and causes buffered data to write to the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-276">Flushes the output buffer and causes buffered data to write to the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e078c-277">刷新流将不会刷新其基础的编码器，除非你明确地调用<xref:System.Diagnostics.Debug.Flush%2A>或<xref:System.Diagnostics.Debug.Close%2A>。</span><span class="sxs-lookup"><span data-stu-id="e078c-277">Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.Diagnostics.Debug.Flush%2A> or <xref:System.Diagnostics.Debug.Close%2A>.</span></span> <span data-ttu-id="e078c-278">设置<xref:System.Diagnostics.Debug.AutoFlush%2A>到`true`意味着数据从缓冲区刷新到流中，但不是会刷新编码器状态。</span><span class="sxs-lookup"><span data-stu-id="e078c-278">Setting <xref:System.Diagnostics.Debug.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</span></span> <span data-ttu-id="e078c-279">这将允许编码器，以便它可以正确编码的字符的下一步块保持其状态 （部分字符）。</span><span class="sxs-lookup"><span data-stu-id="e078c-279">This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</span></span> <span data-ttu-id="e078c-280">这种情况下会影响 UTF8 和 UTF7 其中某些字符仅后才能进行编码的编码器收到的相邻字符。</span><span class="sxs-lookup"><span data-stu-id="e078c-280">This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e078c-281">下面的示例创建<xref:System.Diagnostics.TextWriterTraceListener>名为`myTextListener`。</span><span class="sxs-lookup"><span data-stu-id="e078c-281">The following example creates a <xref:System.Diagnostics.TextWriterTraceListener> named `myTextListener`.</span></span> <span data-ttu-id="e078c-282">`myTextListener` 使用<xref:System.IO.FileStream>调用`myFileStream`要写入到名为的文件`TestFile.txt`。</span><span class="sxs-lookup"><span data-stu-id="e078c-282">`myTextListener` uses a <xref:System.IO.FileStream> called `myFileStream` to write to a file named `TestFile.txt`.</span></span> <span data-ttu-id="e078c-283">上面的示例创建流，如果存在或创建一个新，一行文本写入文件，并刷新并关闭输出中打开的文件。</span><span class="sxs-lookup"><span data-stu-id="e078c-283">The example creates the stream, opens the file if it exists or creates a new one, writes one line of text to the file, and then flushes and closes the output.</span></span>  
  
 [!code-cpp[Classic Debug.Close Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Close Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Close Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Close Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public static void Indent ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Indent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Indent ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Indent();" />
      <MemberSignature Language="F#" Value="static member Indent : unit -&gt; unit" Usage="System.Diagnostics.Debug.Indent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e078c-284">Increases the current <see cref="P:System.Diagnostics.Debug.IndentLevel" /> by one.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-284">Increases the current <see cref="P:System.Diagnostics.Debug.IndentLevel" /> by one.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e078c-285">下面的示例设置缩进级别，并发出调试消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-285">The following example sets the indent level and emits debugging messages.</span></span>  
  
 [!code-cpp[Classic Debug.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/VB/source.vb#1)]  
  
 <span data-ttu-id="e078c-286">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="e078c-286">This example produces the following output:</span></span>  
  
```  
  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Debug.Unindent" />
        <altmember cref="P:System.Diagnostics.Debug.IndentLevel" />
        <altmember cref="P:System.Diagnostics.Debug.IndentSize" />
      </Docs>
    </Member>
    <Member MemberName="IndentLevel">
      <MemberSignature Language="C#" Value="public static int IndentLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 IndentLevel" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Debug.IndentLevel" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property IndentLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int IndentLevel { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.IndentLevel : int with get, set" Usage="System.Diagnostics.Debug.IndentLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e078c-287">Gets or sets the indent level.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-287">Gets or sets the indent level.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e078c-288">缩进级别。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-288">The indent level.</span>
          </span>
          <span data-ttu-id="e078c-289">默认值为 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-289">The default is 0.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e078c-290"><xref:System.Diagnostics.Debug.IndentLevel%2A>属性表示的次数缩进量<xref:System.Diagnostics.Debug.IndentSize%2A>应用。</span><span class="sxs-lookup"><span data-stu-id="e078c-290">The <xref:System.Diagnostics.Debug.IndentLevel%2A> property represents the number of times the indent of size <xref:System.Diagnostics.Debug.IndentSize%2A> is applied.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e078c-291">下面的示例设置缩进级别，并发出调试消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-291">The following example sets the indent level and emits debugging messages.</span></span>  
  
 [!code-cpp[Classic Debug.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/VB/source.vb#1)]  
  
 <span data-ttu-id="e078c-292">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="e078c-292">This example produces the following output:</span></span>  
  
```  
  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Debug.IndentSize" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="IndentSize">
      <MemberSignature Language="C#" Value="public static int IndentSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 IndentSize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Debug.IndentSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property IndentSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int IndentSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.IndentSize : int with get, set" Usage="System.Diagnostics.Debug.IndentSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e078c-293">Gets or sets the number of spaces in an indent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-293">Gets or sets the number of spaces in an indent.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e078c-294">缩进的空格数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-294">The number of spaces in an indent.</span>
          </span>
          <span data-ttu-id="e078c-295">默认值为四。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-295">The default is four.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e078c-296">A<xref:System.Diagnostics.TextWriterTraceListener>将此数字解释为空格。</span><span class="sxs-lookup"><span data-stu-id="e078c-296">A <xref:System.Diagnostics.TextWriterTraceListener> interprets this number as spaces.</span></span> <span data-ttu-id="e078c-297"><xref:System.Diagnostics.EventLogTraceListener>将忽略此值。</span><span class="sxs-lookup"><span data-stu-id="e078c-297">An <xref:System.Diagnostics.EventLogTraceListener> ignores this value.</span></span>  
  
 <span data-ttu-id="e078c-298">若要设置<xref:System.Diagnostics.Debug.AutoFlush%2A>和<xref:System.Diagnostics.Debug.IndentSize%2A>为<xref:System.Diagnostics.Debug>，还可以编辑你的应用程序的名称相对应的配置文件。</span><span class="sxs-lookup"><span data-stu-id="e078c-298">To set the <xref:System.Diagnostics.Debug.AutoFlush%2A> and <xref:System.Diagnostics.Debug.IndentSize%2A> for <xref:System.Diagnostics.Debug>, you can also edit the configuration file corresponding to the name of your application.</span></span> <span data-ttu-id="e078c-299">应按照下面的示例所示格式设置的配置文件。</span><span class="sxs-lookup"><span data-stu-id="e078c-299">The configuration file should be formatted as shown in the following example.</span></span>  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="true" indentsize="7" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Debug.IndentLevel" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Listeners">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.TraceListenerCollection Listeners { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Diagnostics.TraceListenerCollection Listeners" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Debug.Listeners" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Listeners As TraceListenerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Diagnostics::TraceListenerCollection ^ Listeners { System::Diagnostics::TraceListenerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Listeners : System.Diagnostics.TraceListenerCollection" Usage="System.Diagnostics.Debug.Listeners" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.TraceListenerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e078c-300">Gets the collection of listeners that is monitoring the debug output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-300">Gets the collection of listeners that is monitoring the debug output.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e078c-301">A<see cref="T:System.Diagnostics.TraceListenerCollection" />表示类型的集合<see cref="T:System.Diagnostics.TraceListener" />监视调试输出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-301">A <see cref="T:System.Diagnostics.TraceListenerCollection" /> representing a collection of type <see cref="T:System.Diagnostics.TraceListener" /> that monitors the debug output.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e078c-302">中的侦听器生成调试输出中的格式化的输出。</span><span class="sxs-lookup"><span data-stu-id="e078c-302">The listeners produce formatted output from the debug output.</span></span> <span data-ttu-id="e078c-303">默认情况下，集合包含的实例<xref:System.Diagnostics.DefaultTraceListener>类。</span><span class="sxs-lookup"><span data-stu-id="e078c-303">By default, the collection contains an instance of the <xref:System.Diagnostics.DefaultTraceListener> class.</span></span> <span data-ttu-id="e078c-304">若要删除默认的侦听器，调用<xref:System.Diagnostics.TraceListenerCollection.Remove%2A>方法，并将其传递的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="e078c-304">To remove the default listener, call the <xref:System.Diagnostics.TraceListenerCollection.Remove%2A> method, and pass it the instance of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="e078c-305">若要将输出重定向到控制台窗口中，添加的实例<xref:System.Diagnostics.ConsoleTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="e078c-305">To redirect output to the console window, add an instance of the <xref:System.Diagnostics.ConsoleTraceListener>.</span></span> <span data-ttu-id="e078c-306">若要将输出重定向到文件或流，将添加的实例<xref:System.Diagnostics.TextWriterTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="e078c-306">To redirect output to a file or stream, add an instance of the <xref:System.Diagnostics.TextWriterTraceListener>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e078c-307"><xref:System.Diagnostics.Debug.Listeners%2A>集合共享两个<xref:System.Diagnostics.Debug>和<xref:System.Diagnostics.Trace>类; 添加到其中一个类的跟踪侦听器将侦听器添加到两。</span><span class="sxs-lookup"><span data-stu-id="e078c-307">The <xref:System.Diagnostics.Debug.Listeners%2A> collection is shared by both the <xref:System.Diagnostics.Debug> and the <xref:System.Diagnostics.Trace> classes; adding a trace listener to either class adds the listener to both.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e078c-308">下面的示例创建<xref:System.Diagnostics.TextWriterTraceListener>，输出到控制台屏幕。</span><span class="sxs-lookup"><span data-stu-id="e078c-308">The following example creates a <xref:System.Diagnostics.TextWriterTraceListener> that outputs to the console screen.</span></span> <span data-ttu-id="e078c-309">然后代码将添加到新的侦听器<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="e078c-309">The code then adds the new listener to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span>  
  
 [!code-cpp[Classic Debug.Listeners Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Listeners Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Listeners Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Listeners Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Listeners Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Listeners Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="e078c-310">用于操作与非托管代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-310">for operating with unmanaged code.</span>
          </span>
          <span data-ttu-id="e078c-311">要求值<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-311">Demand value <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Print">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e078c-312">Writes a message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-312">Writes a message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Print(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Print(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Print (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member Print : string -&gt; unit" Usage="System.Diagnostics.Debug.Print message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="e078c-313">The message to write.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-313">The message to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e078c-314">Writes a message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-314">Writes a message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e078c-315">默认的行终止符是回车符后跟换行符。</span><span class="sxs-lookup"><span data-stu-id="e078c-315">The default line terminator is a carriage return followed by a line feed.</span></span> <span data-ttu-id="e078c-316">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="e078c-316">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Print(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Print(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Print (format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member Print : string * obj[] -&gt; unit" Usage="System.Diagnostics.Debug.Print (format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="e078c-317">A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the <c>args</c> array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-317">A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the <c>args</c> array.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="e078c-318">An object array containing zero or more objects to format.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-318">An object array containing zero or more objects to format.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e078c-319">Writes a formatted string followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-319">Writes a formatted string followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e078c-320">此方法使用的.NET framework 对象的值转换为它的文本表示形式，并将该表示形式嵌入在字符串中。</span><span class="sxs-lookup"><span data-stu-id="e078c-320">This method uses the  of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</span></span> <span data-ttu-id="e078c-321">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="e078c-321">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e078c-322">
            <paramref name="format" /> is <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-322">
              <paramref name="format" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="e078c-323">
            <paramref name="format" /> is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-323">
              <paramref name="format" /> is invalid.</span>
          </span>
          <span data-ttu-id="e078c-324">-or-  The number that indicates an argument to format is less than zero, or greater than or equal to the number of specified objects to format.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-324">-or-  The number that indicates an argument to format is less than zero, or greater than or equal to the number of specified objects to format.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Unindent">
      <MemberSignature Language="C#" Value="public static void Unindent ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unindent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Unindent" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Unindent ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unindent();" />
      <MemberSignature Language="F#" Value="static member Unindent : unit -&gt; unit" Usage="System.Diagnostics.Debug.Unindent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e078c-325">Decreases the current <see cref="P:System.Diagnostics.Debug.IndentLevel" /> by one.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-325">Decreases the current <see cref="P:System.Diagnostics.Debug.IndentLevel" /> by one.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e078c-326">下面的示例设置缩进级别，并发出调试消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-326">The following example sets the indent level and emits debugging messages.</span></span>  
  
 [!code-cpp[Classic Debug.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/VB/source.vb#1)]  
  
 <span data-ttu-id="e078c-327">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="e078c-327">This example produces the following output:</span></span>  
  
```  
  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Debug.Indent" />
        <altmember cref="P:System.Diagnostics.Debug.IndentLevel" />
        <altmember cref="P:System.Diagnostics.Debug.IndentSize" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e078c-328">Writes information about the debug to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-328">Writes information about the debug to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Write(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member Write : obj -&gt; unit" Usage="System.Diagnostics.Debug.Write value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="e078c-329">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-329">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e078c-330">Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-330">Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e078c-331">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="e078c-331">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="e078c-332">此方法调用<xref:System.Diagnostics.TraceListener.Write%2A>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="e078c-332">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e078c-333">下面的示例创建<xref:System.Diagnostics.TraceSwitch>名为`generalSwitch`。</span><span class="sxs-lookup"><span data-stu-id="e078c-333">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="e078c-334">此开关已设置之外的代码示例。</span><span class="sxs-lookup"><span data-stu-id="e078c-334">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="e078c-335">如果开关设置为<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，该示例将输出发送给第一个错误消息<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="e078c-335">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="e078c-336">有关将添加到侦听器信息<xref:System.Diagnostics.Debug.Listeners%2A>集合，请参阅<xref:System.Diagnostics.TraceListenerCollection>类。</span><span class="sxs-lookup"><span data-stu-id="e078c-336">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="e078c-337">然后，如果<xref:System.Diagnostics.TraceLevel>设置为`Verbose`，该示例将输出与第一条消息位于同一行上的第二个错误消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-337">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="e078c-338">行结束符遵循第二条消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-338">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member Write : string -&gt; unit" Usage="System.Diagnostics.Debug.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="e078c-339">A message to write.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-339">A message to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e078c-340">Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-340">Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e078c-341">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="e078c-341">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="e078c-342">此方法调用<xref:System.Diagnostics.TraceListener.Write%2A>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="e078c-342">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e078c-343">下面的示例创建<xref:System.Diagnostics.TraceSwitch>名为`generalSwitch`。</span><span class="sxs-lookup"><span data-stu-id="e078c-343">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="e078c-344">此开关已设置之外的代码示例。</span><span class="sxs-lookup"><span data-stu-id="e078c-344">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="e078c-345">如果开关设置为<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，该示例将输出发送给第一个错误消息<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="e078c-345">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="e078c-346">有关将添加到侦听器信息<xref:System.Diagnostics.Debug.Listeners%2A>集合，请参阅<xref:System.Diagnostics.TraceListenerCollection>类。</span><span class="sxs-lookup"><span data-stu-id="e078c-346">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="e078c-347">然后，如果<xref:System.Diagnostics.TraceLevel>设置为`Verbose`，该示例将输出与第一条消息位于同一行上的第二个错误消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-347">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="e078c-348">行结束符遵循第二条消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-348">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Write(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Object ^ value, System::String ^ category);" />
      <MemberSignature Language="F#" Value="static member Write : obj * string -&gt; unit" Usage="System.Diagnostics.Debug.Write (value, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="e078c-349">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-349">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </param>
        <param name="category">
          <span data-ttu-id="e078c-350">A category name used to organize the output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-350">A category name used to organize the output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e078c-351">Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-351">Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e078c-352">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="e078c-352">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="e078c-353">使用`category`消息输出到组的参数。</span><span class="sxs-lookup"><span data-stu-id="e078c-353">Use the `category` parameter to group output messages.</span></span>  
  
 <span data-ttu-id="e078c-354">此方法调用<xref:System.Diagnostics.TraceListener.Write%2A>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="e078c-354">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e078c-355">下面的示例创建<xref:System.Diagnostics.TraceSwitch>名为`generalSwitch`。</span><span class="sxs-lookup"><span data-stu-id="e078c-355">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="e078c-356">此开关已设置之外的代码示例。</span><span class="sxs-lookup"><span data-stu-id="e078c-356">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="e078c-357">如果开关设置为<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，该示例将输出发送给第一个错误消息<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="e078c-357">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="e078c-358">有关将添加到侦听器信息<xref:System.Diagnostics.Debug.Listeners%2A>集合，请参阅<xref:System.Diagnostics.TraceListenerCollection>类。</span><span class="sxs-lookup"><span data-stu-id="e078c-358">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="e078c-359">然后，如果<xref:System.Diagnostics.TraceLevel>设置为`Verbose`，该示例将输出与第一条消息位于同一行上的第二个错误消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-359">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="e078c-360">行结束符遵循第二条消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-360">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Write(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ message, System::String ^ category);" />
      <MemberSignature Language="F#" Value="static member Write : string * string -&gt; unit" Usage="System.Diagnostics.Debug.Write (message, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="e078c-361">A message to write.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-361">A message to write.</span>
          </span>
        </param>
        <param name="category">
          <span data-ttu-id="e078c-362">A category name used to organize the output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-362">A category name used to organize the output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e078c-363">Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-363">Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e078c-364">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="e078c-364">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="e078c-365">使用`category`消息输出到组的参数。</span><span class="sxs-lookup"><span data-stu-id="e078c-365">Use the `category` parameter to group output messages.</span></span>  
  
 <span data-ttu-id="e078c-366">此方法调用<xref:System.Diagnostics.TraceListener.Write%2A>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="e078c-366">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e078c-367">下面的示例创建<xref:System.Diagnostics.TraceSwitch>名为`generalSwitch`。</span><span class="sxs-lookup"><span data-stu-id="e078c-367">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="e078c-368">此开关已设置之外的代码示例。</span><span class="sxs-lookup"><span data-stu-id="e078c-368">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="e078c-369">如果开关设置为<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，该示例将输出发送给第一个错误消息<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="e078c-369">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="e078c-370">有关将添加到侦听器信息<xref:System.Diagnostics.Debug.Listeners%2A>集合，请参阅<xref:System.Diagnostics.TraceListenerCollection>类。</span><span class="sxs-lookup"><span data-stu-id="e078c-370">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="e078c-371">然后，如果<xref:System.Diagnostics.TraceLevel>设置为`Verbose`，该示例将输出与第一条消息位于同一行上的第二个错误消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-371">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="e078c-372">行结束符遵循第二条消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-372">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteIf">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e078c-373">Writes information about the debug to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-373">Writes information about the debug to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member WriteIf : bool * obj -&gt; unit" Usage="System.Diagnostics.Debug.WriteIf (condition, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="e078c-374">The conditional expression to evaluate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-374">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="e078c-375">If the condition is <see langword="true" />, the value is written to the trace listeners in the collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-375">If the condition is <see langword="true" />, the value is written to the trace listeners in the collection.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e078c-376">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-376">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e078c-377">Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-377">Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e078c-378">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="e078c-378">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="e078c-379">此方法调用<xref:System.Diagnostics.TraceListener.Write%2A>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="e078c-379">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e078c-380">下面的示例创建<xref:System.Diagnostics.TraceSwitch>名为`generalSwitch`。</span><span class="sxs-lookup"><span data-stu-id="e078c-380">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="e078c-381">此开关已设置之外的代码示例。</span><span class="sxs-lookup"><span data-stu-id="e078c-381">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="e078c-382">如果开关设置为<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，该示例将输出值参数的第一个名称<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="e078c-382">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first name of the value parameter to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="e078c-383">有关将添加到侦听器信息<xref:System.Diagnostics.Debug.Listeners%2A>集合，请参阅<xref:System.Diagnostics.TraceListenerCollection>类。</span><span class="sxs-lookup"><span data-stu-id="e078c-383">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="e078c-384">然后，如果<xref:System.Diagnostics.TraceLevel>设置为`Verbose`，该示例将输出与第一条消息位于同一行中的消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-384">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs a message on the same line as the first message.</span></span> <span data-ttu-id="e078c-385">行结束符遵循第二条消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-385">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteIf1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteIf1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteIf1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="e078c-386">
            <para>可以通过使用检测应用程序性能的影响最小化<see langword="If...Then" />语句而不是使用<see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />语句。下面的两个代码示例将相同的调试消息发送。但是，第一个示例是要快得多当跟踪处于关闭状态，因为如果<c>mySwitch.TraceError</c>计算结果为<see langword="false" />，不调用<see cref="M:System.Diagnostics.Debug.Write(System.String)" />。第二个示例始终调用<see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />，即使当<c>mySwitch.TraceError</c>是<see langword="false" />和不生成任何跟踪输出。这可能导致不必要地执行任意复杂的代码。第一个示例: '' csharp if(mySwitch.TraceError) Debug.Write ("一个数字 ="+ 一个数字 +"超出范围");'第二个示例:' ' csharp Debug.WriteIf (mySwitch.TraceError，"一个数字 ="+ 一个数字 +"超出范围");\`\`\`</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-386">
              <para>You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> statements. The following two code examples send the same debugging message. However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.Write(System.String)" />. The second example always calls <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced. This can result in unnecessary execution of arbitrarily complex code.  First example:  ```csharp if(mySwitch.TraceError) Debug.Write("aNumber = " + aNumber + " out of range"); ```  Second example:  ```csharp Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range"); ```</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member WriteIf : bool * string -&gt; unit" Usage="System.Diagnostics.Debug.WriteIf (condition, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="e078c-387">The conditional expression to evaluate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-387">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="e078c-388">If the condition is <see langword="true" />, the message is written to the trace listeners in the collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-388">If the condition is <see langword="true" />, the message is written to the trace listeners in the collection.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="e078c-389">A message to write.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-389">A message to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e078c-390">Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-390">Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e078c-391">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="e078c-391">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="e078c-392">此方法调用<xref:System.Diagnostics.TraceListener.Write%2A>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="e078c-392">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e078c-393">下面的示例创建<xref:System.Diagnostics.TraceSwitch>名为`generalSwitch`。</span><span class="sxs-lookup"><span data-stu-id="e078c-393">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="e078c-394">此开关已设置之外的代码示例。</span><span class="sxs-lookup"><span data-stu-id="e078c-394">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="e078c-395">如果开关设置为<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，该示例将输出发送给第一个错误消息<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="e078c-395">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="e078c-396">有关添加到侦听器<xref:System.Diagnostics.Debug.Listeners%2A>集合，请参阅<xref:System.Diagnostics.TraceListenerCollection>类。</span><span class="sxs-lookup"><span data-stu-id="e078c-396">For information about adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="e078c-397">然后，如果<xref:System.Diagnostics.TraceLevel>设置为`Verbose`，该示例将输出与第一条消息位于同一行上的第二个错误消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-397">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="e078c-398">行结束符遵循第二条消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-398">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteIf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteIf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteIf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="e078c-399">
            <para>可以通过使用检测应用程序性能的影响最小化<see langword="If...Then" />语句而不是使用<see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />语句。下面的两个代码示例将相同的调试消息发送。但是，第一个示例是要快得多当跟踪处于关闭状态，因为如果<c>mySwitch.TraceError</c>计算结果为<see langword="false" />，不调用<see cref="M:System.Diagnostics.Debug.Write(System.String)" />。第二个示例始终调用<see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />，即使当<c>mySwitch.TraceError</c>是<see langword="false" />和不生成任何跟踪输出。这可能导致不必要地执行任意复杂的代码。第一个示例: '' csharp if(mySwitch.TraceError) Debug.Write ("一个数字 ="+ 一个数字 +"超出范围");'第二个示例:' ' csharp Debug.WriteIf (mySwitch.TraceError，"一个数字 ="+ 一个数字 +"超出范围");\`\`\`</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-399">
              <para>You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> statements. The following two code examples send the same debugging message. However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.Write(System.String)" />. The second example always calls <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced. This can result in unnecessary execution of arbitrarily complex code.  First example:  ```csharp if(mySwitch.TraceError) Debug.Write("aNumber = " + aNumber + " out of range"); ```  Second example:  ```csharp Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range"); ```</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::Object ^ value, System::String ^ category);" />
      <MemberSignature Language="F#" Value="static member WriteIf : bool * obj * string -&gt; unit" Usage="System.Diagnostics.Debug.WriteIf (condition, value, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="e078c-400">The conditional expression to evaluate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-400">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="e078c-401">If the condition is <see langword="true" />, the category name and value are written to the trace listeners in the collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-401">If the condition is <see langword="true" />, the category name and value are written to the trace listeners in the collection.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e078c-402">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-402">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </param>
        <param name="category">
          <span data-ttu-id="e078c-403">A category name used to organize the output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-403">A category name used to organize the output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e078c-404">Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-404">Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e078c-405">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="e078c-405">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="e078c-406">`category`参数可以用于输出消息分组。</span><span class="sxs-lookup"><span data-stu-id="e078c-406">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="e078c-407">此方法调用<xref:System.Diagnostics.TraceListener.Write%2A>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="e078c-407">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e078c-408">下面的示例创建<xref:System.Diagnostics.TraceSwitch>名为`generalSwitch`。</span><span class="sxs-lookup"><span data-stu-id="e078c-408">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="e078c-409">此开关已设置之外的代码示例。</span><span class="sxs-lookup"><span data-stu-id="e078c-409">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="e078c-410">如果开关设置为<xref:System.Diagnostics.TraceLevel> `Verbose`，该示例将输出的名称`myObject`和`category`到<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="e078c-410">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the name of the `myObject` and the `category` to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="e078c-411">有关将添加到侦听器信息<xref:System.Diagnostics.Debug.Listeners%2A>集合，请参阅<xref:System.Diagnostics.TraceListenerCollection>类。</span><span class="sxs-lookup"><span data-stu-id="e078c-411">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="e078c-412">然后，如果<xref:System.Diagnostics.TraceLevel>设置为`Error`或更高版本，该示例将输出与第一条消息位于同一行上的第二个错误消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-412">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="e078c-413">行结束符遵循第二条消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-413">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteIf3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteIf3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf3 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteIf3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="e078c-414">
            <para>可以通过使用检测应用程序性能的影响最小化<see langword="If...Then" />语句而不是使用<see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />语句。下面的两个代码示例将相同的调试消息发送。但是，第一个示例是要快得多当跟踪处于关闭状态，因为如果<c>mySwitch.TraceError</c>计算结果为<see langword="false" />，不调用<see cref="M:System.Diagnostics.Debug.Write(System.String)" />。第二个示例始终调用<see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />，即使当<c>mySwitch.TraceError</c>是<see langword="false" />和不生成任何跟踪输出。这可能导致不必要地执行任意复杂的代码。第一个示例: '' csharp if(mySwitch.TraceError) Debug.Write ("一个数字 ="+ 一个数字 +"超出范围");'第二个示例:' ' csharp Debug.WriteIf (mySwitch.TraceError，"一个数字 ="+ 一个数字 +"超出范围");\`\`\`</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-414">
              <para>You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> statements. The following two code examples send the same debugging message. However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.Write(System.String)" />. The second example always calls <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced. This can result in unnecessary execution of arbitrarily complex code.  First example:  ```csharp if(mySwitch.TraceError) Debug.Write("aNumber = " + aNumber + " out of range"); ```  Second example:  ```csharp Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range"); ```</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::String ^ message, System::String ^ category);" />
      <MemberSignature Language="F#" Value="static member WriteIf : bool * string * string -&gt; unit" Usage="System.Diagnostics.Debug.WriteIf (condition, message, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="e078c-415">The conditional expression to evaluate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-415">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="e078c-416">If the condition is <see langword="true" />, the category name and message are written to the trace listeners in the collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-416">If the condition is <see langword="true" />, the category name and message are written to the trace listeners in the collection.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="e078c-417">A message to write.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-417">A message to write.</span>
          </span>
        </param>
        <param name="category">
          <span data-ttu-id="e078c-418">A category name used to organize the output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-418">A category name used to organize the output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e078c-419">Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-419">Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e078c-420">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="e078c-420">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="e078c-421">`category`参数可以用于输出消息分组。</span><span class="sxs-lookup"><span data-stu-id="e078c-421">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="e078c-422">此方法调用<xref:System.Diagnostics.TraceListener.Write%2A?displayProperty=nameWithType>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="e078c-422">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A?displayProperty=nameWithType> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e078c-423">下面的示例创建<xref:System.Diagnostics.TraceSwitch>名为`generalSwitch`。</span><span class="sxs-lookup"><span data-stu-id="e078c-423">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="e078c-424">此开关已设置之外的代码示例。</span><span class="sxs-lookup"><span data-stu-id="e078c-424">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="e078c-425">如果开关设置为<xref:System.Diagnostics.TraceLevel> `Verbose`，该示例将输出发送给第一个错误消息<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="e078c-425">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="e078c-426">有关将添加到侦听器信息<xref:System.Diagnostics.Debug.Listeners%2A>集合，请参阅<xref:System.Diagnostics.TraceListenerCollection>类。</span><span class="sxs-lookup"><span data-stu-id="e078c-426">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="e078c-427">然后，如果<xref:System.Diagnostics.TraceLevel>设置为`Error`或更高版本，该示例将输出与第一条消息位于同一行上的第二个错误消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-427">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="e078c-428">行结束符遵循第二条消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-428">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteIf2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteIf2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf2 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteIf2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="e078c-429">
            <para>可以通过使用检测应用程序性能的影响最小化<see langword="If...Then" />语句而不是使用<see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />语句。下面的两个代码示例将相同的调试消息发送。但是，第一个示例是要快得多当跟踪处于关闭状态，因为如果<c>mySwitch.TraceError</c>计算结果为<see langword="false" />，不调用<see cref="M:System.Diagnostics.Debug.Write(System.String)" />。第二个示例始终调用<see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />，即使当<c>mySwitch.TraceError</c>是<see langword="false" />和不生成任何跟踪输出。这可能导致不必要地执行任意复杂的代码。第一个示例: '' csharp if(mySwitch.TraceError) Debug.Write ("一个数字 ="+ 一个数字 +"超出范围");'第二个示例:' ' csharp Debug.WriteIf (mySwitch.TraceError，"一个数字 ="+ 一个数字 +"超出范围");\`\`\`</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-429">
              <para>You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> statements. The following two code examples send the same debugging message. However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.Write(System.String)" />. The second example always calls <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced. This can result in unnecessary execution of arbitrarily complex code.  First example:  ```csharp if(mySwitch.TraceError) Debug.Write("aNumber = " + aNumber + " out of range"); ```  Second example:  ```csharp Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range"); ```</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e078c-430">Writes information about the debug to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-430">Writes information about the debug to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member WriteLine : obj -&gt; unit" Usage="System.Diagnostics.Debug.WriteLine value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="e078c-431">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-431">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e078c-432">Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-432">Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e078c-433">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="e078c-433">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="e078c-434">此方法调用<xref:System.Diagnostics.TraceListener.WriteLine%2A>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="e078c-434">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e078c-435">下面的示例创建<xref:System.Diagnostics.TraceSwitch>名为`generalSwitch`。</span><span class="sxs-lookup"><span data-stu-id="e078c-435">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="e078c-436">此开关已设置之外的代码示例。</span><span class="sxs-lookup"><span data-stu-id="e078c-436">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="e078c-437">如果开关设置为<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，该示例将输出发送给第一个错误消息<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="e078c-437">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="e078c-438">有关将添加到侦听器信息<xref:System.Diagnostics.Debug.Listeners%2A>集合，请参阅<xref:System.Diagnostics.TraceListenerCollection>类。</span><span class="sxs-lookup"><span data-stu-id="e078c-438">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="e078c-439">然后，如果<xref:System.Diagnostics.TraceLevel>设置为`Verbose`，该示例将输出与第一条消息位于同一行上的对象的名称。</span><span class="sxs-lookup"><span data-stu-id="e078c-439">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the name of the object on the same line as the first message.</span></span> <span data-ttu-id="e078c-440">行结束符遵循第二条消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-440">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLine1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLine1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLine1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string -&gt; unit" Usage="System.Diagnostics.Debug.WriteLine message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="e078c-441">A message to write.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-441">A message to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e078c-442">Writes a message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-442">Writes a message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e078c-443">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="e078c-443">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="e078c-444">此方法调用<xref:System.Diagnostics.TraceListener.WriteLine%2A>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="e078c-444">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e078c-445">下面的示例创建<xref:System.Diagnostics.TraceSwitch>名为`generalSwitch`。</span><span class="sxs-lookup"><span data-stu-id="e078c-445">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="e078c-446">此开关已设置之外的代码示例。</span><span class="sxs-lookup"><span data-stu-id="e078c-446">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="e078c-447">如果开关设置为<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，该示例将输出发送给第一个错误消息<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="e078c-447">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="e078c-448">有关将添加到侦听器信息<xref:System.Diagnostics.Debug.Listeners%2A>集合，请参阅<xref:System.Diagnostics.TraceListenerCollection>类。</span><span class="sxs-lookup"><span data-stu-id="e078c-448">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="e078c-449">然后，如果<xref:System.Diagnostics.TraceLevel>设置为`Verbose`，该示例将输出与第一条消息位于同一行上的第二个错误消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-449">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="e078c-450">行结束符遵循第二条消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-450">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLine Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLine Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLine Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Object ^ value, System::String ^ category);" />
      <MemberSignature Language="F#" Value="static member WriteLine : obj * string -&gt; unit" Usage="System.Diagnostics.Debug.WriteLine (value, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="e078c-451">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-451">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </param>
        <param name="category">
          <span data-ttu-id="e078c-452">A category name used to organize the output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-452">A category name used to organize the output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e078c-453">Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-453">Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e078c-454">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="e078c-454">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="e078c-455">`category`参数可以用于输出消息分组。</span><span class="sxs-lookup"><span data-stu-id="e078c-455">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="e078c-456">此方法调用<xref:System.Diagnostics.TraceListener.WriteLine%2A>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="e078c-456">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e078c-457">下面的示例创建<xref:System.Diagnostics.TraceSwitch>名为`generalSwitch`。</span><span class="sxs-lookup"><span data-stu-id="e078c-457">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="e078c-458">此开关已设置之外的代码示例。</span><span class="sxs-lookup"><span data-stu-id="e078c-458">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="e078c-459">如果开关设置为<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，该示例将输出发送给第一个错误消息<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="e078c-459">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="e078c-460">有关将添加到侦听器信息<xref:System.Diagnostics.Debug.Listeners%2A>集合，请参阅<xref:System.Diagnostics.TraceListenerCollection>类。</span><span class="sxs-lookup"><span data-stu-id="e078c-460">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="e078c-461">然后，如果<xref:System.Diagnostics.TraceLevel>设置为`Verbose`，该示例将输出与第一条消息位于同一行上的第二个错误消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-461">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="e078c-462">第二条消息后跟行结束符。</span><span class="sxs-lookup"><span data-stu-id="e078c-462">The second message is followed by a line terminator.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLine3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLine3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine3 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLine3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string * obj[] -&gt; unit" Usage="System.Diagnostics.Debug.WriteLine (format, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="e078c-463">A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the <c>args</c> array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-463">A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the <c>args</c> array.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="e078c-464">An object array that contains zero or more objects to format.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-464">An object array that contains zero or more objects to format.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e078c-465">Writes a formatted message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-465">Writes a formatted message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e078c-466">此方法使用的.NET framework 对象的值转换为它的文本表示形式，并将该表示形式嵌入在字符串中。</span><span class="sxs-lookup"><span data-stu-id="e078c-466">This method uses the  of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</span></span>  
  
 <span data-ttu-id="e078c-467">此方法的语法中的关键字表示的对象数组可以是单个值。</span><span class="sxs-lookup"><span data-stu-id="e078c-467">The  keyword in the syntax for this method implies that the object array can be a single value.</span></span> <span data-ttu-id="e078c-468">此规则的例外是<xref:System.String>对象。</span><span class="sxs-lookup"><span data-stu-id="e078c-468">The exception to this is the <xref:System.String> object.</span></span> <span data-ttu-id="e078c-469">显式重载优先，因此`arg`单个字符串值将默认为<xref:System.Diagnostics.Debug.WriteLine%28System.String%2CSystem.String%29?displayProperty=nameWithType>重载。</span><span class="sxs-lookup"><span data-stu-id="e078c-469">Explicit overloads take precedence, so an `arg` value of a single string will default to the <xref:System.Diagnostics.Debug.WriteLine%28System.String%2CSystem.String%29?displayProperty=nameWithType> overload.</span></span>  
  
 <span data-ttu-id="e078c-470">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="e078c-470">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="e078c-471">此方法调用<xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="e078c-471">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType> method of the trace listener.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ message, System::String ^ category);" />
      <MemberSignature Language="F#" Value="static member WriteLine : string * string -&gt; unit" Usage="System.Diagnostics.Debug.WriteLine (message, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="e078c-472">A message to write.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-472">A message to write.</span>
          </span>
        </param>
        <param name="category">
          <span data-ttu-id="e078c-473">A category name used to organize the output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-473">A category name used to organize the output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e078c-474">Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-474">Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e078c-475">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="e078c-475">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="e078c-476">`category`参数可以用于输出消息分组。</span><span class="sxs-lookup"><span data-stu-id="e078c-476">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="e078c-477">此方法调用<xref:System.Diagnostics.TraceListener.WriteLine%2A>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="e078c-477">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e078c-478">下面的示例创建<xref:System.Diagnostics.TraceSwitch>名为`generalSwitch`。</span><span class="sxs-lookup"><span data-stu-id="e078c-478">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="e078c-479">此开关已设置之外的代码示例。</span><span class="sxs-lookup"><span data-stu-id="e078c-479">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="e078c-480">如果开关设置为<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，该示例将输出发送给第一个错误消息<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="e078c-480">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="e078c-481">有关将添加到侦听器信息<xref:System.Diagnostics.Debug.Listeners%2A>集合，请参阅<xref:System.Diagnostics.TraceListenerCollection>类。</span><span class="sxs-lookup"><span data-stu-id="e078c-481">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="e078c-482">然后，如果<xref:System.Diagnostics.TraceLevel>设置为`Verbose`，该示例将输出的第二个错误消息和`category`上第一条消息所在的行。</span><span class="sxs-lookup"><span data-stu-id="e078c-482">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message and the `category` on the same line as the first message.</span></span> <span data-ttu-id="e078c-483">行结束符遵循第二条消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-483">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLine2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLine2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine2 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLine2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLineIf">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e078c-484">Writes information about the debug to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-484">Writes information about the debug to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member WriteLineIf : bool * obj -&gt; unit" Usage="System.Diagnostics.Debug.WriteLineIf (condition, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="e078c-485">The conditional expression to evaluate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-485">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="e078c-486">If the condition is <see langword="true" />, the value is written to the trace listeners in the collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-486">If the condition is <see langword="true" />, the value is written to the trace listeners in the collection.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e078c-487">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-487">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e078c-488">Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-488">Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e078c-489">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="e078c-489">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="e078c-490">此方法调用<xref:System.Diagnostics.TraceListener.WriteLine%2A>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="e078c-490">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e078c-491">下面的示例创建<xref:System.Diagnostics.TraceSwitch>名为`generalSwitch`。</span><span class="sxs-lookup"><span data-stu-id="e078c-491">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="e078c-492">此开关已设置之外的代码示例。</span><span class="sxs-lookup"><span data-stu-id="e078c-492">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="e078c-493">如果开关设置为<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，该示例将输出发送给第一个错误消息<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="e078c-493">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="e078c-494">有关将添加到侦听器信息<xref:System.Diagnostics.Debug.Listeners%2A>集合，请参阅<xref:System.Diagnostics.TraceListenerCollection>类。</span><span class="sxs-lookup"><span data-stu-id="e078c-494">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="e078c-495">然后，如果<xref:System.Diagnostics.TraceLevel>设置为`Verbose`，该示例将输出与第一条消息位于同一行上的对象的名称。</span><span class="sxs-lookup"><span data-stu-id="e078c-495">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the name of the object on the same line as the first message.</span></span> <span data-ttu-id="e078c-496">行结束符遵循第二条消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-496">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLineIf1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLineIf1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLineIf1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="e078c-497">
            <para>可以通过使用检测应用程序性能的影响最小化<see langword="If...Then" />语句而不是使用<see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />语句。下面的两个代码示例将相同的调试消息发送。但是，第一个示例是要快得多当跟踪处于关闭状态，因为如果<c>mySwitch.TraceError</c>计算结果为<see langword="false" />，不调用<see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />。第二个示例始终调用<see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />，即使当<c>mySwitch.TraceError</c>是<see langword="false" />和不生成任何跟踪输出。这可能导致不必要地执行任意复杂的代码。第一个示例: '' csharp if(mySwitch.TraceError) Debug.WriteLine ("一个数字 ="+ 一个数字 +"超出范围");'第二个示例:' ' csharp Debug.WriteLineIf (mySwitch.TraceError，"一个数字 ="+ 一个数字 +"超出范围");\`\`\`</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-497">
              <para>You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> statements. The following two code examples send the same debugging message. However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />. The second example always calls <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced. This can result in unnecessary execution of arbitrarily complex code.  First example:  ```csharp if(mySwitch.TraceError) Debug.WriteLine("aNumber = " + aNumber + " out of range"); ```  Second example:  ```csharp Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range"); ```</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::String ^ message);" />
      <MemberSignature Language="F#" Value="static member WriteLineIf : bool * string -&gt; unit" Usage="System.Diagnostics.Debug.WriteLineIf (condition, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="e078c-498">The conditional expression to evaluate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-498">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="e078c-499">If the condition is <see langword="true" />, the message is written to the trace listeners in the collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-499">If the condition is <see langword="true" />, the message is written to the trace listeners in the collection.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="e078c-500">A message to write.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-500">A message to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e078c-501">Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-501">Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e078c-502">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="e078c-502">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="e078c-503">此方法调用<xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="e078c-503">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e078c-504">下面的示例创建<xref:System.Diagnostics.TraceSwitch>名为`generalSwitch`。</span><span class="sxs-lookup"><span data-stu-id="e078c-504">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="e078c-505">此开关已设置之外的代码示例。</span><span class="sxs-lookup"><span data-stu-id="e078c-505">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="e078c-506">如果开关设置为<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，该示例将输出发送给第一个错误消息<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="e078c-506">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="e078c-507">有关添加到侦听器<xref:System.Diagnostics.Debug.Listeners%2A>集合，请参阅<xref:System.Diagnostics.TraceListenerCollection>类。</span><span class="sxs-lookup"><span data-stu-id="e078c-507">For information about adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="e078c-508">然后，如果<xref:System.Diagnostics.TraceLevel>设置为`Verbose`，该示例将输出与第一条消息位于同一行上的第二个错误消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-508">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="e078c-509">行结束符遵循第二条消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-509">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLineIf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLineIf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLineIf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="e078c-510">
            <para>可以通过使用检测应用程序性能的影响最小化<see langword="If...Then" />语句而不是使用<see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />语句。下面的两个代码示例将相同的调试消息发送。但是，第一个示例是要快得多当跟踪处于关闭状态，因为如果<c>mySwitch.TraceError</c>计算结果为<see langword="false" />，不调用<see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />。第二个示例始终调用<see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />，即使当<c>mySwitch.TraceError</c>是<see langword="false" />和不生成任何跟踪输出。这可能导致不必要地执行任意复杂的代码。第一个示例: '' csharp if(mySwitch.TraceError) Debug.WriteLine ("一个数字 ="+ 一个数字 +"超出范围");'第二个示例:' ' csharp Debug.WriteLineIf (mySwitch.TraceError，"一个数字 ="+ 一个数字 +"超出范围");\`\`\`</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-510">
              <para>You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> statements. The following two code examples send the same debugging message. However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />. The second example always calls <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced. This can result in unnecessary execution of arbitrarily complex code.  First example:  ```csharp if(mySwitch.TraceError) Debug.WriteLine("aNumber = " + aNumber + " out of range"); ```  Second example:  ```csharp Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range"); ```</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::Object ^ value, System::String ^ category);" />
      <MemberSignature Language="F#" Value="static member WriteLineIf : bool * obj * string -&gt; unit" Usage="System.Diagnostics.Debug.WriteLineIf (condition, value, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="e078c-511">The conditional expression to evaluate.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-511">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="e078c-512">If the condition is <see langword="true" />, the category name and value are written to the trace listeners in the collection.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-512">If the condition is <see langword="true" />, the category name and value are written to the trace listeners in the collection.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e078c-513">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-513">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </param>
        <param name="category">
          <span data-ttu-id="e078c-514">A category name used to organize the output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-514">A category name used to organize the output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e078c-515">Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-515">Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e078c-516">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="e078c-516">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="e078c-517">`category`参数可以用于输出消息分组。</span><span class="sxs-lookup"><span data-stu-id="e078c-517">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="e078c-518">此方法调用<xref:System.Diagnostics.TraceListener.WriteLine%2A>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="e078c-518">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e078c-519">下面的示例创建<xref:System.Diagnostics.TraceSwitch>名为`generalSwitch`。</span><span class="sxs-lookup"><span data-stu-id="e078c-519">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="e078c-520">此开关已设置之外的代码示例。</span><span class="sxs-lookup"><span data-stu-id="e078c-520">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="e078c-521">如果开关设置为<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，该示例将输出发送给第一个错误消息<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="e078c-521">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="e078c-522">有关将添加到侦听器信息<xref:System.Diagnostics.Debug.Listeners%2A>集合，请参阅<xref:System.Diagnostics.TraceListenerCollection>类。</span><span class="sxs-lookup"><span data-stu-id="e078c-522">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="e078c-523">然后，如果<xref:System.Diagnostics.TraceLevel>设置为`Verbose`，该示例将输出与第一条消息位于同一行上的第二个错误消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-523">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="e078c-524">行结束符遵循第二条消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-524">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLineIf3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLineIf3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf3 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLineIf3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="e078c-525">
            <para>可以通过使用检测应用程序性能的影响最小化<see langword="If...Then" />语句而不是使用<see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />语句。下面的两个代码示例将相同的调试消息发送。但是，第一个示例是要快得多当跟踪处于关闭状态，因为如果<c>mySwitch.TraceError</c>计算结果为<see langword="false" />，不调用<see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />。第二个示例始终调用<see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />，即使当<c>mySwitch.TraceError</c>是<see langword="false" />和不生成任何跟踪输出。这可能导致不必要地执行任意复杂的代码。第一个示例: '' csharp if(mySwitch.TraceError) Debug.WriteLine ("一个数字 ="+ 一个数字 +"超出范围");'第二个示例:' ' csharp Debug.WriteLineIf (mySwitch.TraceError，"一个数字 ="+ 一个数字 +"超出范围");\`\`\`</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-525">
              <para>You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> statements. The following two code examples send the same debugging message. However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />. The second example always calls <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced. This can result in unnecessary execution of arbitrarily complex code.  First example:  ```csharp if(mySwitch.TraceError) Debug.WriteLine("aNumber = " + aNumber + " out of range"); ```  Second example:  ```csharp Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range"); ```</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::String ^ message, System::String ^ category);" />
      <MemberSignature Language="F#" Value="static member WriteLineIf : bool * string * string -&gt; unit" Usage="System.Diagnostics.Debug.WriteLineIf (condition, message, category)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="e078c-526">
            <see langword="true" /> to cause a message to be written; otherwise, <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-526">
              <see langword="true" /> to cause a message to be written; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="e078c-527">A message to write.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-527">A message to write.</span>
          </span>
        </param>
        <param name="category">
          <span data-ttu-id="e078c-528">A category name used to organize the output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-528">A category name used to organize the output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e078c-529">Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-529">Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e078c-530">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="e078c-530">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="e078c-531">`category`参数可以用于输出消息分组。</span><span class="sxs-lookup"><span data-stu-id="e078c-531">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="e078c-532">此方法调用<xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="e078c-532">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e078c-533">下面的示例创建<xref:System.Diagnostics.TraceSwitch>名为`generalSwitch`。</span><span class="sxs-lookup"><span data-stu-id="e078c-533">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="e078c-534">此开关已设置之外的代码示例。</span><span class="sxs-lookup"><span data-stu-id="e078c-534">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="e078c-535">如果开关设置为<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，该示例将输出发送给第一个错误消息<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="e078c-535">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="e078c-536">有关将添加到侦听器信息<xref:System.Diagnostics.Debug.Listeners%2A>集合，请参阅<xref:System.Diagnostics.TraceListenerCollection>类。</span><span class="sxs-lookup"><span data-stu-id="e078c-536">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="e078c-537">然后，如果<xref:System.Diagnostics.TraceLevel>设置为`Verbose`，该示例将输出的第二个错误消息和`category`上第一条消息所在的行。</span><span class="sxs-lookup"><span data-stu-id="e078c-537">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message and the `category` on the same line as the first message.</span></span> <span data-ttu-id="e078c-538">行结束符遵循第二条消息。</span><span class="sxs-lookup"><span data-stu-id="e078c-538">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLineIf2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLineIf2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf2 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLineIf2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="e078c-539">
            <para>可以通过使用检测应用程序性能的影响最小化<see langword="If...Then" />语句而不是使用<see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />语句。下面的两个代码示例将相同的调试消息发送。但是，第一个示例是要快得多当跟踪处于关闭状态，因为如果<c>mySwitch.TraceError</c>计算结果为<see langword="false" />，不调用<see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />。第二个示例始终调用<see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />，即使当<c>mySwitch.TraceError</c>是<see langword="false" />和不生成任何跟踪输出。这可能导致不必要地执行任意复杂的代码。第一个示例: '' csharp if(mySwitch.TraceError) Debug.WriteLine ("一个数字 ="+ 一个数字 +"超出范围");'第二个示例:' ' csharp Debug.WriteLineIf (mySwitch.TraceError，"一个数字 ="+ 一个数字 +"超出范围");\`\`\`</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="e078c-539">
              <para>You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> statements. The following two code examples send the same debugging message. However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />. The second example always calls <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced. This can result in unnecessary execution of arbitrarily complex code.  First example:  ```csharp if(mySwitch.TraceError) Debug.WriteLine("aNumber = " + aNumber + " out of range"); ```  Second example:  ```csharp Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range"); ```</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
  </Members>
</Type>