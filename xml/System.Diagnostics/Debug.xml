<Type Name="Debug" FullName="System.Diagnostics.Debug">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="331d1e20f17d7065dd117481b3458a017c3f98b4" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Debug" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Debug extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Debug" />
  <TypeSignature Language="VB.NET" Value="Public Class Debug" />
  <TypeSignature Language="C++ CLI" Value="public ref class Debug abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Debug</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="c72d8-101">提供一组有助于调试代码的方法和属性。</span>
      <span class="sxs-lookup">
        <span data-stu-id="c72d8-101">Provides a set of methods and properties that help debug your code.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c72d8-102">如果你使用在方法<xref:System.Diagnostics.Debug>类以打印调试信息并检查你用断言的逻辑中，你可以使代码更可靠而不会影响传送产品的性能和代码大小。</span><span class="sxs-lookup"><span data-stu-id="c72d8-102">If you use methods in the <xref:System.Diagnostics.Debug> class to print debugging information and check your logic with assertions, you can make your code more robust without impacting the performance and code size of your shipping product.</span></span>  
  
 <span data-ttu-id="c72d8-103">此类提供了方法显示<xref:System.Diagnostics.Debug.Assert%2A>对话框中，并发出将始终失败的断言。</span><span class="sxs-lookup"><span data-stu-id="c72d8-103">This class provides methods to display an <xref:System.Diagnostics.Debug.Assert%2A> dialog box, and to emit an assertion that will always fail.</span></span> <span data-ttu-id="c72d8-104">此类提供的以下变体的写入方法： <xref:System.Diagnostics.Debug.Write%2A>， <xref:System.Diagnostics.Debug.WriteLine%2A>，<xref:System.Diagnostics.Debug.WriteIf%2A>和<xref:System.Diagnostics.Debug.WriteLineIf%2A>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-104">This class provides write methods in the following variations: <xref:System.Diagnostics.Debug.Write%2A>, <xref:System.Diagnostics.Debug.WriteLine%2A>, <xref:System.Diagnostics.Debug.WriteIf%2A> and <xref:System.Diagnostics.Debug.WriteLineIf%2A>.</span></span>  
  
 <span data-ttu-id="c72d8-105"><xref:System.Diagnostics.BooleanSwitch>和<xref:System.Diagnostics.TraceSwitch>类提供动态控制跟踪输出方法。</span><span class="sxs-lookup"><span data-stu-id="c72d8-105">The <xref:System.Diagnostics.BooleanSwitch> and <xref:System.Diagnostics.TraceSwitch> classes provide means to dynamically control the tracing output.</span></span> <span data-ttu-id="c72d8-106">无需重新编译你的应用程序，可以修改这些开关的值。</span><span class="sxs-lookup"><span data-stu-id="c72d8-106">You can modify the values of these switches without recompiling your application.</span></span> <span data-ttu-id="c72d8-107">有关使用配置文件设置开关的信息，请参阅<xref:System.Diagnostics.Switch>类和[跟踪开关](~/docs/framework/debug-trace-profile/trace-switches.md)主题。</span><span class="sxs-lookup"><span data-stu-id="c72d8-107">For information on using the configuration file to set a switch, see the <xref:System.Diagnostics.Switch> class and the [Trace Switches](~/docs/framework/debug-trace-profile/trace-switches.md) topic.</span></span>  
  
 <span data-ttu-id="c72d8-108">可以通过添加自定义跟踪输出的目标<xref:System.Diagnostics.TraceListener>实例到或删除实例从<xref:System.Diagnostics.Debug.Listeners%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="c72d8-108">You can customize the tracing output's target by adding <xref:System.Diagnostics.TraceListener> instances to or removing instances from the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span> <span data-ttu-id="c72d8-109"><xref:System.Diagnostics.Debug.Listeners%2A>集合共享两个<xref:System.Diagnostics.Debug>和<xref:System.Diagnostics.Trace>类; 添加到其中一个类的跟踪侦听器将侦听器添加到两。</span><span class="sxs-lookup"><span data-stu-id="c72d8-109">The <xref:System.Diagnostics.Debug.Listeners%2A> collection is shared by both the <xref:System.Diagnostics.Debug> and the <xref:System.Diagnostics.Trace> classes; adding a trace listener to either class adds the listener to both.</span></span> <span data-ttu-id="c72d8-110">默认情况下，<xref:System.Diagnostics.DefaultTraceListener>类发出跟踪输出。</span><span class="sxs-lookup"><span data-stu-id="c72d8-110">By default, the <xref:System.Diagnostics.DefaultTraceListener> class emits trace output.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c72d8-111">添加到跟踪侦听器<xref:System.Diagnostics.Debug.Listeners%2A>集合可能导致异常引发时进行跟踪，如果跟踪侦听器使用的资源不可用。</span><span class="sxs-lookup"><span data-stu-id="c72d8-111">Adding a trace listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection can cause an exception to be thrown while tracing, if a resource used by the trace listener is not available.</span></span> <span data-ttu-id="c72d8-112">条件和引发的异常取决于跟踪侦听器，并不能在本主题中枚举。</span><span class="sxs-lookup"><span data-stu-id="c72d8-112">The conditions and the exception thrown depend on the trace listener and cannot be enumerated in this topic.</span></span> <span data-ttu-id="c72d8-113">它可能会有用呼叫<xref:System.Diagnostics.Debug>中的方法`try` / `catch`块来检测和处理从跟踪侦听器的任何异常。</span><span class="sxs-lookup"><span data-stu-id="c72d8-113">It may be useful to place calls to the <xref:System.Diagnostics.Debug> methods in `try`/`catch` blocks to detect and handle any exceptions from trace listeners.</span></span>  
  
 <span data-ttu-id="c72d8-114">你可以修改的级别的缩进使用<xref:System.Diagnostics.Debug.Indent%2A>方法或<xref:System.Diagnostics.Debug.IndentLevel%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="c72d8-114">You can modify the level of indentation using the <xref:System.Diagnostics.Debug.Indent%2A> method or the <xref:System.Diagnostics.Debug.IndentLevel%2A> property.</span></span> <span data-ttu-id="c72d8-115">若要修改的缩进间距，使用<xref:System.Diagnostics.Debug.IndentSize%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="c72d8-115">To modify the indent spacing, use the <xref:System.Diagnostics.Debug.IndentSize%2A> property.</span></span> <span data-ttu-id="c72d8-116">你可以指定是否自动在每次写入后刷新输出缓冲区，通过设置<xref:System.Diagnostics.Debug.AutoFlush%2A>属性`true`。</span><span class="sxs-lookup"><span data-stu-id="c72d8-116">You can specify whether to automatically flush the output buffer after each write by setting the <xref:System.Diagnostics.Debug.AutoFlush%2A> property to `true`.</span></span>  
  
 <span data-ttu-id="c72d8-117">若要设置<xref:System.Diagnostics.Debug.AutoFlush%2A>和<xref:System.Diagnostics.Debug.IndentSize%2A>为<xref:System.Diagnostics.Debug>，你可以编辑你的应用程序的名称相对应的配置文件。</span><span class="sxs-lookup"><span data-stu-id="c72d8-117">To set the <xref:System.Diagnostics.Debug.AutoFlush%2A> and <xref:System.Diagnostics.Debug.IndentSize%2A> for <xref:System.Diagnostics.Debug>, you can edit the configuration file corresponding to the name of your application.</span></span> <span data-ttu-id="c72d8-118">应按照下面的示例所示格式设置的配置文件。</span><span class="sxs-lookup"><span data-stu-id="c72d8-118">The configuration file should be formatted as shown in the following example.</span></span>  
  
```  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="true" indentsize="7" />  
  </system.diagnostics>  
</configuration>  
```  
  
 <span data-ttu-id="c72d8-119"><xref:System.Diagnostics.ConditionalAttribute>特性应用于的方法<xref:System.Diagnostics.Debug>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-119">The <xref:System.Diagnostics.ConditionalAttribute> attribute is applied to the methods of <xref:System.Diagnostics.Debug>.</span></span> <span data-ttu-id="c72d8-120">支持的编译器<xref:System.Diagnostics.ConditionalAttribute>忽略对这些方法的调用，除非将"DEBUG"定义为有条件编译符号。</span><span class="sxs-lookup"><span data-stu-id="c72d8-120">Compilers that support <xref:System.Diagnostics.ConditionalAttribute> ignore calls to these methods unless "DEBUG" is defined as a conditional compilation symbol.</span></span> <span data-ttu-id="c72d8-121">请参阅编译器的文档，以确定是否<xref:System.Diagnostics.ConditionalAttribute>支持以及用于定义条件编译符号的语法。</span><span class="sxs-lookup"><span data-stu-id="c72d8-121">Refer to a compiler's documentation to determine whether <xref:System.Diagnostics.ConditionalAttribute> is supported and the syntax for defining a conditional compilation symbol.</span></span>  
  
> [!NOTE]
> <span data-ttu-id="c72d8-122">在 Visual Studio C# 和 Visual Basic 项目中，默认情况下，"DEBUG"条件编译符号定义为调试版本和发行版本定义"TRACE"符号。</span><span class="sxs-lookup"><span data-stu-id="c72d8-122">In Visual Studio C# and Visual Basic projects, by default, the "DEBUG" conditional compilation symbol is defined for debug builds, and the "TRACE" symbol is defined for both debug and release builds.</span></span> <span data-ttu-id="c72d8-123">有关如何禁用此行为的信息，请参阅 Visual Studio 文档。</span><span class="sxs-lookup"><span data-stu-id="c72d8-123">For information about how to disable this behavior, see the Visual Studio documentation.</span></span> <span data-ttu-id="c72d8-124">有关在 Visual c + + 中的条件性调试的信息，请参阅[Debug 类 (C + + /cli CLI)](/cpp/dotnet/debug-class-cpp-cli)。</span><span class="sxs-lookup"><span data-stu-id="c72d8-124">For information about conditional debugging in Visual C++, see [Debug Class (C++/CLI)](/cpp/dotnet/debug-class-cpp-cli).</span></span>
  
 <span data-ttu-id="c72d8-125">若要定义在 C# 中的"DEBUG"条件编译符号，添加`/d:DEBUG`编译使用命令行，代码时，到编译器命令行选项或添加`#define DEBUG`到你的文件的顶部。</span><span class="sxs-lookup"><span data-stu-id="c72d8-125">To define the "DEBUG" conditional compilation symbol in C#, add the `/d:DEBUG` option to the compiler command line when you compile your code using a command line, or add `#define DEBUG` to the top of your file.</span></span> <span data-ttu-id="c72d8-126">在 Visual Basic 中，添加`/d:DEBUG=True`到编译器命令行选项或添加`#Const DEBUG=True`文件。</span><span class="sxs-lookup"><span data-stu-id="c72d8-126">In Visual Basic, add the `/d:DEBUG=True` option to the compiler command line or add `#Const DEBUG=True` to the file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c72d8-127">下面的示例使用<xref:System.Diagnostics.Debug>以指示的开头和末尾对程序的执行。</span><span class="sxs-lookup"><span data-stu-id="c72d8-127">The following example uses <xref:System.Diagnostics.Debug> to indicate the beginning and end of a program's execution.</span></span> <span data-ttu-id="c72d8-128">此示例还使用<xref:System.Diagnostics.Debug.Indent%2A>和<xref:System.Diagnostics.Debug.Unindent%2A>来区分将跟踪输出。</span><span class="sxs-lookup"><span data-stu-id="c72d8-128">The example also uses <xref:System.Diagnostics.Debug.Indent%2A> and <xref:System.Diagnostics.Debug.Unindent%2A> to distinguish the tracing output.</span></span>  
  
 [!code-cpp[Classic Debug Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug Example/CS/source.cs#1)]
 [!code-vb[Classic Debug Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="c72d8-129">此类型是线程安全的。</span>
      <span class="sxs-lookup">
        <span data-stu-id="c72d8-129">This type is thread safe.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Diagnostics.Trace" />
    <altmember cref="T:System.Diagnostics.Switch" />
    <altmember cref="T:System.Diagnostics.BooleanSwitch" />
    <altmember cref="T:System.Diagnostics.TraceSwitch" />
    <altmember cref="T:System.Diagnostics.TraceListener" />
    <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
    <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
    <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
    <altmember cref="T:System.Diagnostics.TraceListenerCollection" />
    <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Assert">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c72d8-130">检查条件 ；如果条件为 <see langword="false" />，则输出消息，并显示一个消息框，其中显示调用堆栈。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-130">Checks for a condition; if the condition is <see langword="false" />, outputs messages and displays a message box that shows the call stack.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Assert(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="c72d8-131">要计算的条件表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-131">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="c72d8-132">如果条件为 <see langword="true" />，则不会发送失败消息，也不显示消息框。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-132">If the condition is <see langword="true" />, a failure message is not sent and the message box is not displayed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c72d8-133">检查条件 ；如果条件为 <see langword="false" />，则显示一个消息框，其中显示调用堆栈。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-133">Checks for a condition; if the condition is <see langword="false" />, displays a message box that shows the call stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c72d8-134">默认情况下，<xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType>方法仅在调试版本中有效。</span><span class="sxs-lookup"><span data-stu-id="c72d8-134">By default, the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> method works only in debug builds.</span></span> <span data-ttu-id="c72d8-135">使用<xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType>方法如果你想要执行断言版本中的可生成。</span><span class="sxs-lookup"><span data-stu-id="c72d8-135">Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> method if you want to do assertions in release builds.</span></span> <span data-ttu-id="c72d8-136">有关详细信息，请参阅[托管代码中的断言](/visualstudio/debugger/assertions-in-managed-code)。</span><span class="sxs-lookup"><span data-stu-id="c72d8-136">For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c72d8-137">`Assert`方法不可用于[!INCLUDE[win8_appstore_long](~/includes/win8-appstore-long-md.md)]应用。</span><span class="sxs-lookup"><span data-stu-id="c72d8-137">The `Assert` methods are not available for [!INCLUDE[win8_appstore_long](~/includes/win8-appstore-long-md.md)] apps.</span></span>  
  
 <span data-ttu-id="c72d8-138">通常情况下，<xref:System.Diagnostics.Debug.Assert%28System.Boolean%29>方法用于标识程序开发过程的逻辑错误。</span><span class="sxs-lookup"><span data-stu-id="c72d8-138">Typically, the <xref:System.Diagnostics.Debug.Assert%28System.Boolean%29> method is used to identify logic errors during program development.</span></span> <span data-ttu-id="c72d8-139"><xref:System.Diagnostics.Debug.Assert%2A> 计算条件。</span><span class="sxs-lookup"><span data-stu-id="c72d8-139"><xref:System.Diagnostics.Debug.Assert%2A> evaluates the condition.</span></span> <span data-ttu-id="c72d8-140">如果结果为`false`，它将发送到失败消息<xref:System.Diagnostics.Debug.Listeners%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="c72d8-140">If the result is `false`, it sends a failure message to the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span> <span data-ttu-id="c72d8-141">可以通过添加自定义此行为<xref:System.Diagnostics.TraceListener>，或从中移除<xref:System.Diagnostics.Debug.Listeners%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="c72d8-141">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
 <span data-ttu-id="c72d8-142">当在用户界面模式下运行应用程序时，它将显示一个消息框，显示文件和行号的调用堆栈。</span><span class="sxs-lookup"><span data-stu-id="c72d8-142">When the application runs in user interface mode, it displays a message box that shows the call stack with file and line numbers.</span></span> <span data-ttu-id="c72d8-143">消息框包含三个按钮：**中止**，**重试**，和**忽略**。</span><span class="sxs-lookup"><span data-stu-id="c72d8-143">The message box contains three buttons: **Abort**, **Retry**, and **Ignore**.</span></span> <span data-ttu-id="c72d8-144">单击**中止**按钮终止应用程序。</span><span class="sxs-lookup"><span data-stu-id="c72d8-144">Clicking the **Abort** button terminates the application.</span></span> <span data-ttu-id="c72d8-145">单击**重试**向你发送到调试器中的代码中，如果你的应用程序运行在调试器中，或如果它不是打开调试器。</span><span class="sxs-lookup"><span data-stu-id="c72d8-145">Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not.</span></span> <span data-ttu-id="c72d8-146">单击**忽略**继续在代码中的下一步指令。</span><span class="sxs-lookup"><span data-stu-id="c72d8-146">Clicking **Ignore** continues with the next instruction in the code.</span></span>  
  
> [!NOTE]
>  [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)]<span data-ttu-id="c72d8-147"> 应用不支持模式对话框框中，因此它们的行为中用户界面模式和非用户界面模式相同。</span><span class="sxs-lookup"><span data-stu-id="c72d8-147"> apps do not support modal dialog boxes, so they behave the same in user interface mode and non-user interface mode.</span></span> <span data-ttu-id="c72d8-148">将消息写入到活动的跟踪侦听器在调试模式下，或在发布模式下写入任何消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-148">The message is written to the active trace listeners in debugging mode, or no message is written in release mode.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c72d8-149">在消息框显示取决于是否存在的<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-149">The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="c72d8-150">如果<xref:System.Diagnostics.DefaultTraceListener>不在<xref:System.Diagnostics.Trace.Listeners%2A>集合，消息框不会显示。</span><span class="sxs-lookup"><span data-stu-id="c72d8-150">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="c72d8-151"><xref:System.Diagnostics.DefaultTraceListener>可以删除[&lt;清除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md)、 [&lt;删除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md)，或通过调用<xref:System.Diagnostics.TraceListenerCollection.Clear%2A>方法<xref:System.Diagnostics.Trace.Listeners%2A>属性 (`System.Diagnostics.Trace.Listeners.Clear()`)。</span><span class="sxs-lookup"><span data-stu-id="c72d8-151">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="c72d8-152">你可以更改的行为<xref:System.Diagnostics.DefaultTraceListener>对应于你的应用程序的名称的配置文件中。</span><span class="sxs-lookup"><span data-stu-id="c72d8-152">You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application.</span></span> <span data-ttu-id="c72d8-153">在此文件中，你可以启用和禁用断言消息框或设置<xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="c72d8-153">In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="c72d8-154">配置文件应格式如下：</span><span class="sxs-lookup"><span data-stu-id="c72d8-154">The configuration file should be formatted as follows:</span></span>  
  
```  
<configuration>  
  <system.diagnostics>  
    <assert assertuienabled="true" logfilename="c:\\myFile.log" />  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 <span data-ttu-id="c72d8-155">下面的示例创建数组的索引、 执行某些操作来设置的值的索引，并随后调用<xref:System.Diagnostics.Debug.Assert%2A>确认的索引值是否有效。</span><span class="sxs-lookup"><span data-stu-id="c72d8-155">The following example creates an index for an array, performs some action to set the value of the index, and then calls <xref:System.Diagnostics.Debug.Assert%2A> to confirm that the index value is valid.</span></span> <span data-ttu-id="c72d8-156">如果不是有效，<xref:System.Diagnostics.Debug.Assert%2A>输出调用堆栈。</span><span class="sxs-lookup"><span data-stu-id="c72d8-156">If it is not valid, <xref:System.Diagnostics.Debug.Assert%2A> outputs the call stack.</span></span>  
  
 [!code-cpp[Classic Debug.Assert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Assert Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Assert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Assert Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Assert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Assert Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition, System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="c72d8-157">要计算的条件表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-157">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="c72d8-158">如果条件为 <see langword="true" />，则不会发送指定消息，也不显示消息框。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-158">If the condition is <see langword="true" />, the specified message is not sent and the message box is not displayed.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="c72d8-159">要发送到 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合的消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-159">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c72d8-160">检查条件；如果条件为 <see langword="false" />，则输出指定消息并显示指示调用堆栈的消息框。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-160">Checks for a condition; if the condition is <see langword="false" />, outputs a specified message and displays a message box that shows the call stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c72d8-161">默认情况下，<xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType>方法仅在调试版本中有效。</span><span class="sxs-lookup"><span data-stu-id="c72d8-161">By default, the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> method works only in debug builds.</span></span> <span data-ttu-id="c72d8-162">使用<xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType>方法如果你想要执行断言版本中的可生成。</span><span class="sxs-lookup"><span data-stu-id="c72d8-162">Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> method if you want to do assertions in release builds.</span></span> <span data-ttu-id="c72d8-163">有关详细信息，请参阅[托管代码中的断言](/visualstudio/debugger/assertions-in-managed-code)。</span><span class="sxs-lookup"><span data-stu-id="c72d8-163">For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code).</span></span>  
  
 <span data-ttu-id="c72d8-164">通常情况下，<xref:System.Diagnostics.Debug.Assert%2A>方法用于标识程序开发过程的逻辑错误。</span><span class="sxs-lookup"><span data-stu-id="c72d8-164">Typically, the <xref:System.Diagnostics.Debug.Assert%2A> method is used to identify logic errors during program development.</span></span> <span data-ttu-id="c72d8-165"><xref:System.Diagnostics.Debug.Assert%2A> 计算条件。</span><span class="sxs-lookup"><span data-stu-id="c72d8-165"><xref:System.Diagnostics.Debug.Assert%2A> evaluates the condition.</span></span> <span data-ttu-id="c72d8-166">如果结果为`false`，它将发送到指定的诊断消息<xref:System.Diagnostics.Debug.Listeners%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="c72d8-166">If the result is `false`, it sends the specified diagnostic message to the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span> <span data-ttu-id="c72d8-167">可以通过添加自定义此行为<xref:System.Diagnostics.TraceListener>，或从中移除<xref:System.Diagnostics.Debug.Listeners%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="c72d8-167">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
 <span data-ttu-id="c72d8-168">当在用户界面模式下运行应用程序时，它将显示一个消息框，显示文件和行号的调用堆栈。</span><span class="sxs-lookup"><span data-stu-id="c72d8-168">When the application runs in user interface mode, it displays a message box that shows the call stack with file and line numbers.</span></span> <span data-ttu-id="c72d8-169">消息框包含三个按钮：**中止**，**重试**，和**忽略**。</span><span class="sxs-lookup"><span data-stu-id="c72d8-169">The message box contains three buttons: **Abort**, **Retry**, and **Ignore**.</span></span> <span data-ttu-id="c72d8-170">单击**中止**按钮终止应用程序。</span><span class="sxs-lookup"><span data-stu-id="c72d8-170">Clicking the **Abort** button terminates the application.</span></span> <span data-ttu-id="c72d8-171">单击**重试**向你发送到调试器中的代码中，如果你的应用程序运行在调试器中，或如果它不是打开调试器。</span><span class="sxs-lookup"><span data-stu-id="c72d8-171">Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not.</span></span> <span data-ttu-id="c72d8-172">单击**忽略**继续在代码中的下一步指令。</span><span class="sxs-lookup"><span data-stu-id="c72d8-172">Clicking **Ignore** continues with the next instruction in the code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c72d8-173">在消息框显示取决于是否存在的<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-173">The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="c72d8-174">如果<xref:System.Diagnostics.DefaultTraceListener>不在<xref:System.Diagnostics.Trace.Listeners%2A>集合，消息框不会显示。</span><span class="sxs-lookup"><span data-stu-id="c72d8-174">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="c72d8-175"><xref:System.Diagnostics.DefaultTraceListener>可以删除[&lt;清除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md)、 [&lt;删除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md)，或通过调用<xref:System.Diagnostics.TraceListenerCollection.Clear%2A>方法<xref:System.Diagnostics.Trace.Listeners%2A>属性 (`System.Diagnostics.Trace.Listeners.Clear()`)。</span><span class="sxs-lookup"><span data-stu-id="c72d8-175">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="c72d8-176">你可以更改的行为<xref:System.Diagnostics.DefaultTraceListener>对应于你的应用程序的名称的配置文件中。</span><span class="sxs-lookup"><span data-stu-id="c72d8-176">You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application.</span></span> <span data-ttu-id="c72d8-177">在此文件中，你可以启用和禁用断言消息框或设置<xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="c72d8-177">In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="c72d8-178">配置文件应格式如下：</span><span class="sxs-lookup"><span data-stu-id="c72d8-178">The configuration file should be formatted as follows:</span></span>  
  
```  
<configuration>  
  <system.diagnostics>  
    <assert assertuienabled="true" logfilename="c:\\myFile.log" />  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 <span data-ttu-id="c72d8-179">下面的示例检查是否`type`参数才有效。</span><span class="sxs-lookup"><span data-stu-id="c72d8-179">The following example checks whether the `type` parameter is valid.</span></span> <span data-ttu-id="c72d8-180">如果`type`是`null`，<xref:System.Diagnostics.Trace.Assert%2A>输出消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-180">If `type` is `null`, <xref:System.Diagnostics.Trace.Assert%2A> outputs a message.</span></span>  
  
 [!code-cpp[Classic Debug.Assert1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Assert1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Assert1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Assert1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Assert1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Assert1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean, message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition, System::String ^ message, System::String ^ detailMessage);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="c72d8-181">要计算的条件表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-181">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="c72d8-182">如果条件为 <see langword="true" />，则不会发送指定的消息，也不显示消息框。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-182">If the condition is <see langword="true" />, the specified messages are not sent and the message box is not displayed.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="c72d8-183">要发送到 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合的消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-183">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span>
          </span>
        </param>
        <param name="detailMessage">
          <span data-ttu-id="c72d8-184">要发送到 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合的详细消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-184">The detailed message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c72d8-185">检查条件 ；如果条件为 <see langword="false" />，则输出两条指定消息，并显示一个消息框，其中显示调用堆栈。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-185">Checks for a condition; if the condition is <see langword="false" />, outputs two specified messages and displays a message box that shows the call stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c72d8-186">默认情况下，<xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType>方法仅在调试版本中有效。</span><span class="sxs-lookup"><span data-stu-id="c72d8-186">By default, the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> method works only in debug builds.</span></span> <span data-ttu-id="c72d8-187">使用<xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType>方法如果你想要执行断言版本中的可生成。</span><span class="sxs-lookup"><span data-stu-id="c72d8-187">Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> method if you want to do assertions in release builds.</span></span> <span data-ttu-id="c72d8-188">有关详细信息，请参阅[托管代码中的断言](/visualstudio/debugger/assertions-in-managed-code)。</span><span class="sxs-lookup"><span data-stu-id="c72d8-188">For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code).</span></span>  
  
 <span data-ttu-id="c72d8-189">通常情况下，<xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%29>方法用于标识程序开发过程的逻辑错误。</span><span class="sxs-lookup"><span data-stu-id="c72d8-189">Typically, the <xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%29> method is used to identify logic errors during program development.</span></span> <span data-ttu-id="c72d8-190"><xref:System.Diagnostics.Debug.Assert%2A> 计算条件。</span><span class="sxs-lookup"><span data-stu-id="c72d8-190"><xref:System.Diagnostics.Debug.Assert%2A> evaluates the condition.</span></span> <span data-ttu-id="c72d8-191">如果结果为`false`，它将指定的诊断消息和详细的消息到发送<xref:System.Diagnostics.Debug.Listeners%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="c72d8-191">If the result is `false`, it sends the specified diagnostic message and detailed message to the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span> <span data-ttu-id="c72d8-192">可以通过添加自定义此行为<xref:System.Diagnostics.TraceListener>，或从中移除<xref:System.Diagnostics.Debug.Listeners%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="c72d8-192">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
 <span data-ttu-id="c72d8-193">当在用户界面模式下运行应用程序时，它将显示一个消息框，显示文件和行号的调用堆栈。</span><span class="sxs-lookup"><span data-stu-id="c72d8-193">When the application runs in user interface mode, it displays a message box that shows the call stack with file and line numbers.</span></span> <span data-ttu-id="c72d8-194">消息框包含三个按钮：**中止**，**重试**，和**忽略**。</span><span class="sxs-lookup"><span data-stu-id="c72d8-194">The message box contains three buttons: **Abort**, **Retry**, and **Ignore**.</span></span> <span data-ttu-id="c72d8-195">单击**中止**按钮终止应用程序。</span><span class="sxs-lookup"><span data-stu-id="c72d8-195">Clicking the **Abort** button terminates the application.</span></span> <span data-ttu-id="c72d8-196">单击**重试**向你发送到调试器中的代码中，如果你的应用程序运行在调试器中，或如果它不是打开调试器。</span><span class="sxs-lookup"><span data-stu-id="c72d8-196">Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not.</span></span> <span data-ttu-id="c72d8-197">单击**忽略**继续在代码中的下一步指令。</span><span class="sxs-lookup"><span data-stu-id="c72d8-197">Clicking **Ignore** continues with the next instruction in the code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c72d8-198">在消息框显示取决于是否存在的<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-198">The display of the message box depends on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="c72d8-199">如果<xref:System.Diagnostics.DefaultTraceListener>不在<xref:System.Diagnostics.Trace.Listeners%2A>集合，消息框不会显示。</span><span class="sxs-lookup"><span data-stu-id="c72d8-199">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="c72d8-200"><xref:System.Diagnostics.DefaultTraceListener>可以删除[&lt;清除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md)、 [&lt;删除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md)，或通过调用<xref:System.Diagnostics.TraceListenerCollection.Clear%2A>方法<xref:System.Diagnostics.Trace.Listeners%2A>属性 (`System.Diagnostics.Trace.Listeners.Clear()`)。</span><span class="sxs-lookup"><span data-stu-id="c72d8-200">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="c72d8-201">你可以更改的行为<xref:System.Diagnostics.DefaultTraceListener>对应于你的应用程序的名称的配置文件中。</span><span class="sxs-lookup"><span data-stu-id="c72d8-201">You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application.</span></span> <span data-ttu-id="c72d8-202">在此文件中，你可以启用和禁用断言消息框或设置<xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="c72d8-202">In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="c72d8-203">配置文件应格式如下：</span><span class="sxs-lookup"><span data-stu-id="c72d8-203">The configuration file should be formatted as follows:</span></span>  
  
```  
<configuration>  
  <system.diagnostics>  
    <assert assertuienabled="true" logfilename="c:\\myFile.log" />  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 <span data-ttu-id="c72d8-204">下面的示例检查是否`type`参数才有效。</span><span class="sxs-lookup"><span data-stu-id="c72d8-204">The following example checks whether the `type` parameter is valid.</span></span> <span data-ttu-id="c72d8-205">如果`type`是`null`，<xref:System.Diagnostics.Trace.Assert%2A>输出两条消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-205">If `type` is `null`, <xref:System.Diagnostics.Trace.Assert%2A> outputs two messages.</span></span>  
  
 [!code-cpp[Classic Debug.Assert2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Assert2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Assert2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Assert2 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Assert2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Assert2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message, string detailMessageFormat, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message, string detailMessageFormat, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean, message As String, detailMessageFormat As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition, System::String ^ message, System::String ^ detailMessageFormat, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessageFormat" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="c72d8-206">要计算的条件表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-206">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="c72d8-207">如果条件为 <see langword="true" />，则不会发送指定的消息，也不显示消息框。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-207">If the condition is <see langword="true" />, the specified messages are not sent and the message box is not displayed.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="c72d8-208">要发送到 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合的消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-208">The message to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span>
          </span>
        </param>
        <param name="detailMessageFormat">
          <span data-ttu-id="c72d8-209">要发送到 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合的复合格式字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-209">The composite format string to send to the <see cref="P:System.Diagnostics.Trace.Listeners" /> collection.</span>
          </span>
          <span data-ttu-id="c72d8-210">该消息包含与零个或多个格式项混合的文本，与 <c>args</c> 数组中的对象相对应。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-210">This message contains text intermixed with zero or more format items, which correspond to objects in the <c>args</c> array.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="c72d8-211">一个对象数组，其中包含零个或多个要设置格式的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-211">An object array that contains zero or more objects to format.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c72d8-212">检查条件；如果条件为 <see langword="false" />，则输出两条指定消息（简单消息和格式化消息），并显示一个消息框，其中会显示调用堆栈。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-212">Checks for a condition; if the condition is <see langword="false" />, outputs two messages (simple and formatted) and displays a message box that shows the call stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c72d8-213">此方法使用的.NET framework 对象的值转换为它的文本表示形式，并将该表示形式嵌入在字符串中。</span><span class="sxs-lookup"><span data-stu-id="c72d8-213">This method uses the  of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</span></span> <span data-ttu-id="c72d8-214">生成的字符串发送到<xref:System.Diagnostics.Trace.Listeners%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="c72d8-214">The resulting string is sent to the <xref:System.Diagnostics.Trace.Listeners%2A> collection.</span></span>  
  
 <span data-ttu-id="c72d8-215">默认情况下，<xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType>方法仅在调试版本中有效。</span><span class="sxs-lookup"><span data-stu-id="c72d8-215">By default, the <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> method works only in debug builds.</span></span> <span data-ttu-id="c72d8-216">使用<xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType>方法如果你想要执行断言版本中的可生成。</span><span class="sxs-lookup"><span data-stu-id="c72d8-216">Use the <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> method if you want to do assertions in release builds.</span></span> <span data-ttu-id="c72d8-217">有关详细信息，请参阅[托管代码中的断言](/visualstudio/debugger/assertions-in-managed-code)。</span><span class="sxs-lookup"><span data-stu-id="c72d8-217">For more information, see [Assertions in Managed Code](/visualstudio/debugger/assertions-in-managed-code).</span></span>  
  
 <span data-ttu-id="c72d8-218">通常情况下，<xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%2CSystem.Object%5B%5D%29>方法用于标识程序开发过程的逻辑错误。</span><span class="sxs-lookup"><span data-stu-id="c72d8-218">Typically, the <xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%2CSystem.Object%5B%5D%29> method is used to identify logic errors during program development.</span></span> <span data-ttu-id="c72d8-219"><xref:System.Diagnostics.Debug.Assert%2A> 计算条件。</span><span class="sxs-lookup"><span data-stu-id="c72d8-219"><xref:System.Diagnostics.Debug.Assert%2A> evaluates the condition.</span></span> <span data-ttu-id="c72d8-220">如果结果为`false`、<xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>调用方法和`detailMessageFormat`字符串和`args`数组作为参数传递。</span><span class="sxs-lookup"><span data-stu-id="c72d8-220">If the result is `false`, The <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method is called and the `detailMessageFormat` string and `args` array are passed in as parameters.</span></span> <span data-ttu-id="c72d8-221"><xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%2CSystem.Object%5B%5D%29> 将指定的文本消息和格式化的文本消息然后发送<xref:System.Diagnostics.Debug.Listeners%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="c72d8-221"><xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%2CSystem.Object%5B%5D%29> then sends the specified text message and the formatted text message to the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span> <span data-ttu-id="c72d8-222">可以通过添加自定义此行为<xref:System.Diagnostics.TraceListener>，或从中移除<xref:System.Diagnostics.Debug.Listeners%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="c72d8-222">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
 <span data-ttu-id="c72d8-223">当在用户界面模式下运行应用程序时，它将显示一个消息框，显示文件和行号的调用堆栈。</span><span class="sxs-lookup"><span data-stu-id="c72d8-223">When the application runs in user interface mode, it displays a message box that shows the call stack with file and line numbers.</span></span> <span data-ttu-id="c72d8-224">消息框包含三个按钮：**中止**，**重试**，和**忽略**。</span><span class="sxs-lookup"><span data-stu-id="c72d8-224">The message box contains three buttons: **Abort**, **Retry**, and **Ignore**.</span></span> <span data-ttu-id="c72d8-225">单击**中止**按钮终止应用程序。</span><span class="sxs-lookup"><span data-stu-id="c72d8-225">Clicking the **Abort** button terminates the application.</span></span> <span data-ttu-id="c72d8-226">单击**重试**向你发送到调试器中的代码中，如果你的应用程序运行在调试器中，或如果它不是打开调试器。</span><span class="sxs-lookup"><span data-stu-id="c72d8-226">Clicking **Retry** sends you to the code in the debugger if your application is running in a debugger, or offers to open a debugger if it is not.</span></span> <span data-ttu-id="c72d8-227">单击**忽略**继续在代码中的下一步指令。</span><span class="sxs-lookup"><span data-stu-id="c72d8-227">Clicking **Ignore** continues with the next instruction in the code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c72d8-228">显示消息框是依赖于是否存在<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-228">The display of the message box is dependent on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="c72d8-229">如果<xref:System.Diagnostics.DefaultTraceListener>不在<xref:System.Diagnostics.Trace.Listeners%2A>集合，消息框不会显示。</span><span class="sxs-lookup"><span data-stu-id="c72d8-229">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="c72d8-230"><xref:System.Diagnostics.DefaultTraceListener>可以删除[&lt;清除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md)、 [&lt;删除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md)，或通过调用<xref:System.Diagnostics.TraceListenerCollection.Clear%2A>方法<xref:System.Diagnostics.Trace.Listeners%2A>属性 (`System.Diagnostics.Trace.Listeners.Clear()`)。</span><span class="sxs-lookup"><span data-stu-id="c72d8-230">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="c72d8-231">你可以更改的行为<xref:System.Diagnostics.DefaultTraceListener>对应于你的应用程序的名称的配置文件中。</span><span class="sxs-lookup"><span data-stu-id="c72d8-231">You can change the behavior of the <xref:System.Diagnostics.DefaultTraceListener> in the configuration file that corresponds to the name of your application.</span></span> <span data-ttu-id="c72d8-232">在此文件中，你可以启用和禁用断言消息框或设置<xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="c72d8-232">In this file, you can enable and disable the assert message box or set the <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="c72d8-233">配置文件应格式如下：</span><span class="sxs-lookup"><span data-stu-id="c72d8-233">The configuration file should be formatted as follows:</span></span>  
  
```  
<configuration>  
  <system.diagnostics>  
    <assert assertuienabled="true" logfilename="c:\\myFile.log" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoFlush">
      <MemberSignature Language="C#" Value="public static bool AutoFlush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool AutoFlush" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Debug.AutoFlush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property AutoFlush As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool AutoFlush { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c72d8-234">获取或设置一个值，通过该值指示每次写入后是否应在 <see cref="M:System.Diagnostics.Debug.Flush" /> 上调用 <see cref="P:System.Diagnostics.Debug.Listeners" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-234">Gets or sets a value indicating whether <see cref="M:System.Diagnostics.Debug.Flush" /> should be called on the <see cref="P:System.Diagnostics.Debug.Listeners" /> after every write.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c72d8-235">如果每次写入后在 <see cref="P:System.Diagnostics.Debug.Listeners" /> 上调用 <see cref="M:System.Diagnostics.Debug.Flush" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-235">
              <see langword="true" /> if <see cref="M:System.Diagnostics.Debug.Flush" /> is called on the <see cref="P:System.Diagnostics.Debug.Listeners" /> after every write; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c72d8-236">默认值为 `false`。</span><span class="sxs-lookup"><span data-stu-id="c72d8-236">The default is `false`.</span></span>  
  
 <span data-ttu-id="c72d8-237">刷新流将不会刷新其基础的编码器，除非你明确地调用<xref:System.Diagnostics.Debug.Flush%2A>或<xref:System.Diagnostics.Debug.Close%2A>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-237">Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.Diagnostics.Debug.Flush%2A> or <xref:System.Diagnostics.Debug.Close%2A>.</span></span> <span data-ttu-id="c72d8-238">设置<xref:System.Diagnostics.Debug.AutoFlush%2A>到`true`意味着数据从缓冲区刷新到流中，但不是会刷新编码器状态。</span><span class="sxs-lookup"><span data-stu-id="c72d8-238">Setting <xref:System.Diagnostics.Debug.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</span></span> <span data-ttu-id="c72d8-239">这将允许编码器，以便它可以正确编码的字符的下一步块保持其状态 （部分字符）。</span><span class="sxs-lookup"><span data-stu-id="c72d8-239">This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</span></span> <span data-ttu-id="c72d8-240">这种情况下会影响 UTF8 和 UTF7 其中某些字符仅后才能进行编码的编码器收到的相邻字符。</span><span class="sxs-lookup"><span data-stu-id="c72d8-240">This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</span></span>  
  
 <span data-ttu-id="c72d8-241">若要设置<xref:System.Diagnostics.Debug.AutoFlush%2A>和<xref:System.Diagnostics.Debug.IndentSize%2A>为<xref:System.Diagnostics.Debug>，还可以编辑你的应用程序的名称相对应的配置文件。</span><span class="sxs-lookup"><span data-stu-id="c72d8-241">To set the <xref:System.Diagnostics.Debug.AutoFlush%2A> and <xref:System.Diagnostics.Debug.IndentSize%2A> for <xref:System.Diagnostics.Debug>, you can also edit the configuration file corresponding to the name of your application.</span></span> <span data-ttu-id="c72d8-242">应按照下面的示例所示格式设置的配置文件。</span><span class="sxs-lookup"><span data-stu-id="c72d8-242">The configuration file should be formatted as shown in the following example.</span></span>  
  
```  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="true" indentsize="7" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="c72d8-243">用于操作与非托管代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-243">for operating with unmanaged code.</span>
          </span>
          <span data-ttu-id="c72d8-244">要求值<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-244">Demand value <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public static void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Close" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c72d8-245">刷新输出缓冲区，然后对所有 <see cref="P:System.Diagnostics.Debug.Listeners" /> 调用 <see langword="Close" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-245">Flushes the output buffer and then calls the <see langword="Close" /> method on each of the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c72d8-246">使用此方法时输出转到文件，如到<xref:System.Diagnostics.TextWriterTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-246">Use this method when the output goes to a file, such as to the <xref:System.Diagnostics.TextWriterTraceListener>.</span></span>  
  
 <span data-ttu-id="c72d8-247">刷新流将不会刷新其基础的编码器，除非你明确地调用<xref:System.Diagnostics.Debug.Flush%2A>或<xref:System.Diagnostics.Debug.Close%2A>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-247">Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.Diagnostics.Debug.Flush%2A> or <xref:System.Diagnostics.Debug.Close%2A>.</span></span> <span data-ttu-id="c72d8-248">设置<xref:System.Diagnostics.Debug.AutoFlush%2A>到`true`意味着数据从缓冲区刷新到流中，但不是会刷新编码器状态。</span><span class="sxs-lookup"><span data-stu-id="c72d8-248">Setting <xref:System.Diagnostics.Debug.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</span></span> <span data-ttu-id="c72d8-249">这将允许编码器，以便它可以正确编码的字符的下一步块保持其状态 （部分字符）。</span><span class="sxs-lookup"><span data-stu-id="c72d8-249">This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</span></span> <span data-ttu-id="c72d8-250">这种情况下会影响 UTF8 和 UTF7 其中某些字符仅后才能进行编码的编码器收到的相邻字符。</span><span class="sxs-lookup"><span data-stu-id="c72d8-250">This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c72d8-251">下面的示例创建<xref:System.Diagnostics.TextWriterTraceListener>名为`myTextListener`。</span><span class="sxs-lookup"><span data-stu-id="c72d8-251">The following example creates a <xref:System.Diagnostics.TextWriterTraceListener> named `myTextListener`.</span></span> <span data-ttu-id="c72d8-252">`myTextListener` 使用<xref:System.IO.StreamWriter>调用`myOutputWriter`要写入到名为的文件`TestFile.txt`。</span><span class="sxs-lookup"><span data-stu-id="c72d8-252">`myTextListener` uses a <xref:System.IO.StreamWriter> called `myOutputWriter` to write to a file named `TestFile.txt`.</span></span> <span data-ttu-id="c72d8-253">该示例创建的文件、 流和文本编写器，一行文本写入文件，然后刷新并关闭输出。</span><span class="sxs-lookup"><span data-stu-id="c72d8-253">The example creates the file, stream, and text writer, writes one line of text to the file, and then flushes and closes the output.</span></span>  
  
 [!code-cpp[Classic Debug.Close Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Close Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Close Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Close Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="c72d8-254">用于操作与非托管代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-254">for operating with unmanaged code.</span>
          </span>
          <span data-ttu-id="c72d8-255">要求值<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-255">Demand value <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fail">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c72d8-256">发出一条错误消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-256">Emits an error message.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public static void Fail (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fail(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Fail(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Fail (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Fail(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="c72d8-257">要发出的消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-257">A message to emit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c72d8-258">发出指定的错误消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-258">Emits the specified error message.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c72d8-259">默认行为是<xref:System.Diagnostics.DefaultTraceListener>将消息输出到一个消息框时在用户界面模式并对其运行该应用程序<xref:System.Diagnostics.TraceListener>实例<xref:System.Diagnostics.Debug.Listeners%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="c72d8-259">The default behavior is that the <xref:System.Diagnostics.DefaultTraceListener> outputs the message to a message box when the application is running in user interface mode and to the <xref:System.Diagnostics.TraceListener> instances in the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c72d8-260">显示消息框是依赖于是否存在<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-260">The display of the message box is dependent on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="c72d8-261">如果<xref:System.Diagnostics.DefaultTraceListener>不在<xref:System.Diagnostics.Trace.Listeners%2A>集合，消息框不会显示。</span><span class="sxs-lookup"><span data-stu-id="c72d8-261">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="c72d8-262"><xref:System.Diagnostics.DefaultTraceListener>可以删除[&lt;清除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md)、 [&lt;删除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md)，或通过调用<xref:System.Diagnostics.TraceListenerCollection.Clear%2A>方法<xref:System.Diagnostics.Trace.Listeners%2A>属性 (`System.Diagnostics.Trace.Listeners.Clear()`)。</span><span class="sxs-lookup"><span data-stu-id="c72d8-262">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="c72d8-263">可以通过添加自定义此行为<xref:System.Diagnostics.TraceListener>，或从中移除<xref:System.Diagnostics.Debug.Listeners%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="c72d8-263">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c72d8-264">下面的示例使用<xref:System.Diagnostics.Debug.Fail%2A>方法以在异常处理期间打印消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-264">The following example uses the <xref:System.Diagnostics.Debug.Fail%2A> method to print a message during exception handling.</span></span>  
  
 [!code-cpp[Classic Debug.Fail Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Fail Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Fail Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail Example/VB/source.vb#1)]  
  
 <span data-ttu-id="c72d8-265">你还可以使用<xref:System.Diagnostics.Debug.Fail%2A>switch 语句中的方法。</span><span class="sxs-lookup"><span data-stu-id="c72d8-265">You can also use the <xref:System.Diagnostics.Debug.Fail%2A> method in a switch statement.</span></span>  
  
 [!code-cpp[Classic Debug.Fail Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Debug.Fail Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CS/source.cs#2)]
 [!code-vb[Classic Debug.Fail Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public static void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fail(string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Fail(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Fail (message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Fail(System::String ^ message, System::String ^ detailMessage);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="c72d8-266">要发出的消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-266">A message to emit.</span>
          </span>
        </param>
        <param name="detailMessage">
          <span data-ttu-id="c72d8-267">要发出的详细消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-267">A detailed message to emit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c72d8-268">发出错误消息及详细的错误消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-268">Emits an error message and a detailed error message.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c72d8-269">默认行为是<xref:System.Diagnostics.DefaultTraceListener>将消息输出到一个消息框时在用户界面模式并对其运行该应用程序<xref:System.Diagnostics.TraceListener>实例<xref:System.Diagnostics.Debug.Listeners%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="c72d8-269">The default behavior is that the <xref:System.Diagnostics.DefaultTraceListener> outputs the message to a message box when the application is running in user interface mode and to the <xref:System.Diagnostics.TraceListener> instances in the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c72d8-270">显示消息框是依赖于是否存在<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-270">The display of the message box is dependent on the presence of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="c72d8-271">如果<xref:System.Diagnostics.DefaultTraceListener>不在<xref:System.Diagnostics.Trace.Listeners%2A>集合，消息框不会显示。</span><span class="sxs-lookup"><span data-stu-id="c72d8-271">If the <xref:System.Diagnostics.DefaultTraceListener> is not in the <xref:System.Diagnostics.Trace.Listeners%2A> collection, the message box is not displayed.</span></span> <span data-ttu-id="c72d8-272"><xref:System.Diagnostics.DefaultTraceListener>可以删除[&lt;清除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md)、 [&lt;删除&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md)，或通过调用<xref:System.Diagnostics.TraceListenerCollection.Clear%2A>方法<xref:System.Diagnostics.Trace.Listeners%2A>属性 (`System.Diagnostics.Trace.Listeners.Clear()`)。</span><span class="sxs-lookup"><span data-stu-id="c72d8-272">The <xref:System.Diagnostics.DefaultTraceListener> can be removed by the [&lt;clear&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), the [&lt;remove&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), or by calling the <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> method on the <xref:System.Diagnostics.Trace.Listeners%2A> property (`System.Diagnostics.Trace.Listeners.Clear()`).</span></span>  
  
 <span data-ttu-id="c72d8-273">可以通过添加自定义此行为<xref:System.Diagnostics.TraceListener>，或从中移除<xref:System.Diagnostics.Debug.Listeners%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="c72d8-273">You can customize this behavior by adding a <xref:System.Diagnostics.TraceListener> to, or removing one from, the <xref:System.Diagnostics.Debug.Listeners%2A> collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c72d8-274">下面的示例使用<xref:System.Diagnostics.Debug.Fail%2A>方法以在异常处理期间打印消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-274">The following example uses the <xref:System.Diagnostics.Debug.Fail%2A> method to print a message during exception handling.</span></span>  
  
 [!code-cpp[Classic Debug.Fail1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Fail1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Fail1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/VB/source.vb#1)]  
  
 <span data-ttu-id="c72d8-275">你还可以使用<xref:System.Diagnostics.Debug.Fail%2A>switch 语句中的方法。</span><span class="sxs-lookup"><span data-stu-id="c72d8-275">You can also use the <xref:System.Diagnostics.Debug.Fail%2A> method in a switch statement.</span></span>  
  
 [!code-cpp[Classic Debug.Fail1 Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Debug.Fail1 Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CS/source.cs#2)]
 [!code-vb[Classic Debug.Fail1 Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public static void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c72d8-276">刷新输出缓冲区并使放入缓冲区的数据写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-276">Flushes the output buffer and causes buffered data to write to the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c72d8-277">刷新流将不会刷新其基础的编码器，除非你明确地调用<xref:System.Diagnostics.Debug.Flush%2A>或<xref:System.Diagnostics.Debug.Close%2A>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-277">Flushing the stream will not flush its underlying encoder unless you explicitly call <xref:System.Diagnostics.Debug.Flush%2A> or <xref:System.Diagnostics.Debug.Close%2A>.</span></span> <span data-ttu-id="c72d8-278">设置<xref:System.Diagnostics.Debug.AutoFlush%2A>到`true`意味着数据从缓冲区刷新到流中，但不是会刷新编码器状态。</span><span class="sxs-lookup"><span data-stu-id="c72d8-278">Setting <xref:System.Diagnostics.Debug.AutoFlush%2A> to `true` means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed.</span></span> <span data-ttu-id="c72d8-279">这将允许编码器，以便它可以正确编码的字符的下一步块保持其状态 （部分字符）。</span><span class="sxs-lookup"><span data-stu-id="c72d8-279">This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly.</span></span> <span data-ttu-id="c72d8-280">这种情况下会影响 UTF8 和 UTF7 其中某些字符仅后才能进行编码的编码器收到的相邻字符。</span><span class="sxs-lookup"><span data-stu-id="c72d8-280">This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c72d8-281">下面的示例创建<xref:System.Diagnostics.TextWriterTraceListener>名为`myTextListener`。</span><span class="sxs-lookup"><span data-stu-id="c72d8-281">The following example creates a <xref:System.Diagnostics.TextWriterTraceListener> named `myTextListener`.</span></span> <span data-ttu-id="c72d8-282">`myTextListener` 使用<xref:System.IO.FileStream>调用`myFileStream`要写入到名为的文件`TestFile.txt`。</span><span class="sxs-lookup"><span data-stu-id="c72d8-282">`myTextListener` uses a <xref:System.IO.FileStream> called `myFileStream` to write to a file named `TestFile.txt`.</span></span> <span data-ttu-id="c72d8-283">上面的示例创建流，如果存在或创建一个新，一行文本写入文件，并刷新并关闭输出中打开的文件。</span><span class="sxs-lookup"><span data-stu-id="c72d8-283">The example creates the stream, opens the file if it exists or creates a new one, writes one line of text to the file, and then flushes and closes the output.</span></span>  
  
 [!code-cpp[Classic Debug.Close Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Close Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Close Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Close Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public static void Indent ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Indent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Indent ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Indent();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c72d8-284">将当前的 <see cref="P:System.Diagnostics.Debug.IndentLevel" /> 增加 1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-284">Increases the current <see cref="P:System.Diagnostics.Debug.IndentLevel" /> by one.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c72d8-285">下面的示例设置缩进级别，并发出调试消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-285">The following example sets the indent level and emits debugging messages.</span></span>  
  
 [!code-cpp[Classic Debug.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/VB/source.vb#1)]  
  
 <span data-ttu-id="c72d8-286">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c72d8-286">This example produces the following output:</span></span>  
  
```  
  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Debug.Unindent" />
        <altmember cref="P:System.Diagnostics.Debug.IndentLevel" />
        <altmember cref="P:System.Diagnostics.Debug.IndentSize" />
      </Docs>
    </Member>
    <Member MemberName="IndentLevel">
      <MemberSignature Language="C#" Value="public static int IndentLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 IndentLevel" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Debug.IndentLevel" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property IndentLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int IndentLevel { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c72d8-287">获取或设置缩进级别。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-287">Gets or sets the indent level.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c72d8-288">缩进级别。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-288">The indent level.</span>
          </span>
          <span data-ttu-id="c72d8-289">默认值为 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-289">The default is 0.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c72d8-290"><xref:System.Diagnostics.Debug.IndentLevel%2A>属性表示的次数缩进量<xref:System.Diagnostics.Debug.IndentSize%2A>应用。</span><span class="sxs-lookup"><span data-stu-id="c72d8-290">The <xref:System.Diagnostics.Debug.IndentLevel%2A> property represents the number of times the indent of size <xref:System.Diagnostics.Debug.IndentSize%2A> is applied.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c72d8-291">下面的示例设置缩进级别，并发出调试消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-291">The following example sets the indent level and emits debugging messages.</span></span>  
  
 [!code-cpp[Classic Debug.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/VB/source.vb#1)]  
  
 <span data-ttu-id="c72d8-292">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c72d8-292">This example produces the following output:</span></span>  
  
```  
  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Debug.IndentSize" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="IndentSize">
      <MemberSignature Language="C#" Value="public static int IndentSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 IndentSize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Debug.IndentSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property IndentSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int IndentSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c72d8-293">获取或设置缩进的空格数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-293">Gets or sets the number of spaces in an indent.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c72d8-294">缩进的空格数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-294">The number of spaces in an indent.</span>
          </span>
          <span data-ttu-id="c72d8-295">默认值为四。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-295">The default is four.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c72d8-296">A<xref:System.Diagnostics.TextWriterTraceListener>将此数字解释为空格。</span><span class="sxs-lookup"><span data-stu-id="c72d8-296">A <xref:System.Diagnostics.TextWriterTraceListener> interprets this number as spaces.</span></span> <span data-ttu-id="c72d8-297"><xref:System.Diagnostics.EventLogTraceListener>将忽略此值。</span><span class="sxs-lookup"><span data-stu-id="c72d8-297">An <xref:System.Diagnostics.EventLogTraceListener> ignores this value.</span></span>  
  
 <span data-ttu-id="c72d8-298">若要设置<xref:System.Diagnostics.Debug.AutoFlush%2A>和<xref:System.Diagnostics.Debug.IndentSize%2A>为<xref:System.Diagnostics.Debug>，还可以编辑你的应用程序的名称相对应的配置文件。</span><span class="sxs-lookup"><span data-stu-id="c72d8-298">To set the <xref:System.Diagnostics.Debug.AutoFlush%2A> and <xref:System.Diagnostics.Debug.IndentSize%2A> for <xref:System.Diagnostics.Debug>, you can also edit the configuration file corresponding to the name of your application.</span></span> <span data-ttu-id="c72d8-299">应按照下面的示例所示格式设置的配置文件。</span><span class="sxs-lookup"><span data-stu-id="c72d8-299">The configuration file should be formatted as shown in the following example.</span></span>  
  
```  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="true" indentsize="7" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Debug.IndentLevel" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Listeners">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.TraceListenerCollection Listeners { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Diagnostics.TraceListenerCollection Listeners" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Debug.Listeners" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Listeners As TraceListenerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Diagnostics::TraceListenerCollection ^ Listeners { System::Diagnostics::TraceListenerCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.TraceListenerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="c72d8-300">获取监视调试输出的侦听器集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-300">Gets the collection of listeners that is monitoring the debug output.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="c72d8-301">
            <see cref="T:System.Diagnostics.TraceListenerCollection" />，它表示监视该调试输出的 <see cref="T:System.Diagnostics.TraceListener" /> 类型的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-301">A <see cref="T:System.Diagnostics.TraceListenerCollection" /> representing a collection of type <see cref="T:System.Diagnostics.TraceListener" /> that monitors the debug output.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c72d8-302">中的侦听器生成调试输出中的格式化的输出。</span><span class="sxs-lookup"><span data-stu-id="c72d8-302">The listeners produce formatted output from the debug output.</span></span> <span data-ttu-id="c72d8-303">默认情况下，集合包含的实例<xref:System.Diagnostics.DefaultTraceListener>类。</span><span class="sxs-lookup"><span data-stu-id="c72d8-303">By default, the collection contains an instance of the <xref:System.Diagnostics.DefaultTraceListener> class.</span></span> <span data-ttu-id="c72d8-304">若要删除默认的侦听器，调用<xref:System.Diagnostics.TraceListenerCollection.Remove%2A>方法，并将其传递的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-304">To remove the default listener, call the <xref:System.Diagnostics.TraceListenerCollection.Remove%2A> method, and pass it the instance of the <xref:System.Diagnostics.DefaultTraceListener>.</span></span> <span data-ttu-id="c72d8-305">若要将输出重定向到控制台窗口中，添加的实例<xref:System.Diagnostics.ConsoleTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-305">To redirect output to the console window, add an instance of the <xref:System.Diagnostics.ConsoleTraceListener>.</span></span> <span data-ttu-id="c72d8-306">若要将输出重定向到文件或流，将添加的实例<xref:System.Diagnostics.TextWriterTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-306">To redirect output to a file or stream, add an instance of the <xref:System.Diagnostics.TextWriterTraceListener>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c72d8-307"><xref:System.Diagnostics.Debug.Listeners%2A>集合共享两个<xref:System.Diagnostics.Debug>和<xref:System.Diagnostics.Trace>类; 添加到其中一个类的跟踪侦听器将侦听器添加到两。</span><span class="sxs-lookup"><span data-stu-id="c72d8-307">The <xref:System.Diagnostics.Debug.Listeners%2A> collection is shared by both the <xref:System.Diagnostics.Debug> and the <xref:System.Diagnostics.Trace> classes; adding a trace listener to either class adds the listener to both.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c72d8-308">下面的示例创建<xref:System.Diagnostics.TextWriterTraceListener>，输出到控制台屏幕。</span><span class="sxs-lookup"><span data-stu-id="c72d8-308">The following example creates a <xref:System.Diagnostics.TextWriterTraceListener> that outputs to the console screen.</span></span> <span data-ttu-id="c72d8-309">然后代码将添加到新的侦听器<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-309">The code then adds the new listener to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span>  
  
 [!code-cpp[Classic Debug.Listeners Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Listeners Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Listeners Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Listeners Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Listeners Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Listeners Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="c72d8-310">用于操作与非托管代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-310">for operating with unmanaged code.</span>
          </span>
          <span data-ttu-id="c72d8-311">要求值<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-311">Demand value <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span>
          </span>
        </permission>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Print">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c72d8-312">将后跟行结束符的消息写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-312">Writes a message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Print(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Print(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Print (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="c72d8-313">要写入的消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-313">The message to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c72d8-314">将后跟行结束符的消息写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-314">Writes a message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c72d8-315">默认的行终止符是回车符后跟换行符。</span><span class="sxs-lookup"><span data-stu-id="c72d8-315">The default line terminator is a carriage return followed by a line feed.</span></span> <span data-ttu-id="c72d8-316">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-316">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Print(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Print(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Print (format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="c72d8-317">一个复合格式字符串，其中包含与零个或多个格式项混合的文本，与 <c>args</c> 数组中的对象相对应。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-317">A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the <c>args</c> array.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="c72d8-318">包含零个或多个要格式化的对象的对象数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-318">An object array containing zero or more objects to format.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c72d8-319">将后跟行结束符的格式化字符串写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-319">Writes a formatted string followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c72d8-320">此方法使用的.NET framework 对象的值转换为它的文本表示形式，并将该表示形式嵌入在字符串中。</span><span class="sxs-lookup"><span data-stu-id="c72d8-320">This method uses the  of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</span></span> <span data-ttu-id="c72d8-321">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-321">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="c72d8-322">
            <paramref name="format" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-322">
              <paramref name="format" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="c72d8-323">
            <paramref name="format" /> 无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-323">
              <paramref name="format" /> is invalid.</span>
          </span>
          <span data-ttu-id="c72d8-324">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-324">-or-</span>
          </span>
          <span data-ttu-id="c72d8-325">表示要设置格式的参数的数字小于零，或者大于等于要设置格式的指定对象的数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-325">The number that indicates an argument to format is less than zero, or greater than or equal to the number of specified objects to format.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Unindent">
      <MemberSignature Language="C#" Value="public static void Unindent ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unindent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Unindent" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Unindent ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unindent();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c72d8-326">将当前的 <see cref="P:System.Diagnostics.Debug.IndentLevel" /> 减少 1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-326">Decreases the current <see cref="P:System.Diagnostics.Debug.IndentLevel" /> by one.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c72d8-327">下面的示例设置缩进级别，并发出调试消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-327">The following example sets the indent level and emits debugging messages.</span></span>  
  
 [!code-cpp[Classic Debug.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/VB/source.vb#1)]  
  
 <span data-ttu-id="c72d8-328">该示例产生下面的输出：</span><span class="sxs-lookup"><span data-stu-id="c72d8-328">This example produces the following output:</span></span>  
  
```  
  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Debug.Indent" />
        <altmember cref="P:System.Diagnostics.Debug.IndentLevel" />
        <altmember cref="P:System.Diagnostics.Debug.IndentSize" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c72d8-329">将有关调试的信息写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-329">Writes information about the debug to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Write(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="c72d8-330">一个对象，其名称被发送到 <see cref="P:System.Diagnostics.Debug.Listeners" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-330">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c72d8-331">将对象 <see cref="M:System.Object.ToString" /> 方法的值写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-331">Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c72d8-332">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-332">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="c72d8-333">此方法调用<xref:System.Diagnostics.TraceListener.Write%2A>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="c72d8-333">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c72d8-334">下面的示例创建<xref:System.Diagnostics.TraceSwitch>名为`generalSwitch`。</span><span class="sxs-lookup"><span data-stu-id="c72d8-334">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="c72d8-335">此开关已设置之外的代码示例。</span><span class="sxs-lookup"><span data-stu-id="c72d8-335">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="c72d8-336">如果开关设置为<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，该示例将输出发送给第一个错误消息<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-336">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="c72d8-337">有关将添加到侦听器信息<xref:System.Diagnostics.Debug.Listeners%2A>集合，请参阅<xref:System.Diagnostics.TraceListenerCollection>类。</span><span class="sxs-lookup"><span data-stu-id="c72d8-337">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="c72d8-338">然后，如果<xref:System.Diagnostics.TraceLevel>设置为`Verbose`，该示例将输出与第一条消息位于同一行上的第二个错误消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-338">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="c72d8-339">行结束符遵循第二条消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-339">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="c72d8-340">要写入的消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-340">A message to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c72d8-341">将消息写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-341">Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c72d8-342">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-342">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="c72d8-343">此方法调用<xref:System.Diagnostics.TraceListener.Write%2A>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="c72d8-343">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c72d8-344">下面的示例创建<xref:System.Diagnostics.TraceSwitch>名为`generalSwitch`。</span><span class="sxs-lookup"><span data-stu-id="c72d8-344">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="c72d8-345">此开关已设置之外的代码示例。</span><span class="sxs-lookup"><span data-stu-id="c72d8-345">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="c72d8-346">如果开关设置为<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，该示例将输出发送给第一个错误消息<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-346">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="c72d8-347">有关将添加到侦听器信息<xref:System.Diagnostics.Debug.Listeners%2A>集合，请参阅<xref:System.Diagnostics.TraceListenerCollection>类。</span><span class="sxs-lookup"><span data-stu-id="c72d8-347">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="c72d8-348">然后，如果<xref:System.Diagnostics.TraceLevel>设置为`Verbose`，该示例将输出与第一条消息位于同一行上的第二个错误消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-348">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="c72d8-349">行结束符遵循第二条消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-349">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Write(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Object ^ value, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="c72d8-350">一个对象，其名称被发送到 <see cref="P:System.Diagnostics.Debug.Listeners" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-350">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </param>
        <param name="category">
          <span data-ttu-id="c72d8-351">用于组织输出的类别名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-351">A category name used to organize the output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c72d8-352">将类别名称和对象的 <see cref="M:System.Object.ToString" /> 方法的值写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-352">Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c72d8-353">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-353">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="c72d8-354">使用`category`消息输出到组的参数。</span><span class="sxs-lookup"><span data-stu-id="c72d8-354">Use the `category` parameter to group output messages.</span></span>  
  
 <span data-ttu-id="c72d8-355">此方法调用<xref:System.Diagnostics.TraceListener.Write%2A>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="c72d8-355">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c72d8-356">下面的示例创建<xref:System.Diagnostics.TraceSwitch>名为`generalSwitch`。</span><span class="sxs-lookup"><span data-stu-id="c72d8-356">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="c72d8-357">此开关已设置之外的代码示例。</span><span class="sxs-lookup"><span data-stu-id="c72d8-357">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="c72d8-358">如果开关设置为<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，该示例将输出发送给第一个错误消息<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-358">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="c72d8-359">有关将添加到侦听器信息<xref:System.Diagnostics.Debug.Listeners%2A>集合，请参阅<xref:System.Diagnostics.TraceListenerCollection>类。</span><span class="sxs-lookup"><span data-stu-id="c72d8-359">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="c72d8-360">然后，如果<xref:System.Diagnostics.TraceLevel>设置为`Verbose`，该示例将输出与第一条消息位于同一行上的第二个错误消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-360">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="c72d8-361">行结束符遵循第二条消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-361">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Write(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ message, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="c72d8-362">要写入的消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-362">A message to write.</span>
          </span>
        </param>
        <param name="category">
          <span data-ttu-id="c72d8-363">用于组织输出的类别名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-363">A category name used to organize the output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c72d8-364">将类别名称和消息写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-364">Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c72d8-365">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-365">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="c72d8-366">使用`category`消息输出到组的参数。</span><span class="sxs-lookup"><span data-stu-id="c72d8-366">Use the `category` parameter to group output messages.</span></span>  
  
 <span data-ttu-id="c72d8-367">此方法调用<xref:System.Diagnostics.TraceListener.Write%2A>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="c72d8-367">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c72d8-368">下面的示例创建<xref:System.Diagnostics.TraceSwitch>名为`generalSwitch`。</span><span class="sxs-lookup"><span data-stu-id="c72d8-368">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="c72d8-369">此开关已设置之外的代码示例。</span><span class="sxs-lookup"><span data-stu-id="c72d8-369">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="c72d8-370">如果开关设置为<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，该示例将输出发送给第一个错误消息<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-370">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="c72d8-371">有关将添加到侦听器信息<xref:System.Diagnostics.Debug.Listeners%2A>集合，请参阅<xref:System.Diagnostics.TraceListenerCollection>类。</span><span class="sxs-lookup"><span data-stu-id="c72d8-371">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="c72d8-372">然后，如果<xref:System.Diagnostics.TraceLevel>设置为`Verbose`，该示例将输出与第一条消息位于同一行上的第二个错误消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-372">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="c72d8-373">行结束符遵循第二条消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-373">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteIf">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c72d8-374">如果条件为 <see langword="true" />，则将有关调试的信息写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-374">Writes information about the debug to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="c72d8-375">要计算的条件表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-375">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="c72d8-376">如果条件为 <see langword="true" />，则将值写入集合中的跟踪侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-376">If the condition is <see langword="true" />, the value is written to the trace listeners in the collection.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="c72d8-377">一个对象，其名称被发送到 <see cref="P:System.Diagnostics.Debug.Listeners" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-377">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c72d8-378">如果条件为 <see langword="true" />，则向 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器写入对象的 <see cref="M:System.Object.ToString" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-378">Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c72d8-379">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-379">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="c72d8-380">此方法调用<xref:System.Diagnostics.TraceListener.Write%2A>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="c72d8-380">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c72d8-381">下面的示例创建<xref:System.Diagnostics.TraceSwitch>名为`generalSwitch`。</span><span class="sxs-lookup"><span data-stu-id="c72d8-381">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="c72d8-382">此开关已设置之外的代码示例。</span><span class="sxs-lookup"><span data-stu-id="c72d8-382">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="c72d8-383">如果开关设置为<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，该示例将输出值参数的第一个名称<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-383">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first name of the value parameter to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="c72d8-384">有关将添加到侦听器信息<xref:System.Diagnostics.Debug.Listeners%2A>集合，请参阅<xref:System.Diagnostics.TraceListenerCollection>类。</span><span class="sxs-lookup"><span data-stu-id="c72d8-384">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="c72d8-385">然后，如果<xref:System.Diagnostics.TraceLevel>设置为`Verbose`，该示例将输出与第一条消息位于同一行中的消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-385">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs a message on the same line as the first message.</span></span> <span data-ttu-id="c72d8-386">行结束符遵循第二条消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-386">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteIf1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteIf1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteIf1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="c72d8-387">可以通过使用检测应用程序性能的影响最小化<see langword="If...Then" />语句而不是使用<see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />语句。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-387">You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> statements.</span>
            </span>
            <span data-ttu-id="c72d8-388">下面的两个代码示例将相同的调试消息发送。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-388">The following two code examples send the same debugging message.</span>
            </span>
            <span data-ttu-id="c72d8-389">但是，第一个示例是要快得多当跟踪处于关闭状态，因为如果<c>mySwitch.TraceError</c>计算结果为<see langword="false" />，不调用<see cref="M:System.Diagnostics.Debug.Write(System.String)" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-389">However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.Write(System.String)" />.</span>
            </span>
            <span data-ttu-id="c72d8-390">第二个示例始终调用<see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />，即使当<c>mySwitch.TraceError</c>是<see langword="false" />和不生成任何跟踪输出。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-390">The second example always calls <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced.</span>
            </span>
            <span data-ttu-id="c72d8-391">这可能导致不必要地执行任意复杂的代码。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-391">This can result in unnecessary execution of arbitrarily complex code.</span>
            </span>
            <span data-ttu-id="c72d8-392">第一个示例：</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-392">First example:</span>
            </span>  
  
```  
if(mySwitch.TraceError)   
    Debug.Write("aNumber = " + aNumber + " out of range");  
```  
  
 <span data-ttu-id="c72d8-393">第二个示例：</span><span class="sxs-lookup"><span data-stu-id="c72d8-393">Second example:</span></span>  
  
```  
Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="c72d8-394">要计算的条件表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-394">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="c72d8-395">如果条件为 <see langword="true" />，则将消息写入集合中的跟踪侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-395">If the condition is <see langword="true" />, the message is written to the trace listeners in the collection.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="c72d8-396">要写入的消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-396">A message to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c72d8-397">如果条件为 <see langword="true" />，则将消息写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-397">Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c72d8-398">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-398">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="c72d8-399">此方法调用<xref:System.Diagnostics.TraceListener.Write%2A>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="c72d8-399">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c72d8-400">下面的示例创建<xref:System.Diagnostics.TraceSwitch>名为`generalSwitch`。</span><span class="sxs-lookup"><span data-stu-id="c72d8-400">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="c72d8-401">此开关已设置之外的代码示例。</span><span class="sxs-lookup"><span data-stu-id="c72d8-401">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="c72d8-402">如果开关设置为<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，该示例将输出发送给第一个错误消息<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-402">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="c72d8-403">有关添加到侦听器<xref:System.Diagnostics.Debug.Listeners%2A>集合，请参阅<xref:System.Diagnostics.TraceListenerCollection>类。</span><span class="sxs-lookup"><span data-stu-id="c72d8-403">For information about adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="c72d8-404">然后，如果<xref:System.Diagnostics.TraceLevel>设置为`Verbose`，该示例将输出与第一条消息位于同一行上的第二个错误消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-404">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="c72d8-405">行结束符遵循第二条消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-405">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteIf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteIf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteIf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="c72d8-406">可以通过使用检测应用程序性能的影响最小化<see langword="If...Then" />语句而不是使用<see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />语句。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-406">You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> statements.</span>
            </span>
            <span data-ttu-id="c72d8-407">下面的两个代码示例将相同的调试消息发送。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-407">The following two code examples send the same debugging message.</span>
            </span>
            <span data-ttu-id="c72d8-408">但是，第一个示例是要快得多当跟踪处于关闭状态，因为如果<c>mySwitch.TraceError</c>计算结果为<see langword="false" />，不调用<see cref="M:System.Diagnostics.Debug.Write(System.String)" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-408">However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.Write(System.String)" />.</span>
            </span>
            <span data-ttu-id="c72d8-409">第二个示例始终调用<see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />，即使当<c>mySwitch.TraceError</c>是<see langword="false" />和不生成任何跟踪输出。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-409">The second example always calls <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced.</span>
            </span>
            <span data-ttu-id="c72d8-410">这可能导致不必要地执行任意复杂的代码。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-410">This can result in unnecessary execution of arbitrarily complex code.</span>
            </span>
            <span data-ttu-id="c72d8-411">第一个示例：</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-411">First example:</span>
            </span>  
  
```  
if(mySwitch.TraceError)   
    Debug.Write("aNumber = " + aNumber + " out of range");  
```  
  
 <span data-ttu-id="c72d8-412">第二个示例：</span><span class="sxs-lookup"><span data-stu-id="c72d8-412">Second example:</span></span>  
  
```  
Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::Object ^ value, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="c72d8-413">要计算的条件表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-413">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="c72d8-414">如果条件为 <see langword="true" />，则将类别名称和值写入集合中的跟踪侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-414">If the condition is <see langword="true" />, the category name and value are written to the trace listeners in the collection.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="c72d8-415">一个对象，其名称被发送到 <see cref="P:System.Diagnostics.Debug.Listeners" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-415">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </param>
        <param name="category">
          <span data-ttu-id="c72d8-416">用于组织输出的类别名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-416">A category name used to organize the output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c72d8-417">如果条件为 <see langword="true" />，则向 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器写入类别名称和对象的 <see cref="M:System.Object.ToString" /> 方法值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-417">Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c72d8-418">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-418">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="c72d8-419">`category`参数可以用于输出消息分组。</span><span class="sxs-lookup"><span data-stu-id="c72d8-419">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="c72d8-420">此方法调用<xref:System.Diagnostics.TraceListener.Write%2A>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="c72d8-420">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c72d8-421">下面的示例创建<xref:System.Diagnostics.TraceSwitch>名为`generalSwitch`。</span><span class="sxs-lookup"><span data-stu-id="c72d8-421">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="c72d8-422">此开关已设置之外的代码示例。</span><span class="sxs-lookup"><span data-stu-id="c72d8-422">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="c72d8-423">如果开关设置为<xref:System.Diagnostics.TraceLevel> `Verbose`，该示例将输出的名称`myObject`和`category`到<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-423">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the name of the `myObject` and the `category` to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="c72d8-424">有关将添加到侦听器信息<xref:System.Diagnostics.Debug.Listeners%2A>集合，请参阅<xref:System.Diagnostics.TraceListenerCollection>类。</span><span class="sxs-lookup"><span data-stu-id="c72d8-424">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="c72d8-425">然后，如果<xref:System.Diagnostics.TraceLevel>设置为`Error`或更高版本，该示例将输出与第一条消息位于同一行上的第二个错误消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-425">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="c72d8-426">行结束符遵循第二条消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-426">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteIf3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteIf3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf3 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteIf3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="c72d8-427">可以通过使用检测应用程序性能的影响最小化<see langword="If...Then" />语句而不是使用<see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />语句。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-427">You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> statements.</span>
            </span>
            <span data-ttu-id="c72d8-428">下面的两个代码示例将相同的调试消息发送。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-428">The following two code examples send the same debugging message.</span>
            </span>
            <span data-ttu-id="c72d8-429">但是，第一个示例是要快得多当跟踪处于关闭状态，因为如果<c>mySwitch.TraceError</c>计算结果为<see langword="false" />，不调用<see cref="M:System.Diagnostics.Debug.Write(System.String)" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-429">However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.Write(System.String)" />.</span>
            </span>
            <span data-ttu-id="c72d8-430">第二个示例始终调用<see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />，即使当<c>mySwitch.TraceError</c>是<see langword="false" />和不生成任何跟踪输出。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-430">The second example always calls <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced.</span>
            </span>
            <span data-ttu-id="c72d8-431">这可能导致不必要地执行任意复杂的代码。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-431">This can result in unnecessary execution of arbitrarily complex code.</span>
            </span>
            <span data-ttu-id="c72d8-432">第一个示例：</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-432">First example:</span>
            </span>  
  
```  
if(mySwitch.TraceError)   
    Debug.Write("aNumber = " + aNumber + " out of range");  
```  
  
 <span data-ttu-id="c72d8-433">第二个示例：</span><span class="sxs-lookup"><span data-stu-id="c72d8-433">Second example:</span></span>  
  
```  
Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::String ^ message, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="c72d8-434">要计算的条件表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-434">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="c72d8-435">如果条件为 <see langword="true" />，则将类别名称和消息写入集合中的跟踪侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-435">If the condition is <see langword="true" />, the category name and message are written to the trace listeners in the collection.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="c72d8-436">要写入的消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-436">A message to write.</span>
          </span>
        </param>
        <param name="category">
          <span data-ttu-id="c72d8-437">用于组织输出的类别名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-437">A category name used to organize the output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c72d8-438">如果条件为 <see langword="true" />，则将类别名称和消息写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-438">Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c72d8-439">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-439">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="c72d8-440">`category`参数可以用于输出消息分组。</span><span class="sxs-lookup"><span data-stu-id="c72d8-440">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="c72d8-441">此方法调用<xref:System.Diagnostics.TraceListener.Write%2A?displayProperty=nameWithType>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="c72d8-441">This method calls the <xref:System.Diagnostics.TraceListener.Write%2A?displayProperty=nameWithType> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c72d8-442">下面的示例创建<xref:System.Diagnostics.TraceSwitch>名为`generalSwitch`。</span><span class="sxs-lookup"><span data-stu-id="c72d8-442">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="c72d8-443">此开关已设置之外的代码示例。</span><span class="sxs-lookup"><span data-stu-id="c72d8-443">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="c72d8-444">如果开关设置为<xref:System.Diagnostics.TraceLevel> `Verbose`，该示例将输出发送给第一个错误消息<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-444">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Verbose`, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="c72d8-445">有关将添加到侦听器信息<xref:System.Diagnostics.Debug.Listeners%2A>集合，请参阅<xref:System.Diagnostics.TraceListenerCollection>类。</span><span class="sxs-lookup"><span data-stu-id="c72d8-445">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="c72d8-446">然后，如果<xref:System.Diagnostics.TraceLevel>设置为`Error`或更高版本，该示例将输出与第一条消息位于同一行上的第二个错误消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-446">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Error` or higher, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="c72d8-447">行结束符遵循第二条消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-447">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteIf2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteIf2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf2 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteIf2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="c72d8-448">可以通过使用检测应用程序性能的影响最小化<see langword="If...Then" />语句而不是使用<see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />语句。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-448">You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> statements.</span>
            </span>
            <span data-ttu-id="c72d8-449">下面的两个代码示例将相同的调试消息发送。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-449">The following two code examples send the same debugging message.</span>
            </span>
            <span data-ttu-id="c72d8-450">但是，第一个示例是要快得多当跟踪处于关闭状态，因为如果<c>mySwitch.TraceError</c>计算结果为<see langword="false" />，不调用<see cref="M:System.Diagnostics.Debug.Write(System.String)" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-450">However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.Write(System.String)" />.</span>
            </span>
            <span data-ttu-id="c72d8-451">第二个示例始终调用<see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />，即使当<c>mySwitch.TraceError</c>是<see langword="false" />和不生成任何跟踪输出。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-451">The second example always calls <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced.</span>
            </span>
            <span data-ttu-id="c72d8-452">这可能导致不必要地执行任意复杂的代码。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-452">This can result in unnecessary execution of arbitrarily complex code.</span>
            </span>
            <span data-ttu-id="c72d8-453">第一个示例：</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-453">First example:</span>
            </span>  
  
```  
if(mySwitch.TraceError)   
    Debug.Write("aNumber = " + aNumber + " out of range");  
```  
  
 <span data-ttu-id="c72d8-454">第二个示例：</span><span class="sxs-lookup"><span data-stu-id="c72d8-454">Second example:</span></span>  
  
```  
Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c72d8-455">将有关调试的信息写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-455">Writes information about the debug to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="c72d8-456">一个对象，其名称被发送到 <see cref="P:System.Diagnostics.Debug.Listeners" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-456">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c72d8-457">将对象 <see cref="M:System.Object.ToString" /> 方法的值写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-457">Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c72d8-458">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-458">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="c72d8-459">此方法调用<xref:System.Diagnostics.TraceListener.WriteLine%2A>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="c72d8-459">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c72d8-460">下面的示例创建<xref:System.Diagnostics.TraceSwitch>名为`generalSwitch`。</span><span class="sxs-lookup"><span data-stu-id="c72d8-460">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="c72d8-461">此开关已设置之外的代码示例。</span><span class="sxs-lookup"><span data-stu-id="c72d8-461">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="c72d8-462">如果开关设置为<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，该示例将输出发送给第一个错误消息<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-462">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="c72d8-463">有关将添加到侦听器信息<xref:System.Diagnostics.Debug.Listeners%2A>集合，请参阅<xref:System.Diagnostics.TraceListenerCollection>类。</span><span class="sxs-lookup"><span data-stu-id="c72d8-463">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="c72d8-464">然后，如果<xref:System.Diagnostics.TraceLevel>设置为`Verbose`，该示例将输出与第一条消息位于同一行上的对象的名称。</span><span class="sxs-lookup"><span data-stu-id="c72d8-464">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the name of the object on the same line as the first message.</span></span> <span data-ttu-id="c72d8-465">行结束符遵循第二条消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-465">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLine1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLine1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLine1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="c72d8-466">要写入的消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-466">A message to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c72d8-467">将后跟行结束符的消息写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-467">Writes a message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c72d8-468">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-468">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="c72d8-469">此方法调用<xref:System.Diagnostics.TraceListener.WriteLine%2A>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="c72d8-469">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c72d8-470">下面的示例创建<xref:System.Diagnostics.TraceSwitch>名为`generalSwitch`。</span><span class="sxs-lookup"><span data-stu-id="c72d8-470">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="c72d8-471">此开关已设置之外的代码示例。</span><span class="sxs-lookup"><span data-stu-id="c72d8-471">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="c72d8-472">如果开关设置为<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，该示例将输出发送给第一个错误消息<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-472">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="c72d8-473">有关将添加到侦听器信息<xref:System.Diagnostics.Debug.Listeners%2A>集合，请参阅<xref:System.Diagnostics.TraceListenerCollection>类。</span><span class="sxs-lookup"><span data-stu-id="c72d8-473">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="c72d8-474">然后，如果<xref:System.Diagnostics.TraceLevel>设置为`Verbose`，该示例将输出与第一条消息位于同一行上的第二个错误消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-474">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="c72d8-475">行结束符遵循第二条消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-475">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLine Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLine Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLine Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Object ^ value, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="c72d8-476">一个对象，其名称被发送到 <see cref="P:System.Diagnostics.Debug.Listeners" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-476">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </param>
        <param name="category">
          <span data-ttu-id="c72d8-477">用于组织输出的类别名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-477">A category name used to organize the output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c72d8-478">将类别名称和对象的 <see cref="M:System.Object.ToString" /> 方法的值写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-478">Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c72d8-479">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-479">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="c72d8-480">`category`参数可以用于输出消息分组。</span><span class="sxs-lookup"><span data-stu-id="c72d8-480">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="c72d8-481">此方法调用<xref:System.Diagnostics.TraceListener.WriteLine%2A>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="c72d8-481">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c72d8-482">下面的示例创建<xref:System.Diagnostics.TraceSwitch>名为`generalSwitch`。</span><span class="sxs-lookup"><span data-stu-id="c72d8-482">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="c72d8-483">此开关已设置之外的代码示例。</span><span class="sxs-lookup"><span data-stu-id="c72d8-483">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="c72d8-484">如果开关设置为<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，该示例将输出发送给第一个错误消息<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-484">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="c72d8-485">有关将添加到侦听器信息<xref:System.Diagnostics.Debug.Listeners%2A>集合，请参阅<xref:System.Diagnostics.TraceListenerCollection>类。</span><span class="sxs-lookup"><span data-stu-id="c72d8-485">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="c72d8-486">然后，如果<xref:System.Diagnostics.TraceLevel>设置为`Verbose`，该示例将输出与第一条消息位于同一行上的第二个错误消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-486">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="c72d8-487">第二条消息后跟行结束符。</span><span class="sxs-lookup"><span data-stu-id="c72d8-487">The second message is followed by a line terminator.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLine3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLine3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine3 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLine3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">
          <span data-ttu-id="c72d8-488">一个复合格式字符串，其中包含与零个或多个格式项混合的文本，与 <c>args</c> 数组中的对象相对应。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-488">A composite format string that contains text intermixed with zero or more format items, which correspond to objects in the <c>args</c> array.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="c72d8-489">一个对象数组，其中包含零个或多个要设置格式的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-489">An object array that contains zero or more objects to format.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c72d8-490">将后跟行结束符的格式化消息写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-490">Writes a formatted message followed by a line terminator to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c72d8-491">此方法使用的.NET framework 对象的值转换为它的文本表示形式，并将该表示形式嵌入在字符串中。</span><span class="sxs-lookup"><span data-stu-id="c72d8-491">This method uses the  of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string.</span></span>  
  
 <span data-ttu-id="c72d8-492">此方法的语法中的关键字表示的对象数组可以是单个值。</span><span class="sxs-lookup"><span data-stu-id="c72d8-492">The  keyword in the syntax for this method implies that the object array can be a single value.</span></span> <span data-ttu-id="c72d8-493">此规则的例外是<xref:System.String>对象。</span><span class="sxs-lookup"><span data-stu-id="c72d8-493">The exception to this is the <xref:System.String> object.</span></span> <span data-ttu-id="c72d8-494">显式重载优先，因此`arg`单个字符串值将默认为<xref:System.Diagnostics.Debug.WriteLine%28System.String%2CSystem.String%29?displayProperty=nameWithType>重载。</span><span class="sxs-lookup"><span data-stu-id="c72d8-494">Explicit overloads take precedence, so an `arg` value of a single string will default to the <xref:System.Diagnostics.Debug.WriteLine%28System.String%2CSystem.String%29?displayProperty=nameWithType> overload.</span></span>  
  
 <span data-ttu-id="c72d8-495">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-495">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="c72d8-496">此方法调用<xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="c72d8-496">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType> method of the trace listener.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ message, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="c72d8-497">要写入的消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-497">A message to write.</span>
          </span>
        </param>
        <param name="category">
          <span data-ttu-id="c72d8-498">用于组织输出的类别名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-498">A category name used to organize the output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c72d8-499">将类别名称和消息写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-499">Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c72d8-500">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-500">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="c72d8-501">`category`参数可以用于输出消息分组。</span><span class="sxs-lookup"><span data-stu-id="c72d8-501">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="c72d8-502">此方法调用<xref:System.Diagnostics.TraceListener.WriteLine%2A>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="c72d8-502">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c72d8-503">下面的示例创建<xref:System.Diagnostics.TraceSwitch>名为`generalSwitch`。</span><span class="sxs-lookup"><span data-stu-id="c72d8-503">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="c72d8-504">此开关已设置之外的代码示例。</span><span class="sxs-lookup"><span data-stu-id="c72d8-504">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="c72d8-505">如果开关设置为<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，该示例将输出发送给第一个错误消息<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-505">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="c72d8-506">有关将添加到侦听器信息<xref:System.Diagnostics.Debug.Listeners%2A>集合，请参阅<xref:System.Diagnostics.TraceListenerCollection>类。</span><span class="sxs-lookup"><span data-stu-id="c72d8-506">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="c72d8-507">然后，如果<xref:System.Diagnostics.TraceLevel>设置为`Verbose`，该示例将输出的第二个错误消息和`category`上第一条消息所在的行。</span><span class="sxs-lookup"><span data-stu-id="c72d8-507">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message and the `category` on the same line as the first message.</span></span> <span data-ttu-id="c72d8-508">行结束符遵循第二条消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-508">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLine2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLine2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine2 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLine2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLineIf">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="c72d8-509">如果条件为 <see langword="true" />，则将有关调试的信息写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-509">Writes information about the debug to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="c72d8-510">要计算的条件表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-510">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="c72d8-511">如果条件为 <see langword="true" />，则将值写入集合中的跟踪侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-511">If the condition is <see langword="true" />, the value is written to the trace listeners in the collection.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="c72d8-512">一个对象，其名称被发送到 <see cref="P:System.Diagnostics.Debug.Listeners" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-512">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c72d8-513">如果条件为 <see langword="true" />，则向 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器写入对象的 <see cref="M:System.Object.ToString" /> 方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-513">Writes the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c72d8-514">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-514">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="c72d8-515">此方法调用<xref:System.Diagnostics.TraceListener.WriteLine%2A>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="c72d8-515">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c72d8-516">下面的示例创建<xref:System.Diagnostics.TraceSwitch>名为`generalSwitch`。</span><span class="sxs-lookup"><span data-stu-id="c72d8-516">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="c72d8-517">此开关已设置之外的代码示例。</span><span class="sxs-lookup"><span data-stu-id="c72d8-517">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="c72d8-518">如果开关设置为<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，该示例将输出发送给第一个错误消息<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-518">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="c72d8-519">有关将添加到侦听器信息<xref:System.Diagnostics.Debug.Listeners%2A>集合，请参阅<xref:System.Diagnostics.TraceListenerCollection>类。</span><span class="sxs-lookup"><span data-stu-id="c72d8-519">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="c72d8-520">然后，如果<xref:System.Diagnostics.TraceLevel>设置为`Verbose`，该示例将输出与第一条消息位于同一行上的对象的名称。</span><span class="sxs-lookup"><span data-stu-id="c72d8-520">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the name of the object on the same line as the first message.</span></span> <span data-ttu-id="c72d8-521">行结束符遵循第二条消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-521">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLineIf1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLineIf1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLineIf1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="c72d8-522">可以通过使用检测应用程序性能的影响最小化<see langword="If...Then" />语句而不是使用<see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />语句。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-522">You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> statements.</span>
            </span>
            <span data-ttu-id="c72d8-523">下面的两个代码示例将相同的调试消息发送。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-523">The following two code examples send the same debugging message.</span>
            </span>
            <span data-ttu-id="c72d8-524">但是，第一个示例是要快得多当跟踪处于关闭状态，因为如果<c>mySwitch.TraceError</c>计算结果为<see langword="false" />，不调用<see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-524">However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />.</span>
            </span>
            <span data-ttu-id="c72d8-525">第二个示例始终调用<see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />，即使当<c>mySwitch.TraceError</c>是<see langword="false" />和不生成任何跟踪输出。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-525">The second example always calls <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced.</span>
            </span>
            <span data-ttu-id="c72d8-526">这可能导致不必要地执行任意复杂的代码。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-526">This can result in unnecessary execution of arbitrarily complex code.</span>
            </span>
            <span data-ttu-id="c72d8-527">第一个示例：</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-527">First example:</span>
            </span>  
  
```  
if(mySwitch.TraceError)   
    Debug.WriteLine("aNumber = " + aNumber + " out of range");  
```  
  
 <span data-ttu-id="c72d8-528">第二个示例：</span><span class="sxs-lookup"><span data-stu-id="c72d8-528">Second example:</span></span>  
  
```  
Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="c72d8-529">要计算的条件表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-529">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="c72d8-530">如果条件为 <see langword="true" />，则将消息写入集合中的跟踪侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-530">If the condition is <see langword="true" />, the message is written to the trace listeners in the collection.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="c72d8-531">要写入的消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-531">A message to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c72d8-532">如果条件为 <see langword="true" />，则将消息写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-532">Writes a message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c72d8-533">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-533">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="c72d8-534">此方法调用<xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="c72d8-534">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c72d8-535">下面的示例创建<xref:System.Diagnostics.TraceSwitch>名为`generalSwitch`。</span><span class="sxs-lookup"><span data-stu-id="c72d8-535">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="c72d8-536">此开关已设置之外的代码示例。</span><span class="sxs-lookup"><span data-stu-id="c72d8-536">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="c72d8-537">如果开关设置为<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，该示例将输出发送给第一个错误消息<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-537">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="c72d8-538">有关添加到侦听器<xref:System.Diagnostics.Debug.Listeners%2A>集合，请参阅<xref:System.Diagnostics.TraceListenerCollection>类。</span><span class="sxs-lookup"><span data-stu-id="c72d8-538">For information about adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="c72d8-539">然后，如果<xref:System.Diagnostics.TraceLevel>设置为`Verbose`，该示例将输出与第一条消息位于同一行上的第二个错误消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-539">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="c72d8-540">行结束符遵循第二条消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-540">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLineIf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLineIf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLineIf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="c72d8-541">可以通过使用检测应用程序性能的影响最小化<see langword="If...Then" />语句而不是使用<see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />语句。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-541">You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> statements.</span>
            </span>
            <span data-ttu-id="c72d8-542">下面的两个代码示例将相同的调试消息发送。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-542">The following two code examples send the same debugging message.</span>
            </span>
            <span data-ttu-id="c72d8-543">但是，第一个示例是要快得多当跟踪处于关闭状态，因为如果<c>mySwitch.TraceError</c>计算结果为<see langword="false" />，不调用<see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-543">However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />.</span>
            </span>
            <span data-ttu-id="c72d8-544">第二个示例始终调用<see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />，即使当<c>mySwitch.TraceError</c>是<see langword="false" />和不生成任何跟踪输出。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-544">The second example always calls <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced.</span>
            </span>
            <span data-ttu-id="c72d8-545">这可能导致不必要地执行任意复杂的代码。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-545">This can result in unnecessary execution of arbitrarily complex code.</span>
            </span>
            <span data-ttu-id="c72d8-546">第一个示例：</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-546">First example:</span>
            </span>  
  
```  
if(mySwitch.TraceError)   
    Debug.WriteLine("aNumber = " + aNumber + " out of range");  
```  
  
 <span data-ttu-id="c72d8-547">第二个示例：</span><span class="sxs-lookup"><span data-stu-id="c72d8-547">Second example:</span></span>  
  
```  
Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::Object ^ value, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="c72d8-548">要计算的条件表达式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-548">The conditional expression to evaluate.</span>
          </span>
          <span data-ttu-id="c72d8-549">如果条件为 <see langword="true" />，则将类别名称和值写入集合中的跟踪侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-549">If the condition is <see langword="true" />, the category name and value are written to the trace listeners in the collection.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="c72d8-550">一个对象，其名称被发送到 <see cref="P:System.Diagnostics.Debug.Listeners" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-550">An object whose name is sent to the <see cref="P:System.Diagnostics.Debug.Listeners" />.</span>
          </span>
        </param>
        <param name="category">
          <span data-ttu-id="c72d8-551">用于组织输出的类别名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-551">A category name used to organize the output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c72d8-552">如果条件为 <see langword="true" />，则向 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器写入类别名称和对象的 <see cref="M:System.Object.ToString" /> 方法值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-552">Writes a category name and the value of the object's <see cref="M:System.Object.ToString" /> method to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c72d8-553">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-553">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="c72d8-554">`category`参数可以用于输出消息分组。</span><span class="sxs-lookup"><span data-stu-id="c72d8-554">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="c72d8-555">此方法调用<xref:System.Diagnostics.TraceListener.WriteLine%2A>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="c72d8-555">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c72d8-556">下面的示例创建<xref:System.Diagnostics.TraceSwitch>名为`generalSwitch`。</span><span class="sxs-lookup"><span data-stu-id="c72d8-556">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="c72d8-557">此开关已设置之外的代码示例。</span><span class="sxs-lookup"><span data-stu-id="c72d8-557">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="c72d8-558">如果开关设置为<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，该示例将输出发送给第一个错误消息<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-558">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="c72d8-559">有关将添加到侦听器信息<xref:System.Diagnostics.Debug.Listeners%2A>集合，请参阅<xref:System.Diagnostics.TraceListenerCollection>类。</span><span class="sxs-lookup"><span data-stu-id="c72d8-559">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="c72d8-560">然后，如果<xref:System.Diagnostics.TraceLevel>设置为`Verbose`，该示例将输出与第一条消息位于同一行上的第二个错误消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-560">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message on the same line as the first message.</span></span> <span data-ttu-id="c72d8-561">行结束符遵循第二条消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-561">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLineIf3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLineIf3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf3 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLineIf3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="c72d8-562">可以通过使用检测应用程序性能的影响最小化<see langword="If...Then" />语句而不是使用<see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />语句。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-562">You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> statements.</span>
            </span>
            <span data-ttu-id="c72d8-563">下面的两个代码示例将相同的调试消息发送。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-563">The following two code examples send the same debugging message.</span>
            </span>
            <span data-ttu-id="c72d8-564">但是，第一个示例是要快得多当跟踪处于关闭状态，因为如果<c>mySwitch.TraceError</c>计算结果为<see langword="false" />，不调用<see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-564">However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />.</span>
            </span>
            <span data-ttu-id="c72d8-565">第二个示例始终调用<see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />，即使当<c>mySwitch.TraceError</c>是<see langword="false" />和不生成任何跟踪输出。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-565">The second example always calls <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced.</span>
            </span>
            <span data-ttu-id="c72d8-566">这可能导致不必要地执行任意复杂的代码。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-566">This can result in unnecessary execution of arbitrarily complex code.</span>
            </span>
            <span data-ttu-id="c72d8-567">第一个示例：</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-567">First example:</span>
            </span>  
  
```  
if(mySwitch.TraceError)   
    Debug.WriteLine("aNumber = " + aNumber + " out of range");  
```  
  
 <span data-ttu-id="c72d8-568">第二个示例：</span><span class="sxs-lookup"><span data-stu-id="c72d8-568">Second example:</span></span>  
  
```  
Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::String ^ message, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          <span data-ttu-id="c72d8-569">若要使消息被写入，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-569">
              <see langword="true" /> to cause a message to be written; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="message">
          <span data-ttu-id="c72d8-570">要写入的消息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-570">A message to write.</span>
          </span>
        </param>
        <param name="category">
          <span data-ttu-id="c72d8-571">用于组织输出的类别名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-571">A category name used to organize the output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c72d8-572">如果条件为 <see langword="true" />，则将类别名称和消息写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c72d8-572">Writes a category name and message to the trace listeners in the <see cref="P:System.Diagnostics.Debug.Listeners" /> collection if a condition is <see langword="true" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c72d8-573">默认情况下，则输出写入到的实例<xref:System.Diagnostics.DefaultTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-573">By default, the output is written to an instance of <xref:System.Diagnostics.DefaultTraceListener>.</span></span>  
  
 <span data-ttu-id="c72d8-574">`category`参数可以用于输出消息分组。</span><span class="sxs-lookup"><span data-stu-id="c72d8-574">The `category` parameter can be used to group output messages.</span></span>  
  
 <span data-ttu-id="c72d8-575">此方法调用<xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType>的跟踪侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="c72d8-575">This method calls the <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType> method of the trace listener.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c72d8-576">下面的示例创建<xref:System.Diagnostics.TraceSwitch>名为`generalSwitch`。</span><span class="sxs-lookup"><span data-stu-id="c72d8-576">The following example creates a <xref:System.Diagnostics.TraceSwitch> named `generalSwitch`.</span></span> <span data-ttu-id="c72d8-577">此开关已设置之外的代码示例。</span><span class="sxs-lookup"><span data-stu-id="c72d8-577">This switch is set outside of the code sample.</span></span>  
  
 <span data-ttu-id="c72d8-578">如果开关设置为<xref:System.Diagnostics.TraceLevel>`Error`或更高版本，该示例将输出发送给第一个错误消息<xref:System.Diagnostics.Debug.Listeners%2A>。</span><span class="sxs-lookup"><span data-stu-id="c72d8-578">If the switch is set to the <xref:System.Diagnostics.TraceLevel>`Error` or higher, the example outputs the first error message to the <xref:System.Diagnostics.Debug.Listeners%2A>.</span></span> <span data-ttu-id="c72d8-579">有关将添加到侦听器信息<xref:System.Diagnostics.Debug.Listeners%2A>集合，请参阅<xref:System.Diagnostics.TraceListenerCollection>类。</span><span class="sxs-lookup"><span data-stu-id="c72d8-579">For information on adding a listener to the <xref:System.Diagnostics.Debug.Listeners%2A> collection, see the <xref:System.Diagnostics.TraceListenerCollection> class.</span></span>  
  
 <span data-ttu-id="c72d8-580">然后，如果<xref:System.Diagnostics.TraceLevel>设置为`Verbose`，该示例将输出的第二个错误消息和`category`上第一条消息所在的行。</span><span class="sxs-lookup"><span data-stu-id="c72d8-580">Then, if the <xref:System.Diagnostics.TraceLevel> is set to `Verbose`, the example outputs the second error message and the `category` on the same line as the first message.</span></span> <span data-ttu-id="c72d8-581">行结束符遵循第二条消息。</span><span class="sxs-lookup"><span data-stu-id="c72d8-581">A line terminator follows the second message.</span></span>  
  
 [!code-cpp[Classic Debug.WriteLineIf2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLineIf2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf2 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLineIf2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="c72d8-582">可以通过使用检测应用程序性能的影响最小化<see langword="If...Then" />语句而不是使用<see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />语句。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-582">You can minimize the performance penalty of instrumenting your application by using <see langword="If...Then" /> statements instead of using <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> statements.</span>
            </span>
            <span data-ttu-id="c72d8-583">下面的两个代码示例将相同的调试消息发送。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-583">The following two code examples send the same debugging message.</span>
            </span>
            <span data-ttu-id="c72d8-584">但是，第一个示例是要快得多当跟踪处于关闭状态，因为如果<c>mySwitch.TraceError</c>计算结果为<see langword="false" />，不调用<see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-584">However, the first example is much faster when tracing is off, because if <c>mySwitch.TraceError</c> evaluates to <see langword="false" />, you do not call <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />.</span>
            </span>
            <span data-ttu-id="c72d8-585">第二个示例始终调用<see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />，即使当<c>mySwitch.TraceError</c>是<see langword="false" />和不生成任何跟踪输出。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-585">The second example always calls <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />, even when <c>mySwitch.TraceError</c> is <see langword="false" /> and no tracing output is produced.</span>
            </span>
            <span data-ttu-id="c72d8-586">这可能导致不必要地执行任意复杂的代码。</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-586">This can result in unnecessary execution of arbitrarily complex code.</span>
            </span>
            <span data-ttu-id="c72d8-587">第一个示例：</span>
            <span class="sxs-lookup">
              <span data-stu-id="c72d8-587">First example:</span>
            </span>  
  
```  
if(mySwitch.TraceError)   
    Debug.WriteLine("aNumber = " + aNumber + " out of range");  
```  
  
 <span data-ttu-id="c72d8-588">第二个示例：</span><span class="sxs-lookup"><span data-stu-id="c72d8-588">Second example:</span></span>  
  
```  
Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
  </Members>
</Type>