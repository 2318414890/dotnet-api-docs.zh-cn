<Type Name="ConsoleTraceListener" FullName="System.Diagnostics.ConsoleTraceListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3fb887e69cbce0df3845c3eef1e79b919a3ee40b" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37664953" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ConsoleTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConsoleTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.ConsoleTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsoleTraceListener&#xA;Inherits TextWriterTraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsoleTraceListener : System::Diagnostics::TextWriterTraceListener" />
  <TypeSignature Language="F#" Value="type ConsoleTraceListener = class&#xA;    inherit TextWriterTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>将跟踪或调试输出指引至标准输出或标准错误流。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Diagnostics.ConsoleTraceListener>类以编写跟踪和调试信息到控制台。 您可以初始化<xref:System.Diagnostics.ConsoleTraceListener>对象以将跟踪消息写入<xref:System.Console.Out%2A?displayProperty=nameWithType>流或<xref:System.Console.Error%2A?displayProperty=nameWithType>流。  
  
> [!IMPORTANT]
>  <xref:System.IDisposable> 接口。 在使用完类型后，您应直接或间接释放类型。 若要直接释放类型，调用其<xref:System.IDisposable.Dispose%2A>中的方法`try`/ `catch`块。 若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。 有关详细信息，请参阅中的"使用对象实现 IDisposable"一节<xref:System.IDisposable>接口主题。  
  
 当跟踪，并启用调试输出，则<xref:System.Diagnostics.ConsoleTraceListener>消息将写入到指定<xref:System.Console?displayProperty=nameWithType>流，这类似于消息使用的编写的方式<xref:System.Console.Write%2A?displayProperty=nameWithType>或<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>方法。 在控制台应用程序中，<xref:System.Console?displayProperty=nameWithType>输出和错误流将消息写入到现有的控制台窗口中，或可以将流写入重定向<xref:System.IO.TextWriter?displayProperty=nameWithType>实例。  
  
> [!NOTE]
>  如果不存在控制台，如在基于 Windows 的应用程序，不显示消息写入控制台。  
  
 添加<xref:System.Diagnostics.ConsoleTraceListener>到相应的对象<xref:System.Diagnostics.Trace.Listeners%2A>集合，如果想要通过写入消息<xref:System.Diagnostics.Trace>， <xref:System.Diagnostics.TraceSource>，或<xref:System.Diagnostics.Debug>要写入到控制台。 此外，可以将消息写入到控制台使用直接<xref:System.Diagnostics.Trace.Write%2A?displayProperty=nameWithType>或<xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=nameWithType>方法。  
  
> [!NOTE]
>  <xref:System.Diagnostics.Debug>并<xref:System.Diagnostics.Trace>类将共享相同<xref:System.Diagnostics.TraceListenerCollection>集合中，通过其各自访问`Listeners`属性。 如果添加<xref:System.Diagnostics.ConsoleTraceListener>对象复制到集合并使用其中一个类，其他类将自动使用相同的侦听器。  
  
 大多数编译器启用跟踪和调试输出通过条件性编译标记。 如果不启用跟踪或调试，通过编写的消息<xref:System.Diagnostics.Debug?displayProperty=nameWithType>和<xref:System.Diagnostics.Trace?displayProperty=nameWithType>类有效地将被忽略。 若要启用跟踪和调试输出的语法是编译器特定的;如果使用除 C# 或 Visual Basic 编译器，请参阅您的编译器的文档。  
  
-   若要启用调试 C# 中，添加 **/d:DEBUG**到编译器命令行编译代码，也可以添加标志 **#define DEBUG**到你的文件的顶部。 在 Visual Basic 中，添加 **/d:DEBUG = True**到编译器命令行的标志。  
  
-   若要启用 C# 中的跟踪，请添加 **/d:TRACE**到编译器命令行编译代码，或添加时标志 **#define 跟踪**到你的文件的顶部。 在 Visual Basic 中，添加 **/d:TRACE = True**到编译器命令行的标志。  
  
 您可以添加<xref:System.Diagnostics.ConsoleTraceListener>对象传递给<xref:System.Diagnostics.Trace.Listeners%2A>集合中您的代码，也可以添加<xref:System.Diagnostics.ConsoleTraceListener>对象传递给<xref:System.Diagnostics.Trace.Listeners%2A>通过应用程序配置文件的集合。 添加<xref:System.Diagnostics.ConsoleTraceListener>代码写入消息的特定代码段或执行路径中的对象。 添加<xref:System.Diagnostics.ConsoleTraceListener>定向所有跟踪和调试应用程序配置文件中的对象中的应用程序执行时向控制台消息。  
  
 若要写入跟踪和调试消息的控制台的特定部分的代码，初始化<xref:System.Diagnostics.ConsoleTraceListener>对象，并将其添加到<xref:System.Diagnostics.Trace.Listeners%2A>集合。 检测的代码包含使用消息部分<xref:System.Diagnostics.Trace>或<xref:System.Diagnostics.Debug>类。 在代码部分结束时，删除<xref:System.Diagnostics.ConsoleTraceListener>对象从<xref:System.Diagnostics.Trace.Listeners%2A>集合，并调用<xref:System.Diagnostics.TextWriterTraceListener.Close%2A>方法<xref:System.Diagnostics.ConsoleTraceListener>。  
  
 若要指示所有跟踪和调试信息到控制台应用程序执行时，将添加<xref:System.Diagnostics.ConsoleTraceListener>到应用程序配置文件的对象。 编辑应用程序的名称对应的配置文件或 app.config 文件中的[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]项目。 在此文件中，插入的元素<xref:System.Diagnostics.ConsoleTraceListener>。  
  
 以下示例将添加<xref:System.Diagnostics.ConsoleTraceListener>名为对象`configConsoleListener`到<xref:System.Diagnostics.Trace.Listeners%2A>集合。  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="configConsoleListener"            type="System.Diagnostics.ConsoleTraceListener" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
 </configuration>  
```  
  
 有关在应用程序配置文件中添加跟踪侦听器的详细信息，请参阅[&lt;侦听器&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/listeners-element-for-trace.md)。  
  
   
  
## Examples  
 下面的代码示例实现的类包含具有两个公共方法的控制台应用程序。  
  
 `Main`方法检查命令行参数，并确定应将跟踪输出定向到标准错误流或标准输出流。 `Main` 创建并初始化<xref:System.Diagnostics.ConsoleTraceListener>的指定对象的<xref:System.Console>输出流，并将此对象添加到跟踪侦听器集合。 然后，它调用`WriteEnvironmentInfoToTrace`方法，写入有关正在执行的环境和跟踪输出到跟踪侦听器配置的详细信息。  
  
 运行示例程序时，通过指定的控制台输出流写入环境和跟踪配置详细信息<xref:System.Diagnostics.ConsoleTraceListener>对象。  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#1)]
 [!code-vb[Diagnostics_ConsoleTraceListener#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.TraceListener" />
    <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
    <altmember cref="T:System.Diagnostics.Debug" />
    <altmember cref="T:System.Diagnostics.Trace" />
    <altmember cref="T:System.Console" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Diagnostics.ConsoleTraceListener" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsoleTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsoleTraceListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Diagnostics.ConsoleTraceListener" /> 类的新实例，并将跟踪输出写入标准输出流中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数初始化<xref:System.Diagnostics.ConsoleTraceListener>对象将消息写入到<xref:System.Console.Out%2A?displayProperty=nameWithType>流。 其<xref:System.Diagnostics.TraceListener.Name%2A>属性初始化为空字符串 ("")。  
  
   
  
## Examples  
 下面的代码示例初始化<xref:System.Diagnostics.ConsoleTraceListener>的指定对象的<xref:System.Console>输出流并将其添加到跟踪侦听器集合。 此代码示例是为提供一个更大示例的一部分<xref:System.Diagnostics.ConsoleTraceListener>类。  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#2)]
 [!code-vb[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="P:System.Console.Out" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsoleTraceListener (bool useErrorStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool useErrorStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (useErrorStream As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsoleTraceListener(bool useErrorStream);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.ConsoleTraceListener : bool -&gt; System.Diagnostics.ConsoleTraceListener" Usage="new System.Diagnostics.ConsoleTraceListener useErrorStream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="useErrorStream" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useErrorStream">若为 <see langword="true" />，则将跟踪和调试输出写入标准错误流中；若为 <see langword="false" />，则将跟踪和调试输出写入标准输出流中。</param>
        <summary>初始化 <see cref="T:System.Diagnostics.ConsoleTraceListener" /> 类的一个新实例，并利用一个选项将跟踪输出写入标准输出流或标准错误流中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数初始化<xref:System.Diagnostics.ConsoleTraceListener>对象以将消息写入到任一<xref:System.Console.Out%2A?displayProperty=nameWithType>或<xref:System.Console.Error%2A?displayProperty=nameWithType>流。 其<xref:System.Diagnostics.TraceListener.Name%2A>属性初始化为空字符串 ("")。  
  
   
  
## Examples  
 下面的代码示例初始化<xref:System.Diagnostics.ConsoleTraceListener>的指定对象的<xref:System.Console>输出流并将其添加到跟踪侦听器集合。 此代码示例是为提供一个更大示例的一部分<xref:System.Diagnostics.ConsoleTraceListener>类。  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#2)]
 [!code-vb[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Console" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="consoleTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>关闭到为此跟踪侦听器指定的流的输出。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此指定的流<xref:System.Diagnostics.ConsoleTraceListener>实例 (任一<xref:System.Console.Out%2A?displayProperty=nameWithType>流或<xref:System.Console.Error%2A?displayProperty=nameWithType>流) 已关闭。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>