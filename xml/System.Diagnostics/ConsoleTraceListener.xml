<Type Name="ConsoleTraceListener" FullName="System.Diagnostics.ConsoleTraceListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="653b0096816140df8e14c31875fab5b4d202d7ef" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56362354" /></Metadata><TypeSignature Language="C#" Value="public class ConsoleTraceListener : System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConsoleTraceListener extends System.Diagnostics.TextWriterTraceListener" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.ConsoleTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsoleTraceListener&#xA;Inherits TextWriterTraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsoleTraceListener : System::Diagnostics::TextWriterTraceListener" />
  <TypeSignature Language="F#" Value="type ConsoleTraceListener = class&#xA;    inherit TextWriterTraceListener" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TextWriterTraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="e98a1-101">将跟踪或调试输出指引至标准输出或标准错误流。</span><span class="sxs-lookup"><span data-stu-id="e98a1-101">Directs tracing or debugging output to either the standard output or the standard error stream.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e98a1-102">使用<xref:System.Diagnostics.ConsoleTraceListener>类以编写跟踪和调试信息到控制台。</span><span class="sxs-lookup"><span data-stu-id="e98a1-102">Use the <xref:System.Diagnostics.ConsoleTraceListener> class to write trace and debugging messages to the console.</span></span> <span data-ttu-id="e98a1-103">您可以初始化<xref:System.Diagnostics.ConsoleTraceListener>对象以将跟踪消息写入<xref:System.Console.Out%2A?displayProperty=nameWithType>流或<xref:System.Console.Error%2A?displayProperty=nameWithType>流。</span><span class="sxs-lookup"><span data-stu-id="e98a1-103">You can initialize a <xref:System.Diagnostics.ConsoleTraceListener> object to write trace messages to the <xref:System.Console.Out%2A?displayProperty=nameWithType> stream or to the <xref:System.Console.Error%2A?displayProperty=nameWithType> stream.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="e98a1-104"><xref:System.IDisposable> 接口。</span><span class="sxs-lookup"><span data-stu-id="e98a1-104"><xref:System.IDisposable> interface.</span></span> <span data-ttu-id="e98a1-105">在使用完类型后，您应直接或间接释放类型。</span><span class="sxs-lookup"><span data-stu-id="e98a1-105">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="e98a1-106">若要直接释放类型，调用其<xref:System.IDisposable.Dispose%2A>中的方法`try`/ `catch`块。</span><span class="sxs-lookup"><span data-stu-id="e98a1-106">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a`try`/`catch` block.</span></span> <span data-ttu-id="e98a1-107">若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。</span><span class="sxs-lookup"><span data-stu-id="e98a1-107">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="e98a1-108">有关详细信息，请参阅中的"使用对象实现 IDisposable"一节<xref:System.IDisposable>接口主题。</span><span class="sxs-lookup"><span data-stu-id="e98a1-108">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="e98a1-109">当跟踪，并启用调试输出，则<xref:System.Diagnostics.ConsoleTraceListener>消息将写入到指定<xref:System.Console?displayProperty=nameWithType>流，这类似于消息使用的编写的方式<xref:System.Console.Write%2A?displayProperty=nameWithType>或<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="e98a1-109">When trace and debugging output is enabled, the <xref:System.Diagnostics.ConsoleTraceListener> messages are written to the specified <xref:System.Console?displayProperty=nameWithType> stream, which is similar to the way messages are written with the <xref:System.Console.Write%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> methods.</span></span> <span data-ttu-id="e98a1-110">在控制台应用程序中，<xref:System.Console?displayProperty=nameWithType>输出和错误流将消息写入到现有的控制台窗口中，或可以将流写入重定向<xref:System.IO.TextWriter?displayProperty=nameWithType>实例。</span><span class="sxs-lookup"><span data-stu-id="e98a1-110">In a console application, the <xref:System.Console?displayProperty=nameWithType> output and error streams write messages to the existing console window, or you can redirect the streams to write to a <xref:System.IO.TextWriter?displayProperty=nameWithType> instance.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e98a1-111">如果不存在控制台，如在基于 Windows 的应用程序，不显示消息写入控制台。</span><span class="sxs-lookup"><span data-stu-id="e98a1-111">If the console does not exist, as in a Windows-based application, messages written to the console are not displayed.</span></span>  
  
 <span data-ttu-id="e98a1-112">添加<xref:System.Diagnostics.ConsoleTraceListener>到相应的对象<xref:System.Diagnostics.Trace.Listeners%2A>集合，如果想要通过写入消息<xref:System.Diagnostics.Trace>， <xref:System.Diagnostics.TraceSource>，或<xref:System.Diagnostics.Debug>要写入到控制台。</span><span class="sxs-lookup"><span data-stu-id="e98a1-112">Add a <xref:System.Diagnostics.ConsoleTraceListener> object to the appropriate <xref:System.Diagnostics.Trace.Listeners%2A> collection if you want messages written through <xref:System.Diagnostics.Trace>, <xref:System.Diagnostics.TraceSource>, or <xref:System.Diagnostics.Debug> to be written to the console.</span></span> <span data-ttu-id="e98a1-113">此外，可以将消息写入到控制台使用直接<xref:System.Diagnostics.Trace.Write%2A?displayProperty=nameWithType>或<xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="e98a1-113">In addition, you can write messages directly to the console using the <xref:System.Diagnostics.Trace.Write%2A?displayProperty=nameWithType> or <xref:System.Diagnostics.Trace.WriteLine%2A?displayProperty=nameWithType> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e98a1-114"><xref:System.Diagnostics.Debug>并<xref:System.Diagnostics.Trace>类将共享相同<xref:System.Diagnostics.TraceListenerCollection>集合中，通过其各自访问`Listeners`属性。</span><span class="sxs-lookup"><span data-stu-id="e98a1-114">The <xref:System.Diagnostics.Debug> and <xref:System.Diagnostics.Trace> classes share the same <xref:System.Diagnostics.TraceListenerCollection> collection, accessed through their respective `Listeners` properties.</span></span> <span data-ttu-id="e98a1-115">如果添加<xref:System.Diagnostics.ConsoleTraceListener>对象复制到集合并使用其中一个类，其他类将自动使用相同的侦听器。</span><span class="sxs-lookup"><span data-stu-id="e98a1-115">If you add a <xref:System.Diagnostics.ConsoleTraceListener> object to the collection using one of these classes, the other class automatically uses the same listener.</span></span>  
  
 <span data-ttu-id="e98a1-116">大多数编译器启用跟踪和调试输出通过条件性编译标记。</span><span class="sxs-lookup"><span data-stu-id="e98a1-116">Most compilers enable trace and debug output through conditional compilation flags.</span></span> <span data-ttu-id="e98a1-117">如果不启用跟踪或调试，通过编写的消息<xref:System.Diagnostics.Debug?displayProperty=nameWithType>和<xref:System.Diagnostics.Trace?displayProperty=nameWithType>类有效地将被忽略。</span><span class="sxs-lookup"><span data-stu-id="e98a1-117">If you do not enable tracing or debugging, the messages written through the <xref:System.Diagnostics.Debug?displayProperty=nameWithType> and <xref:System.Diagnostics.Trace?displayProperty=nameWithType> classes are effectively ignored.</span></span> <span data-ttu-id="e98a1-118">若要启用跟踪和调试输出的语法是编译器特定的;如果使用除 C# 或 Visual Basic 编译器，请参阅您的编译器的文档。</span><span class="sxs-lookup"><span data-stu-id="e98a1-118">The syntax to enable trace and debug output is compiler specific; if you use compilers other than C# or Visual Basic, refer to the documentation for your compiler.</span></span>  
  
-   <span data-ttu-id="e98a1-119">若要启用调试 C# 中，添加 **/d:DEBUG**到编译器命令行编译代码，也可以添加标志 **#define DEBUG**到你的文件的顶部。</span><span class="sxs-lookup"><span data-stu-id="e98a1-119">To enable debugging in C#, add the **/d:DEBUG**flag to the compiler command line when you compile your code, or you can add **#define DEBUG** to the top of your file.</span></span> <span data-ttu-id="e98a1-120">在 Visual Basic 中，添加 **/d:DEBUG = True**到编译器命令行的标志。</span><span class="sxs-lookup"><span data-stu-id="e98a1-120">In Visual Basic, add the **/d:DEBUG=True** flag to the compiler command line.</span></span>  
  
-   <span data-ttu-id="e98a1-121">若要启用 C# 中的跟踪，请添加 **/d:TRACE**到编译器命令行编译代码，或添加时标志 **#define 跟踪**到你的文件的顶部。</span><span class="sxs-lookup"><span data-stu-id="e98a1-121">To enable tracing in C#, add the **/d:TRACE** flag to the compiler command line when you compile your code, or add **#define TRACE** to the top of your file.</span></span> <span data-ttu-id="e98a1-122">在 Visual Basic 中，添加 **/d:TRACE = True**到编译器命令行的标志。</span><span class="sxs-lookup"><span data-stu-id="e98a1-122">In Visual Basic, add the **/d:TRACE=True** flag to the compiler command line.</span></span>  
  
 <span data-ttu-id="e98a1-123">您可以添加<xref:System.Diagnostics.ConsoleTraceListener>对象传递给<xref:System.Diagnostics.Trace.Listeners%2A>集合中您的代码，也可以添加<xref:System.Diagnostics.ConsoleTraceListener>对象传递给<xref:System.Diagnostics.Trace.Listeners%2A>通过应用程序配置文件的集合。</span><span class="sxs-lookup"><span data-stu-id="e98a1-123">You can add a <xref:System.Diagnostics.ConsoleTraceListener> object to the <xref:System.Diagnostics.Trace.Listeners%2A> collection in your code, or you can add a <xref:System.Diagnostics.ConsoleTraceListener> object to the <xref:System.Diagnostics.Trace.Listeners%2A> collection through the application configuration file.</span></span> <span data-ttu-id="e98a1-124">添加<xref:System.Diagnostics.ConsoleTraceListener>代码写入消息的特定代码段或执行路径中的对象。</span><span class="sxs-lookup"><span data-stu-id="e98a1-124">Add the <xref:System.Diagnostics.ConsoleTraceListener> object in your code to write messages for a specific code section or execution path.</span></span> <span data-ttu-id="e98a1-125">添加<xref:System.Diagnostics.ConsoleTraceListener>定向所有跟踪和调试应用程序配置文件中的对象中的应用程序执行时向控制台消息。</span><span class="sxs-lookup"><span data-stu-id="e98a1-125">Add the <xref:System.Diagnostics.ConsoleTraceListener> object in your application configuration file to direct all trace and debug messages to the console while the application executes.</span></span>  
  
 <span data-ttu-id="e98a1-126">若要写入跟踪和调试消息的控制台的特定部分的代码，初始化<xref:System.Diagnostics.ConsoleTraceListener>对象，并将其添加到<xref:System.Diagnostics.Trace.Listeners%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="e98a1-126">To write trace and debug messages to the console for a specific section of code, initialize a <xref:System.Diagnostics.ConsoleTraceListener> object and add it to the <xref:System.Diagnostics.Trace.Listeners%2A> collection.</span></span> <span data-ttu-id="e98a1-127">检测的代码包含使用消息部分<xref:System.Diagnostics.Trace>或<xref:System.Diagnostics.Debug>类。</span><span class="sxs-lookup"><span data-stu-id="e98a1-127">Instrument the section of code that contains messages using the <xref:System.Diagnostics.Trace> or <xref:System.Diagnostics.Debug> classes.</span></span> <span data-ttu-id="e98a1-128">在代码部分结束时，删除<xref:System.Diagnostics.ConsoleTraceListener>对象从<xref:System.Diagnostics.Trace.Listeners%2A>集合，并调用<xref:System.Diagnostics.TextWriterTraceListener.Close%2A>方法<xref:System.Diagnostics.ConsoleTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="e98a1-128">At the end of the code section, remove the <xref:System.Diagnostics.ConsoleTraceListener> object from the <xref:System.Diagnostics.Trace.Listeners%2A> collection, and call the <xref:System.Diagnostics.TextWriterTraceListener.Close%2A> method on the <xref:System.Diagnostics.ConsoleTraceListener>.</span></span>  
  
 <span data-ttu-id="e98a1-129">若要指示所有跟踪和调试信息到控制台应用程序执行时，将添加<xref:System.Diagnostics.ConsoleTraceListener>到应用程序配置文件的对象。</span><span class="sxs-lookup"><span data-stu-id="e98a1-129">To direct all trace and debug messages to the console while the application executes, add a <xref:System.Diagnostics.ConsoleTraceListener> object to the application configuration file.</span></span> <span data-ttu-id="e98a1-130">编辑应用程序的名称对应的配置文件或 app.config 文件中的[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]项目。</span><span class="sxs-lookup"><span data-stu-id="e98a1-130">Edit the configuration file that corresponds to the name of your application, or the app.config file in a [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] project.</span></span> <span data-ttu-id="e98a1-131">在此文件中，插入的元素<xref:System.Diagnostics.ConsoleTraceListener>。</span><span class="sxs-lookup"><span data-stu-id="e98a1-131">In this file, insert an element for a <xref:System.Diagnostics.ConsoleTraceListener>.</span></span>  
  
 <span data-ttu-id="e98a1-132">以下示例将添加<xref:System.Diagnostics.ConsoleTraceListener>名为对象`configConsoleListener`到<xref:System.Diagnostics.Trace.Listeners%2A>集合。</span><span class="sxs-lookup"><span data-stu-id="e98a1-132">The following example adds a <xref:System.Diagnostics.ConsoleTraceListener> object named `configConsoleListener` to the <xref:System.Diagnostics.Trace.Listeners%2A> collection.</span></span>  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="false" indentsize="4">  
      <listeners>  
        <add name="configConsoleListener"            type="System.Diagnostics.ConsoleTraceListener" />  
      </listeners>  
    </trace>  
  </system.diagnostics>  
 </configuration>  
```  
  
 <span data-ttu-id="e98a1-133">有关在应用程序配置文件中添加跟踪侦听器的详细信息，请参阅[&lt;侦听器&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/listeners-element-for-trace.md)。</span><span class="sxs-lookup"><span data-stu-id="e98a1-133">For details about adding trace listeners in the application configuration file, see [&lt;listeners&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/listeners-element-for-trace.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e98a1-134">下面的代码示例实现的类包含具有两个公共方法的控制台应用程序。</span><span class="sxs-lookup"><span data-stu-id="e98a1-134">The following code example implements a console application consisting of a class with two public methods.</span></span>  
  
 <span data-ttu-id="e98a1-135">`Main`方法检查命令行参数，并确定应将跟踪输出定向到标准错误流或标准输出流。</span><span class="sxs-lookup"><span data-stu-id="e98a1-135">The `Main` method examines the command-line arguments and determines if trace output should be directed to the standard error stream or the standard output stream.</span></span> <span data-ttu-id="e98a1-136">`Main` 创建并初始化<xref:System.Diagnostics.ConsoleTraceListener>的指定对象的<xref:System.Console>输出流，并将此对象添加到跟踪侦听器集合。</span><span class="sxs-lookup"><span data-stu-id="e98a1-136">`Main` creates and initializes a <xref:System.Diagnostics.ConsoleTraceListener> object for the specified <xref:System.Console> output stream, and adds this object to the trace listener collection.</span></span> <span data-ttu-id="e98a1-137">然后，它调用`WriteEnvironmentInfoToTrace`方法，写入有关正在执行的环境和跟踪输出到跟踪侦听器配置的详细信息。</span><span class="sxs-lookup"><span data-stu-id="e98a1-137">It then calls the `WriteEnvironmentInfoToTrace` method, which writes details about the executing environment and the trace listener configuration to the trace output.</span></span>  
  
 <span data-ttu-id="e98a1-138">运行示例程序时，通过指定的控制台输出流写入环境和跟踪配置详细信息<xref:System.Diagnostics.ConsoleTraceListener>对象。</span><span class="sxs-lookup"><span data-stu-id="e98a1-138">When the example application runs, the environment and trace configuration details are written to the specified console output stream through the <xref:System.Diagnostics.ConsoleTraceListener> object.</span></span>  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#1)]
 [!code-vb[Diagnostics_ConsoleTraceListener#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.TraceListener" />
    <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
    <altmember cref="T:System.Diagnostics.Debug" />
    <altmember cref="T:System.Diagnostics.Trace" />
    <altmember cref="T:System.Console" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e98a1-139">初始化 <see cref="T:System.Diagnostics.ConsoleTraceListener" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="e98a1-139">Initializes a new instance of the <see cref="T:System.Diagnostics.ConsoleTraceListener" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsoleTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsoleTraceListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e98a1-140">初始化 <see cref="T:System.Diagnostics.ConsoleTraceListener" /> 类的新实例，并将跟踪输出写入标准输出流中。</span><span class="sxs-lookup"><span data-stu-id="e98a1-140">Initializes a new instance of the <see cref="T:System.Diagnostics.ConsoleTraceListener" /> class with trace output written to the standard output stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e98a1-141">此构造函数初始化<xref:System.Diagnostics.ConsoleTraceListener>对象将消息写入到<xref:System.Console.Out%2A?displayProperty=nameWithType>流。</span><span class="sxs-lookup"><span data-stu-id="e98a1-141">This constructor initializes a <xref:System.Diagnostics.ConsoleTraceListener> object to write messages to the <xref:System.Console.Out%2A?displayProperty=nameWithType> stream.</span></span> <span data-ttu-id="e98a1-142">其<xref:System.Diagnostics.TraceListener.Name%2A>属性初始化为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="e98a1-142">Its <xref:System.Diagnostics.TraceListener.Name%2A> property is initialized to an empty string ("").</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e98a1-143">下面的代码示例初始化<xref:System.Diagnostics.ConsoleTraceListener>的指定对象的<xref:System.Console>输出流并将其添加到跟踪侦听器集合。</span><span class="sxs-lookup"><span data-stu-id="e98a1-143">The following code example initializes a <xref:System.Diagnostics.ConsoleTraceListener> object for the specified <xref:System.Console> output stream and adds it to the trace listener collection.</span></span> <span data-ttu-id="e98a1-144">此代码示例是为提供一个更大示例的一部分<xref:System.Diagnostics.ConsoleTraceListener>类。</span><span class="sxs-lookup"><span data-stu-id="e98a1-144">This code example is part of a larger example provided for the <xref:System.Diagnostics.ConsoleTraceListener> class.</span></span>  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#2)]
 [!code-vb[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="P:System.Console.Out" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsoleTraceListener (bool useErrorStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool useErrorStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (useErrorStream As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsoleTraceListener(bool useErrorStream);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.ConsoleTraceListener : bool -&gt; System.Diagnostics.ConsoleTraceListener" Usage="new System.Diagnostics.ConsoleTraceListener useErrorStream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="useErrorStream" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useErrorStream"><span data-ttu-id="e98a1-145">若为 <see langword="true" />，则将跟踪和调试输出写入标准错误流中；若为 <see langword="false" />，则将跟踪和调试输出写入标准输出流中。</span><span class="sxs-lookup"><span data-stu-id="e98a1-145"><see langword="true" /> to write tracing and debugging output to the standard error stream; <see langword="false" /> to write tracing and debugging output to the standard output stream.</span></span></param>
        <summary><span data-ttu-id="e98a1-146">初始化 <see cref="T:System.Diagnostics.ConsoleTraceListener" /> 类的一个新实例，并利用一个选项将跟踪输出写入标准输出流或标准错误流中。</span><span class="sxs-lookup"><span data-stu-id="e98a1-146">Initializes a new instance of the <see cref="T:System.Diagnostics.ConsoleTraceListener" /> class with an option to write trace output to the standard output stream or the standard error stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e98a1-147">此构造函数初始化<xref:System.Diagnostics.ConsoleTraceListener>对象以将消息写入到任一<xref:System.Console.Out%2A?displayProperty=nameWithType>或<xref:System.Console.Error%2A?displayProperty=nameWithType>流。</span><span class="sxs-lookup"><span data-stu-id="e98a1-147">This constructor initializes a <xref:System.Diagnostics.ConsoleTraceListener> object to write messages to either the <xref:System.Console.Out%2A?displayProperty=nameWithType> or the <xref:System.Console.Error%2A?displayProperty=nameWithType> stream.</span></span> <span data-ttu-id="e98a1-148">其<xref:System.Diagnostics.TraceListener.Name%2A>属性初始化为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="e98a1-148">Its <xref:System.Diagnostics.TraceListener.Name%2A> property is initialized to an empty string ("").</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e98a1-149">下面的代码示例初始化<xref:System.Diagnostics.ConsoleTraceListener>的指定对象的<xref:System.Console>输出流并将其添加到跟踪侦听器集合。</span><span class="sxs-lookup"><span data-stu-id="e98a1-149">The following code example initializes a <xref:System.Diagnostics.ConsoleTraceListener> object for the specified <xref:System.Console> output stream and adds it to the trace listener collection.</span></span> <span data-ttu-id="e98a1-150">此代码示例是为提供一个更大示例的一部分<xref:System.Diagnostics.ConsoleTraceListener>类。</span><span class="sxs-lookup"><span data-stu-id="e98a1-150">This code example is part of a larger example provided for the <xref:System.Diagnostics.ConsoleTraceListener> class.</span></span>  
  
 [!code-csharp[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/csharp/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/CS/program.cs#2)]
 [!code-vb[Diagnostics_ConsoleTraceListener#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diagnostics_ConsoleTraceListener/VB/consoletrace.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
        <altmember cref="T:System.Diagnostics.TextWriterTraceListener" />
        <altmember cref="T:System.Console" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.ConsoleTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="consoleTraceListener.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TextWriterTraceListener</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e98a1-151">关闭到为此跟踪侦听器指定的流的输出。</span><span class="sxs-lookup"><span data-stu-id="e98a1-151">Closes the output to the stream specified for this trace listener.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e98a1-152">此指定的流<xref:System.Diagnostics.ConsoleTraceListener>实例 (任一<xref:System.Console.Out%2A?displayProperty=nameWithType>流或<xref:System.Console.Error%2A?displayProperty=nameWithType>流) 已关闭。</span><span class="sxs-lookup"><span data-stu-id="e98a1-152">The stream specified for this <xref:System.Diagnostics.ConsoleTraceListener> instance (either the <xref:System.Console.Out%2A?displayProperty=nameWithType> stream or the <xref:System.Console.Error%2A?displayProperty=nameWithType> stream) is closed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>