<Type Name="TraceFilter" FullName="System.Diagnostics.TraceFilter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ca1e3c5e1752dd5229800a883262885ed83e3515" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36673773" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class TraceFilter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TraceFilter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.TraceFilter" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TraceFilter" />
  <TypeSignature Language="C++ CLI" Value="public ref class TraceFilter abstract" />
  <TypeSignature Language="F#" Value="type TraceFilter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>为跟踪筛选器实现提供基类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 跟踪筛选器可以使用跟踪侦听器，以提供一层额外的筛选超出所提供的跟踪开关。 在该侦听器的找不到跟踪侦听器的跟踪筛选器<xref:System.Diagnostics.TraceListener.Filter%2A>属性。 跟踪开关确定是否要发送到跟踪侦听器。 跟踪筛选器，以确定将跟踪信息写入到关联的输出介质中的单个跟踪侦听器。 例如，由每个跟踪筛选器，跟踪可能会写入到控制台中按<xref:System.Diagnostics.ConsoleTraceListener>，但不是属于由事件日志<xref:System.Diagnostics.EventLogTraceListener>。  
  
 继承自的筛选器<xref:System.Diagnostics.TraceFilter>类可以由继承的跟踪侦听器<xref:System.Diagnostics.TraceListener>类来执行筛选所跟踪的事件。 <xref:System.Diagnostics.TraceFilter> 包含单个方法<xref:System.Diagnostics.TraceFilter.ShouldTrace%2A>，其采用事件数据，并返回一个标志，指示是否应跟踪事件。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TraceFilter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceFilter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TraceFilter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Diagnostics.TraceFilter" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldTrace">
      <MemberSignature Language="C#" Value="public abstract bool ShouldTrace (System.Diagnostics.TraceEventCache cache, string source, System.Diagnostics.TraceEventType eventType, int id, string formatOrMessage, object[] args, object data1, object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldTrace(class System.Diagnostics.TraceEventCache cache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string formatOrMessage, object[] args, object data1, object[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.TraceFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ShouldTrace (cache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, formatOrMessage As String, args As Object(), data1 As Object, data As Object()) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool ShouldTrace(System::Diagnostics::TraceEventCache ^ cache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ formatOrMessage, cli::array &lt;System::Object ^&gt; ^ args, System::Object ^ data1, cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="abstract member ShouldTrace : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] * obj * obj[] -&gt; bool" Usage="traceFilter.ShouldTrace (cache, source, eventType, id, formatOrMessage, args, data1, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="formatOrMessage" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="data1" Type="System.Object" />
        <Parameter Name="data" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="cache">包含跟踪事件的信息的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
        <param name="source">源的名称。</param>
        <param name="eventType">
          <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定引发跟踪的事件类型。</param>
        <param name="id">跟踪标识符编号。</param>
        <param name="formatOrMessage">写入由 <c>args</c> 参数指定的变量数组时使用的格式，或者要写入的消息。</param>
        <param name="args">参数对象的数组。</param>
        <param name="data1">跟踪数据对象。</param>
        <param name="data">跟踪数据对象的数组。</param>
        <summary>在派生的类中进行重写时，确定跟踪侦听器是否应跟踪事件。</summary>
        <returns>若要跟踪指定的事件，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何重写<xref:System.Diagnostics.TraceFilter.ShouldTrace%2A>方法，以指示跟踪应时发生的事件的跟踪事件类型是否等于<xref:System.Diagnostics.TraceEventType.Error?displayProperty=nameWithType>。  
  
 [!code-cpp[System.Diagnostics.TraceFilter#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.diagnostics.tracefilter/cpp/source.cpp#2)]
 [!code-csharp[System.Diagnostics.TraceFilter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.diagnostics.tracefilter/cs/source.cs#2)]
 [!code-vb[System.Diagnostics.TraceFilter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.diagnostics.tracefilter/vb/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>此方法的实现应返回<see langword="true" />如果应跟踪由传递的参数指定的事件。否则，该方法应返回<see langword="false" />。例如，可将传递到侦听器仅错误事件的筛选器应检查<paramref name="eventType" />参数和返回<see langword="true" />如果跟踪事件类型级别设置为<see cref="F:System.Diagnostics.TraceEventType.Error" />或更高版本; 否则为它应返回<see langword="false" />。该方法的实现应准备好处理<see langword="null" />中以下参数： <paramref name="args" />， <paramref name="data1" />， <paramref name="data" />， <paramref name="formatOrMessage" />，和<paramref name="cache" />。如果参数值为<see langword="null" />，参数不是该事件的一部分。例如，如果<paramref name="args" />参数是<see langword="null" />，这意味着事件不具有任何参数。如果<paramref name="data" />参数是<see langword="null" />，则会出现一个或没有数据对象。如果没有一个数据对象，它将找到中<paramref name="data1" />参数。单个数据对象和数据对象的数组之间的区别的原因是为了性能。没有理由再创建一个对象数组，如果仅跟踪一个对象，如通常是这种情况。如果<paramref name="data" />参数不是<see langword="null" />、<paramref name="data1" />参数也不能<see langword="null" />。这样就保证<paramref name="source" />参数不是<see langword="null" />而不是空字符串 ("")。该方法的实现可以选择性地引发以下例外:-<see cref="T:System.ArgumentNullException" />如果<paramref name="source" />是<see langword="null" />。 -<see cref="T:System.ArgumentException" />如果<paramref name="eventType" />不是一个<see cref="T:System.Diagnostics.TraceEventType" />值。 -与该方法的实现不相关的异常。例如， <see cref="T:System.Threading.ThreadAbortException" />。</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>