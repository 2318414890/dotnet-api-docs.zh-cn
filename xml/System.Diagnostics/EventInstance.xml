<Type Name="EventInstance" FullName="System.Diagnostics.EventInstance">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1d5923ea6f0adb7e9a29cff95c32d8b297910978" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30399321" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EventInstance" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventInstance extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventInstance" />
  <TypeSignature Language="VB.NET" Value="Public Class EventInstance" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventInstance" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示事件日志项的非特定语言信息。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Diagnostics.EventInstance>来写入事件日志条目使用的资源标识符，而不是一个字符串值。 若要写入事件日志条目，初始化<xref:System.Diagnostics.EventInstance.InstanceId%2A>属性并将传递到实例<xref:System.Diagnostics.EventLog.WriteEvent%2A>方法。 事件查看器使用实例标识符来查找并显示基于当前语言设置的本地化的资源文件中的相应字符串。 需要在编写使用资源标识符的事件前，必须将事件源注册相应的资源文件。  
  
 写入事件时，你可以设置<xref:System.Diagnostics.EventInstance.EntryType%2A>属性指定为该项的事件查看器显示的图标。 你还可以指定<xref:System.Diagnostics.EventInstance.CategoryId%2A>属性指定为该项的事件查看器显示的类别。  
  
 事件查看器将使用到按事件源写入筛选器事件类别。 事件查看器可将类别显示为数字值，或者它可以作为资源标识符使用类别，以显示本地化的类别字符串。  
  
 若要在事件查看器中显示本地化的类别字符串，必须使用事件源使用类别资源文件，配置和设置<xref:System.Diagnostics.EventInstance.CategoryId%2A>类别资源文件中的资源标识符。 如果事件源没有配置的类别资源文件，或指定<xref:System.Diagnostics.EventInstance.CategoryId%2A>不得索引类别资源文件，然后选择事件查看器中的字符串是否显示该条目的数字类别值。 配置类别资源文件，以及数量的类别字符串在资源文件中，使用<xref:System.Diagnostics.EventLogInstaller>或<xref:System.Diagnostics.EventSourceCreationData>类。  
  
 你必须在使用之前注册为事件日志源<xref:System.Diagnostics.EventInstance>要写入的事件<xref:System.Diagnostics.EventLog.WriteEvent%2A>方法。 必须向日志写入本地化的项配置源和源必须定义至少一个消息资源文件。  
  
 在你的应用程序的安装过程中创建新的事件源。 这样，可以为操作系统来刷新其已注册的事件源的列表和它们的配置的时间。 如果操作系统未刷新其事件源的列表，并尝试写入新的源的事件写入操作将失败。 你可以配置新的源使用<xref:System.Diagnostics.EventLogInstaller>，或使用<xref:System.Diagnostics.EventLog.CreateEventSource%2A>方法。 若要创建新的事件源的计算机上，必须具有管理权限。  
  
 有关如何定义事件消息和生成事件日志资源文件的详细信息，请参阅处平台 SDK 文档中的"消息编译器"主题[ http://msdn.microsoft.com ](http://msdn.microsoft.com)。  
  
   
  
## Examples  
 下面的代码示例将一个信息性事件的项，然后重用<xref:System.Diagnostics.EventInstance>要向现有的事件日志写入一个警告事件的条目。 事件消息文本被指定的消息资源文件中使用的资源标识符。 代码示例假定已为源注册相应的消息资源文件。  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 代码示例使用下面的消息文本文件，内置于 EventLogMsgs.dll 的资源库。 消息文本文件是从其创建的消息资源文件的源。 消息文本文件定义的资源标识符和类别、 事件消息和参数插入字符串的文本。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
    <altmember cref="T:System.Diagnostics.EventLogEntry" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用非特定语言的信息初始化 <see cref="T:System.Diagnostics.EventInstance" /> 类的一个新实例以定义事件日志项。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventInstance (long instanceId, int categoryId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 instanceId, int32 categoryId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (instanceId As Long, categoryId As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventInstance(long instanceId, int categoryId);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Int64" />
        <Parameter Name="categoryId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="instanceId">资源标识符，与事件源的消息资源文件中定义的字符串对应。</param>
        <param name="categoryId">资源标识符，与事件源的类别资源文件中定义的字符串对应。如果没有为事件指定类别，则为零。</param>
        <summary>使用事件项的本地化消息和类别文本的指定资源标识符初始化 <see cref="T:System.Diagnostics.EventInstance" /> 类的一个新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要向事件日志中写入信息条目，初始化<xref:System.Diagnostics.EventInstance>和将其传递到<xref:System.Diagnostics.EventLog.WriteEvent%2A>方法。 设置`instanceId`到中相应的事件消息的资源标识符<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>源的属性。 设置`categoryId`为数值类别值或事件类别中的资源标识符<xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>源的属性; 设置`categoryId`为零没有事件类别。 <xref:System.Diagnostics.EventInstance.EntryType%2A>的新实例的属性设置为<xref:System.Diagnostics.EventLogEntryType.Information>默认情况下。  
  
 事件查看器使用的资源标识符来显示源的本地化的资源文件中的相应字符串。 你可以编写使用资源标识符的事件前，必须将源注册相应的资源文件。  
  
   
  
## Examples  
 下面的代码示例将一个信息性事件的项，然后重用<xref:System.Diagnostics.EventInstance>要向现有的事件日志写入一个警告事件的条目。 事件消息文本被指定的消息资源文件中使用的资源标识符。 代码示例假定已为源注册相应的消息资源文件。  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 代码示例使用下面的消息文本文件，内置于 EventLogMsgs.dll 的资源库。 消息文本文件是从其创建的消息资源文件的源。 消息文本文件定义的资源标识符和类别、 事件消息和参数插入字符串的文本。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="instanceId" /> 参数是负值或大于 <see cref="F:System.UInt32.MaxValue" /> 的值。  
  
 或  
  
 <paramref name="categoryId" /> 参数是负值或大于 <see cref="F:System.UInt16.MaxValue" /> 的值。</exception>
        <altmember cref="P:System.Diagnostics.EventInstance.CategoryId" />
        <altmember cref="P:System.Diagnostics.EventInstance.InstanceId" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="T:System.Diagnostics.EventSourceCreationData" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventInstance (long instanceId, int categoryId, System.Diagnostics.EventLogEntryType entryType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 instanceId, int32 categoryId, valuetype System.Diagnostics.EventLogEntryType entryType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32,System.Diagnostics.EventLogEntryType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (instanceId As Long, categoryId As Integer, entryType As EventLogEntryType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventInstance(long instanceId, int categoryId, System::Diagnostics::EventLogEntryType entryType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Int64" />
        <Parameter Name="categoryId" Type="System.Int32" />
        <Parameter Name="entryType" Type="System.Diagnostics.EventLogEntryType" />
      </Parameters>
      <Docs>
        <param name="instanceId">资源标识符，与事件源的消息资源文件中定义的字符串对应。</param>
        <param name="categoryId">资源标识符，与事件源的类别资源文件中定义的字符串对应。如果没有为事件指定类别，则为零。</param>
        <param name="entryType">指示事件类型的 <see cref="T:System.Diagnostics.EventLogEntryType" /> 值。</param>
        <summary>使用事件项的本地化消息和类别文本的指定资源标识符以及指定的事件日志项类型初始化 <see cref="T:System.Diagnostics.EventInstance" /> 类的一个新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要向事件日志中写入条目，初始化<xref:System.Diagnostics.EventInstance>和将其传递到<xref:System.Diagnostics.EventLog.WriteEvent%2A>方法。 设置`instanceId`到中相应的事件消息的资源标识符<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>源的属性。 设置`categoryId`为数值类别值或事件类别中的资源标识符<xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>源的属性; 设置`categoryId`为零没有事件类别。  
  
 事件查看器使用的资源标识符来显示源的本地化的资源文件中的相应字符串。 你可以编写使用资源标识符的事件前，必须将源注册相应的资源文件。  
  
 设置`entryType`到预定义的条目类型之一。 事件查看器使用的事件类型来确定要在事件日志的列表视图中显示的图标。  
  
   
  
## Examples  
 下面的代码示例将两个审核事件项写入事件日志`myNewLog`。 如果本地计算机上不存在，代码示例会创建一个新的事件源和新的事件日志。 事件消息文本被指定的资源文件中使用的资源标识符。  
  
 [!code-cpp[EventLog_WriteEvent#7](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#7)]
 [!code-csharp[EventLog_WriteEvent#7](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#7)]
 [!code-vb[EventLog_WriteEvent#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#7)]  
  
 代码示例使用下面的消息文本文件，内置于 EventLogMsgs.dll 的资源库。 消息文本文件是从其创建的消息资源文件的源。 消息文本文件定义的资源标识符和类别、 事件消息和参数插入字符串的文本。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="entryType" /> 不是有效的 <see cref="T:System.Diagnostics.EventLogEntryType" /> 值。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="instanceId" /> 是负值或大于 <see cref="F:System.UInt32.MaxValue" /> 的值。  
  
 或  
  
 <paramref name="categoryId" /> 是负值或大于 <see cref="F:System.UInt16.MaxValue" /> 的值。</exception>
        <altmember cref="P:System.Diagnostics.EventInstance.CategoryId" />
        <altmember cref="P:System.Diagnostics.EventInstance.InstanceId" />
        <altmember cref="T:System.Diagnostics.EventLogEntry" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="T:System.Diagnostics.EventSourceCreationData" />
      </Docs>
    </Member>
    <Member MemberName="CategoryId">
      <MemberSignature Language="C#" Value="public int CategoryId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CategoryId" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventInstance.CategoryId" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CategoryId { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置指定事件项的应用程序定义类别的资源标识符。</summary>
        <value>数字型类别值或资源标识符，与事件源的类别资源文件中定义的字符串对应。 默认值为零，这意味着将不会为该事件项显示类别。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 事件日志类别是应用程序定义的值，用于帮助筛选事件，或进一步提供有关事件的信息。 例如，你的应用程序可以定义为不同的组件或不同的操作分隔不同类别。  
  
 设置<xref:System.Diagnostics.EventInstance.CategoryId%2A>属性指定为该项的事件查看器显示的类别。 事件查看器可将类别显示为数字值，或者可以使用<xref:System.Diagnostics.EventInstance.CategoryId%2A>作为资源标识符来显示本地化的类别字符串基于当前语言设置。  
  
 若要在事件查看器中显示本地化的类别字符串，必须使用事件源使用类别资源文件，配置和设置<xref:System.Diagnostics.EventInstance.CategoryId%2A>类别资源文件中的资源标识符。 如果事件源没有配置的类别资源文件，或指定<xref:System.Diagnostics.EventInstance.CategoryId%2A>不得索引类别资源文件，然后选择事件查看器中的字符串是否显示该条目的数字类别值。  
  
 需要在编写使用资源标识符的事件类别前，必须将源注册相应的资源文件。 配置类别资源文件，以及数量的类别字符串在资源文件中，使用<xref:System.Diagnostics.EventLogInstaller>或<xref:System.Diagnostics.EventSourceCreationData>类。 当在资源文件中定义类别字符串，必须连续从 1 开始的最多配置编号类别资源标识符<xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>属性值。  
  
 事件类别是可选的。 如果你的应用程序不使用类别，则不要设置<xref:System.Diagnostics.EventInstance.CategoryId%2A>事件日志条目。  
  
 有关如何定义事件消息和生成事件资源文件的详细信息，请参阅处平台 SDK 文档中的"消息编译器"主题[ http://msdn.microsoft.com ](http://msdn.microsoft.com/)。有关在资源文件中定义的事件类别的详细信息，请参阅平台 SDK 中的"事件类别"主题  
  
   
  
## Examples  
 下面的代码示例将一个信息性事件的项，然后重用<xref:System.Diagnostics.EventInstance>要向现有的事件日志写入一个警告事件的条目。 事件消息文本被指定的消息资源文件中使用的资源标识符。 代码示例假定已为源注册相应的消息资源文件。  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 代码示例使用下面的消息文本文件，内置于 EventLogMsgs.dll 的资源库。 消息文本文件是从其创建的消息资源文件的源。 消息文本文件定义的资源标识符和类别、 事件消息和参数插入字符串的文本。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">该属性设置为负值或大于 <see cref="F:System.UInt16.MaxValue" /> 的值。</exception>
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="P:System.Diagnostics.EventLogEntry.CategoryNumber" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="EntryType">
      <MemberSignature Language="C#" Value="public System.Diagnostics.EventLogEntryType EntryType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.EventLogEntryType EntryType" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventInstance.EntryType" />
      <MemberSignature Language="VB.NET" Value="Public Property EntryType As EventLogEntryType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::EventLogEntryType EntryType { System::Diagnostics::EventLogEntryType get(); void set(System::Diagnostics::EventLogEntryType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.EventLogEntryType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置事件日志项的事件类型。</summary>
        <value>指示事件项类型的 <see cref="T:System.Diagnostics.EventLogEntryType" /> 值。 默认值为 <see cref="F:System.Diagnostics.EventLogEntryType.Information" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每个事件是应用程序将指示它在报告事件时的单一类型。 事件查看器使用的事件类型来确定要在事件日志的列表视图中显示的图标。  
  
   
  
## Examples  
 下面的代码示例将一个信息性事件的项，然后重用<xref:System.Diagnostics.EventInstance>要向现有的事件日志写入一个警告事件的条目。 事件消息文本被指定的消息资源文件中使用的资源标识符。 代码示例假定已为源注册相应的消息资源文件。  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 代码示例使用下面的消息文本文件，内置于 EventLogMsgs.dll 的资源库。 消息文本文件是从其创建的消息资源文件的源。 消息文本文件定义的资源标识符和类别、 事件消息和参数插入字符串的文本。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">该属性未设置为有效的 <see cref="T:System.Diagnostics.EventLogEntryType" /> 值。</exception>
        <altmember cref="T:System.Diagnostics.EventLogEntryType" />
        <altmember cref="P:System.Diagnostics.EventLogEntry.EntryType" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="InstanceId">
      <MemberSignature Language="C#" Value="public long InstanceId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 InstanceId" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventInstance.InstanceId" />
      <MemberSignature Language="VB.NET" Value="Public Property InstanceId As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long InstanceId { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置指定事件项的消息文本的资源标识符。</summary>
        <value>资源标识符，与事件源的消息资源文件中定义的字符串对应。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventInstance.InstanceId%2A>属性唯一地标识配置的事件源的事件条目。 在消息资源文件中定义的事件<xref:System.Diagnostics.EventInstance.InstanceId%2A>对应的消息文本文件中的消息定义字段从编译的资源标识符。 你的应用程序可以通过设置写入本地化的事件日志项<xref:System.Diagnostics.EventInstance.InstanceId%2A>的资源标识符。 事件查看器使用<xref:System.Diagnostics.EventInstance.InstanceId%2A>资源标识符来查找并显示本地化的资源文件中的相应字符串基于当前语言设置。 需要在编写使用资源标识符的事件前，必须将源注册相应的资源文件。  
  
 有关如何定义事件消息和生成事件日志资源文件的详细信息，请参阅处平台 SDK 文档中的"消息编译器"主题[ http://msdn.microsoft.com ](http://msdn.microsoft.com/)。有关事件日志的标识符的详细信息，请参阅平台 SDK 中的"事件标识符"主题。  
  
   
  
## Examples  
 下面的代码示例将一个信息性事件的项，然后重用<xref:System.Diagnostics.EventInstance>要向现有的事件日志写入一个警告事件的条目。 事件消息文本被指定的消息资源文件中使用的资源标识符。 代码示例假定已为源注册相应的消息资源文件。  
  
 [!code-cpp[EventLog_WriteEvent#9](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#9)]
 [!code-csharp[EventLog_WriteEvent#9](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#9)]
 [!code-vb[EventLog_WriteEvent#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#9)]  
  
 代码示例使用下面的消息文本文件，内置于 EventLogMsgs.dll 的资源库。 消息文本文件是从其创建的消息资源文件的源。 消息文本文件定义的资源标识符和类别、 事件消息和参数插入字符串的文本。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">该属性设置为负值或大于 <see cref="F:System.UInt32.MaxValue" /> 的值。</exception>
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="P:System.Diagnostics.EventLogEntry.InstanceId" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      </Docs>
    </Member>
  </Members>
</Type>