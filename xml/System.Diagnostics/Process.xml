<Type Name="Process" FullName="System.Diagnostics.Process">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0f3b937515accae8f91569e4cac09306f70365d0" />
    <Meta Name="ms.sourcegitcommit" Value="b15b8cf0f6dbc1504057c88969d9ef4b790891fe" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="05/11/2018" />
    <Meta Name="ms.locfileid" Value="34061724" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Process : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Process extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Process" />
  <TypeSignature Language="VB.NET" Value="Public Class Process&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class Process : System::ComponentModel::Component" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Process</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces></Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Exited")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("StartInfo")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Diagnostics.Design.ProcessDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.MonitoringDescription("Provides access to local and remote processes, enabling starting and stopping of local processes.")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="26150-101">提供对本地和远程进程的访问权限并使你能够启动和停止本地系统进程。</span>
      <span class="sxs-lookup">
        <span data-stu-id="26150-101">Provides access to local and remote processes and enables you to start and stop local system processes.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-102">A<xref:System.Diagnostics.Process>组件提供了对计算机运行的进程的访问。</span><span class="sxs-lookup"><span data-stu-id="26150-102">A <xref:System.Diagnostics.Process> component provides access to a process that is running on a computer.</span></span> <span data-ttu-id="26150-103">进程，简言之，是在正在运行的应用。</span><span class="sxs-lookup"><span data-stu-id="26150-103">A process, in the simplest terms, is a running app.</span></span> <span data-ttu-id="26150-104">线程是操作系统向其分配处理器时间的基本单位。</span><span class="sxs-lookup"><span data-stu-id="26150-104">A thread is the basic unit to which the operating system allocates processor time.</span></span> <span data-ttu-id="26150-105">线程可以执行进程，包括当前正由另一个线程执行的部件的任何的代码的部分。</span><span class="sxs-lookup"><span data-stu-id="26150-105">A thread can execute any part of the code of the process, including parts currently being executed by another thread.</span></span>  
  
 <span data-ttu-id="26150-106"><xref:System.Diagnostics.Process>组件是用于启动、 停止、 控制和监视应用的有用工具。</span><span class="sxs-lookup"><span data-stu-id="26150-106">The <xref:System.Diagnostics.Process> component is a useful tool for starting, stopping, controlling, and monitoring apps.</span></span> <span data-ttu-id="26150-107">你可以使用<xref:System.Diagnostics.Process>组件，以获取正在运行的进程的列表或你可以启动一个新进程。</span><span class="sxs-lookup"><span data-stu-id="26150-107">You can use the <xref:System.Diagnostics.Process> component, to obtain a list of the processes that are running, or you can start a new process.</span></span> <span data-ttu-id="26150-108">A<xref:System.Diagnostics.Process>组件用于访问系统进程。</span><span class="sxs-lookup"><span data-stu-id="26150-108">A <xref:System.Diagnostics.Process> component is used to access system processes.</span></span> <span data-ttu-id="26150-109">后<xref:System.Diagnostics.Process>组件已初始化，所以可以用来获取有关正在运行的进程的信息。</span><span class="sxs-lookup"><span data-stu-id="26150-109">After a <xref:System.Diagnostics.Process> component has been initialized, it can be used to obtain information about the running process.</span></span> <span data-ttu-id="26150-110">此类信息包括的一组线程，加载的模块 （.dll 和.exe 文件），以及使用的进程的内存量等的性能信息。</span><span class="sxs-lookup"><span data-stu-id="26150-110">Such information includes the set of threads, the loaded modules (.dll and .exe files), and performance information such as the amount of memory the process is using.</span></span>  
  
 <span data-ttu-id="26150-111">此类型实现<xref:System.IDisposable>接口。</span><span class="sxs-lookup"><span data-stu-id="26150-111">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="26150-112">在使用完类型后，您应直接或间接释放类型。</span><span class="sxs-lookup"><span data-stu-id="26150-112">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="26150-113">若要直接释放类型，调用其<xref:System.IDisposable.Dispose%2A>中的方法`try` / `catch`块。</span><span class="sxs-lookup"><span data-stu-id="26150-113">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="26150-114">若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。</span><span class="sxs-lookup"><span data-stu-id="26150-114">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="26150-115">有关详细信息，请参阅中的"使用实现 IDisposable 的对象"部分<xref:System.IDisposable>接口主题。</span><span class="sxs-lookup"><span data-stu-id="26150-115">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-116">32 位进程无法访问的 64 位进程的模块。</span><span class="sxs-lookup"><span data-stu-id="26150-116">32-bit processes cannot access the modules of a 64-bit process.</span></span> <span data-ttu-id="26150-117">如果你尝试从 32 位进程中获取有关的 64 位进程的信息，则会出现<xref:System.ComponentModel.Win32Exception>异常。</span><span class="sxs-lookup"><span data-stu-id="26150-117">If you try to get information about a 64-bit process from a 32-bit process, you will get a <xref:System.ComponentModel.Win32Exception> exception.</span></span> <span data-ttu-id="26150-118">一个 64 位进程，另一方面，可以访问是 32 位进程的模块。</span><span class="sxs-lookup"><span data-stu-id="26150-118">A 64-bit process, on the other hand, can access the modules of a 32-bit process.</span></span>  
  
 <span data-ttu-id="26150-119">进程组件获取一组属性有关的信息在一次。</span><span class="sxs-lookup"><span data-stu-id="26150-119">The process component obtains information about a group of properties all at once.</span></span> <span data-ttu-id="26150-120">后<xref:System.Diagnostics.Process>组件获取有关任何组的一个成员的信息，它将缓存该组中的其他属性的值并不获得有关的其他成员的组的新信息，直到你调用<xref:System.Diagnostics.Process.Refresh%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="26150-120">After the <xref:System.Diagnostics.Process> component has obtained information about one member of any group, it will cache the values for the other properties in that group and not obtain new information about the other members of the group until you call the <xref:System.Diagnostics.Process.Refresh%2A> method.</span></span> <span data-ttu-id="26150-121">因此，属性值不一定要比上次调用任何新<xref:System.Diagnostics.Process.Refresh%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="26150-121">Therefore, a property value is not guaranteed to be any newer than the last call to the <xref:System.Diagnostics.Process.Refresh%2A> method.</span></span> <span data-ttu-id="26150-122">组细分与依赖于操作系统。</span><span class="sxs-lookup"><span data-stu-id="26150-122">The group breakdowns are operating-system dependent.</span></span>  
  
 <span data-ttu-id="26150-123">如果你有系统中用引号中声明的路径变量，则必须启动任何进程在该位置中找到时，完全限定该路径。</span><span class="sxs-lookup"><span data-stu-id="26150-123">If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location.</span></span> <span data-ttu-id="26150-124">否则，系统将不到的路径。</span><span class="sxs-lookup"><span data-stu-id="26150-124">Otherwise, the system will not find the path.</span></span> <span data-ttu-id="26150-125">例如，如果`c:\mypath`不在你的路径，并将其使用引号引起来添加： `path = %path%;"c:\mypath"`，必须完全符合中的任何进程`c:\mypath`时启动它。</span><span class="sxs-lookup"><span data-stu-id="26150-125">For example, if `c:\mypath` is not in your path, and you add it using quotation marks: `path = %path%;"c:\mypath"`, you must fully qualify any process in `c:\mypath` when starting it.</span></span>  
  
 <span data-ttu-id="26150-126">由其进程标识符，系统进程唯一标识系统上。</span><span class="sxs-lookup"><span data-stu-id="26150-126">A system process is uniquely identified on the system by its process identifier.</span></span> <span data-ttu-id="26150-127">许多 Windows 资源，如进程也由其句柄，这可能不是在计算机上唯一标识。</span><span class="sxs-lookup"><span data-stu-id="26150-127">Like many Windows resources, a process is also identified by its handle, which might not be unique on the computer.</span></span> <span data-ttu-id="26150-128">句柄是资源的标识符的通用术语。</span><span class="sxs-lookup"><span data-stu-id="26150-128">A handle is the generic term for an identifier of a resource.</span></span> <span data-ttu-id="26150-129">操作系统仍保持进程句柄，可通过<xref:System.Diagnostics.Process.Handle%2A>属性<xref:System.Diagnostics.Process>组件，即使该进程已退出。</span><span class="sxs-lookup"><span data-stu-id="26150-129">The operating system persists the process handle, which is accessed through the <xref:System.Diagnostics.Process.Handle%2A> property of the <xref:System.Diagnostics.Process> component, even when the process has exited.</span></span> <span data-ttu-id="26150-130">因此，可以获取进程的管理信息，如<xref:System.Diagnostics.Process.ExitCode%2A>（通常或者为零表示成功或一个非零错误代码） 和<xref:System.Diagnostics.Process.ExitTime%2A>。</span><span class="sxs-lookup"><span data-stu-id="26150-130">Thus, you can get the process's administrative information, such as the <xref:System.Diagnostics.Process.ExitCode%2A> (usually either zero for success or a nonzero error code) and the <xref:System.Diagnostics.Process.ExitTime%2A>.</span></span> <span data-ttu-id="26150-131">句柄是极其有价值的资源，所以句柄泄漏内存比危害更大。</span><span class="sxs-lookup"><span data-stu-id="26150-131">Handles are an extremely valuable resource, so leaking handles is more virulent than leaking memory.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-132">此类包含链接要求，并且在类级别应用于所有成员继承要求。</span><span class="sxs-lookup"><span data-stu-id="26150-132">This class contains a link demand and an inheritance demand at the class level that applies to all members.</span></span> <span data-ttu-id="26150-133">A<xref:System.Security.SecurityException>直接调用方或派生的类没有完全信任权限时，将引发。</span><span class="sxs-lookup"><span data-stu-id="26150-133">A <xref:System.Security.SecurityException> is thrown when either the immediate caller or the derived class does not have full-trust permission.</span></span> <span data-ttu-id="26150-134">有关安全要求的详细信息，请参阅[链接需求](~/docs/framework/misc/link-demands.md)。</span><span class="sxs-lookup"><span data-stu-id="26150-134">For details about security demands, see [Link Demands](~/docs/framework/misc/link-demands.md).</span></span>  
  
<a name="Core"></a>   
## <a name="includenetcoreincludesnet-core-mdmd-notes"></a>[!INCLUDE[net_core](~/includes/net-core-md.md)]<span data-ttu-id="26150-135"> 说明</span><span class="sxs-lookup"><span data-stu-id="26150-135"> Notes</span></span>  
 <span data-ttu-id="26150-136">在.NET Framework 中，<xref:System.Diagnostics.Process>默认使用的类<xref:System.Console>编码，通常是代码页编码，为输入、 输出和错误流。</span><span class="sxs-lookup"><span data-stu-id="26150-136">In the .NET Framework, the <xref:System.Diagnostics.Process> class by default uses <xref:System.Console> encodings, which are typically code page encodings, for the input, output, and error streams.</span></span> <span data-ttu-id="26150-137">有关示例代码，代码页 437 上其区域性为英语 （美国） 的系统，是默认设置编码<xref:System.Console>类。</span><span class="sxs-lookup"><span data-stu-id="26150-137">For example code, on systems whose culture is English (United States), code page 437 is the default encoding for the <xref:System.Console> class.</span></span> <span data-ttu-id="26150-138">但是，[!INCLUDE[net_core](~/includes/net-core-md.md)]可能提供仅这些编码的有限的子集。</span><span class="sxs-lookup"><span data-stu-id="26150-138">However, [!INCLUDE[net_core](~/includes/net-core-md.md)] may make only a limited subset of these encodings available.</span></span> <span data-ttu-id="26150-139">如果出现这种情况，它使用<xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType>作为默认的编码。</span><span class="sxs-lookup"><span data-stu-id="26150-139">If this is the case, it uses <xref:System.Text.Encoding.UTF8%2A?displayProperty=nameWithType> as the default encoding.</span></span>  
  
 <span data-ttu-id="26150-140">如果<xref:System.Diagnostics.Process>对象依赖于特定的代码页编码，就可以仍可以通过执行以下*之前*调用任何<xref:System.Diagnostics.Process>方法：</span><span class="sxs-lookup"><span data-stu-id="26150-140">If a <xref:System.Diagnostics.Process> object depends on specific code page encodings, you can still make them available by doing the following *before* you call any <xref:System.Diagnostics.Process> methods:</span></span>  
  
1.  <span data-ttu-id="26150-141">将 System.Text.Encoding.CodePages.dll 程序集的引用添加到你的项目。</span><span class="sxs-lookup"><span data-stu-id="26150-141">Add a reference to the System.Text.Encoding.CodePages.dll assembly to your project.</span></span>  
  
2.  <span data-ttu-id="26150-142">检索<xref:System.Text.EncodingProvider>对象<xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="26150-142">Retrieve the <xref:System.Text.EncodingProvider> object from the <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=nameWithType> property.</span></span>  
  
3.  <span data-ttu-id="26150-143">传递<xref:System.Text.EncodingProvider>对象传递给<xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType>方法使编码的可用提供程序支持的其他编码。</span><span class="sxs-lookup"><span data-stu-id="26150-143">Pass the <xref:System.Text.EncodingProvider> object to the <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=nameWithType> method to make the additional encodings supported by the encoding provider available.</span></span>  
  
 <span data-ttu-id="26150-144"><xref:System.Diagnostics.Process>类将自动使用默认系统编码而不 UTF8，前提是你在调用任何之前注册编码提供<xref:System.Diagnostics.Process>方法。</span><span class="sxs-lookup"><span data-stu-id="26150-144">The <xref:System.Diagnostics.Process> class will then automatically use the default system encoding rather than UTF8, provided that you have registered the encoding provider before calling any <xref:System.Diagnostics.Process> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-145">下面的示例使用的实例<xref:System.Diagnostics.Process>类启动的进程。</span><span class="sxs-lookup"><span data-stu-id="26150-145">The following example uses an instance of the <xref:System.Diagnostics.Process> class to start a process.</span></span>  
  
 [!code-cpp[Process.Start_instance#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.Start_instance/CPP/processstart.cpp#1)]
 [!code-csharp[Process.Start_instance#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.Start_instance/CS/processstart.cs#1)]
 [!code-vb[Process.Start_instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.Start_instance/VB/processstart.vb#1)]  
  
 <span data-ttu-id="26150-146">下面的示例使用<xref:System.Diagnostics.Process>类本身和静态<xref:System.Diagnostics.Process.Start%2A>方法启动的进程。</span><span class="sxs-lookup"><span data-stu-id="26150-146">The following example uses the <xref:System.Diagnostics.Process> class itself and a static <xref:System.Diagnostics.Process.Start%2A> method to start a process.</span></span>  
  
 [!code-cpp[Process.Start_static#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.Start_static/CPP/processstartstatic.cpp#1)]
 [!code-csharp[Process.Start_static#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.Start_static/CS/processstartstatic.cs#1)]
 [!code-vb[Process.Start_static#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.Start_static/VB/processstartstatic.vb#1)]  
  
 <span data-ttu-id="26150-147">下面的 F # 示例定义`runProc`启动一个进程的函数捕获所有输出和错误的信息，并记录该进程已运行的毫秒数。</span><span class="sxs-lookup"><span data-stu-id="26150-147">The following F# example defines a `runProc` function that starts a process, captures all output and error information, and records the number of milliseconds that the process has run.</span></span>  <span data-ttu-id="26150-148">`runProc`函数具有三个参数： 应用程序以启动，要提供给应用程序，并开始目录的自变量的名称。</span><span class="sxs-lookup"><span data-stu-id="26150-148">The `runProc` function has three parameters: the name of application to launch, the arguments to supply to the application, and the starting directory.</span></span>  
  
 [!code-fsharp[System.Diagnostics.Process#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.diagnostics.process/fs/Start1.fs#1)]  
  
 <span data-ttu-id="26150-149">代码`runProc`函数是否已写入[ImaginaryDevelopment](http://fssnip.net/authors/ImaginaryDevelopment)和位于下[Microsoft 公共许可证](https://opensource.org/licenses/ms-pl)。</span><span class="sxs-lookup"><span data-stu-id="26150-149">The code for the `runProc` function was written by [ImaginaryDevelopment](http://fssnip.net/authors/ImaginaryDevelopment) and is available under the [Microsoft Public License](https://opensource.org/licenses/ms-pl).</span></span>  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
      <span data-ttu-id="26150-150">直接调用方的完全信任。</span>
      <span class="sxs-lookup">
        <span data-stu-id="26150-150">for full trust for the immediate caller.</span>
      </span>
      <span data-ttu-id="26150-151">此类不能由部分受信任的代码使用。</span>
      <span class="sxs-lookup">
        <span data-stu-id="26150-151">This class cannot be used by partially trusted code.</span>
      </span>
    </permission>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
      <span data-ttu-id="26150-152">对继承者的完全信任。</span>
      <span class="sxs-lookup">
        <span data-stu-id="26150-152">for full trust for inheritors.</span>
      </span>
      <span data-ttu-id="26150-153">此类不能由部分受信任的代码继承。</span>
      <span class="sxs-lookup">
        <span data-stu-id="26150-153">This class cannot be inherited by partially trusted code.</span>
      </span>
    </permission>
    <altmember cref="M:System.Diagnostics.Process.Start" />
    <altmember cref="T:System.Diagnostics.ProcessStartInfo" />
    <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
    <altmember cref="M:System.Diagnostics.Process.Kill" />
    <altmember cref="T:System.Diagnostics.ProcessThread" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Process ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Process();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="26150-154">初始化 <see cref="T:System.Diagnostics.Process" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-154">Initializes a new instance of the <see cref="T:System.Diagnostics.Process" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-155">如果不指定<xref:System.Diagnostics.Process.MachineName%2A>属性，则默认为本地计算机 ("。")。</span><span class="sxs-lookup"><span data-stu-id="26150-155">If you do not specify the <xref:System.Diagnostics.Process.MachineName%2A> property, the default is the local computer, (".").</span></span>  
  
 <span data-ttu-id="26150-156">你有两个选项可用于将新<xref:System.Diagnostics.Process>组件与计算机上的进程。</span><span class="sxs-lookup"><span data-stu-id="26150-156">You have two options for associating a new <xref:System.Diagnostics.Process> component with a process on the computer.</span></span> <span data-ttu-id="26150-157">第一个选项是使用构造函数来创建<xref:System.Diagnostics.Process>组件，设置的相应成员<xref:System.Diagnostics.Process.StartInfo%2A>属性并调用<xref:System.Diagnostics.Process.Start%2A>关联<xref:System.Diagnostics.Process>使用新的系统进程。</span><span class="sxs-lookup"><span data-stu-id="26150-157">The first option is to use the constructor to create the <xref:System.Diagnostics.Process> component, set the appropriate members of the <xref:System.Diagnostics.Process.StartInfo%2A> property and call <xref:System.Diagnostics.Process.Start%2A> to associate the <xref:System.Diagnostics.Process> with a new system process.</span></span> <span data-ttu-id="26150-158">第二个选项是将关联<xref:System.Diagnostics.Process>与正在运行的系统进程，使用<xref:System.Diagnostics.Process.GetProcessById%2A>或之一<xref:System.Diagnostics.Process.GetProcesses%2A>返回值。</span><span class="sxs-lookup"><span data-stu-id="26150-158">The second option is to associate the <xref:System.Diagnostics.Process> with a running system process by using <xref:System.Diagnostics.Process.GetProcessById%2A> or one of the <xref:System.Diagnostics.Process.GetProcesses%2A> return values.</span></span>  
  
 <span data-ttu-id="26150-159">如果你使用`static`重载<xref:System.Diagnostics.Process.Start%2A>方法来启动一个新的系统进程，该方法创建一个新<xref:System.Diagnostics.Process>组件并将它与进程相关联。</span><span class="sxs-lookup"><span data-stu-id="26150-159">If you use a `static` overload of the <xref:System.Diagnostics.Process.Start%2A> method to start a new system process, the method creates a new <xref:System.Diagnostics.Process> component and associates it with the process.</span></span>  
  
 <span data-ttu-id="26150-160">当<xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType>属性设置为其默认值， `true`，您可以在类似于使用一种方法启动应用程序和文档`Run`对话框中的 windows`Start`菜单。</span><span class="sxs-lookup"><span data-stu-id="26150-160">When the <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType> property is set to its default value, `true`, you can start applications and documents in a way that is similar to using the `Run` dialog box of the Windows `Start` menu.</span></span> <span data-ttu-id="26150-161">当<xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType>是`false`，你可以开始仅可执行文件。</span><span class="sxs-lookup"><span data-stu-id="26150-161">When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType> is `false`, you can start only executables.</span></span>  
  
 <span data-ttu-id="26150-162">可以在两种方式之一中启动，可以从命令行调用任何可执行文件： 通过设置的相应成员<xref:System.Diagnostics.Process.StartInfo%2A>属性和调用<xref:System.Diagnostics.Process.Start%2A>方法提供任何参数，或通过将传递到适当的参数`static` <xref:System.Diagnostics.Process.Start%2A>成员。</span><span class="sxs-lookup"><span data-stu-id="26150-162">Any executable file that you can call from the command line can be started in one of two ways: by setting the appropriate members of the <xref:System.Diagnostics.Process.StartInfo%2A> property and calling the <xref:System.Diagnostics.Process.Start%2A> method with no parameters, or by passing the appropriate parameter to the `static`<xref:System.Diagnostics.Process.Start%2A> member.</span></span>  
  
 <span data-ttu-id="26150-163">你可以创建<xref:System.Diagnostics.Process>组件通过使用构造函数中，一个静态<xref:System.Diagnostics.Process.Start%2A>重载，或任何<xref:System.Diagnostics.Process.GetProcessById%2A>， <xref:System.Diagnostics.Process.GetProcesses%2A>，或<xref:System.Diagnostics.Process.GetProcessesByName%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="26150-163">You can create a <xref:System.Diagnostics.Process> component by using the constructor, one of the static <xref:System.Diagnostics.Process.Start%2A> overloads, or any of the <xref:System.Diagnostics.Process.GetProcessById%2A>, <xref:System.Diagnostics.Process.GetProcesses%2A>, or <xref:System.Diagnostics.Process.GetProcessesByName%2A> methods.</span></span> <span data-ttu-id="26150-164">你这样做之后，必须为关联进程的视图。</span><span class="sxs-lookup"><span data-stu-id="26150-164">After you have done so, you have a view into the associated process.</span></span> <span data-ttu-id="26150-165">这不会自动更新自身，当进程属性更改在内存中的动态视图。</span><span class="sxs-lookup"><span data-stu-id="26150-165">This is not a dynamic view that updates itself automatically when the process properties have changed in memory.</span></span> <span data-ttu-id="26150-166">相反，您必须调用<xref:System.Diagnostics.Process.Refresh%2A>以更新组件的<xref:System.Diagnostics.Process>应用程序中的属性信息。</span><span class="sxs-lookup"><span data-stu-id="26150-166">Instead, you must call <xref:System.Diagnostics.Process.Refresh%2A> for the component to update the <xref:System.Diagnostics.Process> property information in your application.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-167">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-167">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-168">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-168">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="BasePriority">
      <MemberSignature Language="C#" Value="public int BasePriority { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BasePriority" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.BasePriority" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BasePriority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BasePriority { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Base process priority.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-169">获取关联进程的基本优先级。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-169">Gets the base priority of the associated process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-170">基本优先级，从关联进程的 <see cref="P:System.Diagnostics.Process.PriorityClass" /> 计算。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-170">The base priority, which is computed from the <see cref="P:System.Diagnostics.Process.PriorityClass" /> of the associated process.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-171"><xref:System.Diagnostics.Process.BasePriority%2A>的过程是在关联进程内创建的线程的起始优先级。</span><span class="sxs-lookup"><span data-stu-id="26150-171">The <xref:System.Diagnostics.Process.BasePriority%2A> of the process is the starting priority for threads created within the associated process.</span></span> <span data-ttu-id="26150-172">你可以查看通过系统监视器的优先级基数计数器的基本优先级有关的信息。</span><span class="sxs-lookup"><span data-stu-id="26150-172">You can view information about the base priority through the System Monitor's Priority Base counter.</span></span>  
  
 <span data-ttu-id="26150-173">基于的时间应早其他放置过程时，运行时间或其他提升，操作系统可以更改的基本优先级。</span><span class="sxs-lookup"><span data-stu-id="26150-173">Based on the time elapsed or other boosts, the operating system can change the base priority when a process should be placed ahead of others.</span></span>  
  
 <span data-ttu-id="26150-174"><xref:System.Diagnostics.Process.BasePriority%2A>属性，可以查看分配给过程的起始优先级。</span><span class="sxs-lookup"><span data-stu-id="26150-174">The <xref:System.Diagnostics.Process.BasePriority%2A> property lets you view the starting priority assigned to a process.</span></span> <span data-ttu-id="26150-175">但是，因为它是只读的不能使用<xref:System.Diagnostics.Process.BasePriority%2A>设置进程的优先级。</span><span class="sxs-lookup"><span data-stu-id="26150-175">However, because it is read-only, you cannot use the <xref:System.Diagnostics.Process.BasePriority%2A> to set the priority of the process.</span></span> <span data-ttu-id="26150-176">若要更改的优先级，使用<xref:System.Diagnostics.Process.PriorityClass%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="26150-176">To change the priority, use the <xref:System.Diagnostics.Process.PriorityClass%2A> property.</span></span> <span data-ttu-id="26150-177"><xref:System.Diagnostics.Process.BasePriority%2A>可查看使用系统监视器，而<xref:System.Diagnostics.Process.PriorityClass%2A>不是。</span><span class="sxs-lookup"><span data-stu-id="26150-177">The <xref:System.Diagnostics.Process.BasePriority%2A> is viewable using the System Monitor, while the <xref:System.Diagnostics.Process.PriorityClass%2A> is not.</span></span> <span data-ttu-id="26150-178">同时<xref:System.Diagnostics.Process.BasePriority%2A>和<xref:System.Diagnostics.Process.PriorityClass%2A>可以以编程方式查看。</span><span class="sxs-lookup"><span data-stu-id="26150-178">Both the <xref:System.Diagnostics.Process.BasePriority%2A> and the <xref:System.Diagnostics.Process.PriorityClass%2A> can be viewed programmatically.</span></span> <span data-ttu-id="26150-179">下表显示之间的关系<xref:System.Diagnostics.Process.BasePriority%2A>值和<xref:System.Diagnostics.Process.PriorityClass%2A>值。</span><span class="sxs-lookup"><span data-stu-id="26150-179">The following table shows the relationship between <xref:System.Diagnostics.Process.BasePriority%2A> values and <xref:System.Diagnostics.Process.PriorityClass%2A> values.</span></span>  
  
|<span data-ttu-id="26150-180">BasePriority</span><span class="sxs-lookup"><span data-stu-id="26150-180">BasePriority</span></span>|<span data-ttu-id="26150-181">PriorityClass</span><span class="sxs-lookup"><span data-stu-id="26150-181">PriorityClass</span></span>|  
|------------------|-------------------|  
|<span data-ttu-id="26150-182">4</span><span class="sxs-lookup"><span data-stu-id="26150-182">4</span></span>|<xref:System.Diagnostics.ProcessPriorityClass.Idle>|  
|<span data-ttu-id="26150-183">8</span><span class="sxs-lookup"><span data-stu-id="26150-183">8</span></span>|<xref:System.Diagnostics.ProcessPriorityClass.Normal>|  
|<span data-ttu-id="26150-184">13</span><span class="sxs-lookup"><span data-stu-id="26150-184">13</span></span>|<xref:System.Diagnostics.ProcessPriorityClass.High>|  
|<span data-ttu-id="26150-185">24</span><span class="sxs-lookup"><span data-stu-id="26150-185">24</span></span>|<xref:System.Diagnostics.ProcessPriorityClass.RealTime>|  
  
   
  
## Examples  
 <span data-ttu-id="26150-186">以下示例启动记事本实例。</span><span class="sxs-lookup"><span data-stu-id="26150-186">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="26150-187">该示例然后检索并显示关联的进程的各种属性。</span><span class="sxs-lookup"><span data-stu-id="26150-187">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="26150-188">该示例检测时在进程退出，并显示进程的退出代码。</span><span class="sxs-lookup"><span data-stu-id="26150-188">The example detects when the process exits, and displays the process's exit code.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-189">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)；将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 属性设置为 <see langword="false" />，以在 Windows 98 和 Windows Me 上访问此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-189">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set the <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> property to <see langword="false" /> to access this property on Windows 98 and Windows Me.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-190">该进程已退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-190">The process has exited.</span>
          </span>
          <span data-ttu-id="26150-191">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-191">-or-</span>
          </span>
          <span data-ttu-id="26150-192">尚未启动进程，因此没有进程 ID。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-192">The process has not started, so there is no process ID.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-193">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-193">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-194">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-194">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.PriorityClass" />
        <altmember cref="T:System.Diagnostics.ProcessPriorityClass" />
        <altmember cref="T:System.Diagnostics.ThreadPriorityLevel" />
      </Docs>
    </Member>
    <Member MemberName="BeginErrorReadLine">
      <MemberSignature Language="C#" Value="public void BeginErrorReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginErrorReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.BeginErrorReadLine" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginErrorReadLine ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginErrorReadLine();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="26150-195">在应用程序的重定向 <see cref="P:System.Diagnostics.Process.StandardError" /> 流上开始进行异步读取操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-195">Begins asynchronous read operations on the redirected <see cref="P:System.Diagnostics.Process.StandardError" /> stream of the application.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-196"><xref:System.Diagnostics.Process.StandardError%2A>可以读取流，同步或异步。</span><span class="sxs-lookup"><span data-stu-id="26150-196">The <xref:System.Diagnostics.Process.StandardError%2A> stream can be read synchronously or asynchronously.</span></span> <span data-ttu-id="26150-197">等方法<xref:System.IO.StreamReader.Read%2A>， <xref:System.IO.StreamReader.ReadLine%2A>，和<xref:System.IO.StreamReader.ReadToEnd%2A>同步对执行读取的操作的错误输出流的过程。</span><span class="sxs-lookup"><span data-stu-id="26150-197">Methods such as <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>, and <xref:System.IO.StreamReader.ReadToEnd%2A> perform synchronous read operations on the error output stream of the process.</span></span> <span data-ttu-id="26150-198">这些同步读取操作不会完成之前关联<xref:System.Diagnostics.Process>写入其<xref:System.Diagnostics.Process.StandardError%2A>流处理时，或关闭流。</span><span class="sxs-lookup"><span data-stu-id="26150-198">These synchronous read operations do not complete until the associated <xref:System.Diagnostics.Process> writes to its <xref:System.Diagnostics.Process.StandardError%2A> stream, or closes the stream.</span></span>  
  
 <span data-ttu-id="26150-199">与此相反，<xref:System.Diagnostics.Process.BeginErrorReadLine%2A>开始异步读取操作上<xref:System.Diagnostics.Process.StandardError%2A>流。</span><span class="sxs-lookup"><span data-stu-id="26150-199">In contrast, <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> starts asynchronous read operations on the <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span> <span data-ttu-id="26150-200">此方法启用的指定的事件处理程序输出进行流式处理，并立即返回到调用方，流输出定向到事件处理程序时可以执行其他工作。</span><span class="sxs-lookup"><span data-stu-id="26150-200">This method enables the designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.</span></span>  
  
 <span data-ttu-id="26150-201">按照这些步骤上执行异步读取的操作<xref:System.Diagnostics.Process.StandardError%2A>为<xref:System.Diagnostics.Process>:</span><span class="sxs-lookup"><span data-stu-id="26150-201">Follow these steps to perform asynchronous read operations on <xref:System.Diagnostics.Process.StandardError%2A> for a <xref:System.Diagnostics.Process> :</span></span>  
  
1.  <span data-ttu-id="26150-202">将 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> 设置为 `false`。</span><span class="sxs-lookup"><span data-stu-id="26150-202">Set <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> to `false`.</span></span>  
  
2.  <span data-ttu-id="26150-203">将 <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A> 设置为 `true`。</span><span class="sxs-lookup"><span data-stu-id="26150-203">Set <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A> to `true`.</span></span>  
  
3.  <span data-ttu-id="26150-204">添加到事件处理程序<xref:System.Diagnostics.Process.ErrorDataReceived>事件。</span><span class="sxs-lookup"><span data-stu-id="26150-204">Add your event handler to the <xref:System.Diagnostics.Process.ErrorDataReceived> event.</span></span> <span data-ttu-id="26150-205">事件处理程序必须与匹配<xref:System.Diagnostics.DataReceivedEventHandler?displayProperty=nameWithType>委托签名。</span><span class="sxs-lookup"><span data-stu-id="26150-205">The event handler must match the <xref:System.Diagnostics.DataReceivedEventHandler?displayProperty=nameWithType> delegate signature.</span></span>  
  
4.  <span data-ttu-id="26150-206">启动<xref:System.Diagnostics.Process>。</span><span class="sxs-lookup"><span data-stu-id="26150-206">Start the <xref:System.Diagnostics.Process>.</span></span>  
  
5.  <span data-ttu-id="26150-207">调用<xref:System.Diagnostics.Process.BeginErrorReadLine%2A>为<xref:System.Diagnostics.Process>。</span><span class="sxs-lookup"><span data-stu-id="26150-207">Call <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> for the <xref:System.Diagnostics.Process>.</span></span> <span data-ttu-id="26150-208">此调用会启动异步读取的操作上<xref:System.Diagnostics.Process.StandardError%2A>。</span><span class="sxs-lookup"><span data-stu-id="26150-208">This call starts asynchronous read operations on <xref:System.Diagnostics.Process.StandardError%2A>.</span></span>  
  
 <span data-ttu-id="26150-209">调用异步读取的操作开始时，事件处理程序时每次关联<xref:System.Diagnostics.Process>写入到的文本行其<xref:System.Diagnostics.Process.StandardError%2A>流。</span><span class="sxs-lookup"><span data-stu-id="26150-209">When asynchronous read operations start, the event handler is called each time the associated <xref:System.Diagnostics.Process> writes a line of text to its <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span>  
  
 <span data-ttu-id="26150-210">你可以通过调用取消异步读的操作<xref:System.Diagnostics.Process.CancelErrorRead%2A>。</span><span class="sxs-lookup"><span data-stu-id="26150-210">You can cancel an asynchronous read operation by calling <xref:System.Diagnostics.Process.CancelErrorRead%2A>.</span></span> <span data-ttu-id="26150-211">由调用方或事件处理程序，可以取消读取的操作。</span><span class="sxs-lookup"><span data-stu-id="26150-211">The read operation can be canceled by the caller or by the event handler.</span></span> <span data-ttu-id="26150-212">取消之后，可以调用<xref:System.Diagnostics.Process.BeginErrorReadLine%2A>再次继续异步读取的操作。</span><span class="sxs-lookup"><span data-stu-id="26150-212">After canceling, you can call <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> again to resume asynchronous read operations.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-213">不能混合在重定向流上的异步和同步读取的操作。</span><span class="sxs-lookup"><span data-stu-id="26150-213">You cannot mix asynchronous and synchronous read operations on a redirected stream.</span></span> <span data-ttu-id="26150-214">一次的重定向的流<xref:System.Diagnostics.Process>打开在异步或同步模式下，所有进一步读取该流上的操作必须处于相同的模式。</span><span class="sxs-lookup"><span data-stu-id="26150-214">Once the redirected stream of a <xref:System.Diagnostics.Process> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</span></span> <span data-ttu-id="26150-215">例如，不遵循<xref:System.Diagnostics.Process.BeginErrorReadLine%2A>通过调用<xref:System.IO.StreamReader.ReadLine%2A>上<xref:System.Diagnostics.Process.StandardError%2A>流，反之亦然。</span><span class="sxs-lookup"><span data-stu-id="26150-215">For example, do not follow <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> with a call to <xref:System.IO.StreamReader.ReadLine%2A> on the <xref:System.Diagnostics.Process.StandardError%2A> stream, or vice versa.</span></span> <span data-ttu-id="26150-216">但是，你可以读取在不同模式下的两个不同的流。</span><span class="sxs-lookup"><span data-stu-id="26150-216">However, you can read two different streams in different modes.</span></span> <span data-ttu-id="26150-217">例如，你可以调用<xref:System.Diagnostics.Process.BeginErrorReadLine%2A>，然后调用<xref:System.IO.StreamReader.ReadLine%2A>为<xref:System.Diagnostics.Process.StandardOutput%2A>流。</span><span class="sxs-lookup"><span data-stu-id="26150-217">For example, you can call <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> and then call <xref:System.IO.StreamReader.ReadLine%2A> for the <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-218">下面的示例使用`net view`命令以列出在远程计算机上的可用的网络资源。</span><span class="sxs-lookup"><span data-stu-id="26150-218">The following example uses the `net view` command to list the available network resources on a remote computer.</span></span> <span data-ttu-id="26150-219">在用户提供的目标计算机名称作为命令行自变量。</span><span class="sxs-lookup"><span data-stu-id="26150-219">The user supplies the target computer name as a command-line argument.</span></span> <span data-ttu-id="26150-220">用户还可以提供错误输出的文件名称。</span><span class="sxs-lookup"><span data-stu-id="26150-220">The user can also supply a file name for error output.</span></span> <span data-ttu-id="26150-221">该示例收集的 net 命令、 等待进程完成，然后写入到控制台的输出结果的输出。</span><span class="sxs-lookup"><span data-stu-id="26150-221">The example collects the output of the net command, waits for the process to finish, and then writes the output results to the console.</span></span> <span data-ttu-id="26150-222">如果在用户提供的可选错误文件，该示例会将错误写入文件。</span><span class="sxs-lookup"><span data-stu-id="26150-222">If the user supplies the optional error file, the example writes errors to the file.</span></span>  
  
 [!code-cpp[Process_AsyncStreams#2](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/net_async.cpp#2)]
 [!code-csharp[Process_AsyncStreams#2](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/net_async.cs#2)]
 [!code-vb[Process_AsyncStreams#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/net_async.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-223">
            <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> 属性为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-223">The <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> property is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="26150-224">\- 或 -</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-224">\- or -</span>
          </span>
          <span data-ttu-id="26150-225">
            <see cref="P:System.Diagnostics.Process.StandardError" /> 流上已在进行异步读取操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-225">An asynchronous read operation is already in progress on the <see cref="P:System.Diagnostics.Process.StandardError" /> stream.</span>
          </span>
          <span data-ttu-id="26150-226">\- 或 -</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-226">\- or -</span>
          </span>
          <span data-ttu-id="26150-227">同步读取操作已使用 <see cref="P:System.Diagnostics.Process.StandardError" /> 流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-227">The <see cref="P:System.Diagnostics.Process.StandardError" /> stream has been used by a synchronous read operation.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-228">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-228">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-229">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-229">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" />
        <altmember cref="P:System.Diagnostics.Process.StandardError" />
        <altmember cref="E:System.Diagnostics.Process.ErrorDataReceived" />
        <altmember cref="T:System.Diagnostics.DataReceivedEventHandler" />
        <altmember cref="M:System.Diagnostics.Process.CancelErrorRead" />
      </Docs>
    </Member>
    <Member MemberName="BeginOutputReadLine">
      <MemberSignature Language="C#" Value="public void BeginOutputReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginOutputReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.BeginOutputReadLine" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginOutputReadLine ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginOutputReadLine();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="26150-230">在应用程序的重定向 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 流上开始进行异步读取操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-230">Begins asynchronous read operations on the redirected <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream of the application.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-231"><xref:System.Diagnostics.Process.StandardOutput%2A>可以读取流，同步或异步。</span><span class="sxs-lookup"><span data-stu-id="26150-231">The <xref:System.Diagnostics.Process.StandardOutput%2A> stream can be read synchronously or asynchronously.</span></span> <span data-ttu-id="26150-232">等方法<xref:System.IO.StreamReader.Read%2A>， <xref:System.IO.StreamReader.ReadLine%2A>，和<xref:System.IO.StreamReader.ReadToEnd%2A>同步对执行读取的操作过程的输出流。</span><span class="sxs-lookup"><span data-stu-id="26150-232">Methods such as <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>, and <xref:System.IO.StreamReader.ReadToEnd%2A> perform synchronous read operations on the output stream of the process.</span></span> <span data-ttu-id="26150-233">这些同步读取操作不会完成之前关联<xref:System.Diagnostics.Process>写入其<xref:System.Diagnostics.Process.StandardOutput%2A>流处理时，或关闭流。</span><span class="sxs-lookup"><span data-stu-id="26150-233">These synchronous read operations do not complete until the associated <xref:System.Diagnostics.Process> writes to its <xref:System.Diagnostics.Process.StandardOutput%2A> stream, or closes the stream.</span></span>  
  
 <span data-ttu-id="26150-234">与此相反，<xref:System.Diagnostics.Process.BeginOutputReadLine%2A>开始异步读取操作上<xref:System.Diagnostics.Process.StandardOutput%2A>流。</span><span class="sxs-lookup"><span data-stu-id="26150-234">In contrast, <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> starts asynchronous read operations on the <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span> <span data-ttu-id="26150-235">此方法将启用流输出指定的事件处理程序并立即返回到调用方，流输出定向到事件处理程序时可以执行其他工作。</span><span class="sxs-lookup"><span data-stu-id="26150-235">This method enables a designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.</span></span>  
  
 <span data-ttu-id="26150-236">按照这些步骤上执行异步读取的操作<xref:System.Diagnostics.Process.StandardOutput%2A>为<xref:System.Diagnostics.Process>:</span><span class="sxs-lookup"><span data-stu-id="26150-236">Follow these steps to perform asynchronous read operations on <xref:System.Diagnostics.Process.StandardOutput%2A> for a <xref:System.Diagnostics.Process> :</span></span>  
  
1.  <span data-ttu-id="26150-237">将 <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> 设置为 `false`。</span><span class="sxs-lookup"><span data-stu-id="26150-237">Set <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> to `false`.</span></span>  
  
2.  <span data-ttu-id="26150-238">将 <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A> 设置为 `true`。</span><span class="sxs-lookup"><span data-stu-id="26150-238">Set <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A> to `true`.</span></span>  
  
3.  <span data-ttu-id="26150-239">添加到事件处理程序<xref:System.Diagnostics.Process.OutputDataReceived>事件。</span><span class="sxs-lookup"><span data-stu-id="26150-239">Add your event handler to the <xref:System.Diagnostics.Process.OutputDataReceived> event.</span></span> <span data-ttu-id="26150-240">事件处理程序必须与匹配<xref:System.Diagnostics.DataReceivedEventHandler?displayProperty=nameWithType>委托签名。</span><span class="sxs-lookup"><span data-stu-id="26150-240">The event handler must match the <xref:System.Diagnostics.DataReceivedEventHandler?displayProperty=nameWithType> delegate signature.</span></span>  
  
4.  <span data-ttu-id="26150-241">启动<xref:System.Diagnostics.Process>。</span><span class="sxs-lookup"><span data-stu-id="26150-241">Start the <xref:System.Diagnostics.Process>.</span></span>  
  
5.  <span data-ttu-id="26150-242">调用<xref:System.Diagnostics.Process.BeginOutputReadLine%2A>为<xref:System.Diagnostics.Process>。</span><span class="sxs-lookup"><span data-stu-id="26150-242">Call <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> for the <xref:System.Diagnostics.Process>.</span></span> <span data-ttu-id="26150-243">此调用会启动异步读取的操作上<xref:System.Diagnostics.Process.StandardOutput%2A>。</span><span class="sxs-lookup"><span data-stu-id="26150-243">This call starts asynchronous read operations on <xref:System.Diagnostics.Process.StandardOutput%2A>.</span></span>  
  
 <span data-ttu-id="26150-244">调用异步读取的操作开始时，事件处理程序时每次关联<xref:System.Diagnostics.Process>写入到的文本行其<xref:System.Diagnostics.Process.StandardOutput%2A>流。</span><span class="sxs-lookup"><span data-stu-id="26150-244">When asynchronous read operations start, the event handler is called each time the associated <xref:System.Diagnostics.Process> writes a line of text to its <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span>  
  
 <span data-ttu-id="26150-245">你可以通过调用取消异步读的操作<xref:System.Diagnostics.Process.CancelOutputRead%2A>。</span><span class="sxs-lookup"><span data-stu-id="26150-245">You can cancel an asynchronous read operation by calling <xref:System.Diagnostics.Process.CancelOutputRead%2A>.</span></span> <span data-ttu-id="26150-246">由调用方或事件处理程序，可以取消读取的操作。</span><span class="sxs-lookup"><span data-stu-id="26150-246">The read operation can be canceled by the caller or by the event handler.</span></span> <span data-ttu-id="26150-247">取消之后，可以调用<xref:System.Diagnostics.Process.BeginOutputReadLine%2A>再次继续异步读取的操作。</span><span class="sxs-lookup"><span data-stu-id="26150-247">After canceling, you can call <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> again to resume asynchronous read operations.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-248">不能混合在重定向流上的异步和同步读取的操作。</span><span class="sxs-lookup"><span data-stu-id="26150-248">You cannot mix asynchronous and synchronous read operations on a redirected stream.</span></span> <span data-ttu-id="26150-249">一次的重定向的流<xref:System.Diagnostics.Process>打开在异步或同步模式下，所有进一步读取该流上的操作必须处于相同的模式。</span><span class="sxs-lookup"><span data-stu-id="26150-249">Once the redirected stream of a <xref:System.Diagnostics.Process> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</span></span> <span data-ttu-id="26150-250">例如，不遵循<xref:System.Diagnostics.Process.BeginOutputReadLine%2A>通过调用<xref:System.IO.StreamReader.ReadLine%2A>上<xref:System.Diagnostics.Process.StandardOutput%2A>流，反之亦然。</span><span class="sxs-lookup"><span data-stu-id="26150-250">For example, do not follow <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> with a call to <xref:System.IO.StreamReader.ReadLine%2A> on the <xref:System.Diagnostics.Process.StandardOutput%2A> stream, or vice versa.</span></span> <span data-ttu-id="26150-251">但是，你可以读取在不同模式下的两个不同的流。</span><span class="sxs-lookup"><span data-stu-id="26150-251">However, you can read two different streams in different modes.</span></span> <span data-ttu-id="26150-252">例如，你可以调用<xref:System.Diagnostics.Process.BeginOutputReadLine%2A>，然后调用<xref:System.IO.StreamReader.ReadLine%2A>为<xref:System.Diagnostics.Process.StandardError%2A>流。</span><span class="sxs-lookup"><span data-stu-id="26150-252">For example, you can call <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> and then call <xref:System.IO.StreamReader.ReadLine%2A> for the <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-253">下面的示例演示如何执行上的重定向的异步读取的操作<xref:System.Diagnostics.Process.StandardOutput%2A>流`sort`命令。</span><span class="sxs-lookup"><span data-stu-id="26150-253">The following example illustrates how to perform asynchronous read operations on the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream of the `sort` command.</span></span> <span data-ttu-id="26150-254">`sort`命令是一个控制台应用程序，读取对文本输入进行排序。</span><span class="sxs-lookup"><span data-stu-id="26150-254">The `sort` command is a console application that reads and sorts text input.</span></span>  
  
 <span data-ttu-id="26150-255">该示例创建一个事件委托，它为`SortOutputHandler`事件处理程序并将其与关联<xref:System.Diagnostics.Process.OutputDataReceived>事件。</span><span class="sxs-lookup"><span data-stu-id="26150-255">The example creates an event delegate for the `SortOutputHandler` event handler and associates it with the <xref:System.Diagnostics.Process.OutputDataReceived> event.</span></span> <span data-ttu-id="26150-256">事件处理程序接收来自的重定向的文本行<xref:System.Diagnostics.Process.StandardOutput%2A>流，格式文本，并将文本写入屏幕。</span><span class="sxs-lookup"><span data-stu-id="26150-256">The event handler receives text lines from the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream, formats the text, and writes the text to the screen.</span></span>  
  
 [!code-cpp[Process_AsyncStreams#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/sort_async.cpp#1)]
 [!code-csharp[Process_AsyncStreams#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/sort_async.cs#1)]
 [!code-vb[Process_AsyncStreams#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/sort_async.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-257">
            <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /> 属性为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-257">The <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /> property is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="26150-258">\- 或 -</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-258">\- or -</span>
          </span>
          <span data-ttu-id="26150-259">
            <see cref="P:System.Diagnostics.Process.StandardOutput" /> 流上已在进行异步读取操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-259">An asynchronous read operation is already in progress on the <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream.</span>
          </span>
          <span data-ttu-id="26150-260">\- 或 -</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-260">\- or -</span>
          </span>
          <span data-ttu-id="26150-261">同步读取操作已使用 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-261">The <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream has been used by a synchronous read operation.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-262">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-262">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-263">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-263">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" />
        <altmember cref="P:System.Diagnostics.Process.StandardOutput" />
        <altmember cref="E:System.Diagnostics.Process.OutputDataReceived" />
        <altmember cref="T:System.Diagnostics.DataReceivedEventHandler" />
        <altmember cref="M:System.Diagnostics.Process.CancelOutputRead" />
      </Docs>
    </Member>
    <Member MemberName="CancelErrorRead">
      <MemberSignature Language="C#" Value="public void CancelErrorRead ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelErrorRead() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.CancelErrorRead" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelErrorRead ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelErrorRead();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="26150-264">取消在应用程序的重定向 <see cref="P:System.Diagnostics.Process.StandardError" /> 流上执行的异步读取操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-264">Cancels the asynchronous read operation on the redirected <see cref="P:System.Diagnostics.Process.StandardError" /> stream of an application.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-265"><xref:System.Diagnostics.Process.BeginErrorReadLine%2A> 启动异步读取操作<xref:System.Diagnostics.Process.StandardError%2A>流。</span><span class="sxs-lookup"><span data-stu-id="26150-265"><xref:System.Diagnostics.Process.BeginErrorReadLine%2A> starts an asynchronous read operation on the <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span> <span data-ttu-id="26150-266"><xref:System.Diagnostics.Process.CancelErrorRead%2A> 结束异步读取操作。</span><span class="sxs-lookup"><span data-stu-id="26150-266"><xref:System.Diagnostics.Process.CancelErrorRead%2A> ends the asynchronous read operation.</span></span>  
  
 <span data-ttu-id="26150-267">取消之后，您可以通过来继续异步读取的操作调用<xref:System.Diagnostics.Process.BeginErrorReadLine%2A>试。</span><span class="sxs-lookup"><span data-stu-id="26150-267">After canceling, you can resume the asynchronous read operation by calling <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> again.</span></span>  
  
 <span data-ttu-id="26150-268">当调用<xref:System.Diagnostics.Process.CancelErrorRead%2A>，所有正在进行读取操作<xref:System.Diagnostics.Process.StandardError%2A>完成和事件处理程序，则会禁用。</span><span class="sxs-lookup"><span data-stu-id="26150-268">When you call <xref:System.Diagnostics.Process.CancelErrorRead%2A>, all in-progress read operations for <xref:System.Diagnostics.Process.StandardError%2A> are completed and then the event handler is disabled.</span></span> <span data-ttu-id="26150-269">所有进一步重定向到输出<xref:System.Diagnostics.Process.StandardError%2A>保存在缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="26150-269">All further redirected output to <xref:System.Diagnostics.Process.StandardError%2A> is saved in a buffer.</span></span> <span data-ttu-id="26150-270">如果重新启用事件处理程序通过调用<xref:System.Diagnostics.Process.BeginErrorReadLine%2A>，已保存的输出发送到事件处理程序并异步读取的操作恢复。</span><span class="sxs-lookup"><span data-stu-id="26150-270">If you re-enable the event handler with a call to <xref:System.Diagnostics.Process.BeginErrorReadLine%2A>, the saved output is sent to the event handler and asynchronous read operations resume.</span></span> <span data-ttu-id="26150-271">如果你想要继续执行异步读取的操作之前更改事件处理程序，则必须在添加新的事件处理程序之前删除现有的事件处理程序：</span><span class="sxs-lookup"><span data-stu-id="26150-271">If you want to change the event handler before resuming asynchronous read operations, you must remove the existing event handler before adding the new event handler:</span></span>  
  
```csharp  
// At this point the DataReceivedEventHandler(ErrorHandler1)   
// has executed a CancelErrorRead.  
  
// Remove the prior event handler.  
process.ErrorDataReceived -=   
    new DataReceivedEventHandler(ErrorHandler1);  
  
// Register a new event handler.  
process.ErrorDataReceived +=   
    new DataReceivedEventHandler(ErrorHandler2);  
  
// Call the corresponding BeginErrorReadLine.  
process.BeginErrorReadLine();  
```  
  
> [!NOTE]
>  <span data-ttu-id="26150-272">不能混合使用异步和同步读取的操作的重定向<xref:System.Diagnostics.Process.StandardError%2A>流。</span><span class="sxs-lookup"><span data-stu-id="26150-272">You cannot mix asynchronous and synchronous read operations on the redirected <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span> <span data-ttu-id="26150-273">一次的重定向的流<xref:System.Diagnostics.Process>打开在异步或同步模式下，所有进一步读取该流上的操作必须处于相同的模式。</span><span class="sxs-lookup"><span data-stu-id="26150-273">Once the redirected stream of a <xref:System.Diagnostics.Process> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</span></span> <span data-ttu-id="26150-274">如果您取消异步，则读取上操作<xref:System.Diagnostics.Process.StandardError%2A>，然后需要从流中读取同样，你必须使用<xref:System.Diagnostics.Process.BeginErrorReadLine%2A>继续异步读取的操作。</span><span class="sxs-lookup"><span data-stu-id="26150-274">If you cancel an asynchronous read operation on <xref:System.Diagnostics.Process.StandardError%2A> and then need to read from the stream again, you must use <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> to resume asynchronous read operations.</span></span> <span data-ttu-id="26150-275">不要遵循<xref:System.Diagnostics.Process.CancelErrorRead%2A>通过调用同步读取方法<xref:System.Diagnostics.Process.StandardError%2A>如<xref:System.IO.StreamReader.Read%2A>， <xref:System.IO.StreamReader.ReadLine%2A>，或<xref:System.IO.StreamReader.ReadToEnd%2A>。</span><span class="sxs-lookup"><span data-stu-id="26150-275">Do not follow <xref:System.Diagnostics.Process.CancelErrorRead%2A> with a call to the synchronous read methods of <xref:System.Diagnostics.Process.StandardError%2A> such as <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>, or <xref:System.IO.StreamReader.ReadToEnd%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-276">下面的示例启动`nmake`命令与用户提供自变量。</span><span class="sxs-lookup"><span data-stu-id="26150-276">The following example starts the `nmake` command with user supplied arguments.</span></span> <span data-ttu-id="26150-277">错误和输出流异步读取被写入;收集的文本行是显示到控制台以及写入日志文件。</span><span class="sxs-lookup"><span data-stu-id="26150-277">The error and output streams are read asynchronously; the collected text lines are displayed to the console as well as written to a log file.</span></span> <span data-ttu-id="26150-278">如果命令输出超出指定的行数，则会取消异步读取的操作。</span><span class="sxs-lookup"><span data-stu-id="26150-278">If the command output exceeds a specified number of lines, the asynchronous read operations are canceled.</span></span>  
  
 [!code-cpp[Process_AsyncStreams#3](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/nmake_async.cpp#3)]
 [!code-csharp[Process_AsyncStreams#3](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/nmake_async.cs#3)]
 [!code-vb[Process_AsyncStreams#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/nmake_async.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-279">未针对异步读取操作启用 <see cref="P:System.Diagnostics.Process.StandardError" /> 流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-279">The <see cref="P:System.Diagnostics.Process.StandardError" /> stream is not enabled for asynchronous read operations.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-280">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-280">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-281">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-281">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Diagnostics.Process.BeginErrorReadLine" />
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" />
        <altmember cref="P:System.Diagnostics.Process.StandardError" />
        <altmember cref="E:System.Diagnostics.Process.ErrorDataReceived" />
        <altmember cref="T:System.Diagnostics.DataReceivedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="CancelOutputRead">
      <MemberSignature Language="C#" Value="public void CancelOutputRead ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelOutputRead() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.CancelOutputRead" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelOutputRead ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelOutputRead();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="26150-282">取消在应用程序的重定向 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 流上执行的异步读取操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-282">Cancels the asynchronous read operation on the redirected <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream of an application.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-283"><xref:System.Diagnostics.Process.BeginOutputReadLine%2A> 启动异步读取操作<xref:System.Diagnostics.Process.StandardOutput%2A>流。</span><span class="sxs-lookup"><span data-stu-id="26150-283"><xref:System.Diagnostics.Process.BeginOutputReadLine%2A> starts an asynchronous read operation on the <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span> <span data-ttu-id="26150-284"><xref:System.Diagnostics.Process.CancelOutputRead%2A> 结束异步读取操作。</span><span class="sxs-lookup"><span data-stu-id="26150-284"><xref:System.Diagnostics.Process.CancelOutputRead%2A> ends the asynchronous read operation.</span></span>  
  
 <span data-ttu-id="26150-285">取消之后，您可以通过来继续异步读取的操作调用<xref:System.Diagnostics.Process.BeginOutputReadLine%2A>试。</span><span class="sxs-lookup"><span data-stu-id="26150-285">After canceling, you can resume asynchronous read operations by calling <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> again.</span></span>  
  
 <span data-ttu-id="26150-286">当调用<xref:System.Diagnostics.Process.CancelOutputRead%2A>，所有正在进行读取操作<xref:System.Diagnostics.Process.StandardOutput%2A>完成和事件处理程序，则会禁用。</span><span class="sxs-lookup"><span data-stu-id="26150-286">When you call <xref:System.Diagnostics.Process.CancelOutputRead%2A>, all in-progress read operations for <xref:System.Diagnostics.Process.StandardOutput%2A> are completed and then the event handler is disabled.</span></span> <span data-ttu-id="26150-287">所有进一步重定向到输出<xref:System.Diagnostics.Process.StandardOutput%2A>保存在缓冲区中。</span><span class="sxs-lookup"><span data-stu-id="26150-287">All further redirected output to <xref:System.Diagnostics.Process.StandardOutput%2A> is saved in a buffer.</span></span> <span data-ttu-id="26150-288">如果重新启用事件处理程序通过调用<xref:System.Diagnostics.Process.BeginOutputReadLine%2A>，已保存的输出发送到事件处理程序并异步读取的操作恢复。</span><span class="sxs-lookup"><span data-stu-id="26150-288">If you re-enable the event handler with a call to <xref:System.Diagnostics.Process.BeginOutputReadLine%2A>, the saved output is sent to the event handler and asynchronous read operations resume.</span></span> <span data-ttu-id="26150-289">如果你想要继续执行异步读取的操作之前更改事件处理程序，则必须在添加新的事件处理程序之前删除现有的事件处理程序：</span><span class="sxs-lookup"><span data-stu-id="26150-289">If you want to change the event handler before resuming asynchronous read operations, you must remove the existing event handler before adding the new event handler:</span></span>  
  
```csharp  
// At this point the DataReceivedEventHandler(OutputHandler1)   
// has executed a CancelOutputRead.  
  
// Remove the prior event handler.  
process.OutputDataReceived -=   
    new DataReceivedEventHandler(OutputHandler1);  
  
// Register a new event handler.  
process.OutputDataReceived +=   
    new DataReceivedEventHandler(OutputHandler2);  
  
// Call the corresponding BeginOutputReadLine.  
process.BeginOutputReadLine();  
```  
  
> [!NOTE]
>  <span data-ttu-id="26150-290">不能混合使用异步和同步读取的操作的重定向<xref:System.Diagnostics.Process.StandardOutput%2A>流。</span><span class="sxs-lookup"><span data-stu-id="26150-290">You cannot mix asynchronous and synchronous read operations on the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span> <span data-ttu-id="26150-291">一次的重定向的流<xref:System.Diagnostics.Process>打开在异步或同步模式下，所有进一步读取该流上的操作必须处于相同的模式。</span><span class="sxs-lookup"><span data-stu-id="26150-291">Once the redirected stream of a <xref:System.Diagnostics.Process> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</span></span> <span data-ttu-id="26150-292">如果您取消异步，则读取上操作<xref:System.Diagnostics.Process.StandardOutput%2A>，然后需要从流中读取同样，你必须使用<xref:System.Diagnostics.Process.BeginOutputReadLine%2A>继续异步读取的操作。</span><span class="sxs-lookup"><span data-stu-id="26150-292">If you cancel an asynchronous read operation on <xref:System.Diagnostics.Process.StandardOutput%2A> and then need to read from the stream again, you must use <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> to resume asynchronous read operations.</span></span> <span data-ttu-id="26150-293">不要遵循<xref:System.Diagnostics.Process.CancelOutputRead%2A>通过调用同步读取方法<xref:System.Diagnostics.Process.StandardOutput%2A>如<xref:System.IO.StreamReader.Read%2A>， <xref:System.IO.StreamReader.ReadLine%2A>，或<xref:System.IO.StreamReader.ReadToEnd%2A>。</span><span class="sxs-lookup"><span data-stu-id="26150-293">Do not follow <xref:System.Diagnostics.Process.CancelOutputRead%2A> with a call to the synchronous read methods of <xref:System.Diagnostics.Process.StandardOutput%2A> such as <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>, or <xref:System.IO.StreamReader.ReadToEnd%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-294">下面的示例启动`nmake`命令与用户提供自变量。</span><span class="sxs-lookup"><span data-stu-id="26150-294">The following example starts the `nmake` command with user supplied arguments.</span></span> <span data-ttu-id="26150-295">错误和输出流异步读取被写入;收集的文本行是显示到控制台以及写入日志文件。</span><span class="sxs-lookup"><span data-stu-id="26150-295">The error and output streams are read asynchronously; the collected text lines are displayed to the console as well as written to a log file.</span></span> <span data-ttu-id="26150-296">如果命令输出超出指定的行数，则会取消异步读取的操作。</span><span class="sxs-lookup"><span data-stu-id="26150-296">If the command output exceeds a specified number of lines, the asynchronous read operations are canceled.</span></span>  
  
 [!code-cpp[Process_AsyncStreams#3](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/nmake_async.cpp#3)]
 [!code-csharp[Process_AsyncStreams#3](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/nmake_async.cs#3)]
 [!code-vb[Process_AsyncStreams#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/nmake_async.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-297">未针对异步读取操作启用 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-297">The <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream is not enabled for asynchronous read operations.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-298">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-298">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-299">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-299">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Diagnostics.Process.BeginOutputReadLine" />
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" />
        <altmember cref="P:System.Diagnostics.Process.StandardOutput" />
        <altmember cref="E:System.Diagnostics.Process.OutputDataReceived" />
        <altmember cref="T:System.Diagnostics.DataReceivedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="26150-300">释放与此组件关联的所有资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-300">Frees all the resources that are associated with this component.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-301"><xref:System.Diagnostics.Process.Close%2A>方法会导致进程停止等待退出的等待，如果关闭进程句柄，并清除特定于进程的属性。</span><span class="sxs-lookup"><span data-stu-id="26150-301">The <xref:System.Diagnostics.Process.Close%2A> method causes the process to stop waiting for exit if it was waiting, closes the process handle, and clears process-specific properties.</span></span> <span data-ttu-id="26150-302"><xref:System.Diagnostics.Process.Close%2A> 它们将被从外部引用的情况下，不会关闭标准输出、 输入和错误的读取器和编写器。</span><span class="sxs-lookup"><span data-stu-id="26150-302"><xref:System.Diagnostics.Process.Close%2A> does not close the standard output, input, and error readers and writers in case they are being referenced externally.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-303"><xref:System.Diagnostics.Process.Dispose%2A> 方法调用 <xref:System.Diagnostics.Process.Close%2A>。</span><span class="sxs-lookup"><span data-stu-id="26150-303">The <xref:System.Diagnostics.Process.Dispose%2A> method calls <xref:System.Diagnostics.Process.Close%2A>.</span></span> <span data-ttu-id="26150-304">放置<xref:System.Diagnostics.Process>对象在`using`块释放资源而无需调用<xref:System.Diagnostics.Process.Close%2A>。</span><span class="sxs-lookup"><span data-stu-id="26150-304">Placing the <xref:System.Diagnostics.Process> object in a `using` block disposes of resources without the need to call <xref:System.Diagnostics.Process.Close%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-305">以下示例启动记事本实例。</span><span class="sxs-lookup"><span data-stu-id="26150-305">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="26150-306">然后在 10 秒的最长 2 秒间隔检索关联进程的物理内存的使用量。</span><span class="sxs-lookup"><span data-stu-id="26150-306">It then retrieves the physical memory usage of the associated process at 2-second intervals for a maximum of 10 seconds.</span></span> <span data-ttu-id="26150-307">该示例检测在进程退出之前经过 10 秒后。</span><span class="sxs-lookup"><span data-stu-id="26150-307">The example detects whether the process exits before 10 seconds have elapsed.</span></span> <span data-ttu-id="26150-308">如果它仍在运行在 10 秒后，该示例将关闭进程。</span><span class="sxs-lookup"><span data-stu-id="26150-308">The example closes the process if it is still running after 10 seconds.</span></span>  
  
 [!code-cpp[process_refresh#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_refresh/CPP/process_refresh.cpp#1)]
 [!code-csharp[process_refresh#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_refresh/CS/process_refresh.cs#1)]
 [!code-vb[process_refresh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_refresh/VB/process_refresh.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-309">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-309">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-310">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-310">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="CloseMainWindow">
      <MemberSignature Language="C#" Value="public bool CloseMainWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CloseMainWindow() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.CloseMainWindow" />
      <MemberSignature Language="VB.NET" Value="Public Function CloseMainWindow () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CloseMainWindow();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="26150-311">通过向进程的主窗口发送关闭消息来关闭拥有用户界面的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-311">Closes a process that has a user interface by sending a close message to its main window.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="26150-312">如果成功发送了关闭消息，则为 <see langword="true" />；如果关联进程没有主窗口或禁用了主窗口(例如，如果当前显示模式对话框)，则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-312">
              <see langword="true" /> if the close message was successfully sent; <see langword="false" /> if the associated process does not have a main window or if the main window is disabled (for example if a modal dialog is being shown).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-313">执行过程时，其消息循环将处于等待状态。</span><span class="sxs-lookup"><span data-stu-id="26150-313">When a process is executing, its message loop is in a wait state.</span></span> <span data-ttu-id="26150-314">消息循环执行每次操作系统的 Windows 消息发送到进程。</span><span class="sxs-lookup"><span data-stu-id="26150-314">The message loop executes every time a Windows message is sent to the process by the operating system.</span></span> <span data-ttu-id="26150-315">调用<xref:System.Diagnostics.Process.CloseMainWindow%2A>将请求发送到接近主窗口中，其格式正确的应用程序，在关闭子窗口，并撤消应用程序的所有正在运行消息循环。</span><span class="sxs-lookup"><span data-stu-id="26150-315">Calling <xref:System.Diagnostics.Process.CloseMainWindow%2A> sends a request to close to the main window, which, in a well-formed application, closes child windows and revokes all running message loops for the application.</span></span> <span data-ttu-id="26150-316">通过调用退出该进程的请求<xref:System.Diagnostics.Process.CloseMainWindow%2A>不会强制应用程序退出。</span><span class="sxs-lookup"><span data-stu-id="26150-316">The request to exit the process by calling <xref:System.Diagnostics.Process.CloseMainWindow%2A> does not force the application to quit.</span></span> <span data-ttu-id="26150-317">应用程序可以请求用户验证之前退出，或它可以拒绝退出。</span><span class="sxs-lookup"><span data-stu-id="26150-317">The application can ask for user verification before quitting, or it can refuse to quit.</span></span> <span data-ttu-id="26150-318">若要强制应用程序退出，请使用<xref:System.Diagnostics.Process.Kill%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="26150-318">To force the application to quit, use the <xref:System.Diagnostics.Process.Kill%2A> method.</span></span> <span data-ttu-id="26150-319">行为<xref:System.Diagnostics.Process.CloseMainWindow%2A>等同于用户关闭应用程序的主窗口中使用系统菜单。</span><span class="sxs-lookup"><span data-stu-id="26150-319">The behavior of <xref:System.Diagnostics.Process.CloseMainWindow%2A> is identical to that of a user closing an application's main window using the system menu.</span></span> <span data-ttu-id="26150-320">因此，通过关闭主窗口退出该进程的请求不会强制应用程序立即退出。</span><span class="sxs-lookup"><span data-stu-id="26150-320">Therefore, the request to exit the process by closing the main window does not force the application to quit immediately.</span></span>  
  
 <span data-ttu-id="26150-321">该进程编辑的数据或分配给进程的资源可能会丢失如果调用<xref:System.Diagnostics.Process.Kill%2A>。</span><span class="sxs-lookup"><span data-stu-id="26150-321">Data edited by the process or resources allocated to the process can be lost if you call <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="26150-322"><xref:System.Diagnostics.Process.Kill%2A> 导致异常的进程终止，并应仅在必要时使用。</span><span class="sxs-lookup"><span data-stu-id="26150-322"><xref:System.Diagnostics.Process.Kill%2A> causes an abnormal process termination, and should be used only when necessary.</span></span> <span data-ttu-id="26150-323"><xref:System.Diagnostics.Process.CloseMainWindow%2A> 启用过程的有序终止并关闭所有窗口，以使更为可取的接口的应用程序。</span><span class="sxs-lookup"><span data-stu-id="26150-323"><xref:System.Diagnostics.Process.CloseMainWindow%2A> enables an orderly termination of the process and closes all windows, so it is preferable for applications with an interface.</span></span> <span data-ttu-id="26150-324">如果<xref:System.Diagnostics.Process.CloseMainWindow%2A>失败，你可以使用<xref:System.Diagnostics.Process.Kill%2A>终止进程。</span><span class="sxs-lookup"><span data-stu-id="26150-324">If <xref:System.Diagnostics.Process.CloseMainWindow%2A> fails, you can use <xref:System.Diagnostics.Process.Kill%2A> to terminate the process.</span></span> <span data-ttu-id="26150-325"><xref:System.Diagnostics.Process.Kill%2A> 是终止不具有图形界面的进程的唯一方法。</span><span class="sxs-lookup"><span data-stu-id="26150-325"><xref:System.Diagnostics.Process.Kill%2A> is the only way to terminate processes that do not have graphical interfaces.</span></span>  
  
 <span data-ttu-id="26150-326">你可以调用<xref:System.Diagnostics.Process.Kill%2A>和<xref:System.Diagnostics.Process.CloseMainWindow%2A>仅的本地计算机运行的进程。</span><span class="sxs-lookup"><span data-stu-id="26150-326">You can call <xref:System.Diagnostics.Process.Kill%2A> and <xref:System.Diagnostics.Process.CloseMainWindow%2A> only for processes that are running on the local computer.</span></span> <span data-ttu-id="26150-327">在退出的远程计算机上，不会导致进程。</span><span class="sxs-lookup"><span data-stu-id="26150-327">You cannot cause processes on remote computers to exit.</span></span> <span data-ttu-id="26150-328">仅可以查看在远程计算机上运行的进程的信息。</span><span class="sxs-lookup"><span data-stu-id="26150-328">You can only view information for processes running on remote computers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-329">以下示例启动记事本实例。</span><span class="sxs-lookup"><span data-stu-id="26150-329">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="26150-330">然后在 10 秒最多两秒为间隔检索关联进程的物理内存的使用量。</span><span class="sxs-lookup"><span data-stu-id="26150-330">It then retrieves the physical memory usage of the associated process at 2 second intervals for a maximum of 10 seconds.</span></span> <span data-ttu-id="26150-331">该示例检测在进程退出之前经过 10 秒后。</span><span class="sxs-lookup"><span data-stu-id="26150-331">The example detects whether the process exits before 10 seconds have elapsed.</span></span> <span data-ttu-id="26150-332">如果它仍在运行在 10 秒后，该示例将关闭进程。</span><span class="sxs-lookup"><span data-stu-id="26150-332">The example closes the process if it is still running after 10 seconds.</span></span>  
  
 [!code-cpp[process_refresh#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_refresh/CPP/process_refresh.cpp#1)]
 [!code-csharp[process_refresh#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_refresh/CS/process_refresh.cs#1)]
 [!code-vb[process_refresh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_refresh/VB/process_refresh.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-333">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)；将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 属性设置为 <see langword="false" />，以在 Windows 98 和 Windows Me 上访问此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-333">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set the <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> property to <see langword="false" /> to access this property on Windows 98 and Windows Me.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-334">已经退出该进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-334">The process has already exited.</span>
          </span>
          <span data-ttu-id="26150-335">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-335">-or-</span>
          </span>
          <span data-ttu-id="26150-336">没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-336">No process is associated with this <see cref="T:System.Diagnostics.Process" /> object.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-337">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-337">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-338">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-338">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="26150-339">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-339">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="26150-340">释放此进程使用的所有资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-340">Release all resources used by this process.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableRaisingEvents">
      <MemberSignature Language="C#" Value="public bool EnableRaisingEvents { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableRaisingEvents" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.EnableRaisingEvents" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableRaisingEvents As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableRaisingEvents { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Whether the process component should watch for the associated process to exit, and raise the Exited event.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-341">获取或设置在进程终止时是否应引发 <see cref="E:System.Diagnostics.Process.Exited" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-341">Gets or sets whether the <see cref="E:System.Diagnostics.Process.Exited" /> event should be raised when the process terminates.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-342">如果关联的进程终止（通过退出或者调用 <see cref="M:System.Diagnostics.Process.Kill" />）时应引发 <see cref="E:System.Diagnostics.Process.Exited" /> 事件，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-342">
              <see langword="true" /> if the <see cref="E:System.Diagnostics.Process.Exited" /> event should be raised when the associated process is terminated (through either an exit or a call to <see cref="M:System.Diagnostics.Process.Kill" />); otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="26150-343">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-343">The default is <see langword="false" />.</span>
          </span>
          <span data-ttu-id="26150-344">请注意，<see cref="E:System.Diagnostics.Process.Exited" />引发事件即使的值<see cref="P:System.Diagnostics.Process.EnableRaisingEvents" />是<see langword="false" />时在进程退出期间或在用户执行之前<see cref="P:System.Diagnostics.Process.HasExited" />检查。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-344">Note that the <see cref="E:System.Diagnostics.Process.Exited" /> event is raised even if the value of <see cref="P:System.Diagnostics.Process.EnableRaisingEvents" /> is <see langword="false" /> when the process exits during or before the user performs a <see cref="P:System.Diagnostics.Process.HasExited" /> check.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
<span data-ttu-id="26150-345"><xref:System.Diagnostics.Process.EnableRaisingEvents%2A>属性提供的建议当操作系统已关闭进程时是否应通知该组件。</span><span class="sxs-lookup"><span data-stu-id="26150-345">The <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> property suggests whether the component should be notified when the operating system has shut down a process.</span></span> <span data-ttu-id="26150-346"><xref:System.Diagnostics.Process.EnableRaisingEvents%2A>属性用于在异步处理，以通知应用程序进程已退出。</span><span class="sxs-lookup"><span data-stu-id="26150-346">The <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> property is used in asynchronous processing to notify your application that a process has exited.</span></span> <span data-ttu-id="26150-347">若要强制应用程序同步等待退出事件 （它中断的应用程序处理，直到退出事件发生为止），请使用<xref:System.Diagnostics.Process.WaitForExit%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="26150-347">To force your application to synchronously wait for an exit event (which interrupts processing of the application until the exit event has occurred), use the <xref:System.Diagnostics.Process.WaitForExit%2A> method.</span></span>

> [!NOTE]
> <span data-ttu-id="26150-348">如果你使用 Visual Studio 并双击<xref:System.Diagnostics.Process>组件在项目中，<xref:System.Diagnostics.Process.Exited>自动生成事件委托和事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="26150-348">If you're using Visual Studio and double-click a <xref:System.Diagnostics.Process> component in your project, an <xref:System.Diagnostics.Process.Exited> event delegate and event handler are automatically generated.</span></span> <span data-ttu-id="26150-349">其他代码集<xref:System.Diagnostics.Process.EnableRaisingEvents%2A>属性`false`。</span><span class="sxs-lookup"><span data-stu-id="26150-349">Additional code sets the <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> property to `false`.</span></span> <span data-ttu-id="26150-350">必须更改此属性设置为`true`对事件处理程序时要执行关联的进程退出。</span><span class="sxs-lookup"><span data-stu-id="26150-350">You must change this property to `true` for your event handler to execute when the associated process exits.</span></span>

<span data-ttu-id="26150-351">如果组件的<xref:System.Diagnostics.Process.EnableRaisingEvents%2A>值是`true`，或当<xref:System.Diagnostics.Process.EnableRaisingEvents%2A>是`false`和<xref:System.Diagnostics.Process.HasExited%2A>检查调用由组件，组件可以访问关联的进程，后者仍然的管理信息存储由操作系统。</span><span class="sxs-lookup"><span data-stu-id="26150-351">If the component's <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> value is `true`, or when <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> is `false` and a <xref:System.Diagnostics.Process.HasExited%2A> check is invoked by the component, the component can access the administrative information for the associated process, which remains stored by the operating system.</span></span> <span data-ttu-id="26150-352">此类信息包括<xref:System.Diagnostics.Process.ExitTime%2A>和<xref:System.Diagnostics.Process.ExitCode%2A>。</span><span class="sxs-lookup"><span data-stu-id="26150-352">Such information includes the <xref:System.Diagnostics.Process.ExitTime%2A> and the <xref:System.Diagnostics.Process.ExitCode%2A>.</span></span>

<span data-ttu-id="26150-353">关联的进程退出后，则<xref:System.Diagnostics.Process.Handle%2A>的组件不再指向现有进程资源。</span><span class="sxs-lookup"><span data-stu-id="26150-353">After the associated process exits, the <xref:System.Diagnostics.Process.Handle%2A> of the component no longer points to an existing process resource.</span></span> <span data-ttu-id="26150-354">相反，它可以仅用于访问有关的进程资源的操作系统的信息。</span><span class="sxs-lookup"><span data-stu-id="26150-354">Instead, it can only be used to access the operating system's information about the process resource.</span></span> <span data-ttu-id="26150-355">操作系统已注意到有尚未通过已发布的已退出进程的句柄<xref:System.Diagnostics.Process>组件，因此它会保留<xref:System.Diagnostics.Process.ExitTime%2A>和<xref:System.Diagnostics.Process.Handle%2A>内存中的信息。</span><span class="sxs-lookup"><span data-stu-id="26150-355">The operating system is aware that there are handles to exited processes that haven't been released by <xref:System.Diagnostics.Process> components, so it keeps the <xref:System.Diagnostics.Process.ExitTime%2A> and <xref:System.Diagnostics.Process.Handle%2A> information in memory.</span></span>

<span data-ttu-id="26150-356">没有监视进程的退出会带来开销。</span><span class="sxs-lookup"><span data-stu-id="26150-356">There's a cost associated with watching for a process to exit.</span></span> <span data-ttu-id="26150-357">如果<xref:System.Diagnostics.Process.EnableRaisingEvents%2A>是`true`、<xref:System.Diagnostics.Process.Exited>在关联的进程终止时，将引发事件。</span><span class="sxs-lookup"><span data-stu-id="26150-357">If <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> is `true`, the <xref:System.Diagnostics.Process.Exited> event is raised when the associated process terminates.</span></span> <span data-ttu-id="26150-358">程序<xref:System.Diagnostics.Process.Exited>在该时间运行的事件。</span><span class="sxs-lookup"><span data-stu-id="26150-358">Your procedures for the <xref:System.Diagnostics.Process.Exited> event run at that time.</span></span>

<span data-ttu-id="26150-359">有时，你的应用程序将启动一个进程，但不需要其闭包的通知。</span><span class="sxs-lookup"><span data-stu-id="26150-359">Sometimes, your application starts a process but doesn't require notification of its closure.</span></span> <span data-ttu-id="26150-360">例如，你的应用程序可以启动记事本以允许用户执行文本的编辑，但没有任何进一步利用记事本应用程序。</span><span class="sxs-lookup"><span data-stu-id="26150-360">For example, your application can start Notepad to allow the user to perform text editing but make no further use of the Notepad application.</span></span> <span data-ttu-id="26150-361">你可以选择在进程退出，因为它不是与你的应用程序的持续操作时避免通知。</span><span class="sxs-lookup"><span data-stu-id="26150-361">You can choose to avoid notification when the process exits because it's not relevant to the continued operation of your application.</span></span> <span data-ttu-id="26150-362">设置<xref:System.Diagnostics.Process.EnableRaisingEvents%2A>到`false`可以节省系统资源。</span><span class="sxs-lookup"><span data-stu-id="26150-362">Setting <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> to `false` can save system resources.</span></span>

## Examples  
<span data-ttu-id="26150-363">下面的代码示例创建输出文件的进程。</span><span class="sxs-lookup"><span data-stu-id="26150-363">The following code example creates a process that prints a file.</span></span> <span data-ttu-id="26150-364">它将设置<xref:System.Diagnostics.Process.EnableRaisingEvents%2A>属性以使该进程引发<xref:System.Diagnostics.Process.Exited>退出时的事件。</span><span class="sxs-lookup"><span data-stu-id="26150-364">It sets the <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> property to cause the process to raise the <xref:System.Diagnostics.Process.Exited> event when it exits.</span></span> <span data-ttu-id="26150-365"><xref:System.Diagnostics.Process.Exited>事件处理程序会显示进程信息。</span><span class="sxs-lookup"><span data-stu-id="26150-365">The <xref:System.Diagnostics.Process.Exited> event handler displays process information.</span></span>

[!code-csharp[System.Diagnostics.Process.EnableExited#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Process.EnableExited/CS/processexitedevent.cs#1)]   
[!code-vb[System.Diagnostics.Process.EnableExited#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Process.EnableExited/VB/processexitedevent.vb#1)]   
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-366">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-366">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-367">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-367">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Diagnostics.Process.WaitForExit(System.Int32)" />
        <altmember cref="E:System.Diagnostics.Process.Exited" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
        <altmember cref="P:System.Diagnostics.Process.Handle" />
        <altmember cref="P:System.Diagnostics.Process.ExitTime" />
        <altmember cref="P:System.Diagnostics.Process.HasExited" />
      </Docs>
    </Member>
    <Member MemberName="EnterDebugMode">
      <MemberSignature Language="C#" Value="public static void EnterDebugMode ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnterDebugMode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.EnterDebugMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EnterDebugMode ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EnterDebugMode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="26150-368">通过启用当前线程的本机属性 <see langword="SeDebugPrivilege" />，将 <see cref="T:System.Diagnostics.Process" /> 组件置于与以特殊模式运行的操作系统进程交互的状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-368">Puts a <see cref="T:System.Diagnostics.Process" /> component in state to interact with operating system processes that run in a special mode by enabling the native property <see langword="SeDebugPrivilege" /> on the current thread.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-369">以特殊模式运行某些操作系统进程。</span><span class="sxs-lookup"><span data-stu-id="26150-369">Some operating system processes run in a special mode.</span></span> <span data-ttu-id="26150-370">尝试读取的属性或将附加到这些进程不能除非你调用了<xref:System.Diagnostics.Process.EnterDebugMode%2A>组件上。</span><span class="sxs-lookup"><span data-stu-id="26150-370">Attempting to read properties of or attach to these processes is not possible unless you have called <xref:System.Diagnostics.Process.EnterDebugMode%2A> on the component.</span></span> <span data-ttu-id="26150-371">调用<xref:System.Diagnostics.Process.LeaveDebugMode%2A>不再需要对这些特殊模式运行的进程的访问。</span><span class="sxs-lookup"><span data-stu-id="26150-371">Call <xref:System.Diagnostics.Process.LeaveDebugMode%2A> when you no longer need access to these processes that run in special mode.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-372">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-372">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-373">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-373">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Diagnostics.Process.LeaveDebugMode" />
      </Docs>
    </Member>
    <Member MemberName="ErrorDataReceived">
      <MemberSignature Language="C#" Value="public event System.Diagnostics.DataReceivedEventHandler ErrorDataReceived;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Diagnostics.DataReceivedEventHandler ErrorDataReceived" />
      <MemberSignature Language="DocId" Value="E:System.Diagnostics.Process.ErrorDataReceived" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ErrorDataReceived As DataReceivedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Diagnostics::DataReceivedEventHandler ^ ErrorDataReceived;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Indicates if the process component is associated with a real process.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.DataReceivedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-374">当应用程序写入其重定向 <see cref="P:System.Diagnostics.Process.StandardError" /> 流中时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-374">Occurs when an application writes to its redirected <see cref="P:System.Diagnostics.Process.StandardError" /> stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-375"><xref:System.Diagnostics.Process.ErrorDataReceived>事件指示关联的进程已写入其重定向<xref:System.Diagnostics.Process.StandardError%2A>流。</span><span class="sxs-lookup"><span data-stu-id="26150-375">The <xref:System.Diagnostics.Process.ErrorDataReceived> event indicates that the associated process has written to its redirected <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span>  
  
 <span data-ttu-id="26150-376">事件只能在进行异步读取操作上<xref:System.Diagnostics.Process.StandardError%2A>。</span><span class="sxs-lookup"><span data-stu-id="26150-376">The event only occurs during asynchronous read operations on <xref:System.Diagnostics.Process.StandardError%2A>.</span></span> <span data-ttu-id="26150-377">若要开始异步读取的操作，必须重定向<xref:System.Diagnostics.Process.StandardError%2A>流<xref:System.Diagnostics.Process>，添加到事件处理程序<xref:System.Diagnostics.Process.ErrorDataReceived>事件，并调用<xref:System.Diagnostics.Process.BeginErrorReadLine%2A>。</span><span class="sxs-lookup"><span data-stu-id="26150-377">To start asynchronous read operations, you must redirect the <xref:System.Diagnostics.Process.StandardError%2A> stream of a <xref:System.Diagnostics.Process>, add your event handler to the <xref:System.Diagnostics.Process.ErrorDataReceived> event, and call <xref:System.Diagnostics.Process.BeginErrorReadLine%2A>.</span></span> <span data-ttu-id="26150-378">此后，<xref:System.Diagnostics.Process.ErrorDataReceived>事件信号进程写入到的重定向行每次<xref:System.Diagnostics.Process.StandardError%2A>流式传输，直到该进程退出，或调用<xref:System.Diagnostics.Process.CancelErrorRead%2A>。</span><span class="sxs-lookup"><span data-stu-id="26150-378">Thereafter, the <xref:System.Diagnostics.Process.ErrorDataReceived> event signals each time the process writes a line to the redirected <xref:System.Diagnostics.Process.StandardError%2A> stream, until the process exits or calls <xref:System.Diagnostics.Process.CancelErrorRead%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-379">正在处理的异步输出应用程序应调用<xref:System.Diagnostics.Process.WaitForExit>方法，以确保已刷新输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="26150-379">The application that is processing the asynchronous output should call the <xref:System.Diagnostics.Process.WaitForExit> method to ensure that the output buffer has been flushed.</span></span> <span data-ttu-id="26150-380">请注意通过使用该指定超时<xref:System.Diagnostics.Process.WaitForExit(System.Int32)>重载未*不*确保已刷新输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="26150-380">Note that specifying a timeout by using the <xref:System.Diagnostics.Process.WaitForExit(System.Int32)> overload does *not* ensure the output buffer has been flushed.</span></span>
  
   
  
## Examples  
 <span data-ttu-id="26150-381">下面的示例使用`net view`命令以列出在远程计算机上的可用的网络资源。</span><span class="sxs-lookup"><span data-stu-id="26150-381">The following example uses the `net view` command to list the available network resources on a remote computer.</span></span> <span data-ttu-id="26150-382">在用户提供的目标计算机名称作为命令行自变量。</span><span class="sxs-lookup"><span data-stu-id="26150-382">The user supplies the target computer name as a command-line argument.</span></span> <span data-ttu-id="26150-383">用户还可以提供错误输出的文件名称。</span><span class="sxs-lookup"><span data-stu-id="26150-383">The user can also supply a file name for error output.</span></span> <span data-ttu-id="26150-384">该示例收集的 net 命令、 等待进程完成，然后写入到控制台的输出结果的输出。</span><span class="sxs-lookup"><span data-stu-id="26150-384">The example collects the output of the net command, waits for the process to finish, and then writes the output results to the console.</span></span> <span data-ttu-id="26150-385">如果在用户提供的可选错误文件，该示例会将错误写入文件。</span><span class="sxs-lookup"><span data-stu-id="26150-385">If the user supplies the optional error file, the example writes errors to the file.</span></span>  
  
 [!code-cpp[Process_AsyncStreams#2](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/net_async.cpp#2)]
 [!code-csharp[Process_AsyncStreams#2](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/net_async.cs#2)]
 [!code-vb[Process_AsyncStreams#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/net_async.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-386">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-386">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-387">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-387">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" />
        <altmember cref="P:System.Diagnostics.Process.StandardError" />
        <altmember cref="M:System.Diagnostics.Process.BeginErrorReadLine" />
        <altmember cref="M:System.Diagnostics.Process.CancelErrorRead" />
        <altmember cref="T:System.Diagnostics.DataReceivedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="ExitCode">
      <MemberSignature Language="C#" Value="public int ExitCode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ExitCode" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.ExitCode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExitCode As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ExitCode { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The value returned from the associated process when it terminated.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-388">获取关联进程终止时指定的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-388">Gets the value that the associated process specified when it terminated.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-389">关联进程终止时指定的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-389">The code that the associated process specified when it terminated.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-390">使用<xref:System.Diagnostics.Process.ExitCode%2A>来获取系统过程返回时退出该循环的状态。</span><span class="sxs-lookup"><span data-stu-id="26150-390">Use <xref:System.Diagnostics.Process.ExitCode%2A> to get the status that the system process returned when it exited.</span></span> <span data-ttu-id="26150-391">您可以使用的退出代码更像一个整数，返回值从`main()`过程。</span><span class="sxs-lookup"><span data-stu-id="26150-391">You can use the exit code much like an integer return value from a `main()` procedure.</span></span>  
  
 <span data-ttu-id="26150-392"><xref:System.Diagnostics.Process.ExitCode%2A>进程反映该进程的应用程序开发人员实现的特定约定的值。</span><span class="sxs-lookup"><span data-stu-id="26150-392">The <xref:System.Diagnostics.Process.ExitCode%2A> value for a process reflects the specific convention implemented by the application developer for that process.</span></span> <span data-ttu-id="26150-393">如果你使用的退出代码值在你的代码中进行决策，请确保你知道使用应用程序进程的退出代码约定。</span><span class="sxs-lookup"><span data-stu-id="26150-393">If you use the exit code value to make decisions in your code, be sure that you know the exit code convention used by the application process.</span></span>  
  
 <span data-ttu-id="26150-394">开发人员通常表明成功退出<xref:System.Diagnostics.Process.ExitCode%2A>值调用的方法可用于确定异常的进程终止原因的非零值零，并且指定的错误。</span><span class="sxs-lookup"><span data-stu-id="26150-394">Developers usually indicate a successful exit by an <xref:System.Diagnostics.Process.ExitCode%2A> value of zero, and designate errors by nonzero values that the calling method can use to identify the cause of an abnormal process termination.</span></span> <span data-ttu-id="26150-395">不需要遵循这些指导原则，但它们约定。</span><span class="sxs-lookup"><span data-stu-id="26150-395">It is not necessary to follow these guidelines, but they are the convention.</span></span>  
  
 <span data-ttu-id="26150-396">如果你尝试获取<xref:System.Diagnostics.Process.ExitCode%2A>该进程已退出之前，尝试将引发异常。</span><span class="sxs-lookup"><span data-stu-id="26150-396">If you try to get the <xref:System.Diagnostics.Process.ExitCode%2A> before the process has exited, the attempt throws an exception.</span></span> <span data-ttu-id="26150-397">检查<xref:System.Diagnostics.Process.HasExited%2A>属性首先以验证是否已终止关联的进程。</span><span class="sxs-lookup"><span data-stu-id="26150-397">Examine the <xref:System.Diagnostics.Process.HasExited%2A> property first to verify whether the associated process has terminated.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-398">当已重标准输出定向到异步事件处理程序中时，有可能，输出处理还未完成时<xref:System.Diagnostics.Process.HasExited%2A>返回`true`。</span><span class="sxs-lookup"><span data-stu-id="26150-398">When standard output has been redirected to asynchronous event handlers, it is possible that output processing will not have completed when <xref:System.Diagnostics.Process.HasExited%2A> returns `true`.</span></span> <span data-ttu-id="26150-399">若要确保已完成异步事件处理，调用<xref:System.Diagnostics.Process.WaitForExit>在检查之前不接受任何参数的重载<xref:System.Diagnostics.Process.HasExited%2A>。</span><span class="sxs-lookup"><span data-stu-id="26150-399">To ensure that asynchronous event handling has been completed, call the <xref:System.Diagnostics.Process.WaitForExit> overload that takes no parameter before checking <xref:System.Diagnostics.Process.HasExited%2A>.</span></span>  
  
 <span data-ttu-id="26150-400">你可以使用<xref:System.Diagnostics.Process.CloseMainWindow%2A>或<xref:System.Diagnostics.Process.Kill%2A>方法，使关联的进程退出。</span><span class="sxs-lookup"><span data-stu-id="26150-400">You can use the <xref:System.Diagnostics.Process.CloseMainWindow%2A> or the <xref:System.Diagnostics.Process.Kill%2A> method to cause an associated process to exit.</span></span>  
  
 <span data-ttu-id="26150-401">关联的进程退出时收到通知的两种方式： 同步和异步方式。</span><span class="sxs-lookup"><span data-stu-id="26150-401">There are two ways of being notified when the associated process exits: synchronously and asynchronously.</span></span> <span data-ttu-id="26150-402">同步通知依赖于调用<xref:System.Diagnostics.Process.WaitForExit%2A>方法来暂停应用程序处理，直到退出关联的组件。</span><span class="sxs-lookup"><span data-stu-id="26150-402">Synchronous notification relies on calling the <xref:System.Diagnostics.Process.WaitForExit%2A> method to pause the processing of your application until the associated component exits.</span></span> <span data-ttu-id="26150-403">异步通知依赖于<xref:System.Diagnostics.Process.Exited>事件。</span><span class="sxs-lookup"><span data-stu-id="26150-403">Asynchronous notification relies on the <xref:System.Diagnostics.Process.Exited> event.</span></span> <span data-ttu-id="26150-404">使用异步通知时<xref:System.Diagnostics.Process.EnableRaisingEvents%2A>必须设置为`true`为<xref:System.Diagnostics.Process>组件可以接收该进程已退出的通知。</span><span class="sxs-lookup"><span data-stu-id="26150-404">When using asynchronous notification, <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> must be set to `true` for the <xref:System.Diagnostics.Process> component to receive notification that the process has exited.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-405">以下示例启动记事本实例。</span><span class="sxs-lookup"><span data-stu-id="26150-405">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="26150-406">该示例然后检索并显示关联的进程的各种属性。</span><span class="sxs-lookup"><span data-stu-id="26150-406">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="26150-407">该示例检测时在进程退出，并显示进程的退出代码。</span><span class="sxs-lookup"><span data-stu-id="26150-407">The example detects when the process exits, and displays the process's exit code.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-408">进程尚未退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-408">The process has not exited.</span>
          </span>
          <span data-ttu-id="26150-409">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-409">-or-</span>
          </span>
          <span data-ttu-id="26150-410">进程 <see cref="P:System.Diagnostics.Process.Handle" /> 无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-410">The process <see cref="P:System.Diagnostics.Process.Handle" /> is not valid.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="26150-411">你正尝试访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.ExitCode" /> 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-411">You are trying to access the <see cref="P:System.Diagnostics.Process.ExitCode" /> property for a process that is running on a remote computer.</span>
          </span>
          <span data-ttu-id="26150-412">此属性仅可用于本地计算机上运行的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-412">This property is available only for processes that are running on the local computer.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-413">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-413">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-414">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-414">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.HasExited" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
        <altmember cref="M:System.Diagnostics.Process.WaitForExit(System.Int32)" />
        <altmember cref="P:System.Diagnostics.Process.EnableRaisingEvents" />
      </Docs>
    </Member>
    <Member MemberName="Exited">
      <MemberSignature Language="C#" Value="public event EventHandler Exited;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Exited" />
      <MemberSignature Language="DocId" Value="E:System.Diagnostics.Process.Exited" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Exited As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Exited;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("If the WatchForExit property is set to true, then this event is raised when the associated process exits.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-415">在进程退出时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-415">Occurs when a process exits.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-416"><xref:System.Diagnostics.Process.Exited>事件指示关联的进程退出。</span><span class="sxs-lookup"><span data-stu-id="26150-416">The <xref:System.Diagnostics.Process.Exited> event indicates that the associated process exited.</span></span> <span data-ttu-id="26150-417">此事件意味着任一进程终止 （中止） 或已成功关闭。</span><span class="sxs-lookup"><span data-stu-id="26150-417">This occurrence means either that the process terminated (aborted) or successfully closed.</span></span> <span data-ttu-id="26150-418">仅当，可能发生此事件的值<xref:System.Diagnostics.Process.EnableRaisingEvents%2A>属性是`true`。</span><span class="sxs-lookup"><span data-stu-id="26150-418">This event can occur only if the value of the <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> property is `true`.</span></span>  
  
 <span data-ttu-id="26150-419">关联的进程退出时收到通知的两种方式： 同步和异步方式。</span><span class="sxs-lookup"><span data-stu-id="26150-419">There are two ways of being notified when the associated process exits: synchronously and asynchronously.</span></span> <span data-ttu-id="26150-420">同步通知意味着调用<xref:System.Diagnostics.Process.WaitForExit%2A>方法进行阻止当前线程，直到在进程退出。</span><span class="sxs-lookup"><span data-stu-id="26150-420">Synchronous notification means calling the <xref:System.Diagnostics.Process.WaitForExit%2A> method to block the current thread until the process exits.</span></span> <span data-ttu-id="26150-421">异步通知使用<xref:System.Diagnostics.Process.Exited>事件，允许调用线程继续在此期间执行。</span><span class="sxs-lookup"><span data-stu-id="26150-421">Asynchronous notification uses the <xref:System.Diagnostics.Process.Exited> event, which allows the calling thread to continue execution in the meantime.</span></span> <span data-ttu-id="26150-422">在后一种情况下，<xref:System.Diagnostics.Process.EnableRaisingEvents%2A>必须设置为`true`调用应用程序中，若要对 Exited 事件进行接收。</span><span class="sxs-lookup"><span data-stu-id="26150-422">In the latter case, <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> must be set to `true` for the calling application to receive the Exited event.</span></span>  
  
 <span data-ttu-id="26150-423">当操作系统关闭进程时，它将通知所有已注册 Exited 事件的处理其他进程。</span><span class="sxs-lookup"><span data-stu-id="26150-423">When the operating system shuts down a process, it notifies all other processes that have registered handlers for the Exited event.</span></span> <span data-ttu-id="26150-424">在此期间，只需退出进程的句柄可以用于访问某些属性如<xref:System.Diagnostics.Process.ExitTime%2A>和<xref:System.Diagnostics.Process.HasExited%2A>操作系统维护，直到它完全释放该句柄。</span><span class="sxs-lookup"><span data-stu-id="26150-424">At this time, the handle of the process that just exited can be used to access some properties such as  <xref:System.Diagnostics.Process.ExitTime%2A> and <xref:System.Diagnostics.Process.HasExited%2A> that the operating system maintains until it releases that handle completely.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-425">即使你具有已退出的进程的句柄，不能调用<xref:System.Diagnostics.Process.Start%2A>以重新连接到相同的进程。</span><span class="sxs-lookup"><span data-stu-id="26150-425">Even if you have a handle to an exited process, you cannot call <xref:System.Diagnostics.Process.Start%2A> again to reconnect to the same process.</span></span> <span data-ttu-id="26150-426">调用<xref:System.Diagnostics.Process.Start%2A>自动释放关联的进程并与同一个文件，但为全新连接到进程<xref:System.Diagnostics.Process.Handle%2A>。</span><span class="sxs-lookup"><span data-stu-id="26150-426">Calling <xref:System.Diagnostics.Process.Start%2A> automatically releases the associated process and connects to a process with the same file but an entirely new <xref:System.Diagnostics.Process.Handle%2A>.</span></span>  
  
 <span data-ttu-id="26150-427">有关使用有关的详细信息<xref:System.Diagnostics.Process.Exited>事件在 Windows 窗体应用程序，请参阅<xref:System.Diagnostics.Process.SynchronizingObject%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="26150-427">For more information about the use of the <xref:System.Diagnostics.Process.Exited> event in Windows Forms applications, see the <xref:System.Diagnostics.Process.SynchronizingObject%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-428">下面的代码示例创建输出文件的进程。</span><span class="sxs-lookup"><span data-stu-id="26150-428">The following code example creates a process that prints a file.</span></span> <span data-ttu-id="26150-429">它会发出<xref:System.Diagnostics.Process.Exited>事件时在进程退出因为<xref:System.Diagnostics.Process.EnableRaisingEvents%2A>时创建的过程已设置属性。</span><span class="sxs-lookup"><span data-stu-id="26150-429">It raises the <xref:System.Diagnostics.Process.Exited> event when the process exits because the <xref:System.Diagnostics.Process.EnableRaisingEvents%2A> property was set when the process was created.</span></span> <span data-ttu-id="26150-430"><xref:System.Diagnostics.Process.Exited>事件处理程序会显示进程信息。</span><span class="sxs-lookup"><span data-stu-id="26150-430">The <xref:System.Diagnostics.Process.Exited> event handler displays process information.</span></span>  
  
 [!code-csharp[System.Diagnostics.Process.EnableExited#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Process.EnableExited/CS/processexitedevent.cs#1)]
 [!code-vb[System.Diagnostics.Process.EnableExited#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Process.EnableExited/VB/processexitedevent.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-431">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-431">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-432">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-432">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="ExitTime">
      <MemberSignature Language="C#" Value="public DateTime ExitTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime ExitTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.ExitTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExitTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime ExitTime { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The time that the associated process exited.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-433">获取关联进程退出的时间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-433">Gets the time that the associated process exited.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-434">
            <see cref="T:System.DateTime" />，它指示关联进程终止的时间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-434">A <see cref="T:System.DateTime" /> that indicates when the associated process was terminated.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-435">如果未终止过程，尝试检索<xref:System.Diagnostics.Process.ExitTime%2A>属性引发异常。</span><span class="sxs-lookup"><span data-stu-id="26150-435">If the process has not terminated, attempting to retrieve the <xref:System.Diagnostics.Process.ExitTime%2A> property throws an exception.</span></span> <span data-ttu-id="26150-436">使用<xref:System.Diagnostics.Process.HasExited%2A>之前获取<xref:System.Diagnostics.Process.ExitTime%2A>属性来确定是否已终止关联的进程。</span><span class="sxs-lookup"><span data-stu-id="26150-436">Use <xref:System.Diagnostics.Process.HasExited%2A> before getting the <xref:System.Diagnostics.Process.ExitTime%2A> property to determine whether the associated process has terminated.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-437">下面的代码示例创建输出文件的进程。</span><span class="sxs-lookup"><span data-stu-id="26150-437">The following code example creates a process that prints a file.</span></span> <span data-ttu-id="26150-438">进程引发<xref:System.Diagnostics.Process.Exited>事件时退出，并在事件处理程序显示<xref:System.Diagnostics.Process.ExitTime%2A>属性和其他进程的信息。</span><span class="sxs-lookup"><span data-stu-id="26150-438">The process raises the <xref:System.Diagnostics.Process.Exited> event when it exits, and the event handler displays the <xref:System.Diagnostics.Process.ExitTime%2A> property and other process information.</span></span>  
  
 [!code-csharp[System.Diagnostics.Process.EnableExited#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Process.EnableExited/CS/processexitedevent.cs#1)]
 [!code-vb[System.Diagnostics.Process.EnableExited#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Process.EnableExited/VB/processexitedevent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-439">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-439">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="26150-440">你正尝试访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.ExitTime" /> 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-440">You are trying to access the <see cref="P:System.Diagnostics.Process.ExitTime" /> property for a process that is running on a remote computer.</span>
          </span>
          <span data-ttu-id="26150-441">此属性仅可用于本地计算机上运行的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-441">This property is available only for processes that are running on the local computer.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-442">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-442">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-443">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-443">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.Handle" />
        <altmember cref="P:System.Diagnostics.Process.ExitCode" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentProcess">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process GetCurrentProcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process GetCurrentProcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.GetCurrentProcess" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCurrentProcess () As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Process ^ GetCurrentProcess();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="26150-444">获取新的 <see cref="T:System.Diagnostics.Process" /> 组件并将其与当前活动的进程关联。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-444">Gets a new <see cref="T:System.Diagnostics.Process" /> component and associates it with the currently active process.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="26150-445">与运行调用应用程序的进程资源关联的新的 <see cref="T:System.Diagnostics.Process" /> 组件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-445">A new <see cref="T:System.Diagnostics.Process" /> component associated with the process resource that is running the calling application.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-446">使用此方法创建一个新<xref:System.Diagnostics.Process>实例，并将其与本地计算机上的进程资源关联。</span><span class="sxs-lookup"><span data-stu-id="26150-446">Use this method to create a new <xref:System.Diagnostics.Process> instance and associate it with the process resource on the local computer.</span></span>  
  
 <span data-ttu-id="26150-447">如类似<xref:System.Diagnostics.Process.GetProcessById%2A>， <xref:System.Diagnostics.Process.GetProcessesByName%2A>，和<xref:System.Diagnostics.Process.GetProcesses%2A>方法，<xref:System.Diagnostics.Process.GetCurrentProcess%2A>将现有的资源与新关联<xref:System.Diagnostics.Process>组件。</span><span class="sxs-lookup"><span data-stu-id="26150-447">Like the similar <xref:System.Diagnostics.Process.GetProcessById%2A>, <xref:System.Diagnostics.Process.GetProcessesByName%2A>, and <xref:System.Diagnostics.Process.GetProcesses%2A> methods, <xref:System.Diagnostics.Process.GetCurrentProcess%2A> associates an existing resource with a new <xref:System.Diagnostics.Process> component.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-448">下面的示例检索当前进程的信息在本地计算机，记事本本地计算机和在本地计算机上的特定进程上运行的所有实例上运行的进程。</span><span class="sxs-lookup"><span data-stu-id="26150-448">The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</span></span> <span data-ttu-id="26150-449">然后，它将检索远程计算机上的相同的过程信息。</span><span class="sxs-lookup"><span data-stu-id="26150-449">It then retrieves information for the same processes on a remote computer.</span></span>  
  
 [!code-cpp[Process.GetProcesses_noexception#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.GetProcesses_noexception/CPP/processstaticget.cpp#1)]
 [!code-csharp[Process.GetProcesses_noexception#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.GetProcesses_noexception/CS/processstaticget.cs#1)]
 [!code-vb[Process.GetProcesses_noexception#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.GetProcesses_noexception/VB/processstaticget.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-450">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-450">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-451">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-451">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessesByName(System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcesses" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProcessById">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="26150-452">创建新的 <see cref="T:System.Diagnostics.Process" /> 组件，并将其与您指定的现有进程资源关联。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-452">Creates a new <see cref="T:System.Diagnostics.Process" /> component, and associates it with the existing process resource that you specify.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProcessById">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process GetProcessById (int processId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process GetProcessById(int32 processId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.GetProcessById(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetProcessById (processId As Integer) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Process ^ GetProcessById(int processId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="processId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="processId">
          <span data-ttu-id="26150-453">进程资源的系统唯一标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-453">The system-unique identifier of a process resource.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="26150-454">返回新的 <see cref="T:System.Diagnostics.Process" /> 组件(给定本地计算机上某个进程的标识符)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-454">Returns a new <see cref="T:System.Diagnostics.Process" /> component, given the identifier of a process on the local computer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="26150-455">与 <paramref name="processId" /> 参数标识的本地进程资源关联的 <see cref="T:System.Diagnostics.Process" /> 组件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-455">A <see cref="T:System.Diagnostics.Process" /> component that is associated with the local process resource identified by the <paramref name="processId" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-456">使用此方法创建一个新<xref:System.Diagnostics.Process>组件并将它与本地计算机上的进程资源关联。</span><span class="sxs-lookup"><span data-stu-id="26150-456">Use this method to create a new <xref:System.Diagnostics.Process> component and associate it with a process resource on the local computer.</span></span> <span data-ttu-id="26150-457">进程资源必须已经存在的计算机上，因为<xref:System.Diagnostics.Process.GetProcessById%28System.Int32%29>不会创建一个系统资源，但而是将资源与应用程序生成相关联<xref:System.Diagnostics.Process>组件。</span><span class="sxs-lookup"><span data-stu-id="26150-457">The process resource must already exist on the computer, because <xref:System.Diagnostics.Process.GetProcessById%28System.Int32%29> does not create a system resource, but rather associates a resource with an application-generated <xref:System.Diagnostics.Process> component.</span></span> <span data-ttu-id="26150-458">进程<xref:System.Diagnostics.Process.Id%2A>可以检索仅为当前计算机运行的进程。</span><span class="sxs-lookup"><span data-stu-id="26150-458">A process <xref:System.Diagnostics.Process.Id%2A> can be retrieved only for a process that is currently running on the computer.</span></span> <span data-ttu-id="26150-459">在进程终止后，<xref:System.Diagnostics.Process.GetProcessById%28System.Int32%29>时将其传递一个过期的标识符引发异常。</span><span class="sxs-lookup"><span data-stu-id="26150-459">After the process terminates, <xref:System.Diagnostics.Process.GetProcessById%28System.Int32%29> throws an exception if you pass it an expired identifier.</span></span>  
  
 <span data-ttu-id="26150-460">任何特定计算机上进程的标识符是唯一的。</span><span class="sxs-lookup"><span data-stu-id="26150-460">On any particular computer, the identifier of a process is unique.</span></span> <span data-ttu-id="26150-461"><xref:System.Diagnostics.Process.GetProcessById%28System.Int32%29> 最多返回一个进程。</span><span class="sxs-lookup"><span data-stu-id="26150-461"><xref:System.Diagnostics.Process.GetProcessById%28System.Int32%29> returns one process at most.</span></span> <span data-ttu-id="26150-462">如果你想要获取运行特定应用程序，使用的所有进程<xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29>。</span><span class="sxs-lookup"><span data-stu-id="26150-462">If you want to get all the processes running a particular application, use <xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29>.</span></span> <span data-ttu-id="26150-463">如果运行指定的应用程序的计算机上存在多个进程<xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29>返回数组，其中包含所有关联的进程。</span><span class="sxs-lookup"><span data-stu-id="26150-463">If multiple processes exist on the computer running the specified application, <xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29> returns an array containing all the associated processes.</span></span> <span data-ttu-id="26150-464">你可以查询每个标识符反过来这些进程。</span><span class="sxs-lookup"><span data-stu-id="26150-464">You can query each of these processes in turn for its identifier.</span></span> <span data-ttu-id="26150-465">可以在中查看进程标识符`Processes`面板的 Windows 任务管理器。</span><span class="sxs-lookup"><span data-stu-id="26150-465">The process identifier can be viewed in the `Processes` panel of the Windows Task Manager.</span></span> <span data-ttu-id="26150-466">`PID`列显示分配给进程的进程标识符。</span><span class="sxs-lookup"><span data-stu-id="26150-466">The `PID` column displays the process identifier that is assigned to a process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-467">下面的示例检索当前进程的信息在本地计算机，记事本本地计算机和在本地计算机上的特定进程上运行的所有实例上运行的进程。</span><span class="sxs-lookup"><span data-stu-id="26150-467">The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</span></span> <span data-ttu-id="26150-468">然后，它将检索远程计算机上的相同的过程信息。</span><span class="sxs-lookup"><span data-stu-id="26150-468">It then retrieves information for the same processes on a remote computer.</span></span>  
  
 [!code-cpp[Process.GetProcesses_noexception#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.GetProcesses_noexception/CPP/processstaticget.cpp#1)]
 [!code-csharp[Process.GetProcesses_noexception#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.GetProcesses_noexception/CS/processstaticget.cs#1)]
 [!code-vb[Process.GetProcesses_noexception#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.GetProcesses_noexception/VB/processstaticget.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="26150-469">
            <paramref name="processId" /> 参数指定的进程未运行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-469">The process specified by the <paramref name="processId" /> parameter is not running.</span>
          </span>
          <span data-ttu-id="26150-470">此标识符可能已过期。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-470">The identifier might be expired.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-471">此对象未启动该进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-471">The process was not started by this object.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-472">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-472">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-473">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-473">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.Id" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessesByName(System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcesses" />
        <altmember cref="M:System.Diagnostics.Process.GetCurrentProcess" />
      </Docs>
    </Member>
    <Member MemberName="GetProcessById">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process GetProcessById (int processId, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process GetProcessById(int32 processId, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetProcessById (processId As Integer, machineName As String) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Process ^ GetProcessById(int processId, System::String ^ machineName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("There is no support for retrieving process information from a remote machine")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="processId" Type="System.Int32" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="processId">
          <span data-ttu-id="26150-474">进程资源的系统唯一标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-474">The system-unique identifier of a process resource.</span>
          </span>
        </param>
        <param name="machineName">
          <span data-ttu-id="26150-475">网络上计算机的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-475">The name of a computer on the network.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="26150-476">返回新的 <see cref="T:System.Diagnostics.Process" /> 组件(给定进程标识符和网络中计算机的名称)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-476">Returns a new <see cref="T:System.Diagnostics.Process" /> component, given a process identifier and the name of a computer on the network.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="26150-477">与 <paramref name="processId" /> 参数标识的远程进程资源关联的 <see cref="T:System.Diagnostics.Process" /> 组件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-477">A <see cref="T:System.Diagnostics.Process" /> component that is associated with a remote process resource identified by the <paramref name="processId" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-478">使用此方法创建一个新<xref:System.Diagnostics.Process>组件并将其与网络上的远程计算机上的进程资源关联。</span><span class="sxs-lookup"><span data-stu-id="26150-478">Use this method to create a new <xref:System.Diagnostics.Process> component and associate it with a process resource on a remote computer on the network.</span></span> <span data-ttu-id="26150-479">进程资源必须已经存在在指定计算机上，因为<xref:System.Diagnostics.Process.GetProcessById%28System.Int32%2CSystem.String%29>不会创建一个系统资源，但而是将资源与应用程序生成相关联<xref:System.Diagnostics.Process>组件。</span><span class="sxs-lookup"><span data-stu-id="26150-479">The process resource must already exist on the specified computer, because <xref:System.Diagnostics.Process.GetProcessById%28System.Int32%2CSystem.String%29> does not create a system resource, but rather associates a resource with an application-generated <xref:System.Diagnostics.Process> component.</span></span> <span data-ttu-id="26150-480">进程<xref:System.Diagnostics.Process.Id%2A>可以检索仅为当前计算机运行的进程。</span><span class="sxs-lookup"><span data-stu-id="26150-480">A process <xref:System.Diagnostics.Process.Id%2A> can be retrieved only for a process that is currently running on the computer.</span></span> <span data-ttu-id="26150-481">在进程终止后，<xref:System.Diagnostics.Process.GetProcessById%28System.Int32%2CSystem.String%29>时将其传递一个过期的标识符引发异常。</span><span class="sxs-lookup"><span data-stu-id="26150-481">After the process terminates, <xref:System.Diagnostics.Process.GetProcessById%28System.Int32%2CSystem.String%29> throws an exception if you pass it an expired identifier.</span></span>  
  
 <span data-ttu-id="26150-482">任何特定计算机上进程的标识符是唯一的。</span><span class="sxs-lookup"><span data-stu-id="26150-482">On any particular computer, the identifier of a process is unique.</span></span> <span data-ttu-id="26150-483"><xref:System.Diagnostics.Process.GetProcessById%28System.Int32%2CSystem.String%29> 最多返回一个进程。</span><span class="sxs-lookup"><span data-stu-id="26150-483"><xref:System.Diagnostics.Process.GetProcessById%28System.Int32%2CSystem.String%29> returns one process at most.</span></span> <span data-ttu-id="26150-484">如果你想要获取运行特定应用程序，使用的所有进程<xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29>。</span><span class="sxs-lookup"><span data-stu-id="26150-484">If you want to get all the processes running a particular application, use <xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29>.</span></span> <span data-ttu-id="26150-485">如果运行指定的应用程序的计算机上存在多个进程<xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29>返回数组，其中包含所有关联的进程。</span><span class="sxs-lookup"><span data-stu-id="26150-485">If multiple processes exist on the computer running the specified application, <xref:System.Diagnostics.Process.GetProcessesByName%28System.String%29> returns an array containing all the associated processes.</span></span> <span data-ttu-id="26150-486">你可以查询每个标识符反过来这些进程。</span><span class="sxs-lookup"><span data-stu-id="26150-486">You can query each of these processes in turn for its identifier.</span></span> <span data-ttu-id="26150-487">可以在中查看进程标识符`Processes`面板的 Windows 任务管理器。</span><span class="sxs-lookup"><span data-stu-id="26150-487">The process identifier can be viewed in the `Processes` panel of the Windows Task Manager.</span></span> <span data-ttu-id="26150-488">`PID`列显示分配给进程的进程标识符。</span><span class="sxs-lookup"><span data-stu-id="26150-488">The `PID` column displays the process identifier that is assigned to a process.</span></span>  
  
 <span data-ttu-id="26150-489">如果不指定`machineName`，则使用本地计算机。</span><span class="sxs-lookup"><span data-stu-id="26150-489">If you do not specify a `machineName`, the local computer is used.</span></span> <span data-ttu-id="26150-490">或者，你可以通过设置`machineName`为值"。"或为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="26150-490">Alternatively, you can specify the local computer by setting `machineName` to the value "." or to an empty string ("").</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-491">下面的示例检索当前进程的信息在本地计算机，记事本本地计算机和在本地计算机上的特定进程上运行的所有实例上运行的进程。</span><span class="sxs-lookup"><span data-stu-id="26150-491">The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</span></span> <span data-ttu-id="26150-492">然后，它将检索远程计算机上的相同的过程信息。</span><span class="sxs-lookup"><span data-stu-id="26150-492">It then retrieves information for the same processes on a remote computer.</span></span>  
  
 [!code-cpp[Process.GetProcesses_noexception#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.GetProcesses_noexception/CPP/processstaticget.cpp#1)]
 [!code-csharp[Process.GetProcesses_noexception#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.GetProcesses_noexception/CS/processstaticget.cs#1)]
 [!code-vb[Process.GetProcesses_noexception#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.GetProcesses_noexception/VB/processstaticget.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="26150-493">
            <paramref name="processId" /> 参数指定的进程未运行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-493">The process specified by the <paramref name="processId" /> parameter is not running.</span>
          </span>
          <span data-ttu-id="26150-494">此标识符可能已过期。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-494">The identifier might be expired.</span>
          </span>
          <span data-ttu-id="26150-495">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-495">-or-</span>
          </span>
          <span data-ttu-id="26150-496">
            <paramref name="machineName" /> 参数的语法无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-496">The <paramref name="machineName" /> parameter syntax is invalid.</span>
          </span>
          <span data-ttu-id="26150-497">名称的长度可能为零 (0)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-497">The name might have length zero (0).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="26150-498">
            <paramref name="machineName" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-498">The <paramref name="machineName" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-499">此对象未启动该进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-499">The process was not started by this object.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-500">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-500">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-501">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-501">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.Id" />
        <altmember cref="P:System.Diagnostics.Process.MachineName" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessesByName(System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcesses" />
        <altmember cref="M:System.Diagnostics.Process.GetCurrentProcess" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProcesses">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="26150-502">创建新的 <see cref="T:System.Diagnostics.Process" /> 组件的数组，并将它们与现有进程资源关联。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-502">Creates an array of new <see cref="T:System.Diagnostics.Process" /> components and associates them with existing process resources.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProcesses">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process[] GetProcesses ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process[] GetProcesses() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.GetProcesses" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetProcesses () As Process()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Diagnostics::Process ^&gt; ^ GetProcesses();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="26150-503">为本地计算机上的每个进程资源创建一个新的 <see cref="T:System.Diagnostics.Process" /> 组件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-503">Creates a new <see cref="T:System.Diagnostics.Process" /> component for each process resource on the local computer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="26150-504">类型 <see cref="T:System.Diagnostics.Process" /> 的数组，表示本地计算机上运行的所有进程资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-504">An array of type <see cref="T:System.Diagnostics.Process" /> that represents all the process resources running on the local computer.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-505">此方法用于创建新的数组<xref:System.Diagnostics.Process>组件并将它们与本地计算机上的所有进程资源关联。</span><span class="sxs-lookup"><span data-stu-id="26150-505">Use this method to create an array of new <xref:System.Diagnostics.Process> components and associate them with all the process resources on the local computer.</span></span> <span data-ttu-id="26150-506">进程资源必须已经存在的本地计算机上，因为<xref:System.Diagnostics.Process.GetProcesses%2A>不会创建系统资源，但而是将资源与应用程序生成相关联<xref:System.Diagnostics.Process>组件。</span><span class="sxs-lookup"><span data-stu-id="26150-506">The process resources must already exist on the local computer, because <xref:System.Diagnostics.Process.GetProcesses%2A> does not create system resources but rather associates resources with application-generated <xref:System.Diagnostics.Process> components.</span></span> <span data-ttu-id="26150-507">因为操作系统本身正在运行的后台进程，此数组不为空。</span><span class="sxs-lookup"><span data-stu-id="26150-507">Because the operating system itself is running background processes, this array is never empty.</span></span>  
  
 <span data-ttu-id="26150-508">如果您不想要检索所有计算机上运行的进程，你可以通过使用来限制它们的数量<xref:System.Diagnostics.Process.GetProcessById%2A>或<xref:System.Diagnostics.Process.GetProcessesByName%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="26150-508">If you do not want to retrieve all the processes running on the computer, you can restrict their number by using the <xref:System.Diagnostics.Process.GetProcessById%2A> or <xref:System.Diagnostics.Process.GetProcessesByName%2A> method.</span></span> <span data-ttu-id="26150-509"><xref:System.Diagnostics.Process.GetProcessById%2A> 创建<xref:System.Diagnostics.Process>与由传递给该方法的进程标识符标识系统上的进程关联的组件。</span><span class="sxs-lookup"><span data-stu-id="26150-509"><xref:System.Diagnostics.Process.GetProcessById%2A> creates a <xref:System.Diagnostics.Process> component that is associated with the process identified on the system by the process identifier that you pass to the method.</span></span> <span data-ttu-id="26150-510"><xref:System.Diagnostics.Process.GetProcessesByName%2A> 创建的数组<xref:System.Diagnostics.Process>其关联的进程资源共享的可执行文件的组件你传递给方法。</span><span class="sxs-lookup"><span data-stu-id="26150-510"><xref:System.Diagnostics.Process.GetProcessesByName%2A> creates an array of <xref:System.Diagnostics.Process> components whose associated process resources share the executable file you pass to the method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-511">可以在服务主机进程 (svchost.exe) 的同一个实例中加载多个 Windows 服务。</span><span class="sxs-lookup"><span data-stu-id="26150-511">Multiple Windows services can be loaded within the same instance of the Service Host process (svchost.exe).</span></span> <span data-ttu-id="26150-512">GetProcesses 不会确定这些单个服务; 示例：为此，请参阅<xref:System.ServiceProcess.ServiceController.GetServices%2A>。</span><span class="sxs-lookup"><span data-stu-id="26150-512">GetProcesses does not identify those individual services; for that, see <xref:System.ServiceProcess.ServiceController.GetServices%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-513">下面的示例检索当前进程的信息在本地计算机，记事本本地计算机和在本地计算机上的特定进程上运行的所有实例上运行的进程。</span><span class="sxs-lookup"><span data-stu-id="26150-513">The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</span></span> <span data-ttu-id="26150-514">然后，它将检索远程计算机上的相同的过程信息。</span><span class="sxs-lookup"><span data-stu-id="26150-514">It then retrieves information for the same processes on a remote computer.</span></span>  
  
 [!code-cpp[Process.GetProcesses_noexception#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.GetProcesses_noexception/CPP/processstaticget.cpp#1)]
 [!code-csharp[Process.GetProcesses_noexception#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.GetProcesses_noexception/CS/processstaticget.cs#1)]
 [!code-vb[Process.GetProcesses_noexception#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.GetProcesses_noexception/VB/processstaticget.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-515">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-515">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-516">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-516">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.MachineName" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessesByName(System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetCurrentProcess" />
      </Docs>
    </Member>
    <Member MemberName="GetProcesses">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process[] GetProcesses (string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process[] GetProcesses(string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.GetProcesses(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetProcesses (machineName As String) As Process()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Diagnostics::Process ^&gt; ^ GetProcesses(System::String ^ machineName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("There is no support for retrieving process information from a remote machine")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="machineName">
          <span data-ttu-id="26150-517">从其中读取进程列表的计算机。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-517">The computer from which to read the list of processes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="26150-518">为指定计算机上的每个进程资源创建一个新的 <see cref="T:System.Diagnostics.Process" /> 组件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-518">Creates a new <see cref="T:System.Diagnostics.Process" /> component for each process resource on the specified computer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="26150-519">类型 <see cref="T:System.Diagnostics.Process" /> 的数组，表示指定计算机上运行的所有进程资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-519">An array of type <see cref="T:System.Diagnostics.Process" /> that represents all the process resources running on the specified computer.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-520">此方法用于创建新的数组<xref:System.Diagnostics.Process>组件并将其与指定 （通常为远程） 的计算机上的所有进程资源关联。</span><span class="sxs-lookup"><span data-stu-id="26150-520">Use this method to create an array of new <xref:System.Diagnostics.Process> components and associate them with all the process resources on the specified (usually remote) computer.</span></span> <span data-ttu-id="26150-521">进程资源必须已经存在的本地计算机上，因为<xref:System.Diagnostics.Process.GetProcesses%2A>不会创建系统资源，但而是将资源与应用程序生成相关联<xref:System.Diagnostics.Process>组件。</span><span class="sxs-lookup"><span data-stu-id="26150-521">The process resources must already exist on the local computer, because <xref:System.Diagnostics.Process.GetProcesses%2A> does not create system resources but rather associates resources with application-generated <xref:System.Diagnostics.Process> components.</span></span> <span data-ttu-id="26150-522">因为操作系统本身正在运行的后台进程，此数组不为空。</span><span class="sxs-lookup"><span data-stu-id="26150-522">Because the operating system itself is running background processes, this array is never empty.</span></span>  
  
 <span data-ttu-id="26150-523">如果您不想要检索所有计算机上运行的进程，你可以通过使用来限制它们的数量<xref:System.Diagnostics.Process.GetProcessById%2A>或<xref:System.Diagnostics.Process.GetProcessesByName%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="26150-523">If you do not want to retrieve all the processes running on the computer, you can restrict their number by using the <xref:System.Diagnostics.Process.GetProcessById%2A> or <xref:System.Diagnostics.Process.GetProcessesByName%2A> method.</span></span> <span data-ttu-id="26150-524"><xref:System.Diagnostics.Process.GetProcessById%2A> 创建<xref:System.Diagnostics.Process>与由传递给该方法的进程标识符标识系统上的进程关联的组件。</span><span class="sxs-lookup"><span data-stu-id="26150-524"><xref:System.Diagnostics.Process.GetProcessById%2A> creates a <xref:System.Diagnostics.Process> component that is associated with the process identified on the system by the process identifier that you pass to the method.</span></span> <span data-ttu-id="26150-525"><xref:System.Diagnostics.Process.GetProcessesByName%2A> 创建的数组<xref:System.Diagnostics.Process>其关联的进程资源共享的可执行文件的组件你传递给方法。</span><span class="sxs-lookup"><span data-stu-id="26150-525"><xref:System.Diagnostics.Process.GetProcessesByName%2A> creates an array of <xref:System.Diagnostics.Process> components whose associated process resources share the executable file you pass to the method.</span></span>  
  
 <span data-ttu-id="26150-526">此重载<xref:System.Diagnostics.Process.GetProcesses%2A>方法通常用于检索在网络上的远程计算机上运行的进程资源的列表，但你可以通过传递指定本地计算机"。"。</span><span class="sxs-lookup"><span data-stu-id="26150-526">This overload of the <xref:System.Diagnostics.Process.GetProcesses%2A> method is generally used to retrieve the list of process resources running on a remote computer on the network, but you can specify the local computer by passing ".".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-527">可以在服务主机进程 (svchost.exe) 的同一个实例中加载多个 Windows 服务。</span><span class="sxs-lookup"><span data-stu-id="26150-527">Multiple Windows services can be loaded within the same instance of the Service Host process (svchost.exe).</span></span> <span data-ttu-id="26150-528">GetProcesses 不会确定这些单个服务; 示例：为此，请参阅<xref:System.ServiceProcess.ServiceController.GetServices%2A>。</span><span class="sxs-lookup"><span data-stu-id="26150-528">GetProcesses does not identify those individual services; for that, see <xref:System.ServiceProcess.ServiceController.GetServices%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-529">下面的示例检索当前进程的信息在本地计算机，记事本本地计算机和在本地计算机上的特定进程上运行的所有实例上运行的进程。</span><span class="sxs-lookup"><span data-stu-id="26150-529">The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</span></span> <span data-ttu-id="26150-530">然后，它将检索远程计算机上的相同的过程信息。</span><span class="sxs-lookup"><span data-stu-id="26150-530">It then retrieves information for the same processes on a remote computer.</span></span>  
  
 [!code-cpp[Process.GetProcesses_noexception#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.GetProcesses_noexception/CPP/processstaticget.cpp#1)]
 [!code-csharp[Process.GetProcesses_noexception#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.GetProcesses_noexception/CS/processstaticget.cs#1)]
 [!code-vb[Process.GetProcesses_noexception#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.GetProcesses_noexception/VB/processstaticget.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="26150-531">
            <paramref name="machineName" /> 参数的语法无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-531">The <paramref name="machineName" /> parameter syntax is invalid.</span>
          </span>
          <span data-ttu-id="26150-532">其长度可能为零 (0)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-532">It might have length zero (0).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="26150-533">
            <paramref name="machineName" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-533">The <paramref name="machineName" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-534">操作系统平台不支持在远程计算机上进行此操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-534">The operating system platform does not support this operation on remote computers.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-535">访问用于获取进程信息的性能计数器 API 时出现问题。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-535">There are problems accessing the performance counter API's used to get process information.</span>
          </span>
          <span data-ttu-id="26150-536">此异常特定于 Windows NT、Windows 2000 和 Windows XP。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-536">This exception is specific to Windows NT, Windows 2000, and Windows XP.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.Win32Exception">
          <span data-ttu-id="26150-537">访问基础系统 API 时出现问题。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-537">A problem occurred accessing an underlying system API.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-538">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-538">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-539">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-539">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.MachineName" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessesByName(System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetCurrentProcess" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProcessesByName">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="26150-540">创建新的 <see cref="T:System.Diagnostics.Process" /> 组件的数组，并将它们与共享指定的进程名称的所有现有进程资源关联。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-540">Creates an array of new <see cref="T:System.Diagnostics.Process" /> components and associates them with the existing process resources that all share the specified process name.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProcessesByName">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process[] GetProcessesByName (string processName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process[] GetProcessesByName(string processName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.GetProcessesByName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetProcessesByName (processName As String) As Process()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Diagnostics::Process ^&gt; ^ GetProcessesByName(System::String ^ processName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="processName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="processName">
          <span data-ttu-id="26150-541">该进程的友好名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-541">The friendly name of the process.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="26150-542">创建新的 <see cref="T:System.Diagnostics.Process" /> 组件的数组，并将它们与本地计算机上共享指定的进程名称的所有进程资源关联。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-542">Creates an array of new <see cref="T:System.Diagnostics.Process" /> components and associates them with all the process resources on the local computer that share the specified process name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="26150-543">类型 <see cref="T:System.Diagnostics.Process" /> 的数组，表示运行指定应用程序或文件的进程资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-543">An array of type <see cref="T:System.Diagnostics.Process" /> that represents the process resources running the specified application or file.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-544">此方法用于创建新的数组<xref:System.Diagnostics.Process>组件并将它们与正在本地计算机上的相同可执行文件的所有进程资源关联。</span><span class="sxs-lookup"><span data-stu-id="26150-544">Use this method to create an array of new <xref:System.Diagnostics.Process> components and associate them with all the process resources that are running the same executable file on the local computer.</span></span> <span data-ttu-id="26150-545">进程资源必须已经存在的计算机上，因为<xref:System.Diagnostics.Process.GetProcessesByName%2A>不会创建系统资源，但而是将它们与应用程序生成关联<xref:System.Diagnostics.Process>组件。</span><span class="sxs-lookup"><span data-stu-id="26150-545">The process resources must already exist on the computer, because <xref:System.Diagnostics.Process.GetProcessesByName%2A> does not create system resources but rather associates them with application-generated <xref:System.Diagnostics.Process> components.</span></span> <span data-ttu-id="26150-546">A`processName`可为指定当前未运行的本地计算机，因此该方法返回的数组可以是空的可执行文件。</span><span class="sxs-lookup"><span data-stu-id="26150-546">A `processName` can be specified for an executable file that is not currently running on the local computer, so the array the method returns can be empty.</span></span>  
  
 <span data-ttu-id="26150-547">进程名称是为了让进程，如 Outlook，不包含扩展名为.exe 或路径的友好名称。</span><span class="sxs-lookup"><span data-stu-id="26150-547">The process name is a friendly name for the process, such as Outlook, that does not include the .exe extension or the path.</span></span> <span data-ttu-id="26150-548"><xref:System.Diagnostics.Process.GetProcessesByName%2A> 可帮助获取和操作与相同的可执行文件相关联的所有进程。</span><span class="sxs-lookup"><span data-stu-id="26150-548"><xref:System.Diagnostics.Process.GetProcessesByName%2A> is helpful for getting and manipulating all the processes that are associated with the same executable file.</span></span> <span data-ttu-id="26150-549">例如，可以传递作为可执行文件名`processName`参数，以便关闭该可执行文件的所有正在运行的实例。</span><span class="sxs-lookup"><span data-stu-id="26150-549">For example, you can pass an executable file name as the `processName` parameter, in order to shut down all the running instances of that executable file.</span></span>  
  
 <span data-ttu-id="26150-550">尽管进程<xref:System.Diagnostics.Process.Id%2A>是唯一的系统上的单个进程资源，本地计算机上的多个进程可以运行指定的应用程序`processName`参数。</span><span class="sxs-lookup"><span data-stu-id="26150-550">Although a process <xref:System.Diagnostics.Process.Id%2A> is unique to a single process resource on the system, multiple processes on the local computer can be running the application specified by the `processName` parameter.</span></span> <span data-ttu-id="26150-551">因此， <xref:System.Diagnostics.Process.GetProcessById%2A> ，最多返回一个进程但<xref:System.Diagnostics.Process.GetProcessesByName%2A>返回数组，其中包含所有关联的进程。</span><span class="sxs-lookup"><span data-stu-id="26150-551">Therefore, <xref:System.Diagnostics.Process.GetProcessById%2A> returns one process at most, but <xref:System.Diagnostics.Process.GetProcessesByName%2A> returns an array containing all the associated processes.</span></span> <span data-ttu-id="26150-552">如果你需要操作使用标准的 API 调用的进程，可以查询每个标识符反过来这些进程。</span><span class="sxs-lookup"><span data-stu-id="26150-552">If you need to manipulate the process using standard API calls, you can query each of these processes in turn for its identifier.</span></span> <span data-ttu-id="26150-553">无法访问进程资源，通过单独的进程名称中，但一旦检索到的数组<xref:System.Diagnostics.Process>已相关联的组件与进程资源，你可以启动、 终止和以其他方式操作的系统资源。</span><span class="sxs-lookup"><span data-stu-id="26150-553">You cannot access process resources through the process name alone but, once you have retrieved an array of <xref:System.Diagnostics.Process> components that have been associated with the process resources, you can start, terminate, and otherwise manipulate the system resources.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-554">下面的示例检索当前进程的信息在本地计算机，记事本本地计算机和在本地计算机上的特定进程上运行的所有实例上运行的进程。</span><span class="sxs-lookup"><span data-stu-id="26150-554">The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</span></span> <span data-ttu-id="26150-555">然后，它将检索远程计算机上的相同的过程信息。</span><span class="sxs-lookup"><span data-stu-id="26150-555">It then retrieves information for the same processes on a remote computer.</span></span>  
  
 [!code-cpp[Process.GetProcesses_noexception#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.GetProcesses_noexception/CPP/processstaticget.cpp#1)]
 [!code-csharp[Process.GetProcesses_noexception#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.GetProcesses_noexception/CS/processstaticget.cs#1)]
 [!code-vb[Process.GetProcesses_noexception#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.GetProcesses_noexception/VB/processstaticget.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-556">访问用于获取进程信息的性能计数器 API 时出现问题。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-556">There are problems accessing the performance counter API's used to get process information.</span>
          </span>
          <span data-ttu-id="26150-557">此异常特定于 Windows NT、Windows 2000 和 Windows XP。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-557">This exception is specific to Windows NT, Windows 2000, and Windows XP.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-558">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-558">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-559">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-559">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.ProcessName" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcesses" />
        <altmember cref="M:System.Diagnostics.Process.GetCurrentProcess" />
      </Docs>
    </Member>
    <Member MemberName="GetProcessesByName">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process[] GetProcessesByName (string processName, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process[] GetProcessesByName(string processName, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetProcessesByName (processName As String, machineName As String) As Process()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Diagnostics::Process ^&gt; ^ GetProcessesByName(System::String ^ processName, System::String ^ machineName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="processName" Type="System.String" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="processName">
          <span data-ttu-id="26150-560">该进程的友好名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-560">The friendly name of the process.</span>
          </span>
        </param>
        <param name="machineName">
          <span data-ttu-id="26150-561">网络上计算机的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-561">The name of a computer on the network.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="26150-562">创建新的 <see cref="T:System.Diagnostics.Process" /> 组件的数组，并将它们与远程计算机上共享指定进程名称的所有进程资源关联。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-562">Creates an array of new <see cref="T:System.Diagnostics.Process" /> components and associates them with all the process resources on a remote computer that share the specified process name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="26150-563">类型 <see cref="T:System.Diagnostics.Process" /> 的数组，表示运行指定应用程序或文件的进程资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-563">An array of type <see cref="T:System.Diagnostics.Process" /> that represents the process resources running the specified application or file.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-564">此方法用于创建新的数组<xref:System.Diagnostics.Process>组件并将它们与正在运行指定的计算机上的相同可执行文件的所有进程资源关联。</span><span class="sxs-lookup"><span data-stu-id="26150-564">Use this method to create an array of new <xref:System.Diagnostics.Process> components and associate them with all the process resources that are running the same executable file on the specified computer.</span></span> <span data-ttu-id="26150-565">进程资源必须已经存在的计算机上，因为<xref:System.Diagnostics.Process.GetProcessesByName%2A>不会创建系统资源，但而是将它们与应用程序生成关联<xref:System.Diagnostics.Process>组件。</span><span class="sxs-lookup"><span data-stu-id="26150-565">The process resources must already exist on the computer, because <xref:System.Diagnostics.Process.GetProcessesByName%2A> does not create system resources but rather associates them with application-generated <xref:System.Diagnostics.Process> components.</span></span> <span data-ttu-id="26150-566">A`processName`可为指定当前未运行的本地计算机，因此该方法返回的数组可以是空的可执行文件。</span><span class="sxs-lookup"><span data-stu-id="26150-566">A `processName` can be specified for an executable file that is not currently running on the local computer, so the array the method returns can be empty.</span></span>  
  
 <span data-ttu-id="26150-567">进程名称是为了让进程，如 Outlook，不包含扩展名为.exe 或路径的友好名称。</span><span class="sxs-lookup"><span data-stu-id="26150-567">The process name is a friendly name for the process, such as Outlook, that does not include the .exe extension or the path.</span></span> <span data-ttu-id="26150-568"><xref:System.Diagnostics.Process.GetProcessesByName%2A> 可帮助获取和操作与相同的可执行文件相关联的所有进程。</span><span class="sxs-lookup"><span data-stu-id="26150-568"><xref:System.Diagnostics.Process.GetProcessesByName%2A> is helpful for getting and manipulating all the processes that are associated with the same executable file.</span></span> <span data-ttu-id="26150-569">例如，可以传递作为可执行文件名`processName`参数，以便关闭该可执行文件的所有正在运行的实例。</span><span class="sxs-lookup"><span data-stu-id="26150-569">For example, you can pass an executable file name as the `processName` parameter, in order to shut down all the running instances of that executable file.</span></span>  
  
 <span data-ttu-id="26150-570">尽管进程<xref:System.Diagnostics.Process.Id%2A>是唯一的系统上的单个进程资源，本地计算机上的多个进程可以运行指定的应用程序`processName`参数。</span><span class="sxs-lookup"><span data-stu-id="26150-570">Although a process <xref:System.Diagnostics.Process.Id%2A> is unique to a single process resource on the system, multiple processes on the local computer can be running the application specified by the `processName` parameter.</span></span> <span data-ttu-id="26150-571">因此， <xref:System.Diagnostics.Process.GetProcessById%2A> ，最多返回一个进程但<xref:System.Diagnostics.Process.GetProcessesByName%2A>返回数组，其中包含所有关联的进程。</span><span class="sxs-lookup"><span data-stu-id="26150-571">Therefore, <xref:System.Diagnostics.Process.GetProcessById%2A> returns one process at most, but <xref:System.Diagnostics.Process.GetProcessesByName%2A> returns an array containing all the associated processes.</span></span> <span data-ttu-id="26150-572">如果你需要操作使用标准的 API 调用的进程，可以查询每个标识符反过来这些进程。</span><span class="sxs-lookup"><span data-stu-id="26150-572">If you need to manipulate the process using standard API calls, you can query each of these processes in turn for its identifier.</span></span> <span data-ttu-id="26150-573">无法访问进程资源，通过单独的进程名称中，但一旦检索到的数组<xref:System.Diagnostics.Process>已相关联的组件与进程资源，你可以启动、 终止和以其他方式操作的系统资源。</span><span class="sxs-lookup"><span data-stu-id="26150-573">You cannot access process resources through the process name alone but, once you have retrieved an array of <xref:System.Diagnostics.Process> components that have been associated with the process resources, you can start, terminate, and otherwise manipulate the system resources.</span></span>  
  
 <span data-ttu-id="26150-574">此重载可用于在本地计算机上以及在远程计算机获取进程。</span><span class="sxs-lookup"><span data-stu-id="26150-574">You can use this overload to get processes on the local computer as well as on a remote computer.</span></span> <span data-ttu-id="26150-575">使用"。"若要指定本地计算机。</span><span class="sxs-lookup"><span data-stu-id="26150-575">Use "." to specify the local computer.</span></span> <span data-ttu-id="26150-576">存在另一个重载，默认情况下使用本地计算机。</span><span class="sxs-lookup"><span data-stu-id="26150-576">Another overload exists that uses the local computer by default.</span></span>  
  
 <span data-ttu-id="26150-577">你可以访问仅以查看有关进程的信息，统计信息，如的远程计算机上的进程。</span><span class="sxs-lookup"><span data-stu-id="26150-577">You can access processes on remote computers only to view information, such as statistics, about the processes.</span></span> <span data-ttu-id="26150-578">无法关闭，终止 (使用<xref:System.Diagnostics.Process.Kill%2A>)，或在远程计算机上启动进程。</span><span class="sxs-lookup"><span data-stu-id="26150-578">You cannot close, terminate (using <xref:System.Diagnostics.Process.Kill%2A>), or start processes on remote computers.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-579">下面的示例检索当前进程的信息在本地计算机，记事本本地计算机和在本地计算机上的特定进程上运行的所有实例上运行的进程。</span><span class="sxs-lookup"><span data-stu-id="26150-579">The following example retrieves information of the current process, processes running on the local computer, all instances of Notepad running on the local computer, and a specific process on the local computer.</span></span> <span data-ttu-id="26150-580">然后，它将检索远程计算机上的相同的过程信息。</span><span class="sxs-lookup"><span data-stu-id="26150-580">It then retrieves information for the same processes on a remote computer.</span></span>  
  
 [!code-cpp[Process.GetProcesses_noexception#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.GetProcesses_noexception/CPP/processstaticget.cpp#1)]
 [!code-csharp[Process.GetProcesses_noexception#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.GetProcesses_noexception/CS/processstaticget.cs#1)]
 [!code-vb[Process.GetProcesses_noexception#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.GetProcesses_noexception/VB/processstaticget.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="26150-581">
            <paramref name="machineName" /> 参数的语法无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-581">The <paramref name="machineName" /> parameter syntax is invalid.</span>
          </span>
          <span data-ttu-id="26150-582">其长度可能为零 (0)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-582">It might have length zero (0).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="26150-583">
            <paramref name="machineName" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-583">The <paramref name="machineName" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-584">操作系统平台不支持在远程计算机上进行此操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-584">The operating system platform does not support this operation on remote computers.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-585">访问用于获取进程信息的性能计数器 API 时出现问题。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-585">There are problems accessing the performance counter API's used to get process information.</span>
          </span>
          <span data-ttu-id="26150-586">此异常特定于 Windows NT、Windows 2000 和 Windows XP。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-586">This exception is specific to Windows NT, Windows 2000, and Windows XP.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.Win32Exception">
          <span data-ttu-id="26150-587">访问基础系统 API 时出现问题。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-587">A problem occurred accessing an underlying system API.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-588">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-588">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-589">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-589">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="26150-590">调用非托管的代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-590">to call unmanaged code.</span>
          </span>
          <span data-ttu-id="26150-591">关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-591">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.ProcessName" />
        <altmember cref="P:System.Diagnostics.Process.MachineName" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcesses" />
        <altmember cref="M:System.Diagnostics.Process.GetCurrentProcess" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Returns the native handle for this process.   The handle is only available if the process was started using this component.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-592">获取关联进程的本机句柄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-592">Gets the native handle of the associated process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-593">进程启动时操作系统向关联进程分配的句柄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-593">The handle that the operating system assigned to the associated process when the process was started.</span>
          </span>
          <span data-ttu-id="26150-594">系统使用此句柄来跟踪过程属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-594">The system uses this handle to keep track of process attributes.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-595">应用程序可以获得到的进程，可以使用作为参数传递给许多进程信息和控制功能的句柄。</span><span class="sxs-lookup"><span data-stu-id="26150-595">An application can obtain a handle to a process that can be used as a parameter to many process-information and control functions.</span></span> <span data-ttu-id="26150-596">你可以使用此句柄初始化<xref:System.Threading.WaitHandle>或调用与平台的本机方法调用。</span><span class="sxs-lookup"><span data-stu-id="26150-596">You can use this handle to initialize a <xref:System.Threading.WaitHandle> or to call native methods with platform invoke.</span></span>  
  
 <span data-ttu-id="26150-597">此进程句柄是私有的某个应用程序，换而言之，句柄不能共享的过程。</span><span class="sxs-lookup"><span data-stu-id="26150-597">This process handle is private to an application--in other words, process handles cannot be shared.</span></span> <span data-ttu-id="26150-598">进程也有过程<xref:System.Diagnostics.Process.Id%2A>这与<xref:System.Diagnostics.Process.Handle%2A>，是唯一的因此，在整个系统有效。</span><span class="sxs-lookup"><span data-stu-id="26150-598">A process also has a process <xref:System.Diagnostics.Process.Id%2A> which, unlike the <xref:System.Diagnostics.Process.Handle%2A>, is unique and, therefore, valid throughout the system.</span></span>  
  
 <span data-ttu-id="26150-599">通过调用启动仅进程<xref:System.Diagnostics.Process.Start%2A>设置<xref:System.Diagnostics.Process.Handle%2A>的相应属性<xref:System.Diagnostics.Process>实例。</span><span class="sxs-lookup"><span data-stu-id="26150-599">Only processes started through a call to <xref:System.Diagnostics.Process.Start%2A> set the <xref:System.Diagnostics.Process.Handle%2A> property of the corresponding <xref:System.Diagnostics.Process> instances.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-600">该进程尚未启动或已退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-600">The process has not been started or has exited.</span>
          </span>
          <span data-ttu-id="26150-601">不能读取 <see cref="P:System.Diagnostics.Process.Handle" /> 属性，因为没有与此 <see cref="T:System.Diagnostics.Process" /> 实例关联的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-601">The <see cref="P:System.Diagnostics.Process.Handle" /> property cannot be read because there is no process associated with this <see cref="T:System.Diagnostics.Process" /> instance.</span>
          </span>
          <span data-ttu-id="26150-602">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-602">-or-</span>
          </span>
          <span data-ttu-id="26150-603">
            <see cref="T:System.Diagnostics.Process" /> 实例已附加到正在运行的进程，但您没有获取具有完全访问权限的句柄所需的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-603">The <see cref="T:System.Diagnostics.Process" /> instance has been attached to a running process but you do not have the necessary permissions to get a handle with full access rights.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="26150-604">你正尝试访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.Handle" /> 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-604">You are trying to access the <see cref="P:System.Diagnostics.Process.Handle" /> property for a process that is running on a remote computer.</span>
          </span>
          <span data-ttu-id="26150-605">此属性仅可用于本地计算机上运行的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-605">This property is available only for processes that are running on the local computer.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-606">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-606">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-607">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-607">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.Id" />
        <altmember cref="P:System.Diagnostics.Process.ExitCode" />
        <altmember cref="P:System.Diagnostics.Process.ExitTime" />
        <altmember cref="P:System.Diagnostics.Process.HandleCount" />
        <altmember cref="M:System.Diagnostics.Process.Start" />
        <altmember cref="M:System.Diagnostics.Process.Refresh" />
      </Docs>
    </Member>
    <Member MemberName="HandleCount">
      <MemberSignature Language="C#" Value="public int HandleCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HandleCount" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.HandleCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HandleCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HandleCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Handles for this process.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-608">获取由进程打开的句柄数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-608">Gets the number of handles opened by the process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-609">进程打开的操作系统句柄数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-609">The number of operating system handles the process has opened.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-610">句柄提供使进程可以引用的对象的方法。</span><span class="sxs-lookup"><span data-stu-id="26150-610">Handles provide a way for a process to refer to objects.</span></span> <span data-ttu-id="26150-611">进程可以获取指向文件、 资源、 消息队列和许多其他操作系统对象的句柄。</span><span class="sxs-lookup"><span data-stu-id="26150-611">A process can obtain handles to files, resources, message queues, and many other operating system objects.</span></span> <span data-ttu-id="26150-612">操作系统回收仅当句柄计数为零时，才与进程关联的内存。</span><span class="sxs-lookup"><span data-stu-id="26150-612">The operating system reclaims the memory associated with the process only when the handle count is zero.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-613">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)；将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 属性设置为 <see langword="false" />，以在 Windows 98 和 Windows Me 上访问此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-613">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set the <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> property to <see langword="false" /> to access this property on Windows 98 and Windows Me.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-614">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-614">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-615">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-615">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.Handle" />
        <altmember cref="M:System.Diagnostics.Process.Start" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
      </Docs>
    </Member>
    <Member MemberName="HasExited">
      <MemberSignature Language="C#" Value="public bool HasExited { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasExited" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.HasExited" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasExited As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasExited { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Indicates if the associated process has been terminated.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-616">获取指示关联进程是否已终止的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-616">Gets a value indicating whether the associated process has been terminated.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-617">如果 <see cref="T:System.Diagnostics.Process" /> 组件引用的操作系统进程已终止，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-617">
              <see langword="true" /> if the operating system process referenced by the <see cref="T:System.Diagnostics.Process" /> component has terminated; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-618">值为`true`为<xref:System.Diagnostics.Process.HasExited%2A>指示关联的进程已终止，正常或异常。</span><span class="sxs-lookup"><span data-stu-id="26150-618">A value of `true` for <xref:System.Diagnostics.Process.HasExited%2A> indicates that the associated process has terminated, either normally or abnormally.</span></span> <span data-ttu-id="26150-619">可以请求，也可以强制关联的进程退出通过调用<xref:System.Diagnostics.Process.CloseMainWindow%2A>或<xref:System.Diagnostics.Process.Kill%2A>。</span><span class="sxs-lookup"><span data-stu-id="26150-619">You can request or force the associated process to exit by calling <xref:System.Diagnostics.Process.CloseMainWindow%2A> or <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="26150-620">如果到进程打开的句柄，操作系统将释放的进程内存时进程已退出，但会保留有关过程，如句柄、 退出代码和退出时的管理信息。</span><span class="sxs-lookup"><span data-stu-id="26150-620">If a handle is open to the process, the operating system releases the process memory when the process has exited, but retains administrative information about the process, such as the handle, exit code, and exit time.</span></span> <span data-ttu-id="26150-621">若要获取此信息，可以使用<xref:System.Diagnostics.Process.ExitCode%2A>和<xref:System.Diagnostics.Process.ExitTime%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="26150-621">To get this information, you can use the <xref:System.Diagnostics.Process.ExitCode%2A> and <xref:System.Diagnostics.Process.ExitTime%2A> properties.</span></span> <span data-ttu-id="26150-622">这些属性将自动填充此组件已启动的进程。</span><span class="sxs-lookup"><span data-stu-id="26150-622">These properties are populated automatically for processes that were started by this component.</span></span> <span data-ttu-id="26150-623">发布的管理信息时所有<xref:System.Diagnostics.Process>与系统进程关联的组件将销毁，并没有更多的句柄保留至已退出进程。</span><span class="sxs-lookup"><span data-stu-id="26150-623">The administrative information is released when all the <xref:System.Diagnostics.Process> components that are associated with the system process are destroyed and hold no more handles to the exited process.</span></span>  
  
 <span data-ttu-id="26150-624">独立于你的代码可以终止进程。</span><span class="sxs-lookup"><span data-stu-id="26150-624">A process can terminate independently of your code.</span></span> <span data-ttu-id="26150-625">如果你在开始使用此组件的过程，系统将更新的值<xref:System.Diagnostics.Process.HasExited%2A>自动，即使独立关联的进程退出。</span><span class="sxs-lookup"><span data-stu-id="26150-625">If you started the process using this component, the system updates the value of <xref:System.Diagnostics.Process.HasExited%2A> automatically, even if the associated process exits independently.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-626">当已重标准输出定向到异步事件处理程序中时，有可能时此属性返回不具有完成输出处理`true`。</span><span class="sxs-lookup"><span data-stu-id="26150-626">When standard output has been redirected to asynchronous event handlers, it is possible that output processing will not have completed when this property returns `true`.</span></span> <span data-ttu-id="26150-627">若要确保已完成异步事件处理，调用<xref:System.Diagnostics.Process.WaitForExit>在检查之前不接受任何参数的重载<xref:System.Diagnostics.Process.HasExited%2A>。</span><span class="sxs-lookup"><span data-stu-id="26150-627">To ensure that asynchronous event handling has been completed, call the <xref:System.Diagnostics.Process.WaitForExit> overload that takes no parameter before checking <xref:System.Diagnostics.Process.HasExited%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-628">以下示例启动记事本实例。</span><span class="sxs-lookup"><span data-stu-id="26150-628">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="26150-629">然后在 10 秒最多两秒为间隔检索关联进程的物理内存的使用量。</span><span class="sxs-lookup"><span data-stu-id="26150-629">It then retrieves the physical memory usage of the associated process at 2 second intervals for a maximum of 10 seconds.</span></span> <span data-ttu-id="26150-630">该示例检测在进程退出之前经过 10 秒后。</span><span class="sxs-lookup"><span data-stu-id="26150-630">The example detects whether the process exits before 10 seconds have elapsed.</span></span> <span data-ttu-id="26150-631">如果它仍在运行在 10 秒后，该示例将关闭进程。</span><span class="sxs-lookup"><span data-stu-id="26150-631">The example closes the process if it is still running after 10 seconds.</span></span>  
  
 [!code-cpp[process_refresh#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_refresh/CPP/process_refresh.cpp#1)]
 [!code-csharp[process_refresh#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_refresh/CS/process_refresh.cs#1)]
 [!code-vb[process_refresh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_refresh/VB/process_refresh.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-632">没有与此对象关联的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-632">There is no process associated with the object.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.Win32Exception">
          <span data-ttu-id="26150-633">无法检索该进程的退出代码。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-633">The exit code for the process could not be retrieved.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="26150-634">你正尝试访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.HasExited" /> 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-634">You are trying to access the <see cref="P:System.Diagnostics.Process.HasExited" /> property for a process that is running on a remote computer.</span>
          </span>
          <span data-ttu-id="26150-635">此属性仅可用于本地计算机上运行的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-635">This property is available only for processes that are running on the local computer.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-636">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-636">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-637">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-637">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.ExitCode" />
        <altmember cref="P:System.Diagnostics.Process.ExitTime" />
        <altmember cref="M:System.Diagnostics.Process.WaitForExit(System.Int32)" />
        <altmember cref="P:System.Diagnostics.Process.EnableRaisingEvents" />
        <altmember cref="M:System.Diagnostics.Process.OnExited" />
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public int Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Id" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Id { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The unique identifier for the process.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-638">获取关联进程的唯一标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-638">Gets the unique identifier for the associated process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-639">此 <see cref="T:System.Diagnostics.Process" /> 实例引用的、由系统生成的进程的唯一标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-639">The system-generated unique identifier of the process that is referenced by this <see cref="T:System.Diagnostics.Process" /> instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-640">进程<xref:System.Diagnostics.Process.Id%2A>不是有效如果关联的进程未运行。</span><span class="sxs-lookup"><span data-stu-id="26150-640">The process <xref:System.Diagnostics.Process.Id%2A> is not valid if the associated process is not running.</span></span> <span data-ttu-id="26150-641">因此，您应确保在尝试检索之前正在运行进程<xref:System.Diagnostics.Process.Id%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="26150-641">Therefore, you should ensure that the process is running before attempting to retrieve the <xref:System.Diagnostics.Process.Id%2A> property.</span></span> <span data-ttu-id="26150-642">在进程终止，直到进程标识符唯一地标识在整个系统的过程。</span><span class="sxs-lookup"><span data-stu-id="26150-642">Until the process terminates, the process identifier uniquely identifies the process throughout the system.</span></span>  
  
 <span data-ttu-id="26150-643">你可以连接到新的本地或远程计算机运行的进程<xref:System.Diagnostics.Process>实例通过将传递到的进程标识符<xref:System.Diagnostics.Process.GetProcessById%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="26150-643">You can connect a process that is running on a local or remote computer to a new <xref:System.Diagnostics.Process> instance by passing the process identifier to the <xref:System.Diagnostics.Process.GetProcessById%2A> method.</span></span> <span data-ttu-id="26150-644"><xref:System.Diagnostics.Process.GetProcessById%2A> 是`static`创建一个新的组件的方法和设置<xref:System.Diagnostics.Process.Id%2A>新属性<xref:System.Diagnostics.Process>自动实例。</span><span class="sxs-lookup"><span data-stu-id="26150-644"><xref:System.Diagnostics.Process.GetProcessById%2A> is a `static` method that creates a new component and sets the <xref:System.Diagnostics.Process.Id%2A> property for the new <xref:System.Diagnostics.Process> instance automatically.</span></span>  
  
 <span data-ttu-id="26150-645">可以由系统重用进程标识符。</span><span class="sxs-lookup"><span data-stu-id="26150-645">Process identifiers can be reused by the system.</span></span> <span data-ttu-id="26150-646"><xref:System.Diagnostics.Process.Id%2A>属性值是唯一的仅在关联的进程正在运行时。</span><span class="sxs-lookup"><span data-stu-id="26150-646">The <xref:System.Diagnostics.Process.Id%2A> property value is unique only while the associated process is running.</span></span> <span data-ttu-id="26150-647">进程已终止后，系统可以重复使用<xref:System.Diagnostics.Process.Id%2A>不相关的进程的属性值。</span><span class="sxs-lookup"><span data-stu-id="26150-647">After the process has terminated, the system can reuse the <xref:System.Diagnostics.Process.Id%2A> property value for an unrelated process.</span></span>  
  
 <span data-ttu-id="26150-648">因为该标识符是唯一系统上，你可以将其传递给其他线程作为传递的替代方法<xref:System.Diagnostics.Process>实例。</span><span class="sxs-lookup"><span data-stu-id="26150-648">Because the identifier is unique on the system, you can pass it to other threads as an alternative to passing a <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="26150-649">此操作可以节省系统资源，又可保证正确标识进程。</span><span class="sxs-lookup"><span data-stu-id="26150-649">This action can save system resources yet guarantee that the process is correctly identified.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-650">下面的示例演示如何获取<xref:System.Diagnostics.Process.Id%2A>所有运行的应用程序实例。</span><span class="sxs-lookup"><span data-stu-id="26150-650">The following example demonstrates how to obtain the <xref:System.Diagnostics.Process.Id%2A> for all running instances of an application.</span></span> <span data-ttu-id="26150-651">代码创建记事本的新实例，将列出的记事本的所有实例，然后允许用户输入<xref:System.Diagnostics.Process.Id%2A>编号，以删除特定的实例。</span><span class="sxs-lookup"><span data-stu-id="26150-651">The code creates a new instance of Notepad, lists all the instances of Notepad, and then allows the user to enter the <xref:System.Diagnostics.Process.Id%2A> number to remove a specific instance.</span></span>  
  
 [!code-csharp[System.Diagnostics.Process.Id#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Process.Id/CS/program.cs#1)]
 [!code-vb[System.Diagnostics.Process.Id#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Process.Id/VB/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-652">尚未设置此进程的 <see cref="P:System.Diagnostics.Process.Id" /> 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-652">The process's <see cref="P:System.Diagnostics.Process.Id" /> property has not been set.</span>
          </span>
          <span data-ttu-id="26150-653">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-653">-or-</span>
          </span>
          <span data-ttu-id="26150-654">没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-654">There is no process associated with this <see cref="T:System.Diagnostics.Process" /> object.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-655">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)；将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 属性设置为 <see langword="false" />，以在 Windows 98 和 Windows Me 上访问此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-655">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set the <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> property to <see langword="false" /> to access this property on Windows 98 and Windows Me.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-656">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-656">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-657">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-657">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.Handle" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public void Kill ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Kill() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Kill" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Kill();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="26150-658">立即停止关联的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-658">Immediately stops the associated process.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-659"><xref:System.Diagnostics.Process.Kill%2A> 强制终止的进程，而<xref:System.Diagnostics.Process.CloseMainWindow%2A>只请求在终止。</span><span class="sxs-lookup"><span data-stu-id="26150-659"><xref:System.Diagnostics.Process.Kill%2A> forces a termination of the process, while <xref:System.Diagnostics.Process.CloseMainWindow%2A> only requests a termination.</span></span> <span data-ttu-id="26150-660">具有图形界面的进程执行时，其消息循环将处于等待状态。</span><span class="sxs-lookup"><span data-stu-id="26150-660">When a process with a graphical interface is executing, its message loop is in a wait state.</span></span> <span data-ttu-id="26150-661">消息循环执行每次操作系统的 Windows 消息发送到进程。</span><span class="sxs-lookup"><span data-stu-id="26150-661">The message loop executes every time a Windows message is sent to the process by the operating system.</span></span> <span data-ttu-id="26150-662">调用<xref:System.Diagnostics.Process.CloseMainWindow%2A>将请求发送到接近主窗口中，其格式正确的应用程序，在关闭子窗口，并撤消应用程序的所有正在运行消息循环。</span><span class="sxs-lookup"><span data-stu-id="26150-662">Calling <xref:System.Diagnostics.Process.CloseMainWindow%2A> sends a request to close to the main window, which, in a well-formed application, closes child windows and revokes all running message loops for the application.</span></span> <span data-ttu-id="26150-663">通过调用退出该进程的请求<xref:System.Diagnostics.Process.CloseMainWindow%2A>不会强制应用程序退出。</span><span class="sxs-lookup"><span data-stu-id="26150-663">The request to exit the process by calling <xref:System.Diagnostics.Process.CloseMainWindow%2A> does not force the application to quit.</span></span> <span data-ttu-id="26150-664">应用程序可以请求用户验证之前退出，或它可以拒绝退出。</span><span class="sxs-lookup"><span data-stu-id="26150-664">The application can ask for user verification before quitting, or it can refuse to quit.</span></span> <span data-ttu-id="26150-665">若要强制应用程序退出，请使用<xref:System.Diagnostics.Process.Kill%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="26150-665">To force the application to quit, use the <xref:System.Diagnostics.Process.Kill%2A> method.</span></span> <span data-ttu-id="26150-666">行为<xref:System.Diagnostics.Process.CloseMainWindow%2A>等同于用户关闭应用程序的主窗口中使用系统菜单。</span><span class="sxs-lookup"><span data-stu-id="26150-666">The behavior of <xref:System.Diagnostics.Process.CloseMainWindow%2A> is identical to that of a user closing an application's main window using the system menu.</span></span> <span data-ttu-id="26150-667">因此，通过关闭主窗口退出该进程的请求不会强制应用程序立即退出。</span><span class="sxs-lookup"><span data-stu-id="26150-667">Therefore, the request to exit the process by closing the main window does not force the application to quit immediately.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-668"><xref:System.Diagnostics.Process.Kill%2A>方法以异步方式执行。</span><span class="sxs-lookup"><span data-stu-id="26150-668">The <xref:System.Diagnostics.Process.Kill%2A> method executes asynchronously.</span></span> <span data-ttu-id="26150-669">在调用<xref:System.Diagnostics.Process.Kill%2A>方法中，调用<xref:System.Diagnostics.Process.WaitForExit%2A>方法来等待进程退出，或检查<xref:System.Diagnostics.Process.HasExited%2A>属性来确定该进程已退出。</span><span class="sxs-lookup"><span data-stu-id="26150-669">After calling the <xref:System.Diagnostics.Process.Kill%2A> method, call the <xref:System.Diagnostics.Process.WaitForExit%2A> method to wait for the process to exit, or check the <xref:System.Diagnostics.Process.HasExited%2A> property to determine if the process has exited.</span></span>  
  
 <span data-ttu-id="26150-670">该进程编辑的数据或分配给进程的资源可能会丢失如果调用<xref:System.Diagnostics.Process.Kill%2A>。</span><span class="sxs-lookup"><span data-stu-id="26150-670">Data edited by the process or resources allocated to the process can be lost if you call <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="26150-671"><xref:System.Diagnostics.Process.Kill%2A> 导致异常的进程终止，应仅在必要时使用。</span><span class="sxs-lookup"><span data-stu-id="26150-671"><xref:System.Diagnostics.Process.Kill%2A> causes an abnormal process termination and should be used only when necessary.</span></span> <span data-ttu-id="26150-672"><xref:System.Diagnostics.Process.CloseMainWindow%2A> 启用过程的有序终止并关闭所有窗口，以使更为可取的接口的应用程序。</span><span class="sxs-lookup"><span data-stu-id="26150-672"><xref:System.Diagnostics.Process.CloseMainWindow%2A> enables an orderly termination of the process and closes all windows, so it is preferable for applications with an interface.</span></span> <span data-ttu-id="26150-673">如果<xref:System.Diagnostics.Process.CloseMainWindow%2A>失败，你可以使用<xref:System.Diagnostics.Process.Kill%2A>终止进程。</span><span class="sxs-lookup"><span data-stu-id="26150-673">If <xref:System.Diagnostics.Process.CloseMainWindow%2A> fails, you can use <xref:System.Diagnostics.Process.Kill%2A> to terminate the process.</span></span> <span data-ttu-id="26150-674"><xref:System.Diagnostics.Process.Kill%2A> 是终止不具有图形界面的进程的唯一方法。</span><span class="sxs-lookup"><span data-stu-id="26150-674"><xref:System.Diagnostics.Process.Kill%2A> is the only way to terminate processes that do not have graphical interfaces.</span></span>  
  
 <span data-ttu-id="26150-675">你可以调用<xref:System.Diagnostics.Process.Kill%2A>和<xref:System.Diagnostics.Process.CloseMainWindow%2A>仅的本地计算机运行的进程。</span><span class="sxs-lookup"><span data-stu-id="26150-675">You can call <xref:System.Diagnostics.Process.Kill%2A> and <xref:System.Diagnostics.Process.CloseMainWindow%2A> only for processes that are running on the local computer.</span></span> <span data-ttu-id="26150-676">在退出的远程计算机上，不会导致进程。</span><span class="sxs-lookup"><span data-stu-id="26150-676">You cannot cause processes on remote computers to exit.</span></span> <span data-ttu-id="26150-677">仅可以查看在远程计算机上运行的进程的信息。</span><span class="sxs-lookup"><span data-stu-id="26150-677">You can only view information for processes running on remote computers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-678">如果调用<xref:System.Diagnostics.Process.Kill%2A>方法由时当前在终止进程，<xref:System.ComponentModel.Win32Exception>引发因访问被拒绝。</span><span class="sxs-lookup"><span data-stu-id="26150-678">If the call to the <xref:System.Diagnostics.Process.Kill%2A> method is made while the process is currently terminating, a <xref:System.ComponentModel.Win32Exception> is thrown for Access Denied.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">
          <span data-ttu-id="26150-679">无法终止相关联的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-679">The associated process could not be terminated.</span>
          </span>
          <span data-ttu-id="26150-680">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-680">-or-</span>
          </span>
          <span data-ttu-id="26150-681">进程将终止。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-681">The process is terminating.</span>
          </span>
          <span data-ttu-id="26150-682">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-682">-or-</span>
          </span>
          <span data-ttu-id="26150-683">关联的进程是 Win16 可执行文件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-683">The associated process is a Win16 executable.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="26150-684">你正尝试为远程计算机上运行的进程调用 <see cref="M:System.Diagnostics.Process.Kill" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-684">You are attempting to call <see cref="M:System.Diagnostics.Process.Kill" /> for a process that is running on a remote computer.</span>
          </span>
          <span data-ttu-id="26150-685">该方法仅对本地计算机上运行的进程可用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-685">The method is available only for processes running on the local computer.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-686">已经退出该进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-686">The process has already exited.</span>
          </span>
          <span data-ttu-id="26150-687">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-687">-or-</span>
          </span>
          <span data-ttu-id="26150-688">没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-688">There is no process associated with this <see cref="T:System.Diagnostics.Process" /> object.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-689">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-689">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-690">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-690">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Environment.Exit(System.Int32)" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Start" />
      </Docs>
    </Member>
    <Member MemberName="LeaveDebugMode">
      <MemberSignature Language="C#" Value="public static void LeaveDebugMode ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LeaveDebugMode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.LeaveDebugMode" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub LeaveDebugMode ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void LeaveDebugMode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="26150-691">使 <see cref="T:System.Diagnostics.Process" /> 组件离开允许它与以特殊模式运行的操作系统进程交互的状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-691">Takes a <see cref="T:System.Diagnostics.Process" /> component out of the state that lets it interact with operating system processes that run in a special mode.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-692">以特殊模式运行某些操作系统进程。</span><span class="sxs-lookup"><span data-stu-id="26150-692">Some operating system processes run in a special mode.</span></span> <span data-ttu-id="26150-693">尝试读取的属性或将附加到这些进程不能除非你调用了<xref:System.Diagnostics.Process.EnterDebugMode%2A>组件上。</span><span class="sxs-lookup"><span data-stu-id="26150-693">Attempting to read properties of or attach to these processes is not possible unless you have called <xref:System.Diagnostics.Process.EnterDebugMode%2A> on the component.</span></span> <span data-ttu-id="26150-694">调用<xref:System.Diagnostics.Process.LeaveDebugMode%2A>不再需要对这些特殊模式运行的进程的访问。</span><span class="sxs-lookup"><span data-stu-id="26150-694">Call <xref:System.Diagnostics.Process.LeaveDebugMode%2A> when you no longer need access to these processes that run in special mode.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-695">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-695">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-696">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-696">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Diagnostics.Process.EnterDebugMode" />
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The name of the machine the running the process.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-697">获取关联进程正在其上运行的计算机的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-697">Gets the name of the computer the associated process is running on.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-698">关联进程正在其上运行的计算机的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-698">The name of the computer that the associated process is running on.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-699">你可以查看统计数据，并在远程计算机上，但是你运行的进程的进程信息不能调用<xref:System.Diagnostics.Process.Start%2A>， <xref:System.Diagnostics.Process.CloseMainWindow%2A>，或<xref:System.Diagnostics.Process.Kill%2A>在远程计算机上。</span><span class="sxs-lookup"><span data-stu-id="26150-699">You can view statistical data and process information for processes running on remote computers but you cannot call <xref:System.Diagnostics.Process.Start%2A>, <xref:System.Diagnostics.Process.CloseMainWindow%2A>, or <xref:System.Diagnostics.Process.Kill%2A> on remote computers.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-700">此属性关联的进程执行时在本地计算机上，返回一个句点 ("。") 为计算机名称。</span><span class="sxs-lookup"><span data-stu-id="26150-700">When the associated process is executing on the local machine, this property returns a period (".") for the machine name.</span></span> <span data-ttu-id="26150-701">应使用<xref:System.Environment.MachineName%2A?displayProperty=nameWithType>属性获取正确的计算机名称。</span><span class="sxs-lookup"><span data-stu-id="26150-701">You should use the <xref:System.Environment.MachineName%2A?displayProperty=nameWithType> property to get the correct machine name.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-702">若要使用下面的示例，你必须先在远程计算机上启动记事本的至少一个实例。</span><span class="sxs-lookup"><span data-stu-id="26150-702">To use the following example you must first start at least one instance of Notepad on a remote computer.</span></span> <span data-ttu-id="26150-703">该示例请求的远程计算机记事本正在运行，且然后分别显示名称<xref:System.Diagnostics.Process.ProcessName%2A>， <xref:System.Diagnostics.Process.Id%2A>，和<xref:System.Diagnostics.Process.MachineName%2A>每个实例的属性。</span><span class="sxs-lookup"><span data-stu-id="26150-703">The example requests the name of the remote computer on which Notepad is running, and then displays the respective <xref:System.Diagnostics.Process.ProcessName%2A>, <xref:System.Diagnostics.Process.Id%2A>, and <xref:System.Diagnostics.Process.MachineName%2A> properties for each instance.</span></span>  
  
 [!code-cpp[process_GetProcessesByName2_2#2](~/samples/snippets/cpp/VS_Snippets_CLR/Process_GetProcessesByName2_2/CPP/process_getprocessesbyname2_2.cpp#2)]
 [!code-csharp[process_GetProcessesByName2_2#2](~/samples/snippets/csharp/VS_Snippets_CLR/Process_GetProcessesByName2_2/CS/process_getprocessesbyname2_2.cs#2)]
 [!code-vb[process_GetProcessesByName2_2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process_GetProcessesByName2_2/VB/process_getprocessesbyname2_2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-704">没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-704">There is no process associated with this <see cref="T:System.Diagnostics.Process" /> object.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-705">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-705">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-706">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-706">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Diagnostics.Process.GetProcesses" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)" />
        <altmember cref="M:System.Diagnostics.Process.GetProcessesByName(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MainModule">
      <MemberSignature Language="C#" Value="public System.Diagnostics.ProcessModule MainModule { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.ProcessModule MainModule" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.MainModule" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MainModule As ProcessModule" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::ProcessModule ^ MainModule { System::Diagnostics::ProcessModule ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The main module of the process.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ProcessModule</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-707">获取关联进程的主模块。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-707">Gets the main module for the associated process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-708">用于启动进程的 <see cref="T:System.Diagnostics.ProcessModule" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-708">The <see cref="T:System.Diagnostics.ProcessModule" /> that was used to start the process.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-709">进程模块表示加载到特定的进程的.dll 或.exe 文件。</span><span class="sxs-lookup"><span data-stu-id="26150-709">A process module represents a.dll or .exe file that is loaded into a particular process.</span></span> <span data-ttu-id="26150-710"><xref:System.Diagnostics.Process.MainModule%2A>属性允许你查看有关用于启动进程，包括模块名称、 文件名和模块内存详细信息的可执行文件的信息。</span><span class="sxs-lookup"><span data-stu-id="26150-710">The <xref:System.Diagnostics.Process.MainModule%2A> property lets you view information about the executable used to start the process, including the module name, file name, and module memory details.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="26150-711">你正尝试访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.MainModule" /> 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-711">You are trying to access the <see cref="P:System.Diagnostics.Process.MainModule" /> property for a process that is running on a remote computer.</span>
          </span>
          <span data-ttu-id="26150-712">此属性仅可用于本地计算机上运行的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-712">This property is available only for processes that are running on the local computer.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.Win32Exception">
          <span data-ttu-id="26150-713">32 位进程正尝试访问 64 位进程的模块。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-713">A 32-bit process is trying to access the modules of a 64-bit process.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-714">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)；将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 设置为 <see langword="false" />，以在 Windows 98 和 Windows Me 上访问此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-714">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> to <see langword="false" /> to access this property on Windows 98 and Windows Me.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-715">进程 <see cref="P:System.Diagnostics.Process.Id" /> 不可用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-715">The process <see cref="P:System.Diagnostics.Process.Id" /> is not available.</span>
          </span>
          <span data-ttu-id="26150-716">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-716">-or-</span>
          </span>
          <span data-ttu-id="26150-717">该进程已退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-717">The process has exited.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-718">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-718">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-719">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-719">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.Modules" />
      </Docs>
    </Member>
    <Member MemberName="MainWindowHandle">
      <MemberSignature Language="C#" Value="public IntPtr MainWindowHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int MainWindowHandle" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.MainWindowHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MainWindowHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr MainWindowHandle { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The handle of the main window of the process.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-720">获取关联进程主窗口的窗口句柄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-720">Gets the window handle of the main window of the associated process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-721">关联进程主窗口的系统生成的窗口句柄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-721">The system-generated window handle of the main window of the associated process.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-722">主窗口是由当前具有焦点的进程打开的窗口 (<xref:System.Windows.Forms.Form.TopLevel%2A>窗体)。</span><span class="sxs-lookup"><span data-stu-id="26150-722">The main window is the window opened by the process that currently has the focus (the <xref:System.Windows.Forms.Form.TopLevel%2A> form).</span></span> <span data-ttu-id="26150-723">必须使用<xref:System.Diagnostics.Process.Refresh%2A>方法来刷新<xref:System.Diagnostics.Process>要获取当前的主窗口句柄，如果它已更改对象。</span><span class="sxs-lookup"><span data-stu-id="26150-723">You must use the <xref:System.Diagnostics.Process.Refresh%2A> method to refresh the <xref:System.Diagnostics.Process> object to get the current main window handle if it has changed.</span></span> <span data-ttu-id="26150-724">一般情况下，因为缓存的窗口句柄，则使用<xref:System.Diagnostics.Process.Refresh%2A>事先若要确保你将检索当前句柄。</span><span class="sxs-lookup"><span data-stu-id="26150-724">In general, because the window handle is cached, use <xref:System.Diagnostics.Process.Refresh%2A> beforehand to guarantee that you’ll retrieve the current handle.</span></span>  
  
 <span data-ttu-id="26150-725">你可以获取<xref:System.Diagnostics.Process.MainWindowHandle%2A>仅的本地计算机运行的进程的属性。</span><span class="sxs-lookup"><span data-stu-id="26150-725">You can get the <xref:System.Diagnostics.Process.MainWindowHandle%2A> property only for processes that are running on the local computer.</span></span> <span data-ttu-id="26150-726"><xref:System.Diagnostics.Process.MainWindowHandle%2A>属性是用于唯一标识与进程相关联的窗口的值。</span><span class="sxs-lookup"><span data-stu-id="26150-726">The <xref:System.Diagnostics.Process.MainWindowHandle%2A> property is a value that uniquely identifies the window that is associated with the process.</span></span>  
  
 <span data-ttu-id="26150-727">一个进程有一个仅当该过程提供一个图形界面与之关联的主窗口。</span><span class="sxs-lookup"><span data-stu-id="26150-727">A process has a main window associated with it only if the process has a graphical interface.</span></span> <span data-ttu-id="26150-728">如果关联的进程没有主窗口中，<xref:System.Diagnostics.Process.MainWindowHandle%2A>值为零。</span><span class="sxs-lookup"><span data-stu-id="26150-728">If the associated process does not have a main window, the <xref:System.Diagnostics.Process.MainWindowHandle%2A> value is zero.</span></span> <span data-ttu-id="26150-729">值也是对于进程已被隐藏，则为零，即处理，在任务栏中不可见。</span><span class="sxs-lookup"><span data-stu-id="26150-729">The value is also zero for processes that have been hidden, that is, processes that are not visible in the taskbar.</span></span> <span data-ttu-id="26150-730">这可能会在通知区域中，在任务栏最右侧显示为图标的进程的情况。</span><span class="sxs-lookup"><span data-stu-id="26150-730">This can be the case for processes that appear as icons in the notification area, at the far right of the taskbar.</span></span>  
  
 <span data-ttu-id="26150-731">如果你刚刚启动了一个进程，并想要使用其主窗口句柄，请考虑使用<xref:System.Diagnostics.Process.WaitForInputIdle%2A>方法以允许该进程完成后从开始，确保已创建了主窗口句柄。</span><span class="sxs-lookup"><span data-stu-id="26150-731">If you have just started a process and want to use its main window handle, consider using the <xref:System.Diagnostics.Process.WaitForInputIdle%2A> method to allow the process to finish starting, ensuring that the main window handle has been created.</span></span> <span data-ttu-id="26150-732">否则，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="26150-732">Otherwise, an exception will be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-733">未定义 <see cref="P:System.Diagnostics.Process.MainWindowHandle" />，因为进程已退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-733">The <see cref="P:System.Diagnostics.Process.MainWindowHandle" /> is not defined because the process has exited.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="26150-734">你正尝试访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.MainWindowHandle" /> 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-734">You are trying to access the <see cref="P:System.Diagnostics.Process.MainWindowHandle" /> property for a process that is running on a remote computer.</span>
          </span>
          <span data-ttu-id="26150-735">此属性仅可用于本地计算机上运行的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-735">This property is available only for processes that are running on the local computer.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-736">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)；将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 设置为 <see langword="false" />，以在 Windows 98 和 Windows Me 上访问此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-736">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> to <see langword="false" /> to access this property on Windows 98 and Windows Me.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-737">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-737">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-738">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-738">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.MainWindowTitle" />
        <altmember cref="P:System.Diagnostics.Process.MainModule" />
      </Docs>
    </Member>
    <Member MemberName="MainWindowTitle">
      <MemberSignature Language="C#" Value="public string MainWindowTitle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MainWindowTitle" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.MainWindowTitle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MainWindowTitle As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MainWindowTitle { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The title of the main window of the process.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-739">获取进程的主窗口标题。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-739">Gets the caption of the main window of the process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-740">进程的主窗口标题。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-740">The main window title of the process.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-741">一个进程有一个仅当该过程提供一个图形界面与之关联的主窗口。</span><span class="sxs-lookup"><span data-stu-id="26150-741">A process has a main window associated with it only if the process has a graphical interface.</span></span> <span data-ttu-id="26150-742">如果关联的进程没有主窗口 (以便<xref:System.Diagnostics.Process.MainWindowHandle%2A>为零)，<xref:System.Diagnostics.Process.MainWindowTitle%2A>为空字符串 ("")。</span><span class="sxs-lookup"><span data-stu-id="26150-742">If the associated process does not have a main window (so that <xref:System.Diagnostics.Process.MainWindowHandle%2A> is zero), <xref:System.Diagnostics.Process.MainWindowTitle%2A> is an empty string ("").</span></span> <span data-ttu-id="26150-743">如果你刚刚启动了一个进程，并想要使用其主窗口标题，请考虑使用<xref:System.Diagnostics.Process.WaitForInputIdle%2A>方法以允许该进程完成后从开始，确保已创建了主窗口句柄。</span><span class="sxs-lookup"><span data-stu-id="26150-743">If you have just started a process and want to use its main window title, consider using the <xref:System.Diagnostics.Process.WaitForInputIdle%2A> method to allow the process to finish starting, ensuring that the main window handle has been created.</span></span> <span data-ttu-id="26150-744">否则，系统将引发异常。</span><span class="sxs-lookup"><span data-stu-id="26150-744">Otherwise, the system throws an exception.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-745">主窗口是当前具有焦点，则窗口请注意，这可能不是进程的主窗口。</span><span class="sxs-lookup"><span data-stu-id="26150-745">The main window is the window that currently has the focus; note that this might not be the primary window for the process.</span></span> <span data-ttu-id="26150-746">必须使用<xref:System.Diagnostics.Process.Refresh%2A>方法来刷新<xref:System.Diagnostics.Process>要获取当前的主窗口句柄，如果它已更改对象。</span><span class="sxs-lookup"><span data-stu-id="26150-746">You must use the <xref:System.Diagnostics.Process.Refresh%2A> method to refresh the <xref:System.Diagnostics.Process> object to get the current main window handle if it has changed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-747">下面的示例启动记事本实例，并检索进程主窗口的标题。</span><span class="sxs-lookup"><span data-stu-id="26150-747">The following example starts an instance of Notepad and retrieves the caption of the main window of the process.</span></span>  
  
 [!code-cpp[process_MainWindowTitle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process_MainWindowTitle/CPP/process_mainwindowtitle.cpp#1)]
 [!code-csharp[process_MainWindowTitle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process_MainWindowTitle/CS/process_mainwindowtitle.cs#1)]
 [!code-vb[process_MainWindowTitle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process_MainWindowTitle/VB/process_mainwindowtitle.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-748">未定义 <see cref="P:System.Diagnostics.Process.MainWindowTitle" /> 属性，因为进程已退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-748">The <see cref="P:System.Diagnostics.Process.MainWindowTitle" /> property is not defined because the process has exited.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="26150-749">你正尝试访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.MainWindowTitle" /> 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-749">You are trying to access the <see cref="P:System.Diagnostics.Process.MainWindowTitle" /> property for a process that is running on a remote computer.</span>
          </span>
          <span data-ttu-id="26150-750">此属性仅可用于本地计算机上运行的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-750">This property is available only for processes that are running on the local computer.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-751">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)；将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 设置为 <see langword="false" />，以在 Windows 98 和 Windows Me 上访问此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-751">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> to <see langword="false" /> to access this property on Windows 98 and Windows Me.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-752">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-752">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-753">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-753">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="MaxWorkingSet">
      <MemberSignature Language="C#" Value="public IntPtr MaxWorkingSet { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int MaxWorkingSet" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.MaxWorkingSet" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxWorkingSet As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr MaxWorkingSet { IntPtr get(); void set(IntPtr value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The maximum amount of physical memory the process has required since it was started.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-754">获取或设置关联进程允许的最大工作集大小（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-754">Gets or sets the maximum allowable working set size, in bytes, for the associated process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-755">内存中允许的进程的最大工作集大小(以字节为单位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-755">The maximum working set size that is allowed in memory for the process, in bytes.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-756">进程工作集是物理 RAM 内存中的当前可见的进程的内存页的集合。</span><span class="sxs-lookup"><span data-stu-id="26150-756">The working set of a process is the set of memory pages currently visible to the process in physical RAM memory.</span></span> <span data-ttu-id="26150-757">这些页面为常驻性并且可用于应用程序使用而不会触发页面错误。</span><span class="sxs-lookup"><span data-stu-id="26150-757">These pages are resident and available for an application to use without triggering a page fault.</span></span>  
  
 <span data-ttu-id="26150-758">工作集包括共享和私有数据。</span><span class="sxs-lookup"><span data-stu-id="26150-758">The working set includes both shared and private data.</span></span> <span data-ttu-id="26150-759">共享的数据包括包含应用程序的执行，包括页面.dll 文件和 system.dll 文件中的所有说明的页。</span><span class="sxs-lookup"><span data-stu-id="26150-759">The shared data includes the pages that contain all the instructions that your application executes, including the pages in your .dll files and the system.dll files.</span></span> <span data-ttu-id="26150-760">随着工作集大小的增加，则会增加内存需求。</span><span class="sxs-lookup"><span data-stu-id="26150-760">As the working set size increases, memory demand increases.</span></span>  
  
 <span data-ttu-id="26150-761">进程都有最小和最大工作集大小。</span><span class="sxs-lookup"><span data-stu-id="26150-761">A process has minimum and maximum working set sizes.</span></span> <span data-ttu-id="26150-762">每次创建一个进程资源时，系统都会保留等于最小工作集大小的进程的内存量。</span><span class="sxs-lookup"><span data-stu-id="26150-762">Each time a process resource is created, the system reserves an amount of memory equal to the minimum working set size for the process.</span></span> <span data-ttu-id="26150-763">虚拟内存管理器尝试保持至少最小内存量常驻进程处于活动状态，但决不会保留的最大大小超过时。</span><span class="sxs-lookup"><span data-stu-id="26150-763">The virtual memory manager attempts to keep at least the minimum amount of memory resident when the process is active, but it never keeps more than the maximum size.</span></span>  
  
 <span data-ttu-id="26150-764">系统设置的默认工作集大小。</span><span class="sxs-lookup"><span data-stu-id="26150-764">The system sets the default working set sizes.</span></span> <span data-ttu-id="26150-765">你可以修改使用这些大小<xref:System.Diagnostics.Process.MaxWorkingSet%2A>和<xref:System.Diagnostics.Process.MinWorkingSet%2A>成员。</span><span class="sxs-lookup"><span data-stu-id="26150-765">You can modify these sizes using the <xref:System.Diagnostics.Process.MaxWorkingSet%2A> and <xref:System.Diagnostics.Process.MinWorkingSet%2A> members.</span></span> <span data-ttu-id="26150-766">但是，设置这些值不保证内存将保留或驻留。</span><span class="sxs-lookup"><span data-stu-id="26150-766">However, setting these values does not guarantee that the memory will be reserved or resident.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-767">如果增加进程工作集大小，你需要从系统的其余部分的物理内存。</span><span class="sxs-lookup"><span data-stu-id="26150-767">When you increase the working set size of a process, you take physical memory away from the rest of the system.</span></span> <span data-ttu-id="26150-768">确保你不会请求是太大，因为这样做会降低系统性能最小值或最大工作集大小。</span><span class="sxs-lookup"><span data-stu-id="26150-768">Ensure that you do not request a minimum or maximum working set size that is too large, because doing so can degrade system performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="26150-769">最大的工作集大小无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-769">The maximum working set size is invalid.</span>
          </span>
          <span data-ttu-id="26150-770">它必须大于或等于最小的工作集大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-770">It must be greater than or equal to the minimum working set size.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.Win32Exception">
          <span data-ttu-id="26150-771">无法从关联的进程资源中检索工作集信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-771">Working set information cannot be retrieved from the associated process resource.</span>
          </span>
          <span data-ttu-id="26150-772">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-772">-or-</span>
          </span>
          <span data-ttu-id="26150-773">进程标识符或进程句柄为零，因为尚未启动该进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-773">The process identifier or process handle is zero because the process has not been started.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="26150-774">你正尝试访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.MaxWorkingSet" /> 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-774">You are trying to access the <see cref="P:System.Diagnostics.Process.MaxWorkingSet" /> property for a process that is running on a remote computer.</span>
          </span>
          <span data-ttu-id="26150-775">此属性仅可用于本地计算机上运行的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-775">This property is available only for processes that are running on the local computer.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-776">进程 <see cref="P:System.Diagnostics.Process.Id" /> 不可用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-776">The process <see cref="P:System.Diagnostics.Process.Id" /> is not available.</span>
          </span>
          <span data-ttu-id="26150-777">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-777">-or-</span>
          </span>
          <span data-ttu-id="26150-778">该进程已退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-778">The process has exited.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-779">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-779">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-780">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-780">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-781">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-781">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.MinWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.WorkingSet64" />
        <altmember cref="P:System.Diagnostics.Process.PeakWorkingSet64" />
      </Docs>
    </Member>
    <Member MemberName="MinWorkingSet">
      <MemberSignature Language="C#" Value="public IntPtr MinWorkingSet { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int MinWorkingSet" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.MinWorkingSet" />
      <MemberSignature Language="VB.NET" Value="Public Property MinWorkingSet As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr MinWorkingSet { IntPtr get(); void set(IntPtr value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The minimum amount of physical memory the process has required since it was started.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-782">获取或设置关联进程允许的最小工作集大小（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-782">Gets or sets the minimum allowable working set size, in bytes, for the associated process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-783">内存中进程所需的最小工作集大小(以字节为单位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-783">The minimum working set size that is required in memory for the process, in bytes.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-784">进程工作集是物理 RAM 内存中的当前可见的进程的内存页的集合。</span><span class="sxs-lookup"><span data-stu-id="26150-784">The working set of a process is the set of memory pages currently visible to the process in physical RAM memory.</span></span> <span data-ttu-id="26150-785">这些页面为常驻性并且可用于应用程序使用而不会触发页面错误。</span><span class="sxs-lookup"><span data-stu-id="26150-785">These pages are resident and available for an application to use without triggering a page fault.</span></span>  
  
 <span data-ttu-id="26150-786">工作集包括共享和私有数据。</span><span class="sxs-lookup"><span data-stu-id="26150-786">The working set includes both shared and private data.</span></span> <span data-ttu-id="26150-787">共享的数据包括包含应用程序的执行，包括页面.dll 文件和 system.dll 文件中的所有说明的页。</span><span class="sxs-lookup"><span data-stu-id="26150-787">The shared data includes the pages that contain all the instructions that your application executes, including the pages in your .dll files and the system.dll files.</span></span> <span data-ttu-id="26150-788">随着工作集大小的增加，则会增加内存需求。</span><span class="sxs-lookup"><span data-stu-id="26150-788">As the working set size increases, memory demand increases.</span></span>  
  
 <span data-ttu-id="26150-789">进程都有最小和最大工作集大小。</span><span class="sxs-lookup"><span data-stu-id="26150-789">A process has minimum and maximum working set sizes.</span></span> <span data-ttu-id="26150-790">每次创建一个进程资源时，系统都会保留等于最小工作集大小的进程的内存量。</span><span class="sxs-lookup"><span data-stu-id="26150-790">Each time a process resource is created, the system reserves an amount of memory equal to the minimum working set size for the process.</span></span> <span data-ttu-id="26150-791">虚拟内存管理器尝试保持至少最小内存量常驻进程处于活动状态，但决不会保留的最大大小超过时。</span><span class="sxs-lookup"><span data-stu-id="26150-791">The virtual memory manager attempts to keep at least the minimum amount of memory resident when the process is active, but it never keeps more than the maximum size.</span></span>  
  
 <span data-ttu-id="26150-792">系统设置的默认工作集大小。</span><span class="sxs-lookup"><span data-stu-id="26150-792">The system sets the default working set sizes.</span></span> <span data-ttu-id="26150-793">你可以修改使用这些大小<xref:System.Diagnostics.Process.MaxWorkingSet%2A>和<xref:System.Diagnostics.Process.MinWorkingSet%2A>成员。</span><span class="sxs-lookup"><span data-stu-id="26150-793">You can modify these sizes using the <xref:System.Diagnostics.Process.MaxWorkingSet%2A> and <xref:System.Diagnostics.Process.MinWorkingSet%2A> members.</span></span> <span data-ttu-id="26150-794">但是，设置这些值不保证内存将保留或驻留。</span><span class="sxs-lookup"><span data-stu-id="26150-794">However, setting these values does not guarantee that the memory will be reserved or resident.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-795">如果增加进程工作集大小，你需要从系统的其余部分的物理内存。</span><span class="sxs-lookup"><span data-stu-id="26150-795">When you increase the working set size of a process, you take physical memory away from the rest of the system.</span></span> <span data-ttu-id="26150-796">确保你不会请求是太大，因为这样做会降低系统性能最小值或最大工作集大小。</span><span class="sxs-lookup"><span data-stu-id="26150-796">Ensure that you do not request a minimum or maximum working set size that is too large, because doing so can degrade system performance.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="26150-797">最小工作集大小无效。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-797">The minimum working set size is invalid.</span>
          </span>
          <span data-ttu-id="26150-798">它必须小于或等于最大工作集大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-798">It must be less than or equal to the maximum working set size.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.Win32Exception">
          <span data-ttu-id="26150-799">无法从关联的进程资源中检索工作集信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-799">Working set information cannot be retrieved from the associated process resource.</span>
          </span>
          <span data-ttu-id="26150-800">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-800">-or-</span>
          </span>
          <span data-ttu-id="26150-801">进程标识符或进程句柄为零，因为尚未启动该进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-801">The process identifier or process handle is zero because the process has not been started.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="26150-802">你正尝试访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.MinWorkingSet" /> 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-802">You are trying to access the <see cref="P:System.Diagnostics.Process.MinWorkingSet" /> property for a process that is running on a remote computer.</span>
          </span>
          <span data-ttu-id="26150-803">此属性仅可用于本地计算机上运行的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-803">This property is available only for processes that are running on the local computer.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-804">进程 <see cref="P:System.Diagnostics.Process.Id" /> 不可用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-804">The process <see cref="P:System.Diagnostics.Process.Id" /> is not available.</span>
          </span>
          <span data-ttu-id="26150-805">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-805">-or-</span>
          </span>
          <span data-ttu-id="26150-806">该进程已退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-806">The process has exited.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-807">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-807">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-808">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-808">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-809">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-809">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.MaxWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.WorkingSet64" />
        <altmember cref="P:System.Diagnostics.Process.PeakWorkingSet64" />
      </Docs>
    </Member>
    <Member MemberName="Modules">
      <MemberSignature Language="C#" Value="public System.Diagnostics.ProcessModuleCollection Modules { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.ProcessModuleCollection Modules" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.Modules" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Modules As ProcessModuleCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::ProcessModuleCollection ^ Modules { System::Diagnostics::ProcessModuleCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The modules that are loaded as part of this process.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ProcessModuleCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-810">获取已由关联进程加载的模块。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-810">Gets the modules that have been loaded by the associated process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-811">类型 <see cref="T:System.Diagnostics.ProcessModule" /> 的数组，表示已由关联进程加载的模块。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-811">An array of type <see cref="T:System.Diagnostics.ProcessModule" /> that represents the modules that have been loaded by the associated process.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-812">进程模块表示加载到特定的进程的.dll 或.exe 文件。</span><span class="sxs-lookup"><span data-stu-id="26150-812">A process module represents a.dll or .exe file that is loaded into a particular process.</span></span> <span data-ttu-id="26150-813">A<xref:System.Diagnostics.ProcessModule>实例，您可以查看有关模块，包括模块名称、 文件名和模块内存详细信息的信息。</span><span class="sxs-lookup"><span data-stu-id="26150-813">A <xref:System.Diagnostics.ProcessModule> instance lets you view information about a module, including the module name, file name, and module memory details.</span></span>  
  
 <span data-ttu-id="26150-814">一个进程可以加载到内存中的多个模块。</span><span class="sxs-lookup"><span data-stu-id="26150-814">A process can load multiple modules into memory.</span></span> <span data-ttu-id="26150-815">例如，加载其他.dll 文件的.exe 文件具有多个模块。</span><span class="sxs-lookup"><span data-stu-id="26150-815">For example,.exe files that load additional .dll files have multiple modules.</span></span>  
  
 <span data-ttu-id="26150-816">之后启动该进程，此集合为空直到系统加载该进程。</span><span class="sxs-lookup"><span data-stu-id="26150-816">After starting the process, this collection is empty until the system has loaded the process.</span></span> <span data-ttu-id="26150-817">如果进程都有一个主窗口，则可以调用<xref:System.Diagnostics.Process.WaitForInputIdle%2A>之前检索此属性，以确保集合非空时你可以获取的列表。</span><span class="sxs-lookup"><span data-stu-id="26150-817">If the process has a main window, you can call <xref:System.Diagnostics.Process.WaitForInputIdle%2A> before retrieving this property to ensure that the collection is nonempty when you get the list.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="26150-818">你正试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.Modules" /> 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-818">You are attempting to access the <see cref="P:System.Diagnostics.Process.Modules" /> property for a process that is running on a remote computer.</span>
          </span>
          <span data-ttu-id="26150-819">此属性仅可用于本地计算机上运行的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-819">This property is available only for processes that are running on the local computer.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-820">进程 <see cref="P:System.Diagnostics.Process.Id" /> 不可用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-820">The process <see cref="P:System.Diagnostics.Process.Id" /> is not available.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-821">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)；将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 设置为 <see langword="false" />，以在 Windows 98 和 Windows Me 上访问此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-821">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> to <see langword="false" /> to access this property on Windows 98 and Windows Me.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.Win32Exception">
          <span data-ttu-id="26150-822">您尝试访问系统进程或 Idle 进程的 <see cref="P:System.Diagnostics.Process.Modules" /> 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-822">You are attempting to access the <see cref="P:System.Diagnostics.Process.Modules" /> property for either the system process or the idle process.</span>
          </span>
          <span data-ttu-id="26150-823">这些进程没有模块。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-823">These processes do not have modules.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-824">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-824">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-825">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-825">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="T:System.Diagnostics.ProcessModule" />
      </Docs>
    </Member>
    <Member MemberName="NonpagedSystemMemorySize">
      <MemberSignature Language="C#" Value="public int NonpagedSystemMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NonpagedSystemMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.NonpagedSystemMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NonpagedSystemMemorySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NonpagedSystemMemorySize { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The number of bytes that are not pageable.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use NonpagedSystemMemorySize64")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-826">获取为关联的进程分配的非分页系统内存量（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-826">Gets the amount of nonpaged system memory, in bytes, allocated for the associated process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-827">系统已为无法写入到虚拟内存分页文件的关联进程分配的内存量(以字节为单位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-827">The amount of memory, in bytes, the system has allocated for the associated process that cannot be written to the virtual memory paging file.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-828">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-828">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-829">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-829">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-830">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-830">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.NonpagedSystemMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="NonpagedSystemMemorySize64">
      <MemberSignature Language="C#" Value="public long NonpagedSystemMemorySize64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 NonpagedSystemMemorySize64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.NonpagedSystemMemorySize64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NonpagedSystemMemorySize64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long NonpagedSystemMemorySize64 { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The number of bytes that are not pageable.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-831">获取为关联的进程分配的非分页系统内存量（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-831">Gets the amount of nonpaged system memory, in bytes, allocated for the associated process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-832">为关联的进程分配的、不能写入虚拟内存分页文件中的系统内存量(以字节为单位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-832">The amount of system memory, in bytes, allocated for the associated process that cannot be written to the virtual memory paging file.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-833">返回此属性的值表示使用的过程中，以字节为单位的非分页的系统内存的当前大小。</span><span class="sxs-lookup"><span data-stu-id="26150-833">The value returned by this property represents the current size of nonpaged system memory used by the process, in bytes.</span></span> <span data-ttu-id="26150-834">系统内存是由操作系统的物理内存，并且分为分页和非页面缓冲池。</span><span class="sxs-lookup"><span data-stu-id="26150-834">System memory is the physical memory used by the operating system, and is divided into paged and nonpaged pools.</span></span> <span data-ttu-id="26150-835">非分页的内存分配保留在系统内存，并且不会调出到虚拟内存分页文件。</span><span class="sxs-lookup"><span data-stu-id="26150-835">Nonpaged memory allocations remain in system memory and are not paged out to the virtual memory paging file.</span></span>  
  
 <span data-ttu-id="26150-836">此属性可以用于监视与 32 位处理器或 64 位处理器的计算机上的内存使用情况。</span><span class="sxs-lookup"><span data-stu-id="26150-836">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="26150-837">属性值等于**池非分页字节数**进程的性能计数器。</span><span class="sxs-lookup"><span data-stu-id="26150-837">The property value is equivalent to the **Pool Nonpaged Bytes** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-838">下面的代码示例启动记事本应用程序的一个实例。</span><span class="sxs-lookup"><span data-stu-id="26150-838">The following code example starts an instance of the Notepad application.</span></span> <span data-ttu-id="26150-839">该示例然后检索并显示关联的进程的各种属性。</span><span class="sxs-lookup"><span data-stu-id="26150-839">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="26150-840">该示例检测时在进程退出，并显示其退出代码，峰值内存统计信息。</span><span class="sxs-lookup"><span data-stu-id="26150-840">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-841">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-841">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-842">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-842">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-843">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-843">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.PagedSystemMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="OnExited">
      <MemberSignature Language="C#" Value="protected void OnExited ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnExited() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.OnExited" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnExited ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnExited();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="26150-844">引发 <see cref="E:System.Diagnostics.Process.Exited" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-844">Raises the <see cref="E:System.Diagnostics.Process.Exited" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-845"><xref:System.Diagnostics.Process.OnExited%2A> 是引发的 API 方法<xref:System.Diagnostics.Process.Exited>事件。</span><span class="sxs-lookup"><span data-stu-id="26150-845"><xref:System.Diagnostics.Process.OnExited%2A> is the API method that raises the <xref:System.Diagnostics.Process.Exited> event.</span></span> <span data-ttu-id="26150-846">调用<xref:System.Diagnostics.Process.OnExited%2A>导致<xref:System.Diagnostics.Process.Exited>事件发生，是唯一的方法来引发事件使用<xref:System.Diagnostics.Process>组件。</span><span class="sxs-lookup"><span data-stu-id="26150-846">Calling <xref:System.Diagnostics.Process.OnExited%2A> causes the <xref:System.Diagnostics.Process.Exited> event to occur and is the only way to raise the event using the <xref:System.Diagnostics.Process> component.</span></span> <span data-ttu-id="26150-847"><xref:System.Diagnostics.Process.OnExited%2A> 主要用于从组件派生类时。</span><span class="sxs-lookup"><span data-stu-id="26150-847"><xref:System.Diagnostics.Process.OnExited%2A> is primarily used when deriving classes from the component.</span></span>  
  
 <span data-ttu-id="26150-848">作为替代方法<xref:System.Diagnostics.Process.OnExited%2A>，你可以编写事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="26150-848">As an alternative to <xref:System.Diagnostics.Process.OnExited%2A>, you can write your own event handler.</span></span> <span data-ttu-id="26150-849">创建你自己的事件处理程序委托和事件处理方法。</span><span class="sxs-lookup"><span data-stu-id="26150-849">You create your own event handler delegate and your own event-handling method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-850">如果你正在使用 Visual Studio 环境，一个事件处理程序委托 (AddOnExited) 和一个事件处理方法 (Process1_Exited) 会为您创建在拖动时<xref:System.Diagnostics.Process>组件拖动到窗体并双击该图标。</span><span class="sxs-lookup"><span data-stu-id="26150-850">If you are using the Visual Studio environment, an event handler delegate (AddOnExited) and an event-handling method (Process1_Exited) are created for you when you drag a <xref:System.Diagnostics.Process> component onto a form and double-click the icon.</span></span> <span data-ttu-id="26150-851">创建时要运行代码<xref:System.Diagnostics.Process.Exited>进入 Process1_Exited 过程发生的事件。</span><span class="sxs-lookup"><span data-stu-id="26150-851">The code you create to run when the <xref:System.Diagnostics.Process.Exited> event occurs is entered into the Process1_Exited procedure.</span></span> <span data-ttu-id="26150-852">不需要创建<xref:System.Diagnostics.Process.OnExited%2A>成员，因为它已为您实现。</span><span class="sxs-lookup"><span data-stu-id="26150-852">You do not need to create the <xref:System.Diagnostics.Process.OnExited%2A> member, because it is implemented for you.</span></span>  
  
 <span data-ttu-id="26150-853">引发事件时，将通过委托调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="26150-853">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="26150-854">有关概述，请参阅[处理和引发事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="26150-854">For an overview, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-855">下面的示例演示如何使用<xref:System.Diagnostics.Process.OnExited%2A>派生类中的方法。</span><span class="sxs-lookup"><span data-stu-id="26150-855">The following example shows how to use the <xref:System.Diagnostics.Process.OnExited%2A> method in a derived class.</span></span>  
  
 [!code-csharp[OnExitSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/onexitsample/cs/program.cs#1)]
 [!code-vb[OnExitSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/onexitsample/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-856">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-856">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-857">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-857">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="E:System.Diagnostics.Process.Exited" />
      </Docs>
    </Member>
    <Member MemberName="OutputDataReceived">
      <MemberSignature Language="C#" Value="public event System.Diagnostics.DataReceivedEventHandler OutputDataReceived;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Diagnostics.DataReceivedEventHandler OutputDataReceived" />
      <MemberSignature Language="DocId" Value="E:System.Diagnostics.Process.OutputDataReceived" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event OutputDataReceived As DataReceivedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Diagnostics::DataReceivedEventHandler ^ OutputDataReceived;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Indicates if the process component is associated with a real process.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.DataReceivedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-858">每次应用程序向其重定向 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 流中写入行时发生。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-858">Occurs each time an application writes a line to its redirected <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-859"><xref:System.Diagnostics.Process.OutputDataReceived>事件指示关联<xref:System.Diagnostics.Process>编写一条线路，以换行符，向其重定向终止<xref:System.Diagnostics.Process.StandardOutput%2A>流。</span><span class="sxs-lookup"><span data-stu-id="26150-859">The <xref:System.Diagnostics.Process.OutputDataReceived> event indicates that the associated <xref:System.Diagnostics.Process> has written a line, terminating with a newline character, to its redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span>  
  
 <span data-ttu-id="26150-860">该事件在异步读取操作期间启用上<xref:System.Diagnostics.Process.StandardOutput%2A>。</span><span class="sxs-lookup"><span data-stu-id="26150-860">The event is enabled during asynchronous read operations on <xref:System.Diagnostics.Process.StandardOutput%2A>.</span></span> <span data-ttu-id="26150-861">若要开始异步读取的操作，必须重定向<xref:System.Diagnostics.Process.StandardOutput%2A>流<xref:System.Diagnostics.Process>，添加到事件处理程序<xref:System.Diagnostics.Process.OutputDataReceived>事件，并调用<xref:System.Diagnostics.Process.BeginOutputReadLine%2A>。</span><span class="sxs-lookup"><span data-stu-id="26150-861">To start asynchronous read operations, you must redirect the <xref:System.Diagnostics.Process.StandardOutput%2A> stream of a <xref:System.Diagnostics.Process>, add your event handler to the <xref:System.Diagnostics.Process.OutputDataReceived> event, and call <xref:System.Diagnostics.Process.BeginOutputReadLine%2A>.</span></span> <span data-ttu-id="26150-862">此后，<xref:System.Diagnostics.Process.OutputDataReceived>事件信号进程写入到的重定向行每次<xref:System.Diagnostics.Process.StandardOutput%2A>流式传输，直到该进程退出，或调用<xref:System.Diagnostics.Process.CancelOutputRead%2A>。</span><span class="sxs-lookup"><span data-stu-id="26150-862">Thereafter, the <xref:System.Diagnostics.Process.OutputDataReceived> event signals each time the process writes a line to the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream, until the process exits or calls <xref:System.Diagnostics.Process.CancelOutputRead%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-863">正在处理的异步输出应用程序应调用<xref:System.Diagnostics.Process.WaitForExit%2A>方法，以确保已刷新输出缓冲区。</span><span class="sxs-lookup"><span data-stu-id="26150-863">The application that is processing the asynchronous output should call the <xref:System.Diagnostics.Process.WaitForExit%2A> method to ensure that the output buffer has been flushed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-864">下面的示例演示如何执行上的重定向的异步读取的操作<xref:System.Diagnostics.Process.StandardOutput%2A>流`ipconfig`命令。</span><span class="sxs-lookup"><span data-stu-id="26150-864">The following example illustrates how to perform asynchronous read operations on the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream of the `ipconfig` command.</span></span>  
  
 <span data-ttu-id="26150-865">该示例创建一个事件委托，它为`OutputHandler`事件处理程序并将其与关联<xref:System.Diagnostics.Process.OutputDataReceived>事件。</span><span class="sxs-lookup"><span data-stu-id="26150-865">The example creates an event delegate for the `OutputHandler` event handler and associates it with the <xref:System.Diagnostics.Process.OutputDataReceived> event.</span></span> <span data-ttu-id="26150-866">事件处理程序接收来自的重定向的文本行<xref:System.Diagnostics.Process.StandardOutput%2A>流，格式文本，并将其保存在更高版本显示在本示例的控制台窗口的输出字符串中。</span><span class="sxs-lookup"><span data-stu-id="26150-866">The event handler receives text lines from the redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream, formats the text, and saves it in an output string that’s later shown in the example’s console window.</span></span>  
  
 [!code-cpp[Process_AsyncStreams#4](~/samples/snippets/cpp/VS_Snippets_CLR/process_asyncstreams/CPP/datareceivedevent.cpp#4)]
 [!code-csharp[Process_AsyncStreams#4](~/samples/snippets/csharp/VS_Snippets_CLR/process_asyncstreams/CS/datareceivedevent.cs#4)]
 [!code-vb[Process_AsyncStreams#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_asyncstreams/VB/datareceivedevent.vb#4)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-867">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-867">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-868">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-868">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" />
        <altmember cref="P:System.Diagnostics.Process.StandardOutput" />
        <altmember cref="M:System.Diagnostics.Process.BeginOutputReadLine" />
        <altmember cref="M:System.Diagnostics.Process.CancelOutputRead" />
        <altmember cref="T:System.Diagnostics.DataReceivedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="PagedMemorySize">
      <MemberSignature Language="C#" Value="public int PagedMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PagedMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PagedMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PagedMemorySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PagedMemorySize { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The number of bytes that are paged.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use PagedMemorySize64")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-869">获取为关联的进程分配的分页内存量（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-869">Gets the amount of paged memory, in bytes, allocated for the associated process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-870">由可写入到虚拟内存分页文件的关联进程分配的内存量(以字节为单位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-870">The amount of memory, in bytes, allocated by the associated process that can be written to the virtual memory paging file.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-871">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-871">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-872">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-872">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-873">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-873">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.PagedMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PagedMemorySize64">
      <MemberSignature Language="C#" Value="public long PagedMemorySize64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 PagedMemorySize64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PagedMemorySize64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PagedMemorySize64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long PagedMemorySize64 { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The number of bytes that are paged.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-874">获取为关联的进程分配的分页内存量（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-874">Gets the amount of paged memory, in bytes, allocated for the associated process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-875">在虚拟内存分页文件中为关联进程分配的内存量(以字节为单位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-875">The amount of memory, in bytes, allocated in the virtual memory paging file for the associated process.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-876">返回此属性的值表示内存中使用的过程，以字节为单位的虚拟内存分页文件的当前大小。</span><span class="sxs-lookup"><span data-stu-id="26150-876">The value returned by this property represents the current size of memory in the virtual memory paging file used by the process, in bytes.</span></span> <span data-ttu-id="26150-877">操作系统使用与物理内存结合使用的虚拟内存分页文件来管理每个进程的虚拟地址空间。</span><span class="sxs-lookup"><span data-stu-id="26150-877">The operating system uses the virtual memory paging file in conjunction with physical memory to manage the virtual address space for each process.</span></span> <span data-ttu-id="26150-878">分页的内存不使用时，它可以被传输到磁盘上的虚拟内存分页文件。</span><span class="sxs-lookup"><span data-stu-id="26150-878">When pageable memory is not in use, it can be transferred to the virtual memory paging file on disk.</span></span> <span data-ttu-id="26150-879">若要获取由操作系统使用的进程的内存大小，使用<xref:System.Diagnostics.Process.PagedSystemMemorySize64%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="26150-879">To obtain the size of memory used by the operating system for the process, use the <xref:System.Diagnostics.Process.PagedSystemMemorySize64%2A> property.</span></span>  
  
 <span data-ttu-id="26150-880">此属性可以用于监视与 32 位处理器或 64 位处理器的计算机上的内存使用情况。</span><span class="sxs-lookup"><span data-stu-id="26150-880">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="26150-881">属性值等于**页面文件字节**进程的性能计数器。</span><span class="sxs-lookup"><span data-stu-id="26150-881">The property value is equivalent to the **Page File Bytes** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-882">下面的代码示例启动一个实例记事本应用程序，然后检索并显示关联的进程的各种属性。</span><span class="sxs-lookup"><span data-stu-id="26150-882">The following code example starts an instance of the Notepad application, and then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="26150-883">该示例检测时在进程退出，并显示其退出代码，峰值内存统计信息。</span><span class="sxs-lookup"><span data-stu-id="26150-883">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-884">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-884">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-885">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-885">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-886">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-886">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.PeakPagedMemorySize64" />
        <altmember cref="P:System.Diagnostics.Process.PagedSystemMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PagedSystemMemorySize">
      <MemberSignature Language="C#" Value="public int PagedSystemMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PagedSystemMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PagedSystemMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PagedSystemMemorySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PagedSystemMemorySize { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of paged system memory in bytes.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use PagedSystemMemorySize64")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-887">获取为关联进程分配的可分页系统内存量（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-887">Gets the amount of pageable system memory, in bytes, allocated for the associated process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-888">系统已为可写入到虚拟内存页面文件的关联进程分配的内存量(以字节为单位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-888">The amount of memory, in bytes, the system has allocated for the associated process that can be written to the virtual memory paging file.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-889">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-889">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-890">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-890">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-891">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-891">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.PagedSystemMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PagedSystemMemorySize64">
      <MemberSignature Language="C#" Value="public long PagedSystemMemorySize64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 PagedSystemMemorySize64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PagedSystemMemorySize64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PagedSystemMemorySize64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long PagedSystemMemorySize64 { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of paged system memory in bytes.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-892">获取为关联进程分配的可分页系统内存量（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-892">Gets the amount of pageable system memory, in bytes, allocated for the associated process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-893">为可写入虚拟内存分页文件的关联内存分配的系统内存量(以字节为单位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-893">The amount of system memory, in bytes, allocated for the associated process that can be written to the virtual memory paging file.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-894">返回此属性的值的值表示使用的过程中，以字节为单位的可分页系统内存的当前大小。</span><span class="sxs-lookup"><span data-stu-id="26150-894">The value returned by this property value represents the current size of pageable system memory used by the process, in bytes.</span></span> <span data-ttu-id="26150-895">系统内存是由操作系统的物理内存，并且分为分页和非页面缓冲池。</span><span class="sxs-lookup"><span data-stu-id="26150-895">System memory is the physical memory used by the operating system, and is divided into paged and nonpaged pools.</span></span> <span data-ttu-id="26150-896">分页的内存不使用时，它可以被传输到磁盘上的虚拟内存分页文件。</span><span class="sxs-lookup"><span data-stu-id="26150-896">When pageable memory is not in use, it can be transferred to the virtual memory paging file on disk.</span></span> <span data-ttu-id="26150-897">若要获取的进程使用的应用程序内存的大小，使用<xref:System.Diagnostics.Process.PagedMemorySize64%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="26150-897">To obtain the size of the application memory used by the process, use the <xref:System.Diagnostics.Process.PagedMemorySize64%2A> property.</span></span>  
  
 <span data-ttu-id="26150-898">此属性可以用于监视与 32 位处理器或 64 位处理器的计算机上的内存使用情况。</span><span class="sxs-lookup"><span data-stu-id="26150-898">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="26150-899">属性值等于**Pool Paged Bytes**进程的性能计数器。</span><span class="sxs-lookup"><span data-stu-id="26150-899">The property value is equivalent to the **Pool Paged Bytes** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-900">下面的代码示例启动记事本应用程序的一个实例。</span><span class="sxs-lookup"><span data-stu-id="26150-900">The following code example starts an instance of the Notepad application.</span></span> <span data-ttu-id="26150-901">该示例然后检索并显示关联的进程的各种属性。</span><span class="sxs-lookup"><span data-stu-id="26150-901">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="26150-902">该示例检测时在进程退出，并显示其退出代码，峰值内存统计信息。</span><span class="sxs-lookup"><span data-stu-id="26150-902">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-903">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-903">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-904">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-904">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-905">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-905">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.PagedSystemMemorySize64" />
        <altmember cref="P:System.Diagnostics.Process.NonpagedSystemMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PeakPagedMemorySize">
      <MemberSignature Language="C#" Value="public int PeakPagedMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PeakPagedMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PeakPagedMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PeakPagedMemorySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PeakPagedMemorySize { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The maximum amount of paged memory used by this process.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use PeakPagedMemorySize64")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-906">获取关联的进程使用的虚拟内存分页文件中的最大内存量（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-906">Gets the maximum amount of memory in the virtual memory paging file, in bytes, used by the associated process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-907">由可写入到虚拟内存分页文件的关联进程分配的最大内存量(以字节为单位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-907">The maximum amount of memory, in bytes, allocated by the associated process that could be written to the virtual memory paging file.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-908">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-908">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-909">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-909">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-910">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-910">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.PeakPagedMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PeakPagedMemorySize64">
      <MemberSignature Language="C#" Value="public long PeakPagedMemorySize64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 PeakPagedMemorySize64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PeakPagedMemorySize64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PeakPagedMemorySize64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long PeakPagedMemorySize64 { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The maximum amount of paged memory used by this process.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-911">获取关联的进程使用的虚拟内存分页文件中的最大内存量（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-911">Gets the maximum amount of memory in the virtual memory paging file, in bytes, used by the associated process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-912">从启动关联的进程以来在为虚拟内存分页文件中关联进程分配的最大内存量(以字节为单位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-912">The maximum amount of memory, in bytes, allocated in the virtual memory paging file for the associated process since it was started.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-913">返回此属性的值的值表示自启动，以字节为单位的进程使用的虚拟内存分页文件中的内存的最大大小。</span><span class="sxs-lookup"><span data-stu-id="26150-913">The value returned by this property value represents the maximum size of memory in the virtual memory paging file used by the process since it started, in bytes.</span></span> <span data-ttu-id="26150-914">操作系统使用与物理内存结合使用的虚拟内存分页文件来管理每个进程的虚拟地址空间。</span><span class="sxs-lookup"><span data-stu-id="26150-914">The operating system uses the virtual memory paging file in conjunction with physical memory to manage the virtual address space for each process.</span></span> <span data-ttu-id="26150-915">分页的内存不使用时，它可以被传输到磁盘上的虚拟内存分页文件。</span><span class="sxs-lookup"><span data-stu-id="26150-915">When pageable memory is not in use, it can be transferred to the virtual memory paging file on disk.</span></span>  
  
 <span data-ttu-id="26150-916">此属性可以用于监视与 32 位处理器或 64 位处理器的计算机上的内存使用情况。</span><span class="sxs-lookup"><span data-stu-id="26150-916">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="26150-917">属性值等于**页面文件字节峰值**进程的性能计数器。</span><span class="sxs-lookup"><span data-stu-id="26150-917">The property value is equivalent to the **Page File Bytes Peak** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-918">下面的代码示例启动记事本应用程序的一个实例。</span><span class="sxs-lookup"><span data-stu-id="26150-918">The following code example starts an instance of the Notepad application.</span></span> <span data-ttu-id="26150-919">该示例然后检索并显示关联的进程的各种属性。</span><span class="sxs-lookup"><span data-stu-id="26150-919">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="26150-920">该示例检测时在进程退出，并显示其退出代码，峰值内存统计信息。</span><span class="sxs-lookup"><span data-stu-id="26150-920">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-921">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-921">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-922">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-922">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-923">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-923">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.PagedMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PeakVirtualMemorySize">
      <MemberSignature Language="C#" Value="public int PeakVirtualMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PeakVirtualMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PeakVirtualMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PeakVirtualMemorySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PeakVirtualMemorySize { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The maximum amount of virtual memory used by this process.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use PeakVirtualMemorySize64")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-924">获取关联进程使用的最大虚拟内存量（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-924">Gets the maximum amount of virtual memory, in bytes, used by the associated process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-925">关联进程请求的最大虚拟内存量(以字节为单位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-925">The maximum amount of virtual memory, in bytes, that the associated process has requested.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-926">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-926">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-927">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-927">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-928">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-928">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.PeakVirtualMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PeakVirtualMemorySize64">
      <MemberSignature Language="C#" Value="public long PeakVirtualMemorySize64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 PeakVirtualMemorySize64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PeakVirtualMemorySize64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PeakVirtualMemorySize64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long PeakVirtualMemorySize64 { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The maximum amount of virtual memory used by this process.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-929">获取关联进程使用的最大虚拟内存量（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-929">Gets the maximum amount of virtual memory, in bytes, used by the associated process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-930">从关联进程启动以来为关联进程分配的最大虚拟内存量(以字节为单位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-930">The maximum amount of virtual memory, in bytes, allocated for the associated process since it was started.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-931">返回此属性的值表示自启动，以字节为单位的进程使用的虚拟内存的最大大小。</span><span class="sxs-lookup"><span data-stu-id="26150-931">The value returned by this property represents the maximum size of virtual memory used by the process since it started, in bytes.</span></span> <span data-ttu-id="26150-932">操作系统将映射到页加载在物理内存中，或存储在磁盘上的虚拟内存分页文件的页面的每个进程的虚拟地址空间。</span><span class="sxs-lookup"><span data-stu-id="26150-932">The operating system maps the virtual address space for each process either to pages loaded in physical memory, or to pages stored in the virtual memory paging file on disk.</span></span>  
  
 <span data-ttu-id="26150-933">此属性可以用于监视与 32 位处理器或 64 位处理器的计算机上的内存使用情况。</span><span class="sxs-lookup"><span data-stu-id="26150-933">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="26150-934">属性值等于**虚拟字节峰值**进程的性能计数器。</span><span class="sxs-lookup"><span data-stu-id="26150-934">The property value is equivalent to the **Virtual Bytes Peak** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-935">下面的代码示例启动记事本应用程序的一个实例。</span><span class="sxs-lookup"><span data-stu-id="26150-935">The following code example starts an instance of the Notepad application.</span></span> <span data-ttu-id="26150-936">该示例然后检索并显示关联的进程的各种属性。</span><span class="sxs-lookup"><span data-stu-id="26150-936">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="26150-937">该示例检测时在进程退出，并显示其退出代码，峰值内存统计信息。</span><span class="sxs-lookup"><span data-stu-id="26150-937">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-938">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-938">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-939">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-939">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-940">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-940">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.VirtualMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PeakWorkingSet">
      <MemberSignature Language="C#" Value="public int PeakWorkingSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PeakWorkingSet" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PeakWorkingSet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PeakWorkingSet As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PeakWorkingSet { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The maximum amount of system memory used by this process.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use PeakWorkingSet64")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-941">获取关联进程的峰值工作集大小（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-941">Gets the peak working set size for the associated process, in bytes.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-942">关联进程一次所需的最大物理内存量（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-942">The maximum amount of physical memory that the associated process has required all at once, in bytes.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-943">进程工作集是物理 RAM 内存中的当前可见的进程的内存页的集合。</span><span class="sxs-lookup"><span data-stu-id="26150-943">The working set of a process is the set of memory pages currently visible to the process in physical RAM memory.</span></span> <span data-ttu-id="26150-944">这些页面为常驻性并且可用于应用程序使用而不会触发页面错误。</span><span class="sxs-lookup"><span data-stu-id="26150-944">These pages are resident and available for an application to use without triggering a page fault.</span></span>  
  
 <span data-ttu-id="26150-945">工作集包括共享和私有数据。</span><span class="sxs-lookup"><span data-stu-id="26150-945">The working set includes both shared and private data.</span></span> <span data-ttu-id="26150-946">共享的数据包括那些包含该进程执行，包括进程模块和系统库的所有说明的页。</span><span class="sxs-lookup"><span data-stu-id="26150-946">The shared data includes the pages that contain all the instructions that the process executes, including process modules and the system libraries.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-947">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-947">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-948">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-948">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-949">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-949">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.WorkingSet64" />
        <altmember cref="P:System.Diagnostics.Process.MinWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.MaxWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.PeakWorkingSet64" />
      </Docs>
    </Member>
    <Member MemberName="PeakWorkingSet64">
      <MemberSignature Language="C#" Value="public long PeakWorkingSet64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 PeakWorkingSet64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PeakWorkingSet64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PeakWorkingSet64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long PeakWorkingSet64 { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The maximum amount of system memory used by this process.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-950">获取关联进程使用的最大物理内存量（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-950">Gets the maximum amount of physical memory, in bytes, used by the associated process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-951">从启动关联进程以来为关联进程分配的最大物理内存量(以字节为单位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-951">The maximum amount of physical memory, in bytes, allocated for the associated process since it was started.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-952">返回此属性的值表示工作集内存进程使用的自启动，以字节为单位的最大的大小。</span><span class="sxs-lookup"><span data-stu-id="26150-952">The value returned by this property represents the maximum size of working set memory used by the process since it started, in bytes.</span></span> <span data-ttu-id="26150-953">进程工作集是物理 RAM 内存中的当前可见的进程的内存页的集合。</span><span class="sxs-lookup"><span data-stu-id="26150-953">The working set of a process is the set of memory pages currently visible to the process in physical RAM memory.</span></span> <span data-ttu-id="26150-954">这些页面为常驻性并且可用于应用程序使用而不会触发页面错误。</span><span class="sxs-lookup"><span data-stu-id="26150-954">These pages are resident and available for an application to use without triggering a page fault.</span></span>  
  
 <span data-ttu-id="26150-955">工作集包括共享和私有数据。</span><span class="sxs-lookup"><span data-stu-id="26150-955">The working set includes both shared and private data.</span></span> <span data-ttu-id="26150-956">共享的数据包括那些包含该进程执行，包括从进程模块和系统库的说明的所有说明的页。</span><span class="sxs-lookup"><span data-stu-id="26150-956">The shared data includes the pages that contain all the instructions that the process executes, including instructions from the process modules and the system libraries.</span></span>  
  
 <span data-ttu-id="26150-957">此属性可以用于监视与 32 位处理器或 64 位处理器的计算机上的内存使用情况。</span><span class="sxs-lookup"><span data-stu-id="26150-957">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="26150-958">属性值等于**工作集峰值**进程的性能计数器。</span><span class="sxs-lookup"><span data-stu-id="26150-958">The property value is equivalent to the **Working Set Peak** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-959">下面的代码示例启动记事本应用程序的一个实例。</span><span class="sxs-lookup"><span data-stu-id="26150-959">The following code example starts an instance of the Notepad application.</span></span> <span data-ttu-id="26150-960">该示例然后检索并显示关联的进程的各种属性。</span><span class="sxs-lookup"><span data-stu-id="26150-960">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="26150-961">该示例检测时在进程退出，并显示其退出代码，峰值内存统计信息。</span><span class="sxs-lookup"><span data-stu-id="26150-961">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-962">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-962">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-963">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-963">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-964">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-964">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.WorkingSet64" />
        <altmember cref="P:System.Diagnostics.Process.MinWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.MaxWorkingSet" />
      </Docs>
    </Member>
    <Member MemberName="PriorityBoostEnabled">
      <MemberSignature Language="C#" Value="public bool PriorityBoostEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PriorityBoostEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PriorityBoostEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property PriorityBoostEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PriorityBoostEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Process will be of higher priority while it is actively used.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-965">获取或设置一个值，该值指示主窗口拥有焦点时是否应由操作系统暂时提升关联进程优先级。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-965">Gets or sets a value indicating whether the associated process priority should temporarily be boosted by the operating system when the main window has the focus.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-966">如果进程离开等待状态时应动态提升进程优先级别，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-966">
              <see langword="true" /> if dynamic boosting of the process priority should take place for a process when it is taken out of the wait state; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="26150-967">默认值为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-967">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-968">线程在进程中对其优先级类具有动态优先级枚举值之一的运行时 (<xref:System.Diagnostics.ProcessPriorityClass.Normal>， <xref:System.Diagnostics.ProcessPriorityClass.High>，或<xref:System.Diagnostics.ProcessPriorityClass.RealTime>)，在它离开等待状态时系统便暂时提升的线程的优先级。</span><span class="sxs-lookup"><span data-stu-id="26150-968">When a thread runs in a process for which the priority class has one of the dynamic priority enumeration values (<xref:System.Diagnostics.ProcessPriorityClass.Normal>, <xref:System.Diagnostics.ProcessPriorityClass.High>, or <xref:System.Diagnostics.ProcessPriorityClass.RealTime>), the system temporarily boosts the thread's priority when it is taken out of a wait state.</span></span> <span data-ttu-id="26150-969">此操作可防止其他进程中断当前线程的处理。</span><span class="sxs-lookup"><span data-stu-id="26150-969">This action prevents other processes from interrupting the processing of the current thread.</span></span> <span data-ttu-id="26150-970"><xref:System.Diagnostics.Process.PriorityBoostEnabled%2A>设置将影响所有现有的线程以及进程随后创建的任何线程。</span><span class="sxs-lookup"><span data-stu-id="26150-970">The <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> setting affects all the existing threads and any threads subsequently created by the process.</span></span> <span data-ttu-id="26150-971">若要还原正常的行为，请设置<xref:System.Diagnostics.Process.PriorityBoostEnabled%2A>属性`false`。</span><span class="sxs-lookup"><span data-stu-id="26150-971">To restore normal behavior, set the <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> property to `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-972">提升过高的优先级会耗尽基本操作系统和网络功能，导致与其他操作系统任务的问题的资源。</span><span class="sxs-lookup"><span data-stu-id="26150-972">Boosting the priority too high can drain resources from essential operating system and network functions, causing problems with other operating system tasks.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">
          <span data-ttu-id="26150-973">未能从关联的进程资源检索到优先级提升信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-973">Priority boost information could not be retrieved from the associated process resource.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-974">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-974">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span>
          </span>
          <span data-ttu-id="26150-975">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-975">-or-</span>
          </span>
          <span data-ttu-id="26150-976">进程标识符或进程句柄为零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-976">The process identifier or process handle is zero.</span>
          </span>
          <span data-ttu-id="26150-977">（进程尚未启动。）</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-977">(The process has not been started.)</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="26150-978">你正试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.PriorityBoostEnabled" /> 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-978">You are attempting to access the <see cref="P:System.Diagnostics.Process.PriorityBoostEnabled" /> property for a process that is running on a remote computer.</span>
          </span>
          <span data-ttu-id="26150-979">此属性仅可用于本地计算机上运行的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-979">This property is available only for processes that are running on the local computer.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-980">进程 <see cref="P:System.Diagnostics.Process.Id" /> 不可用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-980">The process <see cref="P:System.Diagnostics.Process.Id" /> is not available.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-981">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-981">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-982">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-982">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.PriorityClass" />
        <altmember cref="P:System.Diagnostics.Process.BasePriority" />
      </Docs>
    </Member>
    <Member MemberName="PriorityClass">
      <MemberSignature Language="C#" Value="public System.Diagnostics.ProcessPriorityClass PriorityClass { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.ProcessPriorityClass PriorityClass" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PriorityClass" />
      <MemberSignature Language="VB.NET" Value="Public Property PriorityClass As ProcessPriorityClass" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::ProcessPriorityClass PriorityClass { System::Diagnostics::ProcessPriorityClass get(); void set(System::Diagnostics::ProcessPriorityClass value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The priority that the threads in the process run relative to.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ProcessPriorityClass</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-983">获取或设置关联进程的总体优先级类别。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-983">Gets or sets the overall priority category for the associated process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-984">关联进程的优先级类别，可从该类别计算进程的 <see cref="P:System.Diagnostics.Process.BasePriority" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-984">The priority category for the associated process, from which the <see cref="P:System.Diagnostics.Process.BasePriority" /> of the process is calculated.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-985">进程优先级类包含一系列线程优先级级别。</span><span class="sxs-lookup"><span data-stu-id="26150-985">A process priority class encompasses a range of thread priority levels.</span></span> <span data-ttu-id="26150-986">具有不同优先级的正在运行相对于进程的优先级类进程中运行的线程。</span><span class="sxs-lookup"><span data-stu-id="26150-986">Threads with different priorities that are running in the process run relative to the priority class of the process.</span></span> <span data-ttu-id="26150-987">Win32 了七个基本优先级级别，每个类使用四个优先级类。</span><span class="sxs-lookup"><span data-stu-id="26150-987">Win32 uses four priority classes with seven base priority levels per class.</span></span> <span data-ttu-id="26150-988">这些进程优先级类将在<xref:System.Diagnostics.ProcessPriorityClass>枚举，这样就可以将进程优先级设置为<xref:System.Diagnostics.ProcessPriorityClass.Idle>， <xref:System.Diagnostics.ProcessPriorityClass.Normal>， <xref:System.Diagnostics.ProcessPriorityClass.High>， <xref:System.Diagnostics.ProcessPriorityClass.AboveNormal>， <xref:System.Diagnostics.ProcessPriorityClass.BelowNormal>，或<xref:System.Diagnostics.ProcessPriorityClass.RealTime>。</span><span class="sxs-lookup"><span data-stu-id="26150-988">These process priority classes are captured in the <xref:System.Diagnostics.ProcessPriorityClass> enumeration, which lets you set the process priority to <xref:System.Diagnostics.ProcessPriorityClass.Idle>, <xref:System.Diagnostics.ProcessPriorityClass.Normal>, <xref:System.Diagnostics.ProcessPriorityClass.High>, <xref:System.Diagnostics.ProcessPriorityClass.AboveNormal>, <xref:System.Diagnostics.ProcessPriorityClass.BelowNormal>, or <xref:System.Diagnostics.ProcessPriorityClass.RealTime>.</span></span> <span data-ttu-id="26150-989">基于的时间的进程需要其他出于放访问到处理器时，可以由操作系统已更改的运行时间或其他提升，基本优先级别。</span><span class="sxs-lookup"><span data-stu-id="26150-989">Based on the time elapsed or other boosts, the base priority level can be changed by the operating system when a process needs to be put ahead of others for access to the processor.</span></span> <span data-ttu-id="26150-990">此外，你可以设置<xref:System.Diagnostics.Process.PriorityBoostEnabled%2A>以暂时提升离开等待状态的线程的优先级。</span><span class="sxs-lookup"><span data-stu-id="26150-990">In addition, you can set the <xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> to temporarily boost the priority level of threads that have been taken out of the wait state.</span></span> <span data-ttu-id="26150-991">当过程返回到等待状态时，将重置优先级。</span><span class="sxs-lookup"><span data-stu-id="26150-991">The priority is reset when the process returns to the wait state.</span></span>  
  
 <span data-ttu-id="26150-992"><xref:System.Diagnostics.Process.BasePriority%2A>属性，可以查看分配给过程的起始优先级。</span><span class="sxs-lookup"><span data-stu-id="26150-992">The <xref:System.Diagnostics.Process.BasePriority%2A> property lets you view the starting priority that is assigned to a process.</span></span> <span data-ttu-id="26150-993">但是，因为它是只读的不能使用<xref:System.Diagnostics.Process.BasePriority%2A>属性来设置进程的优先级。</span><span class="sxs-lookup"><span data-stu-id="26150-993">However, because it is read-only, you cannot use the <xref:System.Diagnostics.Process.BasePriority%2A> property to set the priority of a process.</span></span> <span data-ttu-id="26150-994">若要更改的优先级，使用<xref:System.Diagnostics.Process.PriorityClass%2A>属性，用于获取或设置进程的总体优先级类别。</span><span class="sxs-lookup"><span data-stu-id="26150-994">To change the priority, use the <xref:System.Diagnostics.Process.PriorityClass%2A> property, which gets or sets the overall priority category for the process.</span></span>  
  
 <span data-ttu-id="26150-995">不能使用系统监视器查看优先级类。</span><span class="sxs-lookup"><span data-stu-id="26150-995">The priority class cannot be viewed using System Monitor.</span></span> <span data-ttu-id="26150-996">下表显示之间的关系<xref:System.Diagnostics.Process.BasePriority%2A>和<xref:System.Diagnostics.Process.PriorityClass%2A>值。</span><span class="sxs-lookup"><span data-stu-id="26150-996">The following table shows the relationship between the <xref:System.Diagnostics.Process.BasePriority%2A> and <xref:System.Diagnostics.Process.PriorityClass%2A> values.</span></span>  
  
|<span data-ttu-id="26150-997">BasePriority</span><span class="sxs-lookup"><span data-stu-id="26150-997">BasePriority</span></span>|<span data-ttu-id="26150-998">PriorityClass</span><span class="sxs-lookup"><span data-stu-id="26150-998">PriorityClass</span></span>|  
|------------------|-------------------|  
|<span data-ttu-id="26150-999">4</span><span class="sxs-lookup"><span data-stu-id="26150-999">4</span></span>|<xref:System.Diagnostics.ProcessPriorityClass.Idle>|  
|<span data-ttu-id="26150-1000">8</span><span class="sxs-lookup"><span data-stu-id="26150-1000">8</span></span>|<xref:System.Diagnostics.ProcessPriorityClass.Normal>|  
|<span data-ttu-id="26150-1001">13</span><span class="sxs-lookup"><span data-stu-id="26150-1001">13</span></span>|<xref:System.Diagnostics.ProcessPriorityClass.High>|  
|<span data-ttu-id="26150-1002">24</span><span class="sxs-lookup"><span data-stu-id="26150-1002">24</span></span>|<xref:System.Diagnostics.ProcessPriorityClass.RealTime>|  
  
   
  
## Examples  
 <span data-ttu-id="26150-1003">以下示例启动记事本实例。</span><span class="sxs-lookup"><span data-stu-id="26150-1003">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="26150-1004">该示例然后检索并显示关联的进程的各种属性。</span><span class="sxs-lookup"><span data-stu-id="26150-1004">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="26150-1005">该示例检测时在进程退出，并显示进程的退出代码。</span><span class="sxs-lookup"><span data-stu-id="26150-1005">The example detects when the process exits, and displays the process's exit code.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">
          <span data-ttu-id="26150-1006">无法从关联的进程资源中设置或检索进程优先级信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1006">Process priority information could not be set or retrieved from the associated process resource.</span>
          </span>
          <span data-ttu-id="26150-1007">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1007">-or-</span>
          </span>
          <span data-ttu-id="26150-1008">进程标识符或进程句柄为零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1008">The process identifier or process handle is zero.</span>
          </span>
          <span data-ttu-id="26150-1009">（进程尚未启动。）</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1009">(The process has not been started.)</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="26150-1010">你正试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.PriorityClass" /> 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1010">You are attempting to access the <see cref="P:System.Diagnostics.Process.PriorityClass" /> property for a process that is running on a remote computer.</span>
          </span>
          <span data-ttu-id="26150-1011">此属性仅可用于本地计算机上运行的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1011">This property is available only for processes that are running on the local computer.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-1012">进程 <see cref="P:System.Diagnostics.Process.Id" /> 不可用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1012">The process <see cref="P:System.Diagnostics.Process.Id" /> is not available.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-1013">当使用 Windows 98 或 Windows Millennium Edition (Windows Me) 时，已将 <see cref="P:System.Diagnostics.Process.PriorityClass" /> 设置为 <see langword="AboveNormal" /> 或 <see langword="BelowNormal" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1013">You have set the <see cref="P:System.Diagnostics.Process.PriorityClass" /> to <see langword="AboveNormal" /> or <see langword="BelowNormal" /> when using Windows 98 or Windows Millennium Edition (Windows Me).</span>
          </span>
          <span data-ttu-id="26150-1014">这些平台不支持优先级类的这些值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1014">These platforms do not support those values for the priority class.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <span data-ttu-id="26150-1015">无法设置优先级类，因为它不使用有效的值，如 <see cref="T:System.Diagnostics.ProcessPriorityClass" /> 枚举中所定义。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1015">Priority class cannot be set because it does not use a valid value, as defined in the <see cref="T:System.Diagnostics.ProcessPriorityClass" /> enumeration.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1016">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1016">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1017">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1017">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.BasePriority" />
        <altmember cref="P:System.Diagnostics.Process.PriorityBoostEnabled" />
      </Docs>
    </Member>
    <Member MemberName="PrivateMemorySize">
      <MemberSignature Language="C#" Value="public int PrivateMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PrivateMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PrivateMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PrivateMemorySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PrivateMemorySize { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of memory exclusively used by this process.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use PrivateMemorySize64")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-1018">获取为关联的进程分配的专用内存量（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1018">Gets the amount of private memory, in bytes, allocated for the associated process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-1019">由关联的进程分配的、不能与其他进程共享的字节数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1019">The number of bytes allocated by the associated process that cannot be shared with other processes.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-1020">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1020">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1021">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1021">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1022">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1022">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.PrivateMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="PrivateMemorySize64">
      <MemberSignature Language="C#" Value="public long PrivateMemorySize64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 PrivateMemorySize64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PrivateMemorySize64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PrivateMemorySize64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long PrivateMemorySize64 { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of memory exclusively used by this process.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-1023">获取为关联的进程分配的专用内存量（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1023">Gets the amount of private memory, in bytes, allocated for the associated process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-1024">为关联进程分配的不能与其他进程共享的内存量(以字节为单位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1024">The amount of memory, in bytes, allocated for the associated process that cannot be shared with other processes.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-1025">返回此属性的值表示的过程，以字节为单位，不能共享与其他进程使用的内存的当前大小。</span><span class="sxs-lookup"><span data-stu-id="26150-1025">The value returned by this property represents the current size of memory used by the process, in bytes, that cannot be shared with other processes.</span></span>  
  
 <span data-ttu-id="26150-1026">此属性可以用于监视与 32 位处理器或 64 位处理器的计算机上的内存使用情况。</span><span class="sxs-lookup"><span data-stu-id="26150-1026">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="26150-1027">属性值等于**专用字节**进程的性能计数器。</span><span class="sxs-lookup"><span data-stu-id="26150-1027">The property value is equivalent to the **Private Bytes** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-1028">下面的代码示例启动记事本应用程序的一个实例。</span><span class="sxs-lookup"><span data-stu-id="26150-1028">The following code example starts an instance of the Notepad application.</span></span> <span data-ttu-id="26150-1029">该示例然后检索并显示关联的进程的各种属性。</span><span class="sxs-lookup"><span data-stu-id="26150-1029">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="26150-1030">该示例检测时在进程退出，并显示其退出代码，峰值内存统计信息。</span><span class="sxs-lookup"><span data-stu-id="26150-1030">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-1031">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1031">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1032">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1032">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1033">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1033">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="PrivilegedProcessorTime">
      <MemberSignature Language="C#" Value="public TimeSpan PrivilegedProcessorTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan PrivilegedProcessorTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.PrivilegedProcessorTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PrivilegedProcessorTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan PrivilegedProcessorTime { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of CPU time the process spent inside the operating system core.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-1034">获取此进程的特权处理器时间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1034">Gets the privileged processor time for this process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-1035">
            <see cref="T:System.TimeSpan" />，它指示进程在操作系统内核中运行代码所用的时间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1035">A <see cref="T:System.TimeSpan" /> that indicates the amount of time that the process has spent running code inside the operating system core.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="26150-1036">以下示例启动记事本实例。</span><span class="sxs-lookup"><span data-stu-id="26150-1036">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="26150-1037">该示例然后检索并显示关联的进程的各种属性。</span><span class="sxs-lookup"><span data-stu-id="26150-1037">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="26150-1038">该示例检测时在进程退出，并显示进程的退出代码。</span><span class="sxs-lookup"><span data-stu-id="26150-1038">The example detects when the process exits, and displays the process's exit code.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-1039">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1039">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="26150-1040">你正试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" /> 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1040">You are attempting to access the <see cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" /> property for a process that is running on a remote computer.</span>
          </span>
          <span data-ttu-id="26150-1041">此属性仅可用于本地计算机上运行的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1041">This property is available only for processes that are running on the local computer.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1042">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1042">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1043">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1043">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.UserProcessorTime" />
        <altmember cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" />
      </Docs>
    </Member>
    <Member MemberName="ProcessName">
      <MemberSignature Language="C#" Value="public string ProcessName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProcessName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.ProcessName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProcessName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProcessName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The name of this process.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-1044">获取该进程的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1044">Gets the name of the process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-1045">系统用以向用户标识该进程的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1045">The name that the system uses to identify the process to the user.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-1046"><xref:System.Diagnostics.Process.ProcessName%2A>属性包含可执行文件名称，例如 Outlook 中，不包含扩展名为.exe 或路径。</span><span class="sxs-lookup"><span data-stu-id="26150-1046">The <xref:System.Diagnostics.Process.ProcessName%2A> property holds an executable file name, such as Outlook, that does not include the .exe extension or the path.</span></span> <span data-ttu-id="26150-1047">它可帮助获取和操作与相同的可执行文件相关联的所有进程。</span><span class="sxs-lookup"><span data-stu-id="26150-1047">It is helpful for getting and manipulating all the processes that are associated with the same executable file.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-1048">上[!INCLUDE[Win2kFamily](~/includes/win2kfamily-md.md)]操作系统，<xref:System.Diagnostics.Process.ProcessName%2A>属性可能会截断至 15 个字符，如果无法获取进程模块信息。</span><span class="sxs-lookup"><span data-stu-id="26150-1048">On [!INCLUDE[Win2kFamily](~/includes/win2kfamily-md.md)] operating systems, the <xref:System.Diagnostics.Process.ProcessName%2A> property may be truncated to 15 characters if the process module information cannot be obtained.</span></span>  
  
 <span data-ttu-id="26150-1049">你可以调用<xref:System.Diagnostics.Process.GetProcessesByName%2A>，将其传递可执行文件名称，以检索包含指定的计算机上每个正在运行的实例的数组。</span><span class="sxs-lookup"><span data-stu-id="26150-1049">You can call <xref:System.Diagnostics.Process.GetProcessesByName%2A>, passing it an executable file name, to retrieve an array that contains every running instance on the specified computer.</span></span> <span data-ttu-id="26150-1050">可以使用此数组，例如，若要关闭所有运行的可执行文件的实例。</span><span class="sxs-lookup"><span data-stu-id="26150-1050">You can use this array, for example, to shut down all the running instances of the executable file.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-1051">进程没有标识符，或者没有与 <see cref="T:System.Diagnostics.Process" /> 关联的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1051">The process does not have an identifier, or no process is associated with the <see cref="T:System.Diagnostics.Process" />.</span>
          </span>
          <span data-ttu-id="26150-1052">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1052">-or-</span>
          </span>
          <span data-ttu-id="26150-1053">关联进程已退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1053">The associated process has exited.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-1054">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)；将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 设置为 <see langword="false" />，以在 Windows 98 和 Windows Me 上访问此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1054">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> to <see langword="false" /> to access this property on Windows 98 and Windows Me.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="26150-1055">进程不在此计算机上。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1055">The process is not on this computer.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1056">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1056">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1057">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1057">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Diagnostics.Process.GetProcessesByName(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ProcessorAffinity">
      <MemberSignature Language="C#" Value="public IntPtr ProcessorAffinity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ProcessorAffinity" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.ProcessorAffinity" />
      <MemberSignature Language="VB.NET" Value="Public Property ProcessorAffinity As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr ProcessorAffinity { IntPtr get(); void set(IntPtr value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Allowed processor that can be used by this process.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-1058">获取或设置一些处理器，此进程中的线程可以按计划在这些处理器上运行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1058">Gets or sets the processors on which the threads in this process can be scheduled to run.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-1059">位掩码，表示关联进程内的线程可以在其上运行的处理器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1059">A bitmask representing the processors that the threads in the associated process can run on.</span>
          </span>
          <span data-ttu-id="26150-1060">默认值取决于计算机上的处理器数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1060">The default depends on the number of processors on the computer.</span>
          </span>
          <span data-ttu-id="26150-1061">默认值为 2 <sup>n</sup> -1，其中 n 是处理器数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1061">The default value is 2 <sup>n</sup> -1, where n is the number of processors.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-1062">Windows 2000 及更高版本，一个进程中的线程可以迁移处理器间重新加载处理器缓存每个迁移。</span><span class="sxs-lookup"><span data-stu-id="26150-1062">In Windows 2000 and later, a thread in a process can migrate from processor to processor, with each migration reloading the processor cache.</span></span> <span data-ttu-id="26150-1063">在高系统负荷情况下指定在哪个处理器应运行特定线程可以提高性能通过减少处理器缓存都会重新加载的次数。</span><span class="sxs-lookup"><span data-stu-id="26150-1063">Under heavy system loads, specifying which processor should run a specific thread can improve performance by reducing the number of times the processor cache is reloaded.</span></span> <span data-ttu-id="26150-1064">处理器和线程之间的关联称为处理器关联。</span><span class="sxs-lookup"><span data-stu-id="26150-1064">The association between a processor and a thread is called the processor affinity.</span></span>  
  
 <span data-ttu-id="26150-1065">每个处理器表示为一位。</span><span class="sxs-lookup"><span data-stu-id="26150-1065">Each processor is represented as a bit.</span></span> <span data-ttu-id="26150-1066">位 0 是一个处理器，位 1 是处理器二，等等。</span><span class="sxs-lookup"><span data-stu-id="26150-1066">Bit 0 is processor one, bit 1 is processor two, and so forth.</span></span> <span data-ttu-id="26150-1067">如果将位设置为值 1，进行线程分配情况下会选择相应的处理器。</span><span class="sxs-lookup"><span data-stu-id="26150-1067">If you set a bit to the value 1, the corresponding processor is selected for thread assignment.</span></span> <span data-ttu-id="26150-1068">当你将设置<xref:System.Diagnostics.Process.ProcessorAffinity%2A>值为零，操作系统线程的关联的计划算法组。</span><span class="sxs-lookup"><span data-stu-id="26150-1068">When you set the <xref:System.Diagnostics.Process.ProcessorAffinity%2A> value to zero, the operating system's scheduling algorithms set the thread's affinity.</span></span> <span data-ttu-id="26150-1069">当<xref:System.Diagnostics.Process.ProcessorAffinity%2A>值设置为任一非零值，该值被解释为指定可供选择的处理器的位掩码。</span><span class="sxs-lookup"><span data-stu-id="26150-1069">When the <xref:System.Diagnostics.Process.ProcessorAffinity%2A> value is set to any nonzero value, the value is interpreted as a bitmask that specifies those processors eligible for selection.</span></span>  
  
 <span data-ttu-id="26150-1070">下表显示了选择的<xref:System.Diagnostics.Process.ProcessorAffinity%2A>8 处理器系统值。</span><span class="sxs-lookup"><span data-stu-id="26150-1070">The following table shows a selection of <xref:System.Diagnostics.Process.ProcessorAffinity%2A> values for an eight-processor system.</span></span>  
  
|<span data-ttu-id="26150-1071">位掩码</span><span class="sxs-lookup"><span data-stu-id="26150-1071">Bitmask</span></span>|<span data-ttu-id="26150-1072">二进制值</span><span class="sxs-lookup"><span data-stu-id="26150-1072">Binary value</span></span>|<span data-ttu-id="26150-1073">符合条件的处理器</span><span class="sxs-lookup"><span data-stu-id="26150-1073">Eligible processors</span></span>|  
|-------------|------------------|-------------------------|  
|<span data-ttu-id="26150-1074">0x0001</span><span class="sxs-lookup"><span data-stu-id="26150-1074">0x0001</span></span>|<span data-ttu-id="26150-1075">00000000 00000001</span><span class="sxs-lookup"><span data-stu-id="26150-1075">00000000 00000001</span></span>|<span data-ttu-id="26150-1076">1</span><span class="sxs-lookup"><span data-stu-id="26150-1076">1</span></span>|  
|<span data-ttu-id="26150-1077">0x0003</span><span class="sxs-lookup"><span data-stu-id="26150-1077">0x0003</span></span>|<span data-ttu-id="26150-1078">00000000 00000011</span><span class="sxs-lookup"><span data-stu-id="26150-1078">00000000 00000011</span></span>|<span data-ttu-id="26150-1079">1 和 2</span><span class="sxs-lookup"><span data-stu-id="26150-1079">1 and 2</span></span>|  
|<span data-ttu-id="26150-1080">0x0007</span><span class="sxs-lookup"><span data-stu-id="26150-1080">0x0007</span></span>|<span data-ttu-id="26150-1081">00000000 00000111</span><span class="sxs-lookup"><span data-stu-id="26150-1081">00000000 00000111</span></span>|<span data-ttu-id="26150-1082">1、 2 和 3</span><span class="sxs-lookup"><span data-stu-id="26150-1082">1, 2 and 3</span></span>|  
|<span data-ttu-id="26150-1083">0x0009</span><span class="sxs-lookup"><span data-stu-id="26150-1083">0x0009</span></span>|<span data-ttu-id="26150-1084">00000000 00001001</span><span class="sxs-lookup"><span data-stu-id="26150-1084">00000000 00001001</span></span>|<span data-ttu-id="26150-1085">1 和 4</span><span class="sxs-lookup"><span data-stu-id="26150-1085">1 and 4</span></span>|  
|<span data-ttu-id="26150-1086">0x007F</span><span class="sxs-lookup"><span data-stu-id="26150-1086">0x007F</span></span>|<span data-ttu-id="26150-1087">00000000 01111111</span><span class="sxs-lookup"><span data-stu-id="26150-1087">00000000 01111111</span></span>|<span data-ttu-id="26150-1088">1、 2、 3、 4、 5、 6 和 7</span><span class="sxs-lookup"><span data-stu-id="26150-1088">1, 2, 3, 4, 5, 6 and 7</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">
          <span data-ttu-id="26150-1089">未能从关联的进程资源设置或检索 <see cref="P:System.Diagnostics.Process.ProcessorAffinity" /> 信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1089">
              <see cref="P:System.Diagnostics.Process.ProcessorAffinity" /> information could not be set or retrieved from the associated process resource.</span>
          </span>
          <span data-ttu-id="26150-1090">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1090">-or-</span>
          </span>
          <span data-ttu-id="26150-1091">进程标识符或进程句柄为零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1091">The process identifier or process handle is zero.</span>
          </span>
          <span data-ttu-id="26150-1092">（进程尚未启动。）</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1092">(The process has not been started.)</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="26150-1093">你正试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.ProcessorAffinity" /> 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1093">You are attempting to access the <see cref="P:System.Diagnostics.Process.ProcessorAffinity" /> property for a process that is running on a remote computer.</span>
          </span>
          <span data-ttu-id="26150-1094">此属性仅可用于本地计算机上运行的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1094">This property is available only for processes that are running on the local computer.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-1095">进程 <see cref="P:System.Diagnostics.Process.Id" /> 不可用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1095">The process <see cref="P:System.Diagnostics.Process.Id" /> was not available.</span>
          </span>
          <span data-ttu-id="26150-1096">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1096">-or-</span>
          </span>
          <span data-ttu-id="26150-1097">该进程已退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1097">The process has exited.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1098">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1098">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1099">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1099">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Refresh();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="26150-1100">放弃已缓存到进程组件的关联仅存的任何相关信息。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1100">Discards any information about the associated process that has been cached inside the process component.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-1101">后<xref:System.Diagnostics.Process.Refresh%2A>调用，第一个请求有关每个属性的信息会导致进程组件从关联进程中获取新值。</span><span class="sxs-lookup"><span data-stu-id="26150-1101">After <xref:System.Diagnostics.Process.Refresh%2A> is called, the first request for information about each property causes the process component to obtain a new value from the associated process.</span></span>  
  
 <span data-ttu-id="26150-1102">当<xref:System.Diagnostics.Process>组件是关联的进程资源的属性值<xref:System.Diagnostics.Process>立即填充根据关联的进程的状态。</span><span class="sxs-lookup"><span data-stu-id="26150-1102">When a <xref:System.Diagnostics.Process> component is associated with a process resource, the property values of the <xref:System.Diagnostics.Process> are immediately populated according to the status of the associated process.</span></span> <span data-ttu-id="26150-1103">如果随后更改有关关联的进程的信息，这些更改不会反映在<xref:System.Diagnostics.Process>组件的缓存值。</span><span class="sxs-lookup"><span data-stu-id="26150-1103">If the information about the associated process subsequently changes, those changes are not reflected in the <xref:System.Diagnostics.Process> component's cached values.</span></span> <span data-ttu-id="26150-1104"><xref:System.Diagnostics.Process>组件时的进程资源的快照是对与其关联。</span><span class="sxs-lookup"><span data-stu-id="26150-1104">The <xref:System.Diagnostics.Process> component is a snapshot of the process resource at the time they are associated.</span></span> <span data-ttu-id="26150-1105">若要查看为关联进程的当前值，调用<xref:System.Diagnostics.Process.Refresh%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="26150-1105">To view the current values for the associated process, call the <xref:System.Diagnostics.Process.Refresh%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-1106">以下示例启动记事本实例。</span><span class="sxs-lookup"><span data-stu-id="26150-1106">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="26150-1107">然后在 10 秒最多两秒为间隔检索关联进程的物理内存的使用量。</span><span class="sxs-lookup"><span data-stu-id="26150-1107">It then retrieves the physical memory usage of the associated process at 2 second intervals for a maximum of 10 seconds.</span></span> <span data-ttu-id="26150-1108">该示例检测在进程退出之前经过 10 秒后。</span><span class="sxs-lookup"><span data-stu-id="26150-1108">The example detects whether the process exits before 10 seconds have elapsed.</span></span> <span data-ttu-id="26150-1109">如果它仍在运行在 10 秒后，该示例将关闭进程。</span><span class="sxs-lookup"><span data-stu-id="26150-1109">The example closes the process if it is still running after 10 seconds.</span></span>  
  
 [!code-cpp[process_refresh#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_refresh/CPP/process_refresh.cpp#1)]
 [!code-csharp[process_refresh#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_refresh/CS/process_refresh.cs#1)]
 [!code-vb[process_refresh#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_refresh/VB/process_refresh.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1110">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1110">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1111">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1111">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Responding">
      <MemberSignature Language="C#" Value="public bool Responding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Responding" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.Responding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Responding As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Responding { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Is this process responsive.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-1112">获取指示进程的用户界面当前是否响应的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1112">Gets a value indicating whether the user interface of the process is responding.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-1113">如果关联进程的用户界面当前响应系统，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1113">
              <see langword="true" /> if the user interface of the associated process is responding to the system; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-1114">如果进程具有用户界面，<xref:System.Diagnostics.Process.Responding%2A>属性联系来确定进程是否正在响应用户输入的用户界面。</span><span class="sxs-lookup"><span data-stu-id="26150-1114">If a process has a user interface, the <xref:System.Diagnostics.Process.Responding%2A> property contacts the user interface to determine whether the process is responding to user input.</span></span> <span data-ttu-id="26150-1115">如果接口未立即响应<xref:System.Diagnostics.Process.Responding%2A>属性返回`false`。</span><span class="sxs-lookup"><span data-stu-id="26150-1115">If the interface does not respond immediately, the <xref:System.Diagnostics.Process.Responding%2A> property returns `false`.</span></span> <span data-ttu-id="26150-1116">使用此属性确定关联的进程的界面已停止响应。</span><span class="sxs-lookup"><span data-stu-id="26150-1116">Use this property to determine whether the interface of the associated process has stopped responding.</span></span>  
  
 <span data-ttu-id="26150-1117">如果进程不具有<xref:System.Diagnostics.Process.MainWindowHandle%2A>，此属性返回`true`。</span><span class="sxs-lookup"><span data-stu-id="26150-1117">If the process does not have a <xref:System.Diagnostics.Process.MainWindowHandle%2A>, this property returns `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-1118">以下示例启动记事本实例。</span><span class="sxs-lookup"><span data-stu-id="26150-1118">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="26150-1119">该示例然后检索并显示关联的进程的各种属性。</span><span class="sxs-lookup"><span data-stu-id="26150-1119">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="26150-1120">该示例检测时在进程退出，并显示进程的退出代码。</span><span class="sxs-lookup"><span data-stu-id="26150-1120">The example detects when the process exits, and displays the process's exit code.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-1121">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)；将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 设置为 <see langword="false" />，以在 Windows 98 和 Windows Me 上访问此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1121">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> to <see langword="false" /> to access this property on Windows 98 and Windows Me.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-1122">没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1122">There is no process associated with this <see cref="T:System.Diagnostics.Process" /> object.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="26150-1123">你正试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.Responding" /> 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1123">You are attempting to access the <see cref="P:System.Diagnostics.Process.Responding" /> property for a process that is running on a remote computer.</span>
          </span>
          <span data-ttu-id="26150-1124">此属性仅可用于本地计算机上运行的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1124">This property is available only for processes that are running on the local computer.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1125">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1125">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1126">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1126">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.MainWindowHandle" />
      </Docs>
    </Member>
    <Member MemberName="SafeHandle">
      <MemberSignature Language="C#" Value="public Microsoft.Win32.SafeHandles.SafeProcessHandle SafeHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Win32.SafeHandles.SafeProcessHandle SafeHandle" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.SafeHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SafeHandle As SafeProcessHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Win32::SafeHandles::SafeProcessHandle ^ SafeHandle { Microsoft::Win32::SafeHandles::SafeProcessHandle ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SafeHandles.SafeProcessHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-1127">获取此进程的本机句柄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1127">Gets the native handle to this process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-1128">此进程的本机句柄。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1128">The native handle to this process.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-1129">此句柄才只有一个调用组件启动该进程。</span><span class="sxs-lookup"><span data-stu-id="26150-1129">The handle is only available if the calling component started the process.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionId">
      <MemberSignature Language="C#" Value="public int SessionId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SessionId" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.SessionId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SessionId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SessionId { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The session ID for this process.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoNotSupported("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-1130">获取关联进程的终端服务会话标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1130">Gets the Terminal Services session identifier for the associated process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-1131">关联进程的终端服务会话标识符。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1131">The Terminal Services session identifier for the associated process.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-1132"><xref:System.Diagnostics.Process.SessionId%2A>属性标识在其中应用程序当前正在运行的会话。</span><span class="sxs-lookup"><span data-stu-id="26150-1132">The <xref:System.Diagnostics.Process.SessionId%2A> property identifies the session in which the application is currently running.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="26150-1133">没有与此进程关联的会话。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1133">There is no session associated with this process.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-1134">没有与此会话标识符关联的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1134">There is no process associated with this session identifier.</span>
          </span>
          <span data-ttu-id="26150-1135">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1135">-or-</span>
          </span>
          <span data-ttu-id="26150-1136">关联的进程不在此计算机上。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1136">The associated process is not on this machine.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-1137">Windows 98 不支持 <see cref="P:System.Diagnostics.Process.SessionId" /> 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1137">The <see cref="P:System.Diagnostics.Process.SessionId" /> property is not supported on Windows 98.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1138">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1138">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1139">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1139">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="StandardError">
      <MemberSignature Language="C#" Value="public System.IO.StreamReader StandardError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.StreamReader StandardError" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.StandardError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardError As StreamReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::StreamReader ^ StandardError { System::IO::StreamReader ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Standard error stream of the process.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-1140">获取用于读取应用程序错误输出的流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1140">Gets a stream used to read the error output of the application.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-1141">可用于读取应用程序的标准错误流的 <see cref="T:System.IO.StreamReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1141">A <see cref="T:System.IO.StreamReader" /> that can be used to read the standard error stream of the application.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-1142">当<xref:System.Diagnostics.Process>将文本写入其标准错误流中，通常在控制台上显示文本。</span><span class="sxs-lookup"><span data-stu-id="26150-1142">When a <xref:System.Diagnostics.Process> writes text to its standard error stream, that text is normally displayed on the console.</span></span> <span data-ttu-id="26150-1143">通过将重定向<xref:System.Diagnostics.Process.StandardError%2A>流，你可以操作或取消进程的错误输出。</span><span class="sxs-lookup"><span data-stu-id="26150-1143">By redirecting the <xref:System.Diagnostics.Process.StandardError%2A> stream, you can manipulate or suppress the error output of a process.</span></span> <span data-ttu-id="26150-1144">例如，你可以筛选文本、 格式设置不同，或将输出写入控制台和一个指定的日志文件。</span><span class="sxs-lookup"><span data-stu-id="26150-1144">For example, you can filter the text, format it differently, or write the output to both the console and a designated log file.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-1145">若要使用<xref:System.Diagnostics.Process.StandardError%2A>，必须设置<xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType>到`false`，并且必须设置<xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A?displayProperty=nameWithType>到`true`。</span><span class="sxs-lookup"><span data-stu-id="26150-1145">To use <xref:System.Diagnostics.Process.StandardError%2A>, you must set <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType> to `false`, and you must set <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A?displayProperty=nameWithType> to `true`.</span></span> <span data-ttu-id="26150-1146">否则，读取从<xref:System.Diagnostics.Process.StandardError%2A>流时将引发异常。</span><span class="sxs-lookup"><span data-stu-id="26150-1146">Otherwise, reading from the <xref:System.Diagnostics.Process.StandardError%2A> stream throws an exception.</span></span>  
  
 <span data-ttu-id="26150-1147">重定向<xref:System.Diagnostics.Process.StandardError%2A>可以读取流，同步或异步。</span><span class="sxs-lookup"><span data-stu-id="26150-1147">The redirected <xref:System.Diagnostics.Process.StandardError%2A> stream can be read synchronously or asynchronously.</span></span> <span data-ttu-id="26150-1148">等方法<xref:System.IO.StreamReader.Read%2A>， <xref:System.IO.StreamReader.ReadLine%2A>，和<xref:System.IO.StreamReader.ReadToEnd%2A>同步对执行读取的操作的错误输出流的过程。</span><span class="sxs-lookup"><span data-stu-id="26150-1148">Methods such as <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>, and <xref:System.IO.StreamReader.ReadToEnd%2A> perform synchronous read operations on the error output stream of the process.</span></span> <span data-ttu-id="26150-1149">这些同步读取操作不会完成之前关联<xref:System.Diagnostics.Process>写入其<xref:System.Diagnostics.Process.StandardError%2A>流处理时，或关闭流。</span><span class="sxs-lookup"><span data-stu-id="26150-1149">These synchronous read operations do not complete until the associated <xref:System.Diagnostics.Process> writes to its <xref:System.Diagnostics.Process.StandardError%2A> stream, or closes the stream.</span></span>  
  
 <span data-ttu-id="26150-1150">与此相反，<xref:System.Diagnostics.Process.BeginErrorReadLine%2A>开始异步读取操作上<xref:System.Diagnostics.Process.StandardError%2A>流。</span><span class="sxs-lookup"><span data-stu-id="26150-1150">In contrast, <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> starts asynchronous read operations on the <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span> <span data-ttu-id="26150-1151">此方法将启用流输出指定的事件处理程序并立即返回到调用方，流输出定向到事件处理程序时可以执行其他工作。</span><span class="sxs-lookup"><span data-stu-id="26150-1151">This method enables a designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.</span></span>  
  
 <span data-ttu-id="26150-1152">同步读取操作引入读取从调用方之间的依赖项<xref:System.Diagnostics.Process.StandardError%2A>流和子进程的写入该流。</span><span class="sxs-lookup"><span data-stu-id="26150-1152">Synchronous read operations introduce a dependency between the caller reading from the <xref:System.Diagnostics.Process.StandardError%2A> stream and the child process writing to that stream.</span></span> <span data-ttu-id="26150-1153">这些依赖关系可能会导致死锁条件。</span><span class="sxs-lookup"><span data-stu-id="26150-1153">These dependencies can result in deadlock conditions.</span></span> <span data-ttu-id="26150-1154">当调用方读取子进程的重定向流时，它是依赖于子。</span><span class="sxs-lookup"><span data-stu-id="26150-1154">When the caller reads from the redirected stream of a child process, it is dependent on the child.</span></span> <span data-ttu-id="26150-1155">调用方上读取操作会一直等到子写入流或关闭流。</span><span class="sxs-lookup"><span data-stu-id="26150-1155">The caller waits on the read operation until the child writes to the stream or closes the stream.</span></span> <span data-ttu-id="26150-1156">子进程在编写时数据不足，无法填充其重定向的流，它是依赖于父。</span><span class="sxs-lookup"><span data-stu-id="26150-1156">When the child process writes enough data to fill its redirected stream, it is dependent on the parent.</span></span> <span data-ttu-id="26150-1157">子进程一直等到下一步的写入操作上的父项从完整的流中读取或关闭流。</span><span class="sxs-lookup"><span data-stu-id="26150-1157">The child process waits on the next write operation until the parent reads from the full stream or closes the stream.</span></span> <span data-ttu-id="26150-1158">当调用方和子进程互相等待来完成操作，并且都可以继续执行，死锁条件的结果。</span><span class="sxs-lookup"><span data-stu-id="26150-1158">The deadlock condition results when the caller and child process wait on each other to complete an operation, and neither can proceed.</span></span> <span data-ttu-id="26150-1159">可以通过评估的调用方和子进程之间的依赖关系来避免死锁。</span><span class="sxs-lookup"><span data-stu-id="26150-1159">You can avoid deadlocks by evaluating dependencies between the caller and child process.</span></span>  
  
 <span data-ttu-id="26150-1160">下面的 C# 代码，例如，演示如何从重定向流中读取并等待子进程退出。</span><span class="sxs-lookup"><span data-stu-id="26150-1160">The following C# code, for example, shows how to read from a redirected stream and wait for the child process to exit.</span></span>  
  
```csharp  
// Start the child process.  
 Process p = new Process();  
 // Redirect the error stream of the child process.  
 p.StartInfo.UseShellExecute = false;  
 p.StartInfo.RedirectStandardError = true;  
 p.StartInfo.FileName = "Write500Lines.exe";  
 p.Start();  
 // Do not wait for the child process to exit before  
 // reading to the end of its redirected error stream.  
 // p.WaitForExit();  
 // Read the error stream first and then wait.  
 string error = p.StandardError.ReadToEnd();  
 p.WaitForExit();  
```  
  
 <span data-ttu-id="26150-1161">下面的代码示例通过调用来避免死锁条件`p.StandardError.ReadToEnd`之前`p.WaitForExit`。</span><span class="sxs-lookup"><span data-stu-id="26150-1161">The code example avoids a deadlock condition by calling `p.StandardError.ReadToEnd` before `p.WaitForExit`.</span></span> <span data-ttu-id="26150-1162">如果父进程调用会导致死锁条件`p.WaitForExit`之前`p.StandardError.ReadToEnd`和子进程将足够多的文本以填充重定向的流。</span><span class="sxs-lookup"><span data-stu-id="26150-1162">A deadlock condition can result if the parent process calls `p.WaitForExit` before `p.StandardError.ReadToEnd` and the child process writes enough text to fill the redirected stream.</span></span> <span data-ttu-id="26150-1163">父进程将无限期地等待子进程退出。</span><span class="sxs-lookup"><span data-stu-id="26150-1163">The parent process would wait indefinitely for the child process to exit.</span></span> <span data-ttu-id="26150-1164">子进程将无限期地等待父从完整读取<xref:System.Diagnostics.Process.StandardError%2A>流。</span><span class="sxs-lookup"><span data-stu-id="26150-1164">The child process would wait indefinitely for the parent to read from the full <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span>  
  
 <span data-ttu-id="26150-1165">从标准输出和标准错误流读取所有文本时类似问题。</span><span class="sxs-lookup"><span data-stu-id="26150-1165">There is a similar issue when you read all text from both the standard output and standard error streams.</span></span> <span data-ttu-id="26150-1166">下面的 C# 代码，例如，执行对这两种流的读取的操作。</span><span class="sxs-lookup"><span data-stu-id="26150-1166">The following C# code, for example, performs a read operation on both streams.</span></span>  
  
```csharp  
// Do not perform a synchronous read to the end of both   
// redirected streams.  
// string output = p.StandardOutput.ReadToEnd();  
// string error = p.StandardError.ReadToEnd();  
// p.WaitForExit();  
// Use asynchronous read operations on at least one of the streams.  
p.BeginOutputReadLine();  
string error = p.StandardError.ReadToEnd();  
p.WaitForExit();  
```  
  
 <span data-ttu-id="26150-1167">下面的代码示例通过执行异步上读取操作来避免死锁条件<xref:System.Diagnostics.Process.StandardOutput%2A>流。</span><span class="sxs-lookup"><span data-stu-id="26150-1167">The code example avoids the deadlock condition by performing asynchronous read operations on the <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span> <span data-ttu-id="26150-1168">死锁条件结果如果父进程调用`p.StandardOutput.ReadToEnd`跟`p.StandardError.ReadToEnd`和子进程将足够多的文本以填充其错误流。</span><span class="sxs-lookup"><span data-stu-id="26150-1168">A deadlock condition results if the parent process calls `p.StandardOutput.ReadToEnd` followed by `p.StandardError.ReadToEnd` and the child process writes enough text to fill its error stream.</span></span> <span data-ttu-id="26150-1169">父进程将无限期地等待子进程以关闭其<xref:System.Diagnostics.Process.StandardOutput%2A>流。</span><span class="sxs-lookup"><span data-stu-id="26150-1169">The parent process would wait indefinitely for the child process to close its <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span> <span data-ttu-id="26150-1170">子进程将无限期地等待父从完整读取<xref:System.Diagnostics.Process.StandardError%2A>流。</span><span class="sxs-lookup"><span data-stu-id="26150-1170">The child process would wait indefinitely for the parent to read from the full <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span>  
  
 <span data-ttu-id="26150-1171">异步读取的操作可用于避免这些依赖关系和其潜在的死锁。</span><span class="sxs-lookup"><span data-stu-id="26150-1171">You can use asynchronous read operations to avoid these dependencies and their deadlock potential.</span></span> <span data-ttu-id="26150-1172">或者，可以通过创建两个线程并读取在单独线程上的每个流的输出来避免出现死锁条件。</span><span class="sxs-lookup"><span data-stu-id="26150-1172">Alternately, you can avoid the deadlock condition by creating two threads and reading the output of each stream on a separate thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-1173">不能混合在重定向流上的异步和同步读取的操作。</span><span class="sxs-lookup"><span data-stu-id="26150-1173">You cannot mix asynchronous and synchronous read operations on a redirected stream.</span></span> <span data-ttu-id="26150-1174">一次的重定向的流<xref:System.Diagnostics.Process>打开在异步或同步模式下，所有进一步读取该流上的操作必须处于相同的模式。</span><span class="sxs-lookup"><span data-stu-id="26150-1174">Once the redirected stream of a <xref:System.Diagnostics.Process> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</span></span> <span data-ttu-id="26150-1175">例如，不遵循<xref:System.Diagnostics.Process.BeginErrorReadLine%2A>通过调用<xref:System.IO.StreamReader.ReadLine%2A>上<xref:System.Diagnostics.Process.StandardError%2A>流，反之亦然。</span><span class="sxs-lookup"><span data-stu-id="26150-1175">For example, do not follow <xref:System.Diagnostics.Process.BeginErrorReadLine%2A> with a call to <xref:System.IO.StreamReader.ReadLine%2A> on the <xref:System.Diagnostics.Process.StandardError%2A> stream, or vice versa.</span></span> <span data-ttu-id="26150-1176">但是，你可以读取在不同模式下的两个不同的流。</span><span class="sxs-lookup"><span data-stu-id="26150-1176">However, you can read two different streams in different modes.</span></span> <span data-ttu-id="26150-1177">例如，你可以调用<xref:System.Diagnostics.Process.BeginOutputReadLine%2A>，然后调用<xref:System.IO.StreamReader.ReadLine%2A>为<xref:System.Diagnostics.Process.StandardError%2A>流。</span><span class="sxs-lookup"><span data-stu-id="26150-1177">For example, you can call <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> and then call <xref:System.IO.StreamReader.ReadLine%2A> for the <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-1178">下面的示例使用`net use`命令和用户提供的参数映射的网络资源。</span><span class="sxs-lookup"><span data-stu-id="26150-1178">The following example uses the `net use` command together with a user supplied argument to map a network resource.</span></span> <span data-ttu-id="26150-1179">然后，读取标准错误流的 net 命令，并将其写入控制台。</span><span class="sxs-lookup"><span data-stu-id="26150-1179">It then reads the standard error stream of the net command and writes it to console.</span></span>  
  
 [!code-cpp[Process_StandardError#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process_StandardError/CPP/source.cpp#1)]
 [!code-csharp[Process_StandardError#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process_StandardError/CS/source.cs#1)]
 [!code-vb[Process_StandardError#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process_StandardError/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-1180">尚未对 <see cref="P:System.Diagnostics.Process.StandardError" /> 流进行重定向定义；请确保 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> 设置为 <see langword="true" /> 且 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 设置为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1180">The <see cref="P:System.Diagnostics.Process.StandardError" /> stream has not been defined for redirection; ensure <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> is set to <see langword="true" /> and <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> is set to <see langword="false" />.</span>
          </span>
          <span data-ttu-id="26150-1181">\- 或 -</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1181">\- or -</span>
          </span>
          <span data-ttu-id="26150-1182">已打开 <see cref="P:System.Diagnostics.Process.StandardError" /> 流，以使用 <see cref="M:System.Diagnostics.Process.BeginErrorReadLine" /> 进行异步读取操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1182">The <see cref="P:System.Diagnostics.Process.StandardError" /> stream has been opened for asynchronous read operations with <see cref="M:System.Diagnostics.Process.BeginErrorReadLine" />.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1183">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1183">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1184">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1184">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.StandardInput" />
        <altmember cref="P:System.Diagnostics.Process.StandardOutput" />
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" />
      </Docs>
    </Member>
    <Member MemberName="StandardInput">
      <MemberSignature Language="C#" Value="public System.IO.StreamWriter StandardInput { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.StreamWriter StandardInput" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.StandardInput" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardInput As StreamWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::StreamWriter ^ StandardInput { System::IO::StreamWriter ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Standard input stream of the process.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.StreamWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-1185">获取用于写入应用程序输入的流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1185">Gets a stream used to write the input of the application.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-1186">
            <see cref="T:System.IO.StreamWriter" />，可用于写入应用程序的标准输入流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1186">A <see cref="T:System.IO.StreamWriter" /> that can be used to write the standard input stream of the application.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-1187">A<xref:System.Diagnostics.Process>可以从其标准的输入流，通常是键盘读取输入的文本。</span><span class="sxs-lookup"><span data-stu-id="26150-1187">A <xref:System.Diagnostics.Process> can read input text from its standard input stream, typically the keyboard.</span></span> <span data-ttu-id="26150-1188">通过将重定向<xref:System.Diagnostics.Process.StandardInput%2A>流，你可以以编程方式指定输入。</span><span class="sxs-lookup"><span data-stu-id="26150-1188">By redirecting the <xref:System.Diagnostics.Process.StandardInput%2A> stream, you can programmatically specify the input.</span></span> <span data-ttu-id="26150-1189">例如，而不是使用键盘输入，你可以提供从指定文件的内容的文本或从另一个应用程序的输出。</span><span class="sxs-lookup"><span data-stu-id="26150-1189">For example, instead of using keyboard input, you can provide text from the contents of a designated file or output from another application.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-1190">若要使用<xref:System.Diagnostics.Process.StandardInput%2A>，必须设置<xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType>到`false`，并且必须设置<xref:System.Diagnostics.ProcessStartInfo.RedirectStandardInput%2A?displayProperty=nameWithType>到`true`。</span><span class="sxs-lookup"><span data-stu-id="26150-1190">To use <xref:System.Diagnostics.Process.StandardInput%2A>, you must set <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType> to `false`, and you must set <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardInput%2A?displayProperty=nameWithType> to `true`.</span></span> <span data-ttu-id="26150-1191">否则，写入<xref:System.Diagnostics.Process.StandardInput%2A>流时将引发异常。</span><span class="sxs-lookup"><span data-stu-id="26150-1191">Otherwise, writing to the <xref:System.Diagnostics.Process.StandardInput%2A> stream throws an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-1192">下面的示例演示如何将重定向<xref:System.Diagnostics.Process.StandardInput%2A>进程的流。</span><span class="sxs-lookup"><span data-stu-id="26150-1192">The following example illustrates how to redirect the <xref:System.Diagnostics.Process.StandardInput%2A> stream of a process.</span></span> <span data-ttu-id="26150-1193">该示例启动`sort`命令重定向的输入。</span><span class="sxs-lookup"><span data-stu-id="26150-1193">The example starts the `sort` command with redirected input.</span></span> <span data-ttu-id="26150-1194">然后会提示用户输入文本，并将传递给`sort`进程通过的重定向<xref:System.Diagnostics.Process.StandardInput%2A>流。</span><span class="sxs-lookup"><span data-stu-id="26150-1194">It then prompts the user for text, and passes that to the `sort` process by means of the redirected <xref:System.Diagnostics.Process.StandardInput%2A> stream.</span></span> <span data-ttu-id="26150-1195">`sort`结果显示到控制台上的用户。</span><span class="sxs-lookup"><span data-stu-id="26150-1195">The `sort` results are displayed to the user on the console.</span></span>  
  
 [!code-cpp[Process_StandardInput#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process_StandardInput/CPP/process_standardinput.cpp#1)]
 [!code-csharp[Process_StandardInput#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process_StandardInput/CS/process_standardinput.cs#1)]
 [!code-vb[Process_StandardInput#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process_StandardInput/VB/process_standardinput.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-1196">
            <see cref="P:System.Diagnostics.Process.StandardInput" /> 流尚未定义，因为 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" /> 设置为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1196">The <see cref="P:System.Diagnostics.Process.StandardInput" /> stream has not been defined because <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" /> is set to <see langword="false" />.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1197">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1197">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1198">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1198">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.StandardOutput" />
        <altmember cref="P:System.Diagnostics.Process.StandardError" />
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" />
      </Docs>
    </Member>
    <Member MemberName="StandardOutput">
      <MemberSignature Language="C#" Value="public System.IO.StreamReader StandardOutput { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.StreamReader StandardOutput" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.StandardOutput" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardOutput As StreamReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::StreamReader ^ StandardOutput { System::IO::StreamReader ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Standard output stream of the process.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.StreamReader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-1199">获取用于读取应用程序文本输出的流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1199">Gets a stream used to read the textual output of the application.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-1200">
            <see cref="T:System.IO.StreamReader" />，可用于读取应用程序的标准输出流。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1200">A <see cref="T:System.IO.StreamReader" /> that can be used to read the standard output stream of the application.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-1201">当<xref:System.Diagnostics.Process>将文本写入其标准的流，通常在控制台上显示文本。</span><span class="sxs-lookup"><span data-stu-id="26150-1201">When a <xref:System.Diagnostics.Process> writes text to its standard stream, that text is normally displayed on the console.</span></span> <span data-ttu-id="26150-1202">通过将重定向<xref:System.Diagnostics.Process.StandardOutput%2A>流，你可以操作或取消进程的输出。</span><span class="sxs-lookup"><span data-stu-id="26150-1202">By redirecting the <xref:System.Diagnostics.Process.StandardOutput%2A> stream, you can manipulate or suppress the output of a process.</span></span> <span data-ttu-id="26150-1203">例如，你可以筛选文本、 格式设置不同，或将输出写入控制台和一个指定的日志文件。</span><span class="sxs-lookup"><span data-stu-id="26150-1203">For example, you can filter the text, format it differently, or write the output to both the console and a designated log file.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-1204">若要使用<xref:System.Diagnostics.Process.StandardOutput%2A>，必须设置<xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType>到`false`，并且必须设置<xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A?displayProperty=nameWithType>到`true`。</span><span class="sxs-lookup"><span data-stu-id="26150-1204">To use <xref:System.Diagnostics.Process.StandardOutput%2A>, you must set <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A?displayProperty=nameWithType> to `false`, and you must set <xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A?displayProperty=nameWithType> to `true`.</span></span> <span data-ttu-id="26150-1205">否则，读取从<xref:System.Diagnostics.Process.StandardOutput%2A>流时将引发异常。</span><span class="sxs-lookup"><span data-stu-id="26150-1205">Otherwise, reading from the <xref:System.Diagnostics.Process.StandardOutput%2A> stream throws an exception.</span></span>  
  
 <span data-ttu-id="26150-1206">重定向<xref:System.Diagnostics.Process.StandardOutput%2A>可以读取流，同步或异步。</span><span class="sxs-lookup"><span data-stu-id="26150-1206">The redirected <xref:System.Diagnostics.Process.StandardOutput%2A> stream can be read synchronously or asynchronously.</span></span> <span data-ttu-id="26150-1207">等方法<xref:System.IO.StreamReader.Read%2A>， <xref:System.IO.StreamReader.ReadLine%2A>，和<xref:System.IO.StreamReader.ReadToEnd%2A>同步对执行读取的操作过程的输出流。</span><span class="sxs-lookup"><span data-stu-id="26150-1207">Methods such as <xref:System.IO.StreamReader.Read%2A>, <xref:System.IO.StreamReader.ReadLine%2A>, and <xref:System.IO.StreamReader.ReadToEnd%2A> perform synchronous read operations on the output stream of the process.</span></span> <span data-ttu-id="26150-1208">这些同步读取操作不会完成之前关联<xref:System.Diagnostics.Process>写入其<xref:System.Diagnostics.Process.StandardOutput%2A>流处理时，或关闭流。</span><span class="sxs-lookup"><span data-stu-id="26150-1208">These synchronous read operations do not complete until the associated <xref:System.Diagnostics.Process> writes to its <xref:System.Diagnostics.Process.StandardOutput%2A> stream, or closes the stream.</span></span>  
  
 <span data-ttu-id="26150-1209">与此相反，<xref:System.Diagnostics.Process.BeginOutputReadLine%2A>开始异步读取操作上<xref:System.Diagnostics.Process.StandardOutput%2A>流。</span><span class="sxs-lookup"><span data-stu-id="26150-1209">In contrast, <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> starts asynchronous read operations on the <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span> <span data-ttu-id="26150-1210">此方法将启用流输出指定的事件处理程序并立即返回到调用方，流输出定向到事件处理程序时可以执行其他工作。</span><span class="sxs-lookup"><span data-stu-id="26150-1210">This method enables a designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.</span></span>  
  
 <span data-ttu-id="26150-1211">同步读取操作引入读取从调用方之间的依赖项<xref:System.Diagnostics.Process.StandardOutput%2A>流和子进程的写入该流。</span><span class="sxs-lookup"><span data-stu-id="26150-1211">Synchronous read operations introduce a dependency between the caller reading from the <xref:System.Diagnostics.Process.StandardOutput%2A> stream and the child process writing to that stream.</span></span> <span data-ttu-id="26150-1212">这些依赖关系可能会导致死锁条件。</span><span class="sxs-lookup"><span data-stu-id="26150-1212">These dependencies can result in deadlock conditions.</span></span> <span data-ttu-id="26150-1213">当调用方读取子进程的重定向流时，它是依赖于子。</span><span class="sxs-lookup"><span data-stu-id="26150-1213">When the caller reads from the redirected stream of a child process, it is dependent on the child.</span></span> <span data-ttu-id="26150-1214">调用方上读取操作会一直等到子写入流或关闭流。</span><span class="sxs-lookup"><span data-stu-id="26150-1214">The caller waits on the read operation until the child writes to the stream or closes the stream.</span></span> <span data-ttu-id="26150-1215">子进程在编写时数据不足，无法填充其重定向的流，它是依赖于父。</span><span class="sxs-lookup"><span data-stu-id="26150-1215">When the child process writes enough data to fill its redirected stream, it is dependent on the parent.</span></span> <span data-ttu-id="26150-1216">子进程一直等到下一步的写入操作上的父项从完整的流中读取或关闭流。</span><span class="sxs-lookup"><span data-stu-id="26150-1216">The child process waits on the next write operation until the parent reads from the full stream or closes the stream.</span></span> <span data-ttu-id="26150-1217">当调用方和子进程互相等待来完成操作，并且都可以继续执行，死锁条件的结果。</span><span class="sxs-lookup"><span data-stu-id="26150-1217">The deadlock condition results when the caller and child process wait on each other to complete an operation, and neither can proceed.</span></span> <span data-ttu-id="26150-1218">可以通过评估的调用方和子进程之间的依赖关系来避免死锁。</span><span class="sxs-lookup"><span data-stu-id="26150-1218">You can avoid deadlocks by evaluating dependencies between the caller and child process.</span></span>  
  
 <span data-ttu-id="26150-1219">下面的 C# 代码，例如，演示如何从重定向流中读取并等待子进程退出。</span><span class="sxs-lookup"><span data-stu-id="26150-1219">The following C# code, for example, shows how to read from a redirected stream and wait for the child process to exit.</span></span>  
  
```csharp  
Process p = new Process();  
p.StartInfo.UseShellExecute = false;  
p.StartInfo.RedirectStandardOutput = true;  
p.StartInfo.FileName = "Write500Lines.exe";  
p.Start();  
  
// To avoid deadlocks, always read the output stream first and then wait.  
string output = p.StandardOutput.ReadToEnd();  
p.WaitForExit();  
```  
  
 <span data-ttu-id="26150-1220">下面的代码示例通过调用来避免死锁条件`p.StandardOutput.ReadToEnd`之前`p.WaitForExit`。</span><span class="sxs-lookup"><span data-stu-id="26150-1220">The code example avoids a deadlock condition by calling `p.StandardOutput.ReadToEnd` before `p.WaitForExit`.</span></span> <span data-ttu-id="26150-1221">如果父进程调用会导致死锁条件`p.WaitForExit`之前`p.StandardOutput.ReadToEnd`和子进程将足够多的文本以填充重定向的流。</span><span class="sxs-lookup"><span data-stu-id="26150-1221">A deadlock condition can result if the parent process calls `p.WaitForExit` before `p.StandardOutput.ReadToEnd` and the child process writes enough text to fill the redirected stream.</span></span> <span data-ttu-id="26150-1222">父进程将无限期地等待子进程退出。</span><span class="sxs-lookup"><span data-stu-id="26150-1222">The parent process would wait indefinitely for the child process to exit.</span></span> <span data-ttu-id="26150-1223">子进程将无限期地等待父从完整读取<xref:System.Diagnostics.Process.StandardOutput%2A>流。</span><span class="sxs-lookup"><span data-stu-id="26150-1223">The child process would wait indefinitely for the parent to read from the full <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span>  
  
 <span data-ttu-id="26150-1224">从标准输出和标准错误流读取所有文本时类似问题。</span><span class="sxs-lookup"><span data-stu-id="26150-1224">There is a similar issue when you read all text from both the standard output and standard error streams.</span></span> <span data-ttu-id="26150-1225">下面的 C# 代码，例如，执行对这两种流的读取的操作。</span><span class="sxs-lookup"><span data-stu-id="26150-1225">The following C# code, for example, performs a read operation on both streams.</span></span>  
  
```csharp  
// To avoid deadlocks, use asynchronous read operations on at least one of the streams.  
// Do not perform a synchronous read to the end of both redirected streams.  
p.BeginOutputReadLine();  
string error = p.StandardError.ReadToEnd();  
p.WaitForExit();  
```  
  
 <span data-ttu-id="26150-1226">下面的代码示例通过执行异步上读取操作来避免死锁条件<xref:System.Diagnostics.Process.StandardOutput%2A>流。</span><span class="sxs-lookup"><span data-stu-id="26150-1226">The code example avoids the deadlock condition by performing asynchronous read operations on the <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span> <span data-ttu-id="26150-1227">死锁条件结果如果父进程调用`p.StandardOutput.ReadToEnd`跟`p.StandardError.ReadToEnd`和子进程将足够多的文本以填充其错误流。</span><span class="sxs-lookup"><span data-stu-id="26150-1227">A deadlock condition results if the parent process calls `p.StandardOutput.ReadToEnd` followed by `p.StandardError.ReadToEnd` and the child process writes enough text to fill its error stream.</span></span> <span data-ttu-id="26150-1228">父进程将无限期地等待子进程以关闭其<xref:System.Diagnostics.Process.StandardOutput%2A>流。</span><span class="sxs-lookup"><span data-stu-id="26150-1228">The parent process would wait indefinitely for the child process to close its <xref:System.Diagnostics.Process.StandardOutput%2A> stream.</span></span> <span data-ttu-id="26150-1229">子进程将无限期地等待父从完整读取<xref:System.Diagnostics.Process.StandardError%2A>流。</span><span class="sxs-lookup"><span data-stu-id="26150-1229">The child process would wait indefinitely for the parent to read from the full <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span>  
  
 <span data-ttu-id="26150-1230">异步读取的操作可用于避免这些依赖关系和其潜在的死锁。</span><span class="sxs-lookup"><span data-stu-id="26150-1230">You can use asynchronous read operations to avoid these dependencies and their deadlock potential.</span></span> <span data-ttu-id="26150-1231">或者，可以通过创建两个线程并读取在单独线程上的每个流的输出来避免出现死锁条件。</span><span class="sxs-lookup"><span data-stu-id="26150-1231">Alternately, you can avoid the deadlock condition by creating two threads and reading the output of each stream on a separate thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-1232">不能混合在重定向流上的异步和同步读取的操作。</span><span class="sxs-lookup"><span data-stu-id="26150-1232">You cannot mix asynchronous and synchronous read operations on a redirected stream.</span></span> <span data-ttu-id="26150-1233">一次的重定向的流<xref:System.Diagnostics.Process>打开在异步或同步模式下，所有进一步读取该流上的操作必须处于相同的模式。</span><span class="sxs-lookup"><span data-stu-id="26150-1233">Once the redirected stream of a <xref:System.Diagnostics.Process> is opened in either asynchronous or synchronous mode, all further read operations on that stream must be in the same mode.</span></span> <span data-ttu-id="26150-1234">例如，不遵循<xref:System.Diagnostics.Process.BeginOutputReadLine%2A>通过调用<xref:System.IO.StreamReader.ReadLine%2A>上<xref:System.Diagnostics.Process.StandardOutput%2A>流，反之亦然。</span><span class="sxs-lookup"><span data-stu-id="26150-1234">For example, do not follow <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> with a call to <xref:System.IO.StreamReader.ReadLine%2A> on the <xref:System.Diagnostics.Process.StandardOutput%2A> stream, or vice versa.</span></span> <span data-ttu-id="26150-1235">但是，你可以读取在不同模式下的两个不同的流。</span><span class="sxs-lookup"><span data-stu-id="26150-1235">However, you can read two different streams in different modes.</span></span> <span data-ttu-id="26150-1236">例如，你可以调用<xref:System.Diagnostics.Process.BeginOutputReadLine%2A>，然后调用<xref:System.IO.StreamReader.ReadLine%2A>为<xref:System.Diagnostics.Process.StandardError%2A>流。</span><span class="sxs-lookup"><span data-stu-id="26150-1236">For example, you can call <xref:System.Diagnostics.Process.BeginOutputReadLine%2A> and then call <xref:System.IO.StreamReader.ReadLine%2A> for the <xref:System.Diagnostics.Process.StandardError%2A> stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-1237">下面的示例运行 ipconfig.exe 命令，并且将其标准输出重定向到示例的控制台窗口。</span><span class="sxs-lookup"><span data-stu-id="26150-1237">The following example runs the ipconfig.exe command and redirects its standard output to the example’s console window.</span></span>  
  
 [!code-cpp[Process_StandardOutput#2](~/samples/snippets/cpp/VS_Snippets_CLR/Process_StandardOutput/CPP/process_standardoutput.cpp#2)]
 [!code-csharp[Process_StandardOutput#2](~/samples/snippets/csharp/VS_Snippets_CLR/Process_StandardOutput/CS/process_standardoutput.cs#2)]
 [!code-vb[Process_StandardOutput#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process_StandardOutput/VB/process_standardoutput.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-1238">尚未对 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 流进行重定向定义；请确保 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /> 设置为 <see langword="true" /> 且 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 设置为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1238">The <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream has not been defined for redirection; ensure <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /> is set to <see langword="true" /> and <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> is set to <see langword="false" />.</span>
          </span>
          <span data-ttu-id="26150-1239">\- 或 -</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1239">\- or -</span>
          </span>
          <span data-ttu-id="26150-1240">已打开 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 流，以使用 <see cref="M:System.Diagnostics.Process.BeginOutputReadLine" /> 进行异步读取操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1240">The <see cref="P:System.Diagnostics.Process.StandardOutput" /> stream has been opened for asynchronous read operations with <see cref="M:System.Diagnostics.Process.BeginOutputReadLine" />.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1241">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1241">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1242">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1242">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.StandardInput" />
        <altmember cref="P:System.Diagnostics.Process.StandardError" />
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="26150-1243">启动进程资源并将其与 <see cref="T:System.Diagnostics.Process" /> 组件关联。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1243">Starts a process resource and associates it with a <see cref="T:System.Diagnostics.Process" /> component.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public bool Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Start" />
      <MemberSignature Language="VB.NET" Value="Public Function Start () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Start();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="26150-1244">启动(或重用)此 <see cref="T:System.Diagnostics.Process" /> 组件的 <see cref="P:System.Diagnostics.Process.StartInfo" /> 属性指定的进程资源，并将其与该组件关联。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1244">Starts (or reuses) the process resource that is specified by the <see cref="P:System.Diagnostics.Process.StartInfo" /> property of this <see cref="T:System.Diagnostics.Process" /> component and associates it with the component.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="26150-1245">如果启动了进程资源，则为 <see langword="true" />；如果没有启动新的进程资源(例如，如果重用了现有进程)，则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1245">
              <see langword="true" /> if a process resource is started; <see langword="false" /> if no new process resource is started (for example, if an existing process is reused).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-1246">使用此重载来启动一个进程资源并将其与当前<xref:System.Diagnostics.Process>组件。</span><span class="sxs-lookup"><span data-stu-id="26150-1246">Use this overload to start a process resource and associate it with the current <xref:System.Diagnostics.Process> component.</span></span> <span data-ttu-id="26150-1247">返回值`true`指示已启动了新的进程资源。</span><span class="sxs-lookup"><span data-stu-id="26150-1247">The return value `true` indicates that a new process resource was started.</span></span> <span data-ttu-id="26150-1248">如果指定的进程资源<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>的成员<xref:System.Diagnostics.Process.StartInfo%2A>属性已在计算机上运行、 启动任何其他进程资源。</span><span class="sxs-lookup"><span data-stu-id="26150-1248">If the process resource specified by the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> member of the <xref:System.Diagnostics.Process.StartInfo%2A> property is already running on the computer, no additional process resource is started.</span></span> <span data-ttu-id="26150-1249">相反，正在运行的进程资源重复使用和`false`返回。</span><span class="sxs-lookup"><span data-stu-id="26150-1249">Instead, the running process resource is reused and `false` is returned.</span></span>  
  
 <span data-ttu-id="26150-1250">可以通过指定最初从中安装应用程序的位置 （例如，Web 地址） 来启动 ClickOnce 应用程序。</span><span class="sxs-lookup"><span data-stu-id="26150-1250">You can start a ClickOnce application by specifying the location (for example, a Web address) from which you originally installed the application.</span></span> <span data-ttu-id="26150-1251">不通过指定其安装的位置在硬盘驱动器上启动 ClickOnce 应用程序。</span><span class="sxs-lookup"><span data-stu-id="26150-1251">Do not start a ClickOnce application by specifying its installed location on your hard drive.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-1252">如果你使用 Visual Studio 中，此重载<xref:System.Diagnostics.Process.Start%2A>方法是拖动后插入到代码中的一个<xref:System.Diagnostics.Process>组件拖放到设计器。</span><span class="sxs-lookup"><span data-stu-id="26150-1252">If you are using Visual Studio, this overload of the <xref:System.Diagnostics.Process.Start%2A> method is the one that you insert into your code after you drag a <xref:System.Diagnostics.Process> component onto the designer.</span></span> <span data-ttu-id="26150-1253">使用`Properties`窗口以展开`StartInfo`类别和写入到适当的值`FileName`属性。</span><span class="sxs-lookup"><span data-stu-id="26150-1253">Use the `Properties` window to expand the `StartInfo` category and write the appropriate value into the `FileName` property.</span></span> <span data-ttu-id="26150-1254">所做的更改将显示在窗体的`InitializeComponent`过程。</span><span class="sxs-lookup"><span data-stu-id="26150-1254">Your changes will appear in the form's `InitializeComponent` procedure.</span></span>  
  
 <span data-ttu-id="26150-1255">此重载<xref:System.Diagnostics.Process.Start%2A>不`static`方法。</span><span class="sxs-lookup"><span data-stu-id="26150-1255">This overload of <xref:System.Diagnostics.Process.Start%2A> is not a `static` method.</span></span> <span data-ttu-id="26150-1256">必须调用它的实例从<xref:System.Diagnostics.Process>类。</span><span class="sxs-lookup"><span data-stu-id="26150-1256">You must call it from an instance of the <xref:System.Diagnostics.Process> class.</span></span> <span data-ttu-id="26150-1257">之前调用<xref:System.Diagnostics.Process.Start%2A>，你必须首先指定<xref:System.Diagnostics.Process.StartInfo%2A>此属性信息<xref:System.Diagnostics.Process>实例，因为该信息用于确定要启动的进程资源。</span><span class="sxs-lookup"><span data-stu-id="26150-1257">Before calling <xref:System.Diagnostics.Process.Start%2A>, you must first specify <xref:System.Diagnostics.Process.StartInfo%2A> property information for this <xref:System.Diagnostics.Process> instance, because that information is used to determine the process resource to start.</span></span>  
  
 <span data-ttu-id="26150-1258">其他重载的<xref:System.Diagnostics.Process.Start%2A>方法`static`成员。</span><span class="sxs-lookup"><span data-stu-id="26150-1258">The other overloads of the <xref:System.Diagnostics.Process.Start%2A> method are `static` members.</span></span> <span data-ttu-id="26150-1259">不需要创建的实例<xref:System.Diagnostics.Process>组件之前调用这些方法的重载。</span><span class="sxs-lookup"><span data-stu-id="26150-1259">You do not need to create an instance of the <xref:System.Diagnostics.Process> component before you call those overloads of the method.</span></span> <span data-ttu-id="26150-1260">相反，您可以调用<xref:System.Diagnostics.Process.Start%2A>为<xref:System.Diagnostics.Process>类本身，以及新<xref:System.Diagnostics.Process>已启动进程时是否创建组件。</span><span class="sxs-lookup"><span data-stu-id="26150-1260">Instead, you can call <xref:System.Diagnostics.Process.Start%2A> for the <xref:System.Diagnostics.Process> class itself, and a new <xref:System.Diagnostics.Process> component is created if the process was started.</span></span> <span data-ttu-id="26150-1261">或者，`null`返回如果重用了进程。</span><span class="sxs-lookup"><span data-stu-id="26150-1261">Or, `null` is returned if a process was reused.</span></span> <span data-ttu-id="26150-1262">进程资源会自动与新关联<xref:System.Diagnostics.Process>组件返回<xref:System.Diagnostics.Process.Start%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="26150-1262">The process resource is automatically associated with the new <xref:System.Diagnostics.Process> component that is returned by the <xref:System.Diagnostics.Process.Start%2A> method.</span></span>  
  
 <span data-ttu-id="26150-1263"><xref:System.Diagnostics.Process.StartInfo%2A>成员可用于复制的功能`Run`对话框中的 windows`Start`菜单。</span><span class="sxs-lookup"><span data-stu-id="26150-1263">The <xref:System.Diagnostics.Process.StartInfo%2A> members can be used to duplicate the functionality of the `Run` dialog box of the Windows `Start` menu.</span></span> <span data-ttu-id="26150-1264">可以在命令行中键入的任何内容可以通过设置中的相应值来启动<xref:System.Diagnostics.Process.StartInfo%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="26150-1264">Anything that can be typed into a command line can be started by setting the appropriate values in the <xref:System.Diagnostics.Process.StartInfo%2A> property.</span></span> <span data-ttu-id="26150-1265">唯一<xref:System.Diagnostics.Process.StartInfo%2A>必须设置的属性是<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="26150-1265">The only <xref:System.Diagnostics.Process.StartInfo%2A> property that must be set is the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property.</span></span> <span data-ttu-id="26150-1266"><xref:System.Diagnostics.ProcessStartInfo.FileName%2A>属性不必是可执行文件。</span><span class="sxs-lookup"><span data-stu-id="26150-1266">The <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property does not have to be an executable file.</span></span> <span data-ttu-id="26150-1267">它可以是为其扩展已在系统安装的应用程序与关联任何文件类型。</span><span class="sxs-lookup"><span data-stu-id="26150-1267">It can be of any file type for which the extension has been associated with an application that is installed on the system.</span></span> <span data-ttu-id="26150-1268">例如，<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>属性可以具有.txt 扩展名，如果你具有使用编辑器 （如记事本） 相关联的文本文件或者如果你已经将提供一个文字处理的工具，如 Microsoft Word 的文本文件，它可以具有.doc 扩展名。</span><span class="sxs-lookup"><span data-stu-id="26150-1268">For example, the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc extension if you have associated.doc files with a word processing tool, such as Microsoft Word.</span></span>  
  
 <span data-ttu-id="26150-1269">在命令行中，你可以指定要为特定类型的文件执行操作。</span><span class="sxs-lookup"><span data-stu-id="26150-1269">In the command line, you can specify actions to take for certain types of files.</span></span> <span data-ttu-id="26150-1270">例如，您可以打印文档或编辑文本文件。</span><span class="sxs-lookup"><span data-stu-id="26150-1270">For example, you can print documents or edit text files.</span></span> <span data-ttu-id="26150-1271">指定使用这些操作<xref:System.Diagnostics.ProcessStartInfo.Verb%2A>的成员<xref:System.Diagnostics.Process.StartInfo%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="26150-1271">Specify these actions using the <xref:System.Diagnostics.ProcessStartInfo.Verb%2A> member of the <xref:System.Diagnostics.Process.StartInfo%2A> property.</span></span> <span data-ttu-id="26150-1272">对于其他类型的文件，你可以指定命令行自变量，在启动中的文件时`Run`对话框。</span><span class="sxs-lookup"><span data-stu-id="26150-1272">For other types of files, you can specify command-line arguments when you start the file from the `Run` dialog box.</span></span> <span data-ttu-id="26150-1273">例如，作为参数传递一个 URL，如果指定为你的浏览器<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>。</span><span class="sxs-lookup"><span data-stu-id="26150-1273">For example, you can pass a URL as an argument if you specify your browser as the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>.</span></span> <span data-ttu-id="26150-1274">这些参数可以指定在<xref:System.Diagnostics.Process.StartInfo%2A>属性的<xref:System.Diagnostics.ProcessStartInfo.Arguments%2A>成员。</span><span class="sxs-lookup"><span data-stu-id="26150-1274">These arguments can be specified in the <xref:System.Diagnostics.Process.StartInfo%2A> property's <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> member.</span></span>  
  
 <span data-ttu-id="26150-1275">如果你有系统中用引号中声明的路径变量，则必须启动任何进程在该位置中找到时，完全限定该路径。</span><span class="sxs-lookup"><span data-stu-id="26150-1275">If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location.</span></span> <span data-ttu-id="26150-1276">否则，系统将不到的路径。</span><span class="sxs-lookup"><span data-stu-id="26150-1276">Otherwise, the system will not find the path.</span></span> <span data-ttu-id="26150-1277">例如，如果`c:\mypath`不在你的路径，并将其使用引号引起来添加： `path = %path%;"c:\mypath"`，必须完全符合中的任何进程`c:\mypath`时启动它。</span><span class="sxs-lookup"><span data-stu-id="26150-1277">For example, if `c:\mypath` is not in your path, and you add it using quotation marks: `path = %path%;"c:\mypath"`, you must fully qualify any process in `c:\mypath` when starting it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-1278">ASP.NET Web 页和服务器控件的代码在 Web 服务器上的 ASP.NET 工作进程的上下文中执行。</span><span class="sxs-lookup"><span data-stu-id="26150-1278">ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server.</span></span>  <span data-ttu-id="26150-1279">如果你使用<xref:System.Diagnostics.Process.Start%2A>在 ASP.NET Web 页或服务器控件中的方法，在具有受限权限的 Web 服务器上执行新进程。</span><span class="sxs-lookup"><span data-stu-id="26150-1279">If you use the <xref:System.Diagnostics.Process.Start%2A> method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions.</span></span> <span data-ttu-id="26150-1280">进程不与客户端浏览器中，相同的上下文中启动，并且有权访问的用户桌面。</span><span class="sxs-lookup"><span data-stu-id="26150-1280">The process does not start in the same context as the client browser, and does not have access to the user desktop.</span></span>  
  
 <span data-ttu-id="26150-1281">无论何时使用<xref:System.Diagnostics.Process.Start%2A>若要启动进程时，你可能需要将其关闭或冒系统资源。</span><span class="sxs-lookup"><span data-stu-id="26150-1281">Whenever you use <xref:System.Diagnostics.Process.Start%2A> to start a process, you might need to close it or you risk losing system resources.</span></span> <span data-ttu-id="26150-1282">关闭进程使用<xref:System.Diagnostics.Process.CloseMainWindow%2A>或<xref:System.Diagnostics.Process.Kill%2A>。</span><span class="sxs-lookup"><span data-stu-id="26150-1282">Close processes using <xref:System.Diagnostics.Process.CloseMainWindow%2A> or <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="26150-1283">你可以检查是否已关闭进程通过其<xref:System.Diagnostics.Process.HasExited%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="26150-1283">You can check whether a process has already been closed by using its <xref:System.Diagnostics.Process.HasExited%2A> property.</span></span>  
  
 <span data-ttu-id="26150-1284">有关托管线程中的单元状态的注意事项此处是必需的。</span><span class="sxs-lookup"><span data-stu-id="26150-1284">A note about apartment states in managed threads is necessary here.</span></span> <span data-ttu-id="26150-1285">当<xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>是`true`进程组件上<xref:System.Diagnostics.Process.StartInfo%2A>属性，请确保已通过将属性设置对应用程序中设置线程模型`[STAThread]`上`main()`方法。</span><span class="sxs-lookup"><span data-stu-id="26150-1285">When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true` on the process component's <xref:System.Diagnostics.Process.StartInfo%2A> property, make sure you have set a threading model on your application by setting the attribute `[STAThread]` on the `main()` method.</span></span> <span data-ttu-id="26150-1286">否则，托管的线程可以处于`unknown`状态或将放入`MTA`状态时，发生冲突，而后一个<xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>正在`true`。</span><span class="sxs-lookup"><span data-stu-id="26150-1286">Otherwise, a managed thread can be in an `unknown` state or put in the `MTA` state, the latter of which conflicts with <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> being `true`.</span></span> <span data-ttu-id="26150-1287">某些方法要求使用的单元状态，不会`unknown`。</span><span class="sxs-lookup"><span data-stu-id="26150-1287">Some methods require that the apartment state not be `unknown`.</span></span> <span data-ttu-id="26150-1288">如果未显式设置该状态，那么当应用程序遇到这样的方法时，它默认为`MTA`，而一次设置，就不能更改的单元状态。</span><span class="sxs-lookup"><span data-stu-id="26150-1288">If the state is not explicitly set, when the application encounters such a method, it defaults to `MTA`, and once set, the apartment state cannot be changed.</span></span> <span data-ttu-id="26150-1289">但是，`MTA`操作系统外壳程序管理线程时引发异常。</span><span class="sxs-lookup"><span data-stu-id="26150-1289">However, `MTA` causes an exception to be thrown when the operating system shell is managing the thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-1290">下面的示例使用的实例<xref:System.Diagnostics.Process>类启动的进程。</span><span class="sxs-lookup"><span data-stu-id="26150-1290">The following example uses an instance of the <xref:System.Diagnostics.Process> class to start a process.</span></span>  
  
 [!code-cpp[Process.Start_instance#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.Start_instance/CPP/processstart.cpp#1)]
 [!code-csharp[Process.Start_instance#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.Start_instance/CS/processstart.cs#1)]
 [!code-vb[Process.Start_instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.Start_instance/VB/processstart.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-1291">在 <see cref="T:System.Diagnostics.Process" /> 组件的 <see cref="P:System.Diagnostics.Process.StartInfo" /> 中未指定任何文件名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1291">No file name was specified in the <see cref="T:System.Diagnostics.Process" /> component's <see cref="P:System.Diagnostics.Process.StartInfo" />.</span>
          </span>
          <span data-ttu-id="26150-1292">或者，当 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" />、<see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /> 或 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> 为 <see langword="true" /> 时，<see cref="P:System.Diagnostics.Process.StartInfo" /> 属性的 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 成员为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1292">-or- The <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> member of the <see cref="P:System.Diagnostics.Process.StartInfo" /> property is <see langword="true" /> while <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" />, <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" />, or <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> is <see langword="true" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.Win32Exception">
          <span data-ttu-id="26150-1293">打开关联的文件时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1293">There was an error in opening the associated file.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="26150-1294">已释放此进程对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1294">The process object has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-1295">不支持 shell 的操作系统（如，仅适用于.NET Core 的 Nano Server）不支持此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1295">Method not supported on operating systems without shell support such as Nano Server (.NET Core only).</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1296">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1296">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1297">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1297">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.StartInfo" />
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.FileName" />
        <altmember cref="T:System.Diagnostics.ProcessStartInfo" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process Start (System.Diagnostics.ProcessStartInfo startInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process Start(class System.Diagnostics.ProcessStartInfo startInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Start (startInfo As ProcessStartInfo) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Process ^ Start(System::Diagnostics::ProcessStartInfo ^ startInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startInfo" Type="System.Diagnostics.ProcessStartInfo" />
      </Parameters>
      <Docs>
        <param name="startInfo">
          <span data-ttu-id="26150-1298">
            <see cref="T:System.Diagnostics.ProcessStartInfo" />，包含用于启动进程的信息(包括文件名和任何命令行参数)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1298">The <see cref="T:System.Diagnostics.ProcessStartInfo" /> that contains the information that is used to start the process, including the file name and any command-line arguments.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="26150-1299">启动由包含进程启动信息(例如，要启动的进程的文件名)的参数指定的进程资源，并将该资源与新的 <see cref="T:System.Diagnostics.Process" /> 组件关联。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1299">Starts the process resource that is specified by the parameter containing process start information (for example, the file name of the process to start) and associates the resource with a new <see cref="T:System.Diagnostics.Process" /> component.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="26150-1300">与进程资源关联的新 <see cref="T:System.Diagnostics.Process" />，如果未启动进程资源，则为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1300">A new <see cref="T:System.Diagnostics.Process" /> that is associated with the process resource, or <see langword="null" /> if no process resource is started.</span>
          </span>
          <span data-ttu-id="26150-1301">请注意，随着同一进程已在运行的实例启动的新进程将独立于其他进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1301">Note that a new process that’s started alongside already running instances of the same process will be independent from the others.</span>
          </span>
          <span data-ttu-id="26150-1302">此外，启动可能返回一个 <see cref="P:System.Diagnostics.Process.HasExited" /> 属性已设置为 <see langword="true" /> 的非 null 进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1302">In addition, Start may return a non-null Process with its <see cref="P:System.Diagnostics.Process.HasExited" /> property already set to <see langword="true" />.</span>
          </span>
          <span data-ttu-id="26150-1303">在这种情况下，启动的进程可能已激活现有实例自身，然后退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1303">In this case, the started process may have activated an existing instance of itself and then exited.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-1304">使用此重载来通过指定启动进程资源<xref:System.Diagnostics.ProcessStartInfo>实例。</span><span class="sxs-lookup"><span data-stu-id="26150-1304">Use this overload to start a process resource by specifying a <xref:System.Diagnostics.ProcessStartInfo> instance.</span></span> <span data-ttu-id="26150-1305">该重载将资源与新<xref:System.Diagnostics.Process>对象。</span><span class="sxs-lookup"><span data-stu-id="26150-1305">The overload associates the resource with a new <xref:System.Diagnostics.Process> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-1306">如果要启动的可执行文件的地址是 URL，则不会启动进程和`null`返回。</span><span class="sxs-lookup"><span data-stu-id="26150-1306">If the address of the executable file to start is a URL, the process is not started and `null` is returned.</span></span>  
  
 <span data-ttu-id="26150-1307">此重载使你无需首先创建一个新启动的进程<xref:System.Diagnostics.Process>实例。</span><span class="sxs-lookup"><span data-stu-id="26150-1307">This overload lets you start a process without first creating a new <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="26150-1308">使用此重载与<xref:System.Diagnostics.ProcessStartInfo>参数是创建一个新的显式步骤的替代方法<xref:System.Diagnostics.Process>实例，设置其<xref:System.Diagnostics.Process.StartInfo%2A>属性以及调用<xref:System.Diagnostics.Process.Start%2A>为<xref:System.Diagnostics.Process>实例。</span><span class="sxs-lookup"><span data-stu-id="26150-1308">Using this overload with a <xref:System.Diagnostics.ProcessStartInfo> parameter is an alternative to the explicit steps of creating a new <xref:System.Diagnostics.Process> instance, setting its <xref:System.Diagnostics.Process.StartInfo%2A> properties, and calling <xref:System.Diagnostics.Process.Start%2A> for the <xref:System.Diagnostics.Process> instance.</span></span>  
  
 <span data-ttu-id="26150-1309">使用<xref:System.Diagnostics.ProcessStartInfo>实例用作参数，你可以调用<xref:System.Diagnostics.Process.Start%2A>最控制内容传递到调用以启动该过程。</span><span class="sxs-lookup"><span data-stu-id="26150-1309">Using a <xref:System.Diagnostics.ProcessStartInfo> instance as the parameter lets you call <xref:System.Diagnostics.Process.Start%2A> with the most control over what is passed into the call to start the process.</span></span> <span data-ttu-id="26150-1310">如果你需要将只能出现文件名或文件名称和自变量传递，则不需要创建新<xref:System.Diagnostics.ProcessStartInfo>实例，尽管这是一个选项。</span><span class="sxs-lookup"><span data-stu-id="26150-1310">If you need to pass only a file name or a file name and arguments, it is not necessary to create a new <xref:System.Diagnostics.ProcessStartInfo> instance, although that is an option.</span></span> <span data-ttu-id="26150-1311">唯一<xref:System.Diagnostics.Process.StartInfo%2A?displayProperty=nameWithType>必须设置的属性是<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="26150-1311">The only <xref:System.Diagnostics.Process.StartInfo%2A?displayProperty=nameWithType> property that must be set is the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property.</span></span> <span data-ttu-id="26150-1312"><xref:System.Diagnostics.ProcessStartInfo.FileName%2A>属性不需要表示一个可执行文件。</span><span class="sxs-lookup"><span data-stu-id="26150-1312">The <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property does not need to represent an executable file.</span></span> <span data-ttu-id="26150-1313">它可以是为其扩展已在系统安装的应用程序与关联任何文件类型。</span><span class="sxs-lookup"><span data-stu-id="26150-1313">It can be of any file type for which the extension has been associated with an application that is installed on the system.</span></span> <span data-ttu-id="26150-1314">例如，<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>属性可以具有.txt 扩展名，如果你具有使用编辑器 （如记事本） 相关联的文本文件或者如果你已经将提供一个文字处理的工具，如 Microsoft Word 的文本文件，它可以具有.doc 扩展名。</span><span class="sxs-lookup"><span data-stu-id="26150-1314">For example, the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc extension if you have associated.doc files with a word processing tool, such as Microsoft Word.</span></span>  
  
 <span data-ttu-id="26150-1315">可以通过指定最初从中安装应用程序的位置 （例如，Web 地址） 来启动 ClickOnce 应用程序。</span><span class="sxs-lookup"><span data-stu-id="26150-1315">You can start a ClickOnce application by specifying the location (for example, a Web address) from which you originally installed the application.</span></span> <span data-ttu-id="26150-1316">不通过指定其安装的位置在硬盘驱动器上启动 ClickOnce 应用程序。</span><span class="sxs-lookup"><span data-stu-id="26150-1316">Do not start a ClickOnce application by specifying its installed location on your hard drive.</span></span>  
  
 <span data-ttu-id="26150-1317">如果<xref:System.Diagnostics.ProcessStartInfo.UserName%2A?displayProperty=nameWithType>和<xref:System.Diagnostics.ProcessStartInfo.Password%2A?displayProperty=nameWithType>属性<xref:System.Diagnostics.Process.StartInfo%2A>实例设置了非托管`CreateProcessWithLogonW`调用函数，以启动该过程在新窗口即使<xref:System.Diagnostics.ProcessStartInfo.CreateNoWindow%2A?displayProperty=nameWithType>属性值是`true`或<xref:System.Diagnostics.ProcessStartInfo.WindowStyle%2A?displayProperty=nameWithType>属性值是<xref:System.Diagnostics.ProcessWindowStyle.Hidden?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="26150-1317">If the <xref:System.Diagnostics.ProcessStartInfo.UserName%2A?displayProperty=nameWithType> and <xref:System.Diagnostics.ProcessStartInfo.Password%2A?displayProperty=nameWithType> properties of the <xref:System.Diagnostics.Process.StartInfo%2A> instance are set, the unmanaged `CreateProcessWithLogonW` function is called, which starts the process in a new window even if the <xref:System.Diagnostics.ProcessStartInfo.CreateNoWindow%2A?displayProperty=nameWithType> property value is `true` or the <xref:System.Diagnostics.ProcessStartInfo.WindowStyle%2A?displayProperty=nameWithType> property value is <xref:System.Diagnostics.ProcessWindowStyle.Hidden?displayProperty=nameWithType>.</span></span> <span data-ttu-id="26150-1318">如果<xref:System.Diagnostics.ProcessStartInfo.Domain%2A?displayProperty=nameWithType>属性是`null`、<xref:System.Diagnostics.ProcessStartInfo.UserName%2A?displayProperty=nameWithType>属性必须为 UPN 格式*用户*@*DNS_domain_name*。</span><span class="sxs-lookup"><span data-stu-id="26150-1318">If the <xref:System.Diagnostics.ProcessStartInfo.Domain%2A?displayProperty=nameWithType> property is `null`, the <xref:System.Diagnostics.ProcessStartInfo.UserName%2A?displayProperty=nameWithType> property must be in UPN format, *user*@*DNS_domain_name*.</span></span>   
  
 <span data-ttu-id="26150-1319">与其他重载的重载不同<xref:System.Diagnostics.Process.Start%2A>该操作没有参数不是`static`成员。</span><span class="sxs-lookup"><span data-stu-id="26150-1319">Unlike the other overloads, the overload of <xref:System.Diagnostics.Process.Start%2A> that has no parameters is not a `static` member.</span></span> <span data-ttu-id="26150-1320">重载时你已创建的使用<xref:System.Diagnostics.Process>实例，指定的开始信息 （包括文件名称），并且想要启动一个进程资源并将其与现有<xref:System.Diagnostics.Process>实例。</span><span class="sxs-lookup"><span data-stu-id="26150-1320">Use that overload when you have already created a <xref:System.Diagnostics.Process> instance, specified start information (including the file name), and want to start a process resource and associate it with the existing <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="26150-1321">使用之一`static`重载时你想要创建一个新<xref:System.Diagnostics.Process>组件而不是为现有组件启动一个进程。</span><span class="sxs-lookup"><span data-stu-id="26150-1321">Use one of the `static` overloads when you want to create a new <xref:System.Diagnostics.Process> component rather than start a process for an existing component.</span></span> <span data-ttu-id="26150-1322">此重载和没有参数的重载允许你通过使用指定的进程资源的开始信息<xref:System.Diagnostics.ProcessStartInfo>实例。</span><span class="sxs-lookup"><span data-stu-id="26150-1322">Both this overload and the overload that has no parameters allow you to specify the start information for the process resource by using a <xref:System.Diagnostics.ProcessStartInfo> instance.</span></span>  
  
 <span data-ttu-id="26150-1323">如果你有系统中用引号中声明的路径变量，则必须启动任何进程在该位置中找到时，完全限定该路径。</span><span class="sxs-lookup"><span data-stu-id="26150-1323">If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location.</span></span> <span data-ttu-id="26150-1324">否则，系统将不到的路径。</span><span class="sxs-lookup"><span data-stu-id="26150-1324">Otherwise, the system will not find the path.</span></span> <span data-ttu-id="26150-1325">例如，如果`c:\mypath`不在你的路径，并将其使用引号引起来添加： `path = %path%;"c:\mypath"`，必须完全符合中的任何进程`c:\mypath`时启动它。</span><span class="sxs-lookup"><span data-stu-id="26150-1325">For example, if `c:\mypath` is not in your path, and you add it using quotation marks: `path = %path%;"c:\mypath"`, you must fully qualify any process in `c:\mypath` when starting it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-1326">ASP.NET Web 页和服务器控件的代码在 Web 服务器上的 ASP.NET 工作进程的上下文中执行。</span><span class="sxs-lookup"><span data-stu-id="26150-1326">ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server.</span></span>  <span data-ttu-id="26150-1327">如果你使用<xref:System.Diagnostics.Process.Start%2A>在 ASP.NET Web 页或服务器控件中的方法，在具有受限权限的 Web 服务器上执行新进程。</span><span class="sxs-lookup"><span data-stu-id="26150-1327">If you use the <xref:System.Diagnostics.Process.Start%2A> method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions.</span></span> <span data-ttu-id="26150-1328">进程不与客户端浏览器中，相同的上下文中启动，并且有权访问的用户桌面。</span><span class="sxs-lookup"><span data-stu-id="26150-1328">The process does not start in the same context as the client browser, and does not have access to the user desktop.</span></span>  
  
 <span data-ttu-id="26150-1329">无论何时使用<xref:System.Diagnostics.Process.Start%2A>若要启动进程时，你可能需要将其关闭或冒系统资源。</span><span class="sxs-lookup"><span data-stu-id="26150-1329">Whenever you use <xref:System.Diagnostics.Process.Start%2A> to start a process, you might need to close it or you risk losing system resources.</span></span> <span data-ttu-id="26150-1330">关闭进程使用<xref:System.Diagnostics.Process.CloseMainWindow%2A>或<xref:System.Diagnostics.Process.Kill%2A>。</span><span class="sxs-lookup"><span data-stu-id="26150-1330">Close processes using <xref:System.Diagnostics.Process.CloseMainWindow%2A> or <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="26150-1331">你可以检查是否已关闭进程通过其<xref:System.Diagnostics.Process.HasExited%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="26150-1331">You can check whether a process has already been closed by using its <xref:System.Diagnostics.Process.HasExited%2A> property.</span></span>  
  
 <span data-ttu-id="26150-1332">有关托管线程中的单元状态的注意事项此处是必需的。</span><span class="sxs-lookup"><span data-stu-id="26150-1332">A note about apartment states in managed threads is necessary here.</span></span> <span data-ttu-id="26150-1333">当<xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>是`true`上`startInfo`参数，请确保已通过将属性设置对应用程序中设置线程模型`[STAThread]`上`main()`方法。</span><span class="sxs-lookup"><span data-stu-id="26150-1333">When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true` on the `startInfo` parameter, make sure you have set a threading model on your application by setting the attribute `[STAThread]` on the `main()` method.</span></span> <span data-ttu-id="26150-1334">否则，托管的线程可以处于`unknown`状态或将放入`MTA`状态时，发生冲突，而后一个<xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>正在`true`。</span><span class="sxs-lookup"><span data-stu-id="26150-1334">Otherwise, a managed thread can be in an `unknown` state or put in the `MTA` state, the latter of which conflicts with <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> being `true`.</span></span> <span data-ttu-id="26150-1335">某些方法要求使用的单元状态，不会`unknown`。</span><span class="sxs-lookup"><span data-stu-id="26150-1335">Some methods require that the apartment state not be `unknown`.</span></span> <span data-ttu-id="26150-1336">如果未显式设置该状态，那么当应用程序遇到这样的方法时，它默认为`MTA`，而一次设置，就不能更改的单元状态。</span><span class="sxs-lookup"><span data-stu-id="26150-1336">If the state is not explicitly set, when the application encounters such a method, it defaults to `MTA`, and once set, the apartment state cannot be changed.</span></span> <span data-ttu-id="26150-1337">但是，`MTA`操作系统外壳程序管理线程时引发异常。</span><span class="sxs-lookup"><span data-stu-id="26150-1337">However, `MTA` causes an exception to be thrown when the operating system shell is managing the thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-1338">下面的示例首先生成的 Internet Explorer 实例，并在浏览器中显示的收藏夹文件夹的内容。</span><span class="sxs-lookup"><span data-stu-id="26150-1338">The following example first spawns an instance of Internet Explorer and displays the contents of the Favorites folder in the browser.</span></span> <span data-ttu-id="26150-1339">然后，启动 Internet Explorer 的一些其他实例，并显示某些特定的页或站点。</span><span class="sxs-lookup"><span data-stu-id="26150-1339">It then starts some other instances of Internet Explorer and displays some specific pages or sites.</span></span> <span data-ttu-id="26150-1340">最后，它与时导航到特定站点最小化窗口启动 Internet Explorer。</span><span class="sxs-lookup"><span data-stu-id="26150-1340">Finally it starts Internet Explorer with the window being minimized while navigating to a specific site.</span></span>  
  
 <span data-ttu-id="26150-1341">有关此方法的其他用法的其他示例，请参阅的各个属性<xref:System.Diagnostics.ProcessStartInfo>类。</span><span class="sxs-lookup"><span data-stu-id="26150-1341">For additional examples of other uses of this method, refer to the individual properties of the <xref:System.Diagnostics.ProcessStartInfo> class.</span></span>  
  
 [!code-cpp[Process.Start_static#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.Start_static/CPP/processstartstatic.cpp#1)]
 [!code-csharp[Process.Start_static#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.Start_static/CS/processstartstatic.cs#1)]
 [!code-vb[Process.Start_static#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.Start_static/VB/processstartstatic.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-1342">在 <paramref name="startInfo" /> 参数的 <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> 属性中未指定任何文件名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1342">No file name was specified in the <paramref name="startInfo" /> parameter's <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> property.</span>
          </span>
          <span data-ttu-id="26150-1343">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1343">-or-</span>
          </span>
          <span data-ttu-id="26150-1344">
            <paramref name="startInfo" /> 参数的 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 属性值为 <see langword="true" />，且 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" />、<see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /> 或 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> 属性的值也为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1344">The <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> property of the <paramref name="startInfo" /> parameter is <see langword="true" /> and the <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" />, <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" />, or <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> property is also <see langword="true" />.</span>
          </span>
          <span data-ttu-id="26150-1345">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1345">-or-</span>
          </span>
          <span data-ttu-id="26150-1346">
            <paramref name="startInfo" /> 参数的 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 属性值为 <see langword="true" />，且 <see cref="P:System.Diagnostics.ProcessStartInfo.UserName" /> 属性值不为 <see langword="null" /> 或空，或者 <see cref="P:System.Diagnostics.ProcessStartInfo.Password" /> 属性值不为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1346">The <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> property of the <paramref name="startInfo" /> parameter is <see langword="true" /> and the <see cref="P:System.Diagnostics.ProcessStartInfo.UserName" /> property is not <see langword="null" /> or empty or the <see cref="P:System.Diagnostics.ProcessStartInfo.Password" /> property is not <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="26150-1347">
            <paramref name="startInfo" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1347">The <paramref name="startInfo" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="26150-1348">已释放此进程对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1348">The process object has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="26150-1349">在 <paramref name="startInfo" /> 参数的 <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> 属性中指定的文件未找到。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1349">The file specified in the <paramref name="startInfo" /> parameter's <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> property could not be found.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.Win32Exception">
          <span data-ttu-id="26150-1350">打开关联的文件时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1350">An error occurred when opening the associated file.</span>
          </span>
          <span data-ttu-id="26150-1351">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1351">-or-</span>
          </span>
          <span data-ttu-id="26150-1352">参数的长度与该进程的完整路径的长度的总和超过了 2080。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1352">The sum of the length of the arguments and the length of the full path to the process exceeds 2080.</span>
          </span>
          <span data-ttu-id="26150-1353">与此异常关联的错误消息可能为以下消息之一：“传递到系统调用的数据区域太小。”</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1353">The error message associated with this exception can be one of the following: "The data area passed to a system call is too small."</span>
          </span>
          <span data-ttu-id="26150-1354">或“拒绝访问。”</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1354">or "Access is denied."</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-1355">不支持 shell 的操作系统（如，仅适用于.NET Core 的 Nano Server）不支持此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1355">Method not supported on operating systems without shell support such as Nano Server (.NET Core only).</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1356">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1356">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1357">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1357">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.StartInfo" />
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.FileName" />
        <altmember cref="T:System.Diagnostics.ProcessStartInfo" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process Start (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process Start(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Start(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Start (fileName As String) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Process ^ Start(System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="26150-1358">要在进程中运行的文档或应用程序文件的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1358">The name of a document or application file to run in the process.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="26150-1359">通过指定文档或应用程序文件的名称来启动进程资源，并将资源与新的 <see cref="T:System.Diagnostics.Process" /> 组件关联。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1359">Starts a process resource by specifying the name of a document or application file and associates the resource with a new <see cref="T:System.Diagnostics.Process" /> component.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="26150-1360">与进程资源关联的新 <see cref="T:System.Diagnostics.Process" />，如果未启动进程资源，则为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1360">A new <see cref="T:System.Diagnostics.Process" /> that is associated with the process resource, or <see langword="null" /> if no process resource is started.</span>
          </span>
          <span data-ttu-id="26150-1361">请注意，随着同一进程已在运行的实例启动的新进程将独立于其他进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1361">Note that a new process that’s started alongside already running instances of the same process will be independent from the others.</span>
          </span>
          <span data-ttu-id="26150-1362">此外，启动可能返回一个 <see cref="P:System.Diagnostics.Process.HasExited" /> 属性已设置为 <see langword="true" /> 的非 null 进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1362">In addition, Start may return a non-null Process with its <see cref="P:System.Diagnostics.Process.HasExited" /> property already set to <see langword="true" />.</span>
          </span>
          <span data-ttu-id="26150-1363">在这种情况下，启动的进程可能已激活现有实例自身，然后退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1363">In this case, the started process may have activated an existing instance of itself and then exited.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-1364">使用此重载来通过指定其文件名启动一个进程资源。</span><span class="sxs-lookup"><span data-stu-id="26150-1364">Use this overload to start a process resource by specifying its file name.</span></span> <span data-ttu-id="26150-1365">该重载将资源与新<xref:System.Diagnostics.Process>对象。</span><span class="sxs-lookup"><span data-stu-id="26150-1365">The overload associates the resource with a new <xref:System.Diagnostics.Process> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-1366">如果要启动的可执行文件的地址是 URL，则不会启动进程和`null`返回。</span><span class="sxs-lookup"><span data-stu-id="26150-1366">If the address of the executable file to start is a URL, the process is not started and `null` is returned.</span></span>  
  
 <span data-ttu-id="26150-1367">此重载使你无需首先创建一个新启动的进程<xref:System.Diagnostics.Process>实例。</span><span class="sxs-lookup"><span data-stu-id="26150-1367">This overload lets you start a process without first creating a new <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="26150-1368">该重载是创建一个新的显式步骤的替代方法<xref:System.Diagnostics.Process>实例，设置<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>的成员<xref:System.Diagnostics.Process.StartInfo%2A>属性，再调用<xref:System.Diagnostics.Process.Start%2A>为<xref:System.Diagnostics.Process>实例。</span><span class="sxs-lookup"><span data-stu-id="26150-1368">The overload is an alternative to the explicit steps of creating a new <xref:System.Diagnostics.Process> instance, setting the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> member of the <xref:System.Diagnostics.Process.StartInfo%2A> property, and calling <xref:System.Diagnostics.Process.Start%2A> for the <xref:System.Diagnostics.Process> instance.</span></span>  
  
 <span data-ttu-id="26150-1369">您可以通过设置启动 ClickOnce 应用程序`fileName`最初从中安装应用程序的位置 （例如，Web 地址） 的参数。</span><span class="sxs-lookup"><span data-stu-id="26150-1369">You can start a ClickOnce application by setting the `fileName` parameter to the location (for example, a Web address) from which you originally installed the application.</span></span> <span data-ttu-id="26150-1370">不通过指定其安装的位置在硬盘驱动器上启动 ClickOnce 应用程序。</span><span class="sxs-lookup"><span data-stu-id="26150-1370">Do not start a ClickOnce application by specifying its installed location on your hard drive.</span></span>  
  
 <span data-ttu-id="26150-1371">通过指定其文件名称中启动进程是类似于键入中的信息`Run`对话框中的 windows`Start`菜单。</span><span class="sxs-lookup"><span data-stu-id="26150-1371">Starting a process by specifying its file name is similar to typing the information in the `Run` dialog box of the Windows `Start` menu.</span></span> <span data-ttu-id="26150-1372">因此，文件名称不必表示一个可执行文件。</span><span class="sxs-lookup"><span data-stu-id="26150-1372">Therefore, the file name does not need to represent an executable file.</span></span> <span data-ttu-id="26150-1373">它可以是为其扩展已关联与应用程序在系统上安装任何文件类型。</span><span class="sxs-lookup"><span data-stu-id="26150-1373">It can be of any file type for which the extension has been associated with an application installed on the system.</span></span> <span data-ttu-id="26150-1374">例如的文件名称可以具有.txt 扩展名，如果你具有使用编辑器 （如记事本） 相关联的文本文件或者如果你已经将提供一个文字处理的工具，如 Microsoft Word 的文本文件，也可能产生.doc。</span><span class="sxs-lookup"><span data-stu-id="26150-1374">For example the file name can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc if you have associated.doc files with a word processing tool, such as Microsoft Word.</span></span> <span data-ttu-id="26150-1375">同样，在相同的方式`Run`对话框中可以接受使用或不具有.exe 扩展名的可执行文件名、 扩展名为.exe 中是可选`fileName`参数。</span><span class="sxs-lookup"><span data-stu-id="26150-1375">Similarly, in the same way that the `Run` dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the `fileName` parameter.</span></span> <span data-ttu-id="26150-1376">例如，你可以设置`fileName`参数以"Notepad.exe"或"记事本"。</span><span class="sxs-lookup"><span data-stu-id="26150-1376">For example, you can set the `fileName` parameter to either "Notepad.exe" or "Notepad".</span></span>  
  
 <span data-ttu-id="26150-1377">此重载不允许进程的命令行自变量。</span><span class="sxs-lookup"><span data-stu-id="26150-1377">This overload does not allow command-line arguments for the process.</span></span> <span data-ttu-id="26150-1378">如果你需要指定一个或多个进程的命令行参数，使用<xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29?displayProperty=nameWithType>或<xref:System.Diagnostics.Process.Start%28System.String%2CSystem.String%29?displayProperty=nameWithType>重载。</span><span class="sxs-lookup"><span data-stu-id="26150-1378">If you need to specify one or more command-line arguments for the process, use the <xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29?displayProperty=nameWithType> or <xref:System.Diagnostics.Process.Start%28System.String%2CSystem.String%29?displayProperty=nameWithType> overloads.</span></span>  
  
 <span data-ttu-id="26150-1379">与其他重载的重载不同<xref:System.Diagnostics.Process.Start%2A>该操作没有参数不是`static`成员。</span><span class="sxs-lookup"><span data-stu-id="26150-1379">Unlike the other overloads, the overload of <xref:System.Diagnostics.Process.Start%2A> that has no parameters is not a `static` member.</span></span> <span data-ttu-id="26150-1380">重载时你已创建的使用<xref:System.Diagnostics.Process>实例，指定的开始信息 （包括文件名称），并且想要启动一个进程资源并将其与现有<xref:System.Diagnostics.Process>实例。</span><span class="sxs-lookup"><span data-stu-id="26150-1380">Use that overload when you have already created a <xref:System.Diagnostics.Process> instance, specified start information (including the file name), and want to start a process resource and associate it with the existing <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="26150-1381">使用之一`static`重载时你想要创建一个新<xref:System.Diagnostics.Process>组件而不是为现有组件启动一个进程。</span><span class="sxs-lookup"><span data-stu-id="26150-1381">Use one of the `static` overloads when you want to create a new <xref:System.Diagnostics.Process> component rather than start a process for an existing component.</span></span> <span data-ttu-id="26150-1382">此重载和没有参数的重载允许你指定要启动的进程资源的文件名称。</span><span class="sxs-lookup"><span data-stu-id="26150-1382">Both this overload and the overload that has no parameters allow you to specify the file name of the process resource to start.</span></span>  
  
 <span data-ttu-id="26150-1383">如果你有系统中用引号中声明的路径变量，则必须启动任何进程在该位置中找到时，完全限定该路径。</span><span class="sxs-lookup"><span data-stu-id="26150-1383">If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location.</span></span> <span data-ttu-id="26150-1384">否则，系统将不到的路径。</span><span class="sxs-lookup"><span data-stu-id="26150-1384">Otherwise, the system will not find the path.</span></span> <span data-ttu-id="26150-1385">例如，如果`c:\mypath`不在你的路径，并将其使用引号引起来添加： `path = %path%;"c:\mypath"`，必须完全符合中的任何进程`c:\mypath`时启动它。</span><span class="sxs-lookup"><span data-stu-id="26150-1385">For example, if `c:\mypath` is not in your path, and you add it using quotation marks: `path = %path%;"c:\mypath"`, you must fully qualify any process in `c:\mypath` when starting it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-1386">ASP.NET Web 页和服务器控件的代码在 Web 服务器上的 ASP.NET 工作进程的上下文中执行。</span><span class="sxs-lookup"><span data-stu-id="26150-1386">ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server.</span></span>  <span data-ttu-id="26150-1387">如果你使用<xref:System.Diagnostics.Process.Start%2A>在 ASP.NET Web 页或服务器控件中的方法，在具有受限权限的 Web 服务器上执行新进程。</span><span class="sxs-lookup"><span data-stu-id="26150-1387">If you use the <xref:System.Diagnostics.Process.Start%2A> method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions.</span></span> <span data-ttu-id="26150-1388">进程不与客户端浏览器中，相同的上下文中启动，并且有权访问的用户桌面。</span><span class="sxs-lookup"><span data-stu-id="26150-1388">The process does not start in the same context as the client browser, and does not have access to the user desktop.</span></span>  
  
 <span data-ttu-id="26150-1389">无论何时使用<xref:System.Diagnostics.Process.Start%2A>若要启动进程时，你可能需要将其关闭或冒系统资源。</span><span class="sxs-lookup"><span data-stu-id="26150-1389">Whenever you use <xref:System.Diagnostics.Process.Start%2A> to start a process, you might need to close it or you risk losing system resources.</span></span> <span data-ttu-id="26150-1390">关闭进程使用<xref:System.Diagnostics.Process.CloseMainWindow%2A>或<xref:System.Diagnostics.Process.Kill%2A>。</span><span class="sxs-lookup"><span data-stu-id="26150-1390">Close processes using <xref:System.Diagnostics.Process.CloseMainWindow%2A> or <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="26150-1391">你可以检查是否已关闭进程通过其<xref:System.Diagnostics.Process.HasExited%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="26150-1391">You can check whether a process has already been closed by using its <xref:System.Diagnostics.Process.HasExited%2A> property.</span></span>  
  
 <span data-ttu-id="26150-1392">有关托管线程中的单元状态的注意事项此处是必需的。</span><span class="sxs-lookup"><span data-stu-id="26150-1392">A note about apartment states in managed threads is necessary here.</span></span> <span data-ttu-id="26150-1393">当<xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>是`true`进程组件上<xref:System.Diagnostics.Process.StartInfo%2A>属性，请确保已通过将属性设置对应用程序中设置线程模型`[STAThread]`上`main()`方法。</span><span class="sxs-lookup"><span data-stu-id="26150-1393">When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true` on the process component's <xref:System.Diagnostics.Process.StartInfo%2A> property, make sure you have set a threading model on your application by setting the attribute `[STAThread]` on the `main()` method.</span></span> <span data-ttu-id="26150-1394">否则，托管的线程可以处于`unknown`状态或将放入`MTA`状态时，发生冲突，而后一个<xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>正在`true`。</span><span class="sxs-lookup"><span data-stu-id="26150-1394">Otherwise, a managed thread can be in an `unknown` state or put in the `MTA` state, the latter of which conflicts with <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> being `true`.</span></span> <span data-ttu-id="26150-1395">某些方法要求使用的单元状态，不会`unknown`。</span><span class="sxs-lookup"><span data-stu-id="26150-1395">Some methods require that the apartment state not be `unknown`.</span></span> <span data-ttu-id="26150-1396">如果未显式设置该状态，那么当应用程序遇到这样的方法时，它默认为`MTA`，而一次设置，就不能更改的单元状态。</span><span class="sxs-lookup"><span data-stu-id="26150-1396">If the state is not explicitly set, when the application encounters such a method, it defaults to `MTA`, and once set, the apartment state cannot be changed.</span></span> <span data-ttu-id="26150-1397">但是，`MTA`操作系统外壳程序管理线程时引发异常。</span><span class="sxs-lookup"><span data-stu-id="26150-1397">However, `MTA` causes an exception to be thrown when the operating system shell is managing the thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-1398">下面的示例首先生成的 Internet Explorer 实例，并在浏览器中显示的收藏夹文件夹的内容。</span><span class="sxs-lookup"><span data-stu-id="26150-1398">The following example first spawns an instance of Internet Explorer and displays the contents of the Favorites folder in the browser.</span></span> <span data-ttu-id="26150-1399">然后，启动 Internet Explorer 的一些其他实例，并显示某些特定的页或站点。</span><span class="sxs-lookup"><span data-stu-id="26150-1399">It then starts some other instances of Internet Explorer and displays some specific pages or sites.</span></span> <span data-ttu-id="26150-1400">最后，它与时导航到特定站点最小化窗口启动 Internet Explorer。</span><span class="sxs-lookup"><span data-stu-id="26150-1400">Finally it starts Internet Explorer with the window being minimized while navigating to a specific site.</span></span>  
  
 [!code-cpp[Process.Start_static#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.Start_static/CPP/processstartstatic.cpp#1)]
 [!code-csharp[Process.Start_static#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.Start_static/CS/processstartstatic.cs#1)]
 [!code-vb[Process.Start_static#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.Start_static/VB/processstartstatic.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">
          <span data-ttu-id="26150-1401">打开关联的文件时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1401">An error occurred when opening the associated file.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="26150-1402">已释放此进程对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1402">The process object has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="26150-1403">PATH 环境变量具有一个包含引号的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1403">The PATH environment variable has a string containing quotes.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1404">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1404">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1405">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1405">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.FileName" />
        <altmember cref="P:System.Diagnostics.Process.StartInfo" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process Start (string fileName, string arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process Start(string fileName, string arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Start(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Start (fileName As String, arguments As String) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Process ^ Start(System::String ^ fileName, System::String ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="arguments" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="26150-1406">要在进程中运行的应用程序文件的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1406">The name of an application file to run in the process.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="26150-1407">启动该进程时传递的命令行参数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1407">Command-line arguments to pass when starting the process.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="26150-1408">通过指定应用程序的名称和一组命令行参数来启动一个进程资源，并将该资源与新的 <see cref="T:System.Diagnostics.Process" /> 组件相关联。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1408">Starts a process resource by specifying the name of an application and a set of command-line arguments, and associates the resource with a new <see cref="T:System.Diagnostics.Process" /> component.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="26150-1409">与进程资源关联的新 <see cref="T:System.Diagnostics.Process" />，如果未启动进程资源，则为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1409">A new <see cref="T:System.Diagnostics.Process" /> that is associated with the process resource, or <see langword="null" /> if no process resource is started.</span>
          </span>
          <span data-ttu-id="26150-1410">请注意，随着同一进程已在运行的实例启动的新进程将独立于其他进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1410">Note that a new process that’s started alongside already running instances of the same process will be independent from the others.</span>
          </span>
          <span data-ttu-id="26150-1411">此外，启动可能返回一个 <see cref="P:System.Diagnostics.Process.HasExited" /> 属性已设置为 <see langword="true" /> 的非 null 进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1411">In addition, Start may return a non-null Process with its <see cref="P:System.Diagnostics.Process.HasExited" /> property already set to <see langword="true" />.</span>
          </span>
          <span data-ttu-id="26150-1412">在这种情况下，启动的进程可能已激活现有实例自身，然后退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1412">In this case, the started process may have activated an existing instance of itself and then exited.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-1413">使用此重载来通过指定其文件名称和命令行参数启动一个进程资源。</span><span class="sxs-lookup"><span data-stu-id="26150-1413">Use this overload to start a process resource by specifying its file name and command-line arguments.</span></span> <span data-ttu-id="26150-1414">该重载将资源与新<xref:System.Diagnostics.Process>对象。</span><span class="sxs-lookup"><span data-stu-id="26150-1414">The overload associates the resource with a new <xref:System.Diagnostics.Process> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-1415">如果要启动的可执行文件的地址是 URL，则不会启动进程和`null`返回。</span><span class="sxs-lookup"><span data-stu-id="26150-1415">If the address of the executable file to start is a URL, the process is not started and `null` is returned.</span></span>  
  
 <span data-ttu-id="26150-1416">此重载使你无需首先创建一个新启动的进程<xref:System.Diagnostics.Process>实例。</span><span class="sxs-lookup"><span data-stu-id="26150-1416">This overload lets you start a process without first creating a new <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="26150-1417">该重载是创建一个新的显式步骤的替代方法<xref:System.Diagnostics.Process>实例，设置<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>和<xref:System.Diagnostics.ProcessStartInfo.Arguments%2A>的成员<xref:System.Diagnostics.Process.StartInfo%2A>属性，再调用<xref:System.Diagnostics.Process.Start%2A>为<xref:System.Diagnostics.Process>实例。</span><span class="sxs-lookup"><span data-stu-id="26150-1417">The overload is an alternative to the explicit steps of creating a new <xref:System.Diagnostics.Process> instance, setting the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> and <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A> members of the <xref:System.Diagnostics.Process.StartInfo%2A> property, and calling <xref:System.Diagnostics.Process.Start%2A> for the <xref:System.Diagnostics.Process> instance.</span></span>  
  
 <span data-ttu-id="26150-1418">通过指定其文件名称和参数启动进程是类似于输入文件的名称和命令行自变量中的`Run`对话框中的 windows`Start`菜单。</span><span class="sxs-lookup"><span data-stu-id="26150-1418">Starting a process by specifying its file name and arguments is similar to typing the file name and command-line arguments in the `Run` dialog box of the Windows `Start` menu.</span></span> <span data-ttu-id="26150-1419">因此，文件名称不必表示一个可执行文件。</span><span class="sxs-lookup"><span data-stu-id="26150-1419">Therefore, the file name does not need to represent an executable file.</span></span> <span data-ttu-id="26150-1420">它可以是为其扩展已关联与应用程序在系统上安装任何文件类型。</span><span class="sxs-lookup"><span data-stu-id="26150-1420">It can be of any file type for which the extension has been associated with an application installed on the system.</span></span> <span data-ttu-id="26150-1421">例如的文件名称可以具有.txt 扩展名，如果你具有使用编辑器 （如记事本） 相关联的文本文件或者如果你已经将提供一个文字处理的工具，如 Microsoft Word 的文本文件，也可能产生.doc。</span><span class="sxs-lookup"><span data-stu-id="26150-1421">For example the file name can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc if you have associated.doc files with a word processing tool, such as Microsoft Word.</span></span> <span data-ttu-id="26150-1422">同样，在相同的方式`Run`对话框中可以接受使用或不具有.exe 扩展名的可执行文件名、 扩展名为.exe 中是可选`fileName`参数。</span><span class="sxs-lookup"><span data-stu-id="26150-1422">Similarly, in the same way that the `Run` dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the `fileName` parameter.</span></span> <span data-ttu-id="26150-1423">例如，你可以设置`fileName`参数以"Notepad.exe"或"记事本"。</span><span class="sxs-lookup"><span data-stu-id="26150-1423">For example, you can set the `fileName` parameter to either "Notepad.exe" or "Notepad".</span></span> <span data-ttu-id="26150-1424">如果`fileName`参数表示一个可执行文件，`arguments`参数可能表示要执行操作，例如文本文件中的文件`Notepad.exe myfile.txt`。</span><span class="sxs-lookup"><span data-stu-id="26150-1424">If the `fileName` parameter represents an executable file, the `arguments` parameter might represent a file to act upon, such as the text file in `Notepad.exe myfile.txt`.</span></span> <span data-ttu-id="26150-1425">如果`fileName`参数表示的命令 (.cmd) 文件，`arguments`参数必须包括"`/c`"或"`/k`"参数来指定命令窗口退出还是完成后将保持。</span><span class="sxs-lookup"><span data-stu-id="26150-1425">If the `fileName` parameter represents a command (.cmd) file, the `arguments` parameter must include either a "`/c`" or "`/k`" argument to specify whether the command window exits or remains after completion.</span></span>  
  
 <span data-ttu-id="26150-1426">与其他重载的重载不同<xref:System.Diagnostics.Process.Start%2A>该操作没有参数不是`static`成员。</span><span class="sxs-lookup"><span data-stu-id="26150-1426">Unlike the other overloads, the overload of <xref:System.Diagnostics.Process.Start%2A> that has no parameters is not a `static` member.</span></span> <span data-ttu-id="26150-1427">重载时你已创建的使用<xref:System.Diagnostics.Process>实例，指定的开始信息 （包括文件名称），并且想要启动一个进程资源并将其与现有<xref:System.Diagnostics.Process>实例。</span><span class="sxs-lookup"><span data-stu-id="26150-1427">Use that overload when you have already created a <xref:System.Diagnostics.Process> instance, specified start information (including the file name), and want to start a process resource and associate it with the existing <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="26150-1428">使用之一`static`重载时你想要创建一个新<xref:System.Diagnostics.Process>组件而不是为现有组件启动一个进程。</span><span class="sxs-lookup"><span data-stu-id="26150-1428">Use one of the `static` overloads when you want to create a new <xref:System.Diagnostics.Process> component rather than start a process for an existing component.</span></span> <span data-ttu-id="26150-1429">此重载和没有参数的重载允许你指定要启动进程资源和要传递的命令行自变量的文件名称。</span><span class="sxs-lookup"><span data-stu-id="26150-1429">Both this overload and the overload that has no parameters allow you to specify the file name of the process resource to start and command-line arguments to pass.</span></span>  
  
 <span data-ttu-id="26150-1430">如果你有系统中用引号中声明的路径变量，则必须启动任何进程在该位置中找到时，完全限定该路径。</span><span class="sxs-lookup"><span data-stu-id="26150-1430">If you have a path variable declared in your system using quotes, you must fully qualify that path when starting any process found in that location.</span></span> <span data-ttu-id="26150-1431">否则，系统将不到的路径。</span><span class="sxs-lookup"><span data-stu-id="26150-1431">Otherwise, the system will not find the path.</span></span> <span data-ttu-id="26150-1432">例如，如果`c:\mypath`不在你的路径，并将其使用引号引起来添加： `path = %path%;"c:\mypath"`，必须完全符合中的任何进程`c:\mypath`时启动它。</span><span class="sxs-lookup"><span data-stu-id="26150-1432">For example, if `c:\mypath` is not in your path, and you add it using quotation marks: `path = %path%;"c:\mypath"`, you must fully qualify any process in `c:\mypath` when starting it.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-1433">ASP.NET Web 页和服务器控件的代码在 Web 服务器上的 ASP.NET 工作进程的上下文中执行。</span><span class="sxs-lookup"><span data-stu-id="26150-1433">ASP.NET Web page and server control code executes in the context of the ASP.NET worker process on the Web server.</span></span>  <span data-ttu-id="26150-1434">如果你使用<xref:System.Diagnostics.Process.Start%2A>在 ASP.NET Web 页或服务器控件中的方法，在具有受限权限的 Web 服务器上执行新进程。</span><span class="sxs-lookup"><span data-stu-id="26150-1434">If you use the <xref:System.Diagnostics.Process.Start%2A> method in an ASP.NET Web page or server control, the new process executes on the Web server with restricted permissions.</span></span> <span data-ttu-id="26150-1435">进程不与客户端浏览器中，相同的上下文中启动，并且有权访问的用户桌面。</span><span class="sxs-lookup"><span data-stu-id="26150-1435">The process does not start in the same context as the client browser, and does not have access to the user desktop.</span></span>  
  
 <span data-ttu-id="26150-1436">无论何时使用<xref:System.Diagnostics.Process.Start%2A>若要启动进程时，你可能需要将其关闭或冒系统资源。</span><span class="sxs-lookup"><span data-stu-id="26150-1436">Whenever you use <xref:System.Diagnostics.Process.Start%2A> to start a process, you might need to close it or you risk losing system resources.</span></span> <span data-ttu-id="26150-1437">关闭进程使用<xref:System.Diagnostics.Process.CloseMainWindow%2A>或<xref:System.Diagnostics.Process.Kill%2A>。</span><span class="sxs-lookup"><span data-stu-id="26150-1437">Close processes using <xref:System.Diagnostics.Process.CloseMainWindow%2A> or <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="26150-1438">你可以检查是否已关闭进程通过其<xref:System.Diagnostics.Process.HasExited%2A>属性...</span><span class="sxs-lookup"><span data-stu-id="26150-1438">You can check whether a process has already been closed by using its <xref:System.Diagnostics.Process.HasExited%2A> property..</span></span>  
  
 <span data-ttu-id="26150-1439">有关托管线程中的单元状态的注意事项此处是必需的。</span><span class="sxs-lookup"><span data-stu-id="26150-1439">A note about apartment states in managed threads is necessary here.</span></span> <span data-ttu-id="26150-1440">当<xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>是`true`进程组件上<xref:System.Diagnostics.Process.StartInfo%2A>属性，请确保已通过将属性设置对应用程序中设置线程模型`[STAThread]`上`main()`方法。</span><span class="sxs-lookup"><span data-stu-id="26150-1440">When <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> is `true` on the process component's <xref:System.Diagnostics.Process.StartInfo%2A> property, make sure you have set a threading model on your application by setting the attribute `[STAThread]` on the `main()` method.</span></span> <span data-ttu-id="26150-1441">否则，托管的线程可以处于`unknown`状态或将放入`MTA`状态时，发生冲突，而后一个<xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A>正在`true`。</span><span class="sxs-lookup"><span data-stu-id="26150-1441">Otherwise, a managed thread can be in an `unknown` state or put in the `MTA` state, the latter of which conflicts with <xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A> being `true`.</span></span> <span data-ttu-id="26150-1442">某些方法要求使用的单元状态，不会`unknown`。</span><span class="sxs-lookup"><span data-stu-id="26150-1442">Some methods require that the apartment state not be `unknown`.</span></span> <span data-ttu-id="26150-1443">如果未显式设置该状态，那么当应用程序遇到这样的方法时，它默认为`MTA`，而一次设置，就不能更改的单元状态。</span><span class="sxs-lookup"><span data-stu-id="26150-1443">If the state is not explicitly set, when the application encounters such a method, it defaults to `MTA`, and once set, the apartment state cannot be changed.</span></span> <span data-ttu-id="26150-1444">但是，`MTA`操作系统外壳程序管理线程时引发异常。</span><span class="sxs-lookup"><span data-stu-id="26150-1444">However, `MTA` causes an exception to be thrown when the operating system shell is managing the thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-1445">下面的示例首先生成的 Internet Explorer 实例，并在浏览器中显示的收藏夹文件夹的内容。</span><span class="sxs-lookup"><span data-stu-id="26150-1445">The following example first spawns an instance of Internet Explorer and displays the contents of the Favorites folder in the browser.</span></span> <span data-ttu-id="26150-1446">然后，启动 Internet Explorer 的一些其他实例，并显示某些特定的页或站点。</span><span class="sxs-lookup"><span data-stu-id="26150-1446">It then starts some other instances of Internet Explorer and displays some specific pages or sites.</span></span> <span data-ttu-id="26150-1447">最后，它与时导航到特定站点最小化窗口启动 Internet Explorer。</span><span class="sxs-lookup"><span data-stu-id="26150-1447">Finally it starts Internet Explorer with the window being minimized while navigating to a specific site.</span></span>  
  
 [!code-cpp[Process.Start_static#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.Start_static/CPP/processstartstatic.cpp#1)]
 [!code-csharp[Process.Start_static#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.Start_static/CS/processstartstatic.cs#1)]
 [!code-vb[Process.Start_static#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.Start_static/VB/processstartstatic.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-1448">
            <paramref name="fileName" /> 或 <paramref name="arguments" /> 参数为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1448">The <paramref name="fileName" /> or <paramref name="arguments" /> parameter is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.Win32Exception">
          <span data-ttu-id="26150-1449">打开关联的文件时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1449">An error occurred when opening the associated file.</span>
          </span>
          <span data-ttu-id="26150-1450">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1450">-or-</span>
          </span>
          <span data-ttu-id="26150-1451">参数的长度与该进程的完整路径的长度的总和超过了 2080。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1451">The sum of the length of the arguments and the length of the full path to the process exceeds 2080.</span>
          </span>
          <span data-ttu-id="26150-1452">与此异常关联的错误消息可能为以下消息之一：“传递到系统调用的数据区域太小。”</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1452">The error message associated with this exception can be one of the following: "The data area passed to a system call is too small."</span>
          </span>
          <span data-ttu-id="26150-1453">或“拒绝访问。”</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1453">or "Access is denied."</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="26150-1454">已释放此进程对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1454">The process object has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="26150-1455">PATH 环境变量具有一个包含引号的字符串。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1455">The PATH environment variable has a string containing quotes.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1456">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1456">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1457">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1457">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.FileName" />
        <altmember cref="P:System.Diagnostics.Process.StartInfo" />
        <altmember cref="T:System.Diagnostics.ProcessStartInfo" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process Start (string fileName, string userName, System.Security.SecureString password, string domain);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process Start(string fileName, string userName, class System.Security.SecureString password, string domain) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Start (fileName As String, userName As String, password As SecureString, domain As String) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Process ^ Start(System::String ^ fileName, System::String ^ userName, System::Security::SecureString ^ password, System::String ^ domain);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.Security.SecureString" />
        <Parameter Name="domain" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="26150-1458">要在进程中运行的应用程序文件的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1458">The name of an application file to run in the process.</span>
          </span>
        </param>
        <param name="userName">
          <span data-ttu-id="26150-1459">启动进程时使用的用户名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1459">The user name to use when starting the process.</span>
          </span>
        </param>
        <param name="password">
          <span data-ttu-id="26150-1460">包含启动进程时要使用的密码的 <see cref="T:System.Security.SecureString" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1460">A <see cref="T:System.Security.SecureString" /> that contains the password to use when starting the process.</span>
          </span>
        </param>
        <param name="domain">
          <span data-ttu-id="26150-1461">启动进程时要使用的域。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1461">The domain to use when starting the process.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="26150-1462">通过指定应用程序的名称、用户名、密码和域来启动一个进程资源，并将该资源与新的 <see cref="T:System.Diagnostics.Process" /> 组件关联起来。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1462">Starts a process resource by specifying the name of an application, a user name, a password, and a domain and associates the resource with a new <see cref="T:System.Diagnostics.Process" /> component.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="26150-1463">与进程资源关联的新 <see cref="T:System.Diagnostics.Process" />，如果未启动进程资源，则为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1463">A new <see cref="T:System.Diagnostics.Process" /> that is associated with the process resource, or <see langword="null" /> if no process resource is started.</span>
          </span>
          <span data-ttu-id="26150-1464">请注意，随着同一进程已在运行的实例启动的新进程将独立于其他进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1464">Note that a new process that’s started alongside already running instances of the same process will be independent from the others.</span>
          </span>
          <span data-ttu-id="26150-1465">此外，启动可能返回一个 <see cref="P:System.Diagnostics.Process.HasExited" /> 属性已设置为 <see langword="true" /> 的非 null 进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1465">In addition, Start may return a non-null Process with its <see cref="P:System.Diagnostics.Process.HasExited" /> property already set to <see langword="true" />.</span>
          </span>
          <span data-ttu-id="26150-1466">在这种情况下，启动的进程可能已激活现有实例自身，然后退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1466">In this case, the started process may have activated an existing instance of itself and then exited.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-1467">使用此重载来通过指定其文件名称、 用户名、 密码和域中创建新的进程和其主线程。</span><span class="sxs-lookup"><span data-stu-id="26150-1467">Use this overload to create a new process and its primary thread by specifying its file name, user name, password, and domain.</span></span> <span data-ttu-id="26150-1468">然后，新进程指定的凭据 （用户、 域和密码） 的安全上下文中运行指定的可执行文件。</span><span class="sxs-lookup"><span data-stu-id="26150-1468">The new process then runs the specified executable file in the security context of the specified credentials (user, domain, and password).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-1469">在可执行文件位于远程驱动器上，必须通过使用统一资源标识符 (URI)，不链接的驱动器号来标识网络共享。</span><span class="sxs-lookup"><span data-stu-id="26150-1469">When the executable file is located on a remote drive, you must identify the network share by using a uniform resource identifier (URI), not a linked drive letter.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-1470">如果要启动的可执行文件的地址是 URL，则不会启动进程和`null`返回。</span><span class="sxs-lookup"><span data-stu-id="26150-1470">If the address of the executable file to start is a URL, the process is not started and `null` is returned.</span></span>  
  
 <span data-ttu-id="26150-1471">此重载使你无需首先创建一个新启动的进程<xref:System.Diagnostics.Process>实例。</span><span class="sxs-lookup"><span data-stu-id="26150-1471">This overload lets you start a process without first creating a new <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="26150-1472">该重载是创建一个新的显式步骤的替代方法<xref:System.Diagnostics.Process>实例，设置<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>， <xref:System.Diagnostics.ProcessStartInfo.UserName%2A>， <xref:System.Diagnostics.ProcessStartInfo.Password%2A>，和<xref:System.Diagnostics.ProcessStartInfo.Domain%2A>属性<xref:System.Diagnostics.Process.StartInfo%2A>属性，再调用<xref:System.Diagnostics.Process.Start%2A>为<xref:System.Diagnostics.Process>实例。</span><span class="sxs-lookup"><span data-stu-id="26150-1472">The overload is an alternative to the explicit steps of creating a new <xref:System.Diagnostics.Process> instance, setting the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>, <xref:System.Diagnostics.ProcessStartInfo.UserName%2A>, <xref:System.Diagnostics.ProcessStartInfo.Password%2A>, and <xref:System.Diagnostics.ProcessStartInfo.Domain%2A> properties of the <xref:System.Diagnostics.Process.StartInfo%2A> property, and calling <xref:System.Diagnostics.Process.Start%2A> for the <xref:System.Diagnostics.Process> instance.</span></span>  
  
 <span data-ttu-id="26150-1473">同样，在相同的方式**运行**对话框中可以接受使用或不具有.exe 扩展名的可执行文件名、 扩展名为.exe 中是可选`fileName`参数。</span><span class="sxs-lookup"><span data-stu-id="26150-1473">Similarly, in the same way that the **Run** dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the `fileName` parameter.</span></span> <span data-ttu-id="26150-1474">例如，你可以设置`fileName`参数以"Notepad.exe"或"记事本"。</span><span class="sxs-lookup"><span data-stu-id="26150-1474">For example, you can set the `fileName` parameter to either "Notepad.exe" or "Notepad".</span></span> <span data-ttu-id="26150-1475">如果`fileName`参数表示一个可执行文件，`arguments`参数可能表示要执行操作，例如文本文件中的文件`Notepad.exe myfile.txt`。</span><span class="sxs-lookup"><span data-stu-id="26150-1475">If the `fileName` parameter represents an executable file, the `arguments` parameter might represent a file to act upon, such as the text file in `Notepad.exe myfile.txt`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-1476">文件名称必须表示中的可执行文件<xref:System.Diagnostics.Process.Start%2A>具有重载`userName`， `password`，和`domain`参数。</span><span class="sxs-lookup"><span data-stu-id="26150-1476">The file name must represent an executable file in the <xref:System.Diagnostics.Process.Start%2A> overloads that have `userName`, `password`, and `domain` parameters.</span></span>  
  
 <span data-ttu-id="26150-1477">无论何时使用<xref:System.Diagnostics.Process.Start%2A>若要启动进程时，你可能需要将其关闭或冒系统资源。</span><span class="sxs-lookup"><span data-stu-id="26150-1477">Whenever you use <xref:System.Diagnostics.Process.Start%2A> to start a process, you might need to close it or you risk losing system resources.</span></span> <span data-ttu-id="26150-1478">关闭进程使用<xref:System.Diagnostics.Process.CloseMainWindow%2A>或<xref:System.Diagnostics.Process.Kill%2A>。</span><span class="sxs-lookup"><span data-stu-id="26150-1478">Close processes using <xref:System.Diagnostics.Process.CloseMainWindow%2A> or <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="26150-1479">你可以检查是否已关闭进程通过其<xref:System.Diagnostics.Process.HasExited%2A>属性...</span><span class="sxs-lookup"><span data-stu-id="26150-1479">You can check whether a process has already been closed by using its <xref:System.Diagnostics.Process.HasExited%2A> property..</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-1480">下面的代码示例演示了如何使用此重载，以启动可执行文件，并演示对引发<xref:System.ComponentModel.Win32Exception>时尝试启动应用程序与非可执行文件相关联。</span><span class="sxs-lookup"><span data-stu-id="26150-1480">The following code example shows the use of this overload to start an executable file and also demonstrates the throwing of a <xref:System.ComponentModel.Win32Exception> when an attempt is made to start an application associated with a nonexecutable file.</span></span>  
  
 [!code-csharp[System.Diagnostics.Process.Start#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Process.Start/CS/program.cs#1)]
 [!code-vb[System.Diagnostics.Process.Start#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Process.Start/VB/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-1481">未指定文件名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1481">No file name was specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.Win32Exception">
          <span data-ttu-id="26150-1482">打开关联的文件时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1482">There was an error in opening the associated file.</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="26150-1483">已释放此进程对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1483">The process object has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-1484">Linux 或 macOS （仅适用于.NET Core）不支持此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1484">Method not supported on Linux or macOS (.NET Core only).</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1485">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1485">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1486">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1486">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Process Start (string fileName, string arguments, string userName, System.Security.SecureString password, string domain);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Process Start(string fileName, string arguments, string userName, class System.Security.SecureString password, string domain) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Start (fileName As String, arguments As String, userName As String, password As SecureString, domain As String) As Process" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Process ^ Start(System::String ^ fileName, System::String ^ arguments, System::String ^ userName, System::Security::SecureString ^ password, System::String ^ domain);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Process</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="arguments" Type="System.String" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.Security.SecureString" />
        <Parameter Name="domain" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="26150-1487">要在进程中运行的应用程序文件的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1487">The name of an application file to run in the process.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="26150-1488">启动该进程时传递的命令行参数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1488">Command-line arguments to pass when starting the process.</span>
          </span>
        </param>
        <param name="userName">
          <span data-ttu-id="26150-1489">启动进程时使用的用户名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1489">The user name to use when starting the process.</span>
          </span>
        </param>
        <param name="password">
          <span data-ttu-id="26150-1490">包含启动进程时要使用的密码的 <see cref="T:System.Security.SecureString" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1490">A <see cref="T:System.Security.SecureString" /> that contains the password to use when starting the process.</span>
          </span>
        </param>
        <param name="domain">
          <span data-ttu-id="26150-1491">启动进程时要使用的域。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1491">The domain to use when starting the process.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="26150-1492">通过指定应用程序的名称、一组命令行参数、用户名、密码和域来启动一个进程资源，并将该资源与新的 <see cref="T:System.Diagnostics.Process" /> 组件关联起来。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1492">Starts a process resource by specifying the name of an application, a set of command-line arguments, a user name, a password, and a domain and associates the resource with a new <see cref="T:System.Diagnostics.Process" /> component.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="26150-1493">与进程资源关联的新 <see cref="T:System.Diagnostics.Process" />，如果未启动进程资源，则为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1493">A new <see cref="T:System.Diagnostics.Process" /> that is associated with the process resource, or <see langword="null" /> if no process resource is started.</span>
          </span>
          <span data-ttu-id="26150-1494">请注意，随着同一进程已在运行的实例启动的新进程将独立于其他进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1494">Note that a new process that’s started alongside already running instances of the same process will be independent from the others.</span>
          </span>
          <span data-ttu-id="26150-1495">此外，启动可能返回一个 <see cref="P:System.Diagnostics.Process.HasExited" /> 属性已设置为 <see langword="true" /> 的非 null 进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1495">In addition, Start may return a non-null Process with its <see cref="P:System.Diagnostics.Process.HasExited" /> property already set to <see langword="true" />.</span>
          </span>
          <span data-ttu-id="26150-1496">在这种情况下，启动的进程可能已激活现有实例自身，然后退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1496">In this case, the started process may have activated an existing instance of itself and then exited.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-1497">使用此重载来通过指定其文件名、 命令行自变量、 用户名、 密码和域中创建新的进程和其主线程。</span><span class="sxs-lookup"><span data-stu-id="26150-1497">Use this overload to create a new process and its primary thread by specifying its file name, command-line arguments, user name, password, and domain.</span></span> <span data-ttu-id="26150-1498">然后，新进程指定的凭据 （用户、 域和密码） 的安全上下文中运行指定的可执行文件。</span><span class="sxs-lookup"><span data-stu-id="26150-1498">The new process then runs the specified executable file in the security context of the specified credentials (user, domain, and password).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-1499">在可执行文件位于远程驱动器上，必须通过使用统一资源标识符 (URI)，不链接的驱动器号来标识网络共享。</span><span class="sxs-lookup"><span data-stu-id="26150-1499">When the executable file is located on a remote drive, you must identify the network share by using a uniform resource identifier (URI), not a linked drive letter.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-1500">如果要启动的可执行文件的地址是 URL，则不会启动进程和`null`返回。</span><span class="sxs-lookup"><span data-stu-id="26150-1500">If the address of the executable file to start is a URL, the process is not started and `null` is returned.</span></span>  
  
 <span data-ttu-id="26150-1501">此重载使你无需首先创建一个新启动的进程<xref:System.Diagnostics.Process>实例。</span><span class="sxs-lookup"><span data-stu-id="26150-1501">This overload lets you start a process without first creating a new <xref:System.Diagnostics.Process> instance.</span></span> <span data-ttu-id="26150-1502">该重载是创建一个新的显式步骤的替代方法<xref:System.Diagnostics.Process>实例，设置<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>， <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A>， <xref:System.Diagnostics.ProcessStartInfo.UserName%2A>， <xref:System.Diagnostics.ProcessStartInfo.Password%2A>，和<xref:System.Diagnostics.ProcessStartInfo.Domain%2A>属性<xref:System.Diagnostics.Process.StartInfo%2A>属性，再调用<xref:System.Diagnostics.Process.Start%2A>为<xref:System.Diagnostics.Process>实例。</span><span class="sxs-lookup"><span data-stu-id="26150-1502">The overload is an alternative to the explicit steps of creating a new <xref:System.Diagnostics.Process> instance, setting the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A>, <xref:System.Diagnostics.ProcessStartInfo.Arguments%2A>, <xref:System.Diagnostics.ProcessStartInfo.UserName%2A>, <xref:System.Diagnostics.ProcessStartInfo.Password%2A>, and <xref:System.Diagnostics.ProcessStartInfo.Domain%2A> properties of the <xref:System.Diagnostics.Process.StartInfo%2A> property, and calling <xref:System.Diagnostics.Process.Start%2A> for the <xref:System.Diagnostics.Process> instance.</span></span>  
  
 <span data-ttu-id="26150-1503">同样，在相同的方式**运行**对话框中可以接受使用或不具有.exe 扩展名的可执行文件名、 扩展名为.exe 中是可选`fileName`参数。</span><span class="sxs-lookup"><span data-stu-id="26150-1503">Similarly, in the same way that the **Run** dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the `fileName` parameter.</span></span> <span data-ttu-id="26150-1504">例如，你可以设置`fileName`参数以"Notepad.exe"或"记事本"。</span><span class="sxs-lookup"><span data-stu-id="26150-1504">For example, you can set the `fileName` parameter to either "Notepad.exe" or "Notepad".</span></span> <span data-ttu-id="26150-1505">如果`fileName`参数表示一个可执行文件，`arguments`参数可能表示要执行操作，例如文本文件中的文件`Notepad.exe myfile.txt`。</span><span class="sxs-lookup"><span data-stu-id="26150-1505">If the `fileName` parameter represents an executable file, the `arguments` parameter might represent a file to act upon, such as the text file in `Notepad.exe myfile.txt`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-1506">文件名称必须表示中的可执行文件<xref:System.Diagnostics.Process.Start%2A>具有重载`userName`， `password`，和`domain`参数。</span><span class="sxs-lookup"><span data-stu-id="26150-1506">The file name must represent an executable file in the <xref:System.Diagnostics.Process.Start%2A> overloads that have `userName`, `password`, and `domain` parameters.</span></span>  
  
 <span data-ttu-id="26150-1507">无论何时使用<xref:System.Diagnostics.Process.Start%2A>若要启动进程时，你可能需要将其关闭或冒系统资源。</span><span class="sxs-lookup"><span data-stu-id="26150-1507">Whenever you use <xref:System.Diagnostics.Process.Start%2A> to start a process, you might need to close it or you risk losing system resources.</span></span> <span data-ttu-id="26150-1508">关闭进程使用<xref:System.Diagnostics.Process.CloseMainWindow%2A>或<xref:System.Diagnostics.Process.Kill%2A>。</span><span class="sxs-lookup"><span data-stu-id="26150-1508">Close processes using <xref:System.Diagnostics.Process.CloseMainWindow%2A> or <xref:System.Diagnostics.Process.Kill%2A>.</span></span> <span data-ttu-id="26150-1509">你可以检查是否已关闭进程通过其<xref:System.Diagnostics.Process.HasExited%2A>属性...</span><span class="sxs-lookup"><span data-stu-id="26150-1509">You can check whether a process has already been closed by using its <xref:System.Diagnostics.Process.HasExited%2A> property..</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-1510">未指定文件名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1510">No file name was specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.Win32Exception">
          <span data-ttu-id="26150-1511">打开关联的文件时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1511">An error occurred when opening the associated file.</span>
          </span>
          <span data-ttu-id="26150-1512">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1512">-or-</span>
          </span>
          <span data-ttu-id="26150-1513">参数的长度与该关联文件的完整路径的长度的总和超过了 2080。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1513">The sum of the length of the arguments and the length of the full path to the associated file exceeds 2080.</span>
          </span>
          <span data-ttu-id="26150-1514">与此异常关联的错误消息可能为以下消息之一：“传递到系统调用的数据区域太小。”</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1514">The error message associated with this exception can be one of the following: "The data area passed to a system call is too small."</span>
          </span>
          <span data-ttu-id="26150-1515">或“拒绝访问。”</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1515">or "Access is denied."</span>
          </span>
        </exception>
        <exception cref="T:System.ObjectDisposedException">
          <span data-ttu-id="26150-1516">已释放此进程对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1516">The process object has already been disposed.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-1517">Linux 或 macOS （仅适用于.NET Core）不支持此方法。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1517">Method not supported on Linux or macOS (.NET Core only).</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1518">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1518">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1519">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1519">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="StartInfo">
      <MemberSignature Language="C#" Value="public System.Diagnostics.ProcessStartInfo StartInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.ProcessStartInfo StartInfo" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.StartInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property StartInfo As ProcessStartInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::ProcessStartInfo ^ StartInfo { System::Diagnostics::ProcessStartInfo ^ get(); void set(System::Diagnostics::ProcessStartInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Specifies information used to start a process.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ProcessStartInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-1520">获取或设置要传递给 <see cref="T:System.Diagnostics.Process" /> 的 <see cref="M:System.Diagnostics.Process.Start" /> 方法的属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1520">Gets or sets the properties to pass to the <see cref="M:System.Diagnostics.Process.Start" /> method of the <see cref="T:System.Diagnostics.Process" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-1521">表示启动进程时要使用的数据的 <see cref="T:System.Diagnostics.ProcessStartInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1521">The <see cref="T:System.Diagnostics.ProcessStartInfo" /> that represents the data with which to start the process.</span>
          </span>
          <span data-ttu-id="26150-1522">这些自变量包括用于启动该进程的可执行文件或文档的名称。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1522">These arguments include the name of the executable file or document used to start the process.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-1523"><xref:System.Diagnostics.Process.StartInfo%2A> 表示要用于启动过程的参数集。</span><span class="sxs-lookup"><span data-stu-id="26150-1523"><xref:System.Diagnostics.Process.StartInfo%2A> represents the set of parameters to use to start a process.</span></span> <span data-ttu-id="26150-1524">当<xref:System.Diagnostics.Process.Start%2A>调用时，<xref:System.Diagnostics.Process.StartInfo%2A>用于指定要启动的进程。</span><span class="sxs-lookup"><span data-stu-id="26150-1524">When <xref:System.Diagnostics.Process.Start%2A> is called, the <xref:System.Diagnostics.Process.StartInfo%2A> is used to specify the process to start.</span></span> <span data-ttu-id="26150-1525">仅将必需<xref:System.Diagnostics.Process.StartInfo%2A>成员设置是<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="26150-1525">The only necessary <xref:System.Diagnostics.Process.StartInfo%2A> member to set is the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property.</span></span> <span data-ttu-id="26150-1526">通过指定启动进程<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>属性是类似于键入中的信息**运行**对话框中的 windows**启动**菜单。</span><span class="sxs-lookup"><span data-stu-id="26150-1526">Starting a process by specifying the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property is similar to typing the information in the **Run** dialog box of the Windows **Start** menu.</span></span> <span data-ttu-id="26150-1527">因此，<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>属性不需要表示一个可执行文件。</span><span class="sxs-lookup"><span data-stu-id="26150-1527">Therefore, the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property does not need to represent an executable file.</span></span> <span data-ttu-id="26150-1528">它可以是为其扩展已关联与应用程序在系统上安装任何文件类型。</span><span class="sxs-lookup"><span data-stu-id="26150-1528">It can be of any file type for which the extension has been associated with an application installed on the system.</span></span> <span data-ttu-id="26150-1529">例如<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>如果你具有使用编辑器 （如记事本） 相关联的文本文件或者如果你已经将提供一个文字处理的工具，如 Microsoft Word 的文本文件，也可能产生.doc 可以具有.txt 扩展名。</span><span class="sxs-lookup"><span data-stu-id="26150-1529">For example the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> can have a .txt extension if you have associated text files with an editor, such as Notepad, or it can have a .doc if you have associated.doc files with a word processing tool, such as Microsoft Word.</span></span> <span data-ttu-id="26150-1530">同样，在相同的方式**运行**对话框中可以接受使用或不具有.exe 扩展名的可执行文件名、 扩展名为.exe 中是可选<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>成员。</span><span class="sxs-lookup"><span data-stu-id="26150-1530">Similarly, in the same way that the **Run** dialog box can accept an executable file name with or without the .exe extension, the .exe extension is optional in the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> member.</span></span> <span data-ttu-id="26150-1531">例如，你可以设置<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>属性设置为"Notepad.exe"或"记事本"。</span><span class="sxs-lookup"><span data-stu-id="26150-1531">For example, you can set the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property to either "Notepad.exe" or "Notepad".</span></span>  
  
 <span data-ttu-id="26150-1532">您可以通过设置启动 ClickOnce 应用程序<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>最初从中安装应用程序的位置 （例如，Web 地址） 的属性。</span><span class="sxs-lookup"><span data-stu-id="26150-1532">You can start a ClickOnce application by setting the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property to the location (for example, a Web address) from which you originally installed the application.</span></span> <span data-ttu-id="26150-1533">不通过指定其安装的位置在硬盘驱动器上启动 ClickOnce 应用程序。</span><span class="sxs-lookup"><span data-stu-id="26150-1533">Do not start a ClickOnce application by specifying its installed location on your hard drive.</span></span>  
  
 <span data-ttu-id="26150-1534">如果文件名涉及非可执行文件，例如.doc 文件，你可以包括一个谓词指定要对该文件执行的操作。</span><span class="sxs-lookup"><span data-stu-id="26150-1534">If the file name involves a nonexecutable file, such as a .doc file, you can include a verb specifying what action to take on the file.</span></span> <span data-ttu-id="26150-1535">例如，你可以设置<xref:System.Diagnostics.ProcessStartInfo.Verb%2A>到以.doc 扩展名的文件的"打印"。</span><span class="sxs-lookup"><span data-stu-id="26150-1535">For example, you could set the <xref:System.Diagnostics.ProcessStartInfo.Verb%2A> to "Print" for a file ending in the .doc extension.</span></span> <span data-ttu-id="26150-1536">中指定的文件名称<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>属性不需要具有扩展名，如果你手动输入的值<xref:System.Diagnostics.ProcessStartInfo.Verb%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="26150-1536">The file name specified in the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property does not need to have an extension if you manually enter a value for the <xref:System.Diagnostics.ProcessStartInfo.Verb%2A> property.</span></span> <span data-ttu-id="26150-1537">但是，如果你使用<xref:System.Diagnostics.ProcessStartInfo.Verbs%2A>属性来确定哪些谓词的可用，必须包括扩展名。</span><span class="sxs-lookup"><span data-stu-id="26150-1537">However, if you use the <xref:System.Diagnostics.ProcessStartInfo.Verbs%2A> property to determine what verbs are available, you must include the extension.</span></span>  
  
 <span data-ttu-id="26150-1538">你可以更改中指定的参数<xref:System.Diagnostics.Process.StartInfo%2A>你调用的时间属性<xref:System.Diagnostics.Process.Start%2A>进程上的方法。</span><span class="sxs-lookup"><span data-stu-id="26150-1538">You can change the parameters specified in the <xref:System.Diagnostics.Process.StartInfo%2A> property up to the time that you call the <xref:System.Diagnostics.Process.Start%2A> method on the process.</span></span> <span data-ttu-id="26150-1539">启动过程后，更改<xref:System.Diagnostics.Process.StartInfo%2A>值不会影响或重新启动关联的进程。</span><span class="sxs-lookup"><span data-stu-id="26150-1539">After you start the process, changing the <xref:System.Diagnostics.Process.StartInfo%2A> values does not affect or restart the associated process.</span></span> <span data-ttu-id="26150-1540">如果调用<xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29>方法替换<xref:System.Diagnostics.ProcessStartInfo.UserName%2A?displayProperty=nameWithType>和<xref:System.Diagnostics.ProcessStartInfo.Password%2A?displayProperty=nameWithType>属性集，则非托管`CreateProcessWithLogonW`调用函数，以启动该过程在新窗口即使<xref:System.Diagnostics.ProcessStartInfo.CreateNoWindow%2A>属性值是`true`或<xref:System.Diagnostics.ProcessStartInfo.WindowStyle%2A>属性值是<xref:System.Diagnostics.ProcessWindowStyle.Hidden>。</span><span class="sxs-lookup"><span data-stu-id="26150-1540">If you call the <xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29> method with the <xref:System.Diagnostics.ProcessStartInfo.UserName%2A?displayProperty=nameWithType> and <xref:System.Diagnostics.ProcessStartInfo.Password%2A?displayProperty=nameWithType> properties set, the unmanaged `CreateProcessWithLogonW` function is called, which starts the process in a new window even if the <xref:System.Diagnostics.ProcessStartInfo.CreateNoWindow%2A> property value is `true` or the <xref:System.Diagnostics.ProcessStartInfo.WindowStyle%2A> property value is <xref:System.Diagnostics.ProcessWindowStyle.Hidden>.</span></span>  
  
 <span data-ttu-id="26150-1541">如果你未使用<xref:System.Diagnostics.Process.Start%2A>方法来启动一个进程，<xref:System.Diagnostics.Process.StartInfo%2A>属性不会反映用于启动进程的参数。</span><span class="sxs-lookup"><span data-stu-id="26150-1541">If you did not use the <xref:System.Diagnostics.Process.Start%2A> method to start a process, the <xref:System.Diagnostics.Process.StartInfo%2A> property does not reflect the parameters used to start the process.</span></span> <span data-ttu-id="26150-1542">例如，如果你使用<xref:System.Diagnostics.Process.GetProcesses%2A>获取的计算机上，运行的进程的数组<xref:System.Diagnostics.Process.StartInfo%2A>每个属性<xref:System.Diagnostics.Process>不包含的原始文件名或用于启动进程的自变量。</span><span class="sxs-lookup"><span data-stu-id="26150-1542">For example, if you use <xref:System.Diagnostics.Process.GetProcesses%2A> to get an array of processes running on the computer, the <xref:System.Diagnostics.Process.StartInfo%2A> property of each <xref:System.Diagnostics.Process> does not contain the original file name or arguments used to start the process.</span></span>  
  
 <span data-ttu-id="26150-1543">当启动进程时，文件名是填充 （只读） 的文件<xref:System.Diagnostics.Process.MainModule%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="26150-1543">When the process is started, the file name is the file that populates the (read-only) <xref:System.Diagnostics.Process.MainModule%2A> property.</span></span> <span data-ttu-id="26150-1544">如果你想要检索进程启动后与进程相关联的可执行文件，请使用<xref:System.Diagnostics.Process.MainModule%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="26150-1544">If you want to retrieve the executable file that is associated with the process after the process has started, use the <xref:System.Diagnostics.Process.MainModule%2A> property.</span></span> <span data-ttu-id="26150-1545">如果你想要设置的可执行文件<xref:System.Diagnostics.Process>实例为其关联的进程尚未启动，请使用<xref:System.Diagnostics.Process.StartInfo%2A>属性的<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>成员。</span><span class="sxs-lookup"><span data-stu-id="26150-1545">If you want to set the executable file of a <xref:System.Diagnostics.Process> instance for which an associated process has not been started, use the <xref:System.Diagnostics.Process.StartInfo%2A> property's <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> member.</span></span> <span data-ttu-id="26150-1546">因为的成员<xref:System.Diagnostics.Process.StartInfo%2A>属性是自变量传递给<xref:System.Diagnostics.Process.Start%2A>方法的过程中，更改<xref:System.Diagnostics.ProcessStartInfo.FileName%2A>属性关联的进程启动后将不会重置<xref:System.Diagnostics.Process.MainModule%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="26150-1546">Because the members of the <xref:System.Diagnostics.Process.StartInfo%2A> property are arguments that are passed to the <xref:System.Diagnostics.Process.Start%2A> method of a process, changing the <xref:System.Diagnostics.ProcessStartInfo.FileName%2A> property after the associated process has started will not reset the <xref:System.Diagnostics.Process.MainModule%2A> property.</span></span> <span data-ttu-id="26150-1547">这些属性仅用于初始化关联的进程。</span><span class="sxs-lookup"><span data-stu-id="26150-1547">These properties are used only to initialize the associated process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-1548">下面的示例填充<xref:System.Diagnostics.Process.StartInfo%2A>在其上执行的操作与要执行的文件，和它是否应显示用户界面。</span><span class="sxs-lookup"><span data-stu-id="26150-1548">The following example populates a <xref:System.Diagnostics.Process.StartInfo%2A> with the file to execute, the action performed on it and whether it should displays a user interface.</span></span> <span data-ttu-id="26150-1549">有关其他示例，请参阅属性参考页<xref:System.Diagnostics.ProcessStartInfo>类。</span><span class="sxs-lookup"><span data-stu-id="26150-1549">For additional examples, refer to the reference pages for properties of the <xref:System.Diagnostics.ProcessStartInfo> class.</span></span>  
  
 [!code-cpp[Process.Start_instance#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process.Start_instance/CPP/processstart.cpp#1)]
 [!code-csharp[Process.Start_instance#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process.Start_instance/CS/processstart.cs#1)]
 [!code-vb[Process.Start_instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process.Start_instance/VB/processstart.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="26150-1550">指定 <see cref="P:System.Diagnostics.Process.StartInfo" /> 的值为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1550">The value that specifies the <see cref="P:System.Diagnostics.Process.StartInfo" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1551">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1551">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1552">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1552">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Diagnostics.Process.Start" />
        <altmember cref="P:System.Diagnostics.ProcessStartInfo.FileName" />
      </Docs>
    </Member>
    <Member MemberName="StartTime">
      <MemberSignature Language="C#" Value="public DateTime StartTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime StartTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.StartTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StartTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime StartTime { DateTime get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The time at which the process was started.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-1553">获取关联进程启动的时间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1553">Gets the time that the associated process was started.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-1554">指示进程启动的时间的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1554">An object  that indicates when the process started.</span>
          </span>
          <span data-ttu-id="26150-1555">如果进程未运行，将会引发异常。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1555">An exception is thrown if the process is not running.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-1556">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1556">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="26150-1557">你正试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.StartTime" /> 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1557">You are attempting to access the <see cref="P:System.Diagnostics.Process.StartTime" /> property for a process that is running on a remote computer.</span>
          </span>
          <span data-ttu-id="26150-1558">此属性仅可用于本地计算机上运行的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1558">This property is available only for processes that are running on the local computer.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-1559">该进程已退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1559">The process has exited.</span>
          </span>
          <span data-ttu-id="26150-1560">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1560">-or-</span>
          </span>
          <span data-ttu-id="26150-1561">该进程尚未启动。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1561">The process has not been started.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.Win32Exception">
          <span data-ttu-id="26150-1562">调用 Windows 函数时出错。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1562">An error occurred in the call to the Windows function.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1563">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1563">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1564">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1564">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="SynchronizingObject">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISynchronizeInvoke SynchronizingObject" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.SynchronizingObject" />
      <MemberSignature Language="VB.NET" Value="Public Property SynchronizingObject As ISynchronizeInvoke" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::ISynchronizeInvoke ^ SynchronizingObject { System::ComponentModel::ISynchronizeInvoke ^ get(); void set(System::ComponentModel::ISynchronizeInvoke ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The object used to marshal the event handler calls issued as a result of a Process exit.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISynchronizeInvoke</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-1565">获取或设置用于封送由于进程退出事件而发出的事件处理程序调用的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1565">Gets or sets the object used to marshal the event handler calls that are issued as a result of a process exit event.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-1566">
            <see cref="T:System.ComponentModel.ISynchronizeInvoke" />，它用于封送由于进程上的 <see cref="E:System.Diagnostics.Process.Exited" /> 事件而发出的事件处理程序调用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1566">The <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> used to marshal event handler calls that are issued as a result of an <see cref="E:System.Diagnostics.Process.Exited" /> event on the process.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-1567">当<xref:System.Diagnostics.EventLog.SynchronizingObject%2A>是`null`，方法，用于处理<xref:System.Diagnostics.Process.Exited>事件调用从系统线程池线程上。</span><span class="sxs-lookup"><span data-stu-id="26150-1567">When <xref:System.Diagnostics.EventLog.SynchronizingObject%2A> is `null`, methods that handle the <xref:System.Diagnostics.Process.Exited> event are called on a thread from the system thread pool.</span></span> <span data-ttu-id="26150-1568">有关系统线程池的详细信息，请参阅<xref:System.Threading.ThreadPool>。</span><span class="sxs-lookup"><span data-stu-id="26150-1568">For more information about system thread pools, see <xref:System.Threading.ThreadPool>.</span></span>  
  
 <span data-ttu-id="26150-1569">当<xref:System.Diagnostics.Process.Exited>事件由 visual 的 Windows 窗体组件，如处理<xref:System.Windows.Forms.Button>，通过系统线程池访问组件可能不起作用，或者可能会导致异常。</span><span class="sxs-lookup"><span data-stu-id="26150-1569">When the <xref:System.Diagnostics.Process.Exited> event is handled by a visual Windows Forms component, such as a <xref:System.Windows.Forms.Button>, accessing the component through the system thread pool might not work, or might result in an exception.</span></span> <span data-ttu-id="26150-1570">通过设置来避免这<xref:System.Diagnostics.Process.SynchronizingObject%2A>到 Windows 窗体组件时，这将导致处理的方法<xref:System.Diagnostics.Process.Exited>事件在其创建该组件在同一线程上调用。</span><span class="sxs-lookup"><span data-stu-id="26150-1570">Avoid this by setting <xref:System.Diagnostics.Process.SynchronizingObject%2A> to a Windows Forms component, which causes the methods handling the <xref:System.Diagnostics.Process.Exited> event to be called on the same thread on which the component was created.</span></span>  
  
 <span data-ttu-id="26150-1571">如果<xref:System.Diagnostics.Process>在内部使用[!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)]在 Windows 窗体设计器中，<xref:System.Diagnostics.Process.SynchronizingObject%2A>自动设置为包含的控件<xref:System.Diagnostics.Process>。</span><span class="sxs-lookup"><span data-stu-id="26150-1571">If the <xref:System.Diagnostics.Process> is used inside [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] in a Windows Forms designer, <xref:System.Diagnostics.Process.SynchronizingObject%2A> is automatically set to the control that contains the <xref:System.Diagnostics.Process>.</span></span> <span data-ttu-id="26150-1572">例如，如果你将放置<xref:System.Diagnostics.Process>的设计器上`Form1`(其继承自<xref:System.Windows.Forms.Form>)<xref:System.Diagnostics.Process.SynchronizingObject%2A>属性<xref:System.Diagnostics.Process>设置为的实例`Form1`:</span><span class="sxs-lookup"><span data-stu-id="26150-1572">For example, if you place a <xref:System.Diagnostics.Process> on a designer for `Form1` (which inherits from <xref:System.Windows.Forms.Form>) the <xref:System.Diagnostics.Process.SynchronizingObject%2A> property of <xref:System.Diagnostics.Process> is set to the instance of `Form1`:</span></span>  
  
 [!code-cpp[Process_SynchronizingObject#2](~/samples/snippets/cpp/VS_Snippets_CLR/Process_SynchronizingObject/CPP/remarks.cpp#2)]
 [!code-csharp[Process_SynchronizingObject#2](~/samples/snippets/csharp/VS_Snippets_CLR/Process_SynchronizingObject/CS/remarks.cs#2)]
 [!code-vb[Process_SynchronizingObject#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process_SynchronizingObject/VB/remarks.vb#2)]  
  
 <span data-ttu-id="26150-1573">通常情况下，此属性设置时该组件放置在控件或窗体中，因为这些组件绑定到特定线程。</span><span class="sxs-lookup"><span data-stu-id="26150-1573">Typically, this property is set when the component is placed inside a control or form, because those components are bound to a specific thread.</span></span>  
  
   
  
## Examples  
 [!code-cpp[Process_SynchronizingObject#1](~/samples/snippets/cpp/VS_Snippets_CLR/Process_SynchronizingObject/CPP/process_synchronizingobject.cpp#1)]
 [!code-csharp[Process_SynchronizingObject#1](~/samples/snippets/csharp/VS_Snippets_CLR/Process_SynchronizingObject/CS/process_synchronizingobject.cs#1)]
 [!code-vb[Process_SynchronizingObject#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Process_SynchronizingObject/VB/process_synchronizingobject.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1574">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1574">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1575">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1575">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.SynchronizingObject" />
      </Docs>
    </Member>
    <Member MemberName="Threads">
      <MemberSignature Language="C#" Value="public System.Diagnostics.ProcessThreadCollection Threads { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.ProcessThreadCollection Threads" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.Threads" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Threads As ProcessThreadCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::ProcessThreadCollection ^ Threads { System::Diagnostics::ProcessThreadCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The number of threads of this process.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.ProcessThreadCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-1576">获取在关联进程中运行的一组线程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1576">Gets the set of threads that are running in the associated process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-1577">类型 <see cref="T:System.Diagnostics.ProcessThread" /> 的数组，表示当前在关联进程中运行的操作系统线程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1577">An array of type <see cref="T:System.Diagnostics.ProcessThread" /> representing the operating system threads currently running in the associated process.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-1578">线程在进程中执行代码。</span><span class="sxs-lookup"><span data-stu-id="26150-1578">A thread executes code in a process.</span></span> <span data-ttu-id="26150-1579">每个进程开始使用单线程，其主线程。</span><span class="sxs-lookup"><span data-stu-id="26150-1579">Each process is started with a single thread, its primary thread.</span></span> <span data-ttu-id="26150-1580">任何线程可以创建其他线程。</span><span class="sxs-lookup"><span data-stu-id="26150-1580">Any thread can create additional threads.</span></span> <span data-ttu-id="26150-1581">在一个进程内的线程都共享进程的地址空间。</span><span class="sxs-lookup"><span data-stu-id="26150-1581">Threads within a process share the address space of the process.</span></span>  
  
 <span data-ttu-id="26150-1582">使用<xref:System.Diagnostics.ProcessThread>可获取与当前进程关联的所有线程。</span><span class="sxs-lookup"><span data-stu-id="26150-1582">Use <xref:System.Diagnostics.ProcessThread> to get all the threads associated with the current process.</span></span> <span data-ttu-id="26150-1583">主线程不一定是位于索引零数组中。</span><span class="sxs-lookup"><span data-stu-id="26150-1583">The primary thread is not necessarily at index zero in the array.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">
          <span data-ttu-id="26150-1584">进程没有 <see cref="P:System.Diagnostics.Process.Id" />，或者没有与 <see cref="T:System.Diagnostics.Process" /> 实例关联的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1584">The process does not have an <see cref="P:System.Diagnostics.Process.Id" />, or no process is associated with the <see cref="T:System.Diagnostics.Process" /> instance.</span>
          </span>
          <span data-ttu-id="26150-1585">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1585">-or-</span>
          </span>
          <span data-ttu-id="26150-1586">关联进程已退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1586">The associated process has exited.</span>
          </span>
        </exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-1587">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)；将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 设置为 <see langword="false" />，以在 Windows 98 和 Windows Me 上访问此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1587">The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> to <see langword="false" /> to access this property on Windows 98 and Windows Me.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1588">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1588">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1589">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1589">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="T:System.Diagnostics.ProcessThread" />
        <altmember cref="P:System.Diagnostics.Process.BasePriority" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="26150-1590">如果适用，则将进程的名称格式化为字符串，并与父组件类型组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1590">Formats the process's name as a string, combined with the parent component type, if applicable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="26150-1591">
            <see cref="P:System.Diagnostics.Process.ProcessName" />，与基组件的 <see cref="M:System.Object.ToString" /> 返回值组合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1591">The <see cref="P:System.Diagnostics.Process.ProcessName" />, combined with the base component's <see cref="M:System.Object.ToString" /> return value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="26150-1592">以下示例启动记事本实例。</span><span class="sxs-lookup"><span data-stu-id="26150-1592">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="26150-1593">该示例然后检索并显示关联的进程的各种属性。</span><span class="sxs-lookup"><span data-stu-id="26150-1593">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="26150-1594">该示例检测时在进程退出，并显示进程的退出代码。</span><span class="sxs-lookup"><span data-stu-id="26150-1594">The example detects when the process exits, and displays the process's exit code.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-1595">Windows 98 不支持 <see cref="M:System.Diagnostics.Process.ToString" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1595">
              <see cref="M:System.Diagnostics.Process.ToString" /> is not supported on Windows 98.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1596">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1596">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1597">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1597">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="TotalProcessorTime">
      <MemberSignature Language="C#" Value="public TimeSpan TotalProcessorTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TotalProcessorTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.TotalProcessorTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalProcessorTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TotalProcessorTime { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of CPU time the process has used.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-1598">获取此进程的总的处理器时间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1598">Gets the total processor time for this process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-1599">
            <see cref="T:System.TimeSpan" />，它指示关联进程使用 CPU 的时间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1599">A <see cref="T:System.TimeSpan" /> that indicates the amount of time that the associated process has spent utilizing the CPU.</span>
          </span>
          <span data-ttu-id="26150-1600">此值是 <see cref="P:System.Diagnostics.Process.UserProcessorTime" /> 和 <see cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" /> 的和。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1600">This value is the sum of the <see cref="P:System.Diagnostics.Process.UserProcessorTime" /> and the <see cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="26150-1601">以下示例启动记事本实例。</span><span class="sxs-lookup"><span data-stu-id="26150-1601">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="26150-1602">该示例然后检索并显示关联的进程的各种属性。</span><span class="sxs-lookup"><span data-stu-id="26150-1602">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="26150-1603">该示例检测时在进程退出，并显示进程的退出代码。</span><span class="sxs-lookup"><span data-stu-id="26150-1603">The example detects when the process exits, and displays the process's exit code.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-1604">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1604">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="26150-1605">你正试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.TotalProcessorTime" /> 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1605">You are attempting to access the <see cref="P:System.Diagnostics.Process.TotalProcessorTime" /> property for a process that is running on a remote computer.</span>
          </span>
          <span data-ttu-id="26150-1606">此属性仅可用于本地计算机上运行的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1606">This property is available only for processes that are running on the local computer.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1607">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1607">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1608">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1608">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.UserProcessorTime" />
        <altmember cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" />
      </Docs>
    </Member>
    <Member MemberName="UserProcessorTime">
      <MemberSignature Language="C#" Value="public TimeSpan UserProcessorTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan UserProcessorTime" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.UserProcessorTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserProcessorTime As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan UserProcessorTime { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of CPU time the process spent outside the operating system core.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-1609">获取此进程的用户处理器时间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1609">Gets the user processor time for this process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-1610">
            <see cref="T:System.TimeSpan" />，它指示关联进程在该进程的应用程序部分内(而不是在操作系统内核中)运行代码所用的时间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1610">A <see cref="T:System.TimeSpan" /> that indicates the amount of time that the associated process has spent running code inside the application portion of the process (not inside the operating system core).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="26150-1611">以下示例启动记事本实例。</span><span class="sxs-lookup"><span data-stu-id="26150-1611">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="26150-1612">该示例然后检索并显示关联的进程的各种属性。</span><span class="sxs-lookup"><span data-stu-id="26150-1612">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="26150-1613">该示例检测时在进程退出，并显示进程的退出代码。</span><span class="sxs-lookup"><span data-stu-id="26150-1613">The example detects when the process exits, and displays the process's exit code.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-1614">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1614">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="26150-1615">你正试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.UserProcessorTime" /> 属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1615">You are attempting to access the <see cref="P:System.Diagnostics.Process.UserProcessorTime" /> property for a process that is running on a remote computer.</span>
          </span>
          <span data-ttu-id="26150-1616">此属性仅可用于本地计算机上运行的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1616">This property is available only for processes that are running on the local computer.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1617">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1617">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1618">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1618">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.UserProcessorTime" />
        <altmember cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" />
      </Docs>
    </Member>
    <Member MemberName="VirtualMemorySize">
      <MemberSignature Language="C#" Value="public int VirtualMemorySize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VirtualMemorySize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.VirtualMemorySize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VirtualMemorySize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int VirtualMemorySize { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of virtual memory currently used for this process.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use VirtualMemorySize64")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-1619">获取进程的虚拟内存大小（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1619">Gets the size of the process's virtual memory, in bytes.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-1620">关联进程请求的虚拟内存量(以字节为单位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1620">The amount of virtual memory, in bytes, that the associated process has requested.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-1621">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1621">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1622">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1622">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1623">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1623">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.VirtualMemorySize64" />
        <altmember cref="P:System.Diagnostics.Process.PeakVirtualMemorySize64" />
      </Docs>
    </Member>
    <Member MemberName="VirtualMemorySize64">
      <MemberSignature Language="C#" Value="public long VirtualMemorySize64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 VirtualMemorySize64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.VirtualMemorySize64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VirtualMemorySize64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long VirtualMemorySize64 { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of virtual memory currently used for this process.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-1624">获取为关联进程分配的虚拟内存量（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1624">Gets the amount of the virtual memory, in bytes, allocated for the associated process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-1625">为关联进程分配的虚拟内存量(以字节为单位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1625">The amount of virtual memory, in bytes, allocated for the associated process.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-1626">返回此属性的值表示使用的过程中，以字节为单位的虚拟内存的当前大小。</span><span class="sxs-lookup"><span data-stu-id="26150-1626">The value returned by this property represents the current size of virtual memory used by the process, in bytes.</span></span> <span data-ttu-id="26150-1627">操作系统将映射到页加载在物理内存中，或存储在磁盘上的虚拟内存分页文件的页面的每个进程的虚拟地址空间。</span><span class="sxs-lookup"><span data-stu-id="26150-1627">The operating system maps the virtual address space for each process either to pages loaded in physical memory, or to pages stored in the virtual memory paging file on disk.</span></span>  
  
 <span data-ttu-id="26150-1628">此属性可以用于监视与 32 位处理器或 64 位处理器的计算机上的内存使用情况。</span><span class="sxs-lookup"><span data-stu-id="26150-1628">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="26150-1629">属性值等于**虚拟字节**进程的性能计数器。</span><span class="sxs-lookup"><span data-stu-id="26150-1629">The property value is equivalent to the **Virtual Bytes** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-1630">下面的代码示例启动记事本应用程序的一个实例。</span><span class="sxs-lookup"><span data-stu-id="26150-1630">The following code example starts an instance of the Notepad application.</span></span> <span data-ttu-id="26150-1631">该示例然后检索并显示关联的进程的各种属性。</span><span class="sxs-lookup"><span data-stu-id="26150-1631">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="26150-1632">该示例检测时在进程退出，并显示其退出代码，峰值内存统计信息。</span><span class="sxs-lookup"><span data-stu-id="26150-1632">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-1633">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1633">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1634">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1634">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1635">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1635">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.PeakVirtualMemorySize64" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitForExit">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="26150-1636">设置等待关联进程退出的时间段，并在该段时间结束前或该进程退出前，阻止当前线程执行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1636">Sets the period of time to wait for the associated process to exit, and blocks the current thread of execution until the time has elapsed or the process has exited.</span>
          </span>
          <span data-ttu-id="26150-1637">若要避免妨碍当前线程，请使用 <see cref="E:System.Diagnostics.Process.Exited" /> 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1637">To avoid blocking the current thread, use the <see cref="E:System.Diagnostics.Process.Exited" /> event.</span>
          </span>
          <span data-ttu-id="26150-1638">有关代码示例，请参阅 <see cref="P:System.Diagnostics.Process.StandardError" /> 和 <see cref="P:System.Diagnostics.Process.ExitCode" /> 属性参考页。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1638">For code examples, see the <see cref="P:System.Diagnostics.Process.StandardError" /> and the <see cref="P:System.Diagnostics.Process.ExitCode" /> property reference pages.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitForExit">
      <MemberSignature Language="C#" Value="public void WaitForExit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WaitForExit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.WaitForExit" />
      <MemberSignature Language="VB.NET" Value="Public Sub WaitForExit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WaitForExit();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="26150-1639">指示 <see cref="T:System.Diagnostics.Process" /> 组件无限期地等待关联进程退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1639">Instructs the <see cref="T:System.Diagnostics.Process" /> component to wait indefinitely for the associated process to exit.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-1640"><xref:System.Diagnostics.Process.WaitForExit> 使当前线程等待，直到在关联的进程终止。</span><span class="sxs-lookup"><span data-stu-id="26150-1640"><xref:System.Diagnostics.Process.WaitForExit> makes the current thread wait until the associated process terminates.</span></span>  <span data-ttu-id="26150-1641">过程调用的所有其他方法后，应调用它。</span><span class="sxs-lookup"><span data-stu-id="26150-1641">It should be called after all other methods are called on the process.</span></span> <span data-ttu-id="26150-1642">若要避免妨碍当前线程，请使用 <xref:System.Diagnostics.Process.Exited> 事件。</span><span class="sxs-lookup"><span data-stu-id="26150-1642">To avoid blocking the current thread, use the <xref:System.Diagnostics.Process.Exited> event.</span></span>  
  
 <span data-ttu-id="26150-1643">此方法指示<xref:System.Diagnostics.Process>组件等待无限进程和事件处理程序退出的时间量。</span><span class="sxs-lookup"><span data-stu-id="26150-1643">This method instructs the <xref:System.Diagnostics.Process> component to wait an infinite amount of time for the process and event handlers to exit.</span></span> <span data-ttu-id="26150-1644">这会导致应用程序停止响应。</span><span class="sxs-lookup"><span data-stu-id="26150-1644">This can cause an application to stop responding.</span></span> <span data-ttu-id="26150-1645">例如，如果你调用<xref:System.Diagnostics.Process.CloseMainWindow%2A>对于具有用户界面的进程，对操作系统的请求，终止关联的进程可能不会处理如果进程被编写为从来不用输入其消息循环。</span><span class="sxs-lookup"><span data-stu-id="26150-1645">For example, if you call <xref:System.Diagnostics.Process.CloseMainWindow%2A> for a process that has a user interface, the request to the operating system to terminate the associated process might not be handled if the process is written to never enter its message loop.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-1646">在[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]及早期版本、<xref:System.Diagnostics.Process.WaitForExit>重载会等待<xref:System.Int32.MaxValue>毫秒 （大约 24 天），并不是无限期。</span><span class="sxs-lookup"><span data-stu-id="26150-1646">In the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] and earlier versions, the <xref:System.Diagnostics.Process.WaitForExit> overload waited for <xref:System.Int32.MaxValue> milliseconds (approximately 24 days), not indefinitely.</span></span> <span data-ttu-id="26150-1647">此外，以前的版本不会等待事件处理程序，以退出如果完整<xref:System.Int32.MaxValue>时间已达到。</span><span class="sxs-lookup"><span data-stu-id="26150-1647">Also, previous versions did not wait for the event handlers to exit if the full <xref:System.Int32.MaxValue> time was reached.</span></span>  
  
 <span data-ttu-id="26150-1648">此重载可确保所有处理均已都完成，包括的重定向的标准输出的异步事件处理。</span><span class="sxs-lookup"><span data-stu-id="26150-1648">This overload ensures that all processing has been completed, including the handling of asynchronous events for redirected standard output.</span></span> <span data-ttu-id="26150-1649">在调用后，应使用此重载<xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29>重载时标准输出已被重定向到异步事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="26150-1649">You should use this overload after a call to the <xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29> overload when standard output has been redirected to asynchronous event handlers.</span></span>  
  
 <span data-ttu-id="26150-1650">当关联的进程退出 （即，当它关闭的情况下通过操作系统通过正常或不正常终止） 时，系统存储过程的管理信息，并返回到调用一样组件<xref:System.Diagnostics.Process.WaitForExit>。</span><span class="sxs-lookup"><span data-stu-id="26150-1650">When an associated process exits (that is, when it is shut down by the operation system through a normal or abnormal termination), the system stores administrative information about the process and returns to the component that had called <xref:System.Diagnostics.Process.WaitForExit>.</span></span> <span data-ttu-id="26150-1651"><xref:System.Diagnostics.Process>组件然后可以访问的信息，其中包括<xref:System.Diagnostics.Process.ExitTime%2A>，通过使用<xref:System.Diagnostics.Process.Handle%2A>已退出进程。</span><span class="sxs-lookup"><span data-stu-id="26150-1651">The <xref:System.Diagnostics.Process> component can then access the information, which includes the <xref:System.Diagnostics.Process.ExitTime%2A>, by using the <xref:System.Diagnostics.Process.Handle%2A> to the exited process.</span></span>  
  
 <span data-ttu-id="26150-1652">关联的进程已退出，因为<xref:System.Diagnostics.Process.Handle%2A>组件属性不再指向现有进程资源。</span><span class="sxs-lookup"><span data-stu-id="26150-1652">Because the associated process has exited, the <xref:System.Diagnostics.Process.Handle%2A> property of the component no longer points to an existing process resource.</span></span> <span data-ttu-id="26150-1653">相反，句柄仅用于访问有关的进程资源的操作系统的信息。</span><span class="sxs-lookup"><span data-stu-id="26150-1653">Instead, the handle can be used only to access the operating system's information about the process resource.</span></span> <span data-ttu-id="26150-1654">系统是不通过已发布的已退出进程的句柄感知<xref:System.Diagnostics.Process>组件，因此它会保留<xref:System.Diagnostics.Process.ExitTime%2A>和<xref:System.Diagnostics.Process.Handle%2A>之前的内存中的信息<xref:System.Diagnostics.Process>组件明确释放这些资源。</span><span class="sxs-lookup"><span data-stu-id="26150-1654">The system is aware of handles to exited processes that have not been released by <xref:System.Diagnostics.Process> components, so it keeps the <xref:System.Diagnostics.Process.ExitTime%2A> and <xref:System.Diagnostics.Process.Handle%2A> information in memory until the <xref:System.Diagnostics.Process> component specifically frees the resources.</span></span> <span data-ttu-id="26150-1655">出于此原因，任何时候您调用<xref:System.Diagnostics.Process.Start%2A>为<xref:System.Diagnostics.Process>实例时，调用<xref:System.Diagnostics.Process.Close%2A>当关联的进程已终止并不再需要有关它的任何管理信息。</span><span class="sxs-lookup"><span data-stu-id="26150-1655">For this reason, any time you call <xref:System.Diagnostics.Process.Start%2A> for a <xref:System.Diagnostics.Process> instance, call <xref:System.Diagnostics.Process.Close%2A> when the associated process has terminated and you no longer need any administrative information about it.</span></span> <span data-ttu-id="26150-1656"><xref:System.Diagnostics.Process.Close%2A> 释放分配给已退出的进程的内存。</span><span class="sxs-lookup"><span data-stu-id="26150-1656"><xref:System.Diagnostics.Process.Close%2A> frees the memory allocated to the exited process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-1657">请参阅备注部分的<xref:System.Diagnostics.Process.StandardError%2A>属性参考页。</span><span class="sxs-lookup"><span data-stu-id="26150-1657">See the Remarks section of the <xref:System.Diagnostics.Process.StandardError%2A> property reference page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">
          <span data-ttu-id="26150-1658">无法访问等待设置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1658">The wait setting could not be accessed.</span>
          </span>
        </exception>
        <exception cref="T:System.SystemException">
          <span data-ttu-id="26150-1659">尚未设置进程 <see cref="P:System.Diagnostics.Process.Id" />，而且不存在可从其确定 <see cref="P:System.Diagnostics.Process.Id" /> 属性的 <see cref="P:System.Diagnostics.Process.Handle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1659">No process <see cref="P:System.Diagnostics.Process.Id" /> has been set, and a <see cref="P:System.Diagnostics.Process.Handle" /> from which the <see cref="P:System.Diagnostics.Process.Id" /> property can be determined does not exist.</span>
          </span>
          <span data-ttu-id="26150-1660">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1660">-or-</span>
          </span>
          <span data-ttu-id="26150-1661">没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1661">There is no process associated with this <see cref="T:System.Diagnostics.Process" /> object.</span>
          </span>
          <span data-ttu-id="26150-1662">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1662">-or-</span>
          </span>
          <span data-ttu-id="26150-1663">你正尝试为远程计算机上运行的进程调用 <see cref="M:System.Diagnostics.Process.WaitForExit" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1663">You are attempting to call <see cref="M:System.Diagnostics.Process.WaitForExit" /> for a process that is running on a remote computer.</span>
          </span>
          <span data-ttu-id="26150-1664">此方法仅对本地计算机上运行的进程可用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1664">This method is available only for processes that are running on the local computer.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1665">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1665">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1666">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1666">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
        <altmember cref="P:System.Diagnostics.Process.Handle" />
        <altmember cref="P:System.Diagnostics.Process.ExitTime" />
        <altmember cref="P:System.Diagnostics.Process.EnableRaisingEvents" />
        <altmember cref="P:System.Diagnostics.Process.HasExited" />
        <altmember cref="E:System.Diagnostics.Process.Exited" />
      </Docs>
    </Member>
    <Member MemberName="WaitForExit">
      <MemberSignature Language="C#" Value="public bool WaitForExit (int milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool WaitForExit(int32 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.WaitForExit(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForExit (milliseconds As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForExit(int milliseconds);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="milliseconds">
          <span data-ttu-id="26150-1667">等待关联进程退出的时间(以毫秒为单位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1667">The amount of time, in milliseconds, to wait for the associated process to exit.</span>
          </span>
          <span data-ttu-id="26150-1668">最大值为 32 位整数的最大可能值，这对于操作系统而言表示无限大。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1668">The maximum is the largest possible value of a 32-bit integer, which represents infinity to the operating system.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="26150-1669">指示 <see cref="T:System.Diagnostics.Process" /> 组件在指定的毫秒数内等待关联进程退出。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1669">Instructs the <see cref="T:System.Diagnostics.Process" /> component to wait the specified number of milliseconds for the associated process to exit.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="26150-1670">如果关联进程已退出，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1670">
              <see langword="true" /> if the associated process has exited; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-1671"><xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29> 使当前线程等待，直到在关联的进程终止。</span><span class="sxs-lookup"><span data-stu-id="26150-1671"><xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29> makes the current thread wait until the associated process terminates.</span></span> <span data-ttu-id="26150-1672">过程调用的所有其他方法后，应调用它。</span><span class="sxs-lookup"><span data-stu-id="26150-1672">It should be called after all other methods are called on the process.</span></span> <span data-ttu-id="26150-1673">若要避免妨碍当前线程，请使用 <xref:System.Diagnostics.Process.Exited> 事件。</span><span class="sxs-lookup"><span data-stu-id="26150-1673">To avoid blocking the current thread, use the <xref:System.Diagnostics.Process.Exited> event.</span></span>  
  
 <span data-ttu-id="26150-1674">此方法指示<xref:System.Diagnostics.Process>组件等待有限进程退出的时间量。</span><span class="sxs-lookup"><span data-stu-id="26150-1674">This method instructs the <xref:System.Diagnostics.Process> component to wait a finite amount of time for the process to exit.</span></span> <span data-ttu-id="26150-1675">如果终止该请求被拒绝，因为，关联的进程不退出的时间间隔结束`false`被返回到调用的过程。</span><span class="sxs-lookup"><span data-stu-id="26150-1675">If the associated process does not exit by the end of the interval because the request to terminate is denied, `false` is returned to the calling procedure.</span></span> <span data-ttu-id="26150-1676">你可以指定<xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType>为`milliseconds`，和<xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29?displayProperty=nameWithType>将的行为相同<xref:System.Diagnostics.Process.WaitForExit>重载。</span><span class="sxs-lookup"><span data-stu-id="26150-1676">You can specify <xref:System.Threading.Timeout.Infinite?displayProperty=nameWithType> for `milliseconds`, and <xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29?displayProperty=nameWithType> will behave the same as the <xref:System.Diagnostics.Process.WaitForExit> overload.</span></span> <span data-ttu-id="26150-1677">如果向方法传递 0 （零），它将返回`true`仅当已经退出进程; 否则，它立即返回`false`。</span><span class="sxs-lookup"><span data-stu-id="26150-1677">If you pass 0 (zero) to the method, it returns `true` only if the process has already exited; otherwise, it immediately returns `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="26150-1678">在[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]和早期版本中，如果`milliseconds`是-1，<xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29>重载会等待<xref:System.Int32.MaxValue>毫秒 （大约 24 天），并不是无限期。</span><span class="sxs-lookup"><span data-stu-id="26150-1678">In the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] and earlier versions, if `milliseconds` was -1, the <xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29> overload waited for <xref:System.Int32.MaxValue> milliseconds (approximately 24 days), not indefinitely.</span></span>  
  
 <span data-ttu-id="26150-1679">当已重标准输出定向到异步事件处理程序中时，有可能，输出处理还未完成此方法返回时。</span><span class="sxs-lookup"><span data-stu-id="26150-1679">When standard output has been redirected to asynchronous event handlers, it is possible that output processing will not have completed when this method returns.</span></span> <span data-ttu-id="26150-1680">若要确保已完成异步事件处理，调用<xref:System.Diagnostics.Process.WaitForExit>接收后不接受任何参数的重载`true`从此重载。</span><span class="sxs-lookup"><span data-stu-id="26150-1680">To ensure that asynchronous event handling has been completed, call the <xref:System.Diagnostics.Process.WaitForExit> overload that takes no parameter after receiving a `true` from this overload.</span></span> <span data-ttu-id="26150-1681">为了帮助确保<xref:System.Diagnostics.Process.Exited>在 Windows 窗体应用程序中正确处理事件，请将设置<xref:System.Diagnostics.Process.SynchronizingObject%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="26150-1681">To help ensure that the <xref:System.Diagnostics.Process.Exited> event is handled correctly in Windows Forms applications, set the <xref:System.Diagnostics.Process.SynchronizingObject%2A> property.</span></span>  
  
 <span data-ttu-id="26150-1682">关联的进程的退出时 （正通过正常或异常终止操作系统关闭） 时，系统存储过程的管理信息并返回到调用一样组件<xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29>。</span><span class="sxs-lookup"><span data-stu-id="26150-1682">When an associated process exits (is shut down by the operating system through a normal or abnormal termination), the system stores administrative information about the process and returns to the component that had called <xref:System.Diagnostics.Process.WaitForExit%28System.Int32%29>.</span></span> <span data-ttu-id="26150-1683"><xref:System.Diagnostics.Process>组件然后可以访问的信息，其中包括<xref:System.Diagnostics.Process.ExitTime%2A>，通过使用<xref:System.Diagnostics.Process.Handle%2A>已退出进程。</span><span class="sxs-lookup"><span data-stu-id="26150-1683">The <xref:System.Diagnostics.Process> component can then access the information, which includes the <xref:System.Diagnostics.Process.ExitTime%2A>, by using the <xref:System.Diagnostics.Process.Handle%2A> to the exited process.</span></span>  
  
 <span data-ttu-id="26150-1684">关联的进程已退出，因为<xref:System.Diagnostics.Process.Handle%2A>组件属性不再指向现有进程资源。</span><span class="sxs-lookup"><span data-stu-id="26150-1684">Because the associated process has exited, the <xref:System.Diagnostics.Process.Handle%2A> property of the component no longer points to an existing process resource.</span></span> <span data-ttu-id="26150-1685">相反，句柄仅用于访问有关的进程资源的操作系统的信息。</span><span class="sxs-lookup"><span data-stu-id="26150-1685">Instead, the handle can be used only to access the operating system's information about the process resource.</span></span> <span data-ttu-id="26150-1686">系统是不通过已发布的已退出进程的句柄感知<xref:System.Diagnostics.Process>组件，因此它会保留<xref:System.Diagnostics.Process.ExitTime%2A>和<xref:System.Diagnostics.Process.Handle%2A>之前的内存中的信息<xref:System.Diagnostics.Process>组件明确释放这些资源。</span><span class="sxs-lookup"><span data-stu-id="26150-1686">The system is aware of handles to exited processes that have not been released by <xref:System.Diagnostics.Process> components, so it keeps the <xref:System.Diagnostics.Process.ExitTime%2A> and <xref:System.Diagnostics.Process.Handle%2A> information in memory until the <xref:System.Diagnostics.Process> component specifically frees the resources.</span></span> <span data-ttu-id="26150-1687">出于此原因，任何时候您调用<xref:System.Diagnostics.Process.Start%2A>为<xref:System.Diagnostics.Process>实例时，调用<xref:System.Diagnostics.Process.Close%2A>当关联的进程已终止并不再需要有关它的任何管理信息。</span><span class="sxs-lookup"><span data-stu-id="26150-1687">For this reason, any time you call <xref:System.Diagnostics.Process.Start%2A> for a <xref:System.Diagnostics.Process> instance, call <xref:System.Diagnostics.Process.Close%2A> when the associated process has terminated and you no longer need any administrative information about it.</span></span> <span data-ttu-id="26150-1688"><xref:System.Diagnostics.Process.Close%2A> 释放分配给已退出的进程的内存。</span><span class="sxs-lookup"><span data-stu-id="26150-1688"><xref:System.Diagnostics.Process.Close%2A> frees the memory allocated to the exited process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-1689">请参阅的代码示例<xref:System.Diagnostics.Process.ExitCode%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="26150-1689">See the code example for the <xref:System.Diagnostics.Process.ExitCode%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">
          <span data-ttu-id="26150-1690">无法访问等待设置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1690">The wait setting could not be accessed.</span>
          </span>
        </exception>
        <exception cref="T:System.SystemException">
          <span data-ttu-id="26150-1691">尚未设置进程 <see cref="P:System.Diagnostics.Process.Id" />，而且不存在可从其确定 <see cref="P:System.Diagnostics.Process.Id" /> 属性的 <see cref="P:System.Diagnostics.Process.Handle" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1691">No process <see cref="P:System.Diagnostics.Process.Id" /> has been set, and a <see cref="P:System.Diagnostics.Process.Handle" /> from which the <see cref="P:System.Diagnostics.Process.Id" /> property can be determined does not exist.</span>
          </span>
          <span data-ttu-id="26150-1692">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1692">-or-</span>
          </span>
          <span data-ttu-id="26150-1693">没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1693">There is no process associated with this <see cref="T:System.Diagnostics.Process" /> object.</span>
          </span>
          <span data-ttu-id="26150-1694">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1694">-or-</span>
          </span>
          <span data-ttu-id="26150-1695">你正尝试为远程计算机上运行的进程调用 <see cref="M:System.Diagnostics.Process.WaitForExit(System.Int32)" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1695">You are attempting to call <see cref="M:System.Diagnostics.Process.WaitForExit(System.Int32)" /> for a process that is running on a remote computer.</span>
          </span>
          <span data-ttu-id="26150-1696">此方法仅对本地计算机上运行的进程可用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1696">This method is available only for processes that are running on the local computer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="26150-1697">
            <paramref name="milliseconds" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1697">
              <paramref name="milliseconds" /> is a negative number other than -1, which represents an infinite time-out.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1698">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1698">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1699">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1699">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
        <altmember cref="M:System.Diagnostics.Process.Kill" />
        <altmember cref="P:System.Diagnostics.Process.Handle" />
        <altmember cref="P:System.Diagnostics.Process.ExitTime" />
        <altmember cref="P:System.Diagnostics.Process.EnableRaisingEvents" />
        <altmember cref="P:System.Diagnostics.Process.HasExited" />
        <altmember cref="E:System.Diagnostics.Process.Exited" />
        <altmember cref="P:System.Diagnostics.Process.SynchronizingObject" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WaitForInputIdle">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="26150-1700">使 <see cref="T:System.Diagnostics.Process" /> 组件等待关联进程进入空闲状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1700">Causes the <see cref="T:System.Diagnostics.Process" /> component to wait for the associated process to enter an idle state.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WaitForInputIdle">
      <MemberSignature Language="C#" Value="public bool WaitForInputIdle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool WaitForInputIdle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.WaitForInputIdle" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForInputIdle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForInputIdle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="26150-1701">使 <see cref="T:System.Diagnostics.Process" /> 组件无限期地等待关联进程进入空闲状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1701">Causes the <see cref="T:System.Diagnostics.Process" /> component to wait indefinitely for the associated process to enter an idle state.</span>
          </span>
          <span data-ttu-id="26150-1702">此重载仅适用于具有用户界面并因此具有消息循环的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1702">This overload applies only to processes with a user interface and, therefore, a message loop.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="26150-1703">如果关联进程已经达到空闲状态，则为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1703">
              <see langword="true" /> if the associated process has reached an idle state.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-1704">使用<xref:System.Diagnostics.Process.WaitForInputIdle>以强制应用程序消息循环已返回到空闲状态等待处理。</span><span class="sxs-lookup"><span data-stu-id="26150-1704">Use <xref:System.Diagnostics.Process.WaitForInputIdle> to force the processing of your application to wait until the message loop has returned to the idle state.</span></span> <span data-ttu-id="26150-1705">用户界面的进程执行时，其消息循环将执行每次操作系统的 Windows 消息发送到进程。</span><span class="sxs-lookup"><span data-stu-id="26150-1705">When a process with a user interface is executing, its message loop executes every time a Windows message is sent to the process by the operating system.</span></span> <span data-ttu-id="26150-1706">然后，该进程返回到消息循环。</span><span class="sxs-lookup"><span data-stu-id="26150-1706">The process then returns to the message loop.</span></span> <span data-ttu-id="26150-1707">说进程时它正在等待消息的消息循环内处于空闲状态。</span><span class="sxs-lookup"><span data-stu-id="26150-1707">A process is said to be in an idle state when it is waiting for messages inside of a message loop.</span></span> <span data-ttu-id="26150-1708">此状态非常有用，例如，当你的应用程序需要等待启动的进程以完成创建其主窗口之前与该窗口的应用程序通信时。</span><span class="sxs-lookup"><span data-stu-id="26150-1708">This state is useful, for example, when your application needs to wait for a starting process to finish creating its main window before the application communicates with that window.</span></span>  
  
 <span data-ttu-id="26150-1709">如果进程不具有消息循环，<xref:System.Diagnostics.Process.WaitForInputIdle>引发<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="26150-1709">If a process does not have a message loop, <xref:System.Diagnostics.Process.WaitForInputIdle> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="26150-1710"><xref:System.Diagnostics.Process.WaitForInputIdle>重载指示<xref:System.Diagnostics.Process>组件无限期地等待进程变为空闲状态消息循环中。</span><span class="sxs-lookup"><span data-stu-id="26150-1710">The <xref:System.Diagnostics.Process.WaitForInputIdle> overload instructs the <xref:System.Diagnostics.Process> component to wait indefinitely for the process to become idle in the message loop.</span></span> <span data-ttu-id="26150-1711">此指令可能会导致应用程序停止响应。</span><span class="sxs-lookup"><span data-stu-id="26150-1711">This instruction can cause an application to stop responding.</span></span> <span data-ttu-id="26150-1712">例如，如果过程始终写入其消息循环立即退出，如下所示的代码片段`while(true)`。</span><span class="sxs-lookup"><span data-stu-id="26150-1712">For example, if the process is written to always exit its message loop immediately, as in the code fragment `while(true)`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-1713">进程不具有图形界面。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1713">The process does not have a graphical interface.</span>
          </span>
          <span data-ttu-id="26150-1714">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1714">-or-</span>
          </span>
          <span data-ttu-id="26150-1715">发生未知错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1715">An unknown error occurred.</span>
          </span>
          <span data-ttu-id="26150-1716">进程无法进入空闲状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1716">The process failed to enter an idle state.</span>
          </span>
          <span data-ttu-id="26150-1717">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1717">-or-</span>
          </span>
          <span data-ttu-id="26150-1718">已经退出该进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1718">The process has already exited.</span>
          </span>
          <span data-ttu-id="26150-1719">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1719">-or-</span>
          </span>
          <span data-ttu-id="26150-1720">没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1720">No process is associated with this <see cref="T:System.Diagnostics.Process" /> object.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1721">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1721">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1722">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1722">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Diagnostics.Process.Start" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
      </Docs>
    </Member>
    <Member MemberName="WaitForInputIdle">
      <MemberSignature Language="C#" Value="public bool WaitForInputIdle (int milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool WaitForInputIdle(int32 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForInputIdle (milliseconds As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForInputIdle(int milliseconds);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="milliseconds">
          <span data-ttu-id="26150-1723">1 到 <see cref="F:System.Int32.MaxValue" /> 的值以毫秒为单位指定了等待关联进程变为空闲状态的时间量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1723">A value of 1 to <see cref="F:System.Int32.MaxValue" /> that specifies the amount of time, in milliseconds, to wait for the associated process to become idle.</span>
          </span>
          <span data-ttu-id="26150-1724">0 值指定立即返回，而 -1 值则指定无限期等待。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1724">A value of 0 specifies an immediate return, and a value of -1 specifies an infinite wait.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="26150-1725">使 <see cref="T:System.Diagnostics.Process" /> 组件在指定的毫秒数内等待关联进程进入空闲状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1725">Causes the <see cref="T:System.Diagnostics.Process" /> component to wait the specified number of milliseconds for the associated process to enter an idle state.</span>
          </span>
          <span data-ttu-id="26150-1726">此重载仅适用于具有用户界面并因此具有消息循环的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1726">This overload applies only to processes with a user interface and, therefore, a message loop.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="26150-1727">如果关联进程已经达到空闲状态，则为 <see langword="true" />；否则，为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1727">
              <see langword="true" /> if the associated process has reached an idle state; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-1728">使用<xref:System.Diagnostics.Process.WaitForInputIdle%28System.Int32%29>以强制应用程序消息循环已返回到空闲状态等待处理。</span><span class="sxs-lookup"><span data-stu-id="26150-1728">Use <xref:System.Diagnostics.Process.WaitForInputIdle%28System.Int32%29> to force the processing of your application to wait until the message loop has returned to the idle state.</span></span> <span data-ttu-id="26150-1729">用户界面的进程执行时，其消息循环将执行每次操作系统的 Windows 消息发送到进程。</span><span class="sxs-lookup"><span data-stu-id="26150-1729">When a process with a user interface is executing, its message loop executes every time a Windows message is sent to the process by the operating system.</span></span> <span data-ttu-id="26150-1730">然后，该进程返回到消息循环。</span><span class="sxs-lookup"><span data-stu-id="26150-1730">The process then returns to the message loop.</span></span> <span data-ttu-id="26150-1731">说进程时它正在等待消息的消息循环内处于空闲状态。</span><span class="sxs-lookup"><span data-stu-id="26150-1731">A process is said to be in an idle state when it is waiting for messages inside of a message loop.</span></span> <span data-ttu-id="26150-1732">此状态非常有用，例如，当你的应用程序需要等待启动的进程以完成创建其主窗口之前与该窗口的应用程序通信时。</span><span class="sxs-lookup"><span data-stu-id="26150-1732">This state is useful, for example, when your application needs to wait for a starting process to finish creating its main window before the application communicates with that window.</span></span>  
  
 <span data-ttu-id="26150-1733">如果进程不具有消息循环，<xref:System.Diagnostics.Process.WaitForInputIdle%28System.Int32%29>引发<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="26150-1733">If a process does not have a message loop, <xref:System.Diagnostics.Process.WaitForInputIdle%28System.Int32%29> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="26150-1734"><xref:System.Diagnostics.Process.WaitForInputIdle%28System.Int32%29>重载指示<xref:System.Diagnostics.Process>组件等待有限的进程变为空闲状态消息循环中的时间量。</span><span class="sxs-lookup"><span data-stu-id="26150-1734">The <xref:System.Diagnostics.Process.WaitForInputIdle%28System.Int32%29> overload instructs the <xref:System.Diagnostics.Process> component to wait a finite amount of time for the process to become idle in the message loop.</span></span> <span data-ttu-id="26150-1735">如果关联的进程不具有进入空闲状态的时间间隔结束循环仍在处理消息，因为`false`被返回到调用的过程。</span><span class="sxs-lookup"><span data-stu-id="26150-1735">If the associated process has not become idle by the end of the interval because the loop is still processing messages, `false` is returned to the calling procedure.</span></span>  
  
 <span data-ttu-id="26150-1736">有关处理事件的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。</span><span class="sxs-lookup"><span data-stu-id="26150-1736">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="26150-1737">进程不具有图形界面。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1737">The process does not have a graphical interface.</span>
          </span>
          <span data-ttu-id="26150-1738">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1738">-or-</span>
          </span>
          <span data-ttu-id="26150-1739">发生未知错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1739">An unknown error occurred.</span>
          </span>
          <span data-ttu-id="26150-1740">进程无法进入空闲状态。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1740">The process failed to enter an idle state.</span>
          </span>
          <span data-ttu-id="26150-1741">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1741">-or-</span>
          </span>
          <span data-ttu-id="26150-1742">已经退出该进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1742">The process has already exited.</span>
          </span>
          <span data-ttu-id="26150-1743">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1743">-or-</span>
          </span>
          <span data-ttu-id="26150-1744">没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1744">No process is associated with this <see cref="T:System.Diagnostics.Process" /> object.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1745">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1745">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1746">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1746">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="M:System.Diagnostics.Process.Start" />
        <altmember cref="M:System.Diagnostics.Process.CloseMainWindow" />
      </Docs>
    </Member>
    <Member MemberName="WorkingSet">
      <MemberSignature Language="C#" Value="public int WorkingSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WorkingSet" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.WorkingSet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WorkingSet As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WorkingSet { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of physical memory currently used for this process.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use WorkingSet64")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-1747">获取关联进程的物理内存使用量（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1747">Gets the associated process's physical memory usage, in bytes.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-1748">关联进程当前使用的物理内存总量(以字节为单位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1748">The total amount of physical memory the associated process is using, in bytes.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-1749">返回此属性的值表示工作集内存使用的过程中，以字节为单位的当前大小。</span><span class="sxs-lookup"><span data-stu-id="26150-1749">The value returned by this property represents the current size of working set memory used by the process, in bytes.</span></span> <span data-ttu-id="26150-1750">进程工作集是物理 RAM 内存中的当前可见的进程的内存页的集合。</span><span class="sxs-lookup"><span data-stu-id="26150-1750">The working set of a process is the set of memory pages currently visible to the process in physical RAM memory.</span></span> <span data-ttu-id="26150-1751">这些页面为常驻性并且可用于应用程序使用而不会触发页面错误。</span><span class="sxs-lookup"><span data-stu-id="26150-1751">These pages are resident and available for an application to use without triggering a page fault.</span></span>  
  
 <span data-ttu-id="26150-1752">工作集包括共享和私有数据。</span><span class="sxs-lookup"><span data-stu-id="26150-1752">The working set includes both shared and private data.</span></span> <span data-ttu-id="26150-1753">共享的数据包括那些包含该进程执行，包括进程模块和系统库的所有说明的页。</span><span class="sxs-lookup"><span data-stu-id="26150-1753">The shared data includes the pages that contain all the instructions that the process executes, including the process modules and the system libraries.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-1754">以下示例启动记事本实例。</span><span class="sxs-lookup"><span data-stu-id="26150-1754">The following example starts an instance of Notepad.</span></span> <span data-ttu-id="26150-1755">该示例然后检索并显示关联的进程的各种属性。</span><span class="sxs-lookup"><span data-stu-id="26150-1755">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="26150-1756">该示例检测时在进程退出，并显示进程的退出代码。</span><span class="sxs-lookup"><span data-stu-id="26150-1756">The example detects when the process exits, and displays the process' exit code.</span></span>  
  
 [!code-cpp[process_sample#1](~/samples/snippets/cpp/VS_Snippets_CLR/process_sample/CPP/process_sample.cpp#1)]
 [!code-csharp[process_sample#1](~/samples/snippets/csharp/VS_Snippets_CLR/process_sample/CS/process_sample.cs#1)]
 [!code-vb[process_sample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/process_sample/VB/process_sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-1757">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1757">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1758">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1758">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1759">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1759">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.MinWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.MaxWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.PeakWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.PeakWorkingSet64" />
        <altmember cref="P:System.Diagnostics.Process.WorkingSet64" />
      </Docs>
    </Member>
    <Member MemberName="WorkingSet64">
      <MemberSignature Language="C#" Value="public long WorkingSet64 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 WorkingSet64" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Process.WorkingSet64" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WorkingSet64 As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long WorkingSet64 { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Process</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The amount of physical memory currently used for this process.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="26150-1760">获取为关联的进程分配的物理内存量（以字节为单位）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1760">Gets the amount of physical memory, in bytes, allocated for the associated process.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="26150-1761">为关的进程分配的物理内存量(以字节为单位)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1761">The amount of physical memory, in bytes, allocated for the associated process.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="26150-1762">返回此属性的值表示工作集内存使用的过程中，以字节为单位的当前大小。</span><span class="sxs-lookup"><span data-stu-id="26150-1762">The value returned by this property represents the current size of working set memory used by the process, in bytes.</span></span> <span data-ttu-id="26150-1763">进程工作集是物理 RAM 内存中的当前可见的进程的内存页的集合。</span><span class="sxs-lookup"><span data-stu-id="26150-1763">The working set of a process is the set of memory pages currently visible to the process in physical RAM memory.</span></span> <span data-ttu-id="26150-1764">这些页面为常驻性并且可用于应用程序使用而不会触发页面错误。</span><span class="sxs-lookup"><span data-stu-id="26150-1764">These pages are resident and available for an application to use without triggering a page fault.</span></span>  
  
 <span data-ttu-id="26150-1765">工作集包括共享和私有数据。</span><span class="sxs-lookup"><span data-stu-id="26150-1765">The working set includes both shared and private data.</span></span> <span data-ttu-id="26150-1766">共享的数据包括那些包含该进程执行，包括进程模块和系统库中的说明的所有说明的页。</span><span class="sxs-lookup"><span data-stu-id="26150-1766">The shared data includes the pages that contain all the instructions that the process executes, including instructions in the process modules and the system libraries.</span></span>  
  
 <span data-ttu-id="26150-1767">此属性可以用于监视与 32 位处理器或 64 位处理器的计算机上的内存使用情况。</span><span class="sxs-lookup"><span data-stu-id="26150-1767">This property can be used to monitor memory usage on computers with 32-bit processors or 64-bit processors.</span></span> <span data-ttu-id="26150-1768">属性值等于**工作集大小**进程的性能计数器。</span><span class="sxs-lookup"><span data-stu-id="26150-1768">The property value is equivalent to the **Working Set** performance counter for the process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="26150-1769">下面的代码示例启动记事本应用程序的一个实例。</span><span class="sxs-lookup"><span data-stu-id="26150-1769">The following code example starts an instance of the Notepad application.</span></span> <span data-ttu-id="26150-1770">该示例然后检索并显示关联的进程的各种属性。</span><span class="sxs-lookup"><span data-stu-id="26150-1770">The example then retrieves and displays various properties of the associated process.</span></span> <span data-ttu-id="26150-1771">该示例检测时在进程退出，并显示其退出代码，峰值内存统计信息。</span><span class="sxs-lookup"><span data-stu-id="26150-1771">The example detects when the process exits, and displays its exit code and peak memory statistics.</span></span>  
  
 [!code-cpp[Diag_Process_MemoryProperties64#1](~/samples/snippets/cpp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CPP/source.cpp#1)]
 [!code-csharp[Diag_Process_MemoryProperties64#1](~/samples/snippets/csharp/VS_Snippets_CLR/Diag_Process_MemoryProperties64/CS/source.cs#1)]
 [!code-vb[Diag_Process_MemoryProperties64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Diag_Process_MemoryProperties64/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <span data-ttu-id="26150-1772">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1772">The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="26150-1773">直接调用方的完全信任。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1773">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="26150-1774">此成员不能由部分信任的代码使用。</span>
          <span class="sxs-lookup">
            <span data-stu-id="26150-1774">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="P:System.Diagnostics.Process.MinWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.MaxWorkingSet" />
        <altmember cref="P:System.Diagnostics.Process.PeakWorkingSet64" />
      </Docs>
    </Member>
  </Members>
</Type>