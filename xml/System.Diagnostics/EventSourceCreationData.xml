<Type Name="EventSourceCreationData" FullName="System.Diagnostics.EventSourceCreationData">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="22f2dbe93f2e963c10ea8d98d4690040412dc5df" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51880643" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EventSourceCreationData" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventSourceCreationData extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventSourceCreationData" />
  <TypeSignature Language="VB.NET" Value="Public Class EventSourceCreationData" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventSourceCreationData" />
  <TypeSignature Language="F#" Value="type EventSourceCreationData = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示用于在本地或远程计算机上创建事件日志源的配置设置。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Diagnostics.EventSourceCreationData>类，以配置新的源向事件日志写入本地化的项。 不需要此类用于从事件日志中读取。  
  
 此类定义新的事件源和其关联的事件日志的配置设置。 关联的事件日志可以是本地计算机或远程计算机上。 若要在本地计算机上创建新的源为新的或现有的事件日志，请设置<xref:System.Diagnostics.EventSourceCreationData.LogName%2A>并<xref:System.Diagnostics.EventSourceCreationData.Source%2A>的属性<xref:System.Diagnostics.EventSourceCreationData>，并调用<xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType>方法。 此方法创建事件源中指定<xref:System.Diagnostics.EventSourceCreationData.Source%2A>它为事件日志中指定的属性和寄存器<xref:System.Diagnostics.EventSourceCreationData.LogName%2A>。 此行为是类似于使用<xref:System.Diagnostics.EventLogInstaller>类来注册事件日志的事件源。  
  
 使用<xref:System.Diagnostics.EventLog.WriteEvent%2A>和<xref:System.Diagnostics.EventLog.WriteEntry%2A>方法将事件写入到事件日志。 必须指定事件源写入事件;必须创建并写入与源的第一项之前配置的事件源。  
  
 在应用程序的安装过程中创建新的事件源。 这允许操作系统以刷新其注册的事件源的列表和它们的配置的时间。 如果操作系统没有刷新其事件源的列表，并且尝试写入新的源的事件写入操作将失败。 可以配置新的源使用<xref:System.Diagnostics.EventLogInstaller>，或使用<xref:System.Diagnostics.EventLog.CreateEventSource%2A>方法。 若要创建新的事件源的计算机上，必须具有管理权限。  
  
 可以创建现有事件日志或新的事件日志的事件源。 创建新的源为新的事件日志时，系统注册该日志的源，但直到第一个条目写入不创建该日志。  
  
 每个源只能写入到一个事件日志一次;但是，你的应用程序可以使用多个源写入多个事件日志。 例如，你的应用程序可能需要多个源配置为使用不同的事件日志或不同的资源文件。  
  
 若要更改现有源的配置详细信息，必须删除源，然后使用新的配置创建它。 如果其他应用程序或组件使用现有的源，请使用更新的配置，而无需删除现有源创建新的源。  
  
 为事件类别和消息字符串，可以使用本地化的资源注册事件源。 你的应用程序可以写入事件日志项使用资源标识符，而不指定实际的字符串。 事件查看器使用的资源标识符来查找并显示基于当前语言设置的本地化的资源文件中的相应字符串。 可以注册一个单独的文件的事件类别、 消息和参数插入字符串，也可以注册相同的资源文件，所有三种类型的字符串。 使用<xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>， <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>， <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>，和<xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>属性来配置要本地化的项写入事件日志的源。 如果你的应用程序直接将字符串值写入事件日志，您不需要设置这些属性。  
  
 要写入本地化的项还是要直接写入字符串，必须配置源。 <xref:System.Diagnostics.EventLog.WriteEntry%2A>方法直接写入事件日志写入给定的字符串; 它不使用可本地化的消息资源文件。 使用<xref:System.Diagnostics.EventLog.WriteEvent%2A>方法来写入事件时使用的本地化的消息资源文件。  
  
 如果你的应用程序将使用资源标识符和字符串值的条目写入，则必须注册两个单独的源。 例如，配置一个源的资源文件，以及如何将该源中的<xref:System.Diagnostics.EventLog.WriteEvent%2A>方法来编写使用资源标识符添加到事件日志条目。 然后创建不带资源文件的不同源和使用中的源<xref:System.Diagnostics.EventLog.WriteEntry%2A>方法将字符串直接写入事件日志使用的源。  
  
   
  
## Examples  
 下面的代码示例通过命令行参数设置的事件源的配置属性。 输入的参数指定事件源名称、 事件日志名称、 计算机名和事件消息资源文件。 代码示例验证的源不与现有事件源、 冲突，然后创建指定的事件日志的新事件源。  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#1)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#1)]
 [!code-vb[EventLog_EventSourceCreation_Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">用于调用的任何成员<see cref="T:System.Diagnostics.EventSourceCreationData" />以完全信任。 关联的枚举： <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
    <altmember cref="T:System.Diagnostics.EventLog" />
    <altmember cref="T:System.Diagnostics.EventLogInstaller" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSourceCreationData (string source, string logName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string source, string logName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventSourceCreationData.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (source As String, logName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSourceCreationData(System::String ^ source, System::String ^ logName);" />
      <MemberSignature Language="F#" Value="new System.Diagnostics.EventSourceCreationData : string * string -&gt; System.Diagnostics.EventSourceCreationData" Usage="new System.Diagnostics.EventSourceCreationData (source, logName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="logName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">要在事件日志中注册为项源的名称。</param>
        <param name="logName">要将来自源的项写入其中的日志的名称。</param>
        <summary>使用指定的事件源和事件日志名称对 <see cref="T:System.Diagnostics.EventSourceCreationData" /> 类的新实例进行初始化。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要向事件日志写入条目，必须首先创建事件日志的事件源。 若要注册新的源，初始化<xref:System.Diagnostics.EventSourceCreationData>实例时，配置应用程序，并调用的实例属性<xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType>方法。 注册了源后，可以从源使用编写条目<xref:System.Diagnostics.EventLog.WriteEvent%2A>或<xref:System.Diagnostics.EventLog.WriteEntry%2A>方法。  
  
 为事件类别和消息字符串，可以使用本地化的资源注册事件源。 你的应用程序可以写入事件日志项使用资源标识符，而不指定实际的字符串。 事件查看器使用的资源标识符来查找并显示基于当前语言设置的本地化的资源文件中的相应字符串。 可以注册一个单独的文件的事件类别、 消息和参数插入字符串，也可以注册相同的资源文件，所有三种类型的字符串。 使用<xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>， <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>， <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>，和<xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>属性来配置要本地化的项写入事件日志的源。 如果你的应用程序直接将字符串值写入事件日志，您不需要设置这些属性。  
  
 要写入本地化的项还是要直接写入字符串，必须配置源。 如果你的应用程序将使用资源标识符和字符串值的条目写入，则必须注册两个单独的源。 例如，配置一个源的资源文件，以及如何将该源中的<xref:System.Diagnostics.EventLog.WriteEvent%2A>方法来编写使用资源标识符添加到事件日志条目。 然后创建不带资源文件的不同源和使用中的源<xref:System.Diagnostics.EventLog.WriteEntry%2A>方法将字符串直接写入事件日志。  
  
 下表显示的初始属性值<xref:System.Diagnostics.EventSourceCreationData>。  
  
|Property|初始值|  
|--------------|-------------------|  
|<xref:System.Diagnostics.EventSourceCreationData.Source%2A>|`source` 参数。|  
|<xref:System.Diagnostics.EventSourceCreationData.LogName%2A>|`logName` 参数。|  
|<xref:System.Diagnostics.EventSourceCreationData.MachineName%2A>|在本地计算机 ("。")。|  
|<xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>|零|  
|<xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>|`null`（在 Visual Basic 中为 `Nothing`）。|  
|<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>|`null`（在 Visual Basic 中为 `Nothing`）。|  
|<xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>|`null`（在 Visual Basic 中为 `Nothing`）。|  
  
   
  
## Examples  
 下面的代码示例确定是否在事件源名为`SampleApplicationSource`在本地计算机上注册。 如果事件源不存在，该示例设置源的消息资源文件，并创建新的事件源。 最后，代码示例设置使用中的资源标识符值的事件日志的本地化的显示名称`DisplayNameMsgId`中的资源文件路径和`messageFile`。  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 代码示例使用下面的消息文本文件，内置的资源库 EventLogMsgs.dll。 消息文本文件是从其创建的消息资源文件的源。 消息文本文件定义的资源标识符和类别、 事件消息和参数插入字符串的文本。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于调用的任何成员<see cref="T:System.Diagnostics.EventSourceCreationData" />以完全信任。 关联的枚举： <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.Source" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.LogName" />
      </Docs>
    </Member>
    <Member MemberName="CategoryCount">
      <MemberSignature Language="C#" Value="public int CategoryCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CategoryCount" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CategoryCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryCount : int with get, set" Usage="System.Diagnostics.EventSourceCreationData.CategoryCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置类别资源文件中类别的数目。</summary>
        <value>类别资源文件中的类别的数目。 默认值为 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>和<xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>属性在写入事件时已本地化的类别字符串。 如果在写入事件时提供一个类别，事件查看器显示事件项的类别。 事件日志类别是应用程序定义的字符串，用于帮助筛选事件或事件提供进一步的信息。 例如，你的应用程序可以定义分隔不同类别的不同组件或不同的操作。  
  
 事件类别是可选的;如果你的应用程序不使用类别，则不要设置<xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>和<xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>属性。  
  
 有关如何定义事件消息和生成事件资源文件的详细信息，请参阅平台 SDK 文档中的"消息编译器"主题[ http://msdn.microsoft.com ](https://msdn.microsoft.com/)。  
  
   
  
## Examples  
 下面的代码示例确定是否在事件源名为`SampleApplicationSource`在本地计算机上注册。 如果事件源不存在，该示例设置源的消息资源文件，并创建新的事件源。 最后，代码示例设置使用中的资源标识符值的事件日志的本地化的显示名称`DisplayNameMsgId`中的资源文件路径和`messageFile`。  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 代码示例使用下面的消息文本文件，内置的资源库 EventLogMsgs.dll。 消息文本文件是从其创建的消息资源文件的源。 消息文本文件定义的资源标识符和类别、 事件消息和参数插入字符串的文本。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">该属性设置为负值或大于 <see cref="F:System.UInt16.MaxValue" /> 的值。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于调用的任何成员<see cref="T:System.Diagnostics.EventSourceCreationData" />以完全信任。 关联的枚举： <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryCount" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
      </Docs>
    </Member>
    <Member MemberName="CategoryResourceFile">
      <MemberSignature Language="C#" Value="public string CategoryResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CategoryResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property CategoryResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CategoryResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CategoryResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.CategoryResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置包含源的类别字符串的资源文件的路径。</summary>
        <value>类别资源文件的路径。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>和<xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>属性在写入事件时已本地化的类别字符串。 如果在写入事件时提供一个类别，事件查看器显示事件项的类别。 事件日志类别是应用程序定义的字符串，用于帮助筛选事件或事件提供进一步的信息。 例如，你的应用程序可以定义分隔不同类别的不同组件或不同的操作。  
  
 事件类别是可选的;如果你的应用程序不使用类别，则不要设置<xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>和<xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>属性。  
  
 有关如何定义事件消息和生成事件资源文件的详细信息，请参阅平台 SDK 文档中的"消息编译器"主题[ http://msdn.microsoft.com ](https://msdn.microsoft.com/)。  
  
   
  
## Examples  
 下面的代码示例确定是否在事件源名为`SampleApplicationSource`在本地计算机上注册。 如果事件源不存在，该示例设置源的消息资源文件，并创建新的事件源。 最后，代码示例设置使用中的资源标识符值的事件日志的本地化的显示名称`DisplayNameMsgId`中的资源文件路径和`messageFile`。  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 代码示例使用下面的消息文本文件，内置的资源库 EventLogMsgs.dll。 消息文本文件是从其创建的消息资源文件的源。 消息文本文件定义的资源标识符和类别、 事件消息和参数插入字符串的文本。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于调用的任何成员<see cref="T:System.Diagnostics.EventSourceCreationData" />以完全信任。 关联的枚举： <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.CategoryCount" />
        <altmember cref="P:System.Diagnostics.EventLogInstaller.CategoryResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="LogName">
      <MemberSignature Language="C#" Value="public string LogName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LogName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.LogName" />
      <MemberSignature Language="VB.NET" Value="Public Property LogName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LogName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LogName : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.LogName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置事件日志的名称，事件源要向该日志写入项。</summary>
        <value>事件日志的名称。 这可以是 Application、System 或一个自定义的日志名称。 默认值为“Application”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Diagnostics.EventSourceCreationData.LogName%2A>属性来标识你的应用程序使用新的源将条目写入事件日志。 事件日志可以是新的日志或现有的日志。 应用程序和服务应写入应用程序日志或自定义日志。 设备驱动程序应该写入系统日志。 如果未显式设置<xref:System.Diagnostics.EventSourceCreationData.LogName%2A>属性，默认为应用程序日志的事件日志。  
  
> [!NOTE]
>  安全日志是只读的。  
  
 若要针对新来源的现有的日志，设置<xref:System.Diagnostics.EventSourceCreationData.LogName%2A>属性设置为现有的事件日志名称。 若要创建新的事件日志的源，必须设置<xref:System.Diagnostics.EventSourceCreationData.LogName%2A>属性。 事件日志名称必须由可打印字符组成，且不得包含字符“*”、“?”或“\\”。 事件日志名称的前 8 个字符必须不同于指定的计算机上的事件日志的现有名称的前 8 个字符。  
  
 操作系统将事件日志存储为文件。 当你使用<xref:System.Diagnostics.EventLogInstaller>或<xref:System.Diagnostics.EventLog.CreateEventSource%2A>方法来创建新的事件日志关联的文件存储在指定计算机上的 %SystemRoot%\System32\Config 目录中。 通过追加的前 8 个字符设置的文件名称<xref:System.Diagnostics.EventSourceCreationData.LogName%2A>".evt"文件扩展名的属性。  
  
   
  
## Examples  
 下面的代码示例通过命令行参数设置的事件源的配置属性。 输入的参数指定事件源名称、 事件日志名称、 计算机名和事件消息资源文件。 此示例摘自一个更大的示例为提供<xref:System.Diagnostics.EventSourceCreationData>类。  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于调用的任何成员<see cref="T:System.Diagnostics.EventSourceCreationData" />以完全信任。 关联的枚举： <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.Log" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MachineName : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.MachineName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在其上注册事件源的计算机的名称。</summary>
        <value>在其上注册事件源的系统的名称。 默认为本地计算机 (".")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A>值不能为空字符串。 如果未显式设置的计算机名称，则默认为本地计算机 ("。")。  
  
 注册时在远程计算机上的源，您必须将使用具有足够权限的注册表值写入该计算机上具有管理权限。  
  
   
  
## Examples  
 下面的代码示例通过命令行参数设置的事件源的配置属性。 输入的参数指定事件源名称、 事件日志名称、 计算机名和事件消息资源文件。 此示例摘自一个更大的示例为提供<xref:System.Diagnostics.EventSourceCreationData>类。  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">计算机名称无效。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于调用的任何成员<see cref="T:System.Diagnostics.EventSourceCreationData" />以完全信任。 关联的枚举： <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="P:System.Diagnostics.EventSourceCreationData.Source" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MessageResourceFile">
      <MemberSignature Language="C#" Value="public string MessageResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MessageResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property MessageResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MessageResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MessageResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.MessageResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置消息资源文件的路径，该文件包含源的消息格式字符串。</summary>
        <value>消息资源文件的路径。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>属性可配置事件日志源写入本地化的事件消息。 事件消息是应用程序定义的字符串，描述向用户事件。  
  
 你的应用程序可以编写使用资源标识符的事件日志条目。 资源标识符的消息中编制索引<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>。 事件查看器使用的资源标识符来查找并显示基于当前语言设置的本地化的消息资源文件中的相应字符串。  
  
 要写入本地化的项还是要直接写入字符串，必须配置的事件源。 使用<xref:System.Diagnostics.EventLog.WriteEvent%2A>方法写入本地化的项配置与消息资源文件的源。  
  
 如果你的应用程序写入事件消息字符串直接，而不是在已本地化的资源文件中，使用资源标识符未设置<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>属性。  
  
 有关如何定义事件消息和生成事件资源文件的详细信息，请参阅平台 SDK 文档中的"消息编译器"主题[ http://msdn.microsoft.com ](https://msdn.microsoft.com/)。  
  
   
  
## Examples  
 下面的代码示例确定是否在事件源名为`SampleApplicationSource`在本地计算机上注册。 如果事件源不存在，该示例设置源的消息资源文件，并创建新的事件源。 最后，代码示例设置使用中的资源标识符值的事件日志的本地化的显示名称`DisplayNameMsgId`中的资源文件路径和`messageFile`。  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 代码示例使用下面的消息文本文件，内置的资源库 EventLogMsgs.dll。 消息文本文件是从其创建的消息资源文件的源。 消息文本文件定义的资源标识符和类别、 事件消息和参数插入字符串的文本。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于调用的任何成员<see cref="T:System.Diagnostics.EventSourceCreationData" />以完全信任。 关联的枚举： <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.MessageResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="ParameterResourceFile">
      <MemberSignature Language="C#" Value="public string ParameterResourceFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ParameterResourceFile" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      <MemberSignature Language="VB.NET" Value="Public Property ParameterResourceFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ParameterResourceFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ParameterResourceFile : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.ParameterResourceFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置资源文件的路径，该文件包含源的消息参数字符串。</summary>
        <value>参数资源文件的路径。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>属性可配置事件日志源写入本地化的事件消息与插入参数字符串。 每个本地化的事件消息中指定<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>属性可以包含插入字符串的占位符。 这些占位符用于指定的位置和资源标识符内的事件消息的独立于语言的字符串。 在使用中的相应字符串的占位符中填充事件查看器<xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>和格式化本地化的事件项的事件日志消息。  
  
 例如，消息文本文件中的以下部分定义的参数占位符的字符串：  
  
```  
  
MessageId = 1501  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_STARTING  
Language=English  
Component %%6050 is starting.  
.  
```  
  
 在参数资源文件中，插入字符串必须使用定义的资源标识符对应于该占位符，如下所示：  
  
```  
MessageId = 6050  
Severity = Success  
Facility = Application  
SymbolicName = COMPONENT_NAME_MSGID  
Language=English  
TRIGGER.EXE  
.  
```  
  
 要写入本地化的项还是要直接写入字符串，必须配置的事件源。 使用<xref:System.Diagnostics.EventLog.WriteEvent%2A>方法写入本地化的项配置与消息资源文件的源。  
  
 如果你的应用程序事件消息字符串将直接写入到事件日志，或者如果你<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>属性不包含参数插入占位符的消息，未设置<xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A>属性。  
  
 有关如何定义事件消息和生成事件资源文件的详细信息，请参阅平台 SDK 文档中的"消息编译器"主题[ http://msdn.microsoft.com ](https://msdn.microsoft.com/)。  
  
   
  
## Examples  
 下面的代码示例确定是否在事件源名为`SampleApplicationSource`在本地计算机上注册。 如果事件源不存在，该示例设置源的消息资源文件，并创建新的事件源。 最后，代码示例设置使用中的资源标识符值的事件日志的本地化的显示名称`DisplayNameMsgId`中的资源文件路径和`messageFile`。  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 代码示例使用下面的消息文本文件，内置的资源库 EventLogMsgs.dll。 消息文本文件是从其创建的消息资源文件的源。 消息文本文件定义的资源标识符和类别、 事件消息和参数插入字符串的文本。 具体而言，定义为资源标识符 1004年的消息使用的资源标识符 5002 定义的参数字符串占位符。  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于调用的任何成员<see cref="T:System.Diagnostics.EventSourceCreationData" />以完全信任。 关联的枚举： <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.ParameterResourceFile" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventSourceCreationData.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : string with get, set" Usage="System.Diagnostics.EventSourceCreationData.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.EventLog</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要在事件日志中注册为事件源的名称。</summary>
        <value>要在事件日志中注册为项源的名称。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 源名称通常是应用程序的名称或大型应用程序内的一个组件的名称。 <xref:System.Diagnostics.EventLog.CreateEventSource%28System.Diagnostics.EventSourceCreationData%29?displayProperty=nameWithType>方法使用<xref:System.Diagnostics.EventSourceCreationData.Source%2A>， <xref:System.Diagnostics.EventSourceCreationData.LogName%2A>，和<xref:System.Diagnostics.EventSourceCreationData.MachineName%2A>属性，以在新的源和其关联的事件日志的目标计算机上创建注册表值。 新的源名称不能与现有的源名称或目标计算机上的现有事件日志名称匹配。  
  
 创建源的注册表值后，你的应用程序可以使用源将条目写入配置的事件日志。  
  
 每个源只能写入到一个事件日志一次;但是，你的应用程序可以使用多个源写入多个事件日志。 例如，你的应用程序可能需要多个源配置为使用不同的事件日志或不同的资源文件。  
  
   
  
## Examples  
 下面的代码示例通过命令行参数设置的事件源的配置属性。 输入的参数指定事件源名称、 事件日志名称、 计算机名和事件消息资源文件。 此示例摘自一个更大的示例为提供<xref:System.Diagnostics.EventSourceCreationData>类。  
  
 [!code-cpp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CPP/source.cpp#2)]
 [!code-csharp[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/CS/source.cs#2)]
 [!code-vb[EventLog_EventSourceCreation_Properties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_EventSourceCreation_Properties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">用于调用的任何成员<see cref="T:System.Diagnostics.EventSourceCreationData" />以完全信任。 关联的枚举： <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
        <altmember cref="P:System.Diagnostics.EventLogInstaller.Source" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>