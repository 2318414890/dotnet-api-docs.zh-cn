<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ApplicationActivator.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac509e881a31fa9ec7f6e692c1d532cec070a27ae58.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">09e881a31fa9ec7f6e692c1d532cec070a27ae58</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>Provides the base class for the activation of manifest-based assemblies.</source>
          <target state="translated">提供用于激活基于清单的程序集的基类。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>There is a single designated instance of the <ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph> class in each <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> to which all activation calls are routed.</source>
          <target state="translated">没有指定的单个实例<ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph>中每个类<ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>调用路由到的所有激活。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>The <ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph> for the current <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> can provide its own custom <ph id="ph3">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph> for this purpose.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.AppDomainManager&gt;</ph>当前<ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>可以提供其自己的自定义<ph id="ph3">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph>为此目的。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>If a custom <ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph> is not provided, an instance of the default <ph id="ph2">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph> is created.</source>
          <target state="translated">如果自定义<ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph>未提供，默认值的实例<ph id="ph2">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph>创建。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>The following steps describe the behavior of the default <ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A&gt;</ph> method implementation:</source>
          <target state="translated">以下步骤介绍的默认行为<ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A&gt;</ph>方法实现：</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>Checks if the <ph id="ph1">&lt;xref:System.ActivationContext&gt;</ph> of the add-in to be activated matches the <ph id="ph2">&lt;xref:System.ActivationContext&gt;</ph> of the current domain; if not, proceeds to step 2.</source>
          <target state="translated">检查是否<ph id="ph1">&lt;xref:System.ActivationContext&gt;</ph>的外接程序要激活的匹配项<ph id="ph2">&lt;xref:System.ActivationContext&gt;</ph>的当前域; 否则，请转到步骤 2。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>Otherwise, executes the assembly and returns the result wrapped in an object handle.</source>
          <target state="translated">否则为执行的程序集，并返回结果包装在一个对象句柄。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>Activates the add-in in a new <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>.</source>
          <target state="translated">在新外接程序激活<ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>The following steps are taken to initialize a new <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> using the <ph id="ph2">&lt;xref:System.Runtime.Hosting.ActivationArguments&gt;</ph> for the add-in.</source>
          <target state="translated">采取以下步骤以初始化新<ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>使用<ph id="ph2">&lt;xref:System.Runtime.Hosting.ActivationArguments&gt;</ph>外接程序。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>Creates a new <ph id="ph1">&lt;xref:System.AppDomainSetup&gt;</ph> object using an <ph id="ph2">&lt;xref:System.Runtime.Hosting.ActivationArguments&gt;</ph> object containing the activation context for the add-in.</source>
          <target state="translated">创建一个新<ph id="ph1">&lt;xref:System.AppDomainSetup&gt;</ph>对象使用<ph id="ph2">&lt;xref:System.Runtime.Hosting.ActivationArguments&gt;</ph>包含外接程序的激活上下文对象。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>Calls the <ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A&gt;</ph> method to create a new domain using the <ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph> object.</source>
          <target state="translated">调用<ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A&gt;</ph>方法来创建新的域使用<ph id="ph2">&lt;xref:System.AppDomainSetup&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A&gt;</ph> method calls the <ph id="ph2">&lt;xref:System.Security.HostSecurityManager.DetermineApplicationTrust%2A?displayProperty=nameWithType&gt;</ph> method to acquire an <ph id="ph3">&lt;xref:System.Security.Policy.ApplicationTrust&gt;</ph> object for the add-in.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A&gt;</ph>方法调用<ph id="ph2">&lt;xref:System.Security.HostSecurityManager.DetermineApplicationTrust%2A?displayProperty=nameWithType&gt;</ph>方法以获取<ph id="ph3">&lt;xref:System.Security.Policy.ApplicationTrust&gt;</ph>外接程序的对象。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>If the <ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun%2A&gt;</ph> property returns <ph id="ph2">`true`</ph>, the add-in is executed.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun%2A&gt;</ph>属性返回<ph id="ph2">`true`</ph>外, 接程序执行。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>If not, <ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A&gt;</ph> throws a <ph id="ph2">&lt;xref:System.Security.Policy.PolicyException&gt;</ph> indicating that execution permission could not be acquired.</source>
          <target state="translated">如果没有，<ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A&gt;</ph>引发<ph id="ph2">&lt;xref:System.Security.Policy.PolicyException&gt;</ph>，该值指示无法获取执行权限。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>If the add-in is trusted to run, then a new <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> is created and configured for the <ph id="ph2">&lt;xref:System.ActivationContext&gt;</ph> of the add-in, and the add-in is loaded and executed.</source>
          <target state="translated">如果外接程序受信任运行，然后新<ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>创建并配置为<ph id="ph2">&lt;xref:System.ActivationContext&gt;</ph>的外接程序和外接程序是在加载和执行。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>The result of the activation of the add-in is returned, wrapped in an object handle.</source>
          <target state="translated">返回的结果的外接程序激活，包装在对象句柄。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>A custom activator can tailor the activation of an add-in to a particular set of circumstances.</source>
          <target state="translated">自定义激活器可以定制外接程序到一组特定的情况下的激活。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>For example, a custom activator could find an existing <ph id="ph1">&lt;xref:System.AppDomain&gt;</ph> to activate this add-in instead of creating a new domain every time.</source>
          <target state="translated">例如，自定义激活器无法找到的现有<ph id="ph1">&lt;xref:System.AppDomain&gt;</ph>激活该外接程序而不是每次创建新域。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>The following steps describe the behavior of a custom <ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph> that activates an add-in in an existing <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>:</source>
          <target state="translated">以下步骤描述的自定义行为<ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph>用于激活外接程序中的现有<ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>:</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>The custom activator finds a domain that has the same <ph id="ph1">&lt;xref:System.ActivationContext&gt;</ph> as the add-in that is being activated.</source>
          <target state="translated">自定义激活器找到的域具有相同<ph id="ph1">&lt;xref:System.ActivationContext&gt;</ph>作为正在激活的外接程序。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>If the <ph id="ph1">&lt;xref:System.ActivationContext&gt;</ph> has never been seen before in the process, the custom activator creates a new <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph> for this <ph id="ph3">&lt;xref:System.ActivationContext&gt;</ph> by calling the <ph id="ph4">&lt;xref:System.AppDomain.CreateDomain%2A&gt;</ph> method directly, or delegating this activity to the <ph id="ph5">&lt;xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A&gt;</ph> in the base class.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.ActivationContext&gt;</ph>永远不会发生过之前在过程中，自定义激活器创建一个新<ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>此<ph id="ph3">&lt;xref:System.ActivationContext&gt;</ph>通过调用<ph id="ph4">&lt;xref:System.AppDomain.CreateDomain%2A&gt;</ph>直接方法或委托到此活动<ph id="ph5">&lt;xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A&gt;</ph>基类中。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>If there is an existing domain with the same <ph id="ph1">&lt;xref:System.ActivationContext&gt;</ph>, then the activator can delegate the <ph id="ph2">&lt;xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A&gt;</ph> method call to the <ph id="ph3">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph> in the target domain.</source>
          <target state="translated">如果没有具有相同的现有域<ph id="ph1">&lt;xref:System.ActivationContext&gt;</ph>，然后激活器可以委派<ph id="ph2">&lt;xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A&gt;</ph>对方法调用<ph id="ph3">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph>目标域中。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>Note that this would be a cross-domain call to an <ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph> that resides in the target <ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>.</source>
          <target state="translated">请注意，这将是跨域调用<ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph>，驻留在目标<ph id="ph2">&lt;xref:System.AppDomain&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>The following code example shows how to obtain an <ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph> object from the current <ph id="ph2">&lt;xref:System.AppDomain.DomainManager%2A&gt;</ph> for a manifest-based application.</source>
          <target state="translated">下面的代码示例演示如何获取<ph id="ph1">&lt;xref:System.Runtime.Hosting.ApplicationActivator&gt;</ph>从当前对象<ph id="ph2">&lt;xref:System.AppDomain.DomainManager%2A&gt;</ph>基于清单的应用程序。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Runtime.Hosting.ApplicationActivator" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Runtime.Hosting.ApplicationActivator" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="T:System.Runtime.Hosting.ApplicationActivator">
          <source>Creates an instance of the application to be activated, using an activation context that identifies the application.</source>
          <target state="translated">使用标识应用程序的激活上下文创建要激活的应用程序的实例。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)">
          <source>An <ph id="ph1">&lt;see cref="T:System.ActivationContext" /&gt;</ph> that identifies the application to activate.</source>
          <target state="translated">标识要激活的应用程序的 <ph id="ph1">&lt;see cref="T:System.ActivationContext" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)">
          <source>Creates an instance of the application to be activated, using the specified activation context.</source>
          <target state="translated">使用指定的激活上下文创建要激活的应用程序的实例。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.ObjectHandle" /&gt;</ph> that is a wrapper for the return value of the application execution.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.ObjectHandle" /&gt;</ph>，是应用程序执行操作的返回值的包装。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)">
          <source>The return value must be unwrapped to access the real object.</source>
          <target state="translated">返回值需要打开包装才能访问真实对象。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)">
          <source>This method is intended for the manifest-based activation of applications.</source>
          <target state="translated">此方法适用于基于清单的应用程序的激活。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)">
          <source><ph id="ph1">&lt;paramref name="activationContext" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="activationContext" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.ActivationContext" /&gt;</ph> that identifies the application to activate.</source>
          <target state="translated">标识要激活的应用程序的 <ph id="ph1">&lt;see cref="T:System.ActivationContext" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])">
          <source>Custom activation data.</source>
          <target state="translated">自定义激活数据。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])">
          <source>Creates an instance of the application to be activated, using the specified activation context  and custom activation data.</source>
          <target state="translated">使用指定的激活上下文和自定义激活数据创建要激活的应用程序的实例。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])">
          <source>An <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.ObjectHandle" /&gt;</ph> that is a wrapper for the return value of the application execution.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.ObjectHandle" /&gt;</ph>，是应用程序执行操作的返回值的包装。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])">
          <source>The return value must be unwrapped to access the real object.</source>
          <target state="translated">返回值需要打开包装才能访问真实对象。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])">
          <source>This method is intended for the manifest-based activation of applications.</source>
          <target state="translated">此方法适用于基于清单的应用程序的激活。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])">
          <source>The activation data consists of information such as the query string portion of a URL.</source>
          <target state="translated">激活数据包含如 URL 的查询字符串部分的信息。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])">
          <source><ph id="ph1">&lt;paramref name="activationContext" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="activationContext" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)">
          <source>An <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> object whose <ph id="ph2">&lt;see cref="P:System.AppDomainSetup.ActivationArguments" /&gt;</ph> property identifies the application to activate.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> 对象，它的 <ph id="ph2">&lt;see cref="P:System.AppDomainSetup.ActivationArguments" /&gt;</ph> 属性标识要激活的应用程序。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)">
          <source>Creates an instance of an application using the specified <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> object.</source>
          <target state="translated">使用指定的 <ph id="ph1">&lt;see cref="T:System.AppDomainSetup" /&gt;</ph> 对象创建应用程序的实例。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.ObjectHandle" /&gt;</ph> that is a wrapper for the return value of the application execution.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Runtime.Remoting.ObjectHandle" /&gt;</ph>，是应用程序执行操作的返回值的包装。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)">
          <source>The return value must be unwrapped to access the real object.</source>
          <target state="translated">返回值需要打开包装才能访问真实对象。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)">
          <source>This method is intended for the manifest-based activation of applications.</source>
          <target state="translated">此方法适用于基于清单的应用程序的激活。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)">
          <source>The <ph id="ph1">&lt;see cref="P:System.AppDomainSetup.ActivationArguments" /&gt;</ph> property of <ph id="ph2">&lt;paramref name="adSetup" /&gt;</ph> is <ph id="ph3">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="adSetup" /&gt;</ph> 的 <ph id="ph1">&lt;see cref="P:System.AppDomainSetup.ActivationArguments" /&gt;</ph> 属性为 <ph id="ph3">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)">
          <source>The application instance failed to execute because the policy settings on the current application domain do not provide permission for this application to run.</source>
          <target state="translated">未能执行应用程序实例，因为当前应用程序域上的策略设置没有提供运行该应用程序的权限。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>