<Type Name="ApplicationActivator" FullName="System.Runtime.Hosting.ApplicationActivator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="09e881a31fa9ec7f6e692c1d532cec070a27ae58" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30479531" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ApplicationActivator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ApplicationActivator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Hosting.ApplicationActivator" />
  <TypeSignature Language="VB.NET" Value="Public Class ApplicationActivator" />
  <TypeSignature Language="C++ CLI" Value="public ref class ApplicationActivator" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="22beb-101">提供用于激活基于清单的程序集的基类。</span>
      <span class="sxs-lookup">
        <span data-stu-id="22beb-101">Provides the base class for the activation of manifest-based assemblies.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22beb-102">没有指定的单个实例<xref:System.Runtime.Hosting.ApplicationActivator>中每个类<xref:System.AppDomain>调用路由到的所有激活。</span><span class="sxs-lookup"><span data-stu-id="22beb-102">There is a single designated instance of the <xref:System.Runtime.Hosting.ApplicationActivator> class in each <xref:System.AppDomain> to which all activation calls are routed.</span></span> <span data-ttu-id="22beb-103"><xref:System.AppDomainManager>当前<xref:System.AppDomain>可以提供其自己的自定义<xref:System.Runtime.Hosting.ApplicationActivator>为此目的。</span><span class="sxs-lookup"><span data-stu-id="22beb-103">The <xref:System.AppDomainManager> for the current <xref:System.AppDomain> can provide its own custom <xref:System.Runtime.Hosting.ApplicationActivator> for this purpose.</span></span> <span data-ttu-id="22beb-104">如果自定义<xref:System.Runtime.Hosting.ApplicationActivator>未提供，默认值的实例<xref:System.Runtime.Hosting.ApplicationActivator>创建。</span><span class="sxs-lookup"><span data-stu-id="22beb-104">If a custom <xref:System.Runtime.Hosting.ApplicationActivator> is not provided, an instance of the default <xref:System.Runtime.Hosting.ApplicationActivator> is created.</span></span>  
  
 <span data-ttu-id="22beb-105">以下步骤介绍的默认行为<xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A>方法实现：</span><span class="sxs-lookup"><span data-stu-id="22beb-105">The following steps describe the behavior of the default <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A> method implementation:</span></span>  
  
1.  <span data-ttu-id="22beb-106">检查是否<xref:System.ActivationContext>的外接程序要激活的匹配项<xref:System.ActivationContext>的当前域; 否则，请转到步骤 2。</span><span class="sxs-lookup"><span data-stu-id="22beb-106">Checks if the <xref:System.ActivationContext> of the add-in to be activated matches the <xref:System.ActivationContext> of the current domain; if not, proceeds to step 2.</span></span> <span data-ttu-id="22beb-107">否则为执行的程序集，并返回结果包装在一个对象句柄。</span><span class="sxs-lookup"><span data-stu-id="22beb-107">Otherwise, executes the assembly and returns the result wrapped in an object handle.</span></span>  
  
2.  <span data-ttu-id="22beb-108">在新外接程序激活<xref:System.AppDomain>。</span><span class="sxs-lookup"><span data-stu-id="22beb-108">Activates the add-in in a new <xref:System.AppDomain>.</span></span> <span data-ttu-id="22beb-109">采取以下步骤以初始化新<xref:System.AppDomain>使用<xref:System.Runtime.Hosting.ActivationArguments>外接程序。</span><span class="sxs-lookup"><span data-stu-id="22beb-109">The following steps are taken to initialize a new <xref:System.AppDomain> using the <xref:System.Runtime.Hosting.ActivationArguments> for the add-in.</span></span>  
  
    1.  <span data-ttu-id="22beb-110">创建一个新<xref:System.AppDomainSetup>对象使用<xref:System.Runtime.Hosting.ActivationArguments>包含外接程序的激活上下文对象。</span><span class="sxs-lookup"><span data-stu-id="22beb-110">Creates a new <xref:System.AppDomainSetup> object using an <xref:System.Runtime.Hosting.ActivationArguments> object containing the activation context for the add-in.</span></span>  
  
    2.  <span data-ttu-id="22beb-111">调用<xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>方法来创建新的域使用<xref:System.AppDomainSetup>对象。</span><span class="sxs-lookup"><span data-stu-id="22beb-111">Calls the <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> method to create a new domain using the <xref:System.AppDomainSetup> object.</span></span>  
  
    3.  <span data-ttu-id="22beb-112"><xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>方法调用<xref:System.Security.HostSecurityManager.DetermineApplicationTrust%2A?displayProperty=nameWithType>方法以获取<xref:System.Security.Policy.ApplicationTrust>外接程序的对象。</span><span class="sxs-lookup"><span data-stu-id="22beb-112">The <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> method calls the <xref:System.Security.HostSecurityManager.DetermineApplicationTrust%2A?displayProperty=nameWithType> method to acquire an <xref:System.Security.Policy.ApplicationTrust> object for the add-in.</span></span> <span data-ttu-id="22beb-113">如果<xref:System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun%2A>属性返回`true`外, 接程序执行。</span><span class="sxs-lookup"><span data-stu-id="22beb-113">If the <xref:System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun%2A> property returns `true`, the add-in is executed.</span></span> <span data-ttu-id="22beb-114">如果没有，<xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>引发<xref:System.Security.Policy.PolicyException>，该值指示无法获取执行权限。</span><span class="sxs-lookup"><span data-stu-id="22beb-114">If not, <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> throws a <xref:System.Security.Policy.PolicyException> indicating that execution permission could not be acquired.</span></span>  
  
    4.  <span data-ttu-id="22beb-115">如果外接程序受信任运行，然后新<xref:System.AppDomain>创建并配置为<xref:System.ActivationContext>的外接程序和外接程序是在加载和执行。</span><span class="sxs-lookup"><span data-stu-id="22beb-115">If the add-in is trusted to run, then a new <xref:System.AppDomain> is created and configured for the <xref:System.ActivationContext> of the add-in, and the add-in is loaded and executed.</span></span>  
  
    5.  <span data-ttu-id="22beb-116">返回的结果的外接程序激活，包装在对象句柄。</span><span class="sxs-lookup"><span data-stu-id="22beb-116">The result of the activation of the add-in is returned, wrapped in an object handle.</span></span>  
  
 <span data-ttu-id="22beb-117">自定义激活器可以定制外接程序到一组特定的情况下的激活。</span><span class="sxs-lookup"><span data-stu-id="22beb-117">A custom activator can tailor the activation of an add-in to a particular set of circumstances.</span></span> <span data-ttu-id="22beb-118">例如，自定义激活器无法找到的现有<xref:System.AppDomain>激活该外接程序而不是每次创建新域。</span><span class="sxs-lookup"><span data-stu-id="22beb-118">For example, a custom activator could find an existing <xref:System.AppDomain> to activate this add-in instead of creating a new domain every time.</span></span>  
  
 <span data-ttu-id="22beb-119">以下步骤描述的自定义行为<xref:System.Runtime.Hosting.ApplicationActivator>用于激活外接程序中的现有<xref:System.AppDomain>:</span><span class="sxs-lookup"><span data-stu-id="22beb-119">The following steps describe the behavior of a custom <xref:System.Runtime.Hosting.ApplicationActivator> that activates an add-in in an existing <xref:System.AppDomain>:</span></span>  
  
1.  <span data-ttu-id="22beb-120">自定义激活器找到的域具有相同<xref:System.ActivationContext>作为正在激活的外接程序。</span><span class="sxs-lookup"><span data-stu-id="22beb-120">The custom activator finds a domain that has the same <xref:System.ActivationContext> as the add-in that is being activated.</span></span>  
  
2.  <span data-ttu-id="22beb-121">如果<xref:System.ActivationContext>永远不会发生过之前在过程中，自定义激活器创建一个新<xref:System.AppDomain>此<xref:System.ActivationContext>通过调用<xref:System.AppDomain.CreateDomain%2A>直接方法或委托到此活动<xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>基类中。</span><span class="sxs-lookup"><span data-stu-id="22beb-121">If the <xref:System.ActivationContext> has never been seen before in the process, the custom activator creates a new <xref:System.AppDomain> for this <xref:System.ActivationContext> by calling the <xref:System.AppDomain.CreateDomain%2A> method directly, or delegating this activity to the <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> in the base class.</span></span>  
  
3.  <span data-ttu-id="22beb-122">如果没有具有相同的现有域<xref:System.ActivationContext>，然后激活器可以委派<xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A>对方法调用<xref:System.Runtime.Hosting.ApplicationActivator>目标域中。</span><span class="sxs-lookup"><span data-stu-id="22beb-122">If there is an existing domain with the same <xref:System.ActivationContext>, then the activator can delegate the <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A> method call to the <xref:System.Runtime.Hosting.ApplicationActivator> in the target domain.</span></span> <span data-ttu-id="22beb-123">请注意，这将是跨域调用<xref:System.Runtime.Hosting.ApplicationActivator>，驻留在目标<xref:System.AppDomain>。</span><span class="sxs-lookup"><span data-stu-id="22beb-123">Note that this would be a cross-domain call to an <xref:System.Runtime.Hosting.ApplicationActivator> that resides in the target <xref:System.AppDomain>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="22beb-124">下面的代码示例演示如何获取<xref:System.Runtime.Hosting.ApplicationActivator>从当前对象<xref:System.AppDomain.DomainManager%2A>基于清单的应用程序。</span><span class="sxs-lookup"><span data-stu-id="22beb-124">The following code example shows how to obtain an <xref:System.Runtime.Hosting.ApplicationActivator> object from the current <xref:System.AppDomain.DomainManager%2A> for a manifest-based application.</span></span>  
  
 [!code-csharp[System.Runtime.Hosting.ApplicationActivator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.Hosting.ApplicationActivator/cs/program.cs#1)]
 [!code-vb[System.Runtime.Hosting.ApplicationActivator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.Hosting.ApplicationActivator/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ApplicationActivator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Hosting.ApplicationActivator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ApplicationActivator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="22beb-125">初始化 <see cref="T:System.Runtime.Hosting.ApplicationActivator" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="22beb-125">Initializes a new instance of the <see cref="T:System.Runtime.Hosting.ApplicationActivator" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateInstance">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="22beb-126">使用标识应用程序的激活上下文创建要激活的应用程序的实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="22beb-126">Creates an instance of the application to be activated, using an activation context that identifies the application.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjectHandle CreateInstance(class System.ActivationContext activationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjectHandle ^ CreateInstance(ActivationContext ^ activationContext);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activationContext" Type="System.ActivationContext" />
      </Parameters>
      <Docs>
        <param name="activationContext">
          <span data-ttu-id="22beb-127">标识要激活的应用程序的 <see cref="T:System.ActivationContext" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="22beb-127">An <see cref="T:System.ActivationContext" /> that identifies the application to activate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="22beb-128">使用指定的激活上下文创建要激活的应用程序的实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="22beb-128">Creates an instance of the application to be activated, using the specified activation context.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="22beb-129">一个 <see cref="T:System.Runtime.Remoting.ObjectHandle" />，是应用程序执行操作的返回值的包装。</span>
          <span class="sxs-lookup">
            <span data-stu-id="22beb-129">An <see cref="T:System.Runtime.Remoting.ObjectHandle" /> that is a wrapper for the return value of the application execution.</span>
          </span>
          <span data-ttu-id="22beb-130">返回值需要打开包装才能访问真实对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="22beb-130">The return value must be unwrapped to access the real object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22beb-131">此方法适用于基于清单的应用程序的激活。</span><span class="sxs-lookup"><span data-stu-id="22beb-131">This method is intended for the manifest-based activation of applications.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="22beb-132">
            <paramref name="activationContext" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="22beb-132">
              <paramref name="activationContext" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext, string[] activationCustomData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjectHandle CreateInstance(class System.ActivationContext activationContext, string[] activationCustomData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjectHandle ^ CreateInstance(ActivationContext ^ activationContext, cli::array &lt;System::String ^&gt; ^ activationCustomData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activationContext" Type="System.ActivationContext" />
        <Parameter Name="activationCustomData" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="activationContext">
          <span data-ttu-id="22beb-133">标识要激活的应用程序的 <see cref="T:System.ActivationContext" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="22beb-133">An <see cref="T:System.ActivationContext" /> that identifies the application to activate.</span>
          </span>
        </param>
        <param name="activationCustomData">
          <span data-ttu-id="22beb-134">自定义激活数据。</span>
          <span class="sxs-lookup">
            <span data-stu-id="22beb-134">Custom activation data.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="22beb-135">使用指定的激活上下文和自定义激活数据创建要激活的应用程序的实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="22beb-135">Creates an instance of the application to be activated, using the specified activation context  and custom activation data.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="22beb-136">一个 <see cref="T:System.Runtime.Remoting.ObjectHandle" />，是应用程序执行操作的返回值的包装。</span>
          <span class="sxs-lookup">
            <span data-stu-id="22beb-136">An <see cref="T:System.Runtime.Remoting.ObjectHandle" /> that is a wrapper for the return value of the application execution.</span>
          </span>
          <span data-ttu-id="22beb-137">返回值需要打开包装才能访问真实对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="22beb-137">The return value must be unwrapped to access the real object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22beb-138">此方法适用于基于清单的应用程序的激活。</span><span class="sxs-lookup"><span data-stu-id="22beb-138">This method is intended for the manifest-based activation of applications.</span></span> <span data-ttu-id="22beb-139">激活数据包含如 URL 的查询字符串部分的信息。</span><span class="sxs-lookup"><span data-stu-id="22beb-139">The activation data consists of information such as the query string portion of a URL.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="22beb-140">
            <paramref name="activationContext" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="22beb-140">
              <paramref name="activationContext" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceHelper">
      <MemberSignature Language="C#" Value="protected static System.Runtime.Remoting.ObjectHandle CreateInstanceHelper (AppDomainSetup adSetup);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstanceHelper(class System.AppDomainSetup adSetup) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function CreateInstanceHelper (adSetup As AppDomainSetup) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstanceHelper(AppDomainSetup ^ adSetup);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="adSetup" Type="System.AppDomainSetup" />
      </Parameters>
      <Docs>
        <param name="adSetup">
          <span data-ttu-id="22beb-141">一个 <see cref="T:System.AppDomainSetup" /> 对象，它的 <see cref="P:System.AppDomainSetup.ActivationArguments" /> 属性标识要激活的应用程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="22beb-141">An <see cref="T:System.AppDomainSetup" /> object whose <see cref="P:System.AppDomainSetup.ActivationArguments" /> property identifies the application to activate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="22beb-142">使用指定的 <see cref="T:System.AppDomainSetup" /> 对象创建应用程序的实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="22beb-142">Creates an instance of an application using the specified <see cref="T:System.AppDomainSetup" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="22beb-143">一个 <see cref="T:System.Runtime.Remoting.ObjectHandle" />，是应用程序执行操作的返回值的包装。</span>
          <span class="sxs-lookup">
            <span data-stu-id="22beb-143">An <see cref="T:System.Runtime.Remoting.ObjectHandle" /> that is a wrapper for the return value of the application execution.</span>
          </span>
          <span data-ttu-id="22beb-144">返回值需要打开包装才能访问真实对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="22beb-144">The return value must be unwrapped to access the real object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="22beb-145">此方法适用于基于清单的应用程序的激活。</span><span class="sxs-lookup"><span data-stu-id="22beb-145">This method is intended for the manifest-based activation of applications.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="22beb-146">
            <paramref name="adSetup" /> 的 <see cref="P:System.AppDomainSetup.ActivationArguments" /> 属性为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="22beb-146">The <see cref="P:System.AppDomainSetup.ActivationArguments" /> property of <paramref name="adSetup" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.Policy.PolicyException">
          <span data-ttu-id="22beb-147">未能执行应用程序实例，因为当前应用程序域上的策略设置没有提供运行该应用程序的权限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="22beb-147">The application instance failed to execute because the policy settings on the current application domain do not provide permission for this application to run.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>