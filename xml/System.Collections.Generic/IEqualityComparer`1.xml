<Type Name="IEqualityComparer&lt;T&gt;" FullName="System.Collections.Generic.IEqualityComparer&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4c5ac665d7a09a64c7d809537c167f4981657b27" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30365781" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEqualityComparer&lt;in T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEqualityComparer`1&lt;- T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.IEqualityComparer`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEqualityComparer(Of In T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IEqualityComparer" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="T">要比较的对象的类型。</typeparam>
    <summary>定义用于支持比较对象是否相等的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此接口允许自定义的相等比较的集合的实现。 也就是说，可以创建你自己的类型是否相等的定义`T`，并指定与接受的集合类型会使用此定义<xref:System.Collections.Generic.IEqualityComparer%601>泛型接口。 在.NET Framework 中，构造函数的<xref:System.Collections.Generic.Dictionary%602>接受此接口的泛型集合类型。  
  
 此接口的默认实现由<xref:System.Collections.Generic.EqualityComparer%601.Default%2A>属性<xref:System.Collections.Generic.EqualityComparer%601>泛型类。 <xref:System.StringComparer>类实现<xref:System.Collections.Generic.IEqualityComparer%601>类型的<xref:System.String>。  
  
 此接口仅支持相等性比较。 通过提供自定义项的排序和顺序的比较<xref:System.Collections.Generic.IComparer%601>泛型接口。  
  
 我们建议你从派生<xref:System.Collections.Generic.EqualityComparer%601>类而不是实现<xref:System.Collections.Generic.IEqualityComparer%601>接口，因为<xref:System.Collections.Generic.EqualityComparer%601>类测试相等性使用<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>方法而不是<xref:System.Object.Equals%2A?displayProperty=nameWithType>方法。 这是与一致`Contains`， `IndexOf`， `LastIndexOf`，和`Remove`方法<xref:System.Collections.Generic.Dictionary%602>类和其他泛型集合。  
  
   
  
## Examples  
 下面的示例添加自定义`Box`到字典集合的对象。 `Box`对象可视为相等，如果其尺寸相同。  
  
 [!code-csharp[System.Collections.Generic.IEqualityComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.iequalitycomparer/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.IEqualityComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.iequalitycomparer/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.Generic.EqualityComparer`1" />
    <altmember cref="T:System.Collections.Generic.Dictionary`2" />
    <altmember cref="Overload:System.Collections.Generic.Dictionary`2.#ctor" />
    <altmember cref="T:System.Collections.Generic.IComparer`1" />
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (T x, T y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(!T x, !T y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (x As T, y As T) As Boolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="T" />
        <Parameter Name="y" Type="T" />
      </Parameters>
      <Docs>
        <param name="x">要比较的第一个 <c>T</c> 类型的对象。</param>
        <param name="y">要比较的第二个 <c>T</c> 类型的对象。</param>
        <summary>确定指定的对象是否相等。</summary>
        <returns>
          如果指定的对象相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实现此方法可提供类型的自定义的相等性比较`T`。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>确保，如果需要实现<see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)" />方法返回<see langword="true" />的两个对象<c>x</c>和<c>y</c>，然后返回的值<see cref="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)" />方法<c>x</c>必须等于为返回的值<c>y</c>。  
  
 <see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)" />方法具有自反性、 对称、 和可传递。 也就是说，它返回<see langword="true" />如果用于比较的对象与然后重试。<see langword="true" />的两个对象<c>x</c>和<c>y</c>若是<see langword="true" />为<c>y</c>和<c>x</c>; 和<see langword="true" />的两个对象<c>x</c>和<c>z</c>若是<see langword="true" />为<c>x</c>和<c>y</c>以及<see langword="true" />为<c>y</c>和<c>z</c>。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode (T obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(!T obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode (obj As T) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="T" />
      </Parameters>
      <Docs>
        <param name="obj">
          <see cref="T:System.Object" />，将为其返回哈希代码。</param>
        <summary>返回指定对象的哈希代码。</summary>
        <returns>指定对象的哈希代码。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 实现此方法可提供类型的自定义的哈希代码`T`，分别对应于由提供的自定义的相等比较<xref:System.Collections.Generic.IEqualityComparer%601.Equals%2A>方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="obj" /> 的类型为引用类型，<paramref name="obj" /> 为 <see langword="null" />。</exception>
        <block subset="none" type="overrides">
          <para>确保，如果需要实现<see cref="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)" />方法返回<see langword="true" />的两个对象<c>x</c>和<c>y</c>，然后返回的值<see cref="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)" />方法<c>x</c>必须等于为返回的值<c>y</c>。</para>
        </block>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.IHashCodeProvider" />
      </Docs>
    </Member>
  </Members>
</Type>