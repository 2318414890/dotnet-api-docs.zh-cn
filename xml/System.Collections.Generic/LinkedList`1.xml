<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="LinkedList`1.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5f4f915bbf25b5784d684d30fa9b51ea4c57557ac.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f4f915bbf25b5784d684d30fa9b51ea4c57557ac</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>Specifies the element type of the linked list.</source>
          <target state="translated">指定链接列表的元素类型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.LinkedList`1">
          <source>Represents a doubly linked list.</source>
          <target state="translated">表示双重链接列表。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is a general-purpose linked list.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> 是一个通用的链接的列表。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>It supports enumerators and implements the <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> interface, consistent with other collection classes in the .NET Framework.</source>
          <target state="translated">它支持枚举器和实现<ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph>接口，.NET Framework 中其他集合类与一致。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> provides separate nodes of type <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedListNode%601&gt;</ph>, so insertion and removal are O(1) operations.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> 提供的类型的单独节点<ph id="ph2">&lt;xref:System.Collections.Generic.LinkedListNode%601&gt;</ph>，因此插入和删除是 o （1） 操作。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>You can remove nodes and reinsert them, either in the same list or in another list, which results in no additional objects allocated on the heap.</source>
          <target state="translated">你可以删除节点，然后重新插入它们相同列表中或在另一个列表中，这会导致在堆上分配任何其他对象。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>Because the list also maintains an internal count, getting the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph> property is an O(1) operation.</source>
          <target state="translated">因为该列表还维护的内部计数，获取<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>属性是一项 o （1） 操作。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>Each node in a <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> object is of the type <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedListNode%601&gt;</ph>.</source>
          <target state="translated">在每个节点<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>对象属于类型<ph id="ph2">&lt;xref:System.Collections.Generic.LinkedListNode%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>Because the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is doubly linked, each node points forward to the <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedListNode%601.Next%2A&gt;</ph> node and backward to the <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Previous%2A&gt;</ph> node.</source>
          <target state="translated">因为<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>双向链表，每个节点向前指向<ph id="ph2">&lt;xref:System.Collections.Generic.LinkedListNode%601.Next%2A&gt;</ph>节点和向后移动到<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Previous%2A&gt;</ph>节点。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>Lists that contain reference types perform better when a node and its value are created at the same time.</source>
          <target state="translated">在同一时间创建的节点和其值的时，更好地执行包含引用类型的列表。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> property for reference types and allows duplicate values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> 接受<ph id="ph2">`null`</ph>作为有效<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph>属性引用类型，并允许重复的值。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is empty, the <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph> properties contain <ph id="ph4">`null`</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>为空，<ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph>属性包含<ph id="ph4">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class does not support chaining, splitting, cycles, or other features that can leave the list in an inconsistent state.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>类不支持链接、 拆分、 时钟周期数、 或其他功能，可以使处于不一致状态的列表。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>The list remains consistent on a single thread.</source>
          <target state="translated">列表保持一致对单个线程。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>The only multithreaded scenario supported by <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is multithreaded read operations.</source>
          <target state="translated">支持的唯一多线程的方案<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>是多线程读取的操作。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>The following code example demonstrates many features of the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">下面的代码示例演示的许多功能<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>This type is not thread safe.</source>
          <target state="translated">此类型不是线程安全。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>If the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> needs to be accessed by multiple threads, you will need to implement their own synchronization mechanism.</source>
          <target state="translated">如果<ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>需要访问多个线程，将需要实现自己的同步机制。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> can support multiple readers concurrently, as long as the collection is not modified.</source>
          <target state="translated">A<ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>同时，可以支持多个读取器，只要不修改该集合。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>Even so, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">即便如此，枚举整个集合本质上不是一个线程安全的过程。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>In the rare case where an enumeration contends with write accesses, the collection must be locked during the entire enumeration.</source>
          <target state="translated">枚举与写访问的竞争其中的罕见情况，必须在整个枚举期间锁定集合。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.LinkedList`1">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.LinkedList`1">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> class that is empty.</source>
          <target state="translated">初始化为空的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.#ctor">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> for reference types and allows duplicate values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> 接受<ph id="ph2">`null`</ph>作为有效<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph>引用类型，并允许重复的值。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.#ctor">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is empty, the <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph> properties contain <ph id="ph4">`null`</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>为空，<ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph>属性包含<ph id="ph4">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.#ctor">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">此构造函数是 o （1） 操作。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.#ctor">
          <source>The following code example creates and initializes a <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> of type <ph id="ph2">&lt;xref:System.String&gt;</ph>, adds several nodes, and then displays its contents.</source>
          <target state="translated">下面的代码示例创建并初始化<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>类型的<ph id="ph2">&lt;xref:System.String&gt;</ph>、 添加多个节点，然后显示其内容。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> whose elements are copied to the new <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph>，它的元素被复制到新 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> class that contains elements copied from the specified <ph id="ph2">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> and has sufficient capacity to accommodate the number of elements copied.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 类的新实例，该实例包含从指定的 <ph id="ph2">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> 中复制的元素并且其容量足以容纳所复制的元素数。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> for reference types and allows duplicate values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> 接受<ph id="ph2">`null`</ph>作为有效<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph>引用类型，并允许重复的值。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>If <ph id="ph1">`collection`</ph> has no elements then the new <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is empty, and the <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph> properties contain <ph id="ph5">`null`</ph>.</source>
          <target state="translated">如果<ph id="ph1">`collection`</ph>有任何元素，则新<ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>为空，与<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph>和<ph id="ph4">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph>属性包含<ph id="ph5">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>This constructor is an O(n) operation, where <ph id="ph1">`n`</ph> is the number of elements in <ph id="ph2">`collection`</ph>.</source>
          <target state="translated">此构造函数是 o （n） 操作，其中<ph id="ph1">`n`</ph>是中的元素数<ph id="ph2">`collection`</ph>。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>For an example that includes this constructor, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">有关示例，其中包括此构造函数，请参阅<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object containing the information required to serialize the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> 对象包含序列化 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 所需的信息。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> object containing the source and destination of the serialized stream associated with the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> 对象包含与<ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 关联的序列化流的源和目标。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> class that is serializable with the specified <ph id="ph2">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> and <ph id="ph3">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph>.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 类的新实例，该实例可使用指定的 <ph id="ph2">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> 和 <ph id="ph3">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> 进行序列化。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> for reference types and allows duplicate values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> 接受<ph id="ph2">`null`</ph>作为有效<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph>引用类型，并允许重复的值。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is empty, the <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph> properties contain <ph id="ph4">`null`</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>为空，<ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph>属性包含<ph id="ph4">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This constructor is an O(n) operation.</source>
          <target state="translated">此构造函数是 o （n） 操作。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.LinkedList`1">
          <source>Adds a new node or value after an existing node in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">在 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 中的现有节点后添加新的节点或值。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> after which to insert <bpt id="p1">&lt;c&gt;</bpt>newNode<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">要在其后插入 <bpt id="p1">&lt;c&gt;</bpt>newNode<ept id="p1">&lt;/c&gt;</ept> 的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source>The new <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> to add to the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">要添加到 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> 的新 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source>Adds the specified new node after the specified existing node in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">在 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 中指定的现有节点后添加指定的新节点。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> for reference types and allows duplicate values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> 接受<ph id="ph2">`null`</ph>作为有效<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph>引用类型，并允许重复的值。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source>This method is an O(1) operation.</source>
          <target state="translated">此方法为 o （1） 运算。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">有关示例，其中包括此方法，请参阅<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;paramref name="node" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="node" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;paramref name="newNode" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="newNode" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;paramref name="node" /&gt;</ph> is not in the current <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="node" /&gt;</ph> 不在当前 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 中。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;paramref name="newNode" /&gt;</ph> belongs to another <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="newNode" /&gt;</ph> 属于另一个 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> after which to insert a new <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> containing <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">要在其后插入包含 <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> 的新 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> 的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source>The value to add to the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">要添加到 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 的值。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source>Adds a new node containing the specified value after the specified existing node in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">在 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 中指定的现有节点后添加包含指定值的新节点。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source>The new <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> containing <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">包含 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> 的新 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> for reference types and allows duplicate values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> 接受<ph id="ph2">`null`</ph>作为有效<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph>引用类型，并允许重复的值。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">此方法为 o （1） 运算。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">有关示例，其中包括此方法，请参阅<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source><ph id="ph1">&lt;paramref name="node" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="node" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source><ph id="ph1">&lt;paramref name="node" /&gt;</ph> is not in the current <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="node" /&gt;</ph> 不在当前 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 中。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.LinkedList`1">
          <source>Adds a new node or value before an existing node in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">在 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 中的现有节点前添加新的节点或值。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> before which to insert <bpt id="p1">&lt;c&gt;</bpt>newNode<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">要在其之前插入 <bpt id="p1">&lt;c&gt;</bpt>newNode<ept id="p1">&lt;/c&gt;</ept> 的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source>The new <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> to add to the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">要添加到 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> 的新 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source>Adds the specified new node before the specified existing node in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">在 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 中指定的现有节点前添加指定的新节点。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> for reference types and allows duplicate values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> 接受<ph id="ph2">`null`</ph>作为有效<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph>引用类型，并允许重复的值。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source>This method is an O(1) operation.</source>
          <target state="translated">此方法为 o （1） 运算。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">有关示例，其中包括此方法，请参阅<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;paramref name="node" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="node" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;paramref name="newNode" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="newNode" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;paramref name="node" /&gt;</ph> is not in the current <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="node" /&gt;</ph> 不在当前 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 中。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;paramref name="newNode" /&gt;</ph> belongs to another <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="newNode" /&gt;</ph> 属于另一个 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> before which to insert a new <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> containing <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated">要在其之前插入包含 <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> 的新 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> 的 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source>The value to add to the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">要添加到 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 的值。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source>Adds a new node containing the specified value before the specified existing node in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">在 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 中指定的现有节点前添加包含指定值的新节点。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source>The new <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> containing <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">包含 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> 的新 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> for reference types and allows duplicate values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> 接受<ph id="ph2">`null`</ph>作为有效<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph>引用类型，并允许重复的值。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">此方法为 o （1） 运算。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">有关示例，其中包括此方法，请参阅<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source><ph id="ph1">&lt;paramref name="node" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="node" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
          <source><ph id="ph1">&lt;paramref name="node" /&gt;</ph> is not in the current <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="node" /&gt;</ph> 不在当前 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 中。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.LinkedList`1">
          <source>Adds a new node or value at the start of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">在 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 的开头处添加新的节点或值。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
          <source>The new <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> to add at the start of the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">要在 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> 的开头处添加的新 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
          <source>Adds the specified new node at the start of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">在 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 的开头处添加指定的新节点。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> for reference types and allows duplicate values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> 接受<ph id="ph2">`null`</ph>作为有效<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph>引用类型，并允许重复的值。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is empty, the new node becomes the <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> and the <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>为空，则新节点将成为<ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
          <source>This method is an O(1) operation.</source>
          <target state="translated">此方法为 o （1） 运算。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">有关示例，其中包括此方法，请参阅<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;paramref name="node" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="node" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;paramref name="node" /&gt;</ph> belongs to another <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="node" /&gt;</ph> 属于另一个 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
          <source>The value to add at the start of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">要在 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 的开头处添加的值。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
          <source>Adds a new node containing the specified value at the start of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">在 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 的开头处添加包含指定值的新节点。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
          <source>The new <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> containing <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">包含 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> 的新 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> for reference types and allows duplicate values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> 接受<ph id="ph2">`null`</ph>作为有效<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph>引用类型，并允许重复的值。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is empty, the new node becomes the <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> and the <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>为空，则新节点将成为<ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">此方法为 o （1） 运算。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">有关示例，其中包括此方法，请参阅<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.LinkedList`1">
          <source>Adds a new node or value at the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">在 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 的结尾处添加新的节点或值。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
          <source>The new <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> to add at the end of the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">要添加至 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> 结尾的新 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
          <source>Adds the specified new node at the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">在 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 的结尾处添加指定的新节点。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> for reference types and allows duplicate values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> 接受<ph id="ph2">`null`</ph>作为有效<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph>引用类型，并允许重复的值。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is empty, the new node becomes the <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> and the <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>为空，则新节点将成为<ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
          <source>This method is an O(1) operation.</source>
          <target state="translated">此方法为 o （1） 运算。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">有关示例，其中包括此方法，请参阅<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;paramref name="node" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="node" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;paramref name="node" /&gt;</ph> belongs to another <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="node" /&gt;</ph> 属于另一个 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
          <source>The value to add at the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">要添加到 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 的末尾的值。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
          <source>Adds a new node containing the specified value at the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">在 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 的结尾处添加包含指定值的新节点。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
          <source>The new <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> containing <ph id="ph2">&lt;paramref name="value" /&gt;</ph>.</source>
          <target state="translated">包含 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> 的新 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> for reference types and allows duplicate values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> 接受<ph id="ph2">`null`</ph>作为有效<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph>引用类型，并允许重复的值。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is empty, the new node becomes the <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> and the <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>为空，则新节点将成为<ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">此方法为 o （1） 运算。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">有关示例，其中包括此方法，请参阅<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.Clear">
          <source>Removes all nodes from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">从 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 中移除所有节点。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.Clear">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph> is set to zero, and references to other objects from elements of the collection are also released.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph> 是设置为零，并且集合的元素对其他对象的引用也被释放。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.Clear">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph> are set to <ph id="ph3">`null`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> 和<ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph>设置为<ph id="ph3">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.Clear">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>.</source>
          <target state="translated">此方法为 O (<ph id="ph1">`n`</ph>) 操作，其中<ph id="ph2">`n`</ph>是<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.Clear">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">有关示例，其中包括此方法，请参阅<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
          <source>The value to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">要在 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 中定位的值。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">对于引用类型，该值可以为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
          <source>Determines whether a value is in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">确定某值是否在 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 中。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is found in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果在 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 中找到 <ph id="ph2">&lt;paramref name="value" /&gt;</ph>，则为 <ph id="ph3">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>.</source>
          <target state="translated">此方法执行的线性搜索;因此，此方法为 O (<ph id="ph1">`n`</ph>) 操作，其中<ph id="ph2">`n`</ph>是<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">有关示例，其中包括此方法，请参阅<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">一维 <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph>，它是从 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 复制的元素的目标。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> 必须具有从零开始的索引。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> 中从零开始的索引，在此处开始复制。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
          <source>Copies the entire <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> to a compatible one-dimensional <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at the specified index of the target array.</source>
          <target state="translated">从目标数组的指定索引处开始将整个 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 复制到兼容的一维 <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
          <source>The elements are copied to the <ph id="ph1">&lt;xref:System.Array&gt;</ph> in the same order in which the enumerator iterates through the <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>.</source>
          <target state="translated">元素被复制到<ph id="ph1">&lt;xref:System.Array&gt;</ph>枚举数循环访问的相同顺序<ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>.</source>
          <target state="translated">此方法为 O (<ph id="ph1">`n`</ph>) 操作，其中<ph id="ph2">`n`</ph>是<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">有关示例，其中包括此方法，请参阅<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 小于零。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="index" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">源 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 中的元素个数大于从 <ph id="ph2">&lt;paramref name="index" /&gt;</ph> 到目标 <ph id="ph3">&lt;paramref name="array" /&gt;</ph> 末尾之间的可用空间。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.LinkedList`1.Count">
          <source>Gets the number of nodes actually contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">获取 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 中实际包含的节点数。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.Count">
          <source>The number of nodes actually contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 中实际包含的节点数。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.Count">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">检索此属性的值的运算复杂度为 O(1)。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.Count">
          <source>For an example that includes this property, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">有关示例，其中包括此属性，请参阅<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.Find(`0)">
          <source>The value to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">要在 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 中定位的值。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.Find(`0)">
          <source>Finds the first node that contains the specified value.</source>
          <target state="translated">查找包含指定值的第一个节点。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.Find(`0)">
          <source>The first <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> that contains the specified value, if found; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">如果找到，则为包含指定值的第一个 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.Find(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is searched forward starting at <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> and ending at <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>处开始向前搜索<ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph>结束<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.Find(`0)">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>.</source>
          <target state="translated">此方法执行的线性搜索;因此，此方法为 O (<ph id="ph1">`n`</ph>) 操作，其中<ph id="ph2">`n`</ph>是<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.Find(`0)">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">有关示例，其中包括此方法，请参阅<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
          <source>The value to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">要在 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 中定位的值。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
          <source>Finds the last node that contains the specified value.</source>
          <target state="translated">查找包含指定值的最后一个节点。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
          <source>The last <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> that contains the specified value, if found; otherwise, <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">如果找到，则为包含指定值的最后一个 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is searched backward starting at <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph> and ending at <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>是搜索向后开始<ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph>结束<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>.</source>
          <target state="translated">此方法执行的线性搜索;因此，此方法为 O (<ph id="ph1">`n`</ph>) 操作，其中<ph id="ph2">`n`</ph>是<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">有关示例，其中包括此方法，请参阅<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.LinkedList`1.First">
          <source>Gets the first node of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">获取 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 的第一个节点。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.First">
          <source>The first <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> of the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> 的第一个 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.First">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> for reference types and allows duplicate values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> 接受<ph id="ph2">`null`</ph>作为有效<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph>引用类型，并允许重复的值。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.First">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is empty, the <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph> properties contain <ph id="ph4">`null`</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>为空，<ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph>属性包含<ph id="ph4">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.First">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">检索此属性的值的运算复杂度为 O(1)。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.First">
          <source>For an example that includes this property, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">有关示例，其中包括此属性，请参阅<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>Returns an enumerator that iterates through the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">返回循环访问 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 的枚举数。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" /&gt;</ph> 的一个 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> C# 语言的语句 (<ph id="ph2">`for each`</ph> c + + 中<ph id="ph3">`For Each`</ph>在 Visual Basic 中) 隐藏了枚举数的复杂性。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">因此，建议使用 <ph id="ph1">`foreach`</ph>，而不是直接操作枚举数。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">最初，枚举数定位在集合中第一个元素的前面。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">在此位置上，未定义 <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.Current%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">因此，在读取 <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A&gt;</ph> 的值之前，必须调用 <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.Current%2A&gt;</ph> 将枚举器向前移动到集合的第一个元素。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.Current%2A&gt;</ph> returns the same object until <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A&gt;</ph> is called.</source>
          <target state="translated">在调用 <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.Current%2A&gt;</ph> 之前，<ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A&gt;</ph> 返回相同的对象。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A&gt;</ph> 将 <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.Current%2A&gt;</ph> 设置为下一个元素。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A&gt;</ph>越过的末尾的集合，枚举数定位在集合中的最后一个元素的后面和<ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A&gt;</ph>返回<ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">当枚举器位于此位置上，后续调用<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A&gt;</ph>还返回<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">如果最后一次调用到<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.MoveNext%2A&gt;</ph>返回<ph id="ph2">`false`</ph>，<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.Current%2A&gt;</ph>是不确定的。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>You cannot set <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.Current%2A&gt;</ph> to the first element of the collection again; you must create a new enumerator instance instead.</source>
          <target state="translated">无法再次将 <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601.Enumerator.Current%2A&gt;</ph> 设置为集合的第一个元素；必须改为创建新的枚举器实例。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">只要集合保持不变，枚举数就保持有效。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">如果对集合进行更改（如添加、修改或删除元素），则枚举数将失效且不可恢复，而且其行为是不确定的。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">集合中的默认实现<ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph>不同步。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">此方法为 o （1） 运算。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object that contains the information required to serialize the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> 对象，该对象包含序列化 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 实例所需的信息。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> object that contains the source and destination of the serialized stream associated with the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> instance.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.StreamingContext" /&gt;</ph> 对象，该对象包含与 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 实例关联的序列化流的源和目标。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ISerializable" /&gt;</ph> interface and returns the data needed to serialize the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> instance.</source>
          <target state="translated">实现 <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ISerializable" /&gt;</ph> 接口，并返回序列化 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 实例所需的数据。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>.</source>
          <target state="translated">此方法为 O (<ph id="ph1">`n`</ph>) 操作，其中<ph id="ph2">`n`</ph>是<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source><ph id="ph1">&lt;paramref name="info" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="info" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>for providing serialization services.</source>
          <target state="translated">用于提供序列化服务。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Associated enumeration:   <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph> Security action: <ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph></source>
          <target state="translated">关联的枚举：<ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /&gt;</ph>安全操作： <ph id="ph2">&lt;see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.LinkedList`1.Last">
          <source>Gets the last node of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">获取 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 的最后一个节点。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.Last">
          <source>The last <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> of the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> 的最后一个 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.Last">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> for reference types and allows duplicate values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> 接受<ph id="ph2">`null`</ph>作为有效<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph>引用类型，并允许重复的值。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.Last">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is empty, the <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph> properties contain <ph id="ph4">`null`</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>为空，<ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph>属性包含<ph id="ph4">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.Last">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">检索此属性的值的运算复杂度为 O(1)。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.Last">
          <source>For an example that includes this property, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">有关示例，其中包括此属性，请参阅<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.OnDeserialization(System.Object)">
          <source>The source of the deserialization event.</source>
          <target state="translated">反序列化事件源。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.OnDeserialization(System.Object)">
          <source>Implements the <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ISerializable" /&gt;</ph> interface and raises the deserialization event when the deserialization is complete.</source>
          <target state="translated">实现 <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.ISerializable" /&gt;</ph> 接口，并在完成反序列化之后引发反序列化事件。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.OnDeserialization(System.Object)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>.</source>
          <target state="translated">此方法为 O (<ph id="ph1">`n`</ph>) 操作，其中<ph id="ph2">`n`</ph>是<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.OnDeserialization(System.Object)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> object associated with the current <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> instance is invalid.</source>
          <target state="translated">与当前 <ph id="ph1">&lt;see cref="T:System.Runtime.Serialization.SerializationInfo" /&gt;</ph> 实例关联的 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 对象无效。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.LinkedList`1">
          <source>Removes the first occurrence of a node or value from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">从 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 中移除节点或值的第一个匹配项。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> to remove from the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">要从 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedListNode`1" /&gt;</ph> 移除的 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
          <source>Removes the specified node from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">从 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 中移除指定的节点。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
          <source>This method is an O(1) operation.</source>
          <target state="translated">此方法为 o （1） 运算。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">有关示例，其中包括此方法，请参阅<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;paramref name="node" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="node" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
          <source><ph id="ph1">&lt;paramref name="node" /&gt;</ph> is not in the current <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="node" /&gt;</ph> 不在当前 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 中。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
          <source>The value to remove from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">要从 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 中移除的值。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
          <source>Removes the first occurrence of the specified value from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">从 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 中移除指定值的第一个匹配项。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element containing <ph id="ph2">&lt;paramref name="value" /&gt;</ph> is successfully removed; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果成功移除包含 <ph id="ph2">&lt;paramref name="value" /&gt;</ph> 的元素，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
          <source>This method also returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> if <ph id="ph2">&lt;paramref name="value" /&gt;</ph> was not found in the original <ph id="ph3">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">如果在原始 <ph id="ph1">&lt;see langword="false" /&gt;</ph> 中没有找到 <ph id="ph2">&lt;paramref name="value" /&gt;</ph>，此方法也会返回 <ph id="ph3">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>.</source>
          <target state="translated">此方法执行的线性搜索;因此，此方法为 O (<ph id="ph1">`n`</ph>) 操作，其中<ph id="ph2">`n`</ph>是<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">有关示例，其中包括此方法，请参阅<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.RemoveFirst">
          <source>Removes the node at the start of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">移除位于 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 开头处的节点。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.RemoveFirst">
          <source>This method is an O(1) operation.</source>
          <target state="translated">此方法为 o （1） 运算。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.RemoveFirst">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">有关示例，其中包括此方法，请参阅<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.RemoveFirst">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> is empty.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 为空。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.RemoveLast">
          <source>Removes the node at the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>.</source>
          <target state="translated">移除位于 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 结尾处的节点。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.RemoveLast">
          <source>This method is an O(1) operation.</source>
          <target state="translated">此方法为 o （1） 运算。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.RemoveLast">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">有关示例，其中包括此方法，请参阅<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.RemoveLast">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> is empty.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 为空。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Add(`0)">
          <source>The value to add at the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph>.</source>
          <target state="translated">要添加到 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> 的末尾的值。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Add(`0)">
          <source>Adds an item at the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph>.</source>
          <target state="translated">将项添加到 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> 的结尾处。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Add(`0)">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph> for reference types and allows duplicate values.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> 接受<ph id="ph2">`null`</ph>作为有效<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedListNode%601.Value%2A&gt;</ph>引用类型，并允许重复的值。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Add(`0)">
          <source>If the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> is empty, the new node becomes the <ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph> and the <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>为空，则新节点将成为<ph id="ph2">&lt;xref:System.Collections.Generic.LinkedList%601.First%2A&gt;</ph>和<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Last%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Add(`0)">
          <source>This method is an O(1) operation.</source>
          <target state="translated">此方法为 o （1） 运算。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#Add(`0)">
          <source>For an example that includes this method, see the <ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph> class.</source>
          <target state="translated">有关示例，其中包括此方法，请参阅<ph id="ph1">&lt;xref:System.Collections.Generic.LinkedList%601&gt;</ph>类。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>Gets a value indicating whether the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> is read-only.</source>
          <target state="translated">获取一个值，该值指示 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> 是否为只读。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> is read-only; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 是只读的，则为 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">在 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 的默认实现中，此属性始终返回 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</source>
          <target state="translated">在创建只读集合后，该集合不允许添加、移除或修改元素。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</source>
          <target state="translated">集合是只读的是只是一个集合与防止集合; 进行修改的包装因此，如果对基础集合进行更改，只读集合将反映这些更改。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection&amp;lt;T&amp;gt;#IsReadOnly">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">检索此属性的值的运算复杂度为 O(1)。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Returns an enumerator that iterates through a collection.</source>
          <target state="translated">返回循环访问集合的枚举数。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerator`1" /&gt;</ph> that can be used to iterate through the collection.</source>
          <target state="translated">可用于循环访问集合的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerator`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> C# 语言的语句 (<ph id="ph2">`for each`</ph> c + + 中<ph id="ph3">`For Each`</ph>在 Visual Basic 中) 隐藏了枚举数的复杂性。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">因此，建议使用 <ph id="ph1">`foreach`</ph>，而不是直接操作枚举数。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">最初，枚举数定位在集合中第一个元素的前面。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">在此位置上，未定义 <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>.</source>
          <target state="translated">因此，在读取 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 的值之前，必须调用 <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> 将枚举器向前移动到集合的第一个元素。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> returns the same object until <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> is called.</source>
          <target state="translated">在调用 <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> 之前，<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 返回相同的对象。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 将 <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> 设置为下一个元素。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>越过的末尾的集合，枚举数定位在集合中的最后一个元素的后面和<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返回<ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">当枚举器位于此位置上，后续调用<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>还返回<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">如果最后一次调用到<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返回<ph id="ph2">`false`</ph>，<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>是不确定的。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>You cannot set <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the first element of the collection again; you must create a new enumerator instance instead.</source>
          <target state="translated">无法再次将 <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> 设置为集合的第一个元素；必须改为创建新的枚举器实例。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">只要集合保持不变，枚举数就保持有效。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">如果对集合进行更改（如添加、修改或删除元素），则枚举数将失效且不可恢复，而且其行为是不确定的。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">集合中的默认实现<ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph>不同步。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">此方法为 o （1） 运算。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated">一维 <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph>，它是从 <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> 复制的元素的目标。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> 必须具有从零开始的索引。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> 中从零开始的索引，在此处开始复制。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>Copies the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at a particular <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph> index.</source>
          <target state="translated">从特定的 <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> 索引处开始，将 <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph> 的元素复制到一个 <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph> 中。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>If the type of the source <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">`array`</ph>, the non-generic implementations of <ph id="ph3">&lt;xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType&gt;</ph> throw <ph id="ph4">&lt;xref:System.InvalidCastException&gt;</ph>, whereas the generic implementations throw <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">如果源类型<ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph>无法自动转换为目标的类型<ph id="ph2">`array`</ph>的非泛型实现<ph id="ph3">&lt;xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType&gt;</ph>引发<ph id="ph4">&lt;xref:System.InvalidCastException&gt;</ph>，而泛型实现将引发<ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>.</source>
          <target state="translated">此方法为 O (<ph id="ph1">`n`</ph>) 操作，其中<ph id="ph2">`n`</ph>是<ph id="ph3">&lt;xref:System.Collections.Generic.LinkedList%601.Count%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 小于零。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> 是多维的。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> does not have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> 没有从零开始的索引。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="index" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">源 <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> 中的元素个数大于从 <ph id="ph2">&lt;paramref name="index" /&gt;</ph> 到目标 <ph id="ph3">&lt;paramref name="array" /&gt;</ph> 末尾之间的可用空间。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The type of the source <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">无法自动将源 <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> 的类型转换为目标 <ph id="ph2">&lt;paramref name="array" /&gt;</ph> 的类型。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
          <source>Gets a value indicating whether access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized (thread safe).</source>
          <target state="translated">获取一个值，该值指示是否同步对 <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> 的访问（线程安全）。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access to the <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized (thread safe); otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果对 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 的访问是同步的（线程安全），则为 <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">在 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 的默认实现中，此属性始终返回 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">集合中的默认实现<ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph>不同步。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">枚举整个集合本质上不是一个线程安全的过程。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
          <source><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> returns an object that can be used to synchronize access to the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> 返回可以用于对访问进行同步的对象<ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
          <source>Synchronization is effective only if all threads lock this object before accessing the collection.</source>
          <target state="translated">同步是仅当所有线程在访问该集合之前都锁定此对象有效。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">检索此属性的值的运算复杂度为 O(1)。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
          <source>Gets an object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated">获取可用于同步对 <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> 的访问的对象。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
          <source>An object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated">可用于同步对 <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> 的访问的对象。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph>, this property always returns the current instance.</source>
          <target state="translated">在 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.LinkedList`1" /&gt;</ph> 的默认实现中，此属性始终返回当前实例。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">集合中的默认实现<ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph>不同步。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">枚举整个集合本质上不是一个线程安全的过程。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
          <source><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> returns an object that can be used to synchronize access to the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> 返回可以用于对访问进行同步的对象<ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
          <source>Synchronization is effective only if all threads lock this object before accessing the collection.</source>
          <target state="translated">同步是仅当所有线程在访问该集合之前都锁定此对象有效。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property for C#, C++, and Visual Basic.</source>
          <target state="translated">下面的代码演示如何使用<ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph>C#、 c + + 和 Visual Basic 的属性。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">检索此属性的值的运算复杂度为 O(1)。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator that iterates through the linked list as a collection.</source>
          <target state="translated">返回一个将链表作为集合进行循环访问的枚举数。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> that can be used to iterate through the linked list as a collection.</source>
          <target state="translated">可用于将链表作为集合循环访问的 <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> C# 语言的语句 (<ph id="ph2">`for each`</ph> c + + 中<ph id="ph3">`For Each`</ph>在 Visual Basic 中) 隐藏了枚举数的复杂性。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">因此，建议使用 <ph id="ph1">`foreach`</ph>，而不是直接操作枚举数。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">最初，枚举数定位在集合中第一个元素的前面。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> 也会将枚举器放回此位置。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">在此位置上，未定义 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">因此，在读取 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 的值之前，必须调用 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 将枚举器向前移动到集合的第一个元素。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated">在调用 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 或 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 之前，<ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> 返回同一对象。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 将 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 设置为下一个元素。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>越过的末尾的集合，枚举数定位在集合中的最后一个元素的后面和<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返回<ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">当枚举器位于此位置上，后续调用<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>还返回<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">如果最后一次调用到<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返回<ph id="ph2">`false`</ph>，<ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>是不确定的。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated">若要再次将 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 设置为集合的第一个元素，可以调用 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> 并接着调用 <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">只要集合保持不变，枚举数就保持有效。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">如果对集合进行更改（如添加、修改或删除元素），则枚举数将失效且不可恢复，而且其行为是不确定的。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">集合中的默认实现<ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph>不同步。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">此方法为 o （1） 运算。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>