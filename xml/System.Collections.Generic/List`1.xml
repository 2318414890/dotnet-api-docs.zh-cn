<Type Name="List&lt;T&gt;" FullName="System.Collections.Generic.List&lt;T&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c8b70f84f6227059b8b978c586d8a6659cab5711" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39793668" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class List&lt;T&gt; : System.Collections.Generic.ICollection&lt;T&gt;, System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IList&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.Generic.IReadOnlyList&lt;T&gt;, System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit List`1&lt;T&gt; extends System.Object implements class System.Collections.Generic.ICollection`1&lt;!T&gt;, class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IList`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyList`1&lt;!T&gt;, class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.List`1" />
  <TypeSignature Language="VB.NET" Value="Public Class List(Of T)&#xA;Implements ICollection(Of T), IEnumerable(Of T), IList, IList(Of T), IReadOnlyCollection(Of T), IReadOnlyList(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class List : System::Collections::Generic::ICollection&lt;T&gt;, System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IList&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::Generic::IReadOnlyList&lt;T&gt;, System::Collections::IList" />
  <TypeSignature Language="F#" Value="type List&lt;'T&gt; = class&#xA;    interface IList&lt;'T&gt;&#xA;    interface IList&#xA;    interface IReadOnlyList&lt;'T&gt;&#xA;    interface ICollection&lt;'T&gt;&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface ICollection&#xA;    interface IReadOnlyCollection&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_CollectionDebugView`1))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T">
      <span data-ttu-id="3edb2-101">列表中元素的类型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="3edb2-101">The type of elements in the list.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="3edb2-102">表示可通过索引访问的对象的强类型列表。</span>
      <span class="sxs-lookup">
        <span data-stu-id="3edb2-102">Represents a strongly typed list of objects that can be accessed by index.</span>
      </span>
      <span data-ttu-id="3edb2-103">提供用于对列表进行搜索、排序和操作的方法。</span>
      <span class="sxs-lookup">
        <span data-stu-id="3edb2-103">Provides methods to search, sort, and manipulate lists.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-104"><xref:System.Collections.Generic.List%601>类是等效的泛型<xref:System.Collections.ArrayList>类。</span><span class="sxs-lookup"><span data-stu-id="3edb2-104">The <xref:System.Collections.Generic.List%601> class is the generic equivalent of the <xref:System.Collections.ArrayList> class.</span></span> <span data-ttu-id="3edb2-105">它实现了<xref:System.Collections.Generic.IList%601>所需使用作为动态增加其大小的数组的泛型接口。</span><span class="sxs-lookup"><span data-stu-id="3edb2-105">It implements the <xref:System.Collections.Generic.IList%601> generic interface by using an array whose size is dynamically increased as required.</span></span>  
  
 <span data-ttu-id="3edb2-106">您可以将项添加到<xref:System.Collections.Generic.List%601>通过使用<xref:System.Collections.Generic.List%601.Add%2A>或<xref:System.Collections.Generic.List%601.AddRange%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-106">You can add items to a <xref:System.Collections.Generic.List%601> by using the <xref:System.Collections.Generic.List%601.Add%2A> or <xref:System.Collections.Generic.List%601.AddRange%2A> methods.</span></span>  
  
 <span data-ttu-id="3edb2-107"><xref:System.Collections.Generic.List%601>类使用相等比较器和排序比较器。</span><span class="sxs-lookup"><span data-stu-id="3edb2-107">The <xref:System.Collections.Generic.List%601> class uses both an equality comparer and an ordering comparer.</span></span>  
  
-   <span data-ttu-id="3edb2-108">等方法<xref:System.Collections.Generic.List%601.Contains%2A>， <xref:System.Collections.Generic.List%601.IndexOf%2A>， <xref:System.Collections.Generic.List%601.LastIndexOf%2A>，和<xref:System.Collections.Generic.Dictionary%602.Remove%2A>列表元素使用相等比较器。</span><span class="sxs-lookup"><span data-stu-id="3edb2-108">Methods such as <xref:System.Collections.Generic.List%601.Contains%2A>, <xref:System.Collections.Generic.List%601.IndexOf%2A>, <xref:System.Collections.Generic.List%601.LastIndexOf%2A>, and <xref:System.Collections.Generic.Dictionary%602.Remove%2A> use an equality comparer for the list elements.</span></span> <span data-ttu-id="3edb2-109">类型的默认相等比较器`T`确定，如下所示。</span><span class="sxs-lookup"><span data-stu-id="3edb2-109">The default equality comparer for type `T` is determined as follows.</span></span> <span data-ttu-id="3edb2-110">如果类型`T`实现<xref:System.IEquatable%601>泛型接口，则相等比较器是<xref:System.IEquatable%601.Equals%28%600%29>接口; 方法的默认相等比较器是为<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-110">If type `T` implements the <xref:System.IEquatable%601> generic interface, then the equality comparer is the <xref:System.IEquatable%601.Equals%28%600%29> method of that interface; otherwise, the default equality comparer is <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>.</span></span>  
  
-   <span data-ttu-id="3edb2-111">等方法<xref:System.Collections.Generic.List%601.BinarySearch%2A>和<xref:System.Collections.Generic.List%601.Sort%2A>排序比较器用于列表元素。</span><span class="sxs-lookup"><span data-stu-id="3edb2-111">Methods such as <xref:System.Collections.Generic.List%601.BinarySearch%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> use an ordering comparer for the list elements.</span></span> <span data-ttu-id="3edb2-112">类型的默认比较器`T`确定，如下所示。</span><span class="sxs-lookup"><span data-stu-id="3edb2-112">The default comparer for type `T` is determined as follows.</span></span>  <span data-ttu-id="3edb2-113">如果类型`T`实现<xref:System.IComparable%601>泛型接口，则默认比较器是<xref:System.IComparable%601.CompareTo%28%600%29>方法的接口; 否则为如果类型`T`实现非泛型<xref:System.IComparable>接口，则默认值比较器是<xref:System.IComparable.CompareTo%28System.Object%29>该接口的方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-113">If type `T` implements the <xref:System.IComparable%601> generic interface, then the default comparer is the <xref:System.IComparable%601.CompareTo%28%600%29> method of that interface; otherwise, if type `T` implements the nongeneric <xref:System.IComparable> interface, then the default comparer is the <xref:System.IComparable.CompareTo%28System.Object%29> method of that interface.</span></span> <span data-ttu-id="3edb2-114">如果类型`T`实现两个接口，则没有默认比较器，必须显式提供的比较器或比较委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-114">If type `T` implements neither interface, then there is no default comparer, and a comparer or comparison delegate must be provided explicitly.</span></span>  
  
 <span data-ttu-id="3edb2-115"><xref:System.Collections.Generic.List%601>不保证排序。</span><span class="sxs-lookup"><span data-stu-id="3edb2-115">The <xref:System.Collections.Generic.List%601> is not guaranteed to be sorted.</span></span>  <span data-ttu-id="3edb2-116">您必须进行排序<xref:System.Collections.Generic.List%601>之前执行的操作 (如<xref:System.Collections.Generic.List%601.BinarySearch%2A>)，需要<xref:System.Collections.Generic.List%601>进行排序。</span><span class="sxs-lookup"><span data-stu-id="3edb2-116">You must sort the <xref:System.Collections.Generic.List%601> before performing operations (such as <xref:System.Collections.Generic.List%601.BinarySearch%2A>) that require the <xref:System.Collections.Generic.List%601> to be sorted.</span></span>  
  
 <span data-ttu-id="3edb2-117">可以使用整数索引访问此集合中的元素。</span><span class="sxs-lookup"><span data-stu-id="3edb2-117">Elements in this collection can be accessed using an integer index.</span></span>  <span data-ttu-id="3edb2-118">在此集合中的索引都是从零开始的。</span><span class="sxs-lookup"><span data-stu-id="3edb2-118">Indexes in this collection are zero-based.</span></span>  
  
 <span data-ttu-id="3edb2-119">对于非常大<xref:System.Collections.Generic.List%601>对象，可以通过设置增加到 20 亿元素在 64 位系统上的最大容量`enabled`到的配置元素的特性`true`在运行时环境中。</span><span class="sxs-lookup"><span data-stu-id="3edb2-119">For very large <xref:System.Collections.Generic.List%601> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the  configuration element to `true` in the run-time environment.</span></span>  
  
 <span data-ttu-id="3edb2-120"><xref:System.Collections.Generic.List%601> 接受`null`是有效的引用值类型以及允许重复的元素。</span><span class="sxs-lookup"><span data-stu-id="3edb2-120"><xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="3edb2-121">不可变版本<xref:System.Collections.Generic.List%601>类，请参阅<xref:System.Collections.Immutable.ImmutableList%601>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-121">For an immutable version of the <xref:System.Collections.Generic.List%601> class, see <xref:System.Collections.Immutable.ImmutableList%601>.</span></span>  
  
## <a name="performance-considerations"></a><span data-ttu-id="3edb2-122">性能注意事项</span><span class="sxs-lookup"><span data-stu-id="3edb2-122">Performance Considerations</span></span>  
 <span data-ttu-id="3edb2-123">在决定是否使用<xref:System.Collections.Generic.List%601>或<xref:System.Collections.ArrayList>类，两者都具有类似的功能，请记住，<xref:System.Collections.Generic.List%601>类在大多数情况下更好地执行，并是类型安全的。</span><span class="sxs-lookup"><span data-stu-id="3edb2-123">In deciding whether to use the <xref:System.Collections.Generic.List%601> or <xref:System.Collections.ArrayList> class, both of which have similar functionality, remember that the <xref:System.Collections.Generic.List%601> class performs better in most cases and is type safe.</span></span> <span data-ttu-id="3edb2-124">如果引用类型用于类型`T`的<xref:System.Collections.Generic.List%601>类，两个类的行为是完全相同。</span><span class="sxs-lookup"><span data-stu-id="3edb2-124">If a reference type is used for type `T` of the <xref:System.Collections.Generic.List%601> class, the behavior of the two classes is identical.</span></span> <span data-ttu-id="3edb2-125">但是，如果值类型用于类型`T`，您需要考虑实现和装箱问题。</span><span class="sxs-lookup"><span data-stu-id="3edb2-125">However, if a value type is used for type `T`, you need to consider implementation and boxing issues.</span></span>  
  
 <span data-ttu-id="3edb2-126">如果值类型用于类型`T`，则编译器将生成的实现<xref:System.Collections.Generic.List%601>专门针对该值类型的类。</span><span class="sxs-lookup"><span data-stu-id="3edb2-126">If a value type is used for type `T`, the compiler generates an implementation of the <xref:System.Collections.Generic.List%601> class specifically for that value type.</span></span> <span data-ttu-id="3edb2-127">这意味着一个列表元素的<xref:System.Collections.Generic.List%601>对象不需要进行装箱前可以使用该元素，并且创建大约 500 个列表元素后保存未装箱列表元素的内存大于用来生成的类实现的内存。</span><span class="sxs-lookup"><span data-stu-id="3edb2-127">That means a list element of a <xref:System.Collections.Generic.List%601> object does not have to be boxed before the element can be used, and after about 500 list elements are created the memory saved not boxing list elements is greater than the memory used to generate the class implementation.</span></span>  
  
 <span data-ttu-id="3edb2-128">确保用于类型的值类型`T`实现<xref:System.IEquatable%601>泛型接口。</span><span class="sxs-lookup"><span data-stu-id="3edb2-128">Make certain the value type used for type `T` implements the <xref:System.IEquatable%601> generic interface.</span></span> <span data-ttu-id="3edb2-129">如果不，等的方法<xref:System.Collections.Generic.List%601.Contains%2A>必须调用<xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType>框受影响的列表元素的方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-129">If not, methods such as <xref:System.Collections.Generic.List%601.Contains%2A> must call the <xref:System.Object.Equals%28System.Object%29?displayProperty=nameWithType> method, which boxes the affected list element.</span></span> <span data-ttu-id="3edb2-130">如果值类型实现<xref:System.IComparable>接口，并且您拥有源代码，还实现<xref:System.IComparable%601>泛型接口，以防止<xref:System.Collections.Generic.List%601.BinarySearch%2A>和<xref:System.Collections.Generic.List%601.Sort%2A>中装箱列表元素的方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-130">If the value type implements the <xref:System.IComparable> interface and you own the source code, also implement the <xref:System.IComparable%601> generic interface to prevent the <xref:System.Collections.Generic.List%601.BinarySearch%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> methods from boxing list elements.</span></span> <span data-ttu-id="3edb2-131">如果您不拥有的源代码，则传递<xref:System.Collections.Generic.IComparer%601>对象传递给<xref:System.Collections.Generic.List%601.BinarySearch%2A>和<xref:System.Collections.Generic.List%601.Sort%2A>方法</span><span class="sxs-lookup"><span data-stu-id="3edb2-131">If you do not own the source code, pass an <xref:System.Collections.Generic.IComparer%601> object to the <xref:System.Collections.Generic.List%601.BinarySearch%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> methods</span></span>  
  
 <span data-ttu-id="3edb2-132">它是为您带来益处，若要使用的特定于类型的实现<xref:System.Collections.Generic.List%601>类而不是使用<xref:System.Collections.ArrayList>类或自己编写强类型化的包装集合。</span><span class="sxs-lookup"><span data-stu-id="3edb2-132">It is to your advantage to use the type-specific implementation of the <xref:System.Collections.Generic.List%601> class instead of using the <xref:System.Collections.ArrayList> class or writing a strongly typed wrapper collection yourself.</span></span> <span data-ttu-id="3edb2-133">原因是您的实现必须执行什么.NET 框架的用途，且公共语言运行时可以共享 Microsoft 中间语言代码和元数据，您的实现不能。</span><span class="sxs-lookup"><span data-stu-id="3edb2-133">The reason is your implementation must do what the .NET Framework does for you already, and the common language runtime can share Microsoft intermediate language code and metadata, which your implementation cannot.</span></span>  
  
## <a name="f-considerations"></a><span data-ttu-id="3edb2-134">F # 注意事项</span><span class="sxs-lookup"><span data-stu-id="3edb2-134">F# Considerations</span></span>  
 <span data-ttu-id="3edb2-135"><xref:System.Collections.Generic.List%601> F # 代码中不常使用类。</span><span class="sxs-lookup"><span data-stu-id="3edb2-135">The <xref:System.Collections.Generic.List%601> class is used infrequently in F# code.</span></span>  <span data-ttu-id="3edb2-136">相反，[列出了](http://msdn.microsoft.com/library/83102799-f251-42e1-93ef-64232e8c5b1d)，这是不可变、 单向链接列表，通常最好是。</span><span class="sxs-lookup"><span data-stu-id="3edb2-136">Instead, [Lists](http://msdn.microsoft.com/library/83102799-f251-42e1-93ef-64232e8c5b1d), which are immutable, singly-linked lists, are typically preferred.</span></span> <span data-ttu-id="3edb2-137">F # 列表提供有序的、 不可变的一系列值，并支持在函数式开发中使用。</span><span class="sxs-lookup"><span data-stu-id="3edb2-137">An F# List provides an ordered, immutable series of values, and is supported for use in functional-style development.</span></span> <span data-ttu-id="3edb2-138">从 F # 中，使用时<xref:System.Collections.Generic.List%601>类通常由所引用[ResizeArray\<' T >](https://msdn.microsoft.com/library/ee353447.aspx)类型缩写，以避免命名冲突使用 F # 列表</span><span class="sxs-lookup"><span data-stu-id="3edb2-138">When used from F#, the <xref:System.Collections.Generic.List%601> class is typically referred to by the  [ResizeArray\<'T>](https://msdn.microsoft.com/library/ee353447.aspx) type abbreviation to avoid naming conflicts with F# Lists</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-139">下面的示例演示如何添加、 删除和插入中的简单业务对象<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-139">The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 <span data-ttu-id="3edb2-140">下面的示例演示一些属性和方法的<xref:System.Collections.Generic.List%601>字符串类型的泛型类。</span><span class="sxs-lookup"><span data-stu-id="3edb2-140">The following example demonstrates several properties and methods of the <xref:System.Collections.Generic.List%601> generic class of type string.</span></span> <span data-ttu-id="3edb2-141">(有关的示例<xref:System.Collections.Generic.List%601>复杂类型，请参阅<xref:System.Collections.Generic.List%601.Contains%2A>方法。)</span><span class="sxs-lookup"><span data-stu-id="3edb2-141">(For an example of a <xref:System.Collections.Generic.List%601> of complex types, see the <xref:System.Collections.Generic.List%601.Contains%2A> method.)</span></span>  
  
 <span data-ttu-id="3edb2-142">默认构造函数用于具有默认容量创建字符串的列表。</span><span class="sxs-lookup"><span data-stu-id="3edb2-142">The default constructor is used to create a list of strings with the default capacity.</span></span> <span data-ttu-id="3edb2-143"><xref:System.Collections.Generic.List%601.Capacity%2A>显示属性，然后<xref:System.Collections.Generic.List%601.Add%2A>方法用于将添加多个项。</span><span class="sxs-lookup"><span data-stu-id="3edb2-143">The <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed and then the <xref:System.Collections.Generic.List%601.Add%2A> method is used to add several items.</span></span> <span data-ttu-id="3edb2-144">会列出项目，并<xref:System.Collections.Generic.List%601.Capacity%2A>属性显示同样，与<xref:System.Collections.Generic.List%601.Count%2A>属性，以显示根据需要是否增加容量。</span><span class="sxs-lookup"><span data-stu-id="3edb2-144">The items are listed, and the <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed again, along with the <xref:System.Collections.Generic.List%601.Count%2A> property, to show that the capacity has been increased as needed.</span></span>  
  
 <span data-ttu-id="3edb2-145"><xref:System.Collections.Generic.List%601.Contains%2A>方法用于测试的列表中的项是否存在<xref:System.Collections.Generic.List%601.Insert%2A>方法用于插入新项中间列表中，然后再次显示列表的内容。</span><span class="sxs-lookup"><span data-stu-id="3edb2-145">The <xref:System.Collections.Generic.List%601.Contains%2A> method is used to test for the presence of an item in the list, the <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert a new item in the middle of the list, and the contents of the list are displayed again.</span></span>  
  
 <span data-ttu-id="3edb2-146">默认值<xref:System.Collections.Generic.List%601.Item%2A>使用属性 （C# 中为索引器） 来检索项，<xref:System.Collections.Generic.List%601.Remove%2A>方法用于删除重复项之前，添加的第一个实例，并再次显示内容。</span><span class="sxs-lookup"><span data-stu-id="3edb2-146">The default <xref:System.Collections.Generic.List%601.Item%2A> property (the indexer in C#) is used to retrieve an item, the <xref:System.Collections.Generic.List%601.Remove%2A> method is used to remove the first instance of the duplicate item added earlier, and the contents are displayed again.</span></span> <span data-ttu-id="3edb2-147"><xref:System.Collections.Generic.List%601.Remove%2A>方法始终会删除它遇到的第一个实例。</span><span class="sxs-lookup"><span data-stu-id="3edb2-147">The <xref:System.Collections.Generic.List%601.Remove%2A> method always removes the first instance it encounters.</span></span>  
  
 <span data-ttu-id="3edb2-148"><xref:System.Collections.Generic.List%601.TrimExcess%2A>方法用于减少容量以匹配计数，并<xref:System.Collections.Generic.List%601.Capacity%2A>和<xref:System.Collections.Generic.List%601.Count%2A>属性将显示。</span><span class="sxs-lookup"><span data-stu-id="3edb2-148">The <xref:System.Collections.Generic.List%601.TrimExcess%2A> method is used to reduce the capacity to match the count, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed.</span></span> <span data-ttu-id="3edb2-149">如果未使用的容量小于 10%的总容量，列表将不具有已调整大小。</span><span class="sxs-lookup"><span data-stu-id="3edb2-149">If the unused capacity had been less than 10 percent of total capacity, the list would not have been resized.</span></span>  
  
 <span data-ttu-id="3edb2-150">最后，<xref:System.Collections.Generic.List%601.Clear%2A>方法用于从列表中，删除所有项并<xref:System.Collections.Generic.List%601.Capacity%2A>和<xref:System.Collections.Generic.List%601.Count%2A>属性将显示。</span><span class="sxs-lookup"><span data-stu-id="3edb2-150">Finally, the <xref:System.Collections.Generic.List%601.Clear%2A> method is used to remove all items from the list, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="3edb2-151">公共静态 (<see langword="Shared" />在 Visual Basic 中) 的此类型的成员是线程安全。</span>
      <span class="sxs-lookup">
        <span data-stu-id="3edb2-151">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span>
      </span>
      <span data-ttu-id="3edb2-152">但不保证所有实例成员都是线程安全的。</span>
      <span class="sxs-lookup">
        <span data-stu-id="3edb2-152">Any instance members are not guaranteed to be thread safe.</span>
      </span>
      <span data-ttu-id="3edb2-153">则可以安全地执行多个读取的操作<see cref="T:System.Collections.Generic.List`1" />，但如果在读取时修改该集合，可能会出现问题。</span>
      <span class="sxs-lookup">
        <span data-stu-id="3edb2-153">It is safe to perform multiple read operations on a <see cref="T:System.Collections.Generic.List`1" />, but issues can occur if the collection is modified while it’s being read.</span>
      </span>
      <span data-ttu-id="3edb2-154">若要确保线程安全，读取期间锁定集合，或写操作。</span>
      <span class="sxs-lookup">
        <span data-stu-id="3edb2-154">To ensure thread safety, lock the collection during a read or write operation.</span>
      </span>
      <span data-ttu-id="3edb2-155">若要启用集合由多个线程用于读取和写入访问，必须实现自己的同步。</span>
      <span class="sxs-lookup">
        <span data-stu-id="3edb2-155">To enable a collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span>
      </span>
      <span data-ttu-id="3edb2-156">使用内置同步集合，请参阅中的类<see cref="N:System.Collections.Concurrent" />命名空间。</span>
      <span class="sxs-lookup">
        <span data-stu-id="3edb2-156">For collections with built-in synchronization, see the classes in the <see cref="N:System.Collections.Concurrent" /> namespace.</span>
      </span>
      <span data-ttu-id="3edb2-157">本质上是线程 – 安全的替代方法，请参阅<see cref="T:System.Collections.Immutable.ImmutableList`1" />类。</span>
      <span class="sxs-lookup">
        <span data-stu-id="3edb2-157">For an inherently thread–safe alternative, see the <see cref="T:System.Collections.Immutable.ImmutableList`1" /> class.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Collections.IList" />
    <altmember cref="T:System.Collections.Immutable.ImmutableList`1" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3edb2-158">初始化 <see cref="T:System.Collections.Generic.List`1" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-158">Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public List ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; List();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3edb2-159">初始化 <see cref="T:System.Collections.Generic.List`1" /> 类的新实例，该实例为空并且具有默认初始容量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-159">Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1" /> class that is empty and has the default initial capacity.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-160">容量<xref:System.Collections.Generic.List%601>是元素数目的<xref:System.Collections.Generic.List%601>可以容纳。</span><span class="sxs-lookup"><span data-stu-id="3edb2-160">The capacity of a <xref:System.Collections.Generic.List%601> is the number of elements that the <xref:System.Collections.Generic.List%601> can hold.</span></span> <span data-ttu-id="3edb2-161">元素添加到<xref:System.Collections.Generic.List%601>，自动增加容量所要求的重新分配内部数组。</span><span class="sxs-lookup"><span data-stu-id="3edb2-161">As elements are added to a <xref:System.Collections.Generic.List%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="3edb2-162">如果可以估计集合的大小，使用<xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29>构造函数和指定的初始容量消除了需要执行多个大小调整操作，同时将元素添加到<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-162">If the size of the collection can be estimated, using the <xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29> constructor and specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="3edb2-163">可以通过调用减少容量<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法或通过设置<xref:System.Collections.Generic.List%601.Capacity%2A>属性显式。</span><span class="sxs-lookup"><span data-stu-id="3edb2-163">The capacity can be decreased by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly.</span></span> <span data-ttu-id="3edb2-164">减少容量重新分配内存并将中的所有元素都复制<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-164">Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="3edb2-165">此构造函数是 o （1） 操作。</span><span class="sxs-lookup"><span data-stu-id="3edb2-165">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-166">下面的示例演示的默认构造函数<xref:System.Collections.Generic.List%601>泛型类。</span><span class="sxs-lookup"><span data-stu-id="3edb2-166">The following example demonstrates the default constructor of the <xref:System.Collections.Generic.List%601> generic class.</span></span> <span data-ttu-id="3edb2-167">默认构造函数创建列表，其中默认容量，如下所示通过显示<xref:System.Collections.Generic.List%601.Capacity%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="3edb2-167">The default constructor creates a list with the default capacity, as demonstrated by displaying the <xref:System.Collections.Generic.List%601.Capacity%2A> property.</span></span>  
  
 <span data-ttu-id="3edb2-168">该示例添加、 插入、 和移除项，显示如何容量更改使用这些方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-168">The example adds, inserts, and removes items, showing how the capacity changes as these methods are used.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public List (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; List(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.List&lt;'T&gt; : seq&lt;'T&gt; -&gt; System.Collections.Generic.List&lt;'T&gt;" Usage="new System.Collections.Generic.List&lt;'T&gt; collection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection">
          <span data-ttu-id="3edb2-169">一个集合，其元素被复制到新列表中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-169">The collection whose elements are copied to the new list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-170">初始化 <see cref="T:System.Collections.Generic.List`1" /> 类的新实例，该实例包含从指定集合复制的元素并且具有足够的容量来容纳所复制的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-170">Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1" /> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-171">将元素复制到<xref:System.Collections.Generic.List%601>读取集合的枚举器的顺序相同。</span><span class="sxs-lookup"><span data-stu-id="3edb2-171">The elements are copied onto the <xref:System.Collections.Generic.List%601> in the same order they are read by the enumerator of the collection.</span></span>  
  
 <span data-ttu-id="3edb2-172">此构造函数是 O (*n*) 操作，其中*n*是中的元素数`collection`。</span><span class="sxs-lookup"><span data-stu-id="3edb2-172">This constructor is an O(*n*) operation, where *n* is the number of elements in `collection`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-173">下面的示例演示<xref:System.Collections.Generic.List%601.%23ctor%2A>构造函数和各种方法的<xref:System.Collections.Generic.List%601>对范围进行操作的类。</span><span class="sxs-lookup"><span data-stu-id="3edb2-173">The following example demonstrates the <xref:System.Collections.Generic.List%601.%23ctor%2A> constructor and various methods of the <xref:System.Collections.Generic.List%601> class that act on ranges.</span></span> <span data-ttu-id="3edb2-174">创建一个字符串数组并将其传递给构造函数中，填充数组的元素列表。</span><span class="sxs-lookup"><span data-stu-id="3edb2-174">An array of strings is created and passed to the constructor, populating the list with the elements of the array.</span></span> <span data-ttu-id="3edb2-175"><xref:System.Collections.Generic.List%601.Capacity%2A>属性然后会显示，显示的初始容量正好就是需要输入的元素。</span><span class="sxs-lookup"><span data-stu-id="3edb2-175">The <xref:System.Collections.Generic.List%601.Capacity%2A> property is then displayed, to show that the initial capacity is exactly what is required to hold the input elements.</span></span>  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3edb2-176">
            <paramref name="collection" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-176">
              <paramref name="collection" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.Generic.IEnumerable`1" />
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public List (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; List(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.List&lt;'T&gt; : int -&gt; System.Collections.Generic.List&lt;'T&gt;" Usage="new System.Collections.Generic.List&lt;'T&gt; capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">
          <span data-ttu-id="3edb2-177">新列表最初可以存储的元素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-177">The number of elements that the new list can initially store.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-178">初始化 <see cref="T:System.Collections.Generic.List`1" /> 类的新实例，该实例为空并且具有指定的初始容量。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-178">Initializes a new instance of the <see cref="T:System.Collections.Generic.List`1" /> class that is empty and has the specified initial capacity.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-179">容量<xref:System.Collections.Generic.List%601>是元素数目的<xref:System.Collections.Generic.List%601>可以容纳。</span><span class="sxs-lookup"><span data-stu-id="3edb2-179">The capacity of a <xref:System.Collections.Generic.List%601> is the number of elements that the <xref:System.Collections.Generic.List%601> can hold.</span></span> <span data-ttu-id="3edb2-180">元素添加到<xref:System.Collections.Generic.List%601>，自动增加容量所要求的重新分配内部数组。</span><span class="sxs-lookup"><span data-stu-id="3edb2-180">As elements are added to a <xref:System.Collections.Generic.List%601>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="3edb2-181">如果可以估计集合的大小，指定的初始容量，则无需要执行多个大小调整操作，同时将元素添加到<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-181">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="3edb2-182">可以通过调用减少容量<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法或通过设置<xref:System.Collections.Generic.List%601.Capacity%2A>属性显式。</span><span class="sxs-lookup"><span data-stu-id="3edb2-182">The capacity can be decreased by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly.</span></span> <span data-ttu-id="3edb2-183">减少容量重新分配内存并将中的所有元素都复制<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-183">Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="3edb2-184">此构造函数是 O (*n*) 操作，其中*n*是`capacity`。</span><span class="sxs-lookup"><span data-stu-id="3edb2-184">This constructor is an O(*n*) operation, where *n* is `capacity`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-185">下面的示例演示<xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="3edb2-185">The following example demonstrates the <xref:System.Collections.Generic.List%601.%23ctor%28System.Int32%29> constructor.</span></span> <span data-ttu-id="3edb2-186">一个<xref:System.Collections.Generic.List%601>的容量为 4 的字符串创建，因为列表的最终大小已知恰好为 4。</span><span class="sxs-lookup"><span data-stu-id="3edb2-186">A <xref:System.Collections.Generic.List%601> of strings with a capacity of 4 is created, because the ultimate size of the list is known to be exactly 4.</span></span> <span data-ttu-id="3edb2-187">列表中填充了四个字符串，并且通过使用创建的只读副本<xref:System.Collections.Generic.List%601.AsReadOnly%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-187">The list is populated with four strings, and a read-only copy is created by using the <xref:System.Collections.Generic.List%601.AsReadOnly%2A> method.</span></span>  
  
 [!code-cpp[List\`1_AsReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_AsReadOnly/cpp/source.cpp#1)]
 [!code-csharp[List\`1_AsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_AsReadOnly/cs/source.cs#1)]
 [!code-vb[List\`1_AsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_AsReadOnly/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3edb2-188">
            <paramref name="capacity" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-188">
              <paramref name="capacity" /> is less than 0.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(T item);" />
      <MemberSignature Language="F#" Value="abstract member Add : 'T -&gt; unit&#xA;override this.Add : 'T -&gt; unit" Usage="list.Add item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="3edb2-189">要添加到 <see cref="T:System.Collections.Generic.List`1" /> 末尾的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-189">The object to be added to the end of the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="3edb2-190">对于引用类型，该值可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-190">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-191">将对象添加到 <see cref="T:System.Collections.Generic.List`1" /> 的结尾处。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-191">Adds an object to the end of the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-192"><xref:System.Collections.Generic.List%601> 接受`null`是有效的引用值类型以及允许重复的元素。</span><span class="sxs-lookup"><span data-stu-id="3edb2-192"><xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="3edb2-193">如果<xref:System.Collections.Generic.List%601.Count%2A>已等于<xref:System.Collections.Generic.List%601.Capacity%2A>，则容量的<xref:System.Collections.Generic.List%601>自动重新分配内部数组中，增加和现有元素之前添加新元素将复制到新数组。</span><span class="sxs-lookup"><span data-stu-id="3edb2-193">If <xref:System.Collections.Generic.List%601.Count%2A> already equals <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="3edb2-194">如果<xref:System.Collections.Generic.List%601.Count%2A>是小于<xref:System.Collections.Generic.List%601.Capacity%2A>，此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="3edb2-194">If <xref:System.Collections.Generic.List%601.Count%2A> is less than <xref:System.Collections.Generic.List%601.Capacity%2A>, this method is an O(1) operation.</span></span> <span data-ttu-id="3edb2-195">如果需要增加以容纳新元素的容量，此方法将成为 O (*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-195">If the capacity needs to be increased to accommodate the new element, this method becomes an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-196">下面的示例演示如何添加、 删除和插入中的简单业务对象<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-196">The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 <span data-ttu-id="3edb2-197">下面的示例演示几个属性和方法<xref:System.Collections.Generic.List%601>泛型类，其中包括<xref:System.Collections.Generic.List%601.Add%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-197">The following example demonstrates several properties and methods of the <xref:System.Collections.Generic.List%601> generic class, including the <xref:System.Collections.Generic.List%601.Add%2A> method.</span></span> <span data-ttu-id="3edb2-198">默认构造函数用于创建字符串列表的容量为 0。</span><span class="sxs-lookup"><span data-stu-id="3edb2-198">The default constructor is used to create a list of strings with a capacity of 0.</span></span> <span data-ttu-id="3edb2-199"><xref:System.Collections.Generic.List%601.Capacity%2A>显示属性，然后<xref:System.Collections.Generic.List%601.Add%2A>方法用于将添加多个项。</span><span class="sxs-lookup"><span data-stu-id="3edb2-199">The <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed, and then the <xref:System.Collections.Generic.List%601.Add%2A> method is used to add several items.</span></span> <span data-ttu-id="3edb2-200">会列出项目，并<xref:System.Collections.Generic.List%601.Capacity%2A>属性显示同样，与<xref:System.Collections.Generic.List%601.Count%2A>属性，以显示根据需要是否增加容量。</span><span class="sxs-lookup"><span data-stu-id="3edb2-200">The items are listed, and the <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed again, along with the <xref:System.Collections.Generic.List%601.Count%2A> property, to show that the capacity has been increased as needed.</span></span>  
  
 <span data-ttu-id="3edb2-201">其他属性和方法用于搜索、 插入和删除元素从列表中，最后以清除列表。</span><span class="sxs-lookup"><span data-stu-id="3edb2-201">Other properties and methods are used to search for, insert, and remove elements from the list, and finally to clear the list.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="member this.AddRange : seq&lt;'T&gt; -&gt; unit" Usage="list.AddRange collection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="collection">
          <span data-ttu-id="3edb2-202">应将其元素添加到 <see cref="T:System.Collections.Generic.List`1" /> 的末尾的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-202">The collection whose elements should be added to the end of the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="3edb2-203">集合自身不能为 <see langword="null" />，但它可以包含为 <see langword="null" /> 的元素（如果类型 <c>T</c> 为引用类型）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-203">The collection itself cannot be <see langword="null" />, but it can contain elements that are <see langword="null" />, if type <c>T</c> is a reference type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-204">将指定集合的元素添加到 <see cref="T:System.Collections.Generic.List`1" /> 的末尾。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-204">Adds the elements of the specified collection to the end of the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-205">集合中元素的顺序将保留在<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-205">The order of the elements in the collection is preserved in the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="3edb2-206">如果新<xref:System.Collections.Generic.List%601.Count%2A>(当前<xref:System.Collections.Generic.List%601.Count%2A>plus 集合的大小) 将大于<xref:System.Collections.Generic.List%601.Capacity%2A>，则容量的<xref:System.Collections.Generic.List%601>增加通过自动重新分配要容纳新元素的内部数组和之前添加新元素，现有元素将复制到新数组。</span><span class="sxs-lookup"><span data-stu-id="3edb2-206">If the new <xref:System.Collections.Generic.List%601.Count%2A> (the current <xref:System.Collections.Generic.List%601.Count%2A> plus the size of the collection) will be greater than <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.</span></span>  
  
 <span data-ttu-id="3edb2-207">如果<xref:System.Collections.Generic.List%601>可以容纳新元素而不增加<xref:System.Collections.Generic.List%601.Capacity%2A>，此方法为 O (*n*) 操作，其中*n*是要添加的元素数。</span><span class="sxs-lookup"><span data-stu-id="3edb2-207">If the <xref:System.Collections.Generic.List%601> can accommodate the new elements without increasing the <xref:System.Collections.Generic.List%601.Capacity%2A>, this method is an O(*n*) operation, where *n* is the number of elements to be added.</span></span> <span data-ttu-id="3edb2-208">如果需要增加以容纳新元素的容量，此方法将成为 O (*n* + *m*) 操作，其中*n*是元素的数目要添加并*m*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-208">If the capacity needs to be increased to accommodate the new elements, this method becomes an O(*n* + *m*) operation, where *n* is the number of elements to be added and *m* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-209">下面的示例演示<xref:System.Collections.Generic.List%601.AddRange%2A>方法和各种其他方法的<xref:System.Collections.Generic.List%601>对范围进行操作的类。</span><span class="sxs-lookup"><span data-stu-id="3edb2-209">The following example demonstrates the <xref:System.Collections.Generic.List%601.AddRange%2A> method and various other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges.</span></span> <span data-ttu-id="3edb2-210">创建一个字符串数组并将其传递给构造函数中，填充数组的元素列表。</span><span class="sxs-lookup"><span data-stu-id="3edb2-210">An array of strings is created and passed to the constructor, populating the list with the elements of the array.</span></span> <span data-ttu-id="3edb2-211"><xref:System.Collections.Generic.List%601.AddRange%2A>调用方法时，与作为其参数列表。</span><span class="sxs-lookup"><span data-stu-id="3edb2-211">The <xref:System.Collections.Generic.List%601.AddRange%2A> method is called, with the list as its argument.</span></span> <span data-ttu-id="3edb2-212">结果是列表的当前元素添加到列表中，复制所有元素的末尾。</span><span class="sxs-lookup"><span data-stu-id="3edb2-212">The result is that the current elements of the list are added to the end of the list, duplicating all the elements.</span></span>  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3edb2-213">
            <paramref name="collection" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-213">
              <paramref name="collection" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.Generic.IEnumerable`1" />
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
        <altmember cref="M:System.Collections.Generic.List`1.Add(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="AsReadOnly">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; AsReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;!T&gt; AsReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.AsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Function AsReadOnly () As ReadOnlyCollection(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::ObjectModel::ReadOnlyCollection&lt;T&gt; ^ AsReadOnly();" />
      <MemberSignature Language="F#" Value="member this.AsReadOnly : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;'T&gt;" Usage="list.AsReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3edb2-214">返回当前集合的只读 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 包装器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-214">Returns a read-only <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> wrapper for the current collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-215">一个对象，作为围绕当前 <see cref="T:System.Collections.Generic.List`1" /> 的只读包装器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-215">An object that acts as a read-only wrapper around the current <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-216">若要防止对进行任何修改<xref:System.Collections.Generic.List%601>对象，将其公开只能通过此包装器。</span><span class="sxs-lookup"><span data-stu-id="3edb2-216">To prevent any modifications to the <xref:System.Collections.Generic.List%601> object, expose it only through this wrapper.</span></span> <span data-ttu-id="3edb2-217">一个<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>对象未公开修改集合的方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-217">A  <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> object does not expose methods that modify the collection.</span></span> <span data-ttu-id="3edb2-218">但是，如果对更改基础<xref:System.Collections.Generic.List%601>对象，只读集合反映这些更改。</span><span class="sxs-lookup"><span data-stu-id="3edb2-218">However, if changes are made to the underlying <xref:System.Collections.Generic.List%601> object, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="3edb2-219">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="3edb2-219">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-220">下面的示例演示<xref:System.Collections.Generic.List%601.AsReadOnly%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-220">The following example demonstrates the <xref:System.Collections.Generic.List%601.AsReadOnly%2A> method.</span></span> <span data-ttu-id="3edb2-221">一个<xref:System.Collections.Generic.List%601>的容量为 4 的字符串创建，因为列表的最终大小已知恰好为 4。</span><span class="sxs-lookup"><span data-stu-id="3edb2-221">A <xref:System.Collections.Generic.List%601> of strings with a capacity of 4 is created, because the ultimate size of the list is known to be exactly 4.</span></span> <span data-ttu-id="3edb2-222">列表中填充了四个字符串，并<xref:System.Collections.Generic.List%601.AsReadOnly%2A>方法用于获取一个只读的<xref:System.Collections.Generic.IList%601>包装原始列表的泛型接口实现。</span><span class="sxs-lookup"><span data-stu-id="3edb2-222">The list is populated with four strings, and the <xref:System.Collections.Generic.List%601.AsReadOnly%2A> method is used to get a read-only <xref:System.Collections.Generic.IList%601> generic interface implementation that wraps the original list.</span></span>  
  
 <span data-ttu-id="3edb2-223">原始列表的元素设置为"Coelophysis"使用<xref:System.Collections.Generic.List%601.Item%2A>属性 （索引器在 C# 中），只读列表的内容将显示和再次以证明它只是原始列表的包装器。</span><span class="sxs-lookup"><span data-stu-id="3edb2-223">An element of the original list is set to "Coelophysis" using the <xref:System.Collections.Generic.List%601.Item%2A> property (the indexer in C#), and the contents of the read-only list are displayed again to demonstrate that it is just a wrapper for the original list.</span></span>  
  
 [!code-cpp[List\`1_AsReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_AsReadOnly/cpp/source.cpp#1)]
 [!code-csharp[List\`1_AsReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_AsReadOnly/cs/source.cs#1)]
 [!code-vb[List\`1_AsReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_AsReadOnly/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BinarySearch">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3edb2-224">使用对分检索算法在已排序的 <see cref="T:System.Collections.Generic.List`1" /> 或它的一部分中查找特定元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-224">Uses a binary search algorithm to locate a specific element in the sorted <see cref="T:System.Collections.Generic.List`1" /> or a portion of it.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public int BinarySearch (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 BinarySearch(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.BinarySearch(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function BinarySearch (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int BinarySearch(T item);" />
      <MemberSignature Language="F#" Value="member this.BinarySearch : 'T -&gt; int" Usage="list.BinarySearch item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="3edb2-225">要定位的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-225">The object to locate.</span>
          </span>
          <span data-ttu-id="3edb2-226">对于引用类型，该值可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-226">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-227">使用默认的比较器在整个已排序的 <see cref="T:System.Collections.Generic.List`1" /> 中搜索元素，并返回该元素从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-227">Searches the entire sorted <see cref="T:System.Collections.Generic.List`1" /> for an element using the default comparer and returns the zero-based index of the element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-228">如果找到 <paramref name="item" />，则为已排序的 <see cref="T:System.Collections.Generic.List`1" /> 中 <paramref name="item" /> 的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="item" /> 的下一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.Collections.Generic.List`1.Count" /> 的按位求补。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-228">The zero-based index of <paramref name="item" /> in the sorted <see cref="T:System.Collections.Generic.List`1" />, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.Collections.Generic.List`1.Count" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-229">此方法使用默认比较器<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>类型`T`以确定列表元素的顺序。</span><span class="sxs-lookup"><span data-stu-id="3edb2-229">This method uses the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> for type `T` to determine the order of list elements.</span></span> <span data-ttu-id="3edb2-230"><xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>属性检查是否类型`T`实现<xref:System.IComparable%601>泛型接口，并使用该实现，如果可用。</span><span class="sxs-lookup"><span data-stu-id="3edb2-230">The <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> property checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.</span></span>  <span data-ttu-id="3edb2-231">如果不是，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>检查是否类型`T`实现<xref:System.IComparable>接口。</span><span class="sxs-lookup"><span data-stu-id="3edb2-231">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable> interface.</span></span>  <span data-ttu-id="3edb2-232">如果类型`T`不实现任何一个接口，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>引发<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-232">If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="3edb2-233"><xref:System.Collections.Generic.List%601>必须已排序根据比较器实现中; 否则，结果是不正确。</span><span class="sxs-lookup"><span data-stu-id="3edb2-233">The <xref:System.Collections.Generic.List%601> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.</span></span>  
  
 <span data-ttu-id="3edb2-234">比较`null`与任何引用类型允许和不会生成异常时使用<xref:System.IComparable%601>泛型接口。</span><span class="sxs-lookup"><span data-stu-id="3edb2-234">Comparing `null` with any reference type is allowed and does not generate an exception when using the <xref:System.IComparable%601> generic interface.</span></span> <span data-ttu-id="3edb2-235">排序时，`null`被视为小于任何其他对象。</span><span class="sxs-lookup"><span data-stu-id="3edb2-235">When sorting, `null` is considered to be less than any other object.</span></span>  
  
 <span data-ttu-id="3edb2-236">如果<xref:System.Collections.Generic.List%601>多个元素具有相同的值，该方法将返回只包含其中一个匹配项，并且它可能会返回任何一个匹配项，不一定是第一个。</span><span class="sxs-lookup"><span data-stu-id="3edb2-236">If the <xref:System.Collections.Generic.List%601> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</span></span>  
  
 <span data-ttu-id="3edb2-237">如果<xref:System.Collections.Generic.List%601>不包含指定的值，该方法返回一个负整数。</span><span class="sxs-lookup"><span data-stu-id="3edb2-237">If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer.</span></span> <span data-ttu-id="3edb2-238">您可以应用于此负整数，以获取大于搜索值的第一个元素的索引的按位求补运算 （~）。</span><span class="sxs-lookup"><span data-stu-id="3edb2-238">You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.</span></span> <span data-ttu-id="3edb2-239">当将值插入到<xref:System.Collections.Generic.List%601>，此索引应使用作为插入点，以保持排序顺序。</span><span class="sxs-lookup"><span data-stu-id="3edb2-239">When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order.</span></span>  
  
 <span data-ttu-id="3edb2-240">此方法为 O (log *n*) 操作，其中*n*是范围中的元素数。</span><span class="sxs-lookup"><span data-stu-id="3edb2-240">This method is an O(log *n*) operation, where *n* is the number of elements in the range.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-241">下面的示例演示<xref:System.Collections.Generic.List%601.Sort>方法重载和<xref:System.Collections.Generic.List%601.BinarySearch%28%600%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="3edb2-241">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method overload.</span></span> <span data-ttu-id="3edb2-242">一个<xref:System.Collections.Generic.List%601>的字符串创建并填充了四个字符串，顺序不分先后。</span><span class="sxs-lookup"><span data-stu-id="3edb2-242">A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order.</span></span> <span data-ttu-id="3edb2-243">显示、 排序，列表，并再次显示。</span><span class="sxs-lookup"><span data-stu-id="3edb2-243">The list is displayed, sorted, and displayed again.</span></span>  
  
 <span data-ttu-id="3edb2-244"><xref:System.Collections.Generic.List%601.BinarySearch%28%600%29>然后使用方法重载的两个字符串的不是在列表中，搜索和<xref:System.Collections.Generic.List%601.Insert%2A>方法用于将它们插入。</span><span class="sxs-lookup"><span data-stu-id="3edb2-244">The <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method overload is then used to search for two strings that are not in the list, and the <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert them.</span></span> <span data-ttu-id="3edb2-245">返回值<xref:System.Collections.Generic.List%601.BinarySearch%28%600%29>方法为负每种情况下，因为字符串不是在列表中。</span><span class="sxs-lookup"><span data-stu-id="3edb2-245">The return value of the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method is negative in each case, because the strings are not in the list.</span></span> <span data-ttu-id="3edb2-246">执行按位求补 (~ 运算符在 C# 和 Visual c + +，`Xor`在 Visual Basic 中的为-1) 的此负号生成大于搜索字符串，并将在此位置中的列表中的第一个元素的索引保留排序顺序。</span><span class="sxs-lookup"><span data-stu-id="3edb2-246">Taking the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of this negative number produces the index of the first element in the list that is larger than the search string, and inserting at this location preserves the sort order.</span></span> <span data-ttu-id="3edb2-247">第二个搜索字符串是大于在列表中，任何元素，因此在列表的末尾处的插入位置。</span><span class="sxs-lookup"><span data-stu-id="3edb2-247">The second search string is larger than any element in the list, so the insertion position is at the end of the list.</span></span>  
  
 [!code-cpp[List\`1_SortSearch#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearch/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearch#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearch/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearch/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3edb2-248">此默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 无法找到 <see cref="T:System.IComparable`1" /> 泛型接口或类型为 <paramref name="T" /> 的 <see cref="T:System.IComparable" /> 接口的实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-248">The default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public int BinarySearch (T item, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 BinarySearch(!T item, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function BinarySearch (item As T, comparer As IComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int BinarySearch(T item, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.BinarySearch : 'T * System.Collections.Generic.IComparer&lt;'T&gt; -&gt; int" Usage="list.BinarySearch (item, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="3edb2-249">要定位的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-249">The object to locate.</span>
          </span>
          <span data-ttu-id="3edb2-250">对于引用类型，该值可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-250">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="3edb2-251">比较元素时要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-251">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements.</span>
          </span>
          <span data-ttu-id="3edb2-252">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-252">-or-</span>
          </span>
          <span data-ttu-id="3edb2-253">如果使用默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" />，则为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-253">
              <see langword="null" /> to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-254">使用指定的比较器在整个已排序的 <see cref="T:System.Collections.Generic.List`1" /> 中搜索元素，并返回该元素从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-254">Searches the entire sorted <see cref="T:System.Collections.Generic.List`1" /> for an element using the specified comparer and returns the zero-based index of the element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-255">如果找到 <paramref name="item" />，则为已排序的 <see cref="T:System.Collections.Generic.List`1" /> 中 <paramref name="item" /> 的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="item" /> 的下一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.Collections.Generic.List`1.Count" /> 的按位求补。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-255">The zero-based index of <paramref name="item" /> in the sorted <see cref="T:System.Collections.Generic.List`1" />, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.Collections.Generic.List`1.Count" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-256">比较器自定义对元素进行比较。</span><span class="sxs-lookup"><span data-stu-id="3edb2-256">The comparer customizes how the elements are compared.</span></span> <span data-ttu-id="3edb2-257">例如，可以使用<xref:System.Collections.CaseInsensitiveComparer>作为要执行不区分大小写的字符串搜索的比较器的实例。</span><span class="sxs-lookup"><span data-stu-id="3edb2-257">For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches.</span></span>  
  
 <span data-ttu-id="3edb2-258">如果`comparer`提供的元素<xref:System.Collections.Generic.List%601>为指定的值使用指定比较<xref:System.Collections.Generic.IComparer%601>实现。</span><span class="sxs-lookup"><span data-stu-id="3edb2-258">If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are compared to the specified value using the specified <xref:System.Collections.Generic.IComparer%601> implementation.</span></span>  
  
 <span data-ttu-id="3edb2-259">如果`comparer`是`null`，默认比较器<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>检查是否类型`T`实现<xref:System.IComparable%601>泛型接口，并使用该实现，如果可用。</span><span class="sxs-lookup"><span data-stu-id="3edb2-259">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.</span></span>  <span data-ttu-id="3edb2-260">如果不是，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>检查是否类型`T`实现<xref:System.IComparable>接口。</span><span class="sxs-lookup"><span data-stu-id="3edb2-260">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable> interface.</span></span>  <span data-ttu-id="3edb2-261">如果类型`T`不实现任何一个接口，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>引发<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-261">If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throws <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="3edb2-262"><xref:System.Collections.Generic.List%601>必须已排序根据比较器实现中; 否则，结果是不正确。</span><span class="sxs-lookup"><span data-stu-id="3edb2-262">The <xref:System.Collections.Generic.List%601> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.</span></span>  
  
 <span data-ttu-id="3edb2-263">比较`null`与任何引用类型允许和不会生成异常时使用<xref:System.IComparable%601>泛型接口。</span><span class="sxs-lookup"><span data-stu-id="3edb2-263">Comparing `null` with any reference type is allowed and does not generate an exception when using the <xref:System.IComparable%601> generic interface.</span></span> <span data-ttu-id="3edb2-264">排序时，`null`被视为小于任何其他对象。</span><span class="sxs-lookup"><span data-stu-id="3edb2-264">When sorting, `null` is considered to be less than any other object.</span></span>  
  
 <span data-ttu-id="3edb2-265">如果<xref:System.Collections.Generic.List%601>多个元素具有相同的值，该方法将返回只包含其中一个匹配项，并且它可能会返回任何一个匹配项，不一定是第一个。</span><span class="sxs-lookup"><span data-stu-id="3edb2-265">If the <xref:System.Collections.Generic.List%601> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</span></span>  
  
 <span data-ttu-id="3edb2-266">如果<xref:System.Collections.Generic.List%601>不包含指定的值，该方法返回一个负整数。</span><span class="sxs-lookup"><span data-stu-id="3edb2-266">If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer.</span></span> <span data-ttu-id="3edb2-267">您可以应用于此负整数，以获取大于搜索值的第一个元素的索引的按位求补运算 （~）。</span><span class="sxs-lookup"><span data-stu-id="3edb2-267">You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.</span></span> <span data-ttu-id="3edb2-268">当将值插入到<xref:System.Collections.Generic.List%601>，此索引应使用作为插入点，以保持排序顺序。</span><span class="sxs-lookup"><span data-stu-id="3edb2-268">When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order.</span></span>  
  
 <span data-ttu-id="3edb2-269">此方法为 O (log *n*) 操作，其中*n*是范围中的元素数。</span><span class="sxs-lookup"><span data-stu-id="3edb2-269">This method is an O(log *n*) operation, where *n* is the number of elements in the range.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-270">下面的示例演示<xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29>方法重载和<xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="3edb2-270">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload.</span></span>  
  
 <span data-ttu-id="3edb2-271">该示例定义名为 DinoCompare，实现的字符串将替代比较器`IComparer<string>`(`IComparer(Of String)`在 Visual Basic 中`IComparer<String^>`Visual c + +) 泛型接口。</span><span class="sxs-lookup"><span data-stu-id="3edb2-271">The example defines an alternative comparer for strings named DinoCompare, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="3edb2-272">比较器的工作方式如下： 首先，测试比较数是否为`null`，并为 null 引用被视为小于非空。</span><span class="sxs-lookup"><span data-stu-id="3edb2-272">The comparer works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null.</span></span> <span data-ttu-id="3edb2-273">其次，比较字符串长度，并更长的字符串被认为更高版本。</span><span class="sxs-lookup"><span data-stu-id="3edb2-273">Second, the string lengths are compared, and the longer string is deemed to be greater.</span></span> <span data-ttu-id="3edb2-274">第三，如果长度相等，则使用常规字符串比较。</span><span class="sxs-lookup"><span data-stu-id="3edb2-274">Third, if the lengths are equal, ordinary string comparison is used.</span></span>  
  
 <span data-ttu-id="3edb2-275">一个<xref:System.Collections.Generic.List%601>的字符串创建并填充了四个字符串，顺序不分先后。</span><span class="sxs-lookup"><span data-stu-id="3edb2-275">A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order.</span></span> <span data-ttu-id="3edb2-276">列表、 排序使用备用的比较器，并显示再次显示。</span><span class="sxs-lookup"><span data-stu-id="3edb2-276">The list is displayed, sorted using the alternate comparer, and displayed again.</span></span>  
  
 <span data-ttu-id="3edb2-277"><xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>方法重载然后用于搜索将不在列表中，该示例使用的多个字符串。</span><span class="sxs-lookup"><span data-stu-id="3edb2-277">The <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload is then used to search for several strings that are not in the list, employing the alternate comparer.</span></span> <span data-ttu-id="3edb2-278"><xref:System.Collections.Generic.List%601.Insert%2A>方法用来插入字符串。</span><span class="sxs-lookup"><span data-stu-id="3edb2-278">The <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert the strings.</span></span> <span data-ttu-id="3edb2-279">这两种方法都位于名为的函数`SearchAndInsert`，以及代码执行按位求补 (~ 在 C# 和 Visual c + + 运算符`Xor`在 Visual Basic 中的为-1) 返回负号<xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>并将其用作的索引插入的新字符串。</span><span class="sxs-lookup"><span data-stu-id="3edb2-279">These two methods are located in the function named `SearchAndInsert`, along with code to take the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of the negative number returned by <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> and use it as an index for inserting the new string.</span></span>  
  
 [!code-cpp[List\`1_SortSearchComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparer/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearchComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparer/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearchComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparer/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3edb2-280">
            <paramref name="comparer" /> 为 <see langword="null" />，并且默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型接口或类型为 <paramref name="T" /> 的 <see cref="T:System.IComparable" /> 接口的实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-280">
              <paramref name="comparer" /> is <see langword="null" />, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BinarySearch">
      <MemberSignature Language="C#" Value="public int BinarySearch (int index, int count, T item, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 BinarySearch(int32 index, int32 count, !T item, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function BinarySearch (index As Integer, count As Integer, item As T, comparer As IComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int BinarySearch(int index, int count, T item, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.BinarySearch : int * int * 'T * System.Collections.Generic.IComparer&lt;'T&gt; -&gt; int" Usage="list.BinarySearch (index, count, item, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3edb2-281">要搜索范围的从零开始的起始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-281">The zero-based starting index of the range to search.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3edb2-282">要搜索的范围的长度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-282">The length of the range to search.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="3edb2-283">要定位的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-283">The object to locate.</span>
          </span>
          <span data-ttu-id="3edb2-284">对于引用类型，该值可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-284">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="3edb2-285">比较元素时要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现，若要使用默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" />，则为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-285">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements, or <see langword="null" /> to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-286">使用指定的比较器在已排序 <see cref="T:System.Collections.Generic.List`1" /> 的某个元素范围中搜索元素，并返回该元素从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-286">Searches a range of elements in the sorted <see cref="T:System.Collections.Generic.List`1" /> for an element using the specified comparer and returns the zero-based index of the element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-287">如果找到 <paramref name="item" />，则为已排序的 <see cref="T:System.Collections.Generic.List`1" /> 中 <paramref name="item" /> 的从零开始的索引；否则为一个负数，该负数是大于 <paramref name="item" /> 的下一个元素的索引的按位求补。如果没有更大的元素，则为 <see cref="P:System.Collections.Generic.List`1.Count" /> 的按位求补。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-287">The zero-based index of <paramref name="item" /> in the sorted <see cref="T:System.Collections.Generic.List`1" />, if <paramref name="item" /> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="item" /> or, if there is no larger element, the bitwise complement of <see cref="P:System.Collections.Generic.List`1.Count" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-288">比较器自定义对元素进行比较。</span><span class="sxs-lookup"><span data-stu-id="3edb2-288">The comparer customizes how the elements are compared.</span></span> <span data-ttu-id="3edb2-289">例如，可以使用<xref:System.Collections.CaseInsensitiveComparer>作为要执行不区分大小写的字符串搜索的比较器的实例。</span><span class="sxs-lookup"><span data-stu-id="3edb2-289">For example, you can use a <xref:System.Collections.CaseInsensitiveComparer> instance as the comparer to perform case-insensitive string searches.</span></span>  
  
 <span data-ttu-id="3edb2-290">如果`comparer`提供的元素<xref:System.Collections.Generic.List%601>为指定的值使用指定比较<xref:System.Collections.Generic.IComparer%601>实现。</span><span class="sxs-lookup"><span data-stu-id="3edb2-290">If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are compared to the specified value using the specified <xref:System.Collections.Generic.IComparer%601> implementation.</span></span>  
  
 <span data-ttu-id="3edb2-291">如果`comparer`是`null`，默认比较器<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>检查是否类型`T`实现<xref:System.IComparable%601>泛型接口，并使用该实现，如果可用。</span><span class="sxs-lookup"><span data-stu-id="3edb2-291">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.</span></span>  <span data-ttu-id="3edb2-292">如果不是，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>检查是否类型`T`实现<xref:System.IComparable>接口。</span><span class="sxs-lookup"><span data-stu-id="3edb2-292">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable> interface.</span></span>  <span data-ttu-id="3edb2-293">如果类型`T`不实现任何一个接口，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>引发<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-293">If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throws <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="3edb2-294"><xref:System.Collections.Generic.List%601>必须已排序根据比较器实现中; 否则，结果是不正确。</span><span class="sxs-lookup"><span data-stu-id="3edb2-294">The <xref:System.Collections.Generic.List%601> must already be sorted according to the comparer implementation; otherwise, the result is incorrect.</span></span>  
  
 <span data-ttu-id="3edb2-295">比较`null`与任何引用类型允许和不会生成异常时使用<xref:System.IComparable%601>泛型接口。</span><span class="sxs-lookup"><span data-stu-id="3edb2-295">Comparing `null` with any reference type is allowed and does not generate an exception when using the <xref:System.IComparable%601> generic interface.</span></span> <span data-ttu-id="3edb2-296">排序时，`null`被视为小于任何其他对象。</span><span class="sxs-lookup"><span data-stu-id="3edb2-296">When sorting, `null` is considered to be less than any other object.</span></span>  
  
 <span data-ttu-id="3edb2-297">如果<xref:System.Collections.Generic.List%601>多个元素具有相同的值，该方法将返回只包含其中一个匹配项，并且它可能会返回任何一个匹配项，不一定是第一个。</span><span class="sxs-lookup"><span data-stu-id="3edb2-297">If the <xref:System.Collections.Generic.List%601> contains more than one element with the same value, the method returns only one of the occurrences, and it might return any one of the occurrences, not necessarily the first one.</span></span>  
  
 <span data-ttu-id="3edb2-298">如果<xref:System.Collections.Generic.List%601>不包含指定的值，该方法返回一个负整数。</span><span class="sxs-lookup"><span data-stu-id="3edb2-298">If the <xref:System.Collections.Generic.List%601> does not contain the specified value, the method returns a negative integer.</span></span> <span data-ttu-id="3edb2-299">您可以应用于此负整数，以获取大于搜索值的第一个元素的索引的按位求补运算 （~）。</span><span class="sxs-lookup"><span data-stu-id="3edb2-299">You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value.</span></span> <span data-ttu-id="3edb2-300">当将值插入到<xref:System.Collections.Generic.List%601>，此索引应使用作为插入点，以保持排序顺序。</span><span class="sxs-lookup"><span data-stu-id="3edb2-300">When inserting the value into the <xref:System.Collections.Generic.List%601>, this index should be used as the insertion point to maintain the sort order.</span></span>  
  
 <span data-ttu-id="3edb2-301">此方法为 O (log *n*) 操作，其中*n*是范围中的元素数。</span><span class="sxs-lookup"><span data-stu-id="3edb2-301">This method is an O(log *n*) operation, where *n* is the number of elements in the range.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-302">下面的示例演示<xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>方法重载和<xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="3edb2-302">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload.</span></span>  
  
 <span data-ttu-id="3edb2-303">该示例定义名为 DinoCompare，实现的字符串将替代比较器`IComparer<string>`(`IComparer(Of String)`在 Visual Basic 中`IComparer<String^>`Visual c + +) 泛型接口。</span><span class="sxs-lookup"><span data-stu-id="3edb2-303">The example defines an alternative comparer for strings named DinoCompare, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="3edb2-304">比较器的工作方式如下： 首先，测试比较数是否为`null`，并为 null 引用被视为小于非空。</span><span class="sxs-lookup"><span data-stu-id="3edb2-304">The comparer works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null.</span></span> <span data-ttu-id="3edb2-305">其次，比较字符串长度，并更长的字符串被认为更高版本。</span><span class="sxs-lookup"><span data-stu-id="3edb2-305">Second, the string lengths are compared, and the longer string is deemed to be greater.</span></span> <span data-ttu-id="3edb2-306">第三，如果长度相等，则使用常规字符串比较。</span><span class="sxs-lookup"><span data-stu-id="3edb2-306">Third, if the lengths are equal, ordinary string comparison is used.</span></span>  
  
 <span data-ttu-id="3edb2-307">一个<xref:System.Collections.Generic.List%601>的字符串创建并填充一个和示例的名称。</span><span class="sxs-lookup"><span data-stu-id="3edb2-307">A <xref:System.Collections.Generic.List%601> of strings is created and populated with the names of five herbivorous dinosaurs and three carnivorous dinosaurs.</span></span> <span data-ttu-id="3edb2-308">在两个组中，名称不按任何特定的排序顺序。</span><span class="sxs-lookup"><span data-stu-id="3edb2-308">Within each of the two groups, the names are not in any particular sort order.</span></span> <span data-ttu-id="3edb2-309">显示的列表，使用备用的比较器排序该，并再次显示列表。</span><span class="sxs-lookup"><span data-stu-id="3edb2-309">The list is displayed, the range of herbivores is sorted using the alternate comparer, and the list is displayed again.</span></span>  
  
 <span data-ttu-id="3edb2-310"><xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>方法重载然后用于搜索"Brachiosaurus"仅草食范围。</span><span class="sxs-lookup"><span data-stu-id="3edb2-310">The <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload is then used to search only the range of herbivores for "Brachiosaurus".</span></span> <span data-ttu-id="3edb2-311">找不到字符串，并按位求补 (~ 在 C# 和 Visual c + + 运算符`Xor`在 Visual Basic 中的为-1) 返回负号<xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>方法用于插入新的字符串用作索引。</span><span class="sxs-lookup"><span data-stu-id="3edb2-311">The string is not found, and the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of the negative number returned by the <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method is used as an index for inserting the new string.</span></span>  
  
 [!code-cpp[List\`1_SortSearchComparerRange#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearchComparerRange#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearchComparerRange#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparerRange/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3edb2-312">
            <paramref name="index" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-312">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="3edb2-313">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-313">-or-</span>
          </span>
          <span data-ttu-id="3edb2-314">
            <paramref name="count" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-314">
              <paramref name="count" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3edb2-315">
            <paramref name="index" /> 和 <paramref name="count" /> 不表示 <see cref="T:System.Collections.Generic.List`1" /> 中的有效范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-315">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3edb2-316">
            <paramref name="comparer" /> 为 <see langword="null" />，并且默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型接口或类型为 <paramref name="T" /> 的 <see cref="T:System.IComparable" /> 接口的实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-316">
              <paramref name="comparer" /> is <see langword="null" />, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.Generic.IComparer`1" />
        <altmember cref="T:System.IComparable`1" />
      </Docs>
    </Member>
    <Member MemberName="Capacity">
      <MemberSignature Language="C#" Value="public int Capacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Capacity" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.Capacity" />
      <MemberSignature Language="VB.NET" Value="Public Property Capacity As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Capacity { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Capacity : int with get, set" Usage="System.Collections.Generic.List&lt;'T&gt;.Capacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3edb2-317">获取或设置该内部数据结构在不调整大小的情况下能够容纳的元素总数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-317">Gets or sets the total number of elements the internal data structure can hold without resizing.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3edb2-318">在需要调整大小之前 <see cref="T:System.Collections.Generic.List`1" /> 可包含的元素数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-318">The number of elements that the <see cref="T:System.Collections.Generic.List`1" /> can contain before resizing is required.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-319"><xref:System.Collections.Generic.List%601.Capacity%2A> 是的元素数的<xref:System.Collections.Generic.List%601>可以存储之前调整大小是必需的而<xref:System.Collections.Generic.List%601.Count%2A>是中的实际的元素数目<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-319"><xref:System.Collections.Generic.List%601.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.List%601> can store before resizing is required, whereas <xref:System.Collections.Generic.List%601.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="3edb2-320"><xref:System.Collections.Generic.List%601.Capacity%2A> 始终是大于或等于<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-320"><xref:System.Collections.Generic.List%601.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.List%601.Count%2A>.</span></span> <span data-ttu-id="3edb2-321">如果<xref:System.Collections.Generic.List%601.Count%2A>超出了<xref:System.Collections.Generic.List%601.Capacity%2A>时添加元素，通过在复制旧元素和添加新元素之前自动重新分配内部数组增加容量。</span><span class="sxs-lookup"><span data-stu-id="3edb2-321">If <xref:System.Collections.Generic.List%601.Count%2A> exceeds <xref:System.Collections.Generic.List%601.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="3edb2-322">如果容量显著大于计数，并且你想要减少使用的内存<xref:System.Collections.Generic.List%601>，可以通过调用减少容量<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法或通过设置<xref:System.Collections.Generic.List%601.Capacity%2A>显式为较低值的属性。</span><span class="sxs-lookup"><span data-stu-id="3edb2-322">If the capacity is significantly larger than the count and you want to reduce the memory used by the <xref:System.Collections.Generic.List%601>,  you can  decrease capacity by calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or by setting the <xref:System.Collections.Generic.List%601.Capacity%2A> property explicitly to a lower value.</span></span> <span data-ttu-id="3edb2-323">时的值<xref:System.Collections.Generic.List%601.Capacity%2A>设置显式，内部数组还重新分配以适应指定的容量，并复制所有元素。</span><span class="sxs-lookup"><span data-stu-id="3edb2-323">When the value of <xref:System.Collections.Generic.List%601.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity, and all the elements are copied.</span></span>  
  
 <span data-ttu-id="3edb2-324">检索此属性的值是 o （1） 的操作;将属性设置为 O (*n*) 操作，其中*n*新容量。</span><span class="sxs-lookup"><span data-stu-id="3edb2-324">Retrieving the value of this property is an O(1) operation; setting the property is an O(*n*) operation, where *n* is the new capacity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-325">下面的示例演示如何检查的容量和计数<xref:System.Collections.Generic.List%601>，其中包含简单的业务对象，说明了如何使用<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法以删除额外的容量。</span><span class="sxs-lookup"><span data-stu-id="3edb2-325">The following example demonstrates how to check the capacity and count of a <xref:System.Collections.Generic.List%601> that contains a simple business object, and illustrates using the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method to remove extra capacity.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/vb/module1.vb#1)]  
  
 <span data-ttu-id="3edb2-326">下面的示例演示<xref:System.Collections.Generic.List%601.Capacity%2A>在列表的生命周期中的多个位置的属性。</span><span class="sxs-lookup"><span data-stu-id="3edb2-326">The following example shows the <xref:System.Collections.Generic.List%601.Capacity%2A> property at several points in the life of a list.</span></span> <span data-ttu-id="3edb2-327">默认构造函数使用的容量为 0，创建一个字符串列表和<xref:System.Collections.Generic.List%601.Capacity%2A>属性显示为了说明这一点。</span><span class="sxs-lookup"><span data-stu-id="3edb2-327">The default constructor is used to create a list of strings with a capacity of 0, and the <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed to demonstrate this.</span></span> <span data-ttu-id="3edb2-328">之后<xref:System.Collections.Generic.List%601.Add%2A>方法已用于添加多个项，会列出项目，然后<xref:System.Collections.Generic.List%601.Capacity%2A>属性显示同样，与<xref:System.Collections.Generic.List%601.Count%2A>属性，以显示根据需要是否增加容量。</span><span class="sxs-lookup"><span data-stu-id="3edb2-328">After the <xref:System.Collections.Generic.List%601.Add%2A> method has been used to add several items, the items are listed, and then the <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed again, along with the <xref:System.Collections.Generic.List%601.Count%2A> property, to show that the capacity has been increased as needed.</span></span>  
  
 <span data-ttu-id="3edb2-329"><xref:System.Collections.Generic.List%601.Capacity%2A>属性显示后再次<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法用于减少容量以匹配计数。</span><span class="sxs-lookup"><span data-stu-id="3edb2-329">The <xref:System.Collections.Generic.List%601.Capacity%2A> property is displayed again after the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method is used to reduce the capacity to match the count.</span></span> <span data-ttu-id="3edb2-330">最后，<xref:System.Collections.Generic.List%601.Clear%2A>方法用于从列表中，删除所有项并<xref:System.Collections.Generic.List%601.Capacity%2A>和<xref:System.Collections.Generic.List%601.Count%2A>再次显示属性。</span><span class="sxs-lookup"><span data-stu-id="3edb2-330">Finally, the <xref:System.Collections.Generic.List%601.Clear%2A> method is used to remove all items from the list, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed again.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3edb2-331">
            <see cref="P:System.Collections.Generic.List`1.Capacity" /> 已设置为一个小于 <see cref="P:System.Collections.Generic.List`1.Count" /> 的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-331">
              <see cref="P:System.Collections.Generic.List`1.Capacity" /> is set to a value that is less than <see cref="P:System.Collections.Generic.List`1.Count" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="3edb2-332">系统上没有足够的可用内存。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-332">There is not enough memory available on the system.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="list.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3edb2-333">从 <see cref="T:System.Collections.Generic.List`1" /> 中移除所有元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-333">Removes all elements from the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-334"><xref:System.Collections.Generic.List%601.Count%2A> 设置为 0，并且对其他对象的集合的元素也被释放。</span><span class="sxs-lookup"><span data-stu-id="3edb2-334"><xref:System.Collections.Generic.List%601.Count%2A> is set to 0, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="3edb2-335"><xref:System.Collections.Generic.List%601.Capacity%2A> 保持不变。</span><span class="sxs-lookup"><span data-stu-id="3edb2-335"><xref:System.Collections.Generic.List%601.Capacity%2A> remains unchanged.</span></span> <span data-ttu-id="3edb2-336">若要重置的容量<xref:System.Collections.Generic.List%601>，调用<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法或一组<xref:System.Collections.Generic.List%601.Capacity%2A>直接属性。</span><span class="sxs-lookup"><span data-stu-id="3edb2-336">To reset the capacity of the <xref:System.Collections.Generic.List%601>, call the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method or set the <xref:System.Collections.Generic.List%601.Capacity%2A> property directly.</span></span> <span data-ttu-id="3edb2-337">减少容量重新分配内存并将中的所有元素都复制<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-337">Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.List%601>.</span></span> <span data-ttu-id="3edb2-338">截去空<xref:System.Collections.Generic.List%601>的容量设置<xref:System.Collections.Generic.List%601>到默认容量。</span><span class="sxs-lookup"><span data-stu-id="3edb2-338">Trimming an empty <xref:System.Collections.Generic.List%601> sets the capacity of the <xref:System.Collections.Generic.List%601> to the default capacity.</span></span>  
  
 <span data-ttu-id="3edb2-339">此方法为 O (*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-339">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-340">下面的示例演示<xref:System.Collections.Generic.List%601.Clear%2A>方法和各种其他属性和方法的<xref:System.Collections.Generic.List%601>泛型类。</span><span class="sxs-lookup"><span data-stu-id="3edb2-340">The following example demonstrates the <xref:System.Collections.Generic.List%601.Clear%2A> method and various other properties and methods of the <xref:System.Collections.Generic.List%601> generic class.</span></span> <span data-ttu-id="3edb2-341"><xref:System.Collections.Generic.List%601.Clear%2A>方法的末尾程序，使用从列表中，删除所有项并<xref:System.Collections.Generic.List%601.Capacity%2A>和<xref:System.Collections.Generic.List%601.Count%2A>然后显示属性。</span><span class="sxs-lookup"><span data-stu-id="3edb2-341">The <xref:System.Collections.Generic.List%601.Clear%2A> method is used at the end of the program, to remove all items from the list, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are then displayed.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.TrimExcess" />
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(T item);" />
      <MemberSignature Language="F#" Value="abstract member Contains : 'T -&gt; bool&#xA;override this.Contains : 'T -&gt; bool" Usage="list.Contains item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="3edb2-342">要在 <see cref="T:System.Collections.Generic.List`1" /> 中定位的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-342">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="3edb2-343">对于引用类型，该值可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-343">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-344">确定某元素是否在 <see cref="T:System.Collections.Generic.List`1" /> 中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-344">Determines whether an element is in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-345">如果在 <see langword="true" /> 中找到 <paramref name="item" />，则为 <see cref="T:System.Collections.Generic.List`1" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-345">
              <see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.List`1" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-346">此方法通过使用默认的相等性比较器，来确定相等性，定义的对象的实现<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>方法`T`（列表中的值类型）。</span><span class="sxs-lookup"><span data-stu-id="3edb2-346">This method determines equality by using the default equality comparer, as defined by the object's implementation of the <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> method for `T` (the type of values in the list).</span></span>  
  
 <span data-ttu-id="3edb2-347">此方法执行线性搜索;因此，此方法为 O (*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-347">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-348">下面的示例演示<xref:System.Collections.Generic.List%601.Contains%2A>并<xref:System.Collections.Generic.List%601.Exists%2A>上的方法<xref:System.Collections.Generic.List%601>，其中包含实现的简单业务对象<xref:System.IEquatable%601.Equals%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-348">The following example demonstrates the <xref:System.Collections.Generic.List%601.Contains%2A> and <xref:System.Collections.Generic.List%601.Exists%2A> methods on a <xref:System.Collections.Generic.List%601> that contains a simple business object that implements <xref:System.IEquatable%601.Equals%2A>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/vb/module1.vb#1)]  
  
 <span data-ttu-id="3edb2-349">下面的示例包含一系列类型的复杂对象`Cube`。</span><span class="sxs-lookup"><span data-stu-id="3edb2-349">The following example contains a list of complex objects of type `Cube`.</span></span> <span data-ttu-id="3edb2-350">`Cube`类实现<xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType>方法，以便两个多维数据集被视为相等，如果其维度相同。</span><span class="sxs-lookup"><span data-stu-id="3edb2-350">The `Cube` class implements the <xref:System.IEquatable%601.Equals%2A?displayProperty=nameWithType> method so that two cubes are considered equal if their dimensions are the same.</span></span> <span data-ttu-id="3edb2-351">在此示例中，<xref:System.Collections.Generic.List%601.Contains%2A>方法将返回`true`，因为具有指定的维度的多维数据集已在集合中。</span><span class="sxs-lookup"><span data-stu-id="3edb2-351">In this example, the <xref:System.Collections.Generic.List%601.Contains%2A> method returns `true`, because a cube that has the specified dimensions is already in the collection.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.Contains#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.contains/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.Contains#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.contains/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.IndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
      </Docs>
    </Member>
    <Member MemberName="ConvertAll&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;TOutput&gt; ConvertAll&lt;TOutput&gt; (Converter&lt;T,TOutput&gt; converter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.List`1&lt;!!TOutput&gt; ConvertAll&lt;TOutput&gt;(class System.Converter`2&lt;!T, !!TOutput&gt; converter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Function ConvertAll(Of TOutput) (converter As Converter(Of T, TOutput)) As List(Of TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA; System::Collections::Generic::List&lt;TOutput&gt; ^ ConvertAll(Converter&lt;T, TOutput&gt; ^ converter);" />
      <MemberSignature Language="F#" Value="member this.ConvertAll : Converter&lt;'T, 'Output&gt; -&gt; System.Collections.Generic.List&lt;'Output&gt;" Usage="list.ConvertAll converter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="converter" Type="System.Converter&lt;T,TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="3edb2-352">目标数组元素的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-352">The type of the elements of the target array.</span>
          </span>
        </typeparam>
        <param name="converter">
          <span data-ttu-id="3edb2-353">一个 <see cref="T:System.Converter`2" /> 委托，可将每个元素从一种类型转换为另一种类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-353">A <see cref="T:System.Converter`2" /> delegate that converts each element from one type to another type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-354">将当前 <see cref="T:System.Collections.Generic.List`1" /> 中的元素转换为另一种类型，并返回包含已转换元素的列表。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-354">Converts the elements in the current <see cref="T:System.Collections.Generic.List`1" /> to another type, and returns a list containing the converted elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-355">目标类型的 <see cref="T:System.Collections.Generic.List`1" />，包含当前 <see cref="T:System.Collections.Generic.List`1" /> 中转换后的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-355">A <see cref="T:System.Collections.Generic.List`1" /> of the target type containing the converted elements from the current <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-356"><xref:System.Converter%602>是一个委托，将对象转换为目标类型的方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-356">The <xref:System.Converter%602> is a delegate to a method that converts an object to the target type.</span></span>  <span data-ttu-id="3edb2-357">当前元素<xref:System.Collections.Generic.List%601>逐个传递给<xref:System.Converter%602>委托，并且转换后的元素将保存在新<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-357">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Converter%602> delegate, and the converted elements are saved in the new <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="3edb2-358">当前<xref:System.Collections.Generic.List%601>保持不变。</span><span class="sxs-lookup"><span data-stu-id="3edb2-358">The current <xref:System.Collections.Generic.List%601> remains unchanged.</span></span>  
  
 <span data-ttu-id="3edb2-359">此方法为 O (*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-359">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-360">下面的示例定义一个名为方法`PointFToPoint`，用于将<xref:System.Drawing.PointF>结构<xref:System.Drawing.Point>结构。</span><span class="sxs-lookup"><span data-stu-id="3edb2-360">The following example defines a method named `PointFToPoint` that converts a <xref:System.Drawing.PointF> structure to a <xref:System.Drawing.Point> structure.</span></span> <span data-ttu-id="3edb2-361">该示例然后创建<xref:System.Collections.Generic.List%601>的<xref:System.Drawing.PointF>结构，则创建`Converter\<PointF, Point>`委托 (`Converter(Of PointF, Point)`在 Visual Basic 中) 来表示`PointFToPoint`方法，并将传递到委托<xref:System.Collections.Generic.List%601.ConvertAll%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-361">The example then creates a <xref:System.Collections.Generic.List%601> of <xref:System.Drawing.PointF> structures, creates a `Converter\<PointF, Point>` delegate (`Converter(Of PointF, Point)` in Visual Basic) to represent the `PointFToPoint` method, and passes the delegate to the <xref:System.Collections.Generic.List%601.ConvertAll%2A> method.</span></span> <span data-ttu-id="3edb2-362"><xref:System.Collections.Generic.List%601.ConvertAll%2A>方法将传递到输入列表的每个元素`PointFToPoint`方法并将转换后的元素放入新的列表<xref:System.Drawing.Point>结构。</span><span class="sxs-lookup"><span data-stu-id="3edb2-362">The <xref:System.Collections.Generic.List%601.ConvertAll%2A> method passes each element of the input list to the `PointFToPoint` method and puts the converted elements into a new list of <xref:System.Drawing.Point> structures.</span></span> <span data-ttu-id="3edb2-363">显示这两个列表。</span><span class="sxs-lookup"><span data-stu-id="3edb2-363">Both lists are displayed.</span></span>  
  
 [!code-cpp[List\`1_ConvertAll#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_ConvertAll/cpp/source.cpp#1)]
 [!code-csharp[List\`1_ConvertAll#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_ConvertAll/cs/source.cs#1)]
 [!code-vb[List\`1_ConvertAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_ConvertAll/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3edb2-364">
            <paramref name="converter" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-364">
              <paramref name="converter" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Converter`2" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3edb2-365">将 <see cref="T:System.Collections.Generic.List`1" /> 或它的一部分复制到一个数组中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-365">Copies the <see cref="T:System.Collections.Generic.List`1" /> or a portion of it to an array.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(!T[] array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.CopyTo(`0[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;T&gt; ^ array);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : 'T[] -&gt; unit" Usage="list.CopyTo array" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="3edb2-366">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Generic.List`1" /> 复制的元素的目标。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-366">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="3edb2-367">
            <see cref="T:System.Array" /> 必须具有从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-367">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-368">从目标数组的开头开始，将整个 <see cref="T:System.Collections.Generic.List`1" /> 复制到兼容的一维数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-368">Copies the entire <see cref="T:System.Collections.Generic.List`1" /> to a compatible one-dimensional array, starting at the beginning of the target array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-369">此方法使用<xref:System.Array.Copy%2A?displayProperty=nameWithType>元素将复制到。</span><span class="sxs-lookup"><span data-stu-id="3edb2-369">This method uses <xref:System.Array.Copy%2A?displayProperty=nameWithType> to copy the elements.</span></span>  
  
 <span data-ttu-id="3edb2-370">将元素复制到<xref:System.Array>枚举器循环访问的相同顺序<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-370">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="3edb2-371">此方法为 O (*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-371">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-372">下面的示例演示的所有三个重载<xref:System.Collections.Generic.List%601.CopyTo%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-372">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.CopyTo%2A> method.</span></span> <span data-ttu-id="3edb2-373">一个<xref:System.Collections.Generic.List%601>的字符串创建并填充了 5 个字符串。</span><span class="sxs-lookup"><span data-stu-id="3edb2-373">A <xref:System.Collections.Generic.List%601> of strings is created and populated with 5 strings.</span></span> <span data-ttu-id="3edb2-374">创建一个空字符串数组的 15 个元素，并<xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29>方法重载用于将列表的所有元素都复制到数组的第一个元素开始的数组。</span><span class="sxs-lookup"><span data-stu-id="3edb2-374">An empty string array of 15 elements is created, and the <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29> method overload is used to copy all the elements of the list to the array beginning at the first element of the array.</span></span> <span data-ttu-id="3edb2-375"><xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29>方法重载用于复制的所有元素的数组索引 6 开始的数组到列表 （将索引 5 留为空）。</span><span class="sxs-lookup"><span data-stu-id="3edb2-375">The <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty).</span></span> <span data-ttu-id="3edb2-376">最后，<xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29>使用方法重载来复制从列表中，索引 2 开始的 3 个元素，使用到开始数组的数组索引 12 （将索引 11 留为空）。</span><span class="sxs-lookup"><span data-stu-id="3edb2-376">Finally, the <xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty).</span></span> <span data-ttu-id="3edb2-377">然后显示数组的内容。</span><span class="sxs-lookup"><span data-stu-id="3edb2-377">The contents of the array are then displayed.</span></span>  
  
 [!code-cpp[List\`1_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_CopyTo/cpp/source.cpp#1)]
 [!code-csharp[List\`1_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_CopyTo/cs/source.cs#1)]
 [!code-vb[List\`1_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_CopyTo/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3edb2-378">
            <paramref name="array" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-378">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3edb2-379">源 <see cref="T:System.Collections.Generic.List`1" /> 中的元素个数大于目标 <paramref name="array" /> 可以包含的元素个数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-379">The number of elements in the source <see cref="T:System.Collections.Generic.List`1" /> is greater than the number of elements that the destination <paramref name="array" /> can contain.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(!T[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As T(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;T&gt; ^ array, int arrayIndex);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : 'T[] * int -&gt; unit&#xA;override this.CopyTo : 'T[] * int -&gt; unit" Usage="list.CopyTo (array, arrayIndex)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="3edb2-380">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Generic.List`1" /> 复制的元素的目标。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-380">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="3edb2-381">
            <see cref="T:System.Array" /> 必须具有从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-381">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="arrayIndex">
          <span data-ttu-id="3edb2-382">
            <c>array</c> 中从零开始的索引，在此处开始复制。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-382">The zero-based index in <c>array</c> at which copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-383">从目标数组的指定索引处开始，将整个 <see cref="T:System.Collections.Generic.List`1" /> 复制到兼容的一维数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-383">Copies the entire <see cref="T:System.Collections.Generic.List`1" /> to a compatible one-dimensional array, starting at the specified index of the target array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-384">此方法使用<xref:System.Array.Copy%2A?displayProperty=nameWithType>元素将复制到。</span><span class="sxs-lookup"><span data-stu-id="3edb2-384">This method uses <xref:System.Array.Copy%2A?displayProperty=nameWithType> to copy the elements.</span></span>  
  
 <span data-ttu-id="3edb2-385">将元素复制到<xref:System.Array>枚举器循环访问的相同顺序<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-385">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="3edb2-386">此方法为 O (*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-386">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-387">下面的示例演示的所有三个重载<xref:System.Collections.Generic.List%601.CopyTo%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-387">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.CopyTo%2A> method.</span></span> <span data-ttu-id="3edb2-388">一个<xref:System.Collections.Generic.List%601>的字符串创建并填充了 5 个字符串。</span><span class="sxs-lookup"><span data-stu-id="3edb2-388">A <xref:System.Collections.Generic.List%601> of strings is created and populated with 5 strings.</span></span> <span data-ttu-id="3edb2-389">创建一个空字符串数组的 15 个元素，并<xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29>方法重载用于将列表的所有元素都复制到数组的第一个元素开始的数组。</span><span class="sxs-lookup"><span data-stu-id="3edb2-389">An empty string array of 15 elements is created, and the <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29> method overload is used to copy all the elements of the list to the array beginning at the first element of the array.</span></span> <span data-ttu-id="3edb2-390"><xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29>方法重载用于复制的所有元素的数组索引 6 开始的数组到列表 （将索引 5 留为空）。</span><span class="sxs-lookup"><span data-stu-id="3edb2-390">The <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty).</span></span> <span data-ttu-id="3edb2-391">最后，<xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29>使用方法重载来复制从列表中，索引 2 开始的 3 个元素，使用到开始数组的数组索引 12 （将索引 11 留为空）。</span><span class="sxs-lookup"><span data-stu-id="3edb2-391">Finally, the <xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty).</span></span> <span data-ttu-id="3edb2-392">然后显示数组的内容。</span><span class="sxs-lookup"><span data-stu-id="3edb2-392">The contents of the array are then displayed.</span></span>  
  
 [!code-cpp[List\`1_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_CopyTo/cpp/source.cpp#1)]
 [!code-csharp[List\`1_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_CopyTo/cs/source.cs#1)]
 [!code-vb[List\`1_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_CopyTo/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3edb2-393">
            <paramref name="array" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-393">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3edb2-394">
            <paramref name="arrayIndex" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-394">
              <paramref name="arrayIndex" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3edb2-395">源 <see cref="T:System.Collections.Generic.List`1" /> 中的元素个数大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-395">The number of elements in the source <see cref="T:System.Collections.Generic.List`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (int index, T[] array, int arrayIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(int32 index, !T[] array, int32 arrayIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (index As Integer, array As T(), arrayIndex As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(int index, cli::array &lt;T&gt; ^ array, int arrayIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : int * 'T[] * int * int -&gt; unit" Usage="list.CopyTo (index, array, arrayIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3edb2-396">复制即从源 <see cref="T:System.Collections.Generic.List`1" /> 中从零开始的索引开始。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-396">The zero-based index in the source <see cref="T:System.Collections.Generic.List`1" /> at which copying begins.</span>
          </span>
        </param>
        <param name="array">
          <span data-ttu-id="3edb2-397">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Generic.List`1" /> 复制的元素的目标。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-397">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="3edb2-398">
            <see cref="T:System.Array" /> 必须具有从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-398">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="arrayIndex">
          <span data-ttu-id="3edb2-399">
            <c>array</c> 中从零开始的索引，在此处开始复制。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-399">The zero-based index in <c>array</c> at which copying begins.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3edb2-400">要复制的元素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-400">The number of elements to copy.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-401">从目标数组的指定索引处开始，将元素的范围从 <see cref="T:System.Collections.Generic.List`1" /> 复制到兼容的一维数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-401">Copies a range of elements from the <see cref="T:System.Collections.Generic.List`1" /> to a compatible one-dimensional array, starting at the specified index of the target array.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-402">此方法使用<xref:System.Array.Copy%2A?displayProperty=nameWithType>元素将复制到。</span><span class="sxs-lookup"><span data-stu-id="3edb2-402">This method uses <xref:System.Array.Copy%2A?displayProperty=nameWithType> to copy the elements.</span></span>  
  
 <span data-ttu-id="3edb2-403">将元素复制到<xref:System.Array>枚举器循环访问的相同顺序<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-403">The elements are copied to the <xref:System.Array> in the same order in which the enumerator iterates through the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="3edb2-404">此方法为 O (*n*) 操作，其中*n*是`count`。</span><span class="sxs-lookup"><span data-stu-id="3edb2-404">This method is an O(*n*) operation, where *n* is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-405">下面的示例演示的所有三个重载<xref:System.Collections.Generic.List%601.CopyTo%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-405">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.CopyTo%2A> method.</span></span> <span data-ttu-id="3edb2-406">一个<xref:System.Collections.Generic.List%601>的字符串创建并填充了 5 个字符串。</span><span class="sxs-lookup"><span data-stu-id="3edb2-406">A <xref:System.Collections.Generic.List%601> of strings is created and populated with 5 strings.</span></span> <span data-ttu-id="3edb2-407">创建一个空字符串数组的 15 个元素，并<xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29>方法重载用于将列表的所有元素都复制到数组的第一个元素开始的数组。</span><span class="sxs-lookup"><span data-stu-id="3edb2-407">An empty string array of 15 elements is created, and the <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%29> method overload is used to copy all the elements of the list to the array beginning at the first element of the array.</span></span> <span data-ttu-id="3edb2-408"><xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29>方法重载用于复制的所有元素的数组索引 6 开始的数组到列表 （将索引 5 留为空）。</span><span class="sxs-lookup"><span data-stu-id="3edb2-408">The <xref:System.Collections.Generic.List%601.CopyTo%28%600%5B%5D%2CSystem.Int32%29> method overload is used to copy all the elements of the list to the array beginning at array index 6 (leaving index 5 empty).</span></span> <span data-ttu-id="3edb2-409">最后，<xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29>使用方法重载来复制从列表中，索引 2 开始的 3 个元素，使用到开始数组的数组索引 12 （将索引 11 留为空）。</span><span class="sxs-lookup"><span data-stu-id="3edb2-409">Finally, the <xref:System.Collections.Generic.List%601.CopyTo%28System.Int32%2C%600%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method overload is used to copy 3 elements from the list, beginning with index 2, to the array beginning at array index 12 (leaving index 11 empty).</span></span> <span data-ttu-id="3edb2-410">然后显示数组的内容。</span><span class="sxs-lookup"><span data-stu-id="3edb2-410">The contents of the array are then displayed.</span></span>  
  
 [!code-cpp[List\`1_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_CopyTo/cpp/source.cpp#1)]
 [!code-csharp[List\`1_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_CopyTo/cs/source.cs#1)]
 [!code-vb[List\`1_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_CopyTo/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3edb2-411">
            <paramref name="array" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-411">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3edb2-412">
            <paramref name="index" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-412">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="3edb2-413">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-413">-or-</span>
          </span>
          <span data-ttu-id="3edb2-414">
            <paramref name="arrayIndex" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-414">
              <paramref name="arrayIndex" /> is less than 0.</span>
          </span>
          <span data-ttu-id="3edb2-415">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-415">-or-</span>
          </span>
          <span data-ttu-id="3edb2-416">
            <paramref name="count" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-416">
              <paramref name="count" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3edb2-417">
            <paramref name="index" /> 等于或大于源 <see cref="P:System.Collections.Generic.List`1.Count" /> 的 <see cref="T:System.Collections.Generic.List`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-417">
              <paramref name="index" /> is equal to or greater than the <see cref="P:System.Collections.Generic.List`1.Count" /> of the source <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="3edb2-418">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-418">-or-</span>
          </span>
          <span data-ttu-id="3edb2-419">从 <paramref name="index" /> 到源 <see cref="T:System.Collections.Generic.List`1" /> 的末尾的元素数大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 的末尾的可用空间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-419">The number of elements from <paramref name="index" /> to the end of the source <see cref="T:System.Collections.Generic.List`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Generic.List&lt;'T&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3edb2-420">获取 <see cref="T:System.Collections.Generic.List`1" /> 中包含的元素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-420">Gets the number of elements contained in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3edb2-421">
            <see cref="T:System.Collections.Generic.List`1" /> 中包含的元素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-421">The number of elements contained in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-422"><xref:System.Collections.Generic.List%601.Capacity%2A> 是的元素数的<xref:System.Collections.Generic.List%601>需要调整大小之前可以存储。</span><span class="sxs-lookup"><span data-stu-id="3edb2-422"><xref:System.Collections.Generic.List%601.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.List%601> can store before resizing is required.</span></span> <span data-ttu-id="3edb2-423"><xref:System.Collections.Generic.List%601.Count%2A> 是中的实际的元素数目<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-423"><xref:System.Collections.Generic.List%601.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="3edb2-424"><xref:System.Collections.Generic.List%601.Capacity%2A> 始终是大于或等于<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-424"><xref:System.Collections.Generic.List%601.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.List%601.Count%2A>.</span></span> <span data-ttu-id="3edb2-425">如果<xref:System.Collections.Generic.List%601.Count%2A>超出了<xref:System.Collections.Generic.List%601.Capacity%2A>时添加元素，通过在复制旧元素和添加新元素之前自动重新分配内部数组增加容量。</span><span class="sxs-lookup"><span data-stu-id="3edb2-425">If <xref:System.Collections.Generic.List%601.Count%2A> exceeds <xref:System.Collections.Generic.List%601.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="3edb2-426">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="3edb2-426">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-427">下面的示例演示如何检查的容量和计数<xref:System.Collections.Generic.List%601>，其中包含简单的业务对象，说明了如何使用<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法以删除额外的容量。</span><span class="sxs-lookup"><span data-stu-id="3edb2-427">The following example demonstrates how to check the capacity and count of a  <xref:System.Collections.Generic.List%601> that contains a simple business object, and illustrates using the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method to remove extra capacity.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/vb/module1.vb#1)]  
  
 <span data-ttu-id="3edb2-428">下面的示例显示的值<xref:System.Collections.Generic.List%601.Count%2A>生命周期的列表的不同位置的属性。</span><span class="sxs-lookup"><span data-stu-id="3edb2-428">The following example shows the value of the <xref:System.Collections.Generic.List%601.Count%2A> property at various points in the life of a list.</span></span> <span data-ttu-id="3edb2-429">创建和填充列表并显示它的元素后,<xref:System.Collections.Generic.List%601.Capacity%2A>和<xref:System.Collections.Generic.List%601.Count%2A>属性将显示。</span><span class="sxs-lookup"><span data-stu-id="3edb2-429">After the list has been created and populated and its elements displayed, the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed.</span></span> <span data-ttu-id="3edb2-430">这些属性将显示后再次<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法已被清除被调用，并在列表的内容后再次。</span><span class="sxs-lookup"><span data-stu-id="3edb2-430">These properties are displayed again after the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method has been called, and again after the contents of the list are cleared.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public bool Exists (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Exists(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Exists (match As Predicate(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Exists(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.Exists : Predicate&lt;'T&gt; -&gt; bool" Usage="list.Exists match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="3edb2-431">
            <see cref="T:System.Predicate`1" /> 委托，用于定义要搜索的元素应满足的条件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-431">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the elements to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-432">确定 <see cref="T:System.Collections.Generic.List`1" /> 是否包含与指定谓词定义的条件匹配的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-432">Determines whether the <see cref="T:System.Collections.Generic.List`1" /> contains elements that match the conditions defined by the specified predicate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-433">如果 <see cref="T:System.Collections.Generic.List`1" /> 包含一个或多个元素与指定谓词定义的条件匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-433">
              <see langword="true" /> if the <see cref="T:System.Collections.Generic.List`1" /> contains one or more elements that match the conditions defined by the specified predicate; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-434"><xref:System.Predicate%601>是返回的方法的委托`true`如果该对象传递给委托中定义的条件匹配。</span><span class="sxs-lookup"><span data-stu-id="3edb2-434">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="3edb2-435">当前元素<xref:System.Collections.Generic.List%601>逐个传递给<xref:System.Predicate%601>委托，然后处理已停止时找到匹配项。</span><span class="sxs-lookup"><span data-stu-id="3edb2-435">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and processing is stopped when a match is found.</span></span>  
  
 <span data-ttu-id="3edb2-436">此方法执行线性搜索;因此，此方法为 O (*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-436">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-437">下面的示例演示<xref:System.Collections.Generic.List%601.Contains%2A>并<xref:System.Collections.Generic.List%601.Exists%2A>上的方法<xref:System.Collections.Generic.List%601>，其中包含实现的简单业务对象<xref:System.IEquatable%601.Equals%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-437">The following example demonstrates the <xref:System.Collections.Generic.List%601.Contains%2A> and <xref:System.Collections.Generic.List%601.Exists%2A> methods on a <xref:System.Collections.Generic.List%601> that contains a simple business object that implements <xref:System.IEquatable%601.Equals%2A>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/vb/module1.vb#1)]  
  
 <span data-ttu-id="3edb2-438">下面的示例演示<xref:System.Collections.Generic.List%601.Exists%2A>方法和其他几种方法使用<xref:System.Predicate%601>泛型委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-438">The following example demonstrates the <xref:System.Collections.Generic.List%601.Exists%2A> method and several other methods that use the <xref:System.Predicate%601> generic delegate.</span></span>  
  
 <span data-ttu-id="3edb2-439">一个<xref:System.Collections.Generic.List%601>的字符串创建，包含 8 个恐龙名称，其中 （位于位置 1 和 5） 两个以"saurus"结尾。</span><span class="sxs-lookup"><span data-stu-id="3edb2-439">A <xref:System.Collections.Generic.List%601> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</span></span> <span data-ttu-id="3edb2-440">该示例还定义一个名为搜索谓词的方法`EndsWithSaurus`、，它接受字符串参数和返回一个布尔值，该值指示是否以"saurus"结尾的输入的字符串。</span><span class="sxs-lookup"><span data-stu-id="3edb2-440">The example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</span></span>  
  
 <span data-ttu-id="3edb2-441"><xref:System.Collections.Generic.List%601.Find%2A>， <xref:System.Collections.Generic.List%601.FindLast%2A>，并<xref:System.Collections.Generic.List%601.FindAll%2A>方法用于在列表中搜索与搜索谓词方法，然后<xref:System.Collections.Generic.List%601.RemoveAll%2A>方法用于删除以"saurus"结尾的所有项。</span><span class="sxs-lookup"><span data-stu-id="3edb2-441">The <xref:System.Collections.Generic.List%601.Find%2A>, <xref:System.Collections.Generic.List%601.FindLast%2A>, and <xref:System.Collections.Generic.List%601.FindAll%2A> methods are used to search the list with the search predicate method, and then the <xref:System.Collections.Generic.List%601.RemoveAll%2A> method is used to remove all entries ending with "saurus".</span></span>  
  
 <span data-ttu-id="3edb2-442">最后，<xref:System.Collections.Generic.List%601.Exists%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-442">Finally, the <xref:System.Collections.Generic.List%601.Exists%2A> method is called.</span></span> <span data-ttu-id="3edb2-443">它从开始时，将每个元素传递给反过来将遍历列表`EndsWithSaurus`方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-443">It traverses the list from the beginning, passing each element in turn to the `EndsWithSaurus` method.</span></span> <span data-ttu-id="3edb2-444">搜索停止，并且该方法返回`true`如果`EndsWithSaurus`方法将返回`true`的任何元素。</span><span class="sxs-lookup"><span data-stu-id="3edb2-444">The search stops and the method returns `true` if the `EndsWithSaurus` method returns `true` for any element.</span></span> <span data-ttu-id="3edb2-445"><xref:System.Collections.Generic.List%601.Exists%2A>方法将返回`false`因为已删除所有此类元素。</span><span class="sxs-lookup"><span data-stu-id="3edb2-445">The <xref:System.Collections.Generic.List%601.Exists%2A> method returns `false` because all such elements have been removed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3edb2-446">在 C# 和 Visual Basic 中，它不需要创建`Predicate<string>`委托 (`Predicate(Of String)`在 Visual Basic 中) 显式。</span><span class="sxs-lookup"><span data-stu-id="3edb2-446">In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="3edb2-447">这些语言推断从上下文正确的委托，并自动创建。</span><span class="sxs-lookup"><span data-stu-id="3edb2-447">These languages infer the correct delegate from context and create it automatically.</span></span>  
  
 [!code-cpp[List\`1_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_FindEtAl/cpp/source.cpp#1)]
 [!code-csharp[List\`1_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_FindEtAl/cs/source.cs#1)]
 [!code-vb[List\`1_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_FindEtAl/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3edb2-448">
            <paramref name="match" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-448">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public T Find (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T Find(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (match As Predicate(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T Find(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.Find : Predicate&lt;'T&gt; -&gt; 'T" Usage="list.Find match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="3edb2-449">
            <see cref="T:System.Predicate`1" /> 委托，用于定义要搜索的元素的条件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-449">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-450">搜索与指定谓词所定义的条件相匹配的元素，并返回整个 <see cref="T:System.Collections.Generic.List`1" /> 中的第一个匹配元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-450">Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-451">如果找到与指定谓词定义的条件匹配的第一个元素，则为该元素；否则为类型 <paramref name="T" /> 的默认值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-451">The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <paramref name="T" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-452"><xref:System.Predicate%601>是返回的方法的委托`true`如果该对象传递给委托中定义的条件匹配。</span><span class="sxs-lookup"><span data-stu-id="3edb2-452">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="3edb2-453">当前元素<xref:System.Collections.Generic.List%601>逐个传递给<xref:System.Predicate%601>委托，在中向前移动<xref:System.Collections.Generic.List%601>，从第一个元素开始和结束的最后一个元素。</span><span class="sxs-lookup"><span data-stu-id="3edb2-453">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, moving forward in the <xref:System.Collections.Generic.List%601>, starting with the first element and ending with the last element.</span></span>  <span data-ttu-id="3edb2-454">当找到匹配项时，停止处理。</span><span class="sxs-lookup"><span data-stu-id="3edb2-454">Processing is stopped when a match is found.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="3edb2-455">在搜索时包含值类型的列表，请确保该类型的默认值不满足搜索谓词。</span><span class="sxs-lookup"><span data-stu-id="3edb2-455">When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate.</span></span> <span data-ttu-id="3edb2-456">否则，没有任何方式来区分一个默认值，该值指示已找到任何匹配项和一个列表元素，它恰好有类型的默认值。</span><span class="sxs-lookup"><span data-stu-id="3edb2-456">Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type.</span></span> <span data-ttu-id="3edb2-457">如果默认值满足搜索谓词，则使用<xref:System.Collections.Generic.List%601.FindIndex%2A>方法相反。</span><span class="sxs-lookup"><span data-stu-id="3edb2-457">If the default value satisfies the search predicate, use the <xref:System.Collections.Generic.List%601.FindIndex%2A> method instead.</span></span>  
  
 <span data-ttu-id="3edb2-458">此方法执行线性搜索;因此，此方法为 O (*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-458">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-459">以下示例演示包含简单上下文对象的 <xref:System.Collections.Generic.List%601.Find%2A> 上的 <xref:System.Collections.Generic.List%601> 方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-459">The following example demonstrates the <xref:System.Collections.Generic.List%601.Find%2A> method on a <xref:System.Collections.Generic.List%601> that contains a simple complex object.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.ContainsExists#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.containsexists/vb/module1.vb#1)]  
  
 <span data-ttu-id="3edb2-460">下面的示例演示的查找方法<xref:System.Collections.Generic.List%601>类。</span><span class="sxs-lookup"><span data-stu-id="3edb2-460">The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class.</span></span> <span data-ttu-id="3edb2-461">有关示例<xref:System.Collections.Generic.List%601>类包含`book`类的对象`Book`，使用的数据进行[示例 XML 文件： 书籍 (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)。</span><span class="sxs-lookup"><span data-stu-id="3edb2-461">The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f).</span></span> <span data-ttu-id="3edb2-462">`FillList`方法在示例中使用[LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)分析的属性值的值从 XML`book`对象。</span><span class="sxs-lookup"><span data-stu-id="3edb2-462">The `FillList` method in the example uses [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.</span></span>  
  
 <span data-ttu-id="3edb2-463">下表描述了为 find 方法提供的示例。</span><span class="sxs-lookup"><span data-stu-id="3edb2-463">The following table describes the examples provided for the find methods.</span></span>  
  
|<span data-ttu-id="3edb2-464">方法</span><span class="sxs-lookup"><span data-stu-id="3edb2-464">Method</span></span>|<span data-ttu-id="3edb2-465">示例</span><span class="sxs-lookup"><span data-stu-id="3edb2-465">Example</span></span>|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-466">查找 ID 使用书`IDToFind`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-466">Finds a book by an ID using the `IDToFind` predicate delegate.</span></span><br /><br /> <span data-ttu-id="3edb2-467">C# 示例使用匿名委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-467">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-468">查找所有丛书，其`Genre`属性是"计算机"使用`FindComputer`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-468">Find all books that whose `Genre` property is "Computer" using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-469">2001 年，使用之前在发布日期在集合中查找最后一本书`PubBefore2001`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-469">Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.</span></span><br /><br /> <span data-ttu-id="3edb2-470">C# 示例使用匿名委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-470">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-471">查找的第一个计算机书籍使用索引`FindComputer`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-471">Finds the index of first computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-472">查找的最后一个的计算机书籍使用索引`FindComputer`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-472">Finds the index of the last computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-473">集合中的后半部分中第二个查找的第一本计算机书籍索引使用`FindComputer`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-473">Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-474">集合中的后半部分中第二个查找的最后一个的计算机书籍索引使用`FindComputer`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-474">Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3edb2-475">
            <paramref name="match" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-475">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindAll">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;T&gt; FindAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.List`1&lt;!T&gt; FindAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindAll (match As Predicate(Of T)) As List(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::List&lt;T&gt; ^ FindAll(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindAll : Predicate&lt;'T&gt; -&gt; System.Collections.Generic.List&lt;'T&gt;" Usage="list.FindAll match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="3edb2-476">
            <see cref="T:System.Predicate`1" /> 委托，用于定义要搜索的元素应满足的条件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-476">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the elements to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-477">检索与指定谓词定义的条件匹配的所有元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-477">Retrieves all the elements that match the conditions defined by the specified predicate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-478">如果找到一个 <see cref="T:System.Collections.Generic.List`1" />，其中所有元素均与指定谓词定义的条件匹配，则为该数组；否则为一个空 <see cref="T:System.Collections.Generic.List`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-478">A <see cref="T:System.Collections.Generic.List`1" /> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-479"><xref:System.Predicate%601>是返回的方法的委托`true`如果该对象传递给委托中定义的条件匹配。</span><span class="sxs-lookup"><span data-stu-id="3edb2-479">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="3edb2-480">当前元素<xref:System.Collections.Generic.List%601>逐个传递给<xref:System.Predicate%601>委托和与条件匹配的元素都将保存在返回<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-480">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and the elements that match the conditions are saved in the returned <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="3edb2-481">此方法执行线性搜索;因此，此方法为 O (*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-481">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-482">下面的示例演示的查找方法<xref:System.Collections.Generic.List%601>类。</span><span class="sxs-lookup"><span data-stu-id="3edb2-482">The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class.</span></span> <span data-ttu-id="3edb2-483">有关示例<xref:System.Collections.Generic.List%601>类包含`book`类的对象`Book`，使用的数据进行[示例 XML 文件： 书籍 (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)。</span><span class="sxs-lookup"><span data-stu-id="3edb2-483">The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f).</span></span> <span data-ttu-id="3edb2-484">`FillList`方法在示例中使用[LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)分析的属性值的值从 XML`book`对象。</span><span class="sxs-lookup"><span data-stu-id="3edb2-484">The `FillList` method in the example uses [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.</span></span>  
  
 <span data-ttu-id="3edb2-485">下表描述了为 find 方法提供的示例。</span><span class="sxs-lookup"><span data-stu-id="3edb2-485">The following table describes the examples provided for the find methods.</span></span>  
  
|<span data-ttu-id="3edb2-486">方法</span><span class="sxs-lookup"><span data-stu-id="3edb2-486">Method</span></span>|<span data-ttu-id="3edb2-487">示例</span><span class="sxs-lookup"><span data-stu-id="3edb2-487">Example</span></span>|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-488">查找 ID 使用书`IDToFind`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-488">Finds a book by an ID using the `IDToFind` predicate delegate.</span></span><br /><br /> <span data-ttu-id="3edb2-489">C# 示例使用匿名委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-489">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-490">查找所有丛书，其`Genre`属性是"计算机"使用`FindComputer`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-490">Find all books that whose `Genre` property is "Computer" using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-491">2001 年，使用之前在发布日期在集合中查找最后一本书`PubBefore2001`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-491">Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.</span></span><br /><br /> <span data-ttu-id="3edb2-492">C# 示例使用匿名委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-492">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-493">查找的第一个计算机书籍使用索引`FindComputer`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-493">Finds the index of first computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-494">查找的最后一个的计算机书籍使用索引`FindComputer`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-494">Finds the index of the last computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-495">集合中的后半部分中第二个查找的第一本计算机书籍索引使用`FindComputer`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-495">Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-496">集合中的后半部分中第二个查找的最后一个的计算机书籍索引使用`FindComputer`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-496">Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3edb2-497">
            <paramref name="match" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-497">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindIndex">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3edb2-498">搜索与指定谓词所定义的条件相匹配的元素，返回 <see cref="T:System.Collections.Generic.List`1" /> 或它的一部分中第一个匹配项的从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-498">Searches for an element that matches the conditions defined by a specified predicate, and returns the zero-based index of the first occurrence within the <see cref="T:System.Collections.Generic.List`1" /> or a portion of it.</span>
          </span>
          <span data-ttu-id="3edb2-499">如果未找到与条件匹配的项，则此方法返回 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-499">This method returns -1 if an item that matches the conditions is not found.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public int FindIndex (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindIndex(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindIndex (match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindIndex(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindIndex : Predicate&lt;'T&gt; -&gt; int" Usage="list.FindIndex match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="3edb2-500">
            <see cref="T:System.Predicate`1" /> 委托，用于定义要搜索的元素的条件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-500">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-501">搜索与指定谓词所定义的条件相匹配的元素，并返回整个 <see cref="T:System.Collections.Generic.List`1" /> 中第一个匹配元素的从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-501">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-502">如果找到与 <paramref name="match" /> 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-502">The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-503"><xref:System.Collections.Generic.List%601>向前的第一个元素开始和结束时间的最后一个元素搜索。</span><span class="sxs-lookup"><span data-stu-id="3edb2-503">The <xref:System.Collections.Generic.List%601> is searched forward starting at the first element and ending at the last element.</span></span>  
  
 <span data-ttu-id="3edb2-504"><xref:System.Predicate%601>是返回的方法的委托`true`如果该对象传递给委托中定义的条件匹配。</span><span class="sxs-lookup"><span data-stu-id="3edb2-504">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="3edb2-505">当前元素<xref:System.Collections.Generic.List%601>逐个传递给<xref:System.Predicate%601>委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-505">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.</span></span> <span data-ttu-id="3edb2-506">委托的签名：</span><span class="sxs-lookup"><span data-stu-id="3edb2-506">The delegate has the signature:</span></span>  
  
```csharp  
public bool methodName(T obj)  
```  
  
```vb  
Public Function methodName(obj As T) As Boolean  
```  
  
 <span data-ttu-id="3edb2-507">此方法执行线性搜索;因此，此方法为 O (*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-507">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-508">下面的示例定义`Employee`类的两个字段`Name`和`Id`。</span><span class="sxs-lookup"><span data-stu-id="3edb2-508">The following example defines an `Employee` class with two fields, `Name` and `Id`.</span></span> <span data-ttu-id="3edb2-509">它还定义了`EmployeeSearch`具有单个方法的类`StartsWith`，，该值指示是否`Employee.Name`字段开头的指定子字符串，提供给`EmployeeSearch`类构造函数。</span><span class="sxs-lookup"><span data-stu-id="3edb2-509">It also defines an `EmployeeSearch` class with a single method, `StartsWith`, that indicates whether the `Employee.Name` field starts with a specified substring that is supplied to the `EmployeeSearch` class constructor.</span></span> <span data-ttu-id="3edb2-510">请注意此方法的签名</span><span class="sxs-lookup"><span data-stu-id="3edb2-510">Note  the signature of this method</span></span>  
  
```csharp  
public bool StartsWith(Employee e)  
```  
  
```vb  
Public Function StartsWith(e As Employee) As Boolean  
```  
  
 <span data-ttu-id="3edb2-511">对应于可以传递给委托的签名<xref:System.Collections.Generic.List%601.FindIndex%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-511">corresponds to the signature of the delegate that can be passed to the <xref:System.Collections.Generic.List%601.FindIndex%2A> method.</span></span> <span data-ttu-id="3edb2-512">示例实例化`List<Employee>`对象中，添加了许多`Employee`，，然后调用到 objets<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>方法两次搜索整个集合，第一个第一次`Employee`对象，其`Name`字段的开始使用"J"和第二次第一个`Employee`对象，其`Name`字段开头"Ju"。</span><span class="sxs-lookup"><span data-stu-id="3edb2-512">The example instantiates a `List<Employee>` object, adds a number of `Employee` objets to it, and then calls the <xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29> method twice  to search the entire collection , the first time for the first `Employee` object whose `Name` field begins with "J", and the second time for the first `Employee` object whose `Name` field begins with "Ju".</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.FindIndex#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/cs/FindIndex2.cs#2)]
 [!code-vb[System.Collections.Generic.List.FindIndex#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/vb/FindIndex2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3edb2-513">
            <paramref name="match" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-513">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public int FindIndex (int startIndex, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindIndex(int32 startIndex, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindIndex (startIndex As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindIndex(int startIndex, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindIndex : int * Predicate&lt;'T&gt; -&gt; int" Usage="list.FindIndex (startIndex, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex">
          <span data-ttu-id="3edb2-514">从零开始的搜索的起始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-514">The zero-based starting index of the search.</span>
          </span>
        </param>
        <param name="match">
          <span data-ttu-id="3edb2-515">
            <see cref="T:System.Predicate`1" /> 委托，用于定义要搜索的元素的条件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-515">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-516">搜索与指定谓词所定义的条件相匹配的元素，并返回 <see cref="T:System.Collections.Generic.List`1" /> 中从指定索引到最后一个元素的元素范围内第一个匹配项的从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-516">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the specified index to the last element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-517">如果找到与 <paramref name="match" /> 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-517">The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-518"><xref:System.Collections.Generic.List%601>处开始向前搜索`startIndex`和结束时间的最后一个元素。</span><span class="sxs-lookup"><span data-stu-id="3edb2-518">The <xref:System.Collections.Generic.List%601> is searched forward starting at `startIndex` and ending at the last element.</span></span>  
  
 <span data-ttu-id="3edb2-519"><xref:System.Predicate%601>是返回的方法的委托`true`如果该对象传递给委托中定义的条件匹配。</span><span class="sxs-lookup"><span data-stu-id="3edb2-519">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="3edb2-520">当前元素<xref:System.Collections.Generic.List%601>逐个传递给<xref:System.Predicate%601>委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-520">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.</span></span> <span data-ttu-id="3edb2-521">委托的签名：</span><span class="sxs-lookup"><span data-stu-id="3edb2-521">The delegate has the signature:</span></span>  
  
```csharp  
public bool methodName(T obj)  
```  
  
```vb  
Public Function methodName(obj As T) As Boolean  
```  
  
 <span data-ttu-id="3edb2-522">此方法执行线性搜索;因此，此方法为 O (*n*) 操作，其中*n*是中的元素数`startIndex`末尾<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-522">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from `startIndex` to the end of the <xref:System.Collections.Generic.List%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-523">下面的示例定义`Employee`类的两个字段`Name`和`Id`。</span><span class="sxs-lookup"><span data-stu-id="3edb2-523">The following example defines an `Employee` class with two fields, `Name` and `Id`.</span></span> <span data-ttu-id="3edb2-524">它还定义了`EmployeeSearch`具有单个方法的类`StartsWith`，，该值指示是否`Employee.Name`字段开头的指定子字符串，提供给`EmployeeSearch`类构造函数。</span><span class="sxs-lookup"><span data-stu-id="3edb2-524">It also defines an `EmployeeSearch` class with a single method, `StartsWith`, that indicates whether the `Employee.Name` field starts with a specified substring that is supplied to the `EmployeeSearch` class constructor.</span></span> <span data-ttu-id="3edb2-525">请注意此方法的签名</span><span class="sxs-lookup"><span data-stu-id="3edb2-525">Note  the signature of this method</span></span>  
  
```csharp  
public bool StartsWith(Employee e)  
```  
  
```vb  
Public Function StartsWith(e As Employee) As Boolean  
```  
  
 <span data-ttu-id="3edb2-526">对应于可以传递给委托的签名<xref:System.Collections.Generic.List%601.FindIndex%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-526">corresponds to the signature of the delegate that can be passed to the <xref:System.Collections.Generic.List%601.FindIndex%2A> method.</span></span> <span data-ttu-id="3edb2-527">该示例实例化`List<Employee>`对象中，添加了许多`Employee`，，然后调用到 objets<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>方法两次以开头的第五个成员 （即索引 4 处的成员） 在集合中搜索。</span><span class="sxs-lookup"><span data-stu-id="3edb2-527">The example instantiates a `List<Employee>` object, adds a number of `Employee` objets to it, and then calls the <xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29> method twice  to search the collection starting with its fifth member (that is, the member at index 4).</span></span> <span data-ttu-id="3edb2-528">第一次，它会搜索的第一个`Employee`对象，其`Name`字段开头"J"; 第二个时，它会搜索的第一个`Employee`对象，其`Name`字段开头"Ju"。</span><span class="sxs-lookup"><span data-stu-id="3edb2-528">The first time, it searches for the first `Employee` object whose `Name` field begins with "J"; the second time, it searches for the first `Employee` object whose `Name` field begins with "Ju".</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.FindIndex#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/cs/FindIndex3.cs#3)]
 [!code-vb[System.Collections.Generic.List.FindIndex#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/vb/FindIndex3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3edb2-529">
            <paramref name="match" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-529">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3edb2-530">
            <paramref name="startIndex" /> 超出了 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-530">
              <paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindIndex">
      <MemberSignature Language="C#" Value="public int FindIndex (int startIndex, int count, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindIndex(int32 startIndex, int32 count, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindIndex (startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindIndex(int startIndex, int count, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindIndex : int * int * Predicate&lt;'T&gt; -&gt; int" Usage="list.FindIndex (startIndex, count, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex">
          <span data-ttu-id="3edb2-531">从零开始的搜索的起始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-531">The zero-based starting index of the search.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3edb2-532">要搜索的部分中的元素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-532">The number of elements in the section to search.</span>
          </span>
        </param>
        <param name="match">
          <span data-ttu-id="3edb2-533">
            <see cref="T:System.Predicate`1" /> 委托，用于定义要搜索的元素的条件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-533">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-534">搜索与指定谓词所定义的条件相匹配的一个元素，并返回 <see cref="T:System.Collections.Generic.List`1" /> 中从指定的索引开始、包含指定元素个数的元素范围内第一个匹配项的从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-534">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that starts at the specified index and contains the specified number of elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-535">如果找到与 <paramref name="match" /> 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-535">The zero-based index of the first occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-536"><xref:System.Collections.Generic.List%601>处开始向前搜索`startIndex`结束时间`startIndex`plus`count`减 1，如果`count`大于 0。</span><span class="sxs-lookup"><span data-stu-id="3edb2-536">The <xref:System.Collections.Generic.List%601> is searched forward starting at `startIndex` and ending at `startIndex` plus `count` minus 1, if `count` is greater than 0.</span></span>  
  
 <span data-ttu-id="3edb2-537"><xref:System.Predicate%601>是返回的方法的委托`true`如果该对象传递给委托中定义的条件匹配。</span><span class="sxs-lookup"><span data-stu-id="3edb2-537">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="3edb2-538">当前元素<xref:System.Collections.Generic.List%601>逐个传递给<xref:System.Predicate%601>委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-538">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.</span></span> <span data-ttu-id="3edb2-539">委托的签名：</span><span class="sxs-lookup"><span data-stu-id="3edb2-539">The delegate has the signature:</span></span>  
  
```csharp  
public bool methodName(T obj)  
```  
  
```vb  
Public Function methodName(obj As T) As Boolean  
```  
  
 <span data-ttu-id="3edb2-540">此方法执行线性搜索;因此，此方法为 O (*n*) 操作，其中*n*是`count`。</span><span class="sxs-lookup"><span data-stu-id="3edb2-540">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-541">下面的示例定义`Employee`类的两个字段`Name`和`Id`。</span><span class="sxs-lookup"><span data-stu-id="3edb2-541">The following example defines an `Employee` class with two fields, `Name` and `Id`.</span></span> <span data-ttu-id="3edb2-542">它还定义了`EmployeeSearch`具有单个方法的类`StartsWith`，，该值指示是否`Employee.Name`字段开头的指定子字符串，提供给`EmployeeSearch`类构造函数。</span><span class="sxs-lookup"><span data-stu-id="3edb2-542">It also defines an `EmployeeSearch` class with a single method, `StartsWith`, that indicates whether the `Employee.Name` field starts with a specified substring that is supplied to the `EmployeeSearch` class constructor.</span></span> <span data-ttu-id="3edb2-543">请注意此方法的签名</span><span class="sxs-lookup"><span data-stu-id="3edb2-543">Note  the signature of this method</span></span>  
  
```csharp  
public bool StartsWith(Employee e)  
```  
  
```vb  
Public Function StartsWith(e As Employee) As Boolean  
```  
  
 <span data-ttu-id="3edb2-544">对应于可以传递给委托的签名<xref:System.Collections.Generic.List%601.FindIndex%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-544">corresponds to the signature of the delegate that can be passed to the <xref:System.Collections.Generic.List%601.FindIndex%2A> method.</span></span> <span data-ttu-id="3edb2-545">示例实例化`List<Employee>`对象中，添加了许多`Employee`，，然后调用到 objets<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>两次，以在整个集合中搜索的方法 (即成员从索引 0 到索引<xref:System.Collections.Generic.List%601.Count%2A>-1)。</span><span class="sxs-lookup"><span data-stu-id="3edb2-545">The example instantiates a `List<Employee>` object, adds a number of `Employee` objets to it, and then calls the <xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29> method twice  to search the entire collection (that is, the members from index 0 to index <xref:System.Collections.Generic.List%601.Count%2A> - 1).</span></span> <span data-ttu-id="3edb2-546">第一次，它会搜索的第一个`Employee`对象，其`Name`字段开头"J"; 第二个时，它会搜索的第一个`Employee`对象，其`Name`字段开头"Ju"。</span><span class="sxs-lookup"><span data-stu-id="3edb2-546">The first time, it searches for the first `Employee` object whose `Name` field begins with "J"; the second time, it searches for the first `Employee` object whose `Name` field begins with "Ju".</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.FindIndex#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/cs/FindIndex1.cs#1)]
 [!code-vb[System.Collections.Generic.List.FindIndex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Collections.Generic.List.FindIndex/vb/FindIndex1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3edb2-547">
            <paramref name="match" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-547">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3edb2-548">
            <paramref name="startIndex" /> 超出了 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-548">
              <paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="3edb2-549">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-549">-or-</span>
          </span>
          <span data-ttu-id="3edb2-550">
            <paramref name="count" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-550">
              <paramref name="count" /> is less than 0.</span>
          </span>
          <span data-ttu-id="3edb2-551">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-551">-or-</span>
          </span>
          <span data-ttu-id="3edb2-552">
            <paramref name="startIndex" /> 和 <paramref name="count" /> 未指定 <see cref="T:System.Collections.Generic.List`1" /> 中的有效部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-552">
              <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindLast">
      <MemberSignature Language="C#" Value="public T FindLast (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T FindLast(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLast (match As Predicate(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; T FindLast(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindLast : Predicate&lt;'T&gt; -&gt; 'T" Usage="list.FindLast match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="3edb2-553">
            <see cref="T:System.Predicate`1" /> 委托，用于定义要搜索的元素的条件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-553">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-554">搜索与指定谓词所定义的条件相匹配的元素，并返回整个 <see cref="T:System.Collections.Generic.List`1" /> 中的最后一个匹配元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-554">Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-555">如果找到，则为与指定谓词所定义的条件相匹配的最后一个元素；否则为类型 <paramref name="T" /> 的默认值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-555">The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <paramref name="T" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-556"><xref:System.Predicate%601>是返回的方法的委托`true`如果该对象传递给委托中定义的条件匹配。</span><span class="sxs-lookup"><span data-stu-id="3edb2-556">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="3edb2-557">当前元素<xref:System.Collections.Generic.List%601>逐个传递给<xref:System.Predicate%601>委托，向后移动<xref:System.Collections.Generic.List%601>，从最后一个元素开始和结束的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="3edb2-557">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, moving backward in the <xref:System.Collections.Generic.List%601>, starting with the last element and ending with the first element.</span></span>  <span data-ttu-id="3edb2-558">当找到匹配项时，停止处理。</span><span class="sxs-lookup"><span data-stu-id="3edb2-558">Processing is stopped when a match is found.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="3edb2-559">在搜索时包含值类型的列表，请确保该类型的默认值不满足搜索谓词。</span><span class="sxs-lookup"><span data-stu-id="3edb2-559">When searching a list containing value types, make sure the default value for the type does not satisfy the search predicate.</span></span> <span data-ttu-id="3edb2-560">否则，没有任何方式来区分一个默认值，该值指示已找到任何匹配项和一个列表元素，它恰好有类型的默认值。</span><span class="sxs-lookup"><span data-stu-id="3edb2-560">Otherwise, there is no way to distinguish between a default value indicating that no match was found and a list element that happens to have the default value for the type.</span></span> <span data-ttu-id="3edb2-561">如果默认值满足搜索谓词，则使用<xref:System.Collections.Generic.List%601.FindLastIndex%2A>方法相反。</span><span class="sxs-lookup"><span data-stu-id="3edb2-561">If the default value satisfies the search predicate, use the <xref:System.Collections.Generic.List%601.FindLastIndex%2A> method instead.</span></span>  
  
 <span data-ttu-id="3edb2-562">此方法执行线性搜索;因此，此方法为 O (*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-562">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-563">下面的示例演示的查找方法<xref:System.Collections.Generic.List%601>类。</span><span class="sxs-lookup"><span data-stu-id="3edb2-563">The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class.</span></span> <span data-ttu-id="3edb2-564">有关示例<xref:System.Collections.Generic.List%601>类包含`book`类的对象`Book`，使用的数据进行[示例 XML 文件： 书籍 (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)。</span><span class="sxs-lookup"><span data-stu-id="3edb2-564">The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f).</span></span> <span data-ttu-id="3edb2-565">`FillList`方法在示例中使用[LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)分析的属性值的值从 XML`book`对象。</span><span class="sxs-lookup"><span data-stu-id="3edb2-565">The `FillList` method in the example uses [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.</span></span>  
  
 <span data-ttu-id="3edb2-566">下表描述了为 find 方法提供的示例。</span><span class="sxs-lookup"><span data-stu-id="3edb2-566">The following table describes the examples provided for the find methods.</span></span>  
  
|<span data-ttu-id="3edb2-567">方法</span><span class="sxs-lookup"><span data-stu-id="3edb2-567">Method</span></span>|<span data-ttu-id="3edb2-568">示例</span><span class="sxs-lookup"><span data-stu-id="3edb2-568">Example</span></span>|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-569">查找 ID 使用书`IDToFind`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-569">Finds a book by an ID using the `IDToFind` predicate delegate.</span></span><br /><br /> <span data-ttu-id="3edb2-570">C# 示例使用匿名委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-570">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-571">查找所有丛书，其`Genre`属性是"计算机"使用`FindComputer`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-571">Find all books that whose `Genre` property is "Computer" using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-572">2001 年，使用之前在发布日期在集合中查找最后一本书`PubBefore2001`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-572">Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.</span></span><br /><br /> <span data-ttu-id="3edb2-573">C# 示例使用匿名委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-573">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-574">查找的第一个计算机书籍使用索引`FindComputer`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-574">Finds the index of first computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-575">查找的最后一个的计算机书籍使用索引`FindComputer`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-575">Finds the index of the last computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-576">集合中的后半部分中第二个查找的第一本计算机书籍索引使用`FindComputer`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-576">Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-577">集合中的后半部分中第二个查找的最后一个的计算机书籍索引使用`FindComputer`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-577">Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3edb2-578">
            <paramref name="match" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-578">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindLastIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindLastIndex">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3edb2-579">搜索与指定谓词所定义的条件相匹配的元素，返回 <see cref="T:System.Collections.Generic.List`1" /> 或它的一部分中最后一个匹配项的从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-579">Searches for an element that matches the conditions defined by a specified predicate, and returns the zero-based index of the last occurrence within the <see cref="T:System.Collections.Generic.List`1" /> or a portion of it.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindLastIndex">
      <MemberSignature Language="C#" Value="public int FindLastIndex (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindLastIndex(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLastIndex (match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindLastIndex(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindLastIndex : Predicate&lt;'T&gt; -&gt; int" Usage="list.FindLastIndex match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="3edb2-580">
            <see cref="T:System.Predicate`1" /> 委托，用于定义要搜索的元素的条件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-580">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-581">搜索与指定谓词所定义的条件相匹配的元素，并返回整个 <see cref="T:System.Collections.Generic.List`1" /> 中最后一个匹配元素的从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-581">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-582">如果找到与 <paramref name="match" /> 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-582">The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-583"><xref:System.Collections.Generic.List%601>向后搜索的最后一个元素开始，结束时间的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="3edb2-583">The <xref:System.Collections.Generic.List%601> is searched backward starting at the last element and ending at the first element.</span></span>  
  
 <span data-ttu-id="3edb2-584"><xref:System.Predicate%601>是返回的方法的委托`true`如果该对象传递给委托中定义的条件匹配。</span><span class="sxs-lookup"><span data-stu-id="3edb2-584">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="3edb2-585">当前元素<xref:System.Collections.Generic.List%601>逐个传递给<xref:System.Predicate%601>委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-585">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.</span></span>  
  
 <span data-ttu-id="3edb2-586">此方法执行线性搜索;因此，此方法为 O (*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-586">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-587">下面的示例演示的查找方法<xref:System.Collections.Generic.List%601>类。</span><span class="sxs-lookup"><span data-stu-id="3edb2-587">The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class.</span></span> <span data-ttu-id="3edb2-588">有关示例<xref:System.Collections.Generic.List%601>类包含`book`类的对象`Book`，使用的数据进行[示例 XML 文件： 书籍 (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)。</span><span class="sxs-lookup"><span data-stu-id="3edb2-588">The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f).</span></span> <span data-ttu-id="3edb2-589">`FillList`方法在示例中使用[LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)分析的属性值的值从 XML`book`对象。</span><span class="sxs-lookup"><span data-stu-id="3edb2-589">The `FillList` method in the example uses [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.</span></span>  
  
 <span data-ttu-id="3edb2-590">下表描述了为 find 方法提供的示例。</span><span class="sxs-lookup"><span data-stu-id="3edb2-590">The following table describes the examples provided for the find methods.</span></span>  
  
|<span data-ttu-id="3edb2-591">方法</span><span class="sxs-lookup"><span data-stu-id="3edb2-591">Method</span></span>|<span data-ttu-id="3edb2-592">示例</span><span class="sxs-lookup"><span data-stu-id="3edb2-592">Example</span></span>|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-593">查找 ID 使用书`IDToFind`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-593">Finds a book by an ID using the `IDToFind` predicate delegate.</span></span><br /><br /> <span data-ttu-id="3edb2-594">C# 示例使用匿名委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-594">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-595">查找所有丛书，其`Genre`属性是"计算机"使用`FindComputer`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-595">Find all books that whose `Genre` property is "Computer" using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-596">2001 年，使用之前在发布日期在集合中查找最后一本书`PubBefore2001`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-596">Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.</span></span><br /><br /> <span data-ttu-id="3edb2-597">C# 示例使用匿名委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-597">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-598">查找的第一个计算机书籍使用索引`FindComputer`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-598">Finds the index of first computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-599">查找的最后一个的计算机书籍使用索引`FindComputer`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-599">Finds the index of the last computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-600">集合中的后半部分中第二个查找的第一本计算机书籍索引使用`FindComputer`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-600">Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-601">集合中的后半部分中第二个查找的最后一个的计算机书籍索引使用`FindComputer`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-601">Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3edb2-602">
            <paramref name="match" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-602">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindLastIndex">
      <MemberSignature Language="C#" Value="public int FindLastIndex (int startIndex, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindLastIndex(int32 startIndex, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLastIndex (startIndex As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindLastIndex(int startIndex, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindLastIndex : int * Predicate&lt;'T&gt; -&gt; int" Usage="list.FindLastIndex (startIndex, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex">
          <span data-ttu-id="3edb2-603">向后搜索的从零开始的起始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-603">The zero-based starting index of the backward search.</span>
          </span>
        </param>
        <param name="match">
          <span data-ttu-id="3edb2-604">
            <see cref="T:System.Predicate`1" /> 委托，用于定义要搜索的元素的条件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-604">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-605">搜索与由指定谓词定义的条件相匹配的元素，并返回 <see cref="T:System.Collections.Generic.List`1" /> 中从第一个元素到指定索引的元素范围内最后一个匹配项的从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-605">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the first element to the specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-606">如果找到与 <paramref name="match" /> 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-606">The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-607"><xref:System.Collections.Generic.List%601>是搜索处开始向后`startIndex`和结束时间的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="3edb2-607">The <xref:System.Collections.Generic.List%601> is searched backward starting at `startIndex` and ending at the first element.</span></span>  
  
 <span data-ttu-id="3edb2-608"><xref:System.Predicate%601>是返回的方法的委托`true`如果该对象传递给委托中定义的条件匹配。</span><span class="sxs-lookup"><span data-stu-id="3edb2-608">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="3edb2-609">当前元素<xref:System.Collections.Generic.List%601>逐个传递给<xref:System.Predicate%601>委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-609">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.</span></span>  
  
 <span data-ttu-id="3edb2-610">此方法执行线性搜索;因此，此方法为 O (*n*) 操作，其中*n*是从开头的元素数目<xref:System.Collections.Generic.List%601>到`startIndex`。</span><span class="sxs-lookup"><span data-stu-id="3edb2-610">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from the beginning of the <xref:System.Collections.Generic.List%601> to `startIndex`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3edb2-611">
            <paramref name="match" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-611">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3edb2-612">
            <paramref name="startIndex" /> 超出了 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-612">
              <paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="FindLastIndex">
      <MemberSignature Language="C#" Value="public int FindLastIndex (int startIndex, int count, Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindLastIndex(int32 startIndex, int32 count, class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function FindLastIndex (startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindLastIndex(int startIndex, int count, Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.FindLastIndex : int * int * Predicate&lt;'T&gt; -&gt; int" Usage="list.FindLastIndex (startIndex, count, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="startIndex">
          <span data-ttu-id="3edb2-613">向后搜索的从零开始的起始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-613">The zero-based starting index of the backward search.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3edb2-614">要搜索的部分中的元素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-614">The number of elements in the section to search.</span>
          </span>
        </param>
        <param name="match">
          <span data-ttu-id="3edb2-615">
            <see cref="T:System.Predicate`1" /> 委托，用于定义要搜索的元素的条件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-615">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the element to search for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-616">搜索与指定谓词所定义的条件相匹配的元素，并返回 <see cref="T:System.Collections.Generic.List`1" /> 中包含指定元素个数、到指定索引结束的元素范围内最后一个匹配项的从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-616">Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that contains the specified number of elements and ends at the specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-617">如果找到与 <paramref name="match" /> 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-617">The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-618"><xref:System.Collections.Generic.List%601>是搜索处开始向后`startIndex`结束时间`startIndex`减去`count`加上 1，如果`count`大于 0。</span><span class="sxs-lookup"><span data-stu-id="3edb2-618">The <xref:System.Collections.Generic.List%601> is searched backward starting at `startIndex` and ending at `startIndex` minus `count` plus 1, if `count` is greater than 0.</span></span>  
  
 <span data-ttu-id="3edb2-619"><xref:System.Predicate%601>是返回的方法的委托`true`如果该对象传递给委托中定义的条件匹配。</span><span class="sxs-lookup"><span data-stu-id="3edb2-619">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="3edb2-620">当前元素<xref:System.Collections.Generic.List%601>逐个传递给<xref:System.Predicate%601>委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-620">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate.</span></span>  
  
 <span data-ttu-id="3edb2-621">此方法执行线性搜索;因此，此方法为 O (*n*) 操作，其中*n*是`count`。</span><span class="sxs-lookup"><span data-stu-id="3edb2-621">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-622">下面的示例演示的查找方法<xref:System.Collections.Generic.List%601>类。</span><span class="sxs-lookup"><span data-stu-id="3edb2-622">The following example demonstrates the find methods for the <xref:System.Collections.Generic.List%601> class.</span></span> <span data-ttu-id="3edb2-623">有关示例<xref:System.Collections.Generic.List%601>类包含`book`类的对象`Book`，使用的数据进行[示例 XML 文件： 书籍 (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f)。</span><span class="sxs-lookup"><span data-stu-id="3edb2-623">The example for the <xref:System.Collections.Generic.List%601> class contains `book` objects, of class `Book`, using the data from the [Sample XML File: Books (LINQ to XML)](http://msdn.microsoft.com/library/94252daf-6097-4625-afc2-0eb778958d4f).</span></span> <span data-ttu-id="3edb2-624">`FillList`方法在示例中使用[LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13)分析的属性值的值从 XML`book`对象。</span><span class="sxs-lookup"><span data-stu-id="3edb2-624">The `FillList` method in the example uses [LINQ to XML](http://msdn.microsoft.com/library/f0fe21e9-ee43-4a55-b91a-0800e5782c13) to parse the values from the XML to property values of the `book` objects.</span></span>  
  
 <span data-ttu-id="3edb2-625">下表描述了为 find 方法提供的示例。</span><span class="sxs-lookup"><span data-stu-id="3edb2-625">The following table describes the examples provided for the find methods.</span></span>  
  
|<span data-ttu-id="3edb2-626">方法</span><span class="sxs-lookup"><span data-stu-id="3edb2-626">Method</span></span>|<span data-ttu-id="3edb2-627">示例</span><span class="sxs-lookup"><span data-stu-id="3edb2-627">Example</span></span>|  
|------------|-------------|  
|<xref:System.Collections.Generic.List%601.Find%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-628">查找 ID 使用书`IDToFind`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-628">Finds a book by an ID using the `IDToFind` predicate delegate.</span></span><br /><br /> <span data-ttu-id="3edb2-629">C# 示例使用匿名委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-629">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindAll%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-630">查找所有丛书，其`Genre`属性是"计算机"使用`FindComputer`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-630">Find all books that whose `Genre` property is "Computer" using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLast%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-631">2001 年，使用之前在发布日期在集合中查找最后一本书`PubBefore2001`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-631">Finds the last book in the collection that has a publish date before 2001, using the `PubBefore2001` predicate delegate.</span></span><br /><br /> <span data-ttu-id="3edb2-632">C# 示例使用匿名委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-632">C# example uses an anonymous delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-633">查找的第一个计算机书籍使用索引`FindComputer`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-633">Finds the index of first computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-634">查找的最后一个的计算机书籍使用索引`FindComputer`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-634">Finds the index of the last computer book using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-635">集合中的后半部分中第二个查找的第一本计算机书籍索引使用`FindComputer`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-635">Finds the index of first computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
|<xref:System.Collections.Generic.List%601.FindLastIndex%28System.Int32%2CSystem.Int32%2CSystem.Predicate%7B%600%7D%29>|<span data-ttu-id="3edb2-636">集合中的后半部分中第二个查找的最后一个的计算机书籍索引使用`FindComputer`谓词委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-636">Finds the index of last computer book in the second half of the collection, using the `FindComputer` predicate delegate.</span></span>|  
  
 [!code-csharp[List\`1_Find_Methods#1](~/samples/snippets/csharp/VS_Snippets_CLR/list`1_find_methods/cs/program.cs#1)]
 [!code-vb[List\`1_Find_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/list`1_find_methods/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3edb2-637">
            <paramref name="match" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-637">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3edb2-638">
            <paramref name="startIndex" /> 超出了 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-638">
              <paramref name="startIndex" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="3edb2-639">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-639">-or-</span>
          </span>
          <span data-ttu-id="3edb2-640">
            <paramref name="count" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-640">
              <paramref name="count" /> is less than 0.</span>
          </span>
          <span data-ttu-id="3edb2-641">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-641">-or-</span>
          </span>
          <span data-ttu-id="3edb2-642">
            <paramref name="startIndex" /> 和 <paramref name="count" /> 未指定 <see cref="T:System.Collections.Generic.List`1" /> 中的有效部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-642">
              <paramref name="startIndex" /> and <paramref name="count" /> do not specify a valid section in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="Overload:System.Collections.Generic.List`1.FindIndex" />
        <altmember cref="Overload:System.Collections.Generic.List`1.BinarySearch" />
        <altmember cref="Overload:System.Collections.Generic.List`1.IndexOf" />
        <altmember cref="Overload:System.Collections.Generic.List`1.LastIndexOf" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
    <Member MemberName="ForEach">
      <MemberSignature Language="C#" Value="public void ForEach (Action&lt;T&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ForEach(class System.Action`1&lt;!T&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ForEach (action As Action(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ForEach(Action&lt;T&gt; ^ action);" />
      <MemberSignature Language="F#" Value="member this.ForEach : Action&lt;'T&gt; -&gt; unit" Usage="list.ForEach action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="action">
          <span data-ttu-id="3edb2-643">要对 <see cref="T:System.Collections.Generic.List`1" /> 的每个元素执行的 <see cref="T:System.Action`1" /> 委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-643">The <see cref="T:System.Action`1" /> delegate to perform on each element of the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-644">对 <see cref="T:System.Collections.Generic.List`1" /> 的每个元素执行指定操作。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-644">Performs the specified action on each element of the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-645"><xref:System.Action%601>对象执行的操作方法的委托传递给它。</span><span class="sxs-lookup"><span data-stu-id="3edb2-645">The <xref:System.Action%601> is a delegate to a method that performs an action on the object passed to it.</span></span>  <span data-ttu-id="3edb2-646">当前元素<xref:System.Collections.Generic.List%601>逐个传递给<xref:System.Action%601>委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-646">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Action%601> delegate.</span></span>  
  
 <span data-ttu-id="3edb2-647">此方法为 O (*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-647">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="3edb2-648">修改基础集合中的正文<xref:System.Action%601>委托不受支持，会导致未定义的行为。</span><span class="sxs-lookup"><span data-stu-id="3edb2-648">Modifying the underlying collection in the body of the <xref:System.Action%601> delegate is not supported and causes undefined behavior.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-649">下面的示例演示如何将<xref:System.Action%601>要打印的内容委托<xref:System.Collections.Generic.List%601>对象。</span><span class="sxs-lookup"><span data-stu-id="3edb2-649">The following example demonstrates the use of the <xref:System.Action%601> delegate to print the contents of a <xref:System.Collections.Generic.List%601> object.</span></span> <span data-ttu-id="3edb2-650">在此示例中`Print`方法用于向控制台显示列表的内容。</span><span class="sxs-lookup"><span data-stu-id="3edb2-650">In this example the `Print` method is used to display the contents of the list to the console.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3edb2-651">除了显示内容使用`Print`方法中，C# 示例演示如何使用以将结果显示到控制台。</span><span class="sxs-lookup"><span data-stu-id="3edb2-651">In addition to displaying the contents using the `Print` method, the C# example demonstrates the use of  to display the results to the console.</span></span>  
  
 [!code-csharp[System.Action_PrintExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]
 [!code-vb[System.Action_PrintExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3edb2-652">
            <paramref name="action" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-652">
              <paramref name="action" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3edb2-653">已修改集合中的某个元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-653">An element in the collection has been modified.</span>
          </span>
        </exception>
        <altmember cref="T:System.Action`1" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;T&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Generic.List`1/Enumerator&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As List(Of T).Enumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::List&lt;T&gt;::Enumerator GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Generic.List&lt;'T&gt;.Enumerator" Usage="list.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;T&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3edb2-654">返回循环访问 <see cref="T:System.Collections.Generic.List`1" /> 的枚举数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-654">Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-655">用于 <see cref="T:System.Collections.Generic.List`1.Enumerator" /> 的 <see cref="T:System.Collections.Generic.List`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-655">A <see cref="T:System.Collections.Generic.List`1.Enumerator" /> for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-656">`foreach` C# 语言的语句 (`for each` c + + 中`For Each`在 Visual Basic 中) 隐藏了枚举器的复杂性。</span><span class="sxs-lookup"><span data-stu-id="3edb2-656">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="3edb2-657">因此，建议使用 `foreach`，而不是直接操作枚举数。</span><span class="sxs-lookup"><span data-stu-id="3edb2-657">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="3edb2-658">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="3edb2-658">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="3edb2-659">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="3edb2-659">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="3edb2-660">在此位置上，<xref:System.Collections.Generic.List%601.Enumerator.Current%2A>未定义属性。</span><span class="sxs-lookup"><span data-stu-id="3edb2-660">At this position, the <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> property is undefined.</span></span> <span data-ttu-id="3edb2-661">因此，您必须调用<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>方法将枚举数前移到集合，然后再读取的值的第一个元素<xref:System.Collections.Generic.List%601.Enumerator.Current%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-661">Therefore, you must call the <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.List%601.Enumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="3edb2-662"><xref:System.Collections.Generic.List%601.Enumerator.Current%2A>属性返回同一对象，直到<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="3edb2-662">The <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> property returns the same object until <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="3edb2-663"><xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> 将 <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="3edb2-663"><xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="3edb2-664">如果<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>越过集合，枚举器的末尾放置在集合中的最后一个元素的后面和<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>返回`false`。</span><span class="sxs-lookup"><span data-stu-id="3edb2-664">If <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="3edb2-665">当枚举数位于此位置上，对后续调用<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>还返回`false`。</span><span class="sxs-lookup"><span data-stu-id="3edb2-665">When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="3edb2-666">如果最后一次调用到<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>返回`false`，<xref:System.Collections.Generic.List%601.Enumerator.Current%2A>是不确定的。</span><span class="sxs-lookup"><span data-stu-id="3edb2-666">If the last call to <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="3edb2-667">无法再次将 <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> 设置为集合的第一个元素；必须改为创建新的枚举器实例。</span><span class="sxs-lookup"><span data-stu-id="3edb2-667">You cannot set <xref:System.Collections.Generic.List%601.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="3edb2-668">只要集合保持不变，枚举数就保持有效。</span><span class="sxs-lookup"><span data-stu-id="3edb2-668">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="3edb2-669">如果进行了更改到集合中，例如添加、 修改或删除元素，该枚举数将失效且不可恢复，并且下次调用<xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A>或<xref:System.Collections.Generic.List%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A>引发<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-669">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.Generic.List%601.Enumerator.MoveNext%2A> or <xref:System.Collections.Generic.List%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="3edb2-670">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="3edb2-670">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="3edb2-671">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="3edb2-671">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="3edb2-672">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="3edb2-672">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="3edb2-673"><xref:System.Collections.Generic?displayProperty=nameWithType> 命名空间中集合的默认实现是不同步的。</span><span class="sxs-lookup"><span data-stu-id="3edb2-673">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
 <span data-ttu-id="3edb2-674">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="3edb2-674">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.List`1.Enumerator" />
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="GetRange">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;T&gt; GetRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.List`1&lt;!T&gt; GetRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRange (index As Integer, count As Integer) As List(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::List&lt;T&gt; ^ GetRange(int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetRange : int * int -&gt; System.Collections.Generic.List&lt;'T&gt;" Usage="list.GetRange (index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3edb2-675">范围开始处的从零开始的 <see cref="T:System.Collections.Generic.List`1" /> 索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-675">The zero-based <see cref="T:System.Collections.Generic.List`1" /> index at which the range starts.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3edb2-676">范围中的元素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-676">The number of elements in the range.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-677">在源 <see cref="T:System.Collections.Generic.List`1" /> 中创建元素范围的浅表复制。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-677">Creates a shallow copy of a range of elements in the source <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-678">源 <see cref="T:System.Collections.Generic.List`1" /> 中的元素范围的浅表副本复制。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-678">A shallow copy of a range of elements in the source <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-679">该集合的子集或引用类型的集合的浅表副本包含仅对集合的元素的引用。</span><span class="sxs-lookup"><span data-stu-id="3edb2-679">A shallow copy of a collection of reference types, or a subset of that collection, contains only the references to the elements of the collection.</span></span> <span data-ttu-id="3edb2-680">不复制对象本身。</span><span class="sxs-lookup"><span data-stu-id="3edb2-680">The objects themselves are not copied.</span></span> <span data-ttu-id="3edb2-681">新列表中的引用都指向相同的对象中的原始列表的引用。</span><span class="sxs-lookup"><span data-stu-id="3edb2-681">The references in the new list point to the same objects as the references in the original list.</span></span>  
  
 <span data-ttu-id="3edb2-682">值类型的集合或该集合的子集的浅表副本包含集合的元素。</span><span class="sxs-lookup"><span data-stu-id="3edb2-682">A shallow copy of a collection of value types, or a subset of that collection, contains the elements of the collection.</span></span> <span data-ttu-id="3edb2-683">但是，如果集合中的元素包含对其他对象的引用，不会复制这些对象。</span><span class="sxs-lookup"><span data-stu-id="3edb2-683">However, if the elements of the collection contain references to other objects, those objects are not copied.</span></span> <span data-ttu-id="3edb2-684">在新集合的元素中引用都指向相同的对象中的原始集合的元素的引用。</span><span class="sxs-lookup"><span data-stu-id="3edb2-684">The references in the elements of the new collection point to the same objects as the references in the elements of the original collection.</span></span>  
  
 <span data-ttu-id="3edb2-685">与此相反，集合的深层副本复制这些元素以及由这些元素直接或间接引用的所有内容。</span><span class="sxs-lookup"><span data-stu-id="3edb2-685">In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</span></span>  
  
 <span data-ttu-id="3edb2-686">此方法为 O (*n*) 操作，其中*n*是`count`。</span><span class="sxs-lookup"><span data-stu-id="3edb2-686">This method is an O(*n*) operation, where *n* is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-687">下面的示例演示<xref:System.Collections.Generic.List%601.GetRange%2A>方法和其他方法<xref:System.Collections.Generic.List%601>对范围进行操作的类。</span><span class="sxs-lookup"><span data-stu-id="3edb2-687">The following example demonstrates the <xref:System.Collections.Generic.List%601.GetRange%2A> method and other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges.</span></span> <span data-ttu-id="3edb2-688">在此示例中，末尾<xref:System.Collections.Generic.List%601.GetRange%2A>方法用于从列表中，从开始的索引位置 2 获取三个项。</span><span class="sxs-lookup"><span data-stu-id="3edb2-688">At the end of the example, the <xref:System.Collections.Generic.List%601.GetRange%2A> method is used to get three items from the list, beginning with index location 2.</span></span> <span data-ttu-id="3edb2-689"><xref:System.Collections.Generic.List%601.ToArray%2A>方法调用所产生<xref:System.Collections.Generic.List%601>，创建三个元素的数组。</span><span class="sxs-lookup"><span data-stu-id="3edb2-689">The <xref:System.Collections.Generic.List%601.ToArray%2A> method is called on the resulting <xref:System.Collections.Generic.List%601>, creating an array of three elements.</span></span> <span data-ttu-id="3edb2-690">将显示数组的元素。</span><span class="sxs-lookup"><span data-stu-id="3edb2-690">The elements of the array are displayed.</span></span>  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3edb2-691">
            <paramref name="index" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-691">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="3edb2-692">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-692">-or-</span>
          </span>
          <span data-ttu-id="3edb2-693">
            <paramref name="count" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-693">
              <paramref name="count" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3edb2-694">
            <paramref name="index" /> 和 <paramref name="count" /> 不表示 <see cref="T:System.Collections.Generic.List`1" /> 中元素的有效范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-694">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3edb2-695">返回 <see cref="T:System.Collections.Generic.List`1" /> 或它的一部分中某个值的第一个匹配项的从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-695">Returns the zero-based index of the first occurrence of a value in the <see cref="T:System.Collections.Generic.List`1" /> or in a portion of it.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.IndexOf(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(T item);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : 'T -&gt; int&#xA;override this.IndexOf : 'T -&gt; int" Usage="list.IndexOf item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.IndexOf(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="3edb2-696">要在 <see cref="T:System.Collections.Generic.List`1" /> 中定位的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-696">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="3edb2-697">对于引用类型，该值可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-697">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-698">搜索指定的对象，并返回整个 <see cref="T:System.Collections.Generic.List`1" /> 中第一个匹配项的从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-698">Searches for the specified object and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-699">如果在整个 <paramref name="item" /> 中找到 <see cref="T:System.Collections.Generic.List`1" /> 的匹配项，则为第一个匹配项的从零开始的索引；否则为 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-699">The zero-based index of the first occurrence of <paramref name="item" /> within the entire <see cref="T:System.Collections.Generic.List`1" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-700"><xref:System.Collections.Generic.List%601>向前的第一个元素开始和结束时间的最后一个元素搜索。</span><span class="sxs-lookup"><span data-stu-id="3edb2-700">The <xref:System.Collections.Generic.List%601> is searched forward starting at the first element and ending at the last element.</span></span>  
  
 <span data-ttu-id="3edb2-701">此方法可确定是否使用默认的相等比较的相等<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>为`T`，列表中的值的类型。</span><span class="sxs-lookup"><span data-stu-id="3edb2-701">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="3edb2-702">此方法执行线性搜索;因此，此方法为 O (*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-702">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-703">下面的示例演示的所有三个重载<xref:System.Collections.Generic.List%601.IndexOf%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-703">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.IndexOf%2A> method.</span></span> <span data-ttu-id="3edb2-704">一个<xref:System.Collections.Generic.List%601>的字符串创建后，显示两次，在索引位置 0 和 5 的索引位置的一个条目。</span><span class="sxs-lookup"><span data-stu-id="3edb2-704">A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="3edb2-705"><xref:System.Collections.Generic.List%601.IndexOf%28%600%29>方法重载从一开始，在列表中搜索并查找字符串的第一个匹配项。</span><span class="sxs-lookup"><span data-stu-id="3edb2-705">The <xref:System.Collections.Generic.List%601.IndexOf%28%600%29> method overload searches the list from the beginning, and finds the first occurrence of the string.</span></span> <span data-ttu-id="3edb2-706"><xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29>方法重载用于搜索的索引位置 3 开头的列表，直至列表的末尾，并查找字符串的第二个匹配项。</span><span class="sxs-lookup"><span data-stu-id="3edb2-706">The <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string.</span></span> <span data-ttu-id="3edb2-707">最后，<xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29>方法重载用于搜索的两个条目，开始的索引位置两个范围，则返回 – 1，因为没有在该范围内搜索字符串的实例。</span><span class="sxs-lookup"><span data-stu-id="3edb2-707">Finally, the <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[List\`1_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_IndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_IndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_IndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(!T item, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(T item, int index);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : 'T * int -&gt; int" Usage="list.IndexOf (item, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="3edb2-708">要在 <see cref="T:System.Collections.Generic.List`1" /> 中定位的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-708">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="3edb2-709">对于引用类型，该值可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-709">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="3edb2-710">从零开始的搜索的起始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-710">The zero-based starting index of the search.</span>
          </span>
          <span data-ttu-id="3edb2-711">空列表中 0（零）为有效值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-711">0 (zero) is valid in an empty list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-712">搜索指定对象并返回 <see cref="T:System.Collections.Generic.List`1" /> 中从指定索引到最后一个元素这部分元素中第一个匹配项的从零开始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-712">Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the specified index to the last element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-713">如果在 <see cref="T:System.Collections.Generic.List`1" /> 中从 <paramref name="index" /> 到最后一个元素的元素范围内找到 <paramref name="item" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-713">The zero-based index of the first occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from <paramref name="index" /> to the last element, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-714"><xref:System.Collections.Generic.List%601>处开始向前搜索`index`和结束时间的最后一个元素。</span><span class="sxs-lookup"><span data-stu-id="3edb2-714">The <xref:System.Collections.Generic.List%601> is searched forward starting at `index` and ending at the last element.</span></span>  
  
 <span data-ttu-id="3edb2-715">此方法可确定是否使用默认的相等比较的相等<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>为`T`，列表中的值的类型。</span><span class="sxs-lookup"><span data-stu-id="3edb2-715">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="3edb2-716">此方法执行线性搜索;因此，此方法为 O (*n*) 操作，其中*n*是中的元素数`index`末尾<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-716">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from `index` to the end of the <xref:System.Collections.Generic.List%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-717">下面的示例演示的所有三个重载<xref:System.Collections.Generic.List%601.IndexOf%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-717">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.IndexOf%2A> method.</span></span> <span data-ttu-id="3edb2-718">一个<xref:System.Collections.Generic.List%601>的字符串创建后，显示两次，在索引位置 0 和 5 的索引位置的一个条目。</span><span class="sxs-lookup"><span data-stu-id="3edb2-718">A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="3edb2-719"><xref:System.Collections.Generic.List%601.IndexOf%28%600%29>方法重载从一开始，在列表中搜索并查找字符串的第一个匹配项。</span><span class="sxs-lookup"><span data-stu-id="3edb2-719">The <xref:System.Collections.Generic.List%601.IndexOf%28%600%29> method overload searches the list from the beginning, and finds the first occurrence of the string.</span></span> <span data-ttu-id="3edb2-720"><xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29>方法重载用于搜索的索引位置 3 开头的列表，直至列表的末尾，并查找字符串的第二个匹配项。</span><span class="sxs-lookup"><span data-stu-id="3edb2-720">The <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string.</span></span> <span data-ttu-id="3edb2-721">最后，<xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29>方法重载用于搜索的两个条目，开始的索引位置两个范围，则返回 – 1，因为没有在该范围内搜索字符串的实例。</span><span class="sxs-lookup"><span data-stu-id="3edb2-721">Finally, the <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[List\`1_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_IndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_IndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_IndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3edb2-722">
            <paramref name="index" /> 超出了 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-722">
              <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(!T item, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(T item, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : 'T * int * int -&gt; int" Usage="list.IndexOf (item, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="3edb2-723">要在 <see cref="T:System.Collections.Generic.List`1" /> 中定位的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-723">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="3edb2-724">对于引用类型，该值可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-724">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="3edb2-725">从零开始的搜索的起始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-725">The zero-based starting index of the search.</span>
          </span>
          <span data-ttu-id="3edb2-726">空列表中 0（零）为有效值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-726">0 (zero) is valid in an empty list.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3edb2-727">要搜索的部分中的元素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-727">The number of elements in the section to search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-728">搜索指定对象并返回 <see cref="T:System.Collections.Generic.List`1" /> 中从指定索引开始并包含指定元素数的这部分元素中第一个匹配项的从零开始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-728">Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that starts at the specified index and contains the specified number of elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-729">如果在 <see cref="T:System.Collections.Generic.List`1" /> 中从 <paramref name="index" /> 开始并包含 <paramref name="count" /> 个元素的元素范围内找到 <paramref name="item" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-729">The zero-based index of the first occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that starts at <paramref name="index" /> and contains <paramref name="count" /> number of elements, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-730"><xref:System.Collections.Generic.List%601>处开始向前搜索`index`结束时间`index`plus`count`减 1，如果`count`大于 0。</span><span class="sxs-lookup"><span data-stu-id="3edb2-730">The <xref:System.Collections.Generic.List%601> is searched forward starting at `index` and ending at `index` plus `count` minus 1, if `count` is greater than 0.</span></span>  
  
 <span data-ttu-id="3edb2-731">此方法可确定是否使用默认的相等比较的相等<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>为`T`，列表中的值的类型。</span><span class="sxs-lookup"><span data-stu-id="3edb2-731">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="3edb2-732">此方法执行线性搜索;因此，此方法为 O (*n*) 操作，其中*n*是`count`。</span><span class="sxs-lookup"><span data-stu-id="3edb2-732">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-733">下面的示例演示的所有三个重载<xref:System.Collections.Generic.List%601.IndexOf%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-733">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.IndexOf%2A> method.</span></span> <span data-ttu-id="3edb2-734">一个<xref:System.Collections.Generic.List%601>的字符串创建后，显示两次，在索引位置 0 和 5 的索引位置的一个条目。</span><span class="sxs-lookup"><span data-stu-id="3edb2-734">A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="3edb2-735"><xref:System.Collections.Generic.List%601.IndexOf%28%600%29>方法重载从一开始，在列表中搜索并查找字符串的第一个匹配项。</span><span class="sxs-lookup"><span data-stu-id="3edb2-735">The <xref:System.Collections.Generic.List%601.IndexOf%28%600%29> method overload searches the list from the beginning, and finds the first occurrence of the string.</span></span> <span data-ttu-id="3edb2-736"><xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29>方法重载用于搜索的索引位置 3 开头的列表，直至列表的末尾，并查找字符串的第二个匹配项。</span><span class="sxs-lookup"><span data-stu-id="3edb2-736">The <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list beginning with index location 3 and continuing to the end of the list, and finds the second occurrence of the string.</span></span> <span data-ttu-id="3edb2-737">最后，<xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29>方法重载用于搜索的两个条目，开始的索引位置两个范围，则返回 – 1，因为没有在该范围内搜索字符串的实例。</span><span class="sxs-lookup"><span data-stu-id="3edb2-737">Finally, the <xref:System.Collections.Generic.List%601.IndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of two entries, beginning at index location two; it returns –1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[List\`1_IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_IndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_IndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_IndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3edb2-738">
            <paramref name="index" /> 超出了 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-738">
              <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="3edb2-739">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-739">-or-</span>
          </span>
          <span data-ttu-id="3edb2-740">
            <paramref name="count" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-740">
              <paramref name="count" /> is less than 0.</span>
          </span>
          <span data-ttu-id="3edb2-741">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-741">-or-</span>
          </span>
          <span data-ttu-id="3edb2-742">
            <paramref name="index" /> 和 <paramref name="count" /> 未指定 <see cref="T:System.Collections.Generic.List`1" /> 中的有效部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-742">
              <paramref name="index" /> and <paramref name="count" /> do not specify a valid section in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, !T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (index As Integer, item As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Insert(int index, T item);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * 'T -&gt; unit&#xA;override this.Insert : int * 'T -&gt; unit" Usage="list.Insert (index, item)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3edb2-743">从零开始的索引，应在该位置插入 <c>item</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-743">The zero-based index at which <c>item</c> should be inserted.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="3edb2-744">要插入的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-744">The object to insert.</span>
          </span>
          <span data-ttu-id="3edb2-745">对于引用类型，该值可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-745">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-746">将元素插入 <see cref="T:System.Collections.Generic.List`1" /> 的指定索引处。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-746">Inserts an element into the <see cref="T:System.Collections.Generic.List`1" /> at the specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-747"><xref:System.Collections.Generic.List%601> 接受`null`是有效的引用值类型以及允许重复的元素。</span><span class="sxs-lookup"><span data-stu-id="3edb2-747"><xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="3edb2-748">如果<xref:System.Collections.Generic.List%601.Count%2A>已等于<xref:System.Collections.Generic.List%601.Capacity%2A>，则容量的<xref:System.Collections.Generic.List%601>自动重新分配内部数组中，增加和现有元素之前添加新元素将复制到新数组。</span><span class="sxs-lookup"><span data-stu-id="3edb2-748">If <xref:System.Collections.Generic.List%601.Count%2A> already equals <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="3edb2-749">如果`index`等同于<xref:System.Collections.Generic.List%601.Count%2A>，`item`添加到末尾<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-749">If `index` is equal to <xref:System.Collections.Generic.List%601.Count%2A>, `item` is added to the end of <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="3edb2-750">此方法为 O (*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-750">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-751">下面的示例演示如何添加、 删除和插入中的简单业务对象<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-751">The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 <span data-ttu-id="3edb2-752">下面的示例演示<xref:System.Collections.Generic.List%601.Insert%2A>方法，以及各种其他属性和方法的<xref:System.Collections.Generic.List%601>泛型类。</span><span class="sxs-lookup"><span data-stu-id="3edb2-752">The following example demonstrates the <xref:System.Collections.Generic.List%601.Insert%2A> method, along with various other properties and methods of the <xref:System.Collections.Generic.List%601> generic class.</span></span> <span data-ttu-id="3edb2-753">创建列表后，会添加元素。</span><span class="sxs-lookup"><span data-stu-id="3edb2-753">After the list is created, elements are added.</span></span> <span data-ttu-id="3edb2-754"><xref:System.Collections.Generic.List%601.Insert%2A>方法用于将项插入到列表的中间。</span><span class="sxs-lookup"><span data-stu-id="3edb2-754">The <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert an item into the middle of the list.</span></span> <span data-ttu-id="3edb2-755">项插入是为使用更高版本删除的重复<xref:System.Collections.Generic.List%601.Remove%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-755">The item inserted is a duplicate, which is later removed using the <xref:System.Collections.Generic.List%601.Remove%2A> method.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3edb2-756">
            <paramref name="index" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-756">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="3edb2-757">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-757">-or-</span>
          </span>
          <span data-ttu-id="3edb2-758">
            <paramref name="index" /> 大于 <see cref="P:System.Collections.Generic.List`1.Count" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-758">
              <paramref name="index" /> is greater than <see cref="P:System.Collections.Generic.List`1.Count" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.Add(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
      </Docs>
    </Member>
    <Member MemberName="InsertRange">
      <MemberSignature Language="C#" Value="public void InsertRange (int index, System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertRange(int32 index, class System.Collections.Generic.IEnumerable`1&lt;!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertRange (index As Integer, collection As IEnumerable(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertRange(int index, System::Collections::Generic::IEnumerable&lt;T&gt; ^ collection);" />
      <MemberSignature Language="F#" Value="member this.InsertRange : int * seq&lt;'T&gt; -&gt; unit" Usage="list.InsertRange (index, collection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="collection" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3edb2-759">应在此处插入新元素的从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-759">The zero-based index at which the new elements should be inserted.</span>
          </span>
        </param>
        <param name="collection">
          <span data-ttu-id="3edb2-760">应将其元素插入到 <see cref="T:System.Collections.Generic.List`1" /> 中的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-760">The collection whose elements should be inserted into the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="3edb2-761">集合自身不能为 <see langword="null" />，但它可以包含为 <see langword="null" /> 的元素（如果类型 <c>T</c> 为引用类型）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-761">The collection itself cannot be <see langword="null" />, but it can contain elements that are <see langword="null" />, if type <c>T</c> is a reference type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-762">将集合中的元素插入 <see cref="T:System.Collections.Generic.List`1" /> 的指定索引处。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-762">Inserts the elements of a collection into the <see cref="T:System.Collections.Generic.List`1" /> at the specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-763"><xref:System.Collections.Generic.List%601> 接受`null`是有效的引用值类型以及允许重复的元素。</span><span class="sxs-lookup"><span data-stu-id="3edb2-763"><xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="3edb2-764">如果新<xref:System.Collections.Generic.List%601.Count%2A>(当前<xref:System.Collections.Generic.List%601.Count%2A>plus 集合的大小) 将大于<xref:System.Collections.Generic.List%601.Capacity%2A>，则容量的<xref:System.Collections.Generic.List%601>增加通过自动重新分配要容纳新元素的内部数组和之前添加新元素，现有元素将复制到新数组。</span><span class="sxs-lookup"><span data-stu-id="3edb2-764">If the new <xref:System.Collections.Generic.List%601.Count%2A> (the current <xref:System.Collections.Generic.List%601.Count%2A> plus the size of the collection) will be greater than <xref:System.Collections.Generic.List%601.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.List%601> is increased by automatically reallocating the internal array to accommodate the new elements, and the existing elements are copied to the new array before the new elements are added.</span></span>  
  
 <span data-ttu-id="3edb2-765">如果`index`等同于<xref:System.Collections.Generic.List%601.Count%2A>，元素将被添加到末尾<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-765">If `index` is equal to <xref:System.Collections.Generic.List%601.Count%2A>, the elements are added to the end of <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="3edb2-766">集合中元素的顺序将保留在<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-766">The order of the elements in the collection is preserved in the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="3edb2-767">此方法为 O (*n* \* *m*) 操作，其中*n*是要添加的元素数并*m*是<xref:System.Collections.Generic.List%601.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="3edb2-767">This method is an O(*n* \* *m*) operation, where *n* is the number of elements to be added and *m* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-768">下面的示例演示<xref:System.Collections.Generic.List%601.InsertRange%2A>方法和各种其他方法的<xref:System.Collections.Generic.List%601>对范围进行操作的类。</span><span class="sxs-lookup"><span data-stu-id="3edb2-768">The following example demonstrates <xref:System.Collections.Generic.List%601.InsertRange%2A> method and various other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges.</span></span> <span data-ttu-id="3edb2-769">创建和使用多个平静工厂吃恐龙都暗示了，名称填充列表之后<xref:System.Collections.Generic.List%601.InsertRange%2A>方法用于将数组的三个凶恶肉吃恐龙都暗示了插入到列表中，索引位置 3 开始。</span><span class="sxs-lookup"><span data-stu-id="3edb2-769">After the list has been created and populated with the names of several peaceful plant-eating dinosaurs, the <xref:System.Collections.Generic.List%601.InsertRange%2A> method is used to insert an array of three ferocious meat-eating dinosaurs into the list, beginning at index location 3.</span></span>  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3edb2-770">
            <paramref name="collection" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-770">
              <paramref name="collection" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3edb2-771">
            <paramref name="index" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-771">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="3edb2-772">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-772">-or-</span>
          </span>
          <span data-ttu-id="3edb2-773">
            <paramref name="index" /> 大于 <see cref="P:System.Collections.Generic.List`1.Count" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-773">
              <paramref name="index" /> is greater than <see cref="P:System.Collections.Generic.List`1.Count" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public T this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(index As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T default[int] { T get(int index); void set(int index, T value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : 'T with get, set" Usage="System.Collections.Generic.List&lt;'T&gt;.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IList`1.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3edb2-774">要获取或设置的元素的从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-774">The zero-based index of the element to get or set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-775">获取或设置指定索引处的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-775">Gets or sets the element at the specified index.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3edb2-776">指定索引处的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-776">The element at the specified index.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-777"><xref:System.Collections.Generic.List%601> 接受`null`是有效的引用值类型以及允许重复的元素。</span><span class="sxs-lookup"><span data-stu-id="3edb2-777"><xref:System.Collections.Generic.List%601> accepts `null` as a valid value for reference types and allows duplicate elements.</span></span>  
  
 <span data-ttu-id="3edb2-778">可以使用下面的语法通过此属性访问集合中的特定元素：`myCollection[index]`。</span><span class="sxs-lookup"><span data-stu-id="3edb2-778">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[index]`.</span></span>  
  
 <span data-ttu-id="3edb2-779">检索此属性的值是 o （1） 的操作;将属性设置也是 o （1） 操作。</span><span class="sxs-lookup"><span data-stu-id="3edb2-779">Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-780">在本部分中的示例演示<xref:System.Collections.Generic.List%601.Item%2A>属性 （C# 中的索引器） 和各种其他属性和方法的<xref:System.Collections.Generic.List%601>泛型类。</span><span class="sxs-lookup"><span data-stu-id="3edb2-780">The example in this section demonstrates the <xref:System.Collections.Generic.List%601.Item%2A> property (the indexer in C#) and various other properties and methods of the <xref:System.Collections.Generic.List%601> generic class.</span></span> <span data-ttu-id="3edb2-781">列表后创建和使用填充<xref:System.Collections.Generic.List%601.Add%2A>方法中，元素将检索，显示使用<xref:System.Collections.Generic.List%601.Item%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="3edb2-781">After the list has been created and populated using the <xref:System.Collections.Generic.List%601.Add%2A> method, an element is retrieved and displayed using the <xref:System.Collections.Generic.List%601.Item%2A> property.</span></span> <span data-ttu-id="3edb2-782">(有关的示例，使用<xref:System.Collections.Generic.List%601.Item%2A>属性来设置元素的值列表，请参阅<xref:System.Collections.Generic.List%601.AsReadOnly%2A>。)</span><span class="sxs-lookup"><span data-stu-id="3edb2-782">(For an example that uses the <xref:System.Collections.Generic.List%601.Item%2A> property to set the value of a list element, see <xref:System.Collections.Generic.List%601.AsReadOnly%2A>.)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3edb2-783">Visual Basic、 C# 和 c + + 所有具有访问语法<xref:System.Collections.Generic.List%601.Item%2A>而无需使用其名称的属性。</span><span class="sxs-lookup"><span data-stu-id="3edb2-783">Visual Basic, C#, and C++ all have syntax for accessing the <xref:System.Collections.Generic.List%601.Item%2A> property without using its name.</span></span> <span data-ttu-id="3edb2-784">相反，变量包含<xref:System.Collections.Generic.List%601>，就好像数组使用。</span><span class="sxs-lookup"><span data-stu-id="3edb2-784">Instead, the variable containing the <xref:System.Collections.Generic.List%601> is used as if it were an array.</span></span>  
  
 <span data-ttu-id="3edb2-785">C# 语言使用关键字来定义而不是实现索引器<xref:System.Collections.Generic.List%601.Item%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="3edb2-785">The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.List%601.Item%2A> property.</span></span> <span data-ttu-id="3edb2-786">Visual Basic 将 <xref:System.Collections.Generic.List%601.Item%2A> 实现为默认属性，该属性提供相同的索引功能。</span><span class="sxs-lookup"><span data-stu-id="3edb2-786">Visual Basic implements <xref:System.Collections.Generic.List%601.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 [!code-csharp[List`1_Class#2](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#2)]
 [!code-vb[List`1_Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#2)]  
[!code-csharp[List`1_Class#3](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#3)]
[!code-vb[List`1_Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3edb2-787">
            <paramref name="index" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-787">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="3edb2-788">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-788">-or-</span>
          </span>
          <span data-ttu-id="3edb2-789">
            <paramref name="index" /> 等于或大于 <see cref="P:System.Collections.Generic.List`1.Count" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-789">
              <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.Generic.List`1.Count" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LastIndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3edb2-790">返回 <see cref="T:System.Collections.Generic.List`1" /> 或它的一部分中某个值的最后一个匹配项的从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-790">Returns the zero-based index of the last occurrence of a value in the <see cref="T:System.Collections.Generic.List`1" /> or in a portion of it.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.LastIndexOf(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : 'T -&gt; int" Usage="list.LastIndexOf item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="3edb2-791">要在 <see cref="T:System.Collections.Generic.List`1" /> 中定位的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-791">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="3edb2-792">对于引用类型，该值可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-792">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-793">搜索指定对象并返回整个 <see cref="T:System.Collections.Generic.List`1" /> 中最后一个匹配项的从零开始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-793">Searches for the specified object and returns the zero-based index of the last occurrence within the entire <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-794">如果在整个 <see cref="T:System.Collections.Generic.List`1" /> 中找到 <paramref name="item" /> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-794">The zero-based index of the last occurrence of <paramref name="item" /> within the entire the <see cref="T:System.Collections.Generic.List`1" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-795"><xref:System.Collections.Generic.List%601>向后搜索的最后一个元素开始，结束时间的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="3edb2-795">The <xref:System.Collections.Generic.List%601> is searched backward starting at the last element and ending at the first element.</span></span>  
  
 <span data-ttu-id="3edb2-796">此方法可确定是否使用默认的相等比较的相等<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>为`T`，列表中的值的类型。</span><span class="sxs-lookup"><span data-stu-id="3edb2-796">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="3edb2-797">此方法执行线性搜索;因此，此方法为 O (*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-797">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-798">下面的示例演示的所有三个重载<xref:System.Collections.Generic.List%601.LastIndexOf%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-798">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.LastIndexOf%2A> method.</span></span> <span data-ttu-id="3edb2-799">一个<xref:System.Collections.Generic.List%601>的字符串创建后，显示两次，在索引位置 0 和 5 的索引位置的一个条目。</span><span class="sxs-lookup"><span data-stu-id="3edb2-799">A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="3edb2-800"><xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29>方法重载从结束时，在整个列表中搜索并查找字符串的第二个匹配项。</span><span class="sxs-lookup"><span data-stu-id="3edb2-800">The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29> method overload searches the entire list from the end, and finds the second occurrence of the string.</span></span> <span data-ttu-id="3edb2-801"><xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29>方法重载用于向后从索引位置 3 开始，然后再向列表的开头，因此会在列表中找到该字符串的第一个匹配项在列表中搜索。</span><span class="sxs-lookup"><span data-stu-id="3edb2-801">The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list.</span></span> <span data-ttu-id="3edb2-802">最后，<xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29>方法重载用于搜索的索引位置 4 开始，往前的四个条目范围 （即，它搜索在位置 4、 3、 2 和 1 项）; 此搜索将返回 – 1，因为没有搜索的实例在该范围内的字符串。</span><span class="sxs-lookup"><span data-stu-id="3edb2-802">Finally, the <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[List\`1_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_LastIndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_LastIndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_LastIndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.IndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T, index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item, int index);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : 'T * int -&gt; int" Usage="list.LastIndexOf (item, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="3edb2-803">要在 <see cref="T:System.Collections.Generic.List`1" /> 中定位的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-803">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="3edb2-804">对于引用类型，该值可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-804">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="3edb2-805">向后搜索的从零开始的起始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-805">The zero-based starting index of the backward search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-806">搜索指定对象并返回 <see cref="T:System.Collections.Generic.List`1" /> 中从第一个元素到指定索引这部分元素中最后一个匹配项的从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-806">Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the first element to the specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-807">如果在 <see cref="T:System.Collections.Generic.List`1" /> 中从第一个元素到 <paramref name="index" /> 的元素范围内找到 <paramref name="item" /> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-807">The zero-based index of the last occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that extends from the first element to <paramref name="index" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-808"><xref:System.Collections.Generic.List%601>是搜索处开始向后`index`和结束时间的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="3edb2-808">The <xref:System.Collections.Generic.List%601> is searched backward starting at `index` and ending at the first element.</span></span>  
  
 <span data-ttu-id="3edb2-809">此方法可确定是否使用默认的相等比较的相等<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>为`T`，列表中的值的类型。</span><span class="sxs-lookup"><span data-stu-id="3edb2-809">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="3edb2-810">此方法执行线性搜索;因此，此方法为 O (*n*) 操作，其中*n*是从开头的元素数目<xref:System.Collections.Generic.List%601>到`index`。</span><span class="sxs-lookup"><span data-stu-id="3edb2-810">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is the number of elements from the beginning of the <xref:System.Collections.Generic.List%601> to `index`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-811">下面的示例演示的所有三个重载<xref:System.Collections.Generic.List%601.LastIndexOf%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-811">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.LastIndexOf%2A> method.</span></span> <span data-ttu-id="3edb2-812">一个<xref:System.Collections.Generic.List%601>的字符串创建后，显示两次，在索引位置 0 和 5 的索引位置的一个条目。</span><span class="sxs-lookup"><span data-stu-id="3edb2-812">A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="3edb2-813"><xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29>方法重载从结束时，在整个列表中搜索并查找字符串的第二个匹配项。</span><span class="sxs-lookup"><span data-stu-id="3edb2-813">The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29> method overload searches the entire list from the end, and finds the second occurrence of the string.</span></span> <span data-ttu-id="3edb2-814"><xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29>方法重载用于向后从索引位置 3 开始，然后再向列表的开头，因此会在列表中找到该字符串的第一个匹配项在列表中搜索。</span><span class="sxs-lookup"><span data-stu-id="3edb2-814">The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list.</span></span> <span data-ttu-id="3edb2-815">最后，<xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29>方法重载用于搜索的索引位置 4 开始，往前的四个条目范围 （即，它搜索在位置 4、 3、 2 和 1 项）; 此搜索将返回 – 1，因为没有搜索的实例在该范围内的字符串。</span><span class="sxs-lookup"><span data-stu-id="3edb2-815">Finally, the <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of four entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[List\`1_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_LastIndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_LastIndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_LastIndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3edb2-816">
            <paramref name="index" /> 超出了 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-816">
              <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.IndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LastIndexOf(!T item, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T, index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.LastIndexOf : 'T * int * int -&gt; int" Usage="list.LastIndexOf (item, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="3edb2-817">要在 <see cref="T:System.Collections.Generic.List`1" /> 中定位的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-817">The object to locate in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="3edb2-818">对于引用类型，该值可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-818">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="3edb2-819">向后搜索的从零开始的起始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-819">The zero-based starting index of the backward search.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3edb2-820">要搜索的部分中的元素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-820">The number of elements in the section to search.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-821">搜索指定对象并返回 <see cref="T:System.Collections.Generic.List`1" /> 中到指定索引为止包含指定元素数的这部分元素中最后一个匹配项的从零开始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-821">Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that contains the specified number of elements and ends at the specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-822">如果找到包含 <paramref name="count" /> 个元素、到 <paramref name="index" /> 为止的索引，则为 <see cref="T:System.Collections.Generic.List`1" /> 中元素范围内 <paramref name="item" /> 的最后一个匹配项的从零开始的索引；否则为 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-822">The zero-based index of the last occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Generic.List`1" /> that contains <paramref name="count" /> number of elements and ends at <paramref name="index" />, if found; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-823"><xref:System.Collections.Generic.List%601>是搜索处开始向后`index`结束时间`index`减去`count`加上 1，如果`count`大于 0。</span><span class="sxs-lookup"><span data-stu-id="3edb2-823">The <xref:System.Collections.Generic.List%601> is searched backward starting at `index` and ending at `index` minus `count` plus 1, if `count` is greater than 0.</span></span>  
  
 <span data-ttu-id="3edb2-824">此方法可确定是否使用默认的相等比较的相等<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>为`T`，列表中的值的类型。</span><span class="sxs-lookup"><span data-stu-id="3edb2-824">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="3edb2-825">此方法执行线性搜索;因此，此方法为 O (*n*) 操作，其中*n*是`count`。</span><span class="sxs-lookup"><span data-stu-id="3edb2-825">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is `count`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-826">下面的示例演示的所有三个重载<xref:System.Collections.Generic.List%601.LastIndexOf%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-826">The following example demonstrates all three overloads of the <xref:System.Collections.Generic.List%601.LastIndexOf%2A> method.</span></span> <span data-ttu-id="3edb2-827">一个<xref:System.Collections.Generic.List%601>的字符串创建后，显示两次，在索引位置 0 和 5 的索引位置的一个条目。</span><span class="sxs-lookup"><span data-stu-id="3edb2-827">A <xref:System.Collections.Generic.List%601> of strings is created, with one entry that appears twice, at index location 0 and index location 5.</span></span> <span data-ttu-id="3edb2-828"><xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29>方法重载从结束时，在整个列表中搜索并查找字符串的第二个匹配项。</span><span class="sxs-lookup"><span data-stu-id="3edb2-828">The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%29> method overload searches the entire list from the end, and finds the second occurrence of the string.</span></span> <span data-ttu-id="3edb2-829"><xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29>方法重载用于向后从索引位置 3 开始，然后再向列表的开头，因此会在列表中找到该字符串的第一个匹配项在列表中搜索。</span><span class="sxs-lookup"><span data-stu-id="3edb2-829">The <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%29> method overload is used to search the list backward beginning with index location 3 and continuing to the beginning of the list, so it finds the first occurrence of the string in the list.</span></span> <span data-ttu-id="3edb2-830">最后，<xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29>方法重载用于搜索的 4 个条目，索引位置 4 开始，并向后扩展范围 （即，它搜索在位置 4、 3、 2 和 1 项）; 此搜索将返回 – 1，因为没有搜索的实例在该范围内的字符串。</span><span class="sxs-lookup"><span data-stu-id="3edb2-830">Finally, the <xref:System.Collections.Generic.List%601.LastIndexOf%28%600%2CSystem.Int32%2CSystem.Int32%29> method overload is used to search a range of 4 entries, beginning at index location 4 and extending backward (that is, it searches the items at locations 4, 3, 2, and 1); this search returns –1 because there are no instances of the search string in that range.</span></span>  
  
 [!code-cpp[List\`1_LastIndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_LastIndexOf/cpp/source.cpp#1)]
 [!code-csharp[List\`1_LastIndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_LastIndexOf/cs/source.cs#1)]
 [!code-vb[List\`1_LastIndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_LastIndexOf/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3edb2-831">
            <paramref name="index" /> 超出了 <see cref="T:System.Collections.Generic.List`1" /> 的有效索引范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-831">
              <paramref name="index" /> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="3edb2-832">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-832">-or-</span>
          </span>
          <span data-ttu-id="3edb2-833">
            <paramref name="count" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-833">
              <paramref name="count" /> is less than 0.</span>
          </span>
          <span data-ttu-id="3edb2-834">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-834">-or-</span>
          </span>
          <span data-ttu-id="3edb2-835">
            <paramref name="index" /> 和 <paramref name="count" /> 未指定 <see cref="T:System.Collections.Generic.List`1" /> 中的有效部分。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-835">
              <paramref name="index" /> and <paramref name="count" /> do not specify a valid section in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.IndexOf(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Contains(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!T item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (item As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Remove(T item);" />
      <MemberSignature Language="F#" Value="abstract member Remove : 'T -&gt; bool&#xA;override this.Remove : 'T -&gt; bool" Usage="list.Remove item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="3edb2-836">要从 <see cref="T:System.Collections.Generic.List`1" /> 中删除的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-836">The object to remove from the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="3edb2-837">对于引用类型，该值可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-837">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-838">从 <see cref="T:System.Collections.Generic.List`1" /> 中移除特定对象的第一个匹配项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-838">Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-839">如果成功移除了 <paramref name="item" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-839">
              <see langword="true" /> if <paramref name="item" /> is successfully removed; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="3edb2-840">如果在 <see langword="false" /> 中没有找到 <paramref name="item" />，则此方法也会返回 <see cref="T:System.Collections.Generic.List`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-840">This method also returns <see langword="false" /> if <paramref name="item" /> was not found in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-841">如果类型`T`实现<xref:System.IEquatable%601>泛型接口，则相等比较器是<xref:System.IEquatable%601.Equals%2A>接口; 方法的默认相等比较器是为<xref:System.Object.Equals%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-841">If type `T` implements the <xref:System.IEquatable%601> generic interface, the equality comparer is the <xref:System.IEquatable%601.Equals%2A> method of that interface; otherwise, the default equality comparer is <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="3edb2-842">此方法执行线性搜索;因此，此方法为 O (*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-842">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-843">下面的示例演示如何添加、 删除和插入中的简单业务对象<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-843">The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 <span data-ttu-id="3edb2-844">下面的示例演示<xref:System.Collections.Generic.List%601.Remove%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-844">The following example demonstrates <xref:System.Collections.Generic.List%601.Remove%2A> method.</span></span> <span data-ttu-id="3edb2-845">一些属性和方法的<xref:System.Collections.Generic.List%601>泛型类用于添加、 插入和搜索列表。</span><span class="sxs-lookup"><span data-stu-id="3edb2-845">Several properties and methods of the <xref:System.Collections.Generic.List%601> generic class are used to add, insert, and search the list.</span></span> <span data-ttu-id="3edb2-846">在执行这些操作之后, 该列表包含重复。</span><span class="sxs-lookup"><span data-stu-id="3edb2-846">After these operations, the list contains a duplicate.</span></span> <span data-ttu-id="3edb2-847"><xref:System.Collections.Generic.List%601.Remove%2A>方法用于删除重复项的第一个实例并显示内容。</span><span class="sxs-lookup"><span data-stu-id="3edb2-847">The <xref:System.Collections.Generic.List%601.Remove%2A> method is used to remove the first instance of the duplicate item, and the contents are displayed.</span></span> <span data-ttu-id="3edb2-848"><xref:System.Collections.Generic.List%601.Remove%2A>方法始终会删除它遇到的第一个实例。</span><span class="sxs-lookup"><span data-stu-id="3edb2-848">The <xref:System.Collections.Generic.List%601.Remove%2A> method always removes the first instance it encounters.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.Add(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public int RemoveAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 RemoveAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAll (match As Predicate(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int RemoveAll(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.RemoveAll : Predicate&lt;'T&gt; -&gt; int" Usage="list.RemoveAll match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="3edb2-849">
            <see cref="T:System.Predicate`1" /> 委托，用于定义要移除的元素应满足的条件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-849">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the elements to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-850">移除与指定的谓词所定义的条件相匹配的所有元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-850">Removes all the elements that match the conditions defined by the specified predicate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-851">从 <see cref="T:System.Collections.Generic.List`1" /> 中移除的元素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-851">The number of elements removed from the <see cref="T:System.Collections.Generic.List`1" /> .</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-852"><xref:System.Predicate%601>是返回的方法的委托`true`如果该对象传递给委托中定义的条件匹配。</span><span class="sxs-lookup"><span data-stu-id="3edb2-852">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="3edb2-853">当前元素<xref:System.Collections.Generic.List%601>逐个传递给<xref:System.Predicate%601>委托和与条件匹配的元素将从<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-853">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and the elements that match the conditions are removed from the <xref:System.Collections.Generic.List%601>.</span></span>  
  
 <span data-ttu-id="3edb2-854">此方法执行线性搜索;因此，此方法为 O (*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-854">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-855">下面的示例演示<xref:System.Collections.Generic.List%601.RemoveAll%2A>方法和其他几种方法使用<xref:System.Predicate%601>泛型委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-855">The following example demonstrates the <xref:System.Collections.Generic.List%601.RemoveAll%2A> method and several other methods that use the <xref:System.Predicate%601> generic delegate.</span></span>  
  
 <span data-ttu-id="3edb2-856">一个<xref:System.Collections.Generic.List%601>的字符串创建，包含 8 个恐龙名称，其中 （位于位置 1 和 5） 两个以"saurus"结尾。</span><span class="sxs-lookup"><span data-stu-id="3edb2-856">A <xref:System.Collections.Generic.List%601> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</span></span> <span data-ttu-id="3edb2-857">该示例还定义一个名为搜索谓词的方法`EndsWithSaurus`、，它接受字符串参数和返回一个布尔值，该值指示是否以"saurus"结尾的输入的字符串。</span><span class="sxs-lookup"><span data-stu-id="3edb2-857">The example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</span></span>  
  
 <span data-ttu-id="3edb2-858"><xref:System.Collections.Generic.List%601.Find%2A>， <xref:System.Collections.Generic.List%601.FindLast%2A>，和<xref:System.Collections.Generic.List%601.FindAll%2A>方法用于在列表中搜索与搜索谓词方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-858">The <xref:System.Collections.Generic.List%601.Find%2A>, <xref:System.Collections.Generic.List%601.FindLast%2A>, and <xref:System.Collections.Generic.List%601.FindAll%2A> methods are used to search the list with the search predicate method.</span></span>  
  
 <span data-ttu-id="3edb2-859"><xref:System.Collections.Generic.List%601.RemoveAll%2A>方法用于删除以"saurus"结尾的所有项。</span><span class="sxs-lookup"><span data-stu-id="3edb2-859">The <xref:System.Collections.Generic.List%601.RemoveAll%2A> method is used to remove all entries ending with "saurus".</span></span> <span data-ttu-id="3edb2-860">它从开始时，将每个元素传递给反过来将遍历列表`EndsWithSaurus`方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-860">It traverses the list from the beginning, passing each element in turn to the `EndsWithSaurus` method.</span></span> <span data-ttu-id="3edb2-861">如果该元素已移除`EndsWithSaurus`方法将返回`true`。</span><span class="sxs-lookup"><span data-stu-id="3edb2-861">The element is removed if the `EndsWithSaurus` method returns `true`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3edb2-862">在 C# 和 Visual Basic 中，它不需要创建`Predicate<string>`委托 (`Predicate(Of String)`在 Visual Basic 中) 显式。</span><span class="sxs-lookup"><span data-stu-id="3edb2-862">In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="3edb2-863">这些语言推断上下文中，从正确的委托，并自动创建。</span><span class="sxs-lookup"><span data-stu-id="3edb2-863">These languages infer the correct delegate from context, and create it automatically.</span></span>  
  
 <span data-ttu-id="3edb2-864">最后，<xref:System.Collections.Generic.List%601.Exists%2A>方法验证是否在列表中没有以"saurus"结尾的字符串。</span><span class="sxs-lookup"><span data-stu-id="3edb2-864">Finally, the <xref:System.Collections.Generic.List%601.Exists%2A> method verifies that there are no strings in the list that end with "saurus".</span></span>  
  
 [!code-cpp[List\`1_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_FindEtAl/cpp/source.cpp#1)]
 [!code-csharp[List\`1_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_FindEtAl/cs/source.cs#1)]
 [!code-vb[List\`1_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_FindEtAl/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3edb2-865">
            <paramref name="match" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-865">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})" />
        <altmember cref="T:System.Predicate`1" />
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="list.RemoveAt index" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)</InterfaceMember>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3edb2-866">要移除的元素的从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-866">The zero-based index of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-867">移除 <see cref="T:System.Collections.Generic.List`1" /> 的指定索引处的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-867">Removes the element at the specified index of the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-868">当您调用<xref:System.Collections.Generic.List%601.RemoveAt%2A>要删除某个项，请在列表中的其余项目会重新编号来替换已删除的项。</span><span class="sxs-lookup"><span data-stu-id="3edb2-868">When you call <xref:System.Collections.Generic.List%601.RemoveAt%2A> to remove an item, the remaining items in the list are renumbered to replace the removed item.</span></span> <span data-ttu-id="3edb2-869">例如，如果删除索引 3 处的项时，索引 4 处的项移动到 3 个位置。</span><span class="sxs-lookup"><span data-stu-id="3edb2-869">For example, if you remove the item at index 3, the item at index 4 is moved to the 3 position.</span></span> <span data-ttu-id="3edb2-870">此外，在列表中的项目数 (由表示<xref:System.Collections.Generic.List%601.Count%2A>属性) 缩小了 1。</span><span class="sxs-lookup"><span data-stu-id="3edb2-870">In addition, the number of items in the list (as represented by the <xref:System.Collections.Generic.List%601.Count%2A> property) is reduced by 1.</span></span>  
  
 <span data-ttu-id="3edb2-871">此方法为 O (*n*) 操作，其中*n*是 (<xref:System.Collections.Generic.List%601.Count%2A> - `index`)。</span><span class="sxs-lookup"><span data-stu-id="3edb2-871">This method is an O(*n*) operation, where *n* is (<xref:System.Collections.Generic.List%601.Count%2A> - `index`).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-872">下面的示例演示如何添加、 删除和插入中的简单业务对象<xref:System.Collections.Generic.List%601>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-872">The following example demonstrates how to add, remove, and insert a simple business object in a <xref:System.Collections.Generic.List%601>.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/vb/module1.vb#1)]  
 [!code-fsharp[System.Collections.Generic.List.AddRemoveInsert#1](~/samples/snippets/fsharp/VS_Snippets_CLR_System/system.collections.generic.list.addremoveinsert/fs/addremoveinsert.fs#1)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3edb2-873">
            <paramref name="index" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-873">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="3edb2-874">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-874">-or-</span>
          </span>
          <span data-ttu-id="3edb2-875">
            <paramref name="index" /> 等于或大于 <see cref="P:System.Collections.Generic.List`1.Count" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-875">
              <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.Generic.List`1.Count" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.Add(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public void RemoveRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveRange (index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveRange(int index, int count);" />
      <MemberSignature Language="F#" Value="member this.RemoveRange : int * int -&gt; unit" Usage="list.RemoveRange (index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3edb2-876">要移除的元素范围的从零开始的起始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-876">The zero-based starting index of the range of elements to remove.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3edb2-877">要移除的元素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-877">The number of elements to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-878">从 <see cref="T:System.Collections.Generic.List`1" /> 中移除一定范围的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-878">Removes a range of elements from the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-879">删除项和遵循它们中的所有元素<xref:System.Collections.Generic.List%601>降低了索引都`count`。</span><span class="sxs-lookup"><span data-stu-id="3edb2-879">The items are removed and all the elements following them in the <xref:System.Collections.Generic.List%601> have their indexes reduced by `count`.</span></span>  
  
 <span data-ttu-id="3edb2-880">此方法为 O (*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-880">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-881">下面的示例演示<xref:System.Collections.Generic.List%601.RemoveRange%2A>方法和各种其他方法的<xref:System.Collections.Generic.List%601>对范围进行操作的类。</span><span class="sxs-lookup"><span data-stu-id="3edb2-881">The following example demonstrates the <xref:System.Collections.Generic.List%601.RemoveRange%2A> method and various other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges.</span></span> <span data-ttu-id="3edb2-882">创建和修改，列表之后<xref:System.Collections.Generic.List%601.RemoveRange%2A>方法用于删除两个元素从列表中，索引位置 2 开始。</span><span class="sxs-lookup"><span data-stu-id="3edb2-882">After the list has been created and modified, the <xref:System.Collections.Generic.List%601.RemoveRange%2A> method is used to remove two elements from the list, beginning at index location 2.</span></span>  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3edb2-883">
            <paramref name="index" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-883">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="3edb2-884">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-884">-or-</span>
          </span>
          <span data-ttu-id="3edb2-885">
            <paramref name="count" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-885">
              <paramref name="count" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3edb2-886">
            <paramref name="index" /> 和 <paramref name="count" /> 不表示 <see cref="T:System.Collections.Generic.List`1" /> 中元素的有效范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-886">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)" />
        <altmember cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
        <altmember cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Reverse">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3edb2-887">将 <see cref="T:System.Collections.Generic.List`1" /> 或它的一部分中元素的顺序反转。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-887">Reverses the order of the elements in the <see cref="T:System.Collections.Generic.List`1" /> or a portion of it.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public void Reverse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reverse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Reverse" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reverse ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reverse();" />
      <MemberSignature Language="F#" Value="member this.Reverse : unit -&gt; unit" Usage="list.Reverse " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3edb2-888">将整个 <see cref="T:System.Collections.Generic.List`1" /> 中元素的顺序反转。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-888">Reverses the order of the elements in the entire <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-889">此方法使用<xref:System.Array.Reverse%2A?displayProperty=nameWithType>若要反转的元素的顺序。</span><span class="sxs-lookup"><span data-stu-id="3edb2-889">This method uses <xref:System.Array.Reverse%2A?displayProperty=nameWithType> to reverse the order of the elements.</span></span>  
  
 <span data-ttu-id="3edb2-890">此方法为 O (*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-890">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-891">下面的示例演示的两个重载<xref:System.Collections.Generic.List%601.Reverse%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-891">The following example demonstrates both overloads of the <xref:System.Collections.Generic.List%601.Reverse%2A> method.</span></span> <span data-ttu-id="3edb2-892">此示例将创建<xref:System.Collections.Generic.List%601>的字符串，并添加六个字符串。</span><span class="sxs-lookup"><span data-stu-id="3edb2-892">The example creates a <xref:System.Collections.Generic.List%601> of strings and adds six strings.</span></span> <span data-ttu-id="3edb2-893"><xref:System.Collections.Generic.List%601.Reverse>方法重载用于反向列表中，然后<xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29>方法重载用于反向列表中，从元素 1 开始，其中包含四个元素的中间。</span><span class="sxs-lookup"><span data-stu-id="3edb2-893">The <xref:System.Collections.Generic.List%601.Reverse> method overload is used to reverse the list, and then the <xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29> method overload is used to reverse the middle of the list, beginning with element 1 and encompassing four elements.</span></span>  
  
 [!code-cpp[List\`1_Reverse#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Reverse/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Reverse#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Reverse/cs/source.cs#1)]
 [!code-vb[List\`1_Reverse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Reverse/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reverse">
      <MemberSignature Language="C#" Value="public void Reverse (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reverse(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reverse (index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reverse(int index, int count);" />
      <MemberSignature Language="F#" Value="member this.Reverse : int * int -&gt; unit" Usage="list.Reverse (index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3edb2-894">要反转的范围的从零开始的起始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-894">The zero-based starting index of the range to reverse.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3edb2-895">要反转的范围内的元素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-895">The number of elements in the range to reverse.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-896">将指定范围中元素的顺序反转。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-896">Reverses the order of the elements in the specified range.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-897">此方法使用<xref:System.Array.Reverse%2A?displayProperty=nameWithType>若要反转的元素的顺序。</span><span class="sxs-lookup"><span data-stu-id="3edb2-897">This method uses <xref:System.Array.Reverse%2A?displayProperty=nameWithType> to reverse the order of the elements.</span></span>  
  
 <span data-ttu-id="3edb2-898">此方法为 O (*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-898">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-899">下面的示例演示的两个重载<xref:System.Collections.Generic.List%601.Reverse%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-899">The following example demonstrates both overloads of the <xref:System.Collections.Generic.List%601.Reverse%2A> method.</span></span> <span data-ttu-id="3edb2-900">此示例将创建<xref:System.Collections.Generic.List%601>的字符串，并添加六个字符串。</span><span class="sxs-lookup"><span data-stu-id="3edb2-900">The example creates a <xref:System.Collections.Generic.List%601> of strings and adds six strings.</span></span> <span data-ttu-id="3edb2-901"><xref:System.Collections.Generic.List%601.Reverse>方法重载用于反向列表中，然后<xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29>方法重载用于反向列表中，从元素 1 开始，其中包含四个元素的中间。</span><span class="sxs-lookup"><span data-stu-id="3edb2-901">The <xref:System.Collections.Generic.List%601.Reverse> method overload is used to reverse the list, and then the <xref:System.Collections.Generic.List%601.Reverse%28System.Int32%2CSystem.Int32%29> method overload is used to reverse the middle of the list, beginning with element 1 and encompassing four elements.</span></span>  
  
 [!code-cpp[List\`1_Reverse#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Reverse/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Reverse#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Reverse/cs/source.cs#1)]
 [!code-vb[List\`1_Reverse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Reverse/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3edb2-902">
            <paramref name="index" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-902">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="3edb2-903">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-903">-or-</span>
          </span>
          <span data-ttu-id="3edb2-904">
            <paramref name="count" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-904">
              <paramref name="count" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3edb2-905">
            <paramref name="index" /> 和 <paramref name="count" /> 不表示 <see cref="T:System.Collections.Generic.List`1" /> 中元素的有效范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-905">
              <paramref name="index" /> and <paramref name="count" /> do not denote a valid range of elements in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Sort">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="3edb2-906">对 <see cref="T:System.Collections.Generic.List`1" /> 或它的一部分中的元素进行排序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-906">Sorts the elements in the <see cref="T:System.Collections.Generic.List`1" /> or a portion of it.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="overloaded-method-syntax"></a><span data-ttu-id="3edb2-907">重载的方法语法</span><span class="sxs-lookup"><span data-stu-id="3edb2-907">Overloaded method syntax</span></span>  
 <span data-ttu-id="3edb2-908"><xref:System.Collections.Generic.List%601.Sort%2A>方法让你可以在列表中，对象类型的默认比较器排序，或指定客户排序方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-908">The  <xref:System.Collections.Generic.List%601.Sort%2A> methods enable you to sort with the default comparer for the object type in the list, or specify a customer sort method.</span></span>  
  
 <span data-ttu-id="3edb2-909">[列表\<T >。Sort （)](xref:System.Collections.Generic.List`1.Sort*)排序的元素中使用的对象类型的默认比较器对整个列表保存在列表中。</span><span class="sxs-lookup"><span data-stu-id="3edb2-909">[List\<T>.Sort()](xref:System.Collections.Generic.List`1.Sort*) Sorts the elements in the entire list using the default comparer of the object type held in the list.</span></span>  
  
 <span data-ttu-id="3edb2-910">[列表\<T >。排序 M (比较\<T > 比较)](xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29)使用指定的比较器在整个列表中的元素进行排序。</span><span class="sxs-lookup"><span data-stu-id="3edb2-910">[List\<T>.Sort M(Comparison\<T> comparison)](xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29) Sorts the elements in the entire list using the specified comparer.</span></span>  
  
 <span data-ttu-id="3edb2-911">[列表\<T >。排序 (IComparer\<T > 比较器)](xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29)中使用指定的整个列表的元素进行排序<xref:System.Comparison%601?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-911">[List\<T>.Sort(IComparer\<T> comparer)](xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29) Sorts the elements in the entire list using the specified <xref:System.Comparison%601?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="3edb2-912">[列表\<T >。排序 (Int32 索引，Int32 计数 IComparer\<T > 比较器)](xref:System.Collections.Generic.List%601.Sort%28System.Int32,System.Int32,System.Collections.Generic.IComparer%7B%600%7D%29)使用指定的比较器的列表中的元素范围中的元素进行排序。</span><span class="sxs-lookup"><span data-stu-id="3edb2-912">[List\<T>.Sort(Int32 index, Int32 count, IComparer\<T> comparer)](xref:System.Collections.Generic.List%601.Sort%28System.Int32,System.Int32,System.Collections.Generic.IComparer%7B%600%7D%29) Sorts the elements in a range of elements in list using the specified comparer.</span></span>  
  
## <a name="parameters"></a><span data-ttu-id="3edb2-913">参数</span><span class="sxs-lookup"><span data-stu-id="3edb2-913">Parameters</span></span>  
  
|<span data-ttu-id="3edb2-914">参数</span><span class="sxs-lookup"><span data-stu-id="3edb2-914">Parameter</span></span>|<span data-ttu-id="3edb2-915">类型</span><span class="sxs-lookup"><span data-stu-id="3edb2-915">Type</span></span>|<span data-ttu-id="3edb2-916">描述</span><span class="sxs-lookup"><span data-stu-id="3edb2-916">Description</span></span>|  
|---------------|----------|-----------------|  
|`comparison`|<xref:System.Comparison%601>|<span data-ttu-id="3edb2-917">要比较元素时使用的委托方法</span><span class="sxs-lookup"><span data-stu-id="3edb2-917">The delegate method to use when comparing elements</span></span>|  
|<span data-ttu-id="3edb2-918">比较器</span><span class="sxs-lookup"><span data-stu-id="3edb2-918">comparer</span></span>|<xref:System.Collections.Generic.IComparer%601>|<span data-ttu-id="3edb2-919"><xref:System.Collections.Generic.IComparer%601>实现来比较元素时使用或 null，表示使用默认比较器<xref:System.Collections.Generic.Comparer%601.Default>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-919">The <xref:System.Collections.Generic.IComparer%601> implementation to use when comparing elements, or null to use the default comparer <xref:System.Collections.Generic.Comparer%601.Default>.</span></span>|  
|`index`|<xref:System.Int32>|<span data-ttu-id="3edb2-920">要排序范围的从零开始的起始索引。</span><span class="sxs-lookup"><span data-stu-id="3edb2-920">The zero-based starting index of the range to sort.</span></span>|  
|`count`|<xref:System.Int32>|<span data-ttu-id="3edb2-921">要排序的范围的长度。</span><span class="sxs-lookup"><span data-stu-id="3edb2-921">The length of the range to sort.</span></span>|  
  
## <a name="exceptions"></a><span data-ttu-id="3edb2-922">异常</span><span class="sxs-lookup"><span data-stu-id="3edb2-922">Exceptions</span></span>  
  
|<span data-ttu-id="3edb2-923">例外</span><span class="sxs-lookup"><span data-stu-id="3edb2-923">Exception</span></span>|<span data-ttu-id="3edb2-924">条件</span><span class="sxs-lookup"><span data-stu-id="3edb2-924">Condition</span></span>|  
|---------------|---------------|  
|<xref:System.InvalidOperationException>|<span data-ttu-id="3edb2-925">`comparer` 未指定或`null`，和默认比较器<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>找不到实现<xref:System.IComparable%601?displayProperty=nameWithType>泛型接口或<xref:System.IComparable?displayProperty=nameWithType>接口的类型 t。</span><span class="sxs-lookup"><span data-stu-id="3edb2-925">`comparer` is not specified or `null`, and the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> cannot find implementation of the <xref:System.IComparable%601?displayProperty=nameWithType> generic interface or the <xref:System.IComparable?displayProperty=nameWithType> interface for type T.</span></span>|  
|<xref:System.ArgumentNullException>|<span data-ttu-id="3edb2-926">`comparison` 为 `null`。</span><span class="sxs-lookup"><span data-stu-id="3edb2-926">`comparison` is `null`.</span></span>|  
|<xref:System.ArgumentException>|<span data-ttu-id="3edb2-927">实现`comparison`或`comparer`导致排序时出错。</span><span class="sxs-lookup"><span data-stu-id="3edb2-927">The implementation of `comparison` or `comparer` caused an error during the sort.</span></span> <span data-ttu-id="3edb2-928">例如，将某个项与其自身比较时，`comparison` 可能不返回 0。</span><span class="sxs-lookup"><span data-stu-id="3edb2-928">For example, `comparison` might not return 0 when comparing an item with itself.</span></span><br /><br /> <span data-ttu-id="3edb2-929">或</span><span class="sxs-lookup"><span data-stu-id="3edb2-929">-or-</span></span><br /><br /> <span data-ttu-id="3edb2-930">`index` 和 `count` 未在 <xref:System.Collections.Generic.List%601> 中指定有效范围。</span><span class="sxs-lookup"><span data-stu-id="3edb2-930">`index` and `count` do not specify a valid range in the <xref:System.Collections.Generic.List%601>.</span></span>|  
|<xref:System.ArgumentOutOfRangeException>|<span data-ttu-id="3edb2-931">`index` 小于 0 或`count`小于 0。</span><span class="sxs-lookup"><span data-stu-id="3edb2-931">`index` is less than 0 or `count` is less than 0.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Sort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort();" />
      <MemberSignature Language="F#" Value="member this.Sort : unit -&gt; unit" Usage="list.Sort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3edb2-932">使用默认比较器对整个 <see cref="T:System.Collections.Generic.List`1" /> 中的元素进行排序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-932">Sorts the elements in the entire <see cref="T:System.Collections.Generic.List`1" /> using the default comparer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-933">此方法使用默认比较器<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>类型`T`以确定列表元素的顺序。</span><span class="sxs-lookup"><span data-stu-id="3edb2-933">This method uses the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> for type `T` to determine the order of list elements.</span></span> <span data-ttu-id="3edb2-934"><xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>属性检查是否类型`T`实现<xref:System.IComparable%601>泛型接口，并使用该实现，如果可用。</span><span class="sxs-lookup"><span data-stu-id="3edb2-934">The <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> property checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.</span></span>  <span data-ttu-id="3edb2-935">如果不是，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>检查是否类型`T`实现<xref:System.IComparable>接口。</span><span class="sxs-lookup"><span data-stu-id="3edb2-935">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable> interface.</span></span>  <span data-ttu-id="3edb2-936">如果类型`T`不实现任何一个接口，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>引发<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-936">If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="3edb2-937">此方法使用<xref:System.Array.Sort%2A?displayProperty=nameWithType>方法，应用内省排序，如下所示：</span><span class="sxs-lookup"><span data-stu-id="3edb2-937">This method uses the <xref:System.Array.Sort%2A?displayProperty=nameWithType> method, which applies the introspective sort as follows:</span></span>  
  
-   <span data-ttu-id="3edb2-938">如果分区大小少于 16 个元素，它使用插入排序算法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-938">If the partition size is fewer than 16 elements, it uses an insertion sort algorithm.</span></span>  
  
-   <span data-ttu-id="3edb2-939">如果分区数超过两个日志*n*，其中*n*是范围的输入数组，它使用 Heapsort 算法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-939">If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a Heapsort algorithm.</span></span>  
  
-   <span data-ttu-id="3edb2-940">否则，它使用快速排序算法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-940">Otherwise, it uses a Quicksort algorithm.</span></span>  
  
 <span data-ttu-id="3edb2-941">此实现将执行不稳定排序;也就是说，如果两个元素相等，可能不会保留其顺序。</span><span class="sxs-lookup"><span data-stu-id="3edb2-941">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="3edb2-942">与此相反，一个稳定排序保留相等元素的顺序。</span><span class="sxs-lookup"><span data-stu-id="3edb2-942">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="3edb2-943">一般情况下，此方法为 O (*n*日志*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>; 最坏的情况是 O (*n* <sup>2</sup>) 操作。</span><span class="sxs-lookup"><span data-stu-id="3edb2-943">On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-944">以下示例将添加到某些名称`List<String>`对象，显示未排序顺序，列表会调<xref:System.Collections.Generic.List%601.Sort%2A>方法，然后显示已排序的列表。</span><span class="sxs-lookup"><span data-stu-id="3edb2-944">The following example adds some names to a `List<String>` object, displays the list in unsorted order, calls the <xref:System.Collections.Generic.List%601.Sort%2A> method, and then displays the sorted list.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.Sort#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.sort/cs/Sort1.cs#2)]
 [!code-vb[System.Collections.Generic.List.Sort#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.sort/vb/Sort1.vb#2)]  
  
 <span data-ttu-id="3edb2-945">下面的代码演示<xref:System.Collections.Generic.List%601.Sort>和<xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29>简单业务对象上的方法重载。</span><span class="sxs-lookup"><span data-stu-id="3edb2-945">The following code demonstrates the <xref:System.Collections.Generic.List%601.Sort> and <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> method overloads on a simple business object.</span></span> <span data-ttu-id="3edb2-946">调用<xref:System.Collections.Generic.List%601.Sort>方法会导致使用默认比较器的部件类型和<xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29>使用匿名方法实现方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-946">Calling the <xref:System.Collections.Generic.List%601.Sort> method results in the use of the default comparer for the Part type, and the <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> method is implemented by using an anonymous method.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.Sort#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.sort/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.Sort#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.sort/vb/module1.vb#1)]  
  
 <span data-ttu-id="3edb2-947">下面的示例演示<xref:System.Collections.Generic.List%601.Sort>方法重载和<xref:System.Collections.Generic.List%601.BinarySearch%28%600%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="3edb2-947">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method overload.</span></span> <span data-ttu-id="3edb2-948">一个<xref:System.Collections.Generic.List%601>的字符串创建并填充了四个字符串，顺序不分先后。</span><span class="sxs-lookup"><span data-stu-id="3edb2-948">A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order.</span></span> <span data-ttu-id="3edb2-949">显示、 排序，列表，并再次显示。</span><span class="sxs-lookup"><span data-stu-id="3edb2-949">The list is displayed, sorted, and displayed again.</span></span>  
  
 <span data-ttu-id="3edb2-950"><xref:System.Collections.Generic.List%601.BinarySearch%28%600%29>然后使用方法重载的两个字符串的不是在列表中，搜索和<xref:System.Collections.Generic.List%601.Insert%2A>方法用于将它们插入。</span><span class="sxs-lookup"><span data-stu-id="3edb2-950">The <xref:System.Collections.Generic.List%601.BinarySearch%28%600%29> method overload is then used to search for two strings that are not in the list, and the <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert them.</span></span> <span data-ttu-id="3edb2-951">返回值<xref:System.Collections.Generic.List%601.BinarySearch%2A>方法为负每种情况下，因为字符串不是在列表中。</span><span class="sxs-lookup"><span data-stu-id="3edb2-951">The return value of the <xref:System.Collections.Generic.List%601.BinarySearch%2A> method is negative in each case, because the strings are not in the list.</span></span> <span data-ttu-id="3edb2-952">执行按位求补 (~ 运算符在 C# 和 Visual c + +，`Xor`在 Visual Basic 中的为-1) 的此负号生成大于搜索字符串，并将在此位置中的列表中的第一个元素的索引保留排序顺序。</span><span class="sxs-lookup"><span data-stu-id="3edb2-952">Taking the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of this negative number produces the index of the first element in the list that is larger than the search string, and inserting at this location preserves the sort order.</span></span> <span data-ttu-id="3edb2-953">第二个搜索字符串是大于在列表中，任何元素，因此在列表的末尾处的插入位置。</span><span class="sxs-lookup"><span data-stu-id="3edb2-953">The second search string is larger than any element in the list, so the insertion position is at the end of the list.</span></span>  
  
 [!code-cpp[List\`1_SortSearch#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearch/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearch#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearch/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearch/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3edb2-954">此默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 无法找到 <see cref="T:System.IComparable`1" /> 泛型接口或类型为 <paramref name="T" /> 的 <see cref="T:System.IComparable" /> 接口的实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-954">The default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find an implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (comparer As IComparer(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.Sort : System.Collections.Generic.IComparer&lt;'T&gt; -&gt; unit" Usage="list.Sort comparer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer">
          <span data-ttu-id="3edb2-955">比较元素时要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现，若要使用默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" />，则为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-955">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements, or <see langword="null" /> to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-956">使用指定的比较器对整个 <see cref="T:System.Collections.Generic.List`1" /> 中的元素进行排序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-956">Sorts the elements in the entire <see cref="T:System.Collections.Generic.List`1" /> using the specified comparer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-957">如果`comparer`提供的元素<xref:System.Collections.Generic.List%601>使用指定排序<xref:System.Collections.Generic.IComparer%601>实现。</span><span class="sxs-lookup"><span data-stu-id="3edb2-957">If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are sorted using the specified <xref:System.Collections.Generic.IComparer%601> implementation.</span></span>  
  
 <span data-ttu-id="3edb2-958">如果`comparer`是`null`，默认比较器<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>检查是否类型`T`实现<xref:System.IComparable%601>泛型接口，并使用该实现，如果可用。</span><span class="sxs-lookup"><span data-stu-id="3edb2-958">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.</span></span>  <span data-ttu-id="3edb2-959">如果不是，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>检查是否类型`T`实现<xref:System.IComparable>接口。</span><span class="sxs-lookup"><span data-stu-id="3edb2-959">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable> interface.</span></span>  <span data-ttu-id="3edb2-960">如果类型`T`不实现任何一个接口，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>引发<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-960">If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="3edb2-961">此方法使用<xref:System.Array.Sort%2A?displayProperty=nameWithType>方法，应用内省排序，如下所示：</span><span class="sxs-lookup"><span data-stu-id="3edb2-961">This method uses the <xref:System.Array.Sort%2A?displayProperty=nameWithType> method, which applies the introspective sort as follows:</span></span>  
  
-   <span data-ttu-id="3edb2-962">如果分区大小少于 16 个元素，它使用插入排序算法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-962">If the partition size is fewer than 16 elements, it uses an insertion sort algorithm.</span></span>  
  
-   <span data-ttu-id="3edb2-963">如果分区数超过两个日志*n*，其中*n*是范围的输入数组，它使用 Heapsort 算法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-963">If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a Heapsort algorithm.</span></span>  
  
-   <span data-ttu-id="3edb2-964">否则，它使用快速排序算法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-964">Otherwise, it uses a Quicksort algorithm.</span></span>  
  
 <span data-ttu-id="3edb2-965">此实现将执行不稳定排序;也就是说，如果两个元素相等，可能不会保留其顺序。</span><span class="sxs-lookup"><span data-stu-id="3edb2-965">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="3edb2-966">与此相反，一个稳定排序保留相等元素的顺序。</span><span class="sxs-lookup"><span data-stu-id="3edb2-966">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="3edb2-967">一般情况下，此方法为 O (*n*日志*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>; 最坏的情况是 O (*n* <sup>2</sup>) 操作。</span><span class="sxs-lookup"><span data-stu-id="3edb2-967">On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-968">下面的示例演示<xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29>方法重载和<xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="3edb2-968">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload.</span></span>  
  
 <span data-ttu-id="3edb2-969">该示例定义名为 DinoCompare，实现的字符串将替代比较器`IComparer<string>`(`IComparer(Of String)`在 Visual Basic 中`IComparer<String^>`Visual c + +) 泛型接口。</span><span class="sxs-lookup"><span data-stu-id="3edb2-969">The example defines an alternative comparer for strings named DinoCompare, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="3edb2-970">比较器的工作方式如下： 首先，测试比较数是否为`null`，并为 null 引用被视为小于非空。</span><span class="sxs-lookup"><span data-stu-id="3edb2-970">The comparer works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null.</span></span> <span data-ttu-id="3edb2-971">其次，比较字符串长度，并更长的字符串被认为更高版本。</span><span class="sxs-lookup"><span data-stu-id="3edb2-971">Second, the string lengths are compared, and the longer string is deemed to be greater.</span></span> <span data-ttu-id="3edb2-972">第三，如果长度相等，则使用常规字符串比较。</span><span class="sxs-lookup"><span data-stu-id="3edb2-972">Third, if the lengths are equal, ordinary string comparison is used.</span></span>  
  
 <span data-ttu-id="3edb2-973">一个<xref:System.Collections.Generic.List%601>的字符串创建并填充了四个字符串，顺序不分先后。</span><span class="sxs-lookup"><span data-stu-id="3edb2-973">A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order.</span></span> <span data-ttu-id="3edb2-974">列表、 排序使用备用的比较器，并显示再次显示。</span><span class="sxs-lookup"><span data-stu-id="3edb2-974">The list is displayed, sorted using the alternate comparer, and displayed again.</span></span>  
  
 <span data-ttu-id="3edb2-975"><xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>方法重载然后用于搜索将不在列表中，该示例使用的多个字符串。</span><span class="sxs-lookup"><span data-stu-id="3edb2-975">The <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload is then used to search for several strings that are not in the list, employing the alternate comparer.</span></span> <span data-ttu-id="3edb2-976"><xref:System.Collections.Generic.List%601.Insert%2A>方法用来插入字符串。</span><span class="sxs-lookup"><span data-stu-id="3edb2-976">The <xref:System.Collections.Generic.List%601.Insert%2A> method is used to insert the strings.</span></span> <span data-ttu-id="3edb2-977">这两种方法都位于名为的函数`SearchAndInsert`，以及代码执行按位求补 (~ 在 C# 和 Visual c + + 运算符`Xor`在 Visual Basic 中的为-1) 返回负号<xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>并将其用作的索引插入的新字符串。</span><span class="sxs-lookup"><span data-stu-id="3edb2-977">These two methods are located in the function named `SearchAndInsert`, along with code to take the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of the negative number returned by <xref:System.Collections.Generic.List%601.BinarySearch%28%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> and use it as an index for inserting the new string.</span></span>  
  
 [!code-cpp[List\`1_SortSearchComparer#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparer/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearchComparer#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparer/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearchComparer#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparer/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3edb2-978">
            <paramref name="comparer" /> 为 <see langword="null" />，且默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型接口或类型为 <paramref name="T" /> 的 <see cref="T:System.IComparable" /> 接口的实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-978">
              <paramref name="comparer" /> is <see langword="null" />, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3edb2-979">
            <paramref name="comparer" /> 的实现导致排序时出现错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-979">The implementation of <paramref name="comparer" /> caused an error during the sort.</span>
          </span>
          <span data-ttu-id="3edb2-980">例如，将某个项与其自身比较时，<paramref name="comparer" /> 可能不返回 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-980">For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (Comparison&lt;T&gt; comparison);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(class System.Comparison`1&lt;!T&gt; comparison) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (comparison As Comparison(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(Comparison&lt;T&gt; ^ comparison);" />
      <MemberSignature Language="F#" Value="member this.Sort : Comparison&lt;'T&gt; -&gt; unit" Usage="list.Sort comparison" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparison" Type="System.Comparison&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="comparison">
          <span data-ttu-id="3edb2-981">比较元素时要使用的 <see cref="T:System.Comparison`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-981">The <see cref="T:System.Comparison`1" /> to use when comparing elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-982">使用指定的 <see cref="T:System.Comparison`1" />，对整个 <see cref="T:System.Collections.Generic.List`1" /> 中的元素进行排序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-982">Sorts the elements in the entire <see cref="T:System.Collections.Generic.List`1" /> using the specified <see cref="T:System.Comparison`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-983">如果`comparison`提供的元素<xref:System.Collections.Generic.List%601>使用委托所表示的方法进行排序。</span><span class="sxs-lookup"><span data-stu-id="3edb2-983">If `comparison` is provided, the elements of the <xref:System.Collections.Generic.List%601> are sorted using the method represented by the delegate.</span></span>  
  
 <span data-ttu-id="3edb2-984">如果`comparison`是`null`、<xref:System.ArgumentNullException>引发。</span><span class="sxs-lookup"><span data-stu-id="3edb2-984">If `comparison` is `null`, an <xref:System.ArgumentNullException> is thrown.</span></span>  
  
 <span data-ttu-id="3edb2-985">此方法使用<xref:System.Array.Sort%2A?displayProperty=nameWithType>，其应用内省排序，如下所示：</span><span class="sxs-lookup"><span data-stu-id="3edb2-985">This method uses <xref:System.Array.Sort%2A?displayProperty=nameWithType>, which applies the introspective sort as follows:</span></span>  
  
-   <span data-ttu-id="3edb2-986">如果分区大小少于 16 个元素，它使用插入排序算法</span><span class="sxs-lookup"><span data-stu-id="3edb2-986">If the partition size is fewer than 16 elements, it uses an insertion sort algorithm</span></span>  
  
-   <span data-ttu-id="3edb2-987">如果分区数超过两个日志*n*，其中*n*是范围的输入数组，它使用[Heapsort](https://en.wikipedia.org/wiki/Heapsort)算法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-987">If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a [Heapsort](https://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="3edb2-988">否则，它使用快速排序算法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-988">Otherwise, it uses a Quicksort algorithm.</span></span>  
  
 <span data-ttu-id="3edb2-989">此实现将执行不稳定排序;也就是说，如果两个元素相等，可能不会保留其顺序。</span><span class="sxs-lookup"><span data-stu-id="3edb2-989">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="3edb2-990">与此相反，一个稳定排序保留相等元素的顺序。</span><span class="sxs-lookup"><span data-stu-id="3edb2-990">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="3edb2-991">一般情况下，此方法为 O (*n*日志*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>; 最坏的情况是 O (*n* <sup>2</sup>) 操作。</span><span class="sxs-lookup"><span data-stu-id="3edb2-991">On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-992">下面的代码演示<xref:System.Collections.Generic.List%601.Sort%2A>和<xref:System.Collections.Generic.List%601.Sort%2A>简单业务对象上的方法重载。</span><span class="sxs-lookup"><span data-stu-id="3edb2-992">The following code demonstrates the <xref:System.Collections.Generic.List%601.Sort%2A> and <xref:System.Collections.Generic.List%601.Sort%2A> method overloads on a simple business object.</span></span> <span data-ttu-id="3edb2-993">调用<xref:System.Collections.Generic.List%601.Sort%2A>方法会导致使用默认比较器的部件类型和<xref:System.Collections.Generic.List%601.Sort%2A>方法使用匿名方法实现。</span><span class="sxs-lookup"><span data-stu-id="3edb2-993">Calling the <xref:System.Collections.Generic.List%601.Sort%2A> method results in the use of the default comparer for the Part type, and the <xref:System.Collections.Generic.List%601.Sort%2A> method is implemented using an anonymous method.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.Sort#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.sort/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.Sort#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.sort/vb/module1.vb#1)]  
  
 <span data-ttu-id="3edb2-994">下面的示例演示<xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="3edb2-994">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> method overload.</span></span>  
  
 <span data-ttu-id="3edb2-995">该示例定义名为的字符串替换比较方法`CompareDinosByLength`。</span><span class="sxs-lookup"><span data-stu-id="3edb2-995">The example defines an alternative comparison method for strings, named `CompareDinosByLength`.</span></span> <span data-ttu-id="3edb2-996">此方法的工作方式如下： 首先，测试比较数是否为`null`，并为 null 引用被视为小于非空。</span><span class="sxs-lookup"><span data-stu-id="3edb2-996">This method works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null.</span></span> <span data-ttu-id="3edb2-997">其次，比较字符串长度，并更长的字符串被认为更高版本。</span><span class="sxs-lookup"><span data-stu-id="3edb2-997">Second, the string lengths are compared, and the longer string is deemed to be greater.</span></span> <span data-ttu-id="3edb2-998">第三，如果长度相等，则使用常规字符串比较。</span><span class="sxs-lookup"><span data-stu-id="3edb2-998">Third, if the lengths are equal, ordinary string comparison is used.</span></span>  
  
 <span data-ttu-id="3edb2-999">一个<xref:System.Collections.Generic.List%601>的字符串创建并填充了四个字符串，顺序不分先后。</span><span class="sxs-lookup"><span data-stu-id="3edb2-999">A <xref:System.Collections.Generic.List%601> of strings is created and populated with four strings, in no particular order.</span></span> <span data-ttu-id="3edb2-1000">列表还包括一个空字符串和 null 引用。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1000">The list also includes an empty string and a null reference.</span></span> <span data-ttu-id="3edb2-1001">显示列表，使用排序<xref:System.Comparison%601>泛型委托表示`CompareDinosByLength`方法，并再次显示。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1001">The list is displayed, sorted using a <xref:System.Comparison%601> generic delegate representing the `CompareDinosByLength` method, and displayed again.</span></span>  
  
 [!code-cpp[List\`1_SortComparison#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortComparison/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortComparison#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortComparison/cs/source.cs#1)]
 [!code-vb[List\`1_SortComparison#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortComparison/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3edb2-1002">
            <paramref name="comparison" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1002">
              <paramref name="comparison" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3edb2-1003">
            <paramref name="comparison" /> 的实现导致排序时出现错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1003">The implementation of <paramref name="comparison" /> caused an error during the sort.</span>
          </span>
          <span data-ttu-id="3edb2-1004">例如，将某个项与其自身比较时，<paramref name="comparison" /> 可能不返回 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1004">For example, <paramref name="comparison" /> might not return 0 when comparing an item with itself.</span>
          </span>
        </exception>
        <altmember cref="T:System.Comparison`1" />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort (int index, int count, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort(int32 index, int32 count, class System.Collections.Generic.IComparer`1&lt;!T&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort (index As Integer, count As Integer, comparer As IComparer(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort(int index, int count, System::Collections::Generic::IComparer&lt;T&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="member this.Sort : int * int * System.Collections.Generic.IComparer&lt;'T&gt; -&gt; unit" Usage="list.Sort (index, count, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3edb2-1005">要排序范围的从零开始的起始索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1005">The zero-based starting index of the range to sort.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="3edb2-1006">要排序的范围的长度。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1006">The length of the range to sort.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="3edb2-1007">比较元素时要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现，若要使用默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" />，则为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1007">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing elements, or <see langword="null" /> to use the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-1008">使用指定的比较器对 <see cref="T:System.Collections.Generic.List`1" /> 中某个范围内的元素进行排序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1008">Sorts the elements in a range of elements in <see cref="T:System.Collections.Generic.List`1" /> using the specified comparer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-1009">如果`comparer`提供的元素<xref:System.Collections.Generic.List%601>使用指定排序<xref:System.Collections.Generic.IComparer%601>实现。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1009">If `comparer` is provided, the elements of the <xref:System.Collections.Generic.List%601> are sorted using the specified <xref:System.Collections.Generic.IComparer%601> implementation.</span></span>  
  
 <span data-ttu-id="3edb2-1010">如果`comparer`是`null`，默认比较器<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>检查是否类型`T`实现<xref:System.IComparable%601>泛型接口，并使用该实现，如果可用。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1010">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable%601> generic interface and uses that implementation, if available.</span></span>  <span data-ttu-id="3edb2-1011">如果不是，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>检查是否类型`T`实现<xref:System.IComparable>接口。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1011">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether type `T` implements the <xref:System.IComparable> interface.</span></span>  <span data-ttu-id="3edb2-1012">如果类型`T`不实现任何一个接口，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>引发<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1012">If type `T` does not implement either interface, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="3edb2-1013">此方法使用<xref:System.Array.Sort%2A?displayProperty=nameWithType>，其应用内省排序，如下所示：</span><span class="sxs-lookup"><span data-stu-id="3edb2-1013">This method uses <xref:System.Array.Sort%2A?displayProperty=nameWithType>, which applies the introspective sort as follows:</span></span>  
  
-   <span data-ttu-id="3edb2-1014">如果分区大小少于 16 个元素，它使用插入排序算法</span><span class="sxs-lookup"><span data-stu-id="3edb2-1014">If the partition size is fewer than 16 elements, it uses an insertion sort algorithm</span></span>  
  
-   <span data-ttu-id="3edb2-1015">如果分区数超过两个日志*n*，其中*n*是范围的输入数组，它使用[Heapsort](https://en.wikipedia.org/wiki/Heapsort)算法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1015">If the number of partitions exceeds 2 log *n*, where *n* is the range of the input array, it uses a [Heapsort](https://en.wikipedia.org/wiki/Heapsort) algorithm.</span></span>  
  
-   <span data-ttu-id="3edb2-1016">否则，它使用快速排序算法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1016">Otherwise, it uses a Quicksort algorithm.</span></span>  
  
 <span data-ttu-id="3edb2-1017">此实现将执行不稳定排序;也就是说，如果两个元素相等，可能不会保留其顺序。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1017">This implementation performs an unstable sort; that is, if two elements are equal, their order might not be preserved.</span></span> <span data-ttu-id="3edb2-1018">与此相反，一个稳定排序保留相等元素的顺序。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1018">In contrast, a stable sort preserves the order of elements that are equal.</span></span>  
  
 <span data-ttu-id="3edb2-1019">一般情况下，此方法为 O (*n*日志*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>; 最坏的情况是 O (*n* <sup>2</sup>) 操作。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1019">On average, this method is an O(*n* log *n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>; in the worst case it is an O(*n*<sup>2</sup>) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-1020">下面的示例演示<xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>方法重载和<xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>方法重载。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1020">The following example demonstrates the <xref:System.Collections.Generic.List%601.Sort%28System.Int32%2CSystem.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload and the <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload.</span></span>  
  
 <span data-ttu-id="3edb2-1021">该示例定义名为 DinoCompare，实现的字符串将替代比较器`IComparer<string>`(`IComparer(Of String)`在 Visual Basic 中`IComparer<String^>`Visual c + +) 泛型接口。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1021">The example defines an alternative comparer for strings named DinoCompare, which implements the `IComparer<string>` (`IComparer(Of String)` in Visual Basic, `IComparer<String^>` in Visual C++) generic interface.</span></span> <span data-ttu-id="3edb2-1022">比较器的工作方式如下： 首先，测试比较数是否为`null`，并为 null 引用被视为小于非空。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1022">The comparer works as follows: First, the comparands are tested for `null`, and a null reference is treated as less than a non-null.</span></span> <span data-ttu-id="3edb2-1023">其次，比较字符串长度，并更长的字符串被认为更高版本。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1023">Second, the string lengths are compared, and the longer string is deemed to be greater.</span></span> <span data-ttu-id="3edb2-1024">第三，如果长度相等，则使用常规字符串比较。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1024">Third, if the lengths are equal, ordinary string comparison is used.</span></span>  
  
 <span data-ttu-id="3edb2-1025">一个<xref:System.Collections.Generic.List%601>的字符串创建并填充一个和示例的名称。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1025">A <xref:System.Collections.Generic.List%601> of strings is created and populated with the names of five herbivorous dinosaurs and three carnivorous dinosaurs.</span></span> <span data-ttu-id="3edb2-1026">在两个组中，名称不按任何特定的排序顺序。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1026">Within each of the two groups, the names are not in any particular sort order.</span></span> <span data-ttu-id="3edb2-1027">显示的列表，使用备用的比较器排序该，并再次显示列表。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1027">The list is displayed, the range of herbivores is sorted using the alternate comparer, and the list is displayed again.</span></span>  
  
 <span data-ttu-id="3edb2-1028"><xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>方法重载然后用于搜索"Brachiosaurus"仅草食范围。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1028">The <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method overload is then used to search only the range of herbivores for "Brachiosaurus".</span></span> <span data-ttu-id="3edb2-1029">找不到字符串，并按位求补 (~ 在 C# 和 Visual c + + 运算符`Xor`在 Visual Basic 中的为-1) 返回负号<xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>方法用于插入新的字符串用作索引。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1029">The string is not found, and the bitwise complement (the ~ operator in C# and Visual C++, `Xor` -1 in Visual Basic) of the negative number returned by the <xref:System.Collections.Generic.List%601.BinarySearch%28System.Int32%2CSystem.Int32%2C%600%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> method is used as an index for inserting the new string.</span></span>  
  
 [!code-cpp[List\`1_SortSearchComparerRange#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortSearchComparerRange#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortSearchComparerRange/cs/source.cs#1)]
 [!code-vb[List\`1_SortSearchComparerRange#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortSearchComparerRange/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3edb2-1030">
            <paramref name="index" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1030">
              <paramref name="index" /> is less than 0.</span>
          </span>
          <span data-ttu-id="3edb2-1031">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1031">-or-</span>
          </span>
          <span data-ttu-id="3edb2-1032">
            <paramref name="count" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1032">
              <paramref name="count" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3edb2-1033">
            <paramref name="index" /> 和 <paramref name="count" /> 未在 <see cref="T:System.Collections.Generic.List`1" /> 中指定有效范围。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1033">
              <paramref name="index" /> and <paramref name="count" /> do not specify a valid range in the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
          <span data-ttu-id="3edb2-1034">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1034">-or-</span>
          </span>
          <span data-ttu-id="3edb2-1035">
            <paramref name="comparer" /> 的实现导致排序时出现错误。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1035">The implementation of <paramref name="comparer" /> caused an error during the sort.</span>
          </span>
          <span data-ttu-id="3edb2-1036">例如，将某个项与其自身比较时，<paramref name="comparer" /> 可能不返回 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1036">For example, <paramref name="comparer" /> might not return 0 when comparing an item with itself.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="3edb2-1037">
            <paramref name="comparer" /> 为 <see langword="null" />，且默认比较器 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> 找不到 <see cref="T:System.IComparable`1" /> 泛型接口或类型为 <paramref name="T" /> 的 <see cref="T:System.IComparable" /> 接口的实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1037">
              <paramref name="comparer" /> is <see langword="null" />, and the default comparer <see cref="P:System.Collections.Generic.Comparer`1.Default" /> cannot find implementation of the <see cref="T:System.IComparable`1" /> generic interface or the <see cref="T:System.IComparable" /> interface for type <paramref name="T" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection&lt;T&gt;#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::Generic::ICollection&lt;T&gt;::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3edb2-1038">获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1038">Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3edb2-1039">如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1039">
              <see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="3edb2-1040">在 <see cref="T:System.Collections.Generic.List`1" /> 的默认实现中，此属性始终返回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1040">In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-1041">在创建只读集合后，该集合不允许添加、移除或修改元素。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1041">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="3edb2-1042">集合是只读的只是一个集合与可防止修改集合; 的包装器因此，如果对基础集合进行更改，只读集合反映了这些更改。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1042">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="3edb2-1043">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1043">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3edb2-1044">返回循环访问集合的枚举数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1044">Returns an enumerator that iterates through a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-1045">可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1045">An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-1046">`foreach` C# 语言的语句 (`for each` c + + 中`For Each`在 Visual Basic 中) 隐藏了枚举器的复杂性。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1046">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="3edb2-1047">因此，建议使用 `foreach`，而不是直接操作枚举数。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1047">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="3edb2-1048">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1048">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="3edb2-1049">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1049">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="3edb2-1050">在此位置上，<xref:System.Collections.Generic.IEnumerator%601.Current%2A>未定义属性。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1050">At this position, the <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property is undefined.</span></span> <span data-ttu-id="3edb2-1051">因此，您必须调用<xref:System.Collections.IEnumerator.MoveNext%2A>方法将枚举数前移到集合，然后再读取的值的第一个元素<xref:System.Collections.Generic.IEnumerator%601.Current%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1051">Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.</span></span>  
  
 <span data-ttu-id="3edb2-1052"><xref:System.Collections.Generic.IEnumerator%601.Current%2A>属性返回同一对象，直到<xref:System.Collections.IEnumerator.MoveNext%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1052">The <xref:System.Collections.Generic.IEnumerator%601.Current%2A> property returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="3edb2-1053"><xref:System.Collections.IEnumerator.MoveNext%2A> 将 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1053"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="3edb2-1054">如果<xref:System.Collections.IEnumerator.MoveNext%2A>越过集合，枚举器的末尾放置在集合中的最后一个元素的后面和<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1054">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="3edb2-1055">当枚举数位于此位置上，对后续调用<xref:System.Collections.IEnumerator.MoveNext%2A>还返回`false`。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1055">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="3edb2-1056">如果最后一次调用到<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`，<xref:System.Collections.Generic.IEnumerator%601.Current%2A>是不确定的。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1056">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="3edb2-1057">无法再次将 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 设置为集合的第一个元素；必须改为创建新的枚举器实例。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1057">You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="3edb2-1058">只要集合保持不变，枚举数就保持有效。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1058">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="3edb2-1059">如果进行了更改到集合中，例如添加、 修改或删除元素，该枚举数将失效且不可恢复，并且下次调用<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>引发<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1059">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="3edb2-1060">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1060">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="3edb2-1061">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1061">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="3edb2-1062">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1062">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="3edb2-1063"><xref:System.Collections.Generic?displayProperty=nameWithType> 命名空间中集合的默认实现是不同步的。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1063">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
 <span data-ttu-id="3edb2-1064">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1064">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="3edb2-1065">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1065">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />.</span>
          </span>
          <span data-ttu-id="3edb2-1066">
            <see cref="T:System.Array" /> 必须具有从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1066">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="arrayIndex">
          <span data-ttu-id="3edb2-1067">
            <c>array</c> 中从零开始的索引，在此处开始复制。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1067">The zero-based index in <c>array</c> at which copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-1068">从特定的 <see cref="T:System.Collections.ICollection" /> 索引处开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1068">Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="3edb2-1069">如果源的类型<xref:System.Collections.ICollection>不能自动强制转换为目标的类型`array`的非泛型实现<xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType>引发<xref:System.InvalidCastException>，而泛型实现会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1069">If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the nongeneric implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="3edb2-1070">此方法为 O (*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1070">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3edb2-1071">
            <paramref name="array" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1071">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3edb2-1072">
            <paramref name="arrayIndex" /> 小于 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1072">
              <paramref name="arrayIndex" /> is less than 0.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3edb2-1073">
            <paramref name="array" /> 是多维的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1073">
              <paramref name="array" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="3edb2-1074">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1074">-or-</span>
          </span>
          <span data-ttu-id="3edb2-1075">
            <paramref name="array" /> 没有从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1075">
              <paramref name="array" /> does not have zero-based indexing.</span>
          </span>
          <span data-ttu-id="3edb2-1076">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1076">-or-</span>
          </span>
          <span data-ttu-id="3edb2-1077">源 <see cref="T:System.Collections.ICollection" /> 中的元素个数大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1077">The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span>
          </span>
          <span data-ttu-id="3edb2-1078">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1078">-or-</span>
          </span>
          <span data-ttu-id="3edb2-1079">无法自动将源 <see cref="T:System.Collections.ICollection" /> 的类型转换为目标 <paramref name="array" /> 的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1079">The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3edb2-1080">获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1080">Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3edb2-1081">如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1081">
              <see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="3edb2-1082">在 <see cref="T:System.Collections.Generic.List`1" /> 的默认实现中，此属性始终返回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1082">In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-1083"><xref:System.Collections.Generic?displayProperty=nameWithType> 命名空间中集合的默认实现是不同步的。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1083">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
 <span data-ttu-id="3edb2-1084">枚举整个集合本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1084">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="3edb2-1085">枚举与写访问的竞争的极少数情况下，可以锁定在整个枚举期间的集合。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1085">In the rare case where enumeration contends with write accesses, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="3edb2-1086">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1086">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="3edb2-1087"><xref:System.Collections.ICollection.SyncRoot%2A> 返回一个对象，可用于同步对<xref:System.Collections.ICollection>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1087"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="3edb2-1088">同步是所有线程访问集合之前都锁定此对象时才有效。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1088">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span>  
  
 <span data-ttu-id="3edb2-1089">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1089">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3edb2-1090">获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1090">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3edb2-1091">可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1091">An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span>
          </span>
          <span data-ttu-id="3edb2-1092">在 <see cref="T:System.Collections.Generic.List`1" /> 的默认实现中，此属性始终返回当前实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1092">In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns the current instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-1093"><xref:System.Collections.Generic?displayProperty=nameWithType> 命名空间中集合的默认实现是不同步的。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1093">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
 <span data-ttu-id="3edb2-1094">枚举整个集合本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1094">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="3edb2-1095">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1095">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="3edb2-1096">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1096">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="3edb2-1097"><xref:System.Collections.ICollection.SyncRoot%2A> 返回一个对象，可用于同步对<xref:System.Collections.ICollection>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1097"><xref:System.Collections.ICollection.SyncRoot%2A> returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="3edb2-1098">同步是所有线程访问集合之前都锁定此对象时才有效。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1098">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span> <span data-ttu-id="3edb2-1099">下面的代码演示如何使用<xref:System.Collections.ICollection.SyncRoot%2A>C#、 c + + 和 Visual Basic 的属性。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1099">The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.</span></span>  
  
```csharp  
ICollection ic = ...;  
lock (ic.SyncRoot)   
{  
    // Access the collection.  
}  
```  
  
```vb  
Dim ic As ICollection = ...  
SyncLock ic.SyncRoot  
    ' Access the collection.  
End SyncLock  
```  
  
```cpp#  
ICollection^ ic = ...;  
try   
{  
    Monitor::Enter(ic->SyncRoot);  
    // Access the collection.  
}  
finally   
{  
    Monitor::Exit(ic->SyncRoot);  
}  
```  
  
 <span data-ttu-id="3edb2-1100">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1100">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3edb2-1101">返回循环访问集合的枚举数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1101">Returns an enumerator that iterates through a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-1102">可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1102">An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-1103">`foreach` C# 语言的语句 (`for each` c + + 中`For Each`在 Visual Basic 中) 隐藏了枚举器的复杂性。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1103">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="3edb2-1104">因此，建议使用 `foreach`，而不是直接操作枚举数。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1104">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="3edb2-1105">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1105">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="3edb2-1106">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1106">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="3edb2-1107"><xref:System.Collections.IEnumerator.Reset%2A> 也会将枚举器放回此位置。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1107"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="3edb2-1108">在此位置上，<xref:System.Collections.IEnumerator.Current%2A>未定义属性。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1108">At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined.</span></span> <span data-ttu-id="3edb2-1109">因此，您必须调用<xref:System.Collections.IEnumerator.MoveNext%2A>方法将枚举数前移到集合，然后再读取的值的第一个元素<xref:System.Collections.IEnumerator.Current%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1109">Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="3edb2-1110"><xref:System.Collections.IEnumerator.Current%2A>属性返回同一个对象，直到<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1110">The <xref:System.Collections.IEnumerator.Current%2A> property returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="3edb2-1111"><xref:System.Collections.IEnumerator.MoveNext%2A> 将 <xref:System.Collections.IEnumerator.Current%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1111"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="3edb2-1112">如果<xref:System.Collections.IEnumerator.MoveNext%2A>越过集合，枚举器的末尾放置在集合中的最后一个元素的后面和<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1112">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="3edb2-1113">当枚举数位于此位置上，对后续调用<xref:System.Collections.IEnumerator.MoveNext%2A>还返回`false`。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1113">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="3edb2-1114">如果最后一次调用到<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`，<xref:System.Collections.IEnumerator.Current%2A>是不确定的。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1114">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="3edb2-1115">若要再次将 <xref:System.Collections.IEnumerator.Current%2A> 设置为集合的第一个元素，可以调用 <xref:System.Collections.IEnumerator.Reset%2A> 并接着调用 <xref:System.Collections.IEnumerator.MoveNext%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1115">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="3edb2-1116">只要集合保持不变，枚举数就保持有效。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1116">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="3edb2-1117">如果进行了更改到集合中，例如添加、 修改或删除元素，该枚举数将失效且不可恢复，并且下次调用<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>引发<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1117">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="3edb2-1118">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1118">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="3edb2-1119">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1119">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="3edb2-1120">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1120">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="3edb2-1121"><xref:System.Collections.Generic?displayProperty=nameWithType> 命名空间中集合的默认实现是不同步的。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1121">Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=nameWithType> namespace are not synchronized.</span></span>  
  
 <span data-ttu-id="3edb2-1122">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1122">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (item As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ item) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="3edb2-1123">要添加到 <see cref="T:System.Object" /> 的 <see cref="T:System.Collections.IList" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1123">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-1124">将某项添加到 <see cref="T:System.Collections.IList" /> 中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1124">Adds an item to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-1125">新元素的插入位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1125">The position into which the new element was inserted.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-1126">如果<xref:System.Collections.Generic.List%601.Count%2A>是小于<xref:System.Collections.Generic.List%601.Capacity%2A>，此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1126">If <xref:System.Collections.Generic.List%601.Count%2A> is less than <xref:System.Collections.Generic.List%601.Capacity%2A>, this method is an O(1) operation.</span></span> <span data-ttu-id="3edb2-1127">如果需要增加以容纳新元素的容量，此方法将成为 O (*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1127">If the capacity needs to be increased to accommodate the new element, this method becomes an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3edb2-1128">
            <paramref name="item" /> 属于不能分配给 <see cref="T:System.Collections.IList" /> 的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1128">
              <paramref name="item" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (item As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ item) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="3edb2-1129">要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.IList" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1129">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-1130">确定 <see cref="T:System.Collections.IList" /> 是否包含特定值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1130">Determines whether the <see cref="T:System.Collections.IList" /> contains a specific value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-1131">如果在 <see langword="true" /> 中找到 <paramref name="item" />，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1131">
              <see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-1132">此方法可确定是否使用默认的相等比较的相等<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>为`T`，列表中的值的类型。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1132">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="3edb2-1133">此方法执行线性搜索;因此，此方法为 O (*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1133">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (item As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ item) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="3edb2-1134">要在 <see cref="T:System.Collections.IList" /> 中定位的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1134">The object to locate in the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-1135">确定 <see cref="T:System.Collections.IList" /> 中特定项的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1135">Determines the index of a specific item in the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-1136">如果在列表中找到，则为 <paramref name="item" /> 的索引；否则为 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1136">The index of <paramref name="item" /> if found in the list; otherwise, –1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-1137">此方法可确定是否使用默认的相等比较的相等<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>为`T`，列表中的值的类型。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1137">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="3edb2-1138">此方法执行线性搜索;因此，此方法为 O (*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1138">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3edb2-1139">
            <paramref name="item" /> 属于不能分配给 <see cref="T:System.Collections.IList" /> 的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1139">
              <paramref name="item" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, item As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ item) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3edb2-1140">从零开始的索引，应在该位置插入 <c>item</c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1140">The zero-based index at which <c>item</c> should be inserted.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="3edb2-1141">要插入到 <see cref="T:System.Collections.IList" /> 中的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1141">The object to insert into the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-1142">在 <see cref="T:System.Collections.IList" /> 中的指定索引处插入一个项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1142">Inserts an item to the <see cref="T:System.Collections.IList" /> at the specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-1143">如果 `index` 等于 <xref:System.Collections.IList> 中的项数，则将 `item` 追加到末尾。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1143">If `index` equals the number of items in the <xref:System.Collections.IList>, then `item` is appended to the end.</span></span>  
  
 <span data-ttu-id="3edb2-1144">此方法为 O (*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1144">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3edb2-1145">
            <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1145">
              <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3edb2-1146">
            <paramref name="item" /> 属于不能分配给 <see cref="T:System.Collections.IList" /> 的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1146">
              <paramref name="item" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3edb2-1147">获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1147">Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3edb2-1148">如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1148">
              <see langword="true" /> if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="3edb2-1149">在 <see cref="T:System.Collections.Generic.List`1" /> 的默认实现中，此属性始终返回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1149">In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-1150">具有固定大小的集合在创建之后不能再添加或移除元素，但是允许修改现有元素。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1150">A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</span></span>  
  
 <span data-ttu-id="3edb2-1151">具有固定大小的集合只是一个集合与防止添加和移除元素; 的包装器因此，如果在更改基础集合，包括添加或删除的元素，大小固定集合反映了这些更改。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1151">A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</span></span>  
  
 <span data-ttu-id="3edb2-1152">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1152">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IList.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="3edb2-1153">获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否为只读。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1153">Gets a value indicating whether the <see cref="T:System.Collections.IList" /> is read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3edb2-1154">如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1154">
              <see langword="true" /> if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="3edb2-1155">在 <see cref="T:System.Collections.Generic.List`1" /> 的默认实现中，此属性始终返回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1155">In the default implementation of <see cref="T:System.Collections.Generic.List`1" />, this property always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-1156">在创建只读集合后，该集合不允许添加、移除或修改元素。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1156">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="3edb2-1157">集合是只读的只是一个集合与可防止修改集合; 的包装器因此，如果对基础集合进行更改，只读集合反映了这些更改。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1157">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="3edb2-1158">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1158">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="3edb2-1159">要获取或设置的元素的从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1159">The zero-based index of the element to get or set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-1160">获取或设置指定索引处的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1160">Gets or sets the element at the specified index.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="3edb2-1161">指定索引处的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1161">The element at the specified index.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-1162">使用 C# 语言[这](~/docs/csharp/language-reference/keywords/this.md)关键字来定义而不是实现索引器<xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1162">The C# language uses the [this](~/docs/csharp/language-reference/keywords/this.md) keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A> property.</span></span> <span data-ttu-id="3edb2-1163">Visual Basic 将 <xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A> 实现为默认属性，该属性提供相同的索引功能。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1163">Visual Basic implements <xref:System.Collections.Generic.List%601.System%23Collections%23IList%23Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="3edb2-1164">检索此属性的值是 o （1） 的操作;将属性设置也是 o （1） 操作。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1164">Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="3edb2-1165">
            <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1165">
              <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3edb2-1166">已设置属性，且 <paramref name="value" /> 属于不能对 <see cref="T:System.Collections.IList" /> 赋值的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1166">The property is set and <paramref name="value" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (item As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ item) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="3edb2-1167">要从 <see cref="T:System.Collections.IList" /> 中删除的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1167">The object to remove from the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-1168">从 <see cref="T:System.Collections.IList" /> 中移除特定对象的第一个匹配项。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1168">Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-1169">此方法可确定是否使用默认的相等比较的相等<xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType>为`T`，列表中的值的类型。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1169">This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType> for `T`, the type of values in the list.</span></span>  
  
 <span data-ttu-id="3edb2-1170">此方法执行线性搜索;因此，此方法为 O (*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1170">This method performs a linear search; therefore, this method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="3edb2-1171">
            <paramref name="item" /> 属于不能分配给 <see cref="T:System.Collections.IList" /> 的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1171">
              <paramref name="item" /> is of a type that is not assignable to the <see cref="T:System.Collections.IList" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T[] ToArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.ToArray" />
      <MemberSignature Language="VB.NET" Value="Public Function ToArray () As T()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;T&gt; ^ ToArray();" />
      <MemberSignature Language="F#" Value="member this.ToArray : unit -&gt; 'T[]" Usage="list.ToArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3edb2-1172">将 <see cref="T:System.Collections.Generic.List`1" /> 的元素复制到新数组中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1172">Copies the elements of the <see cref="T:System.Collections.Generic.List`1" /> to a new array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-1173">一个包含 <see cref="T:System.Collections.Generic.List`1" /> 的元素副本的数组。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1173">An array containing copies of the elements of the <see cref="T:System.Collections.Generic.List`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-1174">使用复制元素<xref:System.Array.Copy%2A?displayProperty=nameWithType>，这是 O (*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1174">The elements are copied using <xref:System.Array.Copy%2A?displayProperty=nameWithType>, which is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="3edb2-1175">此方法为 O (*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1175">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-1176">下面的示例演示<xref:System.Collections.Generic.List%601.ToArray%2A>方法和其他方法<xref:System.Collections.Generic.List%601>对范围进行操作的类。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1176">The following example demonstrates the <xref:System.Collections.Generic.List%601.ToArray%2A> method and other methods of the <xref:System.Collections.Generic.List%601> class that act on ranges.</span></span> <span data-ttu-id="3edb2-1177">在此示例中，末尾<xref:System.Collections.Generic.List%601.GetRange%2A>方法用于从列表中，从开始的索引位置 2 获取三个项。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1177">At the end of the example, the <xref:System.Collections.Generic.List%601.GetRange%2A> method is used to get three items from the list, beginning with index location 2.</span></span> <span data-ttu-id="3edb2-1178"><xref:System.Collections.Generic.List%601.ToArray%2A>方法调用所产生<xref:System.Collections.Generic.List%601>，创建三个元素的数组。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1178">The <xref:System.Collections.Generic.List%601.ToArray%2A> method is called on the resulting <xref:System.Collections.Generic.List%601>, creating an array of three elements.</span></span> <span data-ttu-id="3edb2-1179">将显示数组的元素。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1179">The elements of the array are displayed.</span></span>  
  
 [!code-cpp[List\`1_Ranges#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Ranges/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Ranges#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Ranges/cs/source.cs#1)]
 [!code-vb[List\`1_Ranges#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Ranges/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimExcess">
      <MemberSignature Language="C#" Value="public void TrimExcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrimExcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.TrimExcess" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrimExcess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TrimExcess();" />
      <MemberSignature Language="F#" Value="member this.TrimExcess : unit -&gt; unit" Usage="list.TrimExcess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="3edb2-1180">将容量设置为 <see cref="T:System.Collections.Generic.List`1" /> 中元素的实际数目（如果该数目小于某个阈值）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1180">Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Generic.List`1" />, if that number is less than a threshold value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-1181">此方法可用于最小化集合的内存开销如果任何新元素将不添加到集合。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1181">This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</span></span> <span data-ttu-id="3edb2-1182">重新分配和复制较大的成本<xref:System.Collections.Generic.List%601>但是，有时会很大，因此<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法不会执行任何操作，如果列表为在多个容量的 90%。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1182">The cost of reallocating and copying a large <xref:System.Collections.Generic.List%601> can be considerable, however, so the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method does nothing if the list is at more than 90 percent of capacity.</span></span> <span data-ttu-id="3edb2-1183">这样可以避免产生相对较小增益的大型的重新分配费用。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1183">This avoids incurring a large reallocation cost for a relatively small gain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3edb2-1184">90%的当前阈值可能会更改在将来的版本。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1184">The current threshold of 90 percent might change in future releases.</span></span>  
  
 <span data-ttu-id="3edb2-1185">此方法为 O (*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1185">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
 <span data-ttu-id="3edb2-1186">若要重置<xref:System.Collections.Generic.List%601>为其初始状态，请在调用<xref:System.Collections.Generic.List%601.Clear%2A>方法之前调用<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1186">To reset a <xref:System.Collections.Generic.List%601> to its initial state, call the <xref:System.Collections.Generic.List%601.Clear%2A> method before calling the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method.</span></span> <span data-ttu-id="3edb2-1187">截去空<xref:System.Collections.Generic.List%601>的容量设置<xref:System.Collections.Generic.List%601>到默认容量。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1187">Trimming an empty <xref:System.Collections.Generic.List%601> sets the capacity of the <xref:System.Collections.Generic.List%601> to the default capacity.</span></span>  
  
 <span data-ttu-id="3edb2-1188">也可以使用设置容量<xref:System.Collections.Generic.List%601.Capacity%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1188">The capacity can also be set using the <xref:System.Collections.Generic.List%601.Capacity%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-1189">下面的示例演示如何检查的容量和计数<xref:System.Collections.Generic.List%601>，其中包含简单的业务对象，说明了如何使用<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法以删除额外的容量。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1189">The following example demonstrates how to check the capacity and count of a  <xref:System.Collections.Generic.List%601> that contains a simple business object, and illustrates using the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method to remove extra capacity.</span></span>  
  
 [!code-csharp[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/cs/program.cs#1)]
 [!code-vb[System.Collections.Generic.List.CapacityCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.list.capacitycount/vb/module1.vb#1)]  
  
 <span data-ttu-id="3edb2-1190">下面的示例演示<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1190">The following example demonstrates the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method.</span></span> <span data-ttu-id="3edb2-1191">一些属性和方法的<xref:System.Collections.Generic.List%601>类用于添加、 插入和删除字符串的列表项。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1191">Several properties and methods of the <xref:System.Collections.Generic.List%601> class are used to add, insert, and remove items from a list of strings.</span></span> <span data-ttu-id="3edb2-1192">然后<xref:System.Collections.Generic.List%601.TrimExcess%2A>方法用于减少容量以匹配计数，并<xref:System.Collections.Generic.List%601.Capacity%2A>和<xref:System.Collections.Generic.List%601.Count%2A>属性将显示。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1192">Then the <xref:System.Collections.Generic.List%601.TrimExcess%2A> method is used to reduce the capacity to match the count, and the <xref:System.Collections.Generic.List%601.Capacity%2A> and <xref:System.Collections.Generic.List%601.Count%2A> properties are displayed.</span></span> <span data-ttu-id="3edb2-1193">如果未使用的容量小于 10%的总容量，列表将不具有已调整大小。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1193">If the unused capacity had been less than 10 percent of total capacity, the list would not have been resized.</span></span> <span data-ttu-id="3edb2-1194">最后，将清除列表的内容。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1194">Finally, the contents of the list are cleared.</span></span>  
  
 [!code-cpp[List\`1_Class#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_Class/cpp/source.cpp#1)]
 [!code-csharp[List\`1_Class#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_Class/cs/source.cs#1)]
 [!code-vb[List\`1_Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_Class/vb/source.vb#1)]  
 [!code-fsharp[List\`1_Class#1](~/samples/snippets/fsharp/VS_Snippets_CLR/List`1_Class/fs/listclass.fs#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.List`1.Clear" />
        <altmember cref="P:System.Collections.Generic.List`1.Capacity" />
        <altmember cref="P:System.Collections.Generic.List`1.Count" />
      </Docs>
    </Member>
    <Member MemberName="TrueForAll">
      <MemberSignature Language="C#" Value="public bool TrueForAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrueForAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function TrueForAll (match As Predicate(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TrueForAll(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="member this.TrueForAll : Predicate&lt;'T&gt; -&gt; bool" Usage="list.TrueForAll match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match">
          <span data-ttu-id="3edb2-1195">用于定义检查元素时要对照条件的 <see cref="T:System.Predicate`1" /> 委托。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1195">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions to check against the elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="3edb2-1196">确定 <see cref="T:System.Collections.Generic.List`1" /> 中的每个元素是否都与指定谓词定义的条件匹配。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1196">Determines whether every element in the <see cref="T:System.Collections.Generic.List`1" /> matches the conditions defined by the specified predicate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="3edb2-1197">如果 <see cref="T:System.Collections.Generic.List`1" /> 中的每个元素都与指定的谓词所定义的条件相匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1197">
              <see langword="true" /> if every element in the <see cref="T:System.Collections.Generic.List`1" /> matches the conditions defined by the specified predicate; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="3edb2-1198">如果列表没有元素，则返回值为 <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1198">If the list has no elements, the return value is <see langword="true" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3edb2-1199"><xref:System.Predicate%601>是返回的方法的委托`true`如果该对象传递给委托中定义的条件匹配。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1199">The <xref:System.Predicate%601> is a delegate to a method that returns `true` if the object passed to it matches the conditions defined in the delegate.</span></span>  <span data-ttu-id="3edb2-1200">当前元素<xref:System.Collections.Generic.List%601>逐个传递给<xref:System.Predicate%601>委托，并处理在委托返回时已停止`false`的任何元素。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1200">The elements of the current <xref:System.Collections.Generic.List%601> are individually passed to the <xref:System.Predicate%601> delegate, and processing is stopped when the delegate returns `false` for any element.</span></span> <span data-ttu-id="3edb2-1201">元素的处理顺序，并且所有调用都都是单个线程上。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1201">The elements are processed in order, and all calls are made on a single thread.</span></span>  
  
 <span data-ttu-id="3edb2-1202">此方法为 O (*n*) 操作，其中*n*是<xref:System.Collections.Generic.List%601.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1202">This method is an O(*n*) operation, where *n* is <xref:System.Collections.Generic.List%601.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3edb2-1203">下面的示例演示<xref:System.Collections.Generic.List%601.TrueForAll%2A>方法和其他几种方法使用<xref:System.Predicate%601>泛型委托。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1203">The following example demonstrates the <xref:System.Collections.Generic.List%601.TrueForAll%2A> method and several other methods that use <xref:System.Predicate%601> generic delegate.</span></span>  
  
 <span data-ttu-id="3edb2-1204">一个<xref:System.Collections.Generic.List%601>的字符串创建，包含 8 个恐龙名称，其中 （位于位置 1 和 5） 两个以"saurus"结尾。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1204">A <xref:System.Collections.Generic.List%601> of strings is created, containing 8 dinosaur names, two of which (at positions 1 and 5) end with "saurus".</span></span> <span data-ttu-id="3edb2-1205">该示例还定义一个名为搜索谓词的方法`EndsWithSaurus`、，它接受字符串参数和返回一个布尔值，该值指示是否以"saurus"结尾的输入的字符串。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1205">The example also defines a search predicate method named `EndsWithSaurus`, which accepts a string parameter and returns a Boolean value indicating whether the input string ends in "saurus".</span></span>  
  
 <span data-ttu-id="3edb2-1206"><xref:System.Collections.Generic.List%601.TrueForAll%2A>方法开始时，将每个元素传递给又从遍历列表`EndsWithSaurus`方法。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1206">The <xref:System.Collections.Generic.List%601.TrueForAll%2A> method traverses the list from the beginning, passing each element in turn to the `EndsWithSaurus` method.</span></span> <span data-ttu-id="3edb2-1207">搜索将停止何时`EndsWithSaurus`方法将返回`false`。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1207">The search stops when the `EndsWithSaurus` method returns `false`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="3edb2-1208">在 C# 和 Visual Basic 中，它不需要创建`Predicate<string>`委托 (`Predicate(Of String)`在 Visual Basic 中) 显式。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1208">In C# and Visual Basic, it is not necessary to create the `Predicate<string>` delegate (`Predicate(Of String)` in Visual Basic) explicitly.</span></span> <span data-ttu-id="3edb2-1209">这些语言推断从上下文正确的委托，并自动创建。</span><span class="sxs-lookup"><span data-stu-id="3edb2-1209">These languages infer the correct delegate from context and create it automatically.</span></span>  
  
 [!code-cpp[List\`1_FindEtAl#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_FindEtAl/cpp/source.cpp#1)]
 [!code-csharp[List\`1_FindEtAl#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_FindEtAl/cs/source.cs#1)]
 [!code-vb[List\`1_FindEtAl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_FindEtAl/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="3edb2-1210">
            <paramref name="match" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="3edb2-1210">
              <paramref name="match" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})" />
        <altmember cref="T:System.Predicate`1" />
      </Docs>
    </Member>
  </Members>
</Type>