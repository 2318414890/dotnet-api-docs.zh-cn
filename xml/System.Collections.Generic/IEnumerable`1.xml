<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IEnumerable`1.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e05b5b2-d481-4262-b7b7-7de7ac2afe07c7628000b2c4025ed54ca68bbecc86cda707f970.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c7628000b2c4025ed54ca68bbecc86cda707f970</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df6cf590aa3087f6c7c202712eee781c6a3c8f96</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/07/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerable`1">
          <source>The type of objects to enumerate.</source>
          <target state="translated">要枚举的对象的类型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.IEnumerable`1">
          <source>Exposes the enumerator, which supports a simple iteration over a collection of a specified type.</source>
          <target state="translated">公开枚举数，该枚举数支持在指定类型的集合上进行简单迭代。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerable`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> is the base interface for collections in the <ph id="ph2">&lt;xref:System.Collections.Generic&gt;</ph> namespace such as <ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>, <ph id="ph4">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>, and <ph id="ph5">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> and other generic collections such as <ph id="ph6">&lt;xref:System.Collections.ObjectModel.ObservableCollection%601&gt;</ph> and <ph id="ph7">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> 是中的集合的基接口<ph id="ph2">&lt;xref:System.Collections.Generic&gt;</ph>如命名空间<ph id="ph3">&lt;xref:System.Collections.Generic.List%601&gt;</ph>， <ph id="ph4">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>，和<ph id="ph5">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>和其他泛型集合，如<ph id="ph6">&lt;xref:System.Collections.ObjectModel.ObservableCollection%601&gt;</ph>和<ph id="ph7">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerable`1">
          <source>Collections that implement <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> can be enumerated by using the <ph id="ph2">`foreach`</ph> statement.</source>
          <target state="translated">为实现的集合<ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>可以通过使用枚举<ph id="ph2">`foreach`</ph>语句。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerable`1">
          <source>For the non-generic version of this interface, see <ph id="ph1">&lt;xref:System.Collections.IEnumerable?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">此接口的非泛型版本，请参阅<ph id="ph1">&lt;xref:System.Collections.IEnumerable?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerable`1">
          <source>For the non-generic version of this interface, see <ph id="ph1">&lt;xref:System.Collections.IEnumerable?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">此接口的非泛型版本，请参阅<ph id="ph1">&lt;xref:System.Collections.IEnumerable?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerable`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> contains a single method that you must implement when implementing this interface; <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph>, which returns an <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> 包含单个方法，则必须实现在实现此接口;<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A&gt;</ph>，它将返回<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerable`1">
          <source>The returned <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph> provides the ability to iterate through the collection by exposing a <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> property.</source>
          <target state="translated">返回<ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph>提供了通过公开循环访问集合的能力<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerable`1">
          <source>The following example demonstrates how to implement the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface and how to use that implementation to create a LINQ query.</source>
          <target state="translated">下面的示例演示如何实现<ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>接口以及如何使用该实现来创建 LINQ 查询。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerable`1">
          <source>When you implement <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you must also implement <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph> or, for C# only, you can use the <bpt id="p1">[</bpt>yield<ept id="p1">](~/docs/csharp/language-reference/keywords/yield.md)</ept> keyword.</source>
          <target state="translated">当实现<ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>，还必须实现<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph>或对于仅限 C#，你可以使用<bpt id="p1">[</bpt>产生<ept id="p1">](~/docs/csharp/language-reference/keywords/yield.md)</ept>关键字。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerable`1">
          <source>Implementing <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph> also requires <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> to be implemented, which you will see in this example.</source>
          <target state="translated">实现<ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph>还要求<ph id="ph2">&lt;xref:System.IDisposable&gt;</ph>要实现将在此示例中看到。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerable`1">
          <source>For another C# example that demonstrates how to implement the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface, see the <bpt id="p1">[</bpt>Generics Sample<ept id="p1">](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&amp;pathId=1364935593)</ept>.</source>
          <target state="translated">有关另一个 C# 示例，演示如何实现<ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>接口，请参阅<bpt id="p1">[</bpt>泛型示例<ept id="p1">](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&amp;pathId=1364935593)</ept>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerable`1">
          <source>This sample uses the <ph id="ph1">`yield`</ph> keyword instead of implementing <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph>.</source>
          <target state="translated">此示例使用<ph id="ph1">`yield`</ph>关键字而不是实现<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerable`1">
          <source><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> is included for parity with non-generic collections; implementing <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> allows a generic collection to be passed to a method that expects an <ph id="ph3">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph> object.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph> 包含针对与非泛型集合; 奇偶校验实现<ph id="ph2">&lt;see cref="T:System.Collections.Generic.IEnumerable`1" /&gt;</ph>允许要传递给需要的方法的泛型集合<ph id="ph3">&lt;see cref="T:System.Collections.IEnumerable" /&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <source>Returns an enumerator that iterates through the collection.</source>
          <target state="translated">返回一个循环访问集合的枚举器。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <source>An enumerator that can be used to iterate through the collection.</source>
          <target state="translated">用于循环访问集合的枚举数。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <source>The returned <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph> provides the ability to iterate through the collection by exposing a <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> property .You can use enumerators to read the data in a collection, but not to modify the collection.</source>
          <target state="translated">返回<ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph>提供了通过公开循环访问集合的能力<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>属性。若要读取集合中的数据，但不是能修改该集合，可以使用枚举器。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">最初，枚举数定位在集合中第一个元素的前面。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">在此位置上，未定义 <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <source>Therefore, you must call the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>.</source>
          <target state="translated">因此，必须调用<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>方法将枚举数前移到集合，然后再读取的值的第一个元素<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> returns the same object until <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> is called again as <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph4">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> 返回同一对象，直到<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>作为再次调用<ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>设置<ph id="ph4">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>到下一个元素。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>越过的末尾的集合，枚举数定位在集合中的最后一个元素的后面和<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返回<ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">当枚举器位于此位置上，后续调用<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>还返回<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">如果最后一次调用到<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返回<ph id="ph2">`false`</ph>，<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>是不确定的。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <source>You cannot set <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the first element of the collection again; you must create a new enumerator instance instead.</source>
          <target state="translated">无法再次将 <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> 设置为集合的第一个元素；必须改为创建新的枚举器实例。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <source>An enumerator does not have exclusive access to the collection so an enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">一个枚举数没有对集合的独占访问，因此，只要集合保持不变，枚举数就保持有效。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is invalidated and you may get unexpected results.</source>
          <target state="translated">如果对集合进行更改，如添加、 修改或删除元素，枚举数将失效，并可能会产生意外的结果。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <source>Also, enumerating a collection is not a thread-safe procedure.</source>
          <target state="translated">此外，在对集合进行枚举并不是一个线程安全的过程。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <source>To guarantee thread-safety, you should lock the collection during enumerator or implement synchronization on the collection.</source>
          <target state="translated">若要确保线程安全性，你应枚举期间锁定集合或集合上实现的同步。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <source>Default implementations of collections in the <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace aren't synchronized.</source>
          <target state="translated">集合中的默认实现<ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph>命名空间未同步。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <source>The following example demonstrates how to implement the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface and uses that implementation to create a LINQ query.</source>
          <target state="translated">下面的示例演示如何实现<ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>接口，并使用该实现创建一个 LINQ 查询。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <source>When you implement <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, you must also implement <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph> or, for C# only, you can use the <bpt id="p1">[</bpt>yield<ept id="p1">](~/docs/csharp/language-reference/keywords/yield.md)</ept> keyword.</source>
          <target state="translated">当实现<ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>，还必须实现<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph>或对于仅限 C#，你可以使用<bpt id="p1">[</bpt>产生<ept id="p1">](~/docs/csharp/language-reference/keywords/yield.md)</ept>关键字。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <source>Implementing <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph> also requires <ph id="ph2">&lt;xref:System.IDisposable&gt;</ph> to be implemented, which you will see in this example.</source>
          <target state="translated">实现<ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph>还要求<ph id="ph2">&lt;xref:System.IDisposable&gt;</ph>要实现将在此示例中看到。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <source>For another C# example that demonstrates how to implement the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph> interface, see the <bpt id="p1">[</bpt>Generics Sample<ept id="p1">](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&amp;pathId=1364935593)</ept>.</source>
          <target state="translated">有关另一个 C# 示例，演示如何实现<ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>接口，请参阅<bpt id="p1">[</bpt>泛型示例<ept id="p1">](https://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&amp;pathId=1364935593)</ept>。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <source>This sample uses of the <ph id="ph1">`yield`</ph> keyword instead of implementing <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph>.</source>
          <target state="translated">此示例使用的<ph id="ph1">`yield`</ph>关键字而不是实现<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>