<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IEnumerator`1.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac55c01a2b4bfa9de11a71f8a595354f73626ce7353.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5c01a2b4bfa9de11a71f8a595354f73626ce7353</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source>The type of objects to enumerate.</source>
          <target state="translated">要枚举的对象的类型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.IEnumerator`1">
          <source>Supports a simple iteration over a generic collection.</source>
          <target state="translated">支持在泛型集合上进行简单迭代。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph> is the base interface for all generic enumerators.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph> 是所有泛型枚举器的基接口。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> C# 语言的语句 (<ph id="ph2">`for each`</ph> c + + 中<ph id="ph3">`For Each`</ph>在 Visual Basic 中) 隐藏了枚举数的复杂性。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">因此，建议使用 <ph id="ph1">`foreach`</ph>，而不是直接操作枚举数。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">最初，枚举数定位在集合中第一个元素的前面。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">在此位置上，未定义 <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>.</source>
          <target state="translated">因此，在读取 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 的值之前，必须调用 <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> 将枚举器向前移动到集合的第一个元素。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> returns the same object until <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> is called.</source>
          <target state="translated">在调用 <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> 之前，<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 返回相同的对象。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 将 <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> 设置为下一个元素。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>越过的末尾的集合，枚举数定位在集合中的最后一个元素的后面和<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返回<ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">当枚举器位于此位置上，后续调用<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>还返回<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">如果最后一次调用到<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返回<ph id="ph2">`false`</ph>，<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>是不确定的。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source>You cannot set <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the first element of the collection again; you must create a new enumerator instance instead.</source>
          <target state="translated">无法再次将 <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> 设置为集合的第一个元素；必须改为创建新的枚举器实例。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> method is provided for COM interoperability.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>方法提供的 COM 互操作性。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source>It does not necessarily need to be implemented; instead, the implementer can simply throw a <ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph>.</source>
          <target state="translated">它不一定需要实现;相反，实施者可以只引发<ph id="ph1">&lt;xref:System.NotSupportedException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source>However, if you choose to do this, you should make sure no callers are relying on the <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> functionality.</source>
          <target state="translated">但是，如果你选择这样做，则应确保没有调用方依赖于<ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>功能。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">只要集合保持不变，枚举数就保持有效。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">如果对集合进行更改，例如添加、 修改或删除元素，则枚举数将失效且不可恢复失效，并且下次调用<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>引发<ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source>Default implementations of collections in the <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> namespace are not synchronized.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> 命名空间中集合的默认实现是不同步的。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source>The following example shows an implementation of the <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph> interface for a collection class of custom objects.</source>
          <target state="translated">下面的示例演示如何实现<ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph>自定义对象的集合类的接口。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source>The custom object is an instance of the type <ph id="ph1">`Box`</ph>, and the collection class is <ph id="ph2">`BoxCollection`</ph>.</source>
          <target state="translated">自定义的对象是类型的实例<ph id="ph1">`Box`</ph>，和集合类是<ph id="ph2">`BoxCollection`</ph>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> interface.</source>
          <target state="translated">此代码示例摘自更大的示例为提供<ph id="ph1">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>接口。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source>Implementing this interface requires implementing the nongeneric <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> interface.</source>
          <target state="translated">实现此接口需要实现非泛型<ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph>接口。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source>The <ph id="ph1">&lt;see cref="M:System.Collections.IEnumerator.MoveNext" /&gt;</ph> and <ph id="ph2">&lt;see cref="M:System.Collections.IEnumerator.Reset" /&gt;</ph> methods do not depend on <ph id="ph3">&lt;typeparamref name="T" /&gt;</ph>, and appear only on the nongeneric interface.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Collections.IEnumerator.MoveNext" /&gt;</ph>和<ph id="ph2">&lt;see cref="M:System.Collections.IEnumerator.Reset" /&gt;</ph>方法不依赖于<ph id="ph3">&lt;typeparamref name="T" /&gt;</ph>，并仅出现在非泛型接口。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source>The <ph id="ph1">&lt;see cref="P:System.Collections.Generic.IEnumerator`1.Current" /&gt;</ph> property appears on both interfaces, and has different return types.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Collections.Generic.IEnumerator`1.Current" /&gt;</ph>属性在这两个接口中出现，并且具有不同的返回类型。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source>Implement the nongeneric <ph id="ph1">&lt;see cref="P:System.Collections.IEnumerator.Current" /&gt;</ph> property as an explicit interface implementation.</source>
          <target state="translated">实现非泛型<ph id="ph1">&lt;see cref="P:System.Collections.IEnumerator.Current" /&gt;</ph>作为显式接口实现的属性。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source>This allows any consumer of the nongeneric interface to consume the generic interface.</source>
          <target state="translated">这允许非泛型接口的任何使用者使用的泛型接口。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source>In addition, <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerator`1" /&gt;</ph> implements <ph id="ph2">&lt;see cref="T:System.IDisposable" /&gt;</ph>, which requires you to implement the <ph id="ph3">&lt;see cref="M:System.IDisposable.Dispose" /&gt;</ph> method.</source>
          <target state="translated">此外，<ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerator`1" /&gt;</ph>实现<ph id="ph2">&lt;see cref="T:System.IDisposable" /&gt;</ph>，后者要求您实现<ph id="ph3">&lt;see cref="M:System.IDisposable.Dispose" /&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source>This enables you to close database connections or release file handles or similar operations when using other resources.</source>
          <target state="translated">这使您可以关闭数据库连接或使用其他资源时释放文件句柄或类似的操作。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IEnumerator`1">
          <source>If there are no additional resources to dispose of, provide an empty <ph id="ph1">&lt;see cref="M:System.IDisposable.Dispose" /&gt;</ph> implementation.</source>
          <target state="translated">如果不有任何其他资源，若要释放类型，提供一个空<ph id="ph1">&lt;see cref="M:System.IDisposable.Dispose" /&gt;</ph>实现。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.IEnumerator`1.Current">
          <source>Gets the element in the collection at the current position of the enumerator.</source>
          <target state="translated">获取集合中位于枚举数当前位置的元素。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IEnumerator`1.Current">
          <source>The element in the collection at the current position of the enumerator.</source>
          <target state="translated">集合中位于枚举数当前位置的元素。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IEnumerator`1.Current">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined under any of the following conditions:</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> 未定义任何以下条件下：</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IEnumerator`1.Current">
          <source>The enumerator is positioned before the first element in the collection, immediately after the enumerator is created.</source>
          <target state="translated">枚举器创建后立即，枚举数定位在集合中，第一个元素之前。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IEnumerator`1.Current">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> must be called to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 必须调用来枚举器向前移动到集合，然后再读取的值的第一个元素<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IEnumerator`1.Current">
          <source>The last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, which indicates the end of the collection.</source>
          <target state="translated">上次调用<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返回<ph id="ph2">`false`</ph>，指示集合的末尾。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IEnumerator`1.Current">
          <source>The enumerator is invalidated due to changes made in the collection, such as adding, modifying, or deleting elements.</source>
          <target state="translated">由于在集合中，如添加、 修改或删除元素所做的更改，枚举数将失效。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IEnumerator`1.Current">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> returns the same object until <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> is called.</source>
          <target state="translated">在调用 <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> 之前，<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 返回相同的对象。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IEnumerator`1.Current">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 将 <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> 设置为下一个元素。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IEnumerator`1.Current">
          <source>Implementing this interface requires implementing the nongeneric <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> interface.</source>
          <target state="translated">实现此接口需要实现非泛型<ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph>接口。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IEnumerator`1.Current">
          <source>The <ph id="ph1">&lt;see cref="P:System.Collections.Generic.IEnumerator`1.Current" /&gt;</ph> property appears on both interfaces, and has different return types.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Collections.Generic.IEnumerator`1.Current" /&gt;</ph>属性在这两个接口中出现，并且具有不同的返回类型。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IEnumerator`1.Current">
          <source>Implement the nongeneric <ph id="ph1">&lt;see cref="P:System.Collections.IEnumerator.Current" /&gt;</ph> property as an explicit interface implementation.</source>
          <target state="translated">实现非泛型<ph id="ph1">&lt;see cref="P:System.Collections.IEnumerator.Current" /&gt;</ph>作为显式接口实现的属性。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IEnumerator`1.Current">
          <source>This allows any consumer of the nongeneric interface to consume the generic interface.</source>
          <target state="translated">这允许非泛型接口的任何使用者使用的泛型接口。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>