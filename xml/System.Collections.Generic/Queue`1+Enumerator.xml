<Type Name="Queue&lt;T&gt;+Enumerator" FullName="System.Collections.Generic.Queue&lt;T&gt;+Enumerator">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4d6945a3975edf4992355311e285c78fd117c270" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct Queue&lt;T&gt;.Enumerator : System.Collections.Generic.IEnumerator&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi serializable sealed beforefieldinit Queue`1/Enumerator&lt;T&gt; extends System.ValueType implements class System.Collections.Generic.IEnumerator`1&lt;!T&gt;, class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.Queue`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure Queue(Of T).Enumerator&#xA;Implements IEnumerator(Of T)" />
  <TypeSignature Language="C++ CLI" Value="public: value class Queue&lt;T&gt;::Enumerator : System::Collections::Generic::IEnumerator&lt;T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="bb9a2-101">枚举 <see cref="T:System.Collections.Generic.Queue`1" /> 的元素。</span>
      <span class="sxs-lookup">
        <span data-stu-id="bb9a2-101">Enumerates the elements of a <see cref="T:System.Collections.Generic.Queue`1" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb9a2-102">`foreach` C# 语言的语句 (`for each` c + + 中`For Each`在 Visual Basic 中) 隐藏了枚举数的复杂性。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-102">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="bb9a2-103">因此，建议使用 `foreach`，而不是直接操作枚举数。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-103">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bb9a2-104">此类型实现<xref:System.IDisposable>接口。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-104">This type implements the <xref:System.IDisposable> interface.</span></span> <span data-ttu-id="bb9a2-105">在使用完类型后，您应直接或间接释放类型。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-105">When you have finished using the type, you should dispose of it either directly or indirectly.</span></span> <span data-ttu-id="bb9a2-106">若要直接释放类型，调用其<xref:System.IDisposable.Dispose%2A>中的方法`try` / `catch`块。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-106">To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block.</span></span> <span data-ttu-id="bb9a2-107">若要间接释放类型，请使用 `using`（在 C# 中）或 `Using`（在 Visual Basic 中）等语言构造。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-107">To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic).</span></span> <span data-ttu-id="bb9a2-108">有关详细信息，请参阅中的"使用实现 IDisposable 的对象"部分<xref:System.IDisposable>接口主题。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-108">For more information, see the "Using an Object that Implements IDisposable" section in the <xref:System.IDisposable> interface topic.</span></span>  
  
 <span data-ttu-id="bb9a2-109">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-109">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="bb9a2-110">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-110">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="bb9a2-111">在此位置上，未定义 <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A>。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-111">At this position, <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="bb9a2-112">因此，在读取 <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> 的值之前，必须调用 <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> 将枚举器向前移动到集合的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-112">Therefore, you must call <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="bb9a2-113">在调用 <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> 之前，<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> 返回相同的对象。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-113"><xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> returns the same object until <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="bb9a2-114"><xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> 将 <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-114"><xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="bb9a2-115">如果<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>越过的末尾的集合，枚举数定位在集合中的最后一个元素的后面和<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>返回`false`。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-115">If <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="bb9a2-116">当枚举器位于此位置上，后续调用<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>还返回`false`。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-116">When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="bb9a2-117">如果最后一次调用到<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>返回`false`，<xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A>是不确定的。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-117">If the last call to <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="bb9a2-118">无法再次将 <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> 设置为集合的第一个元素；必须改为创建新的枚举器实例。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-118">You cannot set <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="bb9a2-119">只要集合保持不变，枚举数就保持有效。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-119">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="bb9a2-120">如果对集合进行更改（如添加、修改或删除元素），则枚举数将失效且不可恢复，而且其行为是不确定的。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-120">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 <span data-ttu-id="bb9a2-121">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-121">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="bb9a2-122">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-122">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="bb9a2-123">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-123">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="bb9a2-124">集合中的默认实现<xref:System.Collections.Generic?displayProperty=nameWithType>不同步。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-124">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.Generic.IEnumerable`1" />
    <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Queue`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Current { T get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bb9a2-125">获取枚举数当前位置的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb9a2-125">Gets the element at the current position of the enumerator.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bb9a2-126">
            <see cref="T:System.Collections.Generic.Queue`1" /> 中位于该枚举数当前位置的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb9a2-126">The element in the <see cref="T:System.Collections.Generic.Queue`1" /> at the current position of the enumerator.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb9a2-127"><xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> 未定义任何以下条件下：</span><span class="sxs-lookup"><span data-stu-id="bb9a2-127"><xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> is undefined under any of the following conditions:</span></span>  
  
-   <span data-ttu-id="bb9a2-128">枚举器创建后立即，枚举数定位在集合中，第一个元素之前。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-128">The enumerator is positioned before the first element in the collection, immediately after the enumerator is created.</span></span>   <span data-ttu-id="bb9a2-129"><xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> 必须调用来枚举器向前移动到集合，然后再读取的值的第一个元素<xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A>。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-129"><xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> must be called to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A>.</span></span>  
  
-   <span data-ttu-id="bb9a2-130">上次调用<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>返回`false`，指示集合的末尾。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-130">The last call to <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> returned `false`, which indicates the end of the collection.</span></span>  
  
 <span data-ttu-id="bb9a2-131">在调用 <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> 之前，<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> 返回相同的对象。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-131"><xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> returns the same object until <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="bb9a2-132"><xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> 将 <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-132"><xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> to the next element.</span></span> <span data-ttu-id="bb9a2-133">如果之间修改集合<xref:System.Collections.IEnumerator.MoveNext%2A>和<xref:System.Collections.IEnumerator.Current%2A>，<xref:System.Collections.IEnumerator.Current%2A>返回到，设置的元素，即使枚举数已经无效。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-133">If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="bb9a2-134">枚举器位于集合中第一个元素之前或最后一个元素之后。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb9a2-134">The enumerator is positioned before the first element of the collection or after the last element.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.Queue`1.Enumerator.MoveNext" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Enumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bb9a2-135">释放由 <see cref="T:System.Collections.Generic.Queue`1.Enumerator" /> 使用的所有资源。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb9a2-135">Releases all resources used by the <see cref="T:System.Collections.Generic.Queue`1.Enumerator" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bb9a2-136">使枚举数前进到 <see cref="T:System.Collections.Generic.Queue`1" /> 的下一个元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb9a2-136">Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.Queue`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="bb9a2-137">如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb9a2-137">
              <see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb9a2-138">创建一个枚举器之后，枚举数定位在集合中，、 首次调用中的第一个元素之前<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>将枚举数推进到集合的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-138">After an enumerator is created, the enumerator is positioned before the first element in the collection, and the first call to <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> advances the enumerator to the first element of the collection.</span></span>  
  
 <span data-ttu-id="bb9a2-139">如果<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>越过的末尾的集合，枚举数定位在集合中的最后一个元素的后面和<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>返回`false`。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-139">If <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="bb9a2-140">当枚举器位于此位置上，后续调用<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>还返回`false`。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-140">When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> also return `false`.</span></span>  
  
 <span data-ttu-id="bb9a2-141">只要集合保持不变，枚举数就保持有效。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-141">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="bb9a2-142">如果对集合进行更改（如添加、修改或删除元素），则枚举数将失效且不可恢复，而且其行为是不确定的。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-142">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="bb9a2-143">集合在枚举器创建后被修改。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb9a2-143">The collection was modified after the enumerator was created.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.Generic.Queue`1.Enumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IEnumerator.Current { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="bb9a2-144">获取枚举数当前位置的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb9a2-144">Gets the element at the current position of the enumerator.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="bb9a2-145">集合中位于枚举数当前位置的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb9a2-145">The element in the collection at the current position of the enumerator.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb9a2-146">创建一个枚举器或<xref:System.Collections.IEnumerator.Reset%2A>调用时，<xref:System.Collections.IEnumerator.MoveNext%2A>必须调用来枚举器向前移动到集合，然后再读取的值的第一个元素<xref:System.Collections.IEnumerator.Current%2A>; 否则为<xref:System.Collections.IEnumerator.Current%2A>是不确定的。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-146">After an enumerator is created or after a <xref:System.Collections.IEnumerator.Reset%2A> is called, <xref:System.Collections.IEnumerator.MoveNext%2A> must be called to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>; otherwise, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span>  
  
 <span data-ttu-id="bb9a2-147"><xref:System.Collections.IEnumerator.Current%2A> 如果最后一次调用到也会引发异常<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`，指示集合的末尾。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-147"><xref:System.Collections.IEnumerator.Current%2A> also throws an exception if the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, which indicates the end of the collection.</span></span>  
  
 <span data-ttu-id="bb9a2-148"><xref:System.Collections.IEnumerator.Current%2A> 不会移动的位置的枚举器，并对连续调用<xref:System.Collections.IEnumerator.Current%2A>之前返回同一对象<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-148"><xref:System.Collections.IEnumerator.Current%2A> does not move the position of the enumerator, and consecutive calls to <xref:System.Collections.IEnumerator.Current%2A> return the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span>  
  
 <span data-ttu-id="bb9a2-149">只要集合保持不变，枚举数就保持有效。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-149">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="bb9a2-150">如果对集合进行更改，例如添加、 修改或删除元素，则枚举数将失效且不可恢复失效，并且下次调用<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>引发<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-150">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="bb9a2-151">如果之间修改集合<xref:System.Collections.IEnumerator.MoveNext%2A>和<xref:System.Collections.IEnumerator.Current%2A>，<xref:System.Collections.IEnumerator.Current%2A>返回到，设置的元素，即使枚举数已经无效。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-151">If the collection is modified between <xref:System.Collections.IEnumerator.MoveNext%2A> and <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="bb9a2-152">枚举器位于集合中第一个元素之前或最后一个元素之后。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb9a2-152">The enumerator is positioned before the first element of the collection or after the last element.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.Queue`1.Enumerator.MoveNext" />
        <altmember cref="M:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Reset" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Reset">
      <MemberSignature Language="C#" Value="void IEnumerator.Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IEnumerator.Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Reset" />
      <MemberSignature Language="VB.NET" Value="Sub Reset () Implements IEnumerator.Reset" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IEnumerator.Reset() = System::Collections::IEnumerator::Reset;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="bb9a2-153">将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb9a2-153">Sets the enumerator to its initial position, which is before the first element in the collection.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bb9a2-154">只要集合保持不变，枚举数就保持有效。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-154">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="bb9a2-155">如果对集合进行更改，例如添加、 修改或删除元素，则枚举数将失效且不可恢复失效，并且下次调用<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>引发<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="bb9a2-155">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="bb9a2-156">集合在枚举器创建后被修改。</span>
          <span class="sxs-lookup">
            <span data-stu-id="bb9a2-156">The collection was modified after the enumerator was created.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.Queue`1.Enumerator.MoveNext" />
        <altmember cref="P:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Current" />
        <altmember cref="P:System.Collections.Generic.Queue`1.Enumerator.Current" />
      </Docs>
    </Member>
  </Members>
</Type>