<Type Name="Queue&lt;T&gt;+Enumerator" FullName="System.Collections.Generic.Queue&lt;T&gt;+Enumerator">
  <TypeSignature Language="C#" Value="public struct Queue&lt;T&gt;.Enumerator : System.Collections.Generic.IEnumerator&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi serializable sealed beforefieldinit Queue`1/Enumerator&lt;T&gt; extends System.ValueType implements class System.Collections.Generic.IEnumerator`1&lt;!T&gt;, class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.Queue`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure Queue(Of T).Enumerator&#xA;Implements IEnumerator(Of T)" />
  <TypeSignature Language="C++ CLI" Value="public: value class Queue&lt;T&gt;::Enumerator : System::Collections::Generic::IEnumerator&lt;T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerator&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="e9559-101">枚举 <see cref="T:System.Collections.Generic.Queue`1" /> 的元素。</span><span class="sxs-lookup"><span data-stu-id="e9559-101">Enumerates the elements of a <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9559-102">`foreach` C# 语言的语句 (`for each` c + + 中`For Each`在 Visual Basic 中) 隐藏了枚举数的复杂性。</span><span class="sxs-lookup"><span data-stu-id="e9559-102">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span> <span data-ttu-id="e9559-103">因此，建议使用 `foreach`，而不是直接操作枚举数。</span><span class="sxs-lookup"><span data-stu-id="e9559-103">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="e9559-104">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="e9559-104">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="e9559-105">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="e9559-105">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="e9559-106">在此位置上，未定义 <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A>。</span><span class="sxs-lookup"><span data-stu-id="e9559-106">At this position, <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="e9559-107">因此，在读取 <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> 的值之前，必须调用 <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> 将枚举器向前移动到集合的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="e9559-107">Therefore, you must call <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="e9559-108">在调用 <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> 之前，<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> 返回相同的对象。</span><span class="sxs-lookup"><span data-stu-id="e9559-108"><xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> returns the same object until <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="e9559-109"><xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> 将 <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="e9559-109"><xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="e9559-110">如果<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>越过的末尾的集合，枚举数定位在集合中的最后一个元素的后面和<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>返回`false`。</span><span class="sxs-lookup"><span data-stu-id="e9559-110">If <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="e9559-111">当枚举器位于此位置上，后续调用<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>还返回`false`。</span><span class="sxs-lookup"><span data-stu-id="e9559-111">When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="e9559-112">如果最后一次调用到<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>返回`false`，<xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A>是不确定的。</span><span class="sxs-lookup"><span data-stu-id="e9559-112">If the last call to <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="e9559-113">无法再次将 <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> 设置为集合的第一个元素；必须改为创建新的枚举器实例。</span><span class="sxs-lookup"><span data-stu-id="e9559-113">You cannot set <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="e9559-114">只要集合保持不变，枚举数就保持有效。</span><span class="sxs-lookup"><span data-stu-id="e9559-114">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="e9559-115">如果对集合进行更改，例如添加、 修改或删除元素，则枚举数将失效且不可恢复失效，并且下次调用<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>或<xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A>引发<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="e9559-115">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> or <xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="e9559-116">如果调用之间修改集合<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>方法和获取的值<xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A>属性，<xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A>返回到，设置的元素，即使枚举数已经无效。</span><span class="sxs-lookup"><span data-stu-id="e9559-116">If the collection is modified between calling <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> method and obtaining the value of the <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> property, <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> returns the element that it is set to, even if the enumerator is already invalidated.</span></span>   
  
 <span data-ttu-id="e9559-117">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="e9559-117">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="e9559-118">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="e9559-118">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="e9559-119">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="e9559-119">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="e9559-120">集合中的默认实现<xref:System.Collections.Generic?displayProperty=nameWithType>不同步。</span><span class="sxs-lookup"><span data-stu-id="e9559-120">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.Generic.IEnumerable`1" />
    <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Queue`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T Current { T get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IEnumerator`1.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e9559-121">获取枚举数当前位置的元素。</span><span class="sxs-lookup"><span data-stu-id="e9559-121">Gets the element at the current position of the enumerator.</span></span></summary>
        <value><span data-ttu-id="e9559-122"><see cref="T:System.Collections.Generic.Queue`1" /> 中位于该枚举数当前位置的元素。</span><span class="sxs-lookup"><span data-stu-id="e9559-122">The element in the <see cref="T:System.Collections.Generic.Queue`1" /> at the current position of the enumerator.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9559-123"><xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> 引发<xref:System.InvalidOperationException>任何以下条件下：</span><span class="sxs-lookup"><span data-stu-id="e9559-123"><xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> throws an <xref:System.InvalidOperationException> under any of the following conditions:</span></span>  
  
- <span data-ttu-id="e9559-124">枚举数定位在集合的第一个元素之前。</span><span class="sxs-lookup"><span data-stu-id="e9559-124">The enumerator is positioned before the first element of the collection.</span></span> <span data-ttu-id="e9559-125">发生这种情况是创建一个枚举器或<xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="e9559-125">That happens after an enumerator is created or after the <xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> method is called.</span></span> <span data-ttu-id="e9559-126"><xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>必须调用方法来枚举器向前移动到集合，然后再读取的值的第一个元素<xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="e9559-126">The <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> method must be called to advance the enumerator to the first element of the collection before reading the value of the <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> property.</span></span>  
  
- <span data-ttu-id="e9559-127">上次调用<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>返回`false`，指示集合的末尾，枚举数定位在集合的最后一个元素之后。</span><span class="sxs-lookup"><span data-stu-id="e9559-127">The last call to <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> returned `false`, which indicates the end of the collection and that the enumerator is positioned after the last element of the collection.</span></span>

 <span data-ttu-id="e9559-128"><xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> 不会移动的位置的枚举器，并对连续调用<xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A>之前返回同一对象<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>或<xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="e9559-128"><xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> does not move the position of the enumerator, and consecutive calls to <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> return the same object until either <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> or <xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> is called.</span></span>  
  
 <span data-ttu-id="e9559-129">如果调用之间修改集合<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>方法和获取的值<xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A>属性，<xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A>返回到，设置的元素，即使枚举数已经无效。</span><span class="sxs-lookup"><span data-stu-id="e9559-129">If the collection is modified between calling <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> method and obtaining the value of the <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> property, <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> returns the element that it is set to, even though the enumerator is invalidated.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e9559-130">枚举器位于集合中第一个元素之前或最后一个元素之后。</span><span class="sxs-lookup"><span data-stu-id="e9559-130">The enumerator is positioned before the first element of the collection or after the last element.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.Queue`1.Enumerator.MoveNext" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Enumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e9559-131">释放由 <see cref="T:System.Collections.Generic.Queue`1.Enumerator" /> 使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="e9559-131">Releases all resources used by the <see cref="T:System.Collections.Generic.Queue`1.Enumerator" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e9559-132">使枚举数前进到 <see cref="T:System.Collections.Generic.Queue`1" /> 的下一个元素。</span><span class="sxs-lookup"><span data-stu-id="e9559-132">Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.Queue`1" />.</span></span></summary>
        <returns>
          <span data-ttu-id="e9559-133">如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e9559-133"><see langword="true" /> if the enumerator was successfully advanced to the next element; <see langword="false" /> if the enumerator has passed the end of the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9559-134">创建一个枚举器之后，枚举数定位在集合中，、 首次调用中的第一个元素之前<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>将枚举数推进到集合的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="e9559-134">After an enumerator is created, the enumerator is positioned before the first element in the collection, and the first call to <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> advances the enumerator to the first element of the collection.</span></span>  
  
 <span data-ttu-id="e9559-135">如果<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>越过的末尾的集合，枚举数定位在集合中的最后一个元素的后面和<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>返回`false`。</span><span class="sxs-lookup"><span data-stu-id="e9559-135">If <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="e9559-136">当枚举器位于此位置上，后续调用<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>还返回`false`。</span><span class="sxs-lookup"><span data-stu-id="e9559-136">When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> also return `false`.</span></span>  
  
 <span data-ttu-id="e9559-137">只要集合保持不变，枚举数就保持有效。</span><span class="sxs-lookup"><span data-stu-id="e9559-137">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="e9559-138">如果对集合进行更改，例如添加、 修改或删除元素，则枚举数将失效且不可恢复失效，并且下次调用<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>或<xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A>引发<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="e9559-138">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> or <xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span> <span data-ttu-id="e9559-139">如果调用之间修改集合<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>方法和获取的值<xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A>属性，<xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A>返回到，设置的元素，即使枚举数已经无效。</span><span class="sxs-lookup"><span data-stu-id="e9559-139">If the collection is modified between calling <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> method and obtaining the value of the <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> property, <xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A> returns the element that it is set to, even though the enumerator is invalidated.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e9559-140">集合在枚举器创建后被修改。</span><span class="sxs-lookup"><span data-stu-id="e9559-140">The collection was modified after the enumerator was created.</span></span></exception>
        <altmember cref="P:System.Collections.Generic.Queue`1.Enumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IEnumerator.Current { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e9559-141">获取枚举数当前位置的元素。</span><span class="sxs-lookup"><span data-stu-id="e9559-141">Gets the element at the current position of the enumerator.</span></span></summary>
        <value><span data-ttu-id="e9559-142">集合中位于枚举数当前位置的元素。</span><span class="sxs-lookup"><span data-stu-id="e9559-142">The element in the collection at the current position of the enumerator.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 
 <span data-ttu-id="e9559-143"><xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Current%2A> 引发<xref:System.InvalidOperationException>任何以下条件下：</span><span class="sxs-lookup"><span data-stu-id="e9559-143"><xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Current%2A> throws an <xref:System.InvalidOperationException> under any of the following conditions:</span></span>  
  
- <span data-ttu-id="e9559-144">枚举数定位在集合的第一个元素之前。</span><span class="sxs-lookup"><span data-stu-id="e9559-144">The enumerator is positioned before the first element of the collection.</span></span> <span data-ttu-id="e9559-145">发生这种情况是创建一个枚举器或<xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A>调用方法。</span><span class="sxs-lookup"><span data-stu-id="e9559-145">That happens after an enumerator is created or after the <xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> method is called.</span></span> <span data-ttu-id="e9559-146"><xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>必须调用方法来枚举器向前移动到集合，然后再读取的值的第一个元素<xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Current%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="e9559-146">The <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> method must be called to advance the enumerator to the first element of the collection before reading the value of the <xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Current%2A> property.</span></span>  
  
- <span data-ttu-id="e9559-147">上次调用<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>返回`false`，指示集合的末尾，枚举数定位在集合的最后一个元素之后。</span><span class="sxs-lookup"><span data-stu-id="e9559-147">The last call to <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> returned `false`, which indicates the end of the collection and that the enumerator is positioned after the last element of the collection.</span></span>

 <span data-ttu-id="e9559-148"><xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Current%2A> 不会移动的位置的枚举器，并对连续调用<xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Current%2A>之前返回同一对象<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>或<xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="e9559-148"><xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Current%2A> does not move the position of the enumerator, and consecutive calls to <xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Current%2A> return the same object until either <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> or <xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> is called.</span></span>  
  
 <span data-ttu-id="e9559-149">如果调用之间修改集合<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>方法和获取的值<xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Current%2A>属性，<xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Current%2A>返回到，设置的元素，即使枚举数已经无效。</span><span class="sxs-lookup"><span data-stu-id="e9559-149">If the collection is modified between calling <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> method and obtaining the value of the <xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Current%2A> property, <xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Current%2A> returns the element that it is set to, even though the enumerator is invalidated.</span></span>
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e9559-150">枚举器位于集合中第一个元素之前或最后一个元素之后。</span><span class="sxs-lookup"><span data-stu-id="e9559-150">The enumerator is positioned before the first element of the collection or after the last element.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.Queue`1.Enumerator.MoveNext" />
        <altmember cref="M:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Reset" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Reset">
      <MemberSignature Language="C#" Value="void IEnumerator.Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IEnumerator.Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Reset" />
      <MemberSignature Language="VB.NET" Value="Sub Reset () Implements IEnumerator.Reset" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IEnumerator.Reset() = System::Collections::IEnumerator::Reset;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e9559-151">将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</span><span class="sxs-lookup"><span data-stu-id="e9559-151">Sets the enumerator to its initial position, which is before the first element in the collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e9559-152">只要集合保持不变，枚举数就保持有效。</span><span class="sxs-lookup"><span data-stu-id="e9559-152">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="e9559-153">如果对集合进行更改，例如添加、 修改或删除元素，则枚举数将失效且不可恢复失效，并且下次调用<xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A>或<xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A>引发<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="e9559-153">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A> or <xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e9559-154">集合在枚举器创建后被修改。</span><span class="sxs-lookup"><span data-stu-id="e9559-154">The collection was modified after the enumerator was created.</span></span></exception>
        <altmember cref="M:System.Collections.Generic.Queue`1.Enumerator.MoveNext" />
        <altmember cref="P:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Current" />
        <altmember cref="P:System.Collections.Generic.Queue`1.Enumerator.Current" />
      </Docs>
    </Member>
  </Members>
</Type>