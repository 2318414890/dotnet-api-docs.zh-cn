<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Queue`1.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">037e736f-f76f-422a-bcb7-5d2d599f851d1c2d7dc7812858c06960c802e58fd6d4ceab1e0f.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1c2d7dc7812858c06960c802e58fd6d4ceab1e0f</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6fc53860cd2661bb7bde6e4b2858fcda4ec4c889</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/10/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Queue`1">
          <source>Specifies the type of elements in the queue.</source>
          <target state="translated">指定队列中元素的类型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.Queue`1">
          <source>Represents a first-in, first-out collection of objects.</source>
          <target state="translated">表示对象的先进先出集合。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Queue`1">
          <source>This class implements a generic queue as a circular array.</source>
          <target state="translated">此类实现泛型队列为一个循环的数组。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Queue`1">
          <source>Objects stored in a <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> are inserted at one end and removed from the other.</source>
          <target state="translated">对象存储在<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>某一端插入和删除来自其他。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Queue`1">
          <source>Queues and stacks are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value.</source>
          <target state="translated">当你需要为信息; 临时存储时，队列和堆栈非常有用也就是说，当你可能想要检索其值后放弃元素。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Queue`1">
          <source>Use <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> if you need to access the information in the same order that it is stored in the collection.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>如果你需要访问集合中存储的相同顺序的信息。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Queue`1">
          <source>Use <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> if you need to access the information in reverse order.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>如果你需要按相反的顺序访问的信息。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Queue`1">
          <source>Use <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph> or <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph> if you need to access the collection from multiple threads concurrently.</source>
          <target state="translated">使用<ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601&gt;</ph>或<ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601&gt;</ph>如果你需要同时从多个线程访问集合。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Queue`1">
          <source>Three main operations can be performed on a <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> and its elements:</source>
          <target state="translated">可以对执行三个主要操作<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>及其元素：</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Queue`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enqueue%2A&gt;</ph> adds an element to the end of the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enqueue%2A&gt;</ph> 将元素添加到的末尾<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Queue`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph> removes the oldest element from the start of the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph> 从开始处移除最旧的元素<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Queue`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Peek%2A&gt;</ph> peek returns the oldest element that is at the start of the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> but does not remove it from the <ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Peek%2A&gt;</ph> 查看返回的最旧元素的开头<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>但不会删除从<ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Queue`1">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> is the number of elements the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> can hold.</source>
          <target state="translated">容量<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>是元素的数目<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>可以保存。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Queue`1">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">如元素添加到<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>，自动增加容量通过重新分配在内部数组所需的方式。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Queue`1">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.TrimExcess%2A&gt;</ph>.</source>
          <target state="translated">可以通过调用减少容量<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.TrimExcess%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Queue`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value for reference types and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> 接受<ph id="ph2">`null`</ph>引用为有效的值类型，并允许重复的元素。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Queue`1">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> generic class.</source>
          <target state="translated">下面的代码示例演示的若干方法<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>泛型类。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Queue`1">
          <source>The code example creates a queue of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enqueue%2A&gt;</ph> method to queue five strings.</source>
          <target state="translated">此代码示例创建具有默认的容量的字符串的队列，并使用<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enqueue%2A&gt;</ph>方法进行排队五个字符串。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Queue`1">
          <source>The elements of the queue are enumerated, which does not change the state of the queue.</source>
          <target state="translated">枚举队列的元素，这不会更改队列的状态。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Queue`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph> method is used to dequeue the first string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph>方法用于取消排队的第一个字符串。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Queue`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Peek%2A&gt;</ph> method is used to look at the next item in the queue, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph> method is used to dequeue it.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Peek%2A&gt;</ph>方法用于查看队列中的下一项，然后<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph>方法用于取消它的排队。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Queue`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.ToArray%2A&gt;</ph> method is used to create an array and copy the queue elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the queue.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.ToArray%2A&gt;</ph>方法用于创建数组并将队列元素复制到它，然后，数组传递给<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph>构造函数采用<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>，创建一份队列。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Queue`1">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">显示复制的元素。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Queue`1">
          <source>An array twice the size of the queue is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">两次队列的大小将创建一个数组，和<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.CopyTo%2A&gt;</ph>方法用于复制数组元素在数组中间开头的位置。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Queue`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph>再次使用构造函数创建包含三个空元素开头的队列的第二个副本。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Queue`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the queue, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph> property shows that the queue is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Contains%2A&gt;</ph>方法用于显示字符串"four"在队列中，第一个副本<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Clear%2A&gt;</ph>方法清除该副本和<ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph>属性将显示队列为空。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Queue`1">
          <source>Public static (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) members of this type are thread safe.</source>
          <target state="translated">公共静态 (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph>在 Visual Basic 中) 的此类型的成员都是线程安全。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Queue`1">
          <source>Any instance members are not guaranteed to be thread safe.</source>
          <target state="translated">但不保证所有实例成员都是线程安全的。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Queue`1">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> can support multiple readers concurrently, as long as the collection is not modified.</source>
          <target state="translated">A<ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph>同时，可以支持多个读取器，只要不修改该集合。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Queue`1">
          <source>Even so, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">即便如此，枚举整个集合本质上不是一个线程安全的过程。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Queue`1">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Queue`1">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.Queue`1">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> class.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> 类的新实例。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> class that is empty and has the default initial capacity.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> 类的新实例，该实例为空并且具有默认初始容量。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> can hold.</source>
          <target state="translated">容量<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>是元素的数目，<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>可以保存。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">如元素添加到<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>，自动增加容量通过重新分配在内部数组所需的方式。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>.</source>
          <target state="translated">如果可以估计集合的大小，指定的初始容量，则无需执行大量的大小将元素添加到时调整操作<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.TrimExcess%2A&gt;</ph>.</source>
          <target state="translated">可以通过调用减少容量<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.TrimExcess%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">此构造函数是 o （1） 操作。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor">
          <source>The following code example demonstrates this constructor and several other methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> generic class.</source>
          <target state="translated">下面的代码示例演示此构造函数和多个其他方法<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>泛型类。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor">
          <source>The code example creates a queue of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enqueue%2A&gt;</ph> method to queue five strings.</source>
          <target state="translated">此代码示例创建具有默认的容量的字符串的队列，并使用<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enqueue%2A&gt;</ph>方法进行排队五个字符串。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor">
          <source>The elements of the queue are enumerated, which does not change the state of the queue.</source>
          <target state="translated">枚举队列的元素，这不会更改队列的状态。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph> method is used to dequeue the first string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph>方法用于取消排队的第一个字符串。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Peek%2A&gt;</ph> method is used to look at the next item in the queue, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph> method is used to dequeue it.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Peek%2A&gt;</ph>方法用于查看队列中的下一项，然后<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph>方法用于取消它的排队。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.ToArray%2A&gt;</ph> method is used to create an array and copy the queue elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the queue.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.ToArray%2A&gt;</ph>方法用于创建数组并将队列元素复制到它，然后，数组传递给<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph>构造函数采用<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>，创建一份队列。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">显示复制的元素。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor">
          <source>An array twice the size of the queue is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">两次队列的大小将创建一个数组，和<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.CopyTo%2A&gt;</ph>方法用于复制数组元素在数组中间开头的位置。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph>再次使用构造函数创建包含三个空元素开头的队列的第二个副本。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the queue, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph> property shows that the queue is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Contains%2A&gt;</ph>方法用于显示字符串"four"在队列中，第一个副本<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Clear%2A&gt;</ph>方法清除该副本和<ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph>属性将显示队列为空。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The collection whose elements are copied to the new <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph>.</source>
          <target state="translated">其元素被复制到新的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> 中的集合。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> 类的新实例，该实例包含从指定集合复制的元素并且具有足够的容量来容纳所复制的元素。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> can hold.</source>
          <target state="translated">容量<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>是元素的数目，<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>可以保存。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">如元素添加到<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>，自动增加容量通过重新分配在内部数组所需的方式。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>.</source>
          <target state="translated">如果可以估计集合的大小，指定的初始容量，则无需执行大量的大小将元素添加到时调整操作<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.TrimExcess%2A&gt;</ph>.</source>
          <target state="translated">可以通过调用减少容量<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.TrimExcess%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The elements are copied onto the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> in the same order they are read by the <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph> of the collection.</source>
          <target state="translated">将元素复制到<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>以相同的顺序由读取<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph>的集合。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in <ph id="ph3">`collection`</ph>.</source>
          <target state="translated">此构造函数是 O (<ph id="ph1">`n`</ph>) 操作，其中<ph id="ph2">`n`</ph>是中的元素数<ph id="ph3">`collection`</ph>。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The following code example demonstrates this constructor and several other methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> generic class.</source>
          <target state="translated">下面的代码示例演示此构造函数和多个其他方法<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>泛型类。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The code example creates a queue of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enqueue%2A&gt;</ph> method to queue five strings.</source>
          <target state="translated">此代码示例创建具有默认的容量的字符串的队列，并使用<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enqueue%2A&gt;</ph>方法进行排队五个字符串。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The elements of the queue are enumerated, which does not change the state of the queue.</source>
          <target state="translated">枚举队列的元素，这不会更改队列的状态。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph> method is used to dequeue the first string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph>方法用于取消排队的第一个字符串。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Peek%2A&gt;</ph> method is used to look at the next item in the queue, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph> method is used to dequeue it.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Peek%2A&gt;</ph>方法用于查看队列中的下一项，然后<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph>方法用于取消它的排队。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.ToArray%2A&gt;</ph> method is used to create an array and copy the queue elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the queue.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.ToArray%2A&gt;</ph>方法用于创建数组并将队列元素复制到它，然后，数组传递给<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph>构造函数采用<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>，创建一份队列。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">显示复制的元素。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>An array twice the size of the queue is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">两次队列的大小将创建一个数组，和<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.CopyTo%2A&gt;</ph>方法用于复制数组元素在数组中间开头的位置。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph>再次使用构造函数创建包含三个空元素开头的队列的第二个副本。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the queue, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph> property shows that the queue is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Contains%2A&gt;</ph>方法用于显示字符串"four"在队列中，第一个副本<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Clear%2A&gt;</ph>方法清除该副本和<ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph>属性将显示队列为空。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)">
          <source>The initial number of elements that the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> can contain.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> 可包含的初始元素数。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> class that is empty and has the specified initial capacity.</source>
          <target state="translated">初始化 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> 类的新实例，该实例为空并且具有指定的初始容量。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> can hold.</source>
          <target state="translated">容量<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>是元素的数目，<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>可以保存。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">如元素添加到<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>，自动增加容量通过重新分配在内部数组所需的方式。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>.</source>
          <target state="translated">如果可以估计集合的大小，指定的初始容量，则无需执行大量的大小将元素添加到时调整操作<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.TrimExcess%2A&gt;</ph>.</source>
          <target state="translated">可以通过调用减少容量<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.TrimExcess%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`capacity`</ph>.</source>
          <target state="translated">此构造函数是 O (<ph id="ph1">`n`</ph>) 操作，其中<ph id="ph2">`n`</ph>是<ph id="ph3">`capacity`</ph>。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> 小于零。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.Clear">
          <source>Removes all objects from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph>.</source>
          <target state="translated">从 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> 中移除所有对象。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Clear">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph> is set to zero, and references to other objects from elements of the collection are also released.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph> 是设置为零，并且集合的元素对其他对象的引用也被释放。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Clear">
          <source>The capacity remains unchanged.</source>
          <target state="translated">容量保持不变。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Clear">
          <source>To reset the capacity of the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>, call <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.TrimExcess%2A&gt;</ph>.</source>
          <target state="translated">若要重置的容量<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>，调用<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.TrimExcess%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Clear">
          <source>Trimming an empty <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> sets the capacity of the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> to the default capacity.</source>
          <target state="translated">截去空<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>的容量设置<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>到默认的容量。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Clear">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph>.</source>
          <target state="translated">此方法为 O (<ph id="ph1">`n`</ph>) 操作，其中<ph id="ph2">`n`</ph>是<ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Clear">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Clear%2A&gt;</ph> method.</source>
          <target state="translated">下面的代码示例演示的若干方法<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>泛型类，包括<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Clear%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Clear">
          <source>The code example creates a queue of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enqueue%2A&gt;</ph> method to queue five strings.</source>
          <target state="translated">此代码示例创建具有默认的容量的字符串的队列，并使用<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enqueue%2A&gt;</ph>方法进行排队五个字符串。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Clear">
          <source>The elements of the queue are enumerated, which does not change the state of the queue.</source>
          <target state="translated">枚举队列的元素，这不会更改队列的状态。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Clear">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph> method is used to dequeue the first string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph>方法用于取消排队的第一个字符串。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Clear">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Peek%2A&gt;</ph> method is used to look at the next item in the queue, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph> method is used to dequeue it.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Peek%2A&gt;</ph>方法用于查看队列中的下一项，然后<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph>方法用于取消它的排队。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Clear">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.ToArray%2A&gt;</ph> method is used to create an array and copy the queue elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the queue.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.ToArray%2A&gt;</ph>方法用于创建数组并将队列元素复制到它，然后，数组传递给<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph>构造函数采用<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>，创建一份队列。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Clear">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">显示复制的元素。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Clear">
          <source>An array twice the size of the queue is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">两次队列的大小将创建一个数组，和<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.CopyTo%2A&gt;</ph>方法用于复制数组元素在数组中间开头的位置。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Clear">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph>再次使用构造函数创建包含三个空元素开头的队列的第二个副本。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Clear">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the queue, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph> property shows that the queue is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Contains%2A&gt;</ph>方法用于显示字符串"four"在队列中，第一个副本<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Clear%2A&gt;</ph>方法清除该副本和<ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph>属性将显示队列为空。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.Contains(`0)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph>.</source>
          <target state="translated">要在 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> 中定位的对象。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.Contains(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">对于引用类型，该值可以为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.Contains(`0)">
          <source>Determines whether an element is in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph>.</source>
          <target state="translated">确定某元素是否在 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> 中。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.Contains(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="item" /&gt;</ph> is found in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果在 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 中找到 <ph id="ph2">&lt;paramref name="item" /&gt;</ph>，则为 <ph id="ph3">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph>；否则为 <ph id="ph4">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Contains(`0)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the queue.</source>
          <target state="translated">此方法可确定使用的默认相等比较器的相等性<ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>为<ph id="ph2">`T`</ph>，队列中的值的类型。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Contains(`0)">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph>.</source>
          <target state="translated">此方法执行的线性搜索;因此，此方法为 O (<ph id="ph1">`n`</ph>) 操作，其中<ph id="ph2">`n`</ph>是<ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Contains(`0)">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Contains%2A&gt;</ph> method.</source>
          <target state="translated">下面的代码示例演示的若干方法<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>泛型类，包括<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Contains%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Contains(`0)">
          <source>The code example creates a queue of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enqueue%2A&gt;</ph> method to queue five strings.</source>
          <target state="translated">此代码示例创建具有默认的容量的字符串的队列，并使用<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enqueue%2A&gt;</ph>方法进行排队五个字符串。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Contains(`0)">
          <source>The elements of the queue are enumerated, which does not change the state of the queue.</source>
          <target state="translated">枚举队列的元素，这不会更改队列的状态。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Contains(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph> method is used to dequeue the first string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph>方法用于取消排队的第一个字符串。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Contains(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Peek%2A&gt;</ph> method is used to look at the next item in the queue, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph> method is used to dequeue it.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Peek%2A&gt;</ph>方法用于查看队列中的下一项，然后<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph>方法用于取消它的排队。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Contains(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.ToArray%2A&gt;</ph> method is used to create an array and copy the queue elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the queue.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.ToArray%2A&gt;</ph>方法用于创建数组并将队列元素复制到它，然后，数组传递给<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph>构造函数采用<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>，创建一份队列。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Contains(`0)">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">显示复制的元素。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Contains(`0)">
          <source>An array twice the size of the queue is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">两次队列的大小将创建一个数组，和<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.CopyTo%2A&gt;</ph>方法用于复制数组元素在数组中间开头的位置。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Contains(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph>再次使用构造函数创建包含三个空元素开头的队列的第二个副本。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Contains(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the queue, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph> property shows that the queue is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Contains%2A&gt;</ph>方法用于显示字符串"four"在队列中，第一个副本<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Clear%2A&gt;</ph>方法清除该副本和<ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph>属性将显示队列为空。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph>.</source>
          <target state="translated">一维 <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph>，它是从 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> 复制的元素的目标。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> 必须具有从零开始的索引。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> 中从零开始的索引，在此处开始复制。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)">
          <source>Copies the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> elements to an existing one-dimensional <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at the specified array index.</source>
          <target state="translated">从指定数组索引开始将 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> 元素复制到现有一维 <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph> 中。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)">
          <source>The elements are copied to the <ph id="ph1">&lt;xref:System.Array&gt;</ph> in the same order in which the enumerator iterates through the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>.</source>
          <target state="translated">元素被复制到<ph id="ph1">&lt;xref:System.Array&gt;</ph>枚举数循环访问的相同顺序<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph>.</source>
          <target state="translated">此方法为 O (<ph id="ph1">`n`</ph>) 操作，其中<ph id="ph2">`n`</ph>是<ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> 小于零。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">源 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> 中的元素个数大于从 <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> 到目标 <ph id="ph3">&lt;paramref name="array" /&gt;</ph> 末尾之间的可用空间。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Queue`1.Count">
          <source>Gets the number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph>.</source>
          <target state="translated">获取 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> 中包含的元素数。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.Count">
          <source>The number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> 中包含的元素数。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.Count">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> can store.</source>
          <target state="translated">容量<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>是元素的数目，<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>可以存储。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.Count">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph> is the number of elements that are actually in the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph> 是中的实际的元素数目<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.Count">
          <source>The capacity is always greater than or equal to <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph>.</source>
          <target state="translated">容量始终是大于或等于<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.Count">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph> exceeds the capacity while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph>添加元素时超过容量，通过在复制旧元素和添加新的元素之前自动重新分配在内部数组增加容量。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.Count">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">检索此属性的值的运算复杂度为 O(1)。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.Count">
          <source>The following code example demonstrates several properties and methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph> property.</source>
          <target state="translated">下面的代码示例演示了一些属性和方法的<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>泛型类，包括<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.Count">
          <source>The code example creates a queue of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enqueue%2A&gt;</ph> method to queue five strings.</source>
          <target state="translated">此代码示例创建具有默认的容量的字符串的队列，并使用<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enqueue%2A&gt;</ph>方法进行排队五个字符串。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.Count">
          <source>The elements of the queue are enumerated, which does not change the state of the queue.</source>
          <target state="translated">枚举队列的元素，这不会更改队列的状态。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.Count">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph> method is used to dequeue the first string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph>方法用于取消排队的第一个字符串。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.Count">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Peek%2A&gt;</ph> method is used to look at the next item in the queue, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph> method is used to dequeue it.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Peek%2A&gt;</ph>方法用于查看队列中的下一项，然后<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph>方法用于取消它的排队。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.Count">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.ToArray%2A&gt;</ph> method is used to create an array and copy the queue elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the queue.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.ToArray%2A&gt;</ph>方法用于创建数组并将队列元素复制到它，然后，数组传递给<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph>构造函数采用<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>，创建一份队列。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.Count">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">显示复制的元素。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.Count">
          <source>An array twice the size of the queue is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">两次队列的大小将创建一个数组，和<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.CopyTo%2A&gt;</ph>方法用于复制数组元素在数组中间开头的位置。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.Count">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph>再次使用构造函数创建包含三个空元素开头的队列的第二个副本。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.Count">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the queue, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph> property shows that the queue is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Contains%2A&gt;</ph>方法用于显示字符串"four"在队列中，第一个副本<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Clear%2A&gt;</ph>方法清除该副本和<ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph>属性将显示队列为空。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.Dequeue">
          <source>Removes and returns the object at the beginning of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph>.</source>
          <target state="translated">移除并返回位于 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> 开始处的对象。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.Dequeue">
          <source>The object that is removed from the beginning of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph>.</source>
          <target state="translated">从 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> 的开始处移除的对象。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Dequeue">
          <source>This method is similar to the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Peek%2A&gt;</ph> method, but <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Peek%2A&gt;</ph> does not modify the <ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>.</source>
          <target state="translated">此方法类似于 <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Peek%2A&gt;</ph> 方法，但 <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Peek%2A&gt;</ph> 不修改 <ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Dequeue">
          <source>If type <ph id="ph1">`T`</ph> is a reference type, <ph id="ph2">`null`</ph> can be added to the <ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> as a value.</source>
          <target state="translated">如果类型<ph id="ph1">`T`</ph>是引用类型，<ph id="ph2">`null`</ph>可以添加到<ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>作为值。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Dequeue">
          <source>This method is an O(1) operation.</source>
          <target state="translated">此方法为 o （1） 运算。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Dequeue">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph> method.</source>
          <target state="translated">下面的代码示例演示的若干方法<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>泛型类，包括<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Dequeue">
          <source>The code example creates a queue of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enqueue%2A&gt;</ph> method to queue five strings.</source>
          <target state="translated">此代码示例创建具有默认的容量的字符串的队列，并使用<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enqueue%2A&gt;</ph>方法进行排队五个字符串。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Dequeue">
          <source>The elements of the queue are enumerated, which does not change the state of the queue.</source>
          <target state="translated">枚举队列的元素，这不会更改队列的状态。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Dequeue">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph> method is used to dequeue the first string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph>方法用于取消排队的第一个字符串。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Dequeue">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Peek%2A&gt;</ph> method is used to look at the next item in the queue, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph> method is used to dequeue it.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Peek%2A&gt;</ph>方法用于查看队列中的下一项，然后<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph>方法用于取消它的排队。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Dequeue">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.ToArray%2A&gt;</ph> method is used to create an array and copy the queue elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the queue.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.ToArray%2A&gt;</ph>方法用于创建数组并将队列元素复制到它，然后，数组传递给<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph>构造函数采用<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>，创建一份队列。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Dequeue">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">显示复制的元素。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Dequeue">
          <source>An array twice the size of the queue is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">两次队列的大小将创建一个数组，和<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.CopyTo%2A&gt;</ph>方法用于复制数组元素在数组中间开头的位置。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Dequeue">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph>再次使用构造函数创建包含三个空元素开头的队列的第二个副本。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Dequeue">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the queue, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph> property shows that the queue is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Contains%2A&gt;</ph>方法用于显示字符串"four"在队列中，第一个副本<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Clear%2A&gt;</ph>方法清除该副本和<ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph>属性将显示队列为空。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.Dequeue">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> is empty.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> 为空。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
          <source>The object to add to the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph>.</source>
          <target state="translated">要添加到 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> 的对象。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">对于引用类型，该值可以为 <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
          <source>Adds an object to the end of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph>.</source>
          <target state="translated">将对象添加到 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> 的结尾处。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph> already equals the capacity, the capacity of the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph>已经等于容量的容量<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>增加通过自动重新分配在内部数组和现有元素被复制到新数组中，在添加新的元素之前。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph> is less than the capacity of the internal array, this method is an O(1) operation.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph>小于比在内部数组的容量，此方法为 o （1） 运算。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
          <source>If the internal array needs to be reallocated to accommodate the new element, this method becomes an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph>.</source>
          <target state="translated">如果在内部数组需要可重新分配以容纳新元素，此方法会成为 O (<ph id="ph1">`n`</ph>) 操作，其中<ph id="ph2">`n`</ph>是<ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Enqueue%2A&gt;</ph> method.</source>
          <target state="translated">下面的代码示例演示的若干方法<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>泛型类，包括<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Enqueue%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
          <source>The code example creates a queue of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enqueue%2A&gt;</ph> method to queue five strings.</source>
          <target state="translated">此代码示例创建具有默认的容量的字符串的队列，并使用<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enqueue%2A&gt;</ph>方法进行排队五个字符串。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
          <source>The elements of the queue are enumerated, which does not change the state of the queue.</source>
          <target state="translated">枚举队列的元素，这不会更改队列的状态。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph> method is used to dequeue the first string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph>方法用于取消排队的第一个字符串。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Peek%2A&gt;</ph> method is used to look at the next item in the queue, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph> method is used to dequeue it.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Peek%2A&gt;</ph>方法用于查看队列中的下一项，然后<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph>方法用于取消它的排队。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.ToArray%2A&gt;</ph> method is used to create an array and copy the queue elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the queue.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.ToArray%2A&gt;</ph>方法用于创建数组并将队列元素复制到它，然后，数组传递给<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph>构造函数采用<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>，创建一份队列。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">显示复制的元素。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
          <source>An array twice the size of the queue is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">两次队列的大小将创建一个数组，和<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.CopyTo%2A&gt;</ph>方法用于复制数组元素在数组中间开头的位置。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph>再次使用构造函数创建包含三个空元素开头的队列的第二个副本。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the queue, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph> property shows that the queue is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Contains%2A&gt;</ph>方法用于显示字符串"four"在队列中，第一个副本<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Clear%2A&gt;</ph>方法清除该副本和<ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph>属性将显示队列为空。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source>Returns an enumerator that iterates through the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph>.</source>
          <target state="translated">返回循环访问 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> 的枚举数。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1.Enumerator" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1.Enumerator" /&gt;</ph> 的一个 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> C# 语言的语句 (<ph id="ph2">`for each`</ph> c + + 中<ph id="ph3">`For Each`</ph>在 Visual Basic 中) 隐藏了枚举数的复杂性。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">因此，建议使用 <ph id="ph1">`foreach`</ph>，而不是直接操作枚举数。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">最初，枚举数定位在集合中第一个元素的前面。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">在此位置上，未定义 <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">因此，在读取 <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A&gt;</ph> 的值之前，必须调用 <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A&gt;</ph> 将枚举器向前移动到集合的第一个元素。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A&gt;</ph> returns the same object until <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A&gt;</ph> is called.</source>
          <target state="translated">在调用 <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A&gt;</ph> 之前，<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A&gt;</ph> 返回相同的对象。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A&gt;</ph> 将 <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A&gt;</ph> 设置为下一个元素。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A&gt;</ph>越过的末尾的集合，枚举数定位在集合中的最后一个元素的后面和<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A&gt;</ph>返回<ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">当枚举器位于此位置上，后续调用<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A&gt;</ph>还返回<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">如果最后一次调用到<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A&gt;</ph>返回<ph id="ph2">`false`</ph>，<ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A&gt;</ph>是不确定的。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source>You cannot set <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A&gt;</ph> to the first element of the collection again; you must create a new enumerator instance instead.</source>
          <target state="translated">无法再次将 <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A&gt;</ph> 设置为集合的第一个元素；必须改为创建新的枚举器实例。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">只要集合保持不变，枚举数就保持有效。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">如果对集合进行更改，例如添加、 修改或删除元素，则枚举数将失效且不可恢复失效，并且下次调用<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.System%23Collections%23IEnumerator%23Reset%2A&gt;</ph>引发<ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source>If the collection is modified between calling <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A&gt;</ph> method and obtaining the value of the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A&gt;</ph> property, <ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A&gt;</ph> returns the element that it is set to, even if the enumerator is already invalidated.</source>
          <target state="translated">如果调用之间修改集合<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.MoveNext%2A&gt;</ph>方法和获取的值<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A&gt;</ph>属性，<ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Enumerator.Current%2A&gt;</ph>返回到，设置的元素，即使枚举数已经无效。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">集合中的默认实现<ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph>不同步。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">此方法为 o （1） 运算。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source>The following code example demonstrates that the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> generic class is enumerable.</source>
          <target state="translated">下面的代码示例演示<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>泛型类是可枚举。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement (<ph id="ph2">`For Each`</ph> in Visual Basic, <ph id="ph3">`for each`</ph> in C++) is used to enumerate the queue.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph>语句 (<ph id="ph2">`For Each`</ph>在 Visual Basic 中，<ph id="ph3">`for each`</ph>在 c + +) 用于枚举队列。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source>The code example creates a queue of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enqueue%2A&gt;</ph> method to queue five strings.</source>
          <target state="translated">此代码示例创建具有默认的容量的字符串的队列，并使用<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enqueue%2A&gt;</ph>方法进行排队五个字符串。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source>The elements of the queue are enumerated, which does not change the state of the queue.</source>
          <target state="translated">枚举队列的元素，这不会更改队列的状态。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph> method is used to dequeue the first string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph>方法用于取消排队的第一个字符串。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Peek%2A&gt;</ph> method is used to look at the next item in the queue, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph> method is used to dequeue it.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Peek%2A&gt;</ph>方法用于查看队列中的下一项，然后<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph>方法用于取消它的排队。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.ToArray%2A&gt;</ph> method is used to create an array and copy the queue elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the queue.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.ToArray%2A&gt;</ph>方法用于创建数组并将队列元素复制到它，然后，数组传递给<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph>构造函数采用<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>，创建一份队列。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">显示复制的元素。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source>An array twice the size of the queue is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">两次队列的大小将创建一个数组，和<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.CopyTo%2A&gt;</ph>方法用于复制数组元素在数组中间开头的位置。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph>再次使用构造函数创建包含三个空元素开头的队列的第二个副本。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the queue, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph> property shows that the queue is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Contains%2A&gt;</ph>方法用于显示字符串"four"在队列中，第一个副本<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Clear%2A&gt;</ph>方法清除该副本和<ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph>属性将显示队列为空。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.Peek">
          <source>Returns the object at the beginning of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> without removing it.</source>
          <target state="translated">返回位于 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> 开始处的对象但不将其移除。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.Peek">
          <source>The object at the beginning of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph>.</source>
          <target state="translated">位于 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> 的开头的对象。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Peek">
          <source>This method is similar to the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph> method, but <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Peek%2A&gt;</ph> does not modify the <ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>.</source>
          <target state="translated">此方法类似于 <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph> 方法，但 <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Peek%2A&gt;</ph> 不修改 <ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Peek">
          <source>If type <ph id="ph1">`T`</ph> is a reference type, <ph id="ph2">`null`</ph> can be added to the <ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> as a value.</source>
          <target state="translated">如果类型<ph id="ph1">`T`</ph>是引用类型，<ph id="ph2">`null`</ph>可以添加到<ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>作为值。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Peek">
          <source>This method is an O(1) operation.</source>
          <target state="translated">此方法为 o （1） 运算。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Peek">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Peek%2A&gt;</ph> method.</source>
          <target state="translated">下面的代码示例演示的若干方法<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>泛型类，包括<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Peek%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Peek">
          <source>The code example creates a queue of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enqueue%2A&gt;</ph> method to queue five strings.</source>
          <target state="translated">此代码示例创建具有默认的容量的字符串的队列，并使用<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enqueue%2A&gt;</ph>方法进行排队五个字符串。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Peek">
          <source>The elements of the queue are enumerated, which does not change the state of the queue.</source>
          <target state="translated">枚举队列的元素，这不会更改队列的状态。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Peek">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph> method is used to dequeue the first string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph>方法用于取消排队的第一个字符串。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Peek">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Peek%2A&gt;</ph> method is used to look at the next item in the queue, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph> method is used to dequeue it.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Peek%2A&gt;</ph>方法用于查看队列中的下一项，然后<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph>方法用于取消它的排队。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Peek">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.ToArray%2A&gt;</ph> method is used to create an array and copy the queue elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the queue.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.ToArray%2A&gt;</ph>方法用于创建数组并将队列元素复制到它，然后，数组传递给<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph>构造函数采用<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>，创建一份队列。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Peek">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">显示复制的元素。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Peek">
          <source>An array twice the size of the queue is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">两次队列的大小将创建一个数组，和<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.CopyTo%2A&gt;</ph>方法用于复制数组元素在数组中间开头的位置。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Peek">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph>再次使用构造函数创建包含三个空元素开头的队列的第二个副本。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.Peek">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the queue, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph> property shows that the queue is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Contains%2A&gt;</ph>方法用于显示字符串"four"在队列中，第一个副本<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Clear%2A&gt;</ph>方法清除该副本和<ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph>属性将显示队列为空。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.Peek">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> is empty.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> 为空。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Returns an enumerator that iterates through a collection.</source>
          <target state="translated">返回循环访问集合的枚举数。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerator`1" /&gt;</ph> that can be used to iterate through the collection.</source>
          <target state="translated">可用于循环访问集合的 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerator`1" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> C# 语言的语句 (<ph id="ph2">`for each`</ph> c + + 中<ph id="ph3">`For Each`</ph>在 Visual Basic 中) 隐藏了枚举数的复杂性。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">因此，建议使用 <ph id="ph1">`foreach`</ph>，而不是直接操作枚举数。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">最初，枚举数定位在集合中第一个元素的前面。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">在此位置上，未定义 <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>.</source>
          <target state="translated">因此，在读取 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 的值之前，必须调用 <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> 将枚举器向前移动到集合的第一个元素。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> returns the same object until <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> is called.</source>
          <target state="translated">在调用 <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> 之前，<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 返回相同的对象。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 将 <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> 设置为下一个元素。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>越过的末尾的集合，枚举数定位在集合中的最后一个元素的后面和<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返回<ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">当枚举器位于此位置上，后续调用<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>还返回<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">如果最后一次调用到<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返回<ph id="ph2">`false`</ph>，<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>是不确定的。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>You cannot set <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the first element of the collection again; you must create a new enumerator instance instead.</source>
          <target state="translated">无法再次将 <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> 设置为集合的第一个元素；必须改为创建新的枚举器实例。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">只要集合保持不变，枚举数就保持有效。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">如果对集合进行更改，例如添加、 修改或删除元素，则枚举数将失效且不可恢复失效，并且下次调用<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>引发<ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If the collection is modified between calling <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method and obtaining the value of the <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> property, <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> returns the element that it is set to, even if the enumerator is already invalidated.</source>
          <target state="translated">如果调用之间修改集合<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>方法和获取的值<ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>属性，<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>返回到，设置的元素，即使枚举数已经无效。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">集合中的默认实现<ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph>不同步。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">此方法为 o （1） 运算。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated">一维 <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph>，它是从 <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> 复制的元素的目标。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> 必须具有从零开始的索引。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> 中从零开始的索引，在此处开始复制。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>Copies the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at a particular <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph> index.</source>
          <target state="translated">从特定的 <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> 索引处开始，将 <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph> 的元素复制到一个 <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph> 中。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>If the type of the source <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">`array`</ph>, the non-generic implementations of <ph id="ph3">&lt;xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType&gt;</ph> throw <ph id="ph4">&lt;xref:System.InvalidCastException&gt;</ph>, whereas the generic implementations throw <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">如果源类型<ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph>无法自动转换为目标的类型<ph id="ph2">`array`</ph>的非泛型实现<ph id="ph3">&lt;xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType&gt;</ph>引发<ph id="ph4">&lt;xref:System.InvalidCastException&gt;</ph>，而泛型实现将引发<ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph>.</source>
          <target state="translated">此方法为 O (<ph id="ph1">`n`</ph>) 操作，其中<ph id="ph2">`n`</ph>是<ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> 小于零。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> 是多维的。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> does not have zero-based indexing.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="array" /&gt;</ph> 没有从零开始的索引。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="index" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">源 <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> 中的元素个数大于从 <ph id="ph2">&lt;paramref name="index" /&gt;</ph> 到目标 <ph id="ph3">&lt;paramref name="array" /&gt;</ph> 末尾之间的可用空间。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">或</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The type of the source <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">无法自动将源 <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> 的类型转换为目标 <ph id="ph2">&lt;paramref name="array" /&gt;</ph> 的类型。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized">
          <source>Gets a value indicating whether access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized (thread safe).</source>
          <target state="translated">获取一个值，该值指示是否同步对 <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> 的访问（线程安全）。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access to the <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized (thread safe); otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果对 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 的访问是同步的（线程安全），则为 <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">在 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> 的默认实现中，此属性始终返回 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">集合中的默认实现<ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph>不同步。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">枚举整个集合本质上不是一个线程安全的过程。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized">
          <source><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> returns an object, which can be used to synchronize access to the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> 返回一个对象，该对象可用于同步对 <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph> 的访问。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized">
          <source>Synchronization is effective only if all threads lock this object before accessing the collection.</source>
          <target state="translated">同步是仅当所有线程在访问该集合之前都锁定此对象有效。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">检索此属性的值的运算复杂度为 O(1)。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot">
          <source>Gets an object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated">获取可用于同步对 <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> 的访问的对象。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot">
          <source>An object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated">可用于同步对 <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> 的访问的对象。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph>, this property always returns the current instance.</source>
          <target state="translated">在 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> 的默认实现中，此属性始终返回当前实例。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">集合中的默认实现<ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph>不同步。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">枚举整个集合本质上不是一个线程安全的过程。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot">
          <source><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> returns an object, which can be used to synchronize access to the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> 返回一个对象，该对象可用于同步对 <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph> 的访问。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot">
          <source>Synchronization is effective only if all threads lock this object before accessing the collection.</source>
          <target state="translated">同步是仅当所有线程在访问该集合之前都锁定此对象有效。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property for C#, C++, and Visual Basic.</source>
          <target state="translated">下面的代码演示如何使用<ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph>C#、 c + + 和 Visual Basic 的属性。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">检索此属性的值的运算复杂度为 O(1)。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator that iterates through a collection.</source>
          <target state="translated">返回循环访问集合的枚举数。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> that can be used to iterate through the collection.</source>
          <target state="translated">可用于循环访问集合的 <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> C# 语言的语句 (<ph id="ph2">`for each`</ph> c + + 中<ph id="ph3">`For Each`</ph>在 Visual Basic 中) 隐藏了枚举数的复杂性。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">因此，建议使用 <ph id="ph1">`foreach`</ph>，而不是直接操作枚举数。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">最初，枚举数定位在集合中第一个元素的前面。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> 也会将枚举器放回此位置。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">在此位置上，未定义 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">因此，在读取 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 的值之前，必须调用 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 将枚举器向前移动到集合的第一个元素。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated">在调用 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 或 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 之前，<ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> 返回同一对象。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> 将 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 设置为下一个元素。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">如果<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>越过的末尾的集合，枚举数定位在集合中的最后一个元素的后面和<ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返回<ph id="ph3">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">当枚举器位于此位置上，后续调用<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>还返回<ph id="ph2">`false`</ph>。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">如果最后一次调用到<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>返回<ph id="ph2">`false`</ph>，<ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>是不确定的。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated">若要再次将 <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> 设置为集合的第一个元素，可以调用 <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> 并接着调用 <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">只要集合保持不变，枚举数就保持有效。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> throws an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>.</source>
          <target state="translated">如果对集合进行更改，例如添加、 修改或删除元素，则枚举数将失效且不可恢复失效，并且下次调用<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>或<ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>引发<ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If the collection is modified between calling <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> method and obtaining the value of the <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> property, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the element that it is set to, even if the enumerator is already invalidated.</source>
          <target state="translated">如果调用之间修改集合<ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>方法和获取的值<ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>属性，<ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>返回到，设置的元素，即使枚举数已经无效。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">集合中的默认实现<ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph>不同步。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">此方法为 o （1） 运算。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.ToArray">
          <source>Copies the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> elements to a new array.</source>
          <target state="translated">将 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> 元素复制到新数组。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.ToArray">
          <source>A new array containing elements copied from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph>.</source>
          <target state="translated">包含从 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> 复制的元素的新数组。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.ToArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> is not modified.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>则不会修改。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.ToArray">
          <source>The order of the elements in the new array is the same as the order of the elements from the beginning of the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> to its end.</source>
          <target state="translated">新数组中元素的顺序是从开始处的元素的顺序相同<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>到其末尾。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.ToArray">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph>.</source>
          <target state="translated">此方法为 O (<ph id="ph1">`n`</ph>) 操作，其中<ph id="ph2">`n`</ph>是<ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.ToArray">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.ToArray%2A&gt;</ph> method.</source>
          <target state="translated">下面的代码示例演示的若干方法<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>泛型类，包括<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.ToArray%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.ToArray">
          <source>The code example creates a queue of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enqueue%2A&gt;</ph> method to queue five strings.</source>
          <target state="translated">此代码示例创建具有默认的容量的字符串的队列，并使用<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Enqueue%2A&gt;</ph>方法进行排队五个字符串。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.ToArray">
          <source>The elements of the queue are enumerated, which does not change the state of the queue.</source>
          <target state="translated">枚举队列的元素，这不会更改队列的状态。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.ToArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph> method is used to dequeue the first string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph>方法用于取消排队的第一个字符串。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.ToArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Peek%2A&gt;</ph> method is used to look at the next item in the queue, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph> method is used to dequeue it.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Peek%2A&gt;</ph>方法用于查看队列中的下一项，然后<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Dequeue%2A&gt;</ph>方法用于取消它的排队。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.ToArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.ToArray%2A&gt;</ph> method is used to create an array and copy the queue elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the queue.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.ToArray%2A&gt;</ph>方法用于创建数组并将队列元素复制到它，然后，数组传递给<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph>构造函数采用<ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>，创建一份队列。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.ToArray">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">显示复制的元素。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.ToArray">
          <source>An array twice the size of the queue is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">两次队列的大小将创建一个数组，和<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.CopyTo%2A&gt;</ph>方法用于复制数组元素在数组中间开头的位置。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.ToArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph> constructor is used again to create a second copy of the queue containing three null elements at the beginning.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.%23ctor%2A&gt;</ph>再次使用构造函数创建包含三个空元素开头的队列的第二个副本。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.ToArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the queue, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph> property shows that the queue is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601.Contains%2A&gt;</ph>方法用于显示字符串"four"在队列中，第一个副本<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Clear%2A&gt;</ph>方法清除该副本和<ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph>属性将显示队列为空。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Queue`1.TrimExcess">
          <source>Sets the capacity to the actual number of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph>, if that number is less than 90 percent of current capacity.</source>
          <target state="translated">如果元素数小于当前容量的 90%，将容量设置为 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Queue`1" /&gt;</ph> 中的实际元素数。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.TrimExcess">
          <source>This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</source>
          <target state="translated">此方法可以用于降低集合的内存开销，如果没有新的元素将添加到集合。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.TrimExcess">
          <source>The cost of reallocating and copying a large <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> can be considerable, however, so the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.TrimExcess%2A&gt;</ph> method does nothing if the list is at more than 90 percent of capacity.</source>
          <target state="translated">重新分配和复制较大的成本<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>但是，可能很大，因此<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.TrimExcess%2A&gt;</ph>方法不执行任何操作如果列表为在多个容量的 90%。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.TrimExcess">
          <source>This avoids incurring a large reallocation cost for a relatively small gain.</source>
          <target state="translated">这样可以避免产生的相对较小有所提高大型重新分配费用。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.TrimExcess">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph>.</source>
          <target state="translated">此方法为 O (<ph id="ph1">`n`</ph>) 操作，其中<ph id="ph2">`n`</ph>是<ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.Count%2A&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.TrimExcess">
          <source>To reset a <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> to its initial state, call the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Clear%2A&gt;</ph> method before calling <ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.TrimExcess%2A&gt;</ph> method.</source>
          <target state="translated">若要重置<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>为其初始状态，请在调用<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601.Clear%2A&gt;</ph>方法之前调用<ph id="ph3">&lt;xref:System.Collections.Generic.Queue%601.TrimExcess%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Queue`1.TrimExcess">
          <source>Trimming an empty <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> sets the capacity of the <ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> to the default capacity.</source>
          <target state="translated">截去空<ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>的容量设置<ph id="ph2">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph>到默认的容量。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>