<Type Name="SortedList&lt;TKey,TValue&gt;" FullName="System.Collections.Generic.SortedList&lt;TKey,TValue&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="403e1581d05b4ddb4b7c0072b082b36f206baf9a" />
    <Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="11/09/2018" />
    <Meta Name="ms.locfileid" Value="51324998" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SortedList&lt;TKey,TValue&gt; : System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;, System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;, System.Collections.Generic.IReadOnlyCollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;, System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;, System.Collections.IDictionary" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit SortedList`2&lt;TKey, TValue&gt; extends System.Object implements class System.Collections.Generic.ICollection`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.Generic.IDictionary`2&lt;!TKey, !TValue&gt;, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.Generic.IReadOnlyDictionary`2&lt;!TKey, !TValue&gt;, class System.Collections.ICollection, class System.Collections.IDictionary, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Generic.SortedList`2" />
  <TypeSignature Language="VB.NET" Value="Public Class SortedList(Of TKey, TValue)&#xA;Implements ICollection(Of KeyValuePair(Of TKey, TValue)), IDictionary, IDictionary(Of TKey, TValue), IEnumerable(Of KeyValuePair(Of TKey, TValue)), IReadOnlyCollection(Of KeyValuePair(Of TKey, TValue)), IReadOnlyDictionary(Of TKey, TValue)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TKey, typename TValue&gt;&#xA;public ref class SortedList : System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;, System::Collections::Generic::IDictionary&lt;TKey, TValue&gt;, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;, System::Collections::Generic::IReadOnlyCollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;, System::Collections::Generic::IReadOnlyDictionary&lt;TKey, TValue&gt;, System::Collections::IDictionary" />
  <TypeSignature Language="F#" Value="type SortedList&lt;'Key, 'Value&gt; = class&#xA;    interface IDictionary&lt;'Key, 'Value&gt;&#xA;    interface IDictionary&#xA;    interface IReadOnlyDictionary&lt;'Key, 'Value&gt;&#xA;    interface ICollection&lt;KeyValuePair&lt;'Key, 'Value&gt;&gt;&#xA;    interface seq&lt;KeyValuePair&lt;'Key, 'Value&gt;&gt;&#xA;    interface IEnumerable&#xA;    interface ICollection&#xA;    interface IReadOnlyCollection&lt;KeyValuePair&lt;'Key, 'Value&gt;&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IDictionary</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.System_DictionaryDebugView`2))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TKey">
      <span data-ttu-id="7e0e1-101">集合中的键的类型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="7e0e1-101">The type of keys in the collection.</span>
      </span>
    </typeparam>
    <typeparam name="TValue">
      <span data-ttu-id="7e0e1-102">集合中值的类型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="7e0e1-102">The type of values in the collection.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="7e0e1-103">表示基于相关的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现按键进行排序的键/值对的集合。</span>
      <span class="sxs-lookup">
        <span data-stu-id="7e0e1-103">Represents a collection of key/value pairs that are sorted by key based on the associated <see cref="T:System.Collections.Generic.IComparer`1" /> implementation.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-104"><xref:System.Collections.Generic.SortedList%602>泛型类是一个数组的键/值对，O (log `n`) 检索，其中 n 是字典中的元素数。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-104">The <xref:System.Collections.Generic.SortedList%602> generic class is an array of key/value pairs with O(log `n`) retrieval, where n is the number of elements in the dictionary.</span></span> <span data-ttu-id="7e0e1-105">在此，它是类似于<xref:System.Collections.Generic.SortedDictionary%602>泛型类。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-105">In this, it is similar to the <xref:System.Collections.Generic.SortedDictionary%602> generic class.</span></span> <span data-ttu-id="7e0e1-106">两个类具有相似的对象模型，并且都具有 O (log `n`) 检索。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-106">The two classes have similar object models, and both have O(log `n`) retrieval.</span></span> <span data-ttu-id="7e0e1-107">两个类的不同之处是在内存使用和插入和删除的速度：</span><span class="sxs-lookup"><span data-stu-id="7e0e1-107">Where the two classes differ is in memory use and speed of insertion and removal:</span></span>  
  
-   <span data-ttu-id="7e0e1-108"><xref:System.Collections.Generic.SortedList%602> 使用更少的内存比<xref:System.Collections.Generic.SortedDictionary%602>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-108"><xref:System.Collections.Generic.SortedList%602> uses less memory than <xref:System.Collections.Generic.SortedDictionary%602>.</span></span>  
  
-   <span data-ttu-id="7e0e1-109"><xref:System.Collections.Generic.SortedDictionary%602> 具有更快的插入和删除操作的未排序的数据，O (log `n`) 而不是 O (`n`) 的<xref:System.Collections.Generic.SortedList%602>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-109"><xref:System.Collections.Generic.SortedDictionary%602> has faster insertion and removal operations for unsorted data, O(log `n`) as opposed to O(`n`) for <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
-   <span data-ttu-id="7e0e1-110">如果从已排序的数据，同时填充列表<xref:System.Collections.Generic.SortedList%602>快于<xref:System.Collections.Generic.SortedDictionary%602>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-110">If the list is populated all at once from sorted data, <xref:System.Collections.Generic.SortedList%602> is faster than <xref:System.Collections.Generic.SortedDictionary%602>.</span></span>  
  
 <span data-ttu-id="7e0e1-111">另一个区别<xref:System.Collections.Generic.SortedDictionary%602>并<xref:System.Collections.Generic.SortedList%602>类是<xref:System.Collections.Generic.SortedList%602>支持高效的键和值通过返回的集合的索引的检索<xref:System.Collections.Generic.SortedList%602.Keys%2A>和<xref:System.Collections.Generic.SortedList%602.Values%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-111">Another difference between the <xref:System.Collections.Generic.SortedDictionary%602> and <xref:System.Collections.Generic.SortedList%602> classes is that <xref:System.Collections.Generic.SortedList%602> supports efficient indexed retrieval of keys and values through the collections returned by the <xref:System.Collections.Generic.SortedList%602.Keys%2A> and <xref:System.Collections.Generic.SortedList%602.Values%2A> properties.</span></span> <span data-ttu-id="7e0e1-112">不需要时重新生成这些列表访问的属性，因为列表是内部数组的键和值只是包装器。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-112">It is not necessary to regenerate the lists when the properties are accessed, because the lists are just wrappers for the internal arrays of keys and values.</span></span> <span data-ttu-id="7e0e1-113">下面的代码演示如何使用<xref:System.Collections.Generic.SortedList%602.Values%2A>属性执行索引检索的字符串的排序列表中的值：</span><span class="sxs-lookup"><span data-stu-id="7e0e1-113">The following code shows the use of the <xref:System.Collections.Generic.SortedList%602.Values%2A> property for indexed retrieval of values from a sorted list of strings:</span></span>  
  
 [!code-cpp[Generic.SortedList#11](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/remarks.cpp#11)]
 [!code-csharp[Generic.SortedList#11](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/remarks.cs#11)]
 [!code-vb[Generic.SortedList#11](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/remarks.vb#11)]  
  
 <span data-ttu-id="7e0e1-114"><xref:System.Collections.Generic.SortedList%602> 实现为键/值对，排序键的数组。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-114"><xref:System.Collections.Generic.SortedList%602> is implemented as an array of key/value pairs, sorted by the key.</span></span>  <span data-ttu-id="7e0e1-115">每个元素都可以作为<xref:System.Collections.Generic.KeyValuePair%602>对象。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-115">Each element can be retrieved as a <xref:System.Collections.Generic.KeyValuePair%602> object.</span></span>  
  
 <span data-ttu-id="7e0e1-116">密钥对象必须是固定不变，只要它们被用作键在<xref:System.Collections.Generic.SortedList%602>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-116">Key objects must be immutable as long as they are used as keys in the <xref:System.Collections.Generic.SortedList%602>.</span></span> <span data-ttu-id="7e0e1-117">中的所有密钥<xref:System.Collections.Generic.SortedList%602>必须是唯一的。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-117">Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique.</span></span> <span data-ttu-id="7e0e1-118">密钥不能`null`，但值则可以为，如果在列表中，值的类型`TValue`，是引用类型。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-118">A key cannot be `null`, but a value can be, if the type of values in the list, `TValue`, is a reference type.</span></span>  
  
 <span data-ttu-id="7e0e1-119"><xref:System.Collections.Generic.SortedList%602> 需要进行排序并执行比较的比较器实现。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-119"><xref:System.Collections.Generic.SortedList%602> requires a comparer implementation to sort and to perform comparisons.</span></span>  <span data-ttu-id="7e0e1-120">默认比较器<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>检查是否键类型`TKey`实现<xref:System.IComparable%601?displayProperty=nameWithType>并使用该实现，如果可用。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-120">The default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the key type `TKey` implements <xref:System.IComparable%601?displayProperty=nameWithType> and uses that implementation, if available.</span></span>  <span data-ttu-id="7e0e1-121">如果不是，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>检查是否键类型`TKey`实现<xref:System.IComparable?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-121">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the key type `TKey` implements <xref:System.IComparable?displayProperty=nameWithType>.</span></span>  <span data-ttu-id="7e0e1-122">如果该密钥键入`TKey`未实现任何一个接口，可以指定<xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType>中接受的构造函数重载的实现`comparer`参数。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-122">If the key type `TKey` does not implement either interface, you can specify a <xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType> implementation in a constructor overload that accepts a `comparer` parameter.</span></span>  
  
 <span data-ttu-id="7e0e1-123">容量<xref:System.Collections.Generic.SortedList%602>是元素数目<xref:System.Collections.Generic.SortedList%602>可以容纳。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-123">The capacity of a <xref:System.Collections.Generic.SortedList%602> is the number of elements the <xref:System.Collections.Generic.SortedList%602> can hold.</span></span> <span data-ttu-id="7e0e1-124">元素添加到<xref:System.Collections.Generic.SortedList%602>，自动增加容量所要求的重新分配内部数组。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-124">As elements are added to a <xref:System.Collections.Generic.SortedList%602>, the capacity is automatically increased as required by reallocating the internal array.</span></span> <span data-ttu-id="7e0e1-125">可以通过调用减少容量<xref:System.Collections.Generic.SortedList%602.TrimExcess%2A>或通过设置<xref:System.Collections.Generic.SortedList%602.Capacity%2A>属性显式。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-125">The capacity can be decreased by calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or by setting the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property explicitly.</span></span> <span data-ttu-id="7e0e1-126">减少容量重新分配内存并将中的所有元素都复制<xref:System.Collections.Generic.SortedList%602>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-126">Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="7e0e1-127">对于非常大<xref:System.Collections.Generic.SortedList%602>对象，可以通过设置增加到 20 亿元素在 64 位系统上的最大容量`enabled`到的配置元素的特性`true`在运行时环境中。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-127">For very large <xref:System.Collections.Generic.SortedList%602> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the  configuration element to `true` in the run-time environment.</span></span>  
  
 <span data-ttu-id="7e0e1-128">`foreach` C# 语言的语句 (`for each` c + + 中`For Each`在 Visual Basic 中) 返回集合中的元素的类型的对象。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-128">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) returns an object of the type of the elements in the collection.</span></span> <span data-ttu-id="7e0e1-129">由于中的元素<xref:System.Collections.Generic.SortedList%602>是键/值对的元素类型不是键的类型或值的类型。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-129">Since the elements of the <xref:System.Collections.Generic.SortedList%602> are key/value pairs, the element type is not the type of the key or the type of the value.</span></span> <span data-ttu-id="7e0e1-130">相反，元素类型是<xref:System.Collections.Generic.KeyValuePair%602>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-130">Instead, the element type is <xref:System.Collections.Generic.KeyValuePair%602>.</span></span> <span data-ttu-id="7e0e1-131">例如:</span><span class="sxs-lookup"><span data-stu-id="7e0e1-131">For example:</span></span>  
  
 [!code-cpp[Generic.SortedList#12](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/remarks.cpp#12)]
 [!code-csharp[Generic.SortedList#12](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/remarks.cs#12)]
 [!code-vb[Generic.SortedList#12](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/remarks.vb#12)]  
  
 <span data-ttu-id="7e0e1-132">`foreach`语句是只允许读取、 不写入集合的枚举器周围的包装。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-132">The `foreach` statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e0e1-133">下面的代码示例创建一个空<xref:System.Collections.Generic.SortedList%602>的字符串与字符串键，并使用<xref:System.Collections.Generic.SortedList%602.Add%2A>方法来添加一些元素。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-133">The following code example creates an empty <xref:System.Collections.Generic.SortedList%602> of strings with string keys and uses the <xref:System.Collections.Generic.SortedList%602.Add%2A> method to add some elements.</span></span> <span data-ttu-id="7e0e1-134">该示例演示<xref:System.Collections.Generic.SortedList%602.Add%2A>方法会抛出<xref:System.ArgumentException>时尝试添加重复的键。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-134">The example demonstrates that the <xref:System.Collections.Generic.SortedList%602.Add%2A> method throws an <xref:System.ArgumentException> when attempting to add a duplicate key.</span></span>  
  
 <span data-ttu-id="7e0e1-135">该示例使用<xref:System.Collections.Generic.SortedList%602.Item%2A>属性 （C# 中的索引器） 来检索值，从而演示<xref:System.Collections.Generic.KeyNotFoundException>请求的键不存在，以及可以替换与某个键相关联的值时引发。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-135">The example uses the <xref:System.Collections.Generic.SortedList%602.Item%2A> property (the indexer in C#) to retrieve values, demonstrating that a <xref:System.Collections.Generic.KeyNotFoundException> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.</span></span>  
  
 <span data-ttu-id="7e0e1-136">该示例演示如何使用<xref:System.Collections.Generic.SortedList%602.TryGetValue%2A>方法作为更高效的方法来检索值，如果程序必须经常尝试在已排序的列表中，不并显示如何使用<xref:System.Collections.Generic.SortedList%602.ContainsKey%2A>方法来测试某个键是否存在之前调用<xref:System.Collections.Generic.SortedList%602.Add%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-136">The example shows how to use the <xref:System.Collections.Generic.SortedList%602.TryGetValue%2A> method as a more efficient way to retrieve values if a program often must try key values that are not in the sorted list, and it shows how to use the <xref:System.Collections.Generic.SortedList%602.ContainsKey%2A> method to test whether a key exists before calling the <xref:System.Collections.Generic.SortedList%602.Add%2A> method.</span></span>  
  
 <span data-ttu-id="7e0e1-137">该示例演示如何枚举的键和值在已排序的列表以及如何枚举密钥，并单独使用值<xref:System.Collections.Generic.SortedList%602.Keys%2A>属性和<xref:System.Collections.Generic.SortedList%602.Values%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-137">The example shows how to enumerate the keys and values in the sorted list and how to enumerate the keys and values alone using the <xref:System.Collections.Generic.SortedList%602.Keys%2A> property and the <xref:System.Collections.Generic.SortedList%602.Values%2A> property.</span></span>  
  
 <span data-ttu-id="7e0e1-138">最后，该示例演示<xref:System.Collections.Generic.SortedList%602.Remove%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-138">Finally, the example demonstrates the <xref:System.Collections.Generic.SortedList%602.Remove%2A> method.</span></span>  
  
 [!code-cpp[Generic.SortedList#1](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#1)]
 [!code-csharp[Generic.SortedList#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#1)]
 [!code-vb[Generic.SortedList#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="7e0e1-139">公共静态 (<see langword="Shared" />在 Visual Basic 中) 的此类型的成员是线程安全。</span>
      <span class="sxs-lookup">
        <span data-stu-id="7e0e1-139">Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</span>
      </span>
      <span data-ttu-id="7e0e1-140">但不保证所有实例成员都是线程安全的。</span>
      <span class="sxs-lookup">
        <span data-stu-id="7e0e1-140">Any instance members are not guaranteed to be thread safe.</span>
      </span>
      <span data-ttu-id="7e0e1-141">一个<see cref="T:System.Collections.Generic.SortedList`2" />，只要不修改该集合可以同时支持多个读取器。</span>
      <span class="sxs-lookup">
        <span data-stu-id="7e0e1-141">A <see cref="T:System.Collections.Generic.SortedList`2" /> can support multiple readers concurrently, as long as the collection is not modified.</span>
      </span>
      <span data-ttu-id="7e0e1-142">即便如此，枚举整个集合本质上不是线程安全的过程。</span>
      <span class="sxs-lookup">
        <span data-stu-id="7e0e1-142">Even so, enumerating through a collection is intrinsically not a thread-safe procedure.</span>
      </span>
      <span data-ttu-id="7e0e1-143">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span>
      <span class="sxs-lookup">
        <span data-stu-id="7e0e1-143">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span>
      </span>
      <span data-ttu-id="7e0e1-144">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span>
      <span class="sxs-lookup">
        <span data-stu-id="7e0e1-144">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span>
      </span>
    </threadsafe>
    <altmember cref="T:System.Collections.Generic.IDictionary`2" />
    <altmember cref="T:System.Collections.Generic.Dictionary`2" />
    <altmember cref="T:System.Collections.Generic.SortedDictionary`2" />
    <altmember cref="T:System.Collections.Generic.KeyValuePair`2" />
    <altmember cref="T:System.Collections.Generic.IComparer`1" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7e0e1-145">初始化 <see cref="T:System.Collections.Generic.SortedList`2" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-145">Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7e0e1-146">初始化 <see cref="T:System.Collections.Generic.SortedList`2" /> 类的新实例，该示例为空且具有默认的初始容量，并使用默认的 <see cref="T:System.Collections.Generic.IComparer`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-146">Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2" /> class that is empty, has the default initial capacity, and uses the default <see cref="T:System.Collections.Generic.IComparer`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-147">中的所有密钥<xref:System.Collections.Generic.SortedList%602>必须是唯一的默认比较器。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-147">Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the default comparer.</span></span>  
  
 <span data-ttu-id="7e0e1-148">此构造函数使用的默认值的初始容量<xref:System.Collections.Generic.SortedList%602>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-148">This constructor uses the default value for the initial capacity of the <xref:System.Collections.Generic.SortedList%602>.</span></span> <span data-ttu-id="7e0e1-149">若要设置的初始容量，请使用<xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-149">To set the initial capacity, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%29> constructor.</span></span> <span data-ttu-id="7e0e1-150">如果可以估计的集合的最终大小，指定的初始容量，则无需要执行多个大小调整操作，同时将元素添加到<xref:System.Collections.Generic.SortedList%602>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-150">If the final size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="7e0e1-151">此构造函数使用的默认比较器`TKey`。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-151">This constructor uses the default comparer for `TKey`.</span></span> <span data-ttu-id="7e0e1-152">若要指定比较器，请使用<xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IComparer%7B%600%7D%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-152">To specify a comparer, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IComparer%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="7e0e1-153">默认比较器<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>检查是否键类型`TKey`实现<xref:System.IComparable%601?displayProperty=nameWithType>并使用该实现，如果可用。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-153">The default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the key type `TKey` implements <xref:System.IComparable%601?displayProperty=nameWithType> and uses that implementation, if available.</span></span>  <span data-ttu-id="7e0e1-154">如果不是，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>检查是否键类型`TKey`实现<xref:System.IComparable?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-154">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the key type `TKey` implements <xref:System.IComparable?displayProperty=nameWithType>.</span></span>  <span data-ttu-id="7e0e1-155">如果该密钥键入`TKey`未实现任何一个接口，可以指定<xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType>中接受的构造函数重载的实现`comparer`参数。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-155">If the key type `TKey` does not implement either interface, you can specify a <xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType> implementation in a constructor overload that accepts a `comparer` parameter.</span></span>  
  
 <span data-ttu-id="7e0e1-156">此构造函数是 o （1） 操作。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-156">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e0e1-157">下面的代码示例创建一个空<xref:System.Collections.Generic.SortedList%602>的字符串与字符串键，并使用<xref:System.Collections.Generic.SortedList%602.Add%2A>方法来添加一些元素。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-157">The following code example creates an empty <xref:System.Collections.Generic.SortedList%602> of strings with string keys and uses the <xref:System.Collections.Generic.SortedList%602.Add%2A> method to add some elements.</span></span> <span data-ttu-id="7e0e1-158">该示例演示<xref:System.Collections.Generic.SortedList%602.Add%2A>方法会抛出<xref:System.ArgumentException>时尝试添加重复的键。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-158">The example demonstrates that the <xref:System.Collections.Generic.SortedList%602.Add%2A> method throws an <xref:System.ArgumentException> when attempting to add a duplicate key.</span></span>  
  
 <span data-ttu-id="7e0e1-159">此代码示例是为提供一个更大示例的一部分<xref:System.Collections.Generic.SortedList%602>类。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-159">This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedList%602> class.</span></span>  
  
 [!code-cpp[Generic.SortedList#2](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#2)]
 [!code-csharp[Generic.SortedList#2](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#2)]
 [!code-vb[Generic.SortedList#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Generic.Comparer`1.Default" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IComparer`1&lt;!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (comparer As IComparer(Of TKey))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.SortedList&lt;'Key, 'Value&gt; : System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Collections.Generic.SortedList&lt;'Key, 'Value&gt;" Usage="new System.Collections.Generic.SortedList&lt;'Key, 'Value&gt; comparer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer">
          <span data-ttu-id="7e0e1-160">在对键进行比较时使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-160">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing keys.</span>
          </span>
          <span data-ttu-id="7e0e1-161">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-161">-or-</span>
          </span>
          <span data-ttu-id="7e0e1-162">为 <see langword="null" />，则为这类键使用默认的 <see cref="T:System.Collections.Generic.Comparer`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-162">
              <see langword="null" /> to use the default <see cref="T:System.Collections.Generic.Comparer`1" /> for the type of the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e0e1-163">初始化 <see cref="T:System.Collections.Generic.SortedList`2" /> 类的新实例，该实例为空，具有默认的初始容量并使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-163">Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2" /> class that is empty, has the default initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IComparer`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-164">中的所有密钥<xref:System.Collections.Generic.SortedList%602>必须是唯一根据指定的比较器。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-164">Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the specified comparer.</span></span>  
  
 <span data-ttu-id="7e0e1-165">此构造函数使用的默认值的初始容量<xref:System.Collections.Generic.SortedList%602>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-165">This constructor uses the default value for the initial capacity of the <xref:System.Collections.Generic.SortedList%602>.</span></span> <span data-ttu-id="7e0e1-166">若要设置的初始容量，请使用<xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-166">To set the initial capacity, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="7e0e1-167">如果可以估计的集合的最终大小，指定的初始容量，则无需要执行多个大小调整操作，同时将元素添加到<xref:System.Collections.Generic.SortedList%602>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-167">If the final size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="7e0e1-168">此构造函数是 o （1） 操作。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-168">This constructor is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e0e1-169">下面的代码示例使用当前区域性的不区分大小写的比较器创建的已排序的列表。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-169">The following code example creates a sorted list with a case-insensitive comparer for the current culture.</span></span> <span data-ttu-id="7e0e1-170">该示例添加四个元素、 一些与小写的密钥和一些使用大写密钥。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-170">The example adds four elements, some with lower-case keys and some with upper-case keys.</span></span> <span data-ttu-id="7e0e1-171">然后，此示例尝试将元素添加只是大小写，不同于现有密钥的密钥捕获产生的异常，并显示一条错误消息。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-171">The example then attempts to add an element with a key that differs from an existing key only by case, catches the resulting exception, and displays an error message.</span></span> <span data-ttu-id="7e0e1-172">最后，该示例显示不区分大小写的排序顺序中的元素。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-172">Finally, the example displays the elements in case-insensitive sort order.</span></span>  
  
 [!code-csharp[Generic.SortedList.ctor_IComp#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.ctor_IComp/CS/source.cs#1)]
 [!code-vb[Generic.SortedList.ctor_IComp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.ctor_IComp/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IComparer`1" />
        <altmember cref="P:System.Collections.Generic.Comparer`1.Default" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (System.Collections.Generic.IDictionary&lt;TKey,TValue&gt; dictionary);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IDictionary`2&lt;!TKey, !TValue&gt; dictionary) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dictionary As IDictionary(Of TKey, TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(System::Collections::Generic::IDictionary&lt;TKey, TValue&gt; ^ dictionary);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.SortedList&lt;'Key, 'Value&gt; : System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt; -&gt; System.Collections.Generic.SortedList&lt;'Key, 'Value&gt;" Usage="new System.Collections.Generic.SortedList&lt;'Key, 'Value&gt; dictionary" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="dictionary" Type="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="dictionary">
          <span data-ttu-id="7e0e1-173">
            <see cref="T:System.Collections.Generic.IDictionary`2" />，它的元素被复制到新 <see cref="T:System.Collections.Generic.SortedList`2" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-173">The <see cref="T:System.Collections.Generic.IDictionary`2" /> whose elements are copied to the new <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e0e1-174">初始化 <see cref="T:System.Collections.Generic.SortedList`2" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中复制的元素，其容量足以容纳所复制的元素数并使用默认的 <see cref="T:System.Collections.Generic.IComparer`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-174">Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2" /> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2" />, has sufficient capacity to accommodate the number of elements copied, and uses the default <see cref="T:System.Collections.Generic.IComparer`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-175">中的所有密钥<xref:System.Collections.Generic.SortedList%602>必须是唯一默认比较器; 同样，在源中的所有密钥`dictionary`还必须是唯一的默认比较器。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-175">Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the default comparer; likewise, every key in the source `dictionary` must also be unique according to the default comparer.</span></span>  
  
 <span data-ttu-id="7e0e1-176">新的容量<xref:System.Collections.Generic.SortedList%602>设置中的元素数为`dictionary`，因此不重设大小会发生填充的列表。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-176">The capacity of the new <xref:System.Collections.Generic.SortedList%602> is set to the number of elements in `dictionary`, so no resizing takes place while the list is being populated.</span></span>  
  
 <span data-ttu-id="7e0e1-177">此构造函数使用的默认比较器`TKey`。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-177">This constructor uses the default comparer for `TKey`.</span></span> <span data-ttu-id="7e0e1-178">若要指定比较器，请使用<xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-178">To specify a comparer, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="7e0e1-179">默认比较器<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>检查是否键类型`TKey`实现<xref:System.IComparable%601?displayProperty=nameWithType>并使用该实现，如果可用。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-179">The default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the key type `TKey` implements <xref:System.IComparable%601?displayProperty=nameWithType> and uses that implementation, if available.</span></span>  <span data-ttu-id="7e0e1-180">如果不是，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>检查是否键类型`TKey`实现<xref:System.IComparable?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-180">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the key type `TKey` implements <xref:System.IComparable?displayProperty=nameWithType>.</span></span>  <span data-ttu-id="7e0e1-181">如果该密钥键入`TKey`未实现任何一个接口，可以指定<xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType>中接受的构造函数重载的实现`comparer`参数。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-181">If the key type `TKey` does not implement either interface, you can specify a <xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType> implementation in a constructor overload that accepts a `comparer` parameter.</span></span>  
  
 <span data-ttu-id="7e0e1-182">如果中的数据`dictionary`是已排序的此构造函数是 O (`n`) 操作，其中`n`是中的元素数`dictionary`。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-182">If the data in `dictionary` are sorted, this constructor is an O(`n`) operation, where `n` is the number of elements in `dictionary`.</span></span> <span data-ttu-id="7e0e1-183">否则，它是 O (`n`\*`n`) 操作。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-183">Otherwise it is an O(`n`\*`n`) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e0e1-184">下面的代码示例演示如何使用<xref:System.Collections.Generic.SortedList%602>若要创建排序中的信息的副本<xref:System.Collections.Generic.Dictionary%602>，通过传递<xref:System.Collections.Generic.Dictionary%602>到<xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-184">The following code example shows how to use <xref:System.Collections.Generic.SortedList%602> to create a sorted copy of the information in a <xref:System.Collections.Generic.Dictionary%602>, by passing the <xref:System.Collections.Generic.Dictionary%602> to the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%29> constructor.</span></span>  
  
 [!code-csharp[Generic.SortedList.ctor_IDic#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.ctor_IDic/CS/source.cs#1)]
 [!code-vb[Generic.SortedList.ctor_IDic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.ctor_IDic/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e0e1-185">
            <paramref name="dictionary" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-185">
              <paramref name="dictionary" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7e0e1-186">
            <paramref name="dictionary" /> 包含一个或多个重复键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-186">
              <paramref name="dictionary" /> contains one or more duplicate keys.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.Generic.IDictionary`2" />
        <altmember cref="P:System.Collections.Generic.Comparer`1.Default" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.SortedList&lt;'Key, 'Value&gt; : int -&gt; System.Collections.Generic.SortedList&lt;'Key, 'Value&gt;" Usage="new System.Collections.Generic.SortedList&lt;'Key, 'Value&gt; capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">
          <span data-ttu-id="7e0e1-187">
            <see cref="T:System.Collections.Generic.SortedList`2" /> 可包含的初始元素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-187">The initial number of elements that the <see cref="T:System.Collections.Generic.SortedList`2" /> can contain.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e0e1-188">初始化 <see cref="T:System.Collections.Generic.SortedList`2" /> 类的新实例，该示例为空且具有指定的初始容量，并使用默认的 <see cref="T:System.Collections.Generic.IComparer`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-188">Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2" /> class that is empty, has the specified initial capacity, and uses the default <see cref="T:System.Collections.Generic.IComparer`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-189">中的所有密钥<xref:System.Collections.Generic.SortedList%602>必须是唯一的默认比较器。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-189">Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the default comparer.</span></span>  
  
 <span data-ttu-id="7e0e1-190">容量<xref:System.Collections.Generic.SortedList%602>是元素数目的<xref:System.Collections.Generic.SortedList%602>调整大小之前可以保留。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-190">The capacity of a <xref:System.Collections.Generic.SortedList%602> is the number of elements that the <xref:System.Collections.Generic.SortedList%602> can hold before resizing.</span></span> <span data-ttu-id="7e0e1-191">元素添加到<xref:System.Collections.Generic.SortedList%602>，自动增加容量所要求的重新分配内部数组。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-191">As elements are added to a <xref:System.Collections.Generic.SortedList%602>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="7e0e1-192">如果可以估计集合的大小，指定的初始容量，则无需要执行多个大小调整操作，同时将元素添加到<xref:System.Collections.Generic.SortedList%602>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-192">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="7e0e1-193">可以通过调用减少容量<xref:System.Collections.Generic.SortedList%602.TrimExcess%2A>或通过设置<xref:System.Collections.Generic.SortedList%602.Capacity%2A>属性显式。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-193">The capacity can be decreased by calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or by setting the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property explicitly.</span></span> <span data-ttu-id="7e0e1-194">减少容量重新分配内存并将中的所有元素都复制<xref:System.Collections.Generic.SortedList%602>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-194">Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="7e0e1-195">此构造函数使用的默认比较器`TKey`。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-195">This constructor uses the default comparer for `TKey`.</span></span> <span data-ttu-id="7e0e1-196">若要指定比较器，请使用<xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-196">To specify a comparer, use the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Int32%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="7e0e1-197">默认比较器<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>检查是否键类型`TKey`实现<xref:System.IComparable%601?displayProperty=nameWithType>并使用该实现，如果可用。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-197">The default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the key type `TKey` implements <xref:System.IComparable%601?displayProperty=nameWithType> and uses that implementation, if available.</span></span>  <span data-ttu-id="7e0e1-198">如果不是，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>检查是否键类型`TKey`实现<xref:System.IComparable?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-198">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the key type `TKey` implements <xref:System.IComparable?displayProperty=nameWithType>.</span></span>  <span data-ttu-id="7e0e1-199">如果该密钥键入`TKey`未实现任何一个接口，可以指定<xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType>中接受的构造函数重载的实现`comparer`参数。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-199">If the key type `TKey` does not implement either interface, you can specify a <xref:System.Collections.Generic.IComparer%601?displayProperty=nameWithType> implementation in a constructor overload that accepts a `comparer` parameter.</span></span>  
  
 <span data-ttu-id="7e0e1-200">此构造函数是 O (`n`) 操作，其中`n`是`capacity`。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-200">This constructor is an O(`n`) operation, where `n` is `capacity`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e0e1-201">下面的代码示例创建已排序的列表，其中 4 的初始容量并使用 4 个条目填充它。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-201">The following code example creates a sorted list with an initial capacity of 4 and populates it with 4 entries.</span></span>  
  
 [!code-csharp[Generic.SortedList.ctor_Int32#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.ctor_Int32/CS/source.cs#1)]
 [!code-vb[Generic.SortedList.ctor_Int32#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.ctor_Int32/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7e0e1-202">
            <paramref name="capacity" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-202">
              <paramref name="capacity" /> is less than zero.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.Generic.SortedList`2.Capacity" />
        <altmember cref="P:System.Collections.Generic.Comparer`1.Default" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (System.Collections.Generic.IDictionary&lt;TKey,TValue&gt; dictionary, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IDictionary`2&lt;!TKey, !TValue&gt; dictionary, class System.Collections.Generic.IComparer`1&lt;!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dictionary As IDictionary(Of TKey, TValue), comparer As IComparer(Of TKey))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(System::Collections::Generic::IDictionary&lt;TKey, TValue&gt; ^ dictionary, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.SortedList&lt;'Key, 'Value&gt; : System.Collections.Generic.IDictionary&lt;'Key, 'Value&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Collections.Generic.SortedList&lt;'Key, 'Value&gt;" Usage="new System.Collections.Generic.SortedList&lt;'Key, 'Value&gt; (dictionary, comparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dictionary" Type="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <param name="dictionary">
          <span data-ttu-id="7e0e1-203">
            <see cref="T:System.Collections.Generic.IDictionary`2" />，它的元素被复制到新 <see cref="T:System.Collections.Generic.SortedList`2" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-203">The <see cref="T:System.Collections.Generic.IDictionary`2" /> whose elements are copied to the new <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="7e0e1-204">在对键进行比较时使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-204">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing keys.</span>
          </span>
          <span data-ttu-id="7e0e1-205">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-205">-or-</span>
          </span>
          <span data-ttu-id="7e0e1-206">为 <see langword="null" />，则为这类键使用默认的 <see cref="T:System.Collections.Generic.Comparer`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-206">
              <see langword="null" /> to use the default <see cref="T:System.Collections.Generic.Comparer`1" /> for the type of the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e0e1-207">初始化 <see cref="T:System.Collections.Generic.SortedList`2" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中复制的元素，其容量足以容纳所复制的元素数并使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-207">Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2" /> class that contains elements copied from the specified <see cref="T:System.Collections.Generic.IDictionary`2" />, has sufficient capacity to accommodate the number of elements copied, and uses the specified <see cref="T:System.Collections.Generic.IComparer`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-208">中的所有密钥<xref:System.Collections.Generic.SortedList%602>必须是唯一根据指定的比较器; 同样，在源中的所有密钥`dictionary`还必须是唯一根据指定的比较器。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-208">Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the specified comparer; likewise, every key in the source `dictionary` must also be unique according to the specified comparer.</span></span>  
  
 <span data-ttu-id="7e0e1-209">新的容量<xref:System.Collections.Generic.SortedList%602>设置中的元素数为`dictionary`，因此不重设大小会发生填充的列表。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-209">The capacity of the new <xref:System.Collections.Generic.SortedList%602> is set to the number of elements in `dictionary`, so no resizing takes place while the list is being populated.</span></span>  
  
 <span data-ttu-id="7e0e1-210">如果中的数据`dictionary`是已排序的此构造函数是 O (`n`) 操作，其中`n`是中的元素数`dictionary`。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-210">If the data in `dictionary` are sorted, this constructor is an O(`n`) operation, where `n` is the number of elements in `dictionary`.</span></span> <span data-ttu-id="7e0e1-211">否则，它是 O (`n`\*`n`) 操作。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-211">Otherwise it is an O(`n`\*`n`) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e0e1-212">下面的代码示例演示如何使用<xref:System.Collections.Generic.SortedList%602>若要创建不区分大小写排序不区分大小写中的信息的副本<xref:System.Collections.Generic.Dictionary%602>，通过传递<xref:System.Collections.Generic.Dictionary%602>到<xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IComparer%7B%600%7D%29>构造函数。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-212">The following code example shows how to use <xref:System.Collections.Generic.SortedList%602> to create a case-insensitive sorted copy of the information in a case-insensitive <xref:System.Collections.Generic.Dictionary%602>, by passing the <xref:System.Collections.Generic.Dictionary%602> to the <xref:System.Collections.Generic.SortedList%602.%23ctor%28System.Collections.Generic.IDictionary%7B%600%2C%601%7D%2CSystem.Collections.Generic.IComparer%7B%600%7D%29> constructor.</span></span> <span data-ttu-id="7e0e1-213">在此示例中，不区分大小写的比较器用于当前区域性。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-213">In this example, the case-insensitive comparers are for the current culture.</span></span>  
  
 [!code-csharp[Generic.SortedList.ctor_IDicIComp#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.ctor_IDicIComp/CS/source.cs#1)]
 [!code-vb[Generic.SortedList.ctor_IDicIComp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.ctor_IDicIComp/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e0e1-214">
            <paramref name="dictionary" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-214">
              <paramref name="dictionary" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7e0e1-215">
            <paramref name="dictionary" /> 包含一个或多个重复键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-215">
              <paramref name="dictionary" /> contains one or more duplicate keys.</span>
          </span>
        </exception>
        <altmember cref="T:System.Collections.Generic.IDictionary`2" />
        <altmember cref="T:System.Collections.Generic.IComparer`1" />
        <altmember cref="P:System.Collections.Generic.Comparer`1.Default" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SortedList (int capacity, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity, class System.Collections.Generic.IComparer`1&lt;!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer, comparer As IComparer(Of TKey))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SortedList(int capacity, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="new System.Collections.Generic.SortedList&lt;'Key, 'Value&gt; : int * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Collections.Generic.SortedList&lt;'Key, 'Value&gt;" Usage="new System.Collections.Generic.SortedList&lt;'Key, 'Value&gt; (capacity, comparer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <param name="capacity">
          <span data-ttu-id="7e0e1-216">
            <see cref="T:System.Collections.Generic.SortedList`2" /> 可包含的初始元素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-216">The initial number of elements that the <see cref="T:System.Collections.Generic.SortedList`2" /> can contain.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="7e0e1-217">在对键进行比较时使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-217">The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use when comparing keys.</span>
          </span>
          <span data-ttu-id="7e0e1-218">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-218">-or-</span>
          </span>
          <span data-ttu-id="7e0e1-219">为 <see langword="null" />，则为这类键使用默认的 <see cref="T:System.Collections.Generic.Comparer`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-219">
              <see langword="null" /> to use the default <see cref="T:System.Collections.Generic.Comparer`1" /> for the type of the key.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e0e1-220">初始化 <see cref="T:System.Collections.Generic.SortedList`2" /> 类的新实例，该实例为空，具有指定的初始容量并使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-220">Initializes a new instance of the <see cref="T:System.Collections.Generic.SortedList`2" /> class that is empty, has the specified initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IComparer`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-221">中的所有密钥<xref:System.Collections.Generic.SortedList%602>必须是唯一根据指定的比较器。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-221">Every key in a <xref:System.Collections.Generic.SortedList%602> must be unique according to the specified comparer.</span></span>  
  
 <span data-ttu-id="7e0e1-222">容量<xref:System.Collections.Generic.SortedList%602>是元素数目的<xref:System.Collections.Generic.SortedList%602>调整大小之前可以保留。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-222">The capacity of a <xref:System.Collections.Generic.SortedList%602> is the number of elements that the <xref:System.Collections.Generic.SortedList%602> can hold before resizing.</span></span> <span data-ttu-id="7e0e1-223">元素添加到<xref:System.Collections.Generic.SortedList%602>，自动增加容量所要求的重新分配内部数组。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-223">As elements are added to a <xref:System.Collections.Generic.SortedList%602>, the capacity is automatically increased as required by reallocating the internal array.</span></span>  
  
 <span data-ttu-id="7e0e1-224">如果可以估计集合的大小，指定的初始容量，则无需要执行多个大小调整操作，同时将元素添加到<xref:System.Collections.Generic.SortedList%602>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-224">If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="7e0e1-225">可以通过调用减少容量<xref:System.Collections.Generic.SortedList%602.TrimExcess%2A>或通过设置<xref:System.Collections.Generic.SortedList%602.Capacity%2A>属性显式。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-225">The capacity can be decreased by calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or by setting the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property explicitly.</span></span> <span data-ttu-id="7e0e1-226">减少容量重新分配内存并将中的所有元素都复制<xref:System.Collections.Generic.SortedList%602>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-226">Decreasing the capacity reallocates memory and copies all the elements in the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="7e0e1-227">此构造函数是 O (`n`) 操作，其中`n`是`capacity`。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-227">This constructor is an O(`n`) operation, where `n` is `capacity`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e0e1-228">下面的代码示例使用当前区域性的初始容量为 5，且不区分大小写的比较器创建的已排序的列表。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-228">The following code example creates a sorted list with an initial capacity of 5 and a case-insensitive comparer for the current culture.</span></span> <span data-ttu-id="7e0e1-229">该示例添加四个元素、 一些与小写的密钥和一些使用大写密钥。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-229">The example adds four elements, some with lower-case keys and some with upper-case keys.</span></span> <span data-ttu-id="7e0e1-230">然后，此示例尝试将元素添加只是大小写，不同于现有密钥的密钥捕获产生的异常，并显示一条错误消息。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-230">The example then attempts to add an element with a key that differs from an existing key only by case, catches the resulting exception, and displays an error message.</span></span> <span data-ttu-id="7e0e1-231">最后，该示例显示不区分大小写的排序顺序中的元素。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-231">Finally, the example displays the elements in case-insensitive sort order.</span></span>  
  
 [!code-csharp[Generic.SortedList.ctor_Int32IComp#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.ctor_Int32IComp/CS/source.cs#1)]
 [!code-vb[Generic.SortedList.ctor_Int32IComp#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.ctor_Int32IComp/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7e0e1-232">
            <paramref name="capacity" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-232">
              <paramref name="capacity" /> is less than zero.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.Generic.SortedList`2.Capacity" />
        <altmember cref="T:System.Collections.Generic.IComparer`1" />
        <altmember cref="P:System.Collections.Generic.Comparer`1.Default" />
        <altmember cref="T:System.IComparable`1" />
        <altmember cref="T:System.IComparable" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!TKey key, !TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.Add(`0,`1)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (key As TKey, value As TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(TKey key, TValue value);" />
      <MemberSignature Language="F#" Value="abstract member Add : 'Key * 'Value -&gt; unit&#xA;override this.Add : 'Key * 'Value -&gt; unit" Usage="sortedList.Add (key, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IDictionary`2.Add(`0,`1)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="7e0e1-233">要添加的元素的键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-233">The key of the element to add.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="7e0e1-234">要添加的元素的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-234">The value of the element to add.</span>
          </span>
          <span data-ttu-id="7e0e1-235">对于引用类型，该值可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-235">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e0e1-236">将带有指定键和值的元素添加到 <see cref="T:System.Collections.Generic.SortedList`2" /> 中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-236">Adds an element with the specified key and value into the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-237">密钥不能`null`，但值则可以为，如果在已排序的列表中，值的类型`TValue`，是引用类型。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-237">A key cannot be `null`, but a value can be, if the type of values in the sorted list, `TValue`, is a reference type.</span></span>  
  
 <span data-ttu-id="7e0e1-238">此外可以使用<xref:System.Collections.Generic.SortedList%602.Item%2A>属性来添加新元素，通过设置密钥的值中不存在<xref:System.Collections.Generic.SortedList%602>; 例如， `myCollection["myNonexistentKey"] = myValue`。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-238">You can also use the <xref:System.Collections.Generic.SortedList%602.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Generic.SortedList%602>; for example, `myCollection["myNonexistentKey"] = myValue`.</span></span> <span data-ttu-id="7e0e1-239">但是，如果中已存在指定的键<xref:System.Collections.Generic.SortedList%602>，并设置<xref:System.Collections.Generic.SortedList%602.Item%2A>属性将会覆盖旧值。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-239">However, if the specified key already exists in the <xref:System.Collections.Generic.SortedList%602>, setting the <xref:System.Collections.Generic.SortedList%602.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="7e0e1-240">与此相反，<xref:System.Collections.Generic.SortedList%602.Add%2A>方法不会修改现有元素。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-240">In contrast, the <xref:System.Collections.Generic.SortedList%602.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="7e0e1-241">如果<xref:System.Collections.Generic.SortedList%602.Count%2A>已等于<xref:System.Collections.Generic.SortedList%602.Capacity%2A>，则容量的<xref:System.Collections.Generic.SortedList%602>自动重新分配内部数组中，增加和现有元素之前添加新元素将复制到新数组。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-241">If <xref:System.Collections.Generic.SortedList%602.Count%2A> already equals <xref:System.Collections.Generic.SortedList%602.Capacity%2A>, the capacity of the <xref:System.Collections.Generic.SortedList%602> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</span></span>  
  
 <span data-ttu-id="7e0e1-242">此方法为 O (`n`) 操作对于未排序数据，其中`n`是<xref:System.Collections.Generic.SortedList%602.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-242">This method is an O(`n`) operation for unsorted data, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span> <span data-ttu-id="7e0e1-243">它是 O (log `n`) 操作，如果在列表的末尾添加了新元素。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-243">It is an O(log `n`) operation if the new element is added at the end of the list.</span></span> <span data-ttu-id="7e0e1-244">如果插入导致大小调整，运算复杂度为 O (`n`)。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-244">If insertion causes a resize, the operation is O(`n`).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e0e1-245">下面的代码示例创建一个空<xref:System.Collections.Generic.SortedList%602>的字符串与字符串键，并使用<xref:System.Collections.Generic.SortedList%602.Add%2A>方法来添加一些元素。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-245">The following code example creates an empty <xref:System.Collections.Generic.SortedList%602> of strings with string keys and uses the <xref:System.Collections.Generic.SortedList%602.Add%2A> method to add some elements.</span></span> <span data-ttu-id="7e0e1-246">该示例演示<xref:System.Collections.Generic.SortedList%602.Add%2A>方法会抛出<xref:System.ArgumentException>时尝试添加重复的键。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-246">The example demonstrates that the <xref:System.Collections.Generic.SortedList%602.Add%2A> method throws an <xref:System.ArgumentException> when attempting to add a duplicate key.</span></span>  
  
 <span data-ttu-id="7e0e1-247">此代码示例是为提供一个更大示例的一部分<xref:System.Collections.Generic.SortedList%602>类。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-247">This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedList%602> class.</span></span>  
  
 [!code-cpp[Generic.SortedList#2](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#2)]
 [!code-csharp[Generic.SortedList#2](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#2)]
 [!code-vb[Generic.SortedList#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e0e1-248">
            <paramref name="key" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-248">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7e0e1-249">
            <see cref="T:System.Collections.Generic.SortedList`2" /> 中已存在具有相同键的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-249">An element with the same key already exists in the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.SortedList`2.Remove(`0)" />
        <altmember cref="P:System.Collections.Generic.SortedList`2.Item(`0)" />
        <altmember cref="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Capacity">
      <MemberSignature Language="C#" Value="public int Capacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Capacity" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.Capacity" />
      <MemberSignature Language="VB.NET" Value="Public Property Capacity As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Capacity { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Capacity : int with get, set" Usage="System.Collections.Generic.SortedList&lt;'Key, 'Value&gt;.Capacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7e0e1-250">获取或设置 <see cref="T:System.Collections.Generic.SortedList`2" /> 可包含的元素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-250">Gets or sets the number of elements that the <see cref="T:System.Collections.Generic.SortedList`2" /> can contain.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7e0e1-251">
            <see cref="T:System.Collections.Generic.SortedList`2" /> 可包含的元素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-251">The number of elements that the <see cref="T:System.Collections.Generic.SortedList`2" /> can contain.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-252"><xref:System.Collections.Generic.SortedList%602.Capacity%2A> 是的元素数的<xref:System.Collections.Generic.SortedList%602>可以存储。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-252"><xref:System.Collections.Generic.SortedList%602.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.SortedList%602> can store.</span></span> <span data-ttu-id="7e0e1-253"><xref:System.Collections.Generic.SortedList%602.Count%2A> 是中的实际的元素数目<xref:System.Collections.Generic.SortedList%602>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-253"><xref:System.Collections.Generic.SortedList%602.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="7e0e1-254"><xref:System.Collections.Generic.SortedList%602.Capacity%2A> 始终是大于或等于<xref:System.Collections.Generic.SortedList%602.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-254"><xref:System.Collections.Generic.SortedList%602.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span> <span data-ttu-id="7e0e1-255">如果<xref:System.Collections.Generic.SortedList%602.Count%2A>超出了<xref:System.Collections.Generic.SortedList%602.Capacity%2A>时添加元素，通过在复制旧元素和添加新元素之前自动重新分配内部数组增加容量。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-255">If <xref:System.Collections.Generic.SortedList%602.Count%2A> exceeds <xref:System.Collections.Generic.SortedList%602.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="7e0e1-256">可以通过调用减少容量<xref:System.Collections.Generic.SortedList%602.TrimExcess%2A>或通过设置<xref:System.Collections.Generic.SortedList%602.Capacity%2A>属性显式。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-256">The capacity can be decreased by calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or by setting the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property explicitly.</span></span> <span data-ttu-id="7e0e1-257">时的值<xref:System.Collections.Generic.SortedList%602.Capacity%2A>设置了显式，内部数组还重新分配以适应指定的容量。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-257">When the value of <xref:System.Collections.Generic.SortedList%602.Capacity%2A> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.</span></span>  
  
 <span data-ttu-id="7e0e1-258">检索此属性的值是 o （1） 的操作;将属性设置为 O (`n`) 操作，其中`n`新容量。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-258">Retrieving the value of this property is an O(1) operation; setting the property is an O(`n`) operation, where `n` is the new capacity.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7e0e1-259">
            <see cref="P:System.Collections.Generic.SortedList`2.Capacity" /> 已设置为一个小于 <see cref="P:System.Collections.Generic.SortedList`2.Count" /> 的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-259">
              <see cref="P:System.Collections.Generic.SortedList`2.Capacity" /> is set to a value that is less than <see cref="P:System.Collections.Generic.SortedList`2.Count" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="7e0e1-260">系统上没有足够的可用内存。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-260">There is not enough memory available on the system.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.Generic.SortedList`2.Count" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.TrimExcess" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="sortedList.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Clear</InterfaceMember>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7e0e1-261">从 <see cref="T:System.Collections.Generic.SortedList`2" /> 中移除所有元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-261">Removes all elements from the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-262"><xref:System.Collections.Generic.SortedList%602.Count%2A> 已设置为零，并且对其他对象的集合的元素也被释放。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-262"><xref:System.Collections.Generic.SortedList%602.Count%2A> is set to zero, and references to other objects from elements of the collection are also released.</span></span>  
  
 <span data-ttu-id="7e0e1-263"><xref:System.Collections.Generic.SortedList%602.Capacity%2A> 保持不变。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-263"><xref:System.Collections.Generic.SortedList%602.Capacity%2A> remains unchanged.</span></span> <span data-ttu-id="7e0e1-264">若要重置的容量<xref:System.Collections.Generic.SortedList%602>，调用<xref:System.Collections.Generic.SortedList%602.TrimExcess%2A>，或者设置<xref:System.Collections.Generic.SortedList%602.Capacity%2A>直接属性。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-264">To reset the capacity of the <xref:System.Collections.Generic.SortedList%602>, call <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> or set the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property directly.</span></span> <span data-ttu-id="7e0e1-265">截去空<xref:System.Collections.Generic.SortedList%602>的容量设置<xref:System.Collections.Generic.SortedList%602>到默认容量。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-265">Trimming an empty <xref:System.Collections.Generic.SortedList%602> sets the capacity of the <xref:System.Collections.Generic.SortedList%602> to the default capacity.</span></span>  
  
 <span data-ttu-id="7e0e1-266">此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.Generic.SortedList%602.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-266">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.SortedList`2.TrimExcess" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Comparer">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IComparer&lt;TKey&gt; Comparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IComparer`1&lt;!TKey&gt; Comparer" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.Comparer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Comparer As IComparer(Of TKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IComparer&lt;TKey&gt; ^ Comparer { System::Collections::Generic::IComparer&lt;TKey&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Comparer : System.Collections.Generic.IComparer&lt;'Key&gt;" Usage="System.Collections.Generic.SortedList&lt;'Key, 'Value&gt;.Comparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IComparer&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7e0e1-267">获取该排序列表的 <see cref="T:System.Collections.Generic.IComparer`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-267">Gets the <see cref="T:System.Collections.Generic.IComparer`1" /> for the sorted list.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7e0e1-268">当前 <see cref="T:System.IComparable`1" /> 的 <see cref="T:System.Collections.Generic.SortedList`2" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-268">The <see cref="T:System.IComparable`1" /> for the current <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-269">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-269">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public bool ContainsKey (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContainsKey (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsKey(TKey key);" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : 'Key -&gt; bool&#xA;override this.ContainsKey : 'Key -&gt; bool" Usage="sortedList.ContainsKey key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)</InterfaceMember>
        <InterfaceMember>M:System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="7e0e1-270">要在 <see cref="T:System.Collections.Generic.SortedList`2" /> 中定位的键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-270">The key to locate in the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e0e1-271">确定 <see cref="T:System.Collections.Generic.SortedList`2" /> 是否包含特定键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-271">Determines whether the <see cref="T:System.Collections.Generic.SortedList`2" /> contains a specific key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e0e1-272">如果 <see langword="true" /> 包含具有指定键的元素，则为 <see cref="T:System.Collections.Generic.SortedList`2" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-272">
              <see langword="true" /> if the <see cref="T:System.Collections.Generic.SortedList`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-273">此方法为 O (log `n`) 操作，其中`n`是<xref:System.Collections.Generic.SortedList%602.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-273">This method is an O(log `n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e0e1-274">下面的代码示例演示如何使用<xref:System.Collections.Generic.SortedList%602.ContainsKey%2A>方法来测试某个键是否存在之前调用<xref:System.Collections.Generic.SortedList%602.Add%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-274">The following code example shows how to use the <xref:System.Collections.Generic.SortedList%602.ContainsKey%2A> method to test whether a key exists prior to calling the <xref:System.Collections.Generic.SortedList%602.Add%2A> method.</span></span> <span data-ttu-id="7e0e1-275">它还演示如何使用<xref:System.Collections.Generic.SortedList%602.TryGetValue%2A>方法中检索值，这是在程序经常尝试不在已排序的列表中的键时检索值的有效方法。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-275">It also shows how to use the <xref:System.Collections.Generic.SortedList%602.TryGetValue%2A> method to retrieve values, which is an efficient way to retrieve values when a program frequently tries keys that are not in the sorted list.</span></span> <span data-ttu-id="7e0e1-276">最后，它显示了效率最低的方法来测试是否存在键，通过使用<xref:System.Collections.Generic.SortedList%602.Item%2A>属性 （C# 中的索引器）。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-276">Finally, it shows the least efficient way to test whether keys exist, by using the <xref:System.Collections.Generic.SortedList%602.Item%2A> property (the indexer in C#).</span></span>  
  
 <span data-ttu-id="7e0e1-277">此代码示例是为提供一个更大示例的一部分<xref:System.Collections.Generic.SortedList%602>类。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-277">This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedList%602> class.</span></span>  
  
 [!code-cpp[Generic.SortedList#6](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#6)]
 [!code-csharp[Generic.SortedList#6](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#6)]
 [!code-vb[Generic.SortedList#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#6)]  
[!code-cpp[Generic.SortedList#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#5)]
[!code-csharp[Generic.SortedList#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#5)]
[!code-vb[Generic.SortedList#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#5)]  
[!code-cpp[Generic.SortedList#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#4)]
[!code-csharp[Generic.SortedList#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#4)]
[!code-vb[Generic.SortedList#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e0e1-278">
            <paramref name="key" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-278">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)" />
      </Docs>
    </Member>
    <Member MemberName="ContainsValue">
      <MemberSignature Language="C#" Value="public bool ContainsValue (TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ContainsValue(!TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContainsValue (value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ContainsValue(TValue value);" />
      <MemberSignature Language="F#" Value="member this.ContainsValue : 'Value -&gt; bool" Usage="sortedList.ContainsValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="7e0e1-279">要在 <see cref="T:System.Collections.Generic.SortedList`2" /> 中定位的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-279">The value to locate in the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
          <span data-ttu-id="7e0e1-280">对于引用类型，该值可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-280">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e0e1-281">确定 <see cref="T:System.Collections.Generic.SortedList`2" /> 是否包含特定值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-281">Determines whether the <see cref="T:System.Collections.Generic.SortedList`2" /> contains a specific value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e0e1-282">如果 <see langword="true" /> 包含具有指定值的元素，则为 <see cref="T:System.Collections.Generic.SortedList`2" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-282">
              <see langword="true" /> if the <see cref="T:System.Collections.Generic.SortedList`2" /> contains an element with the specified value; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-283">此方法可确定是否使用默认比较器的相等<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>的值类型`TValue`。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-283">This method determines equality using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> for the value type `TValue`.</span></span>  <span data-ttu-id="7e0e1-284"><xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 检查值是否类型`TValue`实现<xref:System.IComparable%601?displayProperty=nameWithType>并使用该实现，如果可用。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-284"><xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the value type `TValue` implements <xref:System.IComparable%601?displayProperty=nameWithType> and uses that implementation, if available.</span></span>  <span data-ttu-id="7e0e1-285">如果不是，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>检查值是否类型`TValue`实现<xref:System.IComparable?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-285">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the value type `TValue` implements <xref:System.IComparable?displayProperty=nameWithType>.</span></span>  <span data-ttu-id="7e0e1-286">如果类型值`TValue`未的实现任何一个接口，此方法将使用<xref:System.Object.Equals%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-286">If the value type `TValue` does not implement either interface, this method uses <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="7e0e1-287">此方法执行线性搜索;因此，平均执行时间是成比例<xref:System.Collections.Generic.SortedList%602.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-287">This method performs a linear search; therefore, the average execution time is proportional to <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span> <span data-ttu-id="7e0e1-288">也就是说，此方法是 O (`n`) 操作，其中`n`是<xref:System.Collections.Generic.SortedList%602.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-288">That is, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Collections.Generic.SortedList&lt;'Key, 'Value&gt;.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyCollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7e0e1-289">获取包含在 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的键/值对的数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-289">Gets the number of key/value pairs contained in the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7e0e1-290">包含在 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的键/值对的数目。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-290">The number of key/value pairs contained in the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-291"><xref:System.Collections.Generic.SortedList%602.Capacity%2A> 是的元素数的<xref:System.Collections.Generic.SortedList%602>可以存储。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-291"><xref:System.Collections.Generic.SortedList%602.Capacity%2A> is the number of elements that the <xref:System.Collections.Generic.SortedList%602> can store.</span></span> <span data-ttu-id="7e0e1-292"><xref:System.Collections.Generic.SortedList%602.Count%2A> 是中的实际的元素数目<xref:System.Collections.Generic.SortedList%602>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-292"><xref:System.Collections.Generic.SortedList%602.Count%2A> is the number of elements that are actually in the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="7e0e1-293"><xref:System.Collections.Generic.SortedList%602.Capacity%2A> 始终是大于或等于<xref:System.Collections.Generic.SortedList%602.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-293"><xref:System.Collections.Generic.SortedList%602.Capacity%2A> is always greater than or equal to <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span> <span data-ttu-id="7e0e1-294">如果<xref:System.Collections.Generic.SortedList%602.Count%2A>超出了<xref:System.Collections.Generic.SortedList%602.Capacity%2A>时添加元素，通过在复制旧元素和添加新元素之前自动重新分配内部数组增加容量。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-294">If <xref:System.Collections.Generic.SortedList%602.Count%2A> exceeds <xref:System.Collections.Generic.SortedList%602.Capacity%2A> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</span></span>  
  
 <span data-ttu-id="7e0e1-295">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-295">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Generic.SortedList`2.Capacity" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of KeyValuePair(Of TKey, TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;'Key, 'Value&gt;&gt;" Usage="sortedList.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7e0e1-296">返回循环访问 <see cref="T:System.Collections.Generic.SortedList`2" /> 的枚举数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-296">Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e0e1-297">
            <see cref="T:System.Collections.Generic.IEnumerator`1" /> 的类型 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的 <see cref="T:System.Collections.Generic.SortedList`2" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-297">An <see cref="T:System.Collections.Generic.IEnumerator`1" /> of type <see cref="T:System.Collections.Generic.KeyValuePair`2" /> for the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-298">`foreach` C# 语言的语句 (`for each` c + + 中`For Each`在 Visual Basic 中) 隐藏了枚举器的复杂性。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-298">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="7e0e1-299">因此，建议使用 `foreach`，而不是直接操作枚举数。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-299">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="7e0e1-300">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-300">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="7e0e1-301">字典中使用的内部树的排序顺序维护。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-301">The dictionary is maintained in a sorted order using an internal tree.</span></span> <span data-ttu-id="7e0e1-302">每个新元素放置在正确的排序位置处并对树进行调整时移除元素时维护排序顺序。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-302">Every new element is positioned at the correct sort position, and the tree is adjusted to maintain the sort order whenever an element is removed.</span></span> <span data-ttu-id="7e0e1-303">枚举，时维护排序顺序。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-303">While enumerating, the sort order is maintained.</span></span>  
  
 <span data-ttu-id="7e0e1-304">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-304">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="7e0e1-305">在此位置上，未定义 <xref:System.Collections.Generic.IEnumerator%601.Current%2A>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-305">At this position, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="7e0e1-306">因此，在读取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必须调用 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 将枚举器向前移动到集合的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-306">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.IEnumerator%601.Current%2A>.</span></span>  
  
 <span data-ttu-id="7e0e1-307">在调用 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 之前，<xref:System.Collections.IEnumerator.MoveNext%2A> 返回相同的对象。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-307"><xref:System.Collections.Generic.IEnumerator%601.Current%2A> returns the same object until <xref:System.Collections.IEnumerator.MoveNext%2A> is called.</span></span> <span data-ttu-id="7e0e1-308"><xref:System.Collections.IEnumerator.MoveNext%2A> 将 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-308"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="7e0e1-309">如果<xref:System.Collections.IEnumerator.MoveNext%2A>越过集合，枚举器的末尾放置在集合中的最后一个元素的后面和<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-309">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="7e0e1-310">当枚举数位于此位置上，对后续调用<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-310">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> return `false`.</span></span> <span data-ttu-id="7e0e1-311">如果最后一次调用到<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`，<xref:System.Collections.Generic.IEnumerator%601.Current%2A>是不确定的。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-311">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.IEnumerator%601.Current%2A> is undefined.</span></span> <span data-ttu-id="7e0e1-312">无法再次将 <xref:System.Collections.Generic.IEnumerator%601.Current%2A> 设置为集合的第一个元素；必须改为创建新的枚举器实例。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-312">You cannot set <xref:System.Collections.Generic.IEnumerator%601.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.</span></span>  
  
 <span data-ttu-id="7e0e1-313">只要集合保持不变，枚举数就保持有效。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-313">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="7e0e1-314">如果进行了更改到集合中，例如添加、 修改或删除元素，该枚举数将失效且不可恢复，并且下次调用<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>引发<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-314">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="7e0e1-315">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-315">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="7e0e1-316">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-316">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="7e0e1-317">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-317">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="7e0e1-318">集合中的默认实现<xref:System.Collections.Generic?displayProperty=nameWithType>不同步。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-318">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="7e0e1-319">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-319">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEnumerator`1" />
      </Docs>
    </Member>
    <Member MemberName="IndexOfKey">
      <MemberSignature Language="C#" Value="public int IndexOfKey (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOfKey(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOfKey (key As TKey) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOfKey(TKey key);" />
      <MemberSignature Language="F#" Value="member this.IndexOfKey : 'Key -&gt; int" Usage="sortedList.IndexOfKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="7e0e1-320">要在 <see cref="T:System.Collections.Generic.SortedList`2" /> 中定位的键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-320">The key to locate in the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e0e1-321">在整个 <see cref="T:System.Collections.Generic.SortedList`2" /> 中搜索指定键并返回从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-321">Searches for the specified key and returns the zero-based index within the entire <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e0e1-322">如果找到，则为整个 <paramref name="key" /> 中 <see cref="T:System.Collections.Generic.SortedList`2" /> 的从零开始的索引；否则为 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-322">The zero-based index of <paramref name="key" /> within the entire <see cref="T:System.Collections.Generic.SortedList`2" />, if found; otherwise, -1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-323">此方法用于执行二进制搜索;因此，此方法为 O (log `n`) 操作，其中`n`是<xref:System.Collections.Generic.SortedList%602.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-323">This method performs a binary search; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e0e1-324">
            <paramref name="key" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-324">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOfValue">
      <MemberSignature Language="C#" Value="public int IndexOfValue (TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOfValue(!TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOfValue (value As TValue) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOfValue(TValue value);" />
      <MemberSignature Language="F#" Value="member this.IndexOfValue : 'Value -&gt; int" Usage="sortedList.IndexOfValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="7e0e1-325">要在 <see cref="T:System.Collections.Generic.SortedList`2" /> 中定位的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-325">The value to locate in the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
          <span data-ttu-id="7e0e1-326">对于引用类型，该值可以为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-326">The value can be <see langword="null" /> for reference types.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e0e1-327">在整个 <see cref="T:System.Collections.Generic.SortedList`2" /> 中搜索指定的值，并返回第一个匹配项的从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-327">Searches for the specified value and returns the zero-based index of the first occurrence within the entire <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e0e1-328">如果找到，则为整个 <paramref name="value" /> 中 <see cref="T:System.Collections.Generic.SortedList`2" /> 第一个匹配项的从零开始的索引；否则为 -1。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-328">The zero-based index of the first occurrence of <paramref name="value" /> within the entire <see cref="T:System.Collections.Generic.SortedList`2" />, if found; otherwise, -1.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-329">此方法可确定是否使用默认比较器的相等<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>的值类型`TValue`。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-329">This method determines equality using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> for the value type `TValue`.</span></span>  <span data-ttu-id="7e0e1-330"><xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> 检查值是否类型`TValue`实现<xref:System.IComparable%601?displayProperty=nameWithType>并使用该实现，如果可用。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-330"><xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the value type `TValue` implements <xref:System.IComparable%601?displayProperty=nameWithType> and uses that implementation, if available.</span></span>  <span data-ttu-id="7e0e1-331">如果不是，<xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType>检查值是否类型`TValue`实现<xref:System.IComparable?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-331">If not, <xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType> checks whether the value type `TValue` implements <xref:System.IComparable?displayProperty=nameWithType>.</span></span>  <span data-ttu-id="7e0e1-332">如果类型值`TValue`未的实现任何一个接口，此方法将使用<xref:System.Object.Equals%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-332">If the value type `TValue` does not implement either interface, this method uses <xref:System.Object.Equals%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="7e0e1-333">此方法执行线性搜索;因此，平均执行时间是成比例<xref:System.Collections.Generic.SortedList%602.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-333">This method performs a linear search; therefore, the average execution time is proportional to <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span> <span data-ttu-id="7e0e1-334">也就是说，此方法是 O (`n`) 操作，其中`n`是<xref:System.Collections.Generic.SortedList%602.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-334">That is, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TValue this[TKey key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue Item(!TKey)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.Item(`0)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(key As TKey) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TValue default[TKey] { TValue get(TKey key); void set(TKey key, TValue value); };" />
      <MemberSignature Language="F#" Value="member this.Item('Key) : 'Value with get, set" Usage="System.Collections.Generic.SortedList&lt;'Key, 'Value&gt;.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IDictionary`2.Item(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="7e0e1-335">要获取或设置其值的键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-335">The key whose value to get or set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e0e1-336">获取或设置与指定的键关联的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-336">Gets or sets the value associated with the specified key.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7e0e1-337">与指定的键相关联的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-337">The value associated with the specified key.</span>
          </span>
          <span data-ttu-id="7e0e1-338">如果找不到指定的键，则 get 操作会引发一个 <see cref="T:System.Collections.Generic.KeyNotFoundException" />，而 set 操作会创建一个使用指定键的新元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-338">If the specified key is not found, a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException" /> and a set operation creates a new element using the specified key.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-339">可以使用下面的语法通过此属性访问集合中的特定元素：`myCollection[key]`。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-339">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.</span></span>  
  
 <span data-ttu-id="7e0e1-340">密钥不能`null`，但值则可以为，如果在列表中，值的类型`TValue`，是引用类型。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-340">A key cannot be `null`, but a value can be, if the type of values in the list, `TValue`, is a reference type.</span></span>  
  
 <span data-ttu-id="7e0e1-341">如果未找到该键时要检索的值，<xref:System.Collections.Generic.KeyNotFoundException>引发。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-341">If the key is not found when a value is being retrieved, <xref:System.Collections.Generic.KeyNotFoundException> is thrown.</span></span> <span data-ttu-id="7e0e1-342">如果将被设置为值未找到该键，添加的键和值。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-342">If the key is not found when a value is being set, the key and value are added.</span></span>  
  
 <span data-ttu-id="7e0e1-343">此外可以使用<xref:System.Collections.Generic.SortedList%602.Item%2A>属性来添加新元素，通过设置密钥的值中不存在<xref:System.Collections.Generic.SortedList%602>; 例如， `myCollection["myNonexistentKey"] = myValue`。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-343">You can also use the <xref:System.Collections.Generic.SortedList%602.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Generic.SortedList%602>; for example, `myCollection["myNonexistentKey"] = myValue`.</span></span> <span data-ttu-id="7e0e1-344">但是，如果中已存在指定的键<xref:System.Collections.Generic.SortedList%602>，并设置<xref:System.Collections.Generic.SortedList%602.Item%2A>属性将会覆盖旧值。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-344">However, if the specified key already exists in the <xref:System.Collections.Generic.SortedList%602>, setting the <xref:System.Collections.Generic.SortedList%602.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="7e0e1-345">与此相反，<xref:System.Collections.Generic.SortedList%602.Add%2A>方法不会修改现有元素。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-345">In contrast, the <xref:System.Collections.Generic.SortedList%602.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="7e0e1-346">C# 语言使用关键字来定义而不是实现索引器<xref:System.Collections.Generic.SortedList%602.Item%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-346">The C# language uses the  keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.SortedList%602.Item%2A> property.</span></span> <span data-ttu-id="7e0e1-347">Visual Basic 将 <xref:System.Collections.Generic.SortedList%602.Item%2A> 实现为默认属性，该属性提供相同的索引功能。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-347">Visual Basic implements <xref:System.Collections.Generic.SortedList%602.Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="7e0e1-348">检索此属性的值是 O (log `n`) 操作，其中 n 是<xref:System.Collections.Generic.SortedList%602.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-348">Retrieving the value of this property is an O(log `n`) operation, where n is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span> <span data-ttu-id="7e0e1-349">将属性设置为 O (log `n`) 操作，如果键已存在于<xref:System.Collections.Generic.SortedList%602>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-349">Setting the property is an O(log `n`) operation if the key is already in the <xref:System.Collections.Generic.SortedList%602>.</span></span> <span data-ttu-id="7e0e1-350">如果键不在列表中，将属性设置为 O (`n`) 操作的未排序的数据或 O (log `n`) 如果在列表的末尾添加了新元素。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-350">If the key is not in the list, setting the property is an O(`n`) operation for unsorted data, or O(log `n`) if the new element is added at the end of the list.</span></span> <span data-ttu-id="7e0e1-351">如果插入导致大小调整，运算复杂度为 O (`n`)。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-351">If insertion causes a resize, the operation is O(`n`).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e0e1-352">下面的代码示例使用<xref:System.Collections.Generic.SortedList%602.Item%2A>属性 （C# 中的索引器） 来检索值，从而演示<xref:System.Collections.Generic.KeyNotFoundException>请求的键不存在，以及可以替换与某个键相关联的值时引发。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-352">The following code example uses the <xref:System.Collections.Generic.SortedList%602.Item%2A> property (the indexer in C#) to retrieve values, demonstrating that a <xref:System.Collections.Generic.KeyNotFoundException> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.</span></span>  
  
 <span data-ttu-id="7e0e1-353">该示例还演示如何使用<xref:System.Collections.Generic.SortedList%602.TryGetValue%2A>方法作为更高效的方法来检索值，如果程序必须经常尝试在已排序的列表中不。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-353">The example also shows how to use the <xref:System.Collections.Generic.SortedList%602.TryGetValue%2A> method as a more efficient way to retrieve values if a program often must try key values that are not in the sorted list.</span></span>  
  
 <span data-ttu-id="7e0e1-354">此代码示例是为提供一个更大示例的一部分<xref:System.Collections.Generic.SortedList%602>类。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-354">This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedList%602> class.</span></span>  
  
 [!code-cpp[Generic.SortedList#3](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#3)]
 [!code-csharp[Generic.SortedList#3](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#3)]
 [!code-vb[Generic.SortedList#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#3)]  
[!code-cpp[Generic.SortedList#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#4)]
[!code-csharp[Generic.SortedList#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#4)]
[!code-vb[Generic.SortedList#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#4)]  
[!code-cpp[Generic.SortedList#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#5)]
[!code-csharp[Generic.SortedList#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#5)]
[!code-vb[Generic.SortedList#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e0e1-355">
            <paramref name="key" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-355">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">
          <span data-ttu-id="7e0e1-356">已检索该属性且集合中不存在 <paramref name="key" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-356">The property is retrieved and <paramref name="key" /> does not exist in the collection.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.SortedList`2.Add(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;TKey&gt; Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;!TKey&gt; Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.Keys" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Keys As IList(Of TKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;TKey&gt; ^ Keys { System::Collections::Generic::IList&lt;TKey&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Keys : System.Collections.Generic.IList&lt;'Key&gt;" Usage="System.Collections.Generic.SortedList&lt;'Key, 'Value&gt;.Keys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7e0e1-357">获取一个按排序顺序包含 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的键的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-357">Gets a collection containing the keys in the <see cref="T:System.Collections.Generic.SortedList`2" />, in sorted order.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7e0e1-358">一个 <see cref="T:System.Collections.Generic.IList`1" />，包含 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-358">A <see cref="T:System.Collections.Generic.IList`1" /> containing the keys in the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-359">中的键的顺序<xref:System.Collections.Generic.IList%601>中的顺序相同<xref:System.Collections.Generic.SortedList%602>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-359">The order of the keys in the <xref:System.Collections.Generic.IList%601> is the same as the order in the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="7e0e1-360">返回<xref:System.Collections.Generic.IList%601>不是静态副本，而是，<xref:System.Collections.Generic.IList%601>反过来引用在原始密钥<xref:System.Collections.Generic.SortedList%602>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-360">The returned <xref:System.Collections.Generic.IList%601> is not a static copy; instead, the <xref:System.Collections.Generic.IList%601> refers back to the keys in the original <xref:System.Collections.Generic.SortedList%602>.</span></span> <span data-ttu-id="7e0e1-361">因此，更改为<xref:System.Collections.Generic.SortedList%602>继续反映在<xref:System.Collections.Generic.IList%601>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-361">Therefore, changes to the <xref:System.Collections.Generic.SortedList%602> continue to be reflected in the <xref:System.Collections.Generic.IList%601>.</span></span>  
  
 <span data-ttu-id="7e0e1-362">返回的集合<xref:System.Collections.Generic.SortedList%602.Keys%2A>属性提供按索引检索密钥的有效方法。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-362">The collection returned by the <xref:System.Collections.Generic.SortedList%602.Keys%2A> property provides an efficient way to retrieve keys by index.</span></span> <span data-ttu-id="7e0e1-363">不需要重新生成列表时访问的属性，因为列表是只是键的内部数组的包装器。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-363">It is not necessary to regenerate the list when the property is accessed, because the list is just a wrapper for the internal array of keys.</span></span> <span data-ttu-id="7e0e1-364">下面的代码演示如何使用<xref:System.Collections.Generic.SortedList%602.Keys%2A>属性执行索引检索元素的已排序列表中包含字符串关键字的密钥：</span><span class="sxs-lookup"><span data-stu-id="7e0e1-364">The following code shows the use of the <xref:System.Collections.Generic.SortedList%602.Keys%2A> property for indexed retrieval of keys from a sorted list of elements with string keys:</span></span>  
  
 [!code-cpp[Generic.SortedList#11](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/remarks.cpp#11)]
 [!code-csharp[Generic.SortedList#11](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/remarks.cs#11)]
 [!code-vb[Generic.SortedList#11](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/remarks.vb#11)]  
  
 <span data-ttu-id="7e0e1-365">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-365">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e0e1-366">下面的代码示例说明如何枚举在已排序的列表中使用的密钥<xref:System.Collections.Generic.SortedList%602.Keys%2A>属性，以及如何枚举的键和已排序的列表中的值。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-366">The following code example shows how to enumerate the keys in the sorted list using the <xref:System.Collections.Generic.SortedList%602.Keys%2A> property, and how to enumerate the keys and values in the sorted list.</span></span>  
  
 <span data-ttu-id="7e0e1-367">该示例还演示如何使用<xref:System.Collections.Generic.SortedList%602.Keys%2A>高效索引检索的键属性。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-367">The example also shows how to use the <xref:System.Collections.Generic.SortedList%602.Keys%2A> property for efficient indexed retrieval of keys.</span></span>  
  
 <span data-ttu-id="7e0e1-368">此代码是一个更大的示例可以编译和执行的一部分。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-368">This code is part of a larger example that can be compiled and executed.</span></span> <span data-ttu-id="7e0e1-369">请参阅 <xref:System.Collections.Generic.SortedList%602>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-369">See <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 [!code-cpp[Generic.SortedList#9](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#9)]
 [!code-csharp[Generic.SortedList#9](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#9)]
 [!code-vb[Generic.SortedList#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#9)]  
[!code-cpp[Generic.SortedList#7](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#7)]
[!code-csharp[Generic.SortedList#7](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#7)]
[!code-vb[Generic.SortedList#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IList`1" />
        <altmember cref="P:System.Collections.Generic.SortedList`2.Values" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (key As TKey) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Remove(TKey key);" />
      <MemberSignature Language="F#" Value="abstract member Remove : 'Key -&gt; bool&#xA;override this.Remove : 'Key -&gt; bool" Usage="sortedList.Remove key" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IDictionary`2.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="7e0e1-370">要移除的元素的键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-370">The key of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e0e1-371">从 <see cref="T:System.Collections.Generic.SortedList`2" /> 中移除带有指定键的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-371">Removes the element with the specified key from the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e0e1-372">如果该元素已成功移除，则为 <see langword="true" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-372">
              <see langword="true" /> if the element is successfully removed; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="7e0e1-373">如果在原始 <see langword="false" /> 中没有找到 <paramref name="key" />，此方法也会返回 <see cref="T:System.Collections.Generic.SortedList`2" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-373">This method also returns <see langword="false" /> if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-374">此方法用于执行二进制搜索;但是，元素将上移来填充在打开的位置，因此此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.Generic.SortedList%602.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-374">This method performs a binary search; however, the elements are moved up to fill in the open spot, so this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e0e1-375">下面的代码示例演示如何从使用已排序的列表中删除键/值对<xref:System.Collections.Generic.SortedList%602.Remove%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-375">The following code example shows how to remove a key/value pair from the sorted list using the <xref:System.Collections.Generic.SortedList%602.Remove%2A> method.</span></span>  
  
 <span data-ttu-id="7e0e1-376">此代码示例是为提供一个更大示例的一部分<xref:System.Collections.Generic.SortedList%602>类。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-376">This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedList%602> class.</span></span>  
  
 [!code-cpp[Generic.SortedList#10](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#10)]
 [!code-csharp[Generic.SortedList#10](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#10)]
 [!code-vb[Generic.SortedList#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e0e1-377">
            <paramref name="key" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-377">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.Clear" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.Add(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="member this.RemoveAt : int -&gt; unit" Usage="sortedList.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <span data-ttu-id="7e0e1-378">要移除的元素的从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-378">The zero-based index of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e0e1-379">移除 <see cref="T:System.Collections.Generic.SortedList`2" /> 的指定索引处的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-379">Removes the element at the specified index of the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-380">此方法用于执行二进制搜索;但是，元素将上移来填充在打开的位置，因此此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.Generic.SortedList%602.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-380">This method performs a binary search; however, the elements are moved up to fill in the open spot, so this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7e0e1-381">
            <paramref name="index" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-381">
              <paramref name="index" /> is less than zero.</span>
          </span>
          <span data-ttu-id="7e0e1-382">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-382">-or-</span>
          </span>
          <span data-ttu-id="7e0e1-383">
            <paramref name="index" /> 等于或大于 <see cref="P:System.Collections.Generic.SortedList`2.Count" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-383">
              <paramref name="index" /> is equal to or greater than <see cref="P:System.Collections.Generic.SortedList`2.Count" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.SortedList`2.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.Clear" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.Add(`0,`1)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Add">
      <MemberSignature Language="C#" Value="void ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.Add (System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt; keyValuePair);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Add(valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt; keyValuePair) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;TKey,TValue&gt;&gt;#Add(System.Collections.Generic.KeyValuePair{`0,`1})" />
      <MemberSignature Language="VB.NET" Value="Sub Add (keyValuePair As KeyValuePair(Of TKey, TValue)) Implements ICollection(Of KeyValuePair(Of TKey, TValue)).Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Add(System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt; keyValuePair) = System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValuePair" Type="System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="keyValuePair">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Contains">
      <MemberSignature Language="C#" Value="bool ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.Contains (System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt; keyValuePair);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Contains(valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt; keyValuePair) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;TKey,TValue&gt;&gt;#Contains(System.Collections.Generic.KeyValuePair{`0,`1})" />
      <MemberSignature Language="VB.NET" Value="Function Contains (keyValuePair As KeyValuePair(Of TKey, TValue)) As Boolean Implements ICollection(Of KeyValuePair(Of TKey, TValue)).Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Contains(System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt; keyValuePair) = System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValuePair" Type="System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="keyValuePair">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.CopyTo (System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;[] array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.CopyTo(valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;[] array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;TKey,TValue&gt;&gt;#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub CopyTo (array As KeyValuePair(Of TKey, TValue)(), arrayIndex As Integer) Implements ICollection(Of KeyValuePair(Of TKey, TValue)).CopyTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.CopyTo(cli::array &lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt; ^ array, int arrayIndex) = System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;::CopyTo;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">To be added.</param>
        <param name="arrayIndex">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;TKey,TValue&gt;&gt;#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements ICollection(Of KeyValuePair(Of TKey, TValue)).IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey,TValue&gt;&gt;::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Remove">
      <MemberSignature Language="C#" Value="bool ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.Remove (System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt; keyValuePair);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Remove(valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt; keyValuePair) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection&lt;System#Collections#Generic#KeyValuePair&lt;TKey,TValue&gt;&gt;#Remove(System.Collections.Generic.KeyValuePair{`0,`1})" />
      <MemberSignature Language="VB.NET" Value="Function Remove (keyValuePair As KeyValuePair(Of TKey, TValue)) As Boolean Implements ICollection(Of KeyValuePair(Of TKey, TValue)).Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Remove(System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt; keyValuePair) = System::Collections::Generic::ICollection&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValuePair" Type="System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="keyValuePair">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Keys">
      <MemberSignature Language="C#" Value="System.Collections.Generic.ICollection&lt;TKey&gt; System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;!TKey&gt; System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary&lt;TKey,TValue&gt;#Keys" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Keys As ICollection(Of TKey) Implements IDictionary(Of TKey, TValue).Keys" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::Generic::ICollection&lt;TKey&gt; ^ System::Collections::Generic::IDictionary&lt;TKey,TValue&gt;::Keys { System::Collections::Generic::ICollection&lt;TKey&gt; ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Keys" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IDictionary`2.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Values">
      <MemberSignature Language="C#" Value="System.Collections.Generic.ICollection&lt;TValue&gt; System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;!TValue&gt; System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary&lt;TKey,TValue&gt;#Values" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Values As ICollection(Of TValue) Implements IDictionary(Of TKey, TValue).Values" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::Generic::ICollection&lt;TValue&gt; ^ System::Collections::Generic::IDictionary&lt;TKey,TValue&gt;::Values { System::Collections::Generic::ICollection&lt;TValue&gt; ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Values" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IDictionary`2.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt; IEnumerable&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt; System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#IEnumerable&lt;System#Collections#Generic#KeyValuePair&lt;TKey,TValue&gt;&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of KeyValuePair(Of TKey, TValue)) Implements IEnumerable(Of KeyValuePair(Of TKey, TValue)).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt; ^ System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;TKey, TValue&gt;&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Keys">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerable&lt;TKey&gt; System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;!TKey&gt; System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary&lt;TKey,TValue&gt;#Keys" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Keys As IEnumerable(Of TKey) Implements IReadOnlyDictionary(Of TKey, TValue).Keys" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::Generic::IEnumerable&lt;TKey&gt; ^ System::Collections::Generic::IReadOnlyDictionary&lt;TKey,TValue&gt;::Keys { System::Collections::Generic::IEnumerable&lt;TKey&gt; ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Keys" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyDictionary`2.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Values">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerable&lt;TValue&gt; System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;!TValue&gt; System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary&lt;TKey,TValue&gt;#Values" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Values As IEnumerable(Of TValue) Implements IReadOnlyDictionary(Of TKey, TValue).Values" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::Generic::IEnumerable&lt;TValue&gt; ^ System::Collections::Generic::IReadOnlyDictionary&lt;TKey,TValue&gt;::Values { System::Collections::Generic::IEnumerable&lt;TValue&gt; ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Values" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.IReadOnlyDictionary`2.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ array, int arrayIndex) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="7e0e1-384">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-384">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />.</span>
          </span>
          <span data-ttu-id="7e0e1-385">
            <see cref="T:System.Array" /> 必须具有从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-385">The <see cref="T:System.Array" /> must have zero-based indexing.</span>
          </span>
        </param>
        <param name="arrayIndex">
          <span data-ttu-id="7e0e1-386">
            <c>array</c> 中从零开始的索引，在此处开始复制。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-386">The zero-based index in <c>array</c> at which copying begins.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e0e1-387">从特定的 <see cref="T:System.Collections.ICollection" /> 索引处开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-387">Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="7e0e1-388">如果源的类型<xref:System.Collections.ICollection>不能自动强制转换为目标的类型`array`的非泛型实现<xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType>引发<xref:System.InvalidCastException>，而泛型实现会引发<xref:System.ArgumentException>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-388">If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the non-generic implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType> throw <xref:System.InvalidCastException>, whereas the generic implementations throw <xref:System.ArgumentException>.</span></span>  
  
 <span data-ttu-id="7e0e1-389">此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.Generic.SortedList%602.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-389">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e0e1-390">
            <paramref name="array" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-390">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="7e0e1-391">
            <paramref name="arrayIndex" /> 小于零。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-391">
              <paramref name="arrayIndex" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7e0e1-392">
            <paramref name="array" /> 是多维的。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-392">
              <paramref name="array" /> is multidimensional.</span>
          </span>
          <span data-ttu-id="7e0e1-393">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-393">-or-</span>
          </span>
          <span data-ttu-id="7e0e1-394">
            <paramref name="array" /> 没有从零开始的索引。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-394">
              <paramref name="array" /> does not have zero-based indexing.</span>
          </span>
          <span data-ttu-id="7e0e1-395">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-395">-or-</span>
          </span>
          <span data-ttu-id="7e0e1-396">源 <see cref="T:System.Collections.ICollection" /> 中的元素个数大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-396">The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</span>
          </span>
          <span data-ttu-id="7e0e1-397">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-397">-or-</span>
          </span>
          <span data-ttu-id="7e0e1-398">无法自动将源 <see cref="T:System.Collections.ICollection" /> 的类型转换为目标 <paramref name="array" /> 的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-398">The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7e0e1-399">获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-399">Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7e0e1-400">如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-400">
              <see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="7e0e1-401">在 <see cref="T:System.Collections.Generic.SortedList`2" /> 的默认实现中，此属性始终返回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-401">In the default implementation of <see cref="T:System.Collections.Generic.SortedList`2" />, this property always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-402">集合中的默认实现<xref:System.Collections.Generic?displayProperty=nameWithType>不同步。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-402">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="7e0e1-403">枚举整个集合本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-403">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="7e0e1-404">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-404">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="7e0e1-405">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-405">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="7e0e1-406"><xref:System.Collections.ICollection.SyncRoot%2A>属性返回一个对象，可用于同步对<xref:System.Collections.ICollection>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-406">The <xref:System.Collections.ICollection.SyncRoot%2A> property returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="7e0e1-407">同步是所有线程访问集合之前都锁定此对象时才有效。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-407">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span>  
  
 <span data-ttu-id="7e0e1-408">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-408">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.SyncRoot" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7e0e1-409">获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-409">Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7e0e1-410">可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-410">An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</span>
          </span>
          <span data-ttu-id="7e0e1-411">在 <see cref="T:System.Collections.Generic.SortedList`2" /> 的默认实现中，此属性始终返回当前实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-411">In the default implementation of <see cref="T:System.Collections.Generic.SortedList`2" />, this property always returns the current instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-412">集合中的默认实现<xref:System.Collections.Generic?displayProperty=nameWithType>不同步。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-412">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="7e0e1-413">枚举整个集合本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-413">Enumerating through a collection is intrinsically not a thread-safe procedure.</span></span> <span data-ttu-id="7e0e1-414">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-414">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span> <span data-ttu-id="7e0e1-415">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-415">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="7e0e1-416"><xref:System.Collections.ICollection.SyncRoot%2A>属性返回一个对象，可用于同步对<xref:System.Collections.ICollection>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-416">The <xref:System.Collections.ICollection.SyncRoot%2A> property returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>.</span></span> <span data-ttu-id="7e0e1-417">同步是所有线程访问集合之前都锁定此对象时才有效。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-417">Synchronization is effective only if all threads lock this object before accessing the collection.</span></span> <span data-ttu-id="7e0e1-418">下面的代码演示如何使用<xref:System.Collections.ICollection.SyncRoot%2A>C#、 c + + 和 Visual Basic 的属性。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-418">The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.</span></span>  
  
```csharp  
ICollection ic = ...;  
lock (ic.SyncRoot) {  
   // Access the collection.  
}  
```  
  
```vb  
Dim ic As ICollection = ...  
SyncLock ic.SyncRoot  
   ' Access the collection.  
End SyncLock  
```  
  
```cpp#  
ICollection^ ic = ...;  
try {  
   Monitor::Enter(ic->SyncRoot);  
   // Access the collection.  
}  
finally {  
   Monitor::Exit(ic->SyncRoot);  
}  
```  
  
 <span data-ttu-id="7e0e1-419">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-419">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ICollection.IsSynchronized" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Add">
      <MemberSignature Language="C#" Value="void IDictionary.Add (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IDictionary.Add(object key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Add (key As Object, value As Object) Implements IDictionary.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IDictionary.Add(System::Object ^ key, System::Object ^ value) = System::Collections::IDictionary::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Add(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="7e0e1-420">用作要添加的元素的键的 <see cref="T:System.Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-420">The <see cref="T:System.Object" /> to use as the key of the element to add.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="7e0e1-421">用作要添加的元素的键的 <see cref="T:System.Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-421">The <see cref="T:System.Object" /> to use as the value of the element to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e0e1-422">向 <see cref="T:System.Collections.IDictionary" /> 添加一个带有所提供的键和值的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-422">Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-423">此外可以使用<xref:System.Collections.IDictionary.Item%2A>属性来添加新元素不存在的键的值设置在字典中; 例如， `myCollection["myNonexistentKey"] = myValue`。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-423">You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, `myCollection["myNonexistentKey"] = myValue`.</span></span> <span data-ttu-id="7e0e1-424">但是，如果在字典中已存在指定的键，则将设置<xref:System.Collections.IDictionary.Item%2A>属性将会覆盖旧值。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-424">However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="7e0e1-425">与此相反，<xref:System.Collections.IDictionary.Add%2A>方法不会修改现有元素。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-425">In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="7e0e1-426">此方法为 O (`n`) 操作对于未排序数据，其中`n`是<xref:System.Collections.Generic.SortedList%602.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-426">This method is an O(`n`) operation for unsorted data, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span> <span data-ttu-id="7e0e1-427">它是 O (log `n`) 操作，如果在列表的末尾添加了新元素。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-427">It is an O(log `n`) operation if the new element is added at the end of the list.</span></span> <span data-ttu-id="7e0e1-428">如果插入导致大小调整，运算复杂度为 O (`n`)。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-428">If insertion causes a resize, the operation is O(`n`).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e0e1-429">下面的代码示例演示如何访问<xref:System.Collections.Generic.SortedList%602>类通过<xref:System.Collections.IDictionary?displayProperty=nameWithType>接口。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-429">The following code example shows how to access the <xref:System.Collections.Generic.SortedList%602> class through the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface.</span></span> <span data-ttu-id="7e0e1-430">代码示例创建一个空<xref:System.Collections.Generic.SortedList%602>的字符串与字符串键，并使用<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A>方法来添加一些元素。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-430">The code example creates an empty <xref:System.Collections.Generic.SortedList%602> of strings with string keys and uses the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> method to add some elements.</span></span> <span data-ttu-id="7e0e1-431">该示例演示<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A>方法会抛出<xref:System.ArgumentException>时尝试添加重复的键，或提供的密钥或错误的数据类型的值时。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-431">The example demonstrates that the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> method throws an <xref:System.ArgumentException> when attempting to add a duplicate key, or when a key or value of the wrong data type is supplied.</span></span>  
  
 <span data-ttu-id="7e0e1-432">代码示例演示如何将多个其他成员的<xref:System.Collections.IDictionary?displayProperty=nameWithType>接口。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-432">The code example demonstrates the use of several other members of the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface.</span></span>  
  
 [!code-csharp[Generic.SortedList.IDictionary#1](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#1)]
 [!code-vb[Generic.SortedList.IDictionary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e0e1-433">
            <paramref name="key" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-433">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7e0e1-434">
            <paramref name="key" /> 属于不能分配给 <see cref="T:System.Collections.IDictionary" /> 的键类型 <paramref name="TKey" /> 的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-434">
              <paramref name="key" /> is of a type that is not assignable to the key type <paramref name="TKey" /> of the <see cref="T:System.Collections.IDictionary" />.</span>
          </span>
          <span data-ttu-id="7e0e1-435">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-435">-or-</span>
          </span>
          <span data-ttu-id="7e0e1-436">
            <paramref name="value" /> 属于不能分配给 <see cref="T:System.Collections.IDictionary" /> 的值类型 <paramref name="TValue" /> 的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-436">
              <paramref name="value" /> is of a type that is not assignable to the value type <paramref name="TValue" /> of the <see cref="T:System.Collections.IDictionary" />.</span>
          </span>
          <span data-ttu-id="7e0e1-437">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-437">-or-</span>
          </span>
          <span data-ttu-id="7e0e1-438">
            <see cref="T:System.Collections.IDictionary" /> 中已存在具有相同键的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-438">An element with the same key already exists in the <see cref="T:System.Collections.IDictionary" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.IDictionary.Item(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Contains">
      <MemberSignature Language="C#" Value="bool IDictionary.Contains (object key);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IDictionary.Contains(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (key As Object) As Boolean Implements IDictionary.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IDictionary.Contains(System::Object ^ key) = System::Collections::IDictionary::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="7e0e1-439">要在 <see cref="T:System.Collections.IDictionary" /> 中定位的键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-439">The key to locate in the <see cref="T:System.Collections.IDictionary" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e0e1-440">确定是否 <see cref="T:System.Collections.IDictionary" /> 包含带有指定键的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-440">Determines whether the <see cref="T:System.Collections.IDictionary" /> contains an element with the specified key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e0e1-441">如果 <see langword="true" /> 包含具有键的元素，则为 <see cref="T:System.Collections.IDictionary" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-441">
              <see langword="true" /> if the <see cref="T:System.Collections.IDictionary" /> contains an element with the key; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-442">此方法返回`false`如果`key`不能赋给键的类型的类型`TKey`的<xref:System.Collections.Generic.SortedList%602>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-442">This method returns `false` if `key` is of a type that is not assignable to the key type `TKey` of the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="7e0e1-443">此方法为 O (log `n`) 操作，其中`n`是<xref:System.Collections.Generic.SortedList%602.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-443">This method is an O(log `n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e0e1-444">下面的代码示例演示如何使用<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Contains%2A>方法<xref:System.Collections.IDictionary?displayProperty=nameWithType>与<xref:System.Collections.Generic.SortedList%602>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-444">The following code example shows how to use the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Contains%2A> method of the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface with a <xref:System.Collections.Generic.SortedList%602>.</span></span> <span data-ttu-id="7e0e1-445">该示例演示此方法返回`false`如果提供的键的错误的数据类型。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-445">The example demonstrates that the method returns `false` if a key of the wrong data type is supplied.</span></span>  
  
 <span data-ttu-id="7e0e1-446">代码示例摘自一个更大的示例，包括输出中，为提供<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-446">The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> method.</span></span>  
  
 [!code-csharp[Generic.SortedList.IDictionary#31](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#31)]
 [!code-vb[Generic.SortedList.IDictionary#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#31)]  
[!code-csharp[Generic.SortedList.IDictionary#6](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#6)]
[!code-vb[Generic.SortedList.IDictionary#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#6)]  
[!code-csharp[Generic.SortedList.IDictionary#32](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#32)]
[!code-vb[Generic.SortedList.IDictionary#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e0e1-447">
            <paramref name="key" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-447">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IDictionaryEnumerator IDictionary.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IDictionaryEnumerator Implements IDictionary.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IDictionaryEnumerator ^ System.Collections.IDictionary.GetEnumerator() = System::Collections::IDictionary::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7e0e1-448">返回 <see cref="T:System.Collections.IDictionaryEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-448">Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.IDictionary" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e0e1-449">
            <see cref="T:System.Collections.IDictionaryEnumerator" /> 的一个 <see cref="T:System.Collections.IDictionary" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-449">An <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.IDictionary" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-450">`foreach` C# 语言的语句 (`for each` c + + 中`For Each`在 Visual Basic 中) 隐藏了枚举器的复杂性。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-450">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="7e0e1-451">因此，建议使用 `foreach`，而不是直接操作枚举数。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-451">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="7e0e1-452">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-452">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="7e0e1-453">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-453">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="7e0e1-454"><xref:System.Collections.IEnumerator.Reset%2A> 也会将枚举器放回此位置。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-454"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="7e0e1-455">在此位置上，未定义 <xref:System.Collections.IDictionaryEnumerator.Entry%2A>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-455">At this position, <xref:System.Collections.IDictionaryEnumerator.Entry%2A> is undefined.</span></span> <span data-ttu-id="7e0e1-456">因此，在读取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必须调用 <xref:System.Collections.IDictionaryEnumerator.Entry%2A> 将枚举器向前移动到集合的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-456">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IDictionaryEnumerator.Entry%2A>.</span></span>  
  
 <span data-ttu-id="7e0e1-457">在调用 <xref:System.Collections.IDictionaryEnumerator.Entry%2A> 或 <xref:System.Collections.IEnumerator.MoveNext%2A> 之前，<xref:System.Collections.IEnumerator.Reset%2A> 返回同一对象。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-457"><xref:System.Collections.IDictionaryEnumerator.Entry%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="7e0e1-458"><xref:System.Collections.IEnumerator.MoveNext%2A> 将 <xref:System.Collections.IDictionaryEnumerator.Entry%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-458"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IDictionaryEnumerator.Entry%2A> to the next element.</span></span>  
  
 <span data-ttu-id="7e0e1-459">如果<xref:System.Collections.IEnumerator.MoveNext%2A>越过集合，枚举器的末尾放置在集合中的最后一个元素的后面和<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-459">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="7e0e1-460">当枚举数位于此位置上，对后续调用<xref:System.Collections.IEnumerator.MoveNext%2A>还返回`false`。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-460">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="7e0e1-461">如果最后一次调用到<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`，<xref:System.Collections.IDictionaryEnumerator.Entry%2A>是不确定的。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-461">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IDictionaryEnumerator.Entry%2A> is undefined.</span></span> <span data-ttu-id="7e0e1-462">若要再次将 <xref:System.Collections.IDictionaryEnumerator.Entry%2A> 设置为集合的第一个元素，可以调用 <xref:System.Collections.IEnumerator.Reset%2A> 并接着调用 <xref:System.Collections.IEnumerator.MoveNext%2A>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-462">To set <xref:System.Collections.IDictionaryEnumerator.Entry%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="7e0e1-463">只要集合保持不变，枚举数就保持有效。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-463">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="7e0e1-464">如果进行了更改到集合中，例如添加、 修改或删除元素，该枚举数将失效且不可恢复，并且下次调用<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>引发<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-464">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="7e0e1-465">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-465">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="7e0e1-466">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-466">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="7e0e1-467">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-467">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="7e0e1-468">集合中的默认实现<xref:System.Collections.Generic?displayProperty=nameWithType>不同步。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-468">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="7e0e1-469">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-469">This method is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e0e1-470">下面的代码示例演示如何通过使用枚举已排序的列表中的键/值对`foreach`语句 (`For Each`在 Visual Basic 中`for each`c + + 中)，从而隐藏了枚举器的使用。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-470">The following code example shows how to enumerate the key/value pairs in the sorted list by using the `foreach` statement (`For Each` in Visual Basic, `for each` in C++), which hides the use of the enumerator.</span></span> <span data-ttu-id="7e0e1-471">具体而言，请注意，枚举数<xref:System.Collections.IDictionary?displayProperty=nameWithType>接口返回<xref:System.Collections.DictionaryEntry>对象而非<xref:System.Collections.Generic.KeyValuePair%602>对象。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-471">In particular, note that the enumerator for the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface returns <xref:System.Collections.DictionaryEntry> objects rather than <xref:System.Collections.Generic.KeyValuePair%602> objects.</span></span>  
  
 <span data-ttu-id="7e0e1-472">代码示例摘自一个更大的示例，包括输出中，为提供<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-472">The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> method.</span></span>  
  
 [!code-csharp[Generic.SortedList.IDictionary#31](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#31)]
 [!code-vb[Generic.SortedList.IDictionary#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#31)]  
[!code-csharp[Generic.SortedList.IDictionary#7](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#7)]
[!code-vb[Generic.SortedList.IDictionary#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#7)]  
[!code-csharp[Generic.SortedList.IDictionary#32](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#32)]
[!code-vb[Generic.SortedList.IDictionary#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.SortedList`2.GetEnumerator" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IDictionary.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IDictionary.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IDictionary.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IDictionary::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IDictionary.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7e0e1-473">获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 是否具有固定大小。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-473">Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> has a fixed size.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7e0e1-474">如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.IDictionary" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-474">
              <see langword="true" /> if the <see cref="T:System.Collections.IDictionary" /> has a fixed size; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="7e0e1-475">在 <see cref="T:System.Collections.Generic.SortedList`2" /> 的默认实现中，此属性始终返回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-475">In the default implementation of <see cref="T:System.Collections.Generic.SortedList`2" />, this property always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-476">具有固定大小的集合在创建之后不能再添加或移除元素，但是允许修改现有元素。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-476">A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</span></span>  
  
 <span data-ttu-id="7e0e1-477">具有固定大小的集合只是一个集合与防止添加和移除元素; 的包装器因此，如果在更改基础集合，包括添加或删除的元素，大小固定集合反映了这些更改。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-477">A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</span></span>  
  
 <span data-ttu-id="7e0e1-478">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-478">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.IDictionary.IsFixedSize" />
        <altmember cref="P:System.Collections.IDictionary.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IDictionary.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IDictionary.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements IDictionary.IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IDictionary::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IDictionary.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7e0e1-479">获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 是否为只读。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-479">Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> is read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7e0e1-480">如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.IDictionary" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-480">
              <see langword="true" /> if the <see cref="T:System.Collections.IDictionary" /> is read-only; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="7e0e1-481">在 <see cref="T:System.Collections.Generic.SortedList`2" /> 的默认实现中，此属性始终返回 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-481">In the default implementation of <see cref="T:System.Collections.Generic.SortedList`2" />, this property always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-482">在创建只读集合后，该集合不允许添加、移除或修改元素。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-482">A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</span></span>  
  
 <span data-ttu-id="7e0e1-483">集合是只读的只是一个集合与可防止修改集合; 的包装器因此，如果对基础集合进行更改，只读集合反映了这些更改。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-483">A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</span></span>  
  
 <span data-ttu-id="7e0e1-484">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-484">Retrieving the value of this property is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.IDictionary.IsReadOnly" />
        <altmember cref="P:System.Collections.IDictionary.IsFixedSize" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IDictionary.Item[object key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IDictionary.Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(key As Object) As Object Implements IDictionary.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IDictionary::Item[System::Object ^] { System::Object ^ get(System::Object ^ key); void set(System::Object ^ key, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IDictionary.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Item(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="7e0e1-485">要获取或设置的元素的键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-485">The key of the element to get or set.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e0e1-486">获取或设置具有指定键的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-486">Gets or sets the element with the specified key.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7e0e1-487">如果 <see langword="null" /> 不在字典中或 <paramref name="key" /> 的类型属于不能分配给 <paramref name="key" /> 的键类型 <paramref name="TKey" />，则为具有指定键的元素或 <see cref="T:System.Collections.Generic.SortedList`2" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-487">The element with the specified key, or <see langword="null" /> if <paramref name="key" /> is not in the dictionary or <paramref name="key" /> is of a type that is not assignable to the key type <paramref name="TKey" /> of the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-488">此属性返回`null`如果`key`不能赋给键的类型的类型`TKey`的<xref:System.Collections.Generic.SortedList%602>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-488">This property returns `null` if `key` is of a type that is not assignable to the key type `TKey` of the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="7e0e1-489">可以使用下面的语法通过此属性访问集合中的特定元素：`myCollection[key]`。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-489">This property provides the ability to access a specific element in the collection by using the following syntax: `myCollection[key]`.</span></span>  
  
 <span data-ttu-id="7e0e1-490">此外可以使用<xref:System.Collections.IDictionary.Item%2A>属性来添加新元素不存在的键的值设置在字典中; 例如， `myCollection["myNonexistentKey"] = myValue`。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-490">You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, `myCollection["myNonexistentKey"] = myValue`.</span></span> <span data-ttu-id="7e0e1-491">但是，如果在字典中已存在指定的键，则将设置<xref:System.Collections.IDictionary.Item%2A>属性将会覆盖旧值。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-491">However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value.</span></span> <span data-ttu-id="7e0e1-492">与此相反，<xref:System.Collections.IDictionary.Add%2A>方法不会修改现有元素。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-492">In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.</span></span>  
  
 <span data-ttu-id="7e0e1-493">使用 C# 语言[这](~/docs/csharp/language-reference/keywords/this.md)关键字来定义而不是实现索引器<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-493">The C# language uses the [this](~/docs/csharp/language-reference/keywords/this.md) keyword to define the indexers instead of implementing the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A> property.</span></span> <span data-ttu-id="7e0e1-494">Visual Basic 将 <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A> 实现为默认属性，该属性提供相同的索引功能。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-494">Visual Basic implements <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A> as a default property, which provides the same indexing functionality.</span></span>  
  
 <span data-ttu-id="7e0e1-495">检索此属性的值是 O (log `n`) 操作，其中 n 是<xref:System.Collections.Generic.SortedList%602.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-495">Retrieving the value of this property is an O(log `n`) operation, where n is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span> <span data-ttu-id="7e0e1-496">将属性设置为 O (log `n`) 操作，如果键已存在于<xref:System.Collections.Generic.SortedList%602>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-496">Setting the property is an O(log `n`) operation if the key is already in the <xref:System.Collections.Generic.SortedList%602>.</span></span> <span data-ttu-id="7e0e1-497">如果键不在列表中，将属性设置为 O (`n`) 操作的未排序的数据或 O (log `n`) 如果在列表的末尾添加了新元素。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-497">If the key is not in the list, setting the property is an O(`n`) operation for unsorted data, or O(log `n`) if the new element is added at the end of the list.</span></span> <span data-ttu-id="7e0e1-498">如果插入导致大小调整，运算复杂度为 O (`n`)。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-498">If insertion causes a resize, the operation is O(`n`).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e0e1-499">下面的代码示例演示如何使用<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A>的属性 （C# 中的索引器）<xref:System.Collections.IDictionary?displayProperty=nameWithType>与<xref:System.Collections.Generic.SortedList%602>，以及方法的属性不同于<xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=nameWithType>属性。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-499">The following code example shows how to use the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A> property (the indexer in C#) of the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface with a <xref:System.Collections.Generic.SortedList%602>, and ways the property differs from the <xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="7e0e1-500">该示例表明，，喜欢<xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=nameWithType>属性，<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType>属性可以更改与现有密钥关联的值，可以使用指定的键是否不在已排序的列表中添加新的键/值对。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-500">The example shows that, like the <xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=nameWithType> property, the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType> property can change the value associated with an existing key and can be used to add a new key/value pair if the specified key is not in the sorted list.</span></span> <span data-ttu-id="7e0e1-501">该示例还表明，与不同<xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=nameWithType>属性，<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType>属性不会引发异常，如果`key`未在已排序的列表中，返回空引用改为。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-501">The example also shows that unlike the <xref:System.Collections.Generic.SortedList%602.Item%2A?displayProperty=nameWithType> property, the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType> property does not throw an exception if `key` is not in the sorted list, returning a null reference instead.</span></span> <span data-ttu-id="7e0e1-502">最后，该示例演示获取<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType>属性返回空引用，如果`key`不是正确的数据类型，并设置该属性将引发异常，如果`key`不正确的数据类型。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-502">Finally, the example demonstrates that getting the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Item%2A?displayProperty=nameWithType> property returns a null reference if `key` is not the correct data type, and that setting the property throws an exception if `key` is not the correct data type.</span></span>  
  
 <span data-ttu-id="7e0e1-503">代码示例摘自一个更大的示例，包括输出中，为提供<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-503">The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> method.</span></span>  
  
 [!code-csharp[Generic.SortedList.IDictionary#31](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#31)]
 [!code-vb[Generic.SortedList.IDictionary#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#31)]  
[!code-csharp[Generic.SortedList.IDictionary#3](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#3)]
[!code-vb[Generic.SortedList.IDictionary#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#3)]  
[!code-csharp[Generic.SortedList.IDictionary#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#4)]
[!code-vb[Generic.SortedList.IDictionary#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#4)]  
[!code-csharp[Generic.SortedList.IDictionary#32](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#32)]
[!code-vb[Generic.SortedList.IDictionary#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e0e1-504">
            <paramref name="key" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-504">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7e0e1-505">正在分配值，并且 <paramref name="key" /> 属于不能分配给 <see cref="T:System.Collections.Generic.SortedList`2" /> 的键类型 <paramref name="TKey" /> 的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-505">A value is being assigned, and <paramref name="key" /> is of a type that is not assignable to the key type <paramref name="TKey" /> of the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
          <span data-ttu-id="7e0e1-506">或</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-506">-or-</span>
          </span>
          <span data-ttu-id="7e0e1-507">正在分配值，并且 <paramref name="value" /> 属于不能分配给 <see cref="T:System.Collections.Generic.SortedList`2" /> 的值类型 <paramref name="TValue" /> 的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-507">A value is being assigned, and <paramref name="value" /> is of a type that is not assignable to the value type <paramref name="TValue" /> of the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </exception>
        <altmember cref="P:System.Collections.Generic.SortedList`2.Item(`0)" />
        <altmember cref="M:System.Collections.IDictionary.Add(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Keys">
      <MemberSignature Language="C#" Value="System.Collections.ICollection System.Collections.IDictionary.Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection System.Collections.IDictionary.Keys" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Keys As ICollection Implements IDictionary.Keys" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::ICollection ^ System::Collections::IDictionary::Keys { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IDictionary.Keys" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Keys</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7e0e1-508">获取包含 <see cref="T:System.Collections.ICollection" /> 的键的 <see cref="T:System.Collections.IDictionary" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-508">Gets an <see cref="T:System.Collections.ICollection" /> containing the keys of the <see cref="T:System.Collections.IDictionary" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7e0e1-509">一个 <see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Collections.IDictionary" /> 的键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-509">An <see cref="T:System.Collections.ICollection" /> containing the keys of the <see cref="T:System.Collections.IDictionary" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-510">中的键的顺序<xref:System.Collections.ICollection>中的顺序相同<xref:System.Collections.Generic.SortedList%602>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-510">The order of the keys in the <xref:System.Collections.ICollection> is the same as the order in the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="7e0e1-511">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-511">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e0e1-512">下面的代码示例演示如何使用<xref:System.Collections.IDictionary.Keys%2A>的属性<xref:System.Collections.IDictionary?displayProperty=nameWithType>与<xref:System.Collections.Generic.SortedDictionary%602>，以列出字典中的键。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-512">The following code example shows how to use the <xref:System.Collections.IDictionary.Keys%2A> property of the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface with a <xref:System.Collections.Generic.SortedDictionary%602>, to list the keys in the dictionary.</span></span> <span data-ttu-id="7e0e1-513">该示例还演示如何枚举已排序的列表; 中的键/值对请注意，枚举数<xref:System.Collections.IDictionary?displayProperty=nameWithType>接口返回<xref:System.Collections.DictionaryEntry>对象而非<xref:System.Collections.Generic.KeyValuePair%602>对象。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-513">The example also shows how to enumerate the key/value pairs in the sorted list; note that the enumerator for the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface returns <xref:System.Collections.DictionaryEntry> objects rather than <xref:System.Collections.Generic.KeyValuePair%602> objects.</span></span>  
  
 <span data-ttu-id="7e0e1-514">代码示例摘自一个更大的示例，包括输出中，为提供<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-514">The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> method.</span></span>  
  
 [!code-csharp[Generic.SortedList.IDictionary#31](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#31)]
 [!code-vb[Generic.SortedList.IDictionary#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#31)]  
[!code-csharp[Generic.SortedList.IDictionary#9](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#9)]
[!code-vb[Generic.SortedList.IDictionary#9](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#9)]  
[!code-csharp[Generic.SortedList.IDictionary#7](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#7)]
[!code-vb[Generic.SortedList.IDictionary#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#7)]  
[!code-csharp[Generic.SortedList.IDictionary#32](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#32)]
[!code-vb[Generic.SortedList.IDictionary#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.Generic.SortedList`2.Keys" />
        <altmember cref="P:System.Collections.Generic.SortedList`2.Values" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Remove">
      <MemberSignature Language="C#" Value="void IDictionary.Remove (object key);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IDictionary.Remove(object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (key As Object) Implements IDictionary.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IDictionary.Remove(System::Object ^ key) = System::Collections::IDictionary::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IDictionary.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="7e0e1-515">要移除的元素的键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-515">The key of the element to remove.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e0e1-516">从 <see cref="T:System.Collections.IDictionary" /> 中移除带有指定键的元素。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-516">Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-517">此方法用于执行二进制搜索;但是，元素将上移来填充在打开的位置，因此此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.Generic.SortedList%602.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-517">This method performs a binary search; however, the elements are moved up to fill in the open spot, so this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e0e1-518">下面的代码示例演示如何使用<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Remove%2A>的<xref:System.Collections.IDictionary?displayProperty=nameWithType>与<xref:System.Collections.Generic.SortedList%602>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-518">The following code example shows how to use the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Remove%2A> of the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface with a <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="7e0e1-519">代码示例摘自一个更大的示例，包括输出中，为提供<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-519">The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> method.</span></span>  
  
 [!code-csharp[Generic.SortedList.IDictionary#31](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#31)]
 [!code-vb[Generic.SortedList.IDictionary#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#31)]  
[!code-csharp[Generic.SortedList.IDictionary#10](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#10)]
[!code-vb[Generic.SortedList.IDictionary#10](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#10)]  
[!code-csharp[Generic.SortedList.IDictionary#32](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#32)]
[!code-vb[Generic.SortedList.IDictionary#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e0e1-520">
            <paramref name="key" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-520">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.SortedList`2.Remove(`0)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Values">
      <MemberSignature Language="C#" Value="System.Collections.ICollection System.Collections.IDictionary.Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection System.Collections.IDictionary.Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Values As ICollection Implements IDictionary.Values" />
      <MemberSignature Language="C++ CLI" Value="property System::Collections::ICollection ^ System::Collections::IDictionary::Values { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IDictionary.Values" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IDictionary.Values</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7e0e1-521">获取一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 中的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-521">Gets an <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.IDictionary" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7e0e1-522">一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 中的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-522">An <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.IDictionary" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-523">中的值的顺序<xref:System.Collections.ICollection>中的顺序相同<xref:System.Collections.Generic.SortedList%602>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-523">The order of the values in the <xref:System.Collections.ICollection> is the same as the order in the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="7e0e1-524">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-524">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e0e1-525">下面的代码示例演示如何使用<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Values%2A>的属性<xref:System.Collections.IDictionary?displayProperty=nameWithType>与<xref:System.Collections.Generic.SortedList%602>，以列出已排序列表中的值。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-525">The following code example shows how to use the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Values%2A> property of the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface with a <xref:System.Collections.Generic.SortedList%602>, to list the values in the sorted list.</span></span> <span data-ttu-id="7e0e1-526">该示例还演示如何枚举已排序的列表; 中的键/值对请注意，枚举数<xref:System.Collections.IDictionary?displayProperty=nameWithType>接口返回<xref:System.Collections.DictionaryEntry>对象而非<xref:System.Collections.Generic.KeyValuePair%602>对象。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-526">The example also shows how to enumerate the key/value pairs in the sorted list; note that the enumerator for the <xref:System.Collections.IDictionary?displayProperty=nameWithType> interface returns <xref:System.Collections.DictionaryEntry> objects rather than <xref:System.Collections.Generic.KeyValuePair%602> objects.</span></span>  
  
 <span data-ttu-id="7e0e1-527">代码示例摘自一个更大的示例，包括输出中，为提供<xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-527">The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.SortedList%602.System%23Collections%23IDictionary%23Add%2A> method.</span></span>  
  
 [!code-csharp[Generic.SortedList.IDictionary#31](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#31)]
 [!code-vb[Generic.SortedList.IDictionary#31](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#31)]  
[!code-csharp[Generic.SortedList.IDictionary#8](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#8)]
[!code-vb[Generic.SortedList.IDictionary#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#8)]  
[!code-csharp[Generic.SortedList.IDictionary#7](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#7)]
[!code-vb[Generic.SortedList.IDictionary#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#7)]  
[!code-csharp[Generic.SortedList.IDictionary#32](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList.IDictionary/CS/source.cs#32)]
[!code-vb[Generic.SortedList.IDictionary#32](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList.IDictionary/VB/source.vb#32)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="P:System.Collections.Generic.SortedList`2.Keys" />
        <altmember cref="P:System.Collections.Generic.SortedList`2.Values" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7e0e1-528">返回循环访问集合的枚举数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-528">Returns an enumerator that iterates through a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e0e1-529">可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-529">An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-530">`foreach` C# 语言的语句 (`for each` c + + 中`For Each`在 Visual Basic 中) 隐藏了枚举器的复杂性。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-530">The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of the enumerators.</span></span>  <span data-ttu-id="7e0e1-531">因此，建议使用 `foreach`，而不是直接操作枚举数。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-531">Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.</span></span>  
  
 <span data-ttu-id="7e0e1-532">枚举器可用于读取集合中的数据，但不能用于修改基础集合。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-532">Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</span></span>  
  
 <span data-ttu-id="7e0e1-533">最初，枚举数定位在集合中第一个元素的前面。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-533">Initially, the enumerator is positioned before the first element in the collection.</span></span> <span data-ttu-id="7e0e1-534"><xref:System.Collections.IEnumerator.Reset%2A> 也会将枚举器放回此位置。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-534"><xref:System.Collections.IEnumerator.Reset%2A> also brings the enumerator back to this position.</span></span>  <span data-ttu-id="7e0e1-535">在此位置上，未定义 <xref:System.Collections.IEnumerator.Current%2A>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-535">At this position, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="7e0e1-536">因此，在读取 <xref:System.Collections.IEnumerator.MoveNext%2A> 的值之前，必须调用 <xref:System.Collections.IEnumerator.Current%2A> 将枚举器向前移动到集合的第一个元素。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-536">Therefore, you must call <xref:System.Collections.IEnumerator.MoveNext%2A> to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.</span></span>  
  
 <span data-ttu-id="7e0e1-537">在调用 <xref:System.Collections.IEnumerator.Current%2A> 或 <xref:System.Collections.IEnumerator.MoveNext%2A> 之前，<xref:System.Collections.IEnumerator.Reset%2A> 返回同一对象。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-537"><xref:System.Collections.IEnumerator.Current%2A> returns the same object until either <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> is called.</span></span> <span data-ttu-id="7e0e1-538"><xref:System.Collections.IEnumerator.MoveNext%2A> 将 <xref:System.Collections.IEnumerator.Current%2A> 设置为下一个元素。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-538"><xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.</span></span>  
  
 <span data-ttu-id="7e0e1-539">如果<xref:System.Collections.IEnumerator.MoveNext%2A>越过集合，枚举器的末尾放置在集合中的最后一个元素的后面和<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-539">If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`.</span></span> <span data-ttu-id="7e0e1-540">当枚举数位于此位置上，对后续调用<xref:System.Collections.IEnumerator.MoveNext%2A>还返回`false`。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-540">When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`.</span></span> <span data-ttu-id="7e0e1-541">如果最后一次调用到<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`，<xref:System.Collections.IEnumerator.Current%2A>是不确定的。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-541">If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined.</span></span> <span data-ttu-id="7e0e1-542">若要再次将 <xref:System.Collections.IEnumerator.Current%2A> 设置为集合的第一个元素，可以调用 <xref:System.Collections.IEnumerator.Reset%2A> 并接着调用 <xref:System.Collections.IEnumerator.MoveNext%2A>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-542">To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.</span></span>  
  
 <span data-ttu-id="7e0e1-543">只要集合保持不变，枚举数就保持有效。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-543">An enumerator remains valid as long as the collection remains unchanged.</span></span> <span data-ttu-id="7e0e1-544">如果进行了更改到集合中，例如添加、 修改或删除元素，该枚举数将失效且不可恢复，并且下次调用<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>引发<xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-544">If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> throws an <xref:System.InvalidOperationException>.</span></span>  
  
 <span data-ttu-id="7e0e1-545">枚举数没有对集合的独占访问权；因此，从头到尾对一个集合进行枚举在本质上不是一个线程安全的过程。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-545">The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</span></span>  <span data-ttu-id="7e0e1-546">若要确保枚举过程中的线程安全性，可以在整个枚举过程中锁定集合。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-546">To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</span></span>  <span data-ttu-id="7e0e1-547">若要允许多个线程访问集合以进行读写操作，则必须实现自己的同步。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-547">To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</span></span>  
  
 <span data-ttu-id="7e0e1-548">集合中的默认实现<xref:System.Collections.Generic?displayProperty=nameWithType>不同步。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-548">Default implementations of collections in <xref:System.Collections.Generic?displayProperty=nameWithType> are not synchronized.</span></span>  
  
 <span data-ttu-id="7e0e1-549">此方法为 o （1） 运算。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-549">This method is an O(1) operation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.SortedList`2.GetEnumerator" />
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="TrimExcess">
      <MemberSignature Language="C#" Value="public void TrimExcess ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TrimExcess() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.TrimExcess" />
      <MemberSignature Language="VB.NET" Value="Public Sub TrimExcess ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TrimExcess();" />
      <MemberSignature Language="F#" Value="member this.TrimExcess : unit -&gt; unit" Usage="sortedList.TrimExcess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7e0e1-550">如果元素数小于当前容量的 90%，将容量设置为 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的实际元素数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-550">Sets the capacity to the actual number of elements in the <see cref="T:System.Collections.Generic.SortedList`2" />, if that number is less than 90 percent of current capacity.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-551">此方法可用于最小化集合的内存开销如果任何新元素将不添加到集合。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-551">This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</span></span> <span data-ttu-id="7e0e1-552">重新分配和复制较大的成本<xref:System.Collections.Generic.SortedList%602>但是，有时会很大，因此<xref:System.Collections.Generic.SortedList%602.TrimExcess%2A>方法不会执行任何操作，如果列表为在多个容量的 90%。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-552">The cost of reallocating and copying a large <xref:System.Collections.Generic.SortedList%602> can be considerable, however, so the <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> method does nothing if the list is at more than 90 percent of capacity.</span></span> <span data-ttu-id="7e0e1-553">这样可以避免产生相对较小增益的大型的重新分配费用。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-553">This avoids incurring a large reallocation cost for a relatively small gain.</span></span>  
  
 <span data-ttu-id="7e0e1-554">此方法为 O (`n`) 操作，其中`n`是<xref:System.Collections.Generic.SortedList%602.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-554">This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
 <span data-ttu-id="7e0e1-555">若要重置<xref:System.Collections.Generic.SortedList%602>为其初始状态，请在调用<xref:System.Collections.Generic.SortedList%602.Clear%2A>方法之前调用<xref:System.Collections.Generic.SortedList%602.TrimExcess%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-555">To reset a <xref:System.Collections.Generic.SortedList%602> to its initial state, call the <xref:System.Collections.Generic.SortedList%602.Clear%2A> method before calling <xref:System.Collections.Generic.SortedList%602.TrimExcess%2A> method.</span></span> <span data-ttu-id="7e0e1-556">截去空<xref:System.Collections.Generic.SortedList%602>的容量设置<xref:System.Collections.Generic.SortedList%602>到默认容量。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-556">Trimming an empty <xref:System.Collections.Generic.SortedList%602> sets the capacity of the <xref:System.Collections.Generic.SortedList%602> to the default capacity.</span></span>  
  
 <span data-ttu-id="7e0e1-557">也可以使用设置容量<xref:System.Collections.Generic.SortedList%602.Capacity%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-557">The capacity can also be set using the <xref:System.Collections.Generic.SortedList%602.Capacity%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Generic.SortedList`2.Clear" />
        <altmember cref="P:System.Collections.Generic.SortedList`2.Capacity" />
        <altmember cref="P:System.Collections.Generic.SortedList`2.Count" />
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TKey key, out TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetValue(!TKey key, [out] !TValue&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (key As TKey, ByRef value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool TryGetValue(TKey key, [Runtime::InteropServices::Out] TValue % value);" />
      <MemberSignature Language="F#" Value="abstract member TryGetValue : 'Key *  -&gt; bool&#xA;override this.TryGetValue : 'Key *  -&gt; bool" Usage="sortedList.TryGetValue (key, value)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)</InterfaceMember>
        <InterfaceMember>M:System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">
          <span data-ttu-id="7e0e1-558">要获取其值的键。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-558">The key whose value to get.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="7e0e1-559">当此方法返回时，如果找到指定键，则返回与该键关联的值；否则，返回 <c>value</c> 参数的类型的默认值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-559">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <c>value</c> parameter.</span>
          </span>
          <span data-ttu-id="7e0e1-560">此参数未经初始化即被传递。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-560">This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7e0e1-561">获取与指定键关联的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-561">Gets the value associated with the specified key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7e0e1-562">如果 <see langword="true" /> 包含具有指定键的元素，则为 <see cref="T:System.Collections.Generic.SortedList`2" />；否则为 <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-562">
              <see langword="true" /> if the <see cref="T:System.Collections.Generic.SortedList`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-563">此方法将的功能组合<xref:System.Collections.Generic.SortedList%602.ContainsKey%2A>方法和<xref:System.Collections.Generic.SortedList%602.Item%2A>属性。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-563">This method combines the functionality of the <xref:System.Collections.Generic.SortedList%602.ContainsKey%2A> method and the <xref:System.Collections.Generic.SortedList%602.Item%2A> property.</span></span>  
  
 <span data-ttu-id="7e0e1-564">如果未找到该键，则`value`参数的值类型获取适当的默认值`TValue`; 例如，对于整数类型，零 (0)`false`为布尔值类型和`null`对于引用类型。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-564">If the key is not found, then the `value` parameter gets the appropriate default value for the value type `TValue`; for example, zero (0) for integer types, `false` for Boolean types, and `null` for reference types.</span></span>  
  
 <span data-ttu-id="7e0e1-565">此方法用于执行二进制搜索;因此，此方法为 O (log `n`) 操作，其中`n`是<xref:System.Collections.Generic.SortedList%602.Count%2A>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-565">This method performs a binary search; therefore, this method is an O(log `n`) operation, where `n` is <xref:System.Collections.Generic.SortedList%602.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e0e1-566">该示例演示如何使用<xref:System.Collections.Generic.SortedList%602.TryGetValue%2A>方法作为更高效的方法来检索经常尝试不在已排序的列表中的键的程序中的值。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-566">The example shows how to use the <xref:System.Collections.Generic.SortedList%602.TryGetValue%2A> method as a more efficient way to retrieve values in a program that frequently tries keys that are not in the sorted list.</span></span> <span data-ttu-id="7e0e1-567">与之相反，对于该示例还演示如何将<xref:System.Collections.Generic.SortedList%602.Item%2A>属性 （C# 中的索引器） 在尝试检索不存在的键时引发异常。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-567">For contrast, the example also shows how the <xref:System.Collections.Generic.SortedList%602.Item%2A> property (the indexer in C#) throws exceptions when attempting to retrieve nonexistent keys.</span></span>  
  
 <span data-ttu-id="7e0e1-568">此代码示例是为提供一个更大示例的一部分<xref:System.Collections.Generic.SortedList%602>类。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-568">This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedList%602> class.</span></span>  
  
 [!code-cpp[Generic.SortedList#5](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#5)]
 [!code-csharp[Generic.SortedList#5](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#5)]
 [!code-vb[Generic.SortedList#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#5)]  
[!code-cpp[Generic.SortedList#4](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#4)]
[!code-csharp[Generic.SortedList#4](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#4)]
[!code-vb[Generic.SortedList#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7e0e1-569">
            <paramref name="key" /> 为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-569">
              <paramref name="key" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)" />
        <altmember cref="P:System.Collections.Generic.SortedList`2.Item(`0)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)" />
        <altmember cref="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)" />
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;TValue&gt; Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;!TValue&gt; Values" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Generic.SortedList`2.Values" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Values As IList(Of TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;TValue&gt; ^ Values { System::Collections::Generic::IList&lt;TValue&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Values : System.Collections.Generic.IList&lt;'Value&gt;" Usage="System.Collections.Generic.SortedList&lt;'Key, 'Value&gt;.Values" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="7e0e1-570">获得一个包含 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的值的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-570">Gets a collection containing the values in the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="7e0e1-571">一个 <see cref="T:System.Collections.Generic.IList`1" />，包含 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的值。</span>
          <span class="sxs-lookup">
            <span data-stu-id="7e0e1-571">A <see cref="T:System.Collections.Generic.IList`1" /> containing the values in the <see cref="T:System.Collections.Generic.SortedList`2" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7e0e1-572">中的值的顺序<xref:System.Collections.Generic.IList%601>中的顺序相同<xref:System.Collections.Generic.SortedList%602>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-572">The order of the values in the <xref:System.Collections.Generic.IList%601> is the same as the order in the <xref:System.Collections.Generic.SortedList%602>.</span></span>  
  
 <span data-ttu-id="7e0e1-573">返回<xref:System.Collections.Generic.IList%601>不是静态副本，而是，<xref:System.Collections.Generic.IList%601>表示返回的值在原始<xref:System.Collections.Generic.SortedList%602>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-573">The returned <xref:System.Collections.Generic.IList%601> is not a static copy; instead, the <xref:System.Collections.Generic.IList%601> refers back to the values in the original <xref:System.Collections.Generic.SortedList%602>.</span></span> <span data-ttu-id="7e0e1-574">因此，更改为<xref:System.Collections.Generic.SortedList%602>继续反映在<xref:System.Collections.Generic.IList%601>。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-574">Therefore, changes to the <xref:System.Collections.Generic.SortedList%602> continue to be reflected in the <xref:System.Collections.Generic.IList%601>.</span></span>  
  
 <span data-ttu-id="7e0e1-575">返回的集合<xref:System.Collections.Generic.SortedList%602.Values%2A>属性提供按索引检索值的有效方法。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-575">The collection returned by the <xref:System.Collections.Generic.SortedList%602.Values%2A> property provides an efficient way to retrieve values by index.</span></span> <span data-ttu-id="7e0e1-576">不需要重新生成列表时访问的属性，因为列表是只是值的内部数组的包装器。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-576">It is not necessary to regenerate the list when the property is accessed, because the list is just a wrapper for the internal array of values.</span></span> <span data-ttu-id="7e0e1-577">下面的代码演示如何使用<xref:System.Collections.Generic.SortedList%602.Values%2A>属性执行索引检索的字符串的排序列表中的值：</span><span class="sxs-lookup"><span data-stu-id="7e0e1-577">The following code shows the use of the <xref:System.Collections.Generic.SortedList%602.Values%2A> property for indexed retrieval of values from a sorted list of strings:</span></span>  
  
 [!code-cpp[Generic.SortedList#11](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/remarks.cpp#11)]
 [!code-csharp[Generic.SortedList#11](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/remarks.cs#11)]
 [!code-vb[Generic.SortedList#11](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/remarks.vb#11)]  
  
 <span data-ttu-id="7e0e1-578">检索此属性的值的运算复杂度为 O(1)。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-578">Retrieving the value of this property is an O(1) operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7e0e1-579">此代码示例演示如何枚举在已排序的列表中使用的值<xref:System.Collections.Generic.SortedList%602.Values%2A>属性，以及如何枚举的键和已排序的列表中的值。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-579">This code example shows how to enumerate the values in the sorted list using the <xref:System.Collections.Generic.SortedList%602.Values%2A> property, and how to enumerate the keys and values in the sorted list.</span></span>  
  
 <span data-ttu-id="7e0e1-580">该示例还演示如何使用<xref:System.Collections.Generic.SortedList%602.Values%2A>高效索引检索值的属性。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-580">The example also shows how to use the <xref:System.Collections.Generic.SortedList%602.Values%2A> property for efficient indexed retrieval of values.</span></span>  
  
 <span data-ttu-id="7e0e1-581">此代码示例是为提供一个更大示例的一部分<xref:System.Collections.Generic.SortedList%602>类。</span><span class="sxs-lookup"><span data-stu-id="7e0e1-581">This code example is part of a larger example provided for the <xref:System.Collections.Generic.SortedList%602> class.</span></span>  
  
 [!code-cpp[Generic.SortedList#8](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#8)]
 [!code-csharp[Generic.SortedList#8](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#8)]
 [!code-vb[Generic.SortedList#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#8)]  
[!code-cpp[Generic.SortedList#7](~/samples/snippets/cpp/VS_Snippets_CLR/Generic.SortedList/cpp/source.cpp#7)]
[!code-csharp[Generic.SortedList#7](~/samples/snippets/csharp/VS_Snippets_CLR/Generic.SortedList/CS/source.cs#7)]
[!code-vb[Generic.SortedList#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/Generic.SortedList/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IList`1" />
        <altmember cref="P:System.Collections.Generic.SortedList`2.Keys" />
      </Docs>
    </Member>
  </Members>
</Type>