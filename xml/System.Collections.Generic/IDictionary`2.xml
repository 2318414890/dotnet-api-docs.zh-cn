<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IDictionary`2.xml" source-language="en-US" target-language="zh-CN">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5d63ca205014079b51a43184fd4357d42421abe16.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d63ca205014079b51a43184fd4357d42421abe16</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.5,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The type of keys in the dictionary.</source>
          <target state="translated">字典中键的类型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The type of values in the dictionary.</source>
          <target state="translated">字典中值的类型。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.IDictionary`2">
          <source>Represents a generic collection of key/value pairs.</source>
          <target state="translated">表示键/值对的泛型集合。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface is the base interface for generic collections of key/value pairs.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph>接口是键/值对的泛型集合的基接口。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>Each element is a key/value pair stored in a <ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph> object.</source>
          <target state="translated">每个元素是存储在一个键/值对<ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph>对象。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>Each pair must have a unique key.</source>
          <target state="translated">每个对必须具有唯一键。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>Implementations can vary in whether they allow <ph id="ph1">`key`</ph> to be <ph id="ph2">`null`</ph>.</source>
          <target state="translated">实现可以改变是否允许<ph id="ph1">`key`</ph>要<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The value can be <ph id="ph1">`null`</ph> and does not have to be unique.</source>
          <target state="translated">该值可以为<ph id="ph1">`null`</ph>和不必是唯一的。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface allows the contained keys and values to be enumerated, but it does not imply any particular sort order.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph>接口允许的所包含的键和值进行枚举，但它并不表示任何特定的排序顺序。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`For Each`</ph> in Visual Basic, <ph id="ph3">`for each`</ph> in C++) returns an object of the type of the elements in the collection.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> C# 语言的语句 (<ph id="ph2">`For Each`</ph>在 Visual Basic 中， <ph id="ph3">`for each`</ph> c + + 中) 返回集合中的元素的类型的对象。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>Since each element of the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> is a key/value pair, the element type is not the type of the key or the type of the value.</source>
          <target state="translated">由于每个元素的<ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph>是一个键/值对，元素类型不是键的类型或值的类型。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>Instead, the element type is <ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph>.</source>
          <target state="translated">相反，元素类型是<ph id="ph1">&lt;xref:System.Collections.Generic.KeyValuePair%602&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>For example:</source>
          <target state="translated">例如:</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The <ph id="ph1">`foreach`</ph> statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph>语句是枚举数，仅允许从，不写入集合读取周围的包装器。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>Because keys can be inherited and their behavior changed, their absolute uniqueness cannot be guaranteed by comparisons using the <ph id="ph1">&lt;xref:System.Type.Equals%2A&gt;</ph> method.</source>
          <target state="translated">因为可以继承密钥，但不更改其行为，使用比较能保证其绝对唯一性<ph id="ph1">&lt;xref:System.Type.Equals%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The following code example creates an empty <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> of strings, with string keys, and accesses it through the <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface.</source>
          <target state="translated">下面的代码示例创建一个空<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>的字符串，对于字符串密钥，并访问其传递<ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph>接口。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The code example uses the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> method to add some elements.</source>
          <target state="translated">此代码示例使用<ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph>方法添加一些元素。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The example demonstrates that the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> method throws <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> when attempting to add a duplicate key.</source>
          <target state="translated">该示例演示<ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph>方法抛出异常<ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph>时尝试添加重复的键。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The example uses the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> property (the indexer in C#) to retrieve values, demonstrating that a <ph id="ph2">&lt;xref:System.Collections.Generic.KeyNotFoundException&gt;</ph> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.</source>
          <target state="translated">该示例使用<ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph>属性 （C# 中的索引器） 来检索值，演示<ph id="ph2">&lt;xref:System.Collections.Generic.KeyNotFoundException&gt;</ph>请求的键不存在，并且可以替换与某个键相关联的值的显示时引发。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A&gt;</ph> method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary, and how to use the <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A&gt;</ph> method to test whether a key exists prior to calling the <ph id="ph3">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> method.</source>
          <target state="translated">该示例演示如何使用<ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A&gt;</ph>方法作为更高效的方法来检索值，如果程序必须经常尝试在字典，以及如何使用不<ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A&gt;</ph>方法来测试是否在调用之前存在的项<ph id="ph3">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>Finally, the example shows how to enumerate the keys and values in the dictionary, and how to enumerate the values alone using the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Values%2A&gt;</ph> property.</source>
          <target state="translated">最后，该示例演示如何枚举的键和值在字典，以及如何枚举的值单独使用<ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Values%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.IDictionary`2">
          <source>The implementing class must have a means to compare keys.</source>
          <target state="translated">实现类必须具有对键进行比较的方法。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>The object to use as the key of the element to add.</source>
          <target state="translated">用作要添加的元素的键的对象。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>The object to use as the value of the element to add.</source>
          <target state="translated">用作要添加的元素的值的对象。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>Adds an element with the provided key and value to the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</source>
          <target state="translated">向 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> 添加一个带有所提供的键和值的元素。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, <ph id="ph2">`myCollection["myNonexistentKey"] = myValue`</ph> in C# (<ph id="ph3">`myCollection("myNonexistentKey") = myValue`</ph> in Visual Basic).</source>
          <target state="translated">你还可以使用<ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph>属性不存在的键的值设置字典; 中添加新元素，例如， <ph id="ph2">`myCollection["myNonexistentKey"] = myValue`</ph> C# 中 (<ph id="ph3">`myCollection("myNonexistentKey") = myValue`</ph>在 Visual Basic 中)。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>However, if the specified key already exists in the dictionary, setting the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> property overwrites the old value.</source>
          <target state="translated">但是，如果在字典中已存在指定的键，则将设置<ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph>属性将会覆盖旧值。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>In contrast, the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> method does not modify existing elements.</source>
          <target state="translated">与此相反，<ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph>方法不会修改现有元素。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>Implementations can vary in how they determine equality of objects; for example, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class uses <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>, whereas the <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class allows the user to specify the <ph id="ph4">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation to use for comparing keys.</source>
          <target state="translated">实现可以改变如何确定相等性的对象;例如，<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>类使用<ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>，而<ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>类允许用户指定<ph id="ph4">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph>实现要用于对键进行比较。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>Implementations can vary in whether they allow <ph id="ph1">`key`</ph> to be <ph id="ph2">`null`</ph>.</source>
          <target state="translated">实现可以改变是否允许<ph id="ph1">`key`</ph>要<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>The following code example creates an empty <ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> of strings, with integer keys, and accesses it through the <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface.</source>
          <target state="translated">下面的代码示例创建一个空<ph id="ph1">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>的字符串，其中有整数键，并访问它通过<ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph>接口。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>The code example uses the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> method to add some elements.</source>
          <target state="translated">此代码示例使用<ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph>方法添加一些元素。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>The example demonstrates that the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> method throws an <ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph> when attempting to add a duplicate key.</source>
          <target state="translated">该示例演示<ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph>方法抛出异常<ph id="ph2">&lt;xref:System.ArgumentException&gt;</ph>时尝试添加重复的键。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>This code is part of a larger example that can be compiled and executed.</source>
          <target state="translated">此代码是示例的一个更大可以编译和执行的一部分。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>See <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">请参阅 <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>An element with the same key already exists in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> 中已存在具有相同键的元素。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> 为只读。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source>The key to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</source>
          <target state="translated">要在 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> 中定位的键。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source>Determines whether the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> contains an element with the specified key.</source>
          <target state="translated">确定是否 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> 包含带有指定键的元素。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> contains an element with the key; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果 <ph id="ph1">&lt;see langword="true" /&gt;</ph> 包含具有键的元素，则为 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>；否则为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source>Implementations can vary in how they determine equality of objects; for example, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class uses <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>, whereas the <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class allows the user to specify the <ph id="ph4">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation to use for comparing keys.</source>
          <target state="translated">实现可以改变如何确定相等性的对象;例如，<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>类使用<ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>，而<ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>类允许用户指定<ph id="ph4">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph>实现要用于对键进行比较。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source>Implementations can vary in whether they allow <ph id="ph1">`key`</ph> to be <ph id="ph2">`null`</ph>.</source>
          <target state="translated">实现可以改变是否允许<ph id="ph1">`key`</ph>要<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source>The following code example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A&gt;</ph> method to test whether a key exists prior to calling the <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> method.</source>
          <target state="translated">下面的代码示例演示如何使用<ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A&gt;</ph>方法来测试是否在调用之前存在的项<ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source>It also shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A&gt;</ph> method, which can be a more efficient way to retrieve values if a program frequently tries key values that are not in the dictionary.</source>
          <target state="translated">它还演示如何使用<ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A&gt;</ph>方法，可能是一种更高效的方法来检索值，如果程序频繁尝试不在字典中的键值。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source>Finally, it shows how to insert items using <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> property (the indexer in C#).</source>
          <target state="translated">最后，它演示如何插入使用项<ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph>属性 （C# 中的索引器）。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source>This code is part of a larger example that can be compiled and executed.</source>
          <target state="translated">此代码是示例的一个更大可以编译和执行的一部分。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source>See <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">请参阅 <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>The key of the element to get or set.</source>
          <target state="translated">要获取或设置的元素的键。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>Gets or sets the element with the specified key.</source>
          <target state="translated">获取或设置具有指定键的元素。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>The element with the specified key.</source>
          <target state="translated">带有指定键的元素。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>This property provides the ability to access a specific element in the collection by using the following syntax: <ph id="ph1">`myCollection[key]`</ph> (<ph id="ph2">`myCollection(key)`</ph> in Visual Basic).</source>
          <target state="translated">此属性提供能够通过使用以下语法访问集合中的特定元素： <ph id="ph1">`myCollection[key]`</ph> (<ph id="ph2">`myCollection(key)`</ph>在 Visual Basic 中)。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>You can also use the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, <ph id="ph2">`myCollection["myNonexistentKey"] = myValue`</ph> in C# (<ph id="ph3">`myCollection("myNonexistentKey") = myValue`</ph> in Visual Basic).</source>
          <target state="translated">你还可以使用<ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph>属性不存在的键的值设置字典; 中添加新元素，例如， <ph id="ph2">`myCollection["myNonexistentKey"] = myValue`</ph> C# 中 (<ph id="ph3">`myCollection("myNonexistentKey") = myValue`</ph>在 Visual Basic 中)。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>However, if the specified key already exists in the dictionary, setting the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> property overwrites the old value.</source>
          <target state="translated">但是，如果在字典中已存在指定的键，则将设置<ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph>属性将会覆盖旧值。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>In contrast, the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph> method does not modify existing elements.</source>
          <target state="translated">与此相反，<ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Add%2A&gt;</ph>方法不会修改现有元素。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>Implementations can vary in how they determine equality of objects; for example, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class uses <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>, whereas the <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class allows the user to specify the <ph id="ph4">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation to use for comparing keys.</source>
          <target state="translated">实现可以改变如何确定相等性的对象;例如，<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>类使用<ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>，而<ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>类允许用户指定<ph id="ph4">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph>实现要用于对键进行比较。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>The C# language uses the  keyword to define the indexers instead of implementing the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> property.</source>
          <target state="translated">C# 语言使用关键字进行定义而不是实现索引器<ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>Visual Basic implements <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> as a default property, which provides the same indexing functionality.</source>
          <target state="translated">Visual Basic 将 <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> 实现为默认属性，该属性提供相同的索引功能。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>Implementations can vary in whether they allow <ph id="ph1">`key`</ph> to be <ph id="ph2">`null`</ph>.</source>
          <target state="translated">实现可以改变是否允许<ph id="ph1">`key`</ph>要<ph id="ph2">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>The following code example uses the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> property (the indexer in C#) to retrieve values, demonstrating that a <ph id="ph2">&lt;xref:System.Collections.Generic.KeyNotFoundException&gt;</ph> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.</source>
          <target state="translated">下面的代码示例使用<ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph>属性 （C# 中的索引器） 来检索值，演示<ph id="ph2">&lt;xref:System.Collections.Generic.KeyNotFoundException&gt;</ph>请求的键不存在，并且可以替换与某个键相关联的值的显示时引发。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>The example also shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A&gt;</ph> method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary.</source>
          <target state="translated">该示例还演示如何使用<ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A&gt;</ph>作为更有效的方式，当程序必须经常尝试在字典中不检索值的方法。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>This code is part of a larger example that can be compiled and executed.</source>
          <target state="translated">此代码是示例的一个更大可以编译和执行的一部分。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>See <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">请参阅 <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>The property is retrieved and <ph id="ph1">&lt;paramref name="key" /&gt;</ph> is not found.</source>
          <target state="translated">检索了属性但没有找到 <ph id="ph1">&lt;paramref name="key" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.IDictionary`2.Item(`0)">
          <source>The property is set and the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> is read-only.</source>
          <target state="translated">设置了该属性，但 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> 为只读。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.IDictionary`2.Keys">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> containing the keys of the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</source>
          <target state="translated">获取包含 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> 的键的 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Keys">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> containing the keys of the object that implements <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph>，它包含实现 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> 的对象的键。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Keys">
          <source>The order of the keys in the returned <ph id="ph1">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> is unspecified, but it is guaranteed to be the same order as the corresponding values in the <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> returned by the <ph id="ph3">&lt;xref:System.Collections.Generic.IDictionary%602.Values%2A&gt;</ph> property.</source>
          <target state="translated">在返回键的顺序<ph id="ph1">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>未指定，但可以保证要中相应的值的顺序相同<ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>返回<ph id="ph3">&lt;xref:System.Collections.Generic.IDictionary%602.Values%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Keys">
          <source>The following code example shows how to enumerate keys alone using the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Keys%2A&gt;</ph> property.</source>
          <target state="translated">下面的代码示例演示如何枚举密钥单独使用<ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Keys%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Keys">
          <source>This code is part of a larger example that can be compiled and executed.</source>
          <target state="translated">此代码是示例的一个更大可以编译和执行的一部分。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Keys">
          <source>See <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">请参阅 <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
          <source>The key of the element to remove.</source>
          <target state="translated">要移除的元素的键。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
          <source>Removes the element with the specified key from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</source>
          <target state="translated">从 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> 中移除带有指定键的元素。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the element is successfully removed; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果该元素已成功移除，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则为 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
          <source>This method also returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> if <ph id="ph2">&lt;paramref name="key" /&gt;</ph> was not found in the original <ph id="ph3">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</source>
          <target state="translated">如果在原始 <ph id="ph1">&lt;see langword="false" /&gt;</ph> 中没有找到 <ph id="ph2">&lt;paramref name="key" /&gt;</ph>，此方法也会返回 <ph id="ph3">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
          <source>Implementations can vary in how they determine equality of objects; for example, the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class uses <ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>, whereas the <ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph> class allows the user to specify the <ph id="ph4">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> implementation to use for comparing keys.</source>
          <target state="translated">实现可以改变如何确定相等性的对象;例如，<ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph>类使用<ph id="ph2">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A?displayProperty=nameWithType&gt;</ph>，而<ph id="ph3">&lt;xref:System.Collections.Generic.Dictionary%602&gt;</ph>类允许用户指定<ph id="ph4">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph>实现要用于对键进行比较。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
          <source>The following code example shows how to remove a key/value pair from a dictionary using the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Remove%2A&gt;</ph> method.</source>
          <target state="translated">下面的代码示例演示如何删除键/值对从字典使用<ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Remove%2A&gt;</ph>方法。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
          <source>This code is part of a larger example that can be compiled and executed.</source>
          <target state="translated">此代码是示例的一个更大可以编译和执行的一部分。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
          <source>See <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">请参阅 <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> is read-only.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> 为只读。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source>The key whose value to get.</source>
          <target state="translated">要获取其值的键。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source>When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> parameter.</source>
          <target state="translated">当此方法返回时，如果找到指定键，则返回与该键关联的值；否则，返回 <bpt id="p1">&lt;c&gt;</bpt>value<ept id="p1">&lt;/c&gt;</ept> 参数的类型的默认值。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source>This parameter is passed uninitialized.</source>
          <target state="translated">此参数未经初始化即被传递。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source>Gets the value associated with the specified key.</source>
          <target state="translated">获取与指定键关联的值。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the object that implements <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> contains an element with the specified key; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">如果实现 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> 的对象包含具有指定键的元素，则为 <ph id="ph1">&lt;see langword="true" /&gt;</ph>；否则，为 <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source>This method combines the functionality of the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> property.</source>
          <target state="translated">此方法将功能组合<ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.ContainsKey%2A&gt;</ph>方法和<ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source>If the key is not found, then the <ph id="ph1">`value`</ph> parameter gets the appropriate default value for the type <ph id="ph2">`TValue`</ph>; for example, zero (0) for integer types, <ph id="ph3">`false`</ph> for Boolean types, and <ph id="ph4">`null`</ph> for reference types.</source>
          <target state="translated">如果未找到键，则 <ph id="ph1">`value`</ph> 参数将为类型 <ph id="ph2">`TValue`</ph> 获取适当的默认值；例如，为整数类型获取零 (0)，为布尔值类型获取 <ph id="ph3">`false`</ph>，为引用类型获取 <ph id="ph4">`null`</ph>。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source>The example shows how to use the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A&gt;</ph> method to retrieve values.</source>
          <target state="translated">该示例演示如何使用<ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A&gt;</ph>方法来检索值。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source>If a program frequently tries key values that are not in a dictionary, the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A&gt;</ph> method can be more efficient than using the <ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph> property (the indexer in C#), which throws exceptions when attempting to retrieve nonexistent keys.</source>
          <target state="translated">如果程序频繁尝试不在字典中的键值<ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.TryGetValue%2A&gt;</ph>方法可以是比使用效率更高<ph id="ph2">&lt;xref:System.Collections.Generic.IDictionary%602.Item%2A&gt;</ph>属性 （索引器在 C# 中），在尝试检索不存在的键时引发异常。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source>This code is part of a larger example that can be compiled and executed.</source>
          <target state="translated">此代码是示例的一个更大可以编译和执行的一部分。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source>See <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">请参阅 <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <source><ph id="ph1">&lt;paramref name="key" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="key" /&gt;</ph> 为 <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.IDictionary`2.Values">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> containing the values in the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</source>
          <target state="translated">获取一个 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph>，它包含 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> 中的值。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Values">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph> containing the values in the object that implements <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph>.</source>
          <target state="translated">一个 <ph id="ph1">&lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;</ph>，它包含实现 <ph id="ph2">&lt;see cref="T:System.Collections.Generic.IDictionary`2" /&gt;</ph> 的对象中的值。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Values">
          <source>The order of the values in the returned <ph id="ph1">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> is unspecified, but it is guaranteed to be the same order as the corresponding keys in the <ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph> returned by the <ph id="ph3">&lt;xref:System.Collections.Generic.IDictionary%602.Keys%2A&gt;</ph> property.</source>
          <target state="translated">在返回值的顺序<ph id="ph1">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>未指定，但可以保证要中对应键的顺序相同<ph id="ph2">&lt;xref:System.Collections.Generic.ICollection%601&gt;</ph>返回<ph id="ph3">&lt;xref:System.Collections.Generic.IDictionary%602.Keys%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Values">
          <source>The following code example shows how to enumerate values alone using the <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Values%2A&gt;</ph> property.</source>
          <target state="translated">下面的代码示例演示如何枚举值仅使用<ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602.Values%2A&gt;</ph>属性。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Values">
          <source>This code is part of a larger example that can be compiled and executed.</source>
          <target state="translated">此代码是示例的一个更大可以编译和执行的一部分。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.IDictionary`2.Values">
          <source>See <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">请参阅 <ph id="ph1">&lt;xref:System.Collections.Generic.IDictionary%602?displayProperty=nameWithType&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>