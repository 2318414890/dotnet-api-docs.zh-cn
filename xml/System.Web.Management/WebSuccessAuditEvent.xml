<Type Name="WebSuccessAuditEvent" FullName="System.Web.Management.WebSuccessAuditEvent">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="64c4a5e69789bc5c0515b2808af9ac7896d2f8b8" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30539981" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WebSuccessAuditEvent : System.Web.Management.WebAuditEvent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebSuccessAuditEvent extends System.Web.Management.WebAuditEvent" />
  <TypeSignature Language="DocId" Value="T:System.Web.Management.WebSuccessAuditEvent" />
  <TypeSignature Language="VB.NET" Value="Public Class WebSuccessAuditEvent&#xA;Inherits WebAuditEvent" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebSuccessAuditEvent : System::Web::Management::WebAuditEvent" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Management.WebAuditEvent</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供有关成功安全事件的信息。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET 运行状况监视，用于管理已部署的 Web 应用程序的生产和操作人员。 <xref:System.Web.Management>命名空间包含负责打包应用程序运行状况状态数据和负责处理此数据提供程序类型的运行状况事件类型。 它还包含在管理运行状况事件期间帮助的支持类型。  
  
 <xref:System.Web.Management.WebSuccessAuditEvent>出现成功的与安全相关操作时使用类。 此示例是 Web 请求成功 URL 授权。  
  
 以下列表描述的类型的事件功能<xref:System.Web.Management.WebSuccessAuditEvent>由 ASP.NET 引发：  
  
-   文件的授权。 审核成功的条件。 当 Windows 标识与请求关联时，文件授权仅尝试 asp.net。 相关的事件审核代码是<xref:System.Web.Management.WebEventCodes.AuditFileAuthorizationSuccess>。  
  
-   URL 授权。 它表示为其授予权限的 URL 资源的访问。 审核成功的条件。 相关的事件审核代码是<xref:System.Web.Management.WebEventCodes.AuditUrlAuthorizationSuccess>。  
  
-   其他安全条件。 下面是相关的事件代码列表：  
  
    -   <xref:System.Web.Management.WebEventCodes.AuditFormsAuthenticationSuccess>  
  
    -   <xref:System.Web.Management.WebEventCodes.AuditMembershipAuthenticationSuccess>  
  
 当<xref:System.Web.Management.WebSuccessAuditEvent>是引发，ASP.NET 运行状况监视功能会递增相关的审核成功事件引发的性能计数器，然后检查`healthMonitoring`配置，以确定是否有任何提供程序订阅事件。 如果提供程序订阅事件，ASP.NET 将事件分配给它们进行处理。  
  
> [!NOTE]
>  若要查看在系统监视器 (PerfMon) 中的审核成功事件引发性能计数器**添加计数器**窗口中选择**ASP.NET**从**性能对象**下拉列表中，选择**引发审核成功事件**性能计数器，并单击**添加**按钮。 有关详细信息，请参阅[监视 ASP.NET 应用程序性能](http://msdn.microsoft.com/library/c96da1d1-6077-48d3-88e2-d9127ed91cf5)。  
  
 因为成功审核代表一个预期的状况，你可能不希望订阅它们。 你可以订阅了这些以便提供对站点的审核的访问。  
  
> [!NOTE]
>  在大多数情况下，你将是一种能够使用 ASP.NET 运行状况监视类型，因为实现，并且将通过指定中的值控制运行状况监视系统`healthMonitoring`配置节。 你还可以从要创建你自己的自定义事件和提供程序的运行状况监视类型派生。 有关示例的派生自<xref:System.Web.Management.WebSuccessAuditEvent>类，请参阅本主题中提供的示例。  
  
   
  
## Examples  
 下面的代码示例演示如何从派生<xref:System.Web.Management.WebSuccessAuditEvent>类来创建自定义审核事件。  
  
 [!code-csharp[System.Web.Management.WebSuccessAuditEvent#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebSuccessAuditEvent/CS/websuccessauditevent.cs#1)]
 [!code-vb[System.Web.Management.WebSuccessAuditEvent#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebSuccessAuditEvent/VB/websuccessauditevent.vb#1)]  
  
 下面的示例摘自使 ASP.NET 运行状况监视能够使用该事件的配置文件。  
  
```  
<healthMonitoring   
..enabled="true"  
..heartBeatInterval="0">   
  <providers>  
    <add name="EventLogProvider"   
    type="System.Web.Management.EventLogWebEventProvider,  
    System.Web,Version=2.0.3600.0,Culture=neutral,  
    PublicKeyToken=b03f5f7f11d50a3a"/>  
  </providers>  
  <eventMappings>  
    <add  name="SampleWebSuccessAuditEvent"   
      type="SamplesAspNet.SampleWebSuccessAuditEvent,  
      websuccessauditevent,Version=1.0.1663.31140,   
      Culture=neutral,   
      PublicKeyToken=0d1fa0f69d94de96,   
      processorArchitecture=MSIL"/>  
  </eventMappings>  
  <rules>  
    <add name="Custom Failure Audit Default"  
      eventName=" SampleWebFailureAuditEvent "  
      provider="EventLogProvider"  
      profile="Default"/>    
  </rules>  
</healthMonitoring>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Management.WebAuditEvent" />
    <altmember cref="T:System.Web.Management.WebFailureAuditEvent" />
    <altmember cref="T:System.Web.Management.WebEventCodes" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Management.WebSuccessAuditEvent" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal WebSuccessAuditEvent (string message, object eventSource, int eventCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(string message, object eventSource, int32 eventCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebSuccessAuditEvent.#ctor(System.String,System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New (message As String, eventSource As Object, eventCode As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; WebSuccessAuditEvent(System::String ^ message, System::Object ^ eventSource, int eventCode);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="eventSource" Type="System.Object" />
        <Parameter Name="eventCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">事件说明。</param>
        <param name="eventSource">作为事件源的对象。</param>
        <param name="eventCode">与该事件关联的代码。 实现自定义事件时，事件代码必须大于 <see cref="F:System.Web.Management.WebEventCodes.WebExtendedBase" />。</param>
        <summary>使用所提供的参数初始化 <see cref="T:System.Web.Management.WebSuccessAuditEvent" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET 运行状况监视系统在内部使用此构造函数。 你不应使用它来实例化<xref:System.Web.Management.WebSuccessAuditEvent>对象，但你在实现您自己的从此类继承的事件类型时，可以调用此构造函数。  
  
> [!NOTE]
>  <xref:System.Web.Management.WebSuccessAuditEvent.%23ctor%2A>构造函数不应在代码中直接使用。 它由 ASP.NET 进行调用。 你可以调用<xref:System.Web.Management.WebSuccessAuditEvent.%23ctor%2A>构造函数从派生时<xref:System.Web.Management.WebSuccessAuditEvent>类。  
  
   
  
## Examples  
 下面的代码示例演示如何调用此构造函数`SampleWebSuccessAuditEvent`类。 此代码示例摘自更大的示例为提供<xref:System.Web.Management.WebSuccessAuditEvent>类。  
  
 [!code-csharp[System.Web.Management.WebSuccessAuditEvent#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebSuccessAuditEvent/CS/websuccessauditevent.cs#2)]
 [!code-vb[System.Web.Management.WebSuccessAuditEvent#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebSuccessAuditEvent/VB/websuccessauditevent.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal WebSuccessAuditEvent (string message, object eventSource, int eventCode, int eventDetailCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(string message, object eventSource, int32 eventCode, int32 eventDetailCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebSuccessAuditEvent.#ctor(System.String,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New (message As String, eventSource As Object, eventCode As Integer, eventDetailCode As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; WebSuccessAuditEvent(System::String ^ message, System::Object ^ eventSource, int eventCode, int eventDetailCode);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="eventSource" Type="System.Object" />
        <Parameter Name="eventCode" Type="System.Int32" />
        <Parameter Name="eventDetailCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">事件说明。</param>
        <param name="eventSource">作为事件源的对象。</param>
        <param name="eventCode">与该事件关联的代码。 实现自定义事件时，事件代码必须大于 <see cref="F:System.Web.Management.WebEventCodes.WebExtendedBase" />。</param>
        <param name="eventDetailCode">用于指定事件的详细标识符的 <see cref="T:System.Web.Management.WebEventCodes" /> 值。</param>
        <summary>使用所提供的参数初始化 <see cref="T:System.Web.Management.WebSuccessAuditEvent" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET 运行状况监视系统在内部使用此构造函数。 你不应使用它来实例化<xref:System.Web.Management.WebSuccessAuditEvent>对象，但你在实现您自己的从此类继承的事件类型时，可以调用此构造函数。  
  
> [!NOTE]
>  <xref:System.Web.Management.WebSuccessAuditEvent.%23ctor%2A>构造函数不应在代码中直接使用。 它由 ASP.NET 进行调用。 你可以调用<xref:System.Web.Management.WebSuccessAuditEvent.%23ctor%2A>构造函数从派生时<xref:System.Web.Management.WebSuccessAuditEvent>类。  
  
   
  
## Examples  
 下面的代码示例演示如何调用此构造函数`SampleWebSuccessAuditEvent`类。 此代码示例摘自更大的示例为提供<xref:System.Web.Management.WebSuccessAuditEvent>类。  
  
 [!code-csharp[System.Web.Management.WebSuccessAuditEvent#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebSuccessAuditEvent/CS/websuccessauditevent.cs#3)]
 [!code-vb[System.Web.Management.WebSuccessAuditEvent#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebSuccessAuditEvent/VB/websuccessauditevent.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IncrementPerfCounters">
      <MemberSignature Language="C#" Value="protected internal override void IncrementPerfCounters ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void IncrementPerfCounters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebSuccessAuditEvent.IncrementPerfCounters" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub IncrementPerfCounters ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void IncrementPerfCounters();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>递增“引发的审核成功事件”性能计数器。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 审核成功事件引发的性能计数器跟踪自应用程序启动以来引发的成功的审核事件数。 此方法也会调用父<xref:System.Web.Management.WebBaseEvent.IncrementPerfCounters%2A>方法，将引发事件的计数器。 此计数器可跟踪引发的事件的总数。  
  
 若要查看这些性能计数器在系统监视器 (PerfMon)，在**添加计数器**窗口中选择**ASP.NET**从**性能对象**下拉列表中，选择你想要查看，然后单击的性能计数器**添加**按钮。 有关详细信息，请参阅[监视 ASP.NET 应用程序性能](http://msdn.microsoft.com/library/c96da1d1-6077-48d3-88e2-d9127ed91cf5)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>