<Type Name="PeekCompletedEventHandler" FullName="System.Messaging.PeekCompletedEventHandler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4037e46a1de0909da43c578f8ddfb9dd055974b1" />
    <Meta Name="ms.sourcegitcommit" Value="c0c07dbd19cd7017243f9ac36915755f79bc8da6" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="11/27/2018" />
    <Meta Name="ms.locfileid" Value="52352539" />
  </Metadata>
  <TypeSignature Language="C#" Value="public delegate void PeekCompletedEventHandler(object sender, PeekCompletedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed PeekCompletedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.PeekCompletedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub PeekCompletedEventHandler(sender As Object, e As PeekCompletedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void PeekCompletedEventHandler(System::Object ^ sender, PeekCompletedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type PeekCompletedEventHandler = delegate of obj * PeekCompletedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Messaging.PeekCompletedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">事件的源，即 <see cref="T:System.Messaging.MessageQueue" />。</param>
    <param name="e">包含事件数据的 <see cref="T:System.Messaging.PeekCompletedEventArgs" />。</param>
    <summary>表示将用来处理 <see cref="E:System.Messaging.MessageQueue.PeekCompleted" /> 的 <see cref="T:System.Messaging.MessageQueue" /> 事件的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 创建 <xref:System.Messaging.PeekCompletedEventHandler> 委托时，需要标识将处理该事件的方法。 若要将事件与事件处理程序关联，请将该委托的一个实例添加到事件中。 除非移除了该委托，否则每当发生该事件时就会调用事件处理程序。 有关事件处理程序委托的详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
   
  
## Examples  
 下面的示例演示如何创建一个事件的委托 (<xref:System.Messaging.PeekCompletedEventHandler>) 的事件处理程序 (`MyPeekCompleted`) 并将其与<xref:System.Messaging.MessageQueue.PeekCompleted?displayProperty=nameWithType>事件。 事件处理程序查看消息并将其标签写到屏幕。  
  
 [!code-cpp[MessageQueue.BeginPeek_noparms#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.BeginPeek_noparms/CPP/mqbeginpeek_noparms.cpp#1)]
 [!code-csharp[MessageQueue.BeginPeek_noparms#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.BeginPeek_noparms/CS/mqbeginpeek_noparms.cs#1)]
 [!code-vb[MessageQueue.BeginPeek_noparms#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.BeginPeek_noparms/VB/mqbeginpeek_noparms.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.MessageQueue" />
    <altmember cref="T:System.Messaging.ReceiveCompletedEventHandler" />
    <altmember cref="T:System.Messaging.PeekCompletedEventArgs" />
  </Docs>
</Type>