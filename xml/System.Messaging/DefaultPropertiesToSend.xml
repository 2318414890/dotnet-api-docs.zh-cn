<Type Name="DefaultPropertiesToSend" FullName="System.Messaging.DefaultPropertiesToSend">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1de27b1a67d05f78b04bbb5ab0355aca953652da" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36477350" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DefaultPropertiesToSend" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DefaultPropertiesToSend extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.DefaultPropertiesToSend" />
  <TypeSignature Language="VB.NET" Value="Public Class DefaultPropertiesToSend" />
  <TypeSignature Language="C++ CLI" Value="public ref class DefaultPropertiesToSend" />
  <TypeSignature Language="F#" Value="type DefaultPropertiesToSend = class" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>指定在向消息队列发送 <see cref="T:System.Messaging.Message" /> 实例以外的对象时所使用的默认属性值。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以为发送到消息的所选属性上设置默认值<xref:System.Messaging.MessageQueue>。 <xref:System.Messaging.DefaultPropertiesToSend> 用于指定默认属性值时要发送的消息以外的对象<xref:System.Messaging.Message>实例发送到队列，例如，字符串自变量传递给<xref:System.Messaging.MessageQueue.Send%2A>方法在代码片段中， `myMessageQueue.Send("hello")`。 <xref:System.Messaging.Message>类具有相对应的同名属性中的那些<xref:System.Messaging.DefaultPropertiesToSend>发送时将提供值<xref:System.Messaging.Message>具体实例。 即使你已指定<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A?displayProperty=nameWithType>队列，发送<xref:System.Messaging.Message>到该队列的对象将导致具有相同名称的值<xref:System.Messaging.Message>属性重写该队列<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>值。  
  
 未显式设置的属性默认为构造函数中，指定的值<xref:System.Messaging.DefaultPropertiesToSend.%23ctor%2A>。  
  
 有关的实例的初始属性值的列表<xref:System.Messaging.DefaultPropertiesToSend>，请参阅<xref:System.Messaging.DefaultPropertiesToSend>构造函数。  
  
   
  
## Examples  
 下面的代码示例使用一条消息的优先级来确定要发送的消息的默认属性。  
  
 [!code-cpp[MessageQueue.DefaultPropertiesToSend#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.DefaultPropertiesToSend/CPP/mqdefaultpropertiestosend.cpp#1)]
 [!code-csharp[MessageQueue.DefaultPropertiesToSend#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.DefaultPropertiesToSend/CS/mqdefaultpropertiestosend.cs#1)]
 [!code-vb[MessageQueue.DefaultPropertiesToSend#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.DefaultPropertiesToSend/VB/mqdefaultpropertiestosend.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.Message" />
    <altmember cref="P:System.Messaging.MessageQueue.DefaultPropertiesToSend" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultPropertiesToSend ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.DefaultPropertiesToSend.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DefaultPropertiesToSend();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Messaging.DefaultPropertiesToSend" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以创建的新实例<xref:System.Messaging.DefaultPropertiesToSend>来定义要发送到队列，并不属于类型的对象相关联的默认属性值<xref:System.Messaging.Message>。 使用时<xref:System.Messaging.MessageQueue>对象，<xref:System.Messaging.DefaultPropertiesToSend>为你创建的实例并将其与关联<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A?displayProperty=nameWithType>的成员<xref:System.Messaging.MessageQueue>。  
  
 有两种方法来定义要发送，队列的默认属性，如下面的 C# 代码中所示。 你可以设置的此实例的值<xref:System.Messaging.DefaultPropertiesToSend>并将其与队列的<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A?displayProperty=nameWithType>属性：  
  
```  
DefaultPropertiesToSend myDefaultProperties = new DefaultPropertiesToSend();  
  // Set default values for the properties.  
  myDefaultProperties.Label = "myLabel";  
  myDefaultProperties.Recoverable = false;  
 ...  
  myMessageQueue.DefaultPropertiesToSend = myDefaultProperties;  
  myMessageQueue.Send("hello");  
```  
  
 或者，你可以单独分配到的值<xref:System.Messaging.MessageQueue>实例的<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>直接属性：  
  
```  
myMessageQueue.DefaultPropertiesToSend.Label = "myLabel";  
  myMessageQueue.DefaultPropertiesToSend.Recoverable = false;  
...  
  myMessageQueue.Send("hello");  
```  
  
 如果你选择第二个选项，你不需要调用<xref:System.Messaging.DefaultPropertiesToSend.%23ctor%2A>构造函数显式。 你可能想要创建的实例<xref:System.Messaging.DefaultPropertiesToSend>，例如，如果属性的默认值取决于要发送的消息的一些条件。 你可以创建多个<xref:System.Messaging.DefaultPropertiesToSend>实例，并分配到队列的某一种<xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A?displayProperty=nameWithType>向队列发送消息之前的属性。  
  
 下表显示的实例的初始属性值<xref:System.Messaging.DefaultPropertiesToSend>。  
  
|Property|初始值|  
|--------------|-------------------|  
|<xref:System.Messaging.DefaultPropertiesToSend.AcknowledgeType%2A>|`AcknowledgeTypes.None`|  
|<xref:System.Messaging.DefaultPropertiesToSend.AdministrationQueue%2A>|`null`|  
|<xref:System.Messaging.DefaultPropertiesToSend.AppSpecific%2A>|0|  
|<xref:System.Messaging.DefaultPropertiesToSend.AttachSenderId%2A>|`true`|  
|<xref:System.Messaging.DefaultPropertiesToSend.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|  
|<xref:System.Messaging.DefaultPropertiesToSend.Extension%2A>|一个零长度的字节数组|  
|<xref:System.Messaging.DefaultPropertiesToSend.HashAlgorithm%2A>|`HashAlgorithm.MD5`|  
|<xref:System.Messaging.DefaultPropertiesToSend.Label%2A>|空字符串 ("")|  
|<xref:System.Messaging.DefaultPropertiesToSend.Priority%2A>|`MessagePriority.Normal`|  
|<xref:System.Messaging.DefaultPropertiesToSend.Recoverable%2A>|`false`|  
|<xref:System.Messaging.DefaultPropertiesToSend.ResponseQueue%2A>|`null`|  
|<xref:System.Messaging.DefaultPropertiesToSend.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|  
|<xref:System.Messaging.DefaultPropertiesToSend.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|  
|<xref:System.Messaging.DefaultPropertiesToSend.TransactionStatusQueue%2A>|`null`|  
|<xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A>|`false`|  
|<xref:System.Messaging.DefaultPropertiesToSend.UseDeadLetterQueue%2A>|`false`|  
|<xref:System.Messaging.DefaultPropertiesToSend.UseEncryption%2A>|`false`|  
|<xref:System.Messaging.DefaultPropertiesToSend.UseJournalQueue%2A>|`false`|  
|<xref:System.Messaging.DefaultPropertiesToSend.UseTracing%2A>|`false`|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.AcknowledgeTypes" />
        <altmember cref="T:System.Messaging.EncryptionAlgorithm" />
        <altmember cref="T:System.Messaging.HashAlgorithm" />
        <altmember cref="T:System.Messaging.MessagePriority" />
        <altmember cref="F:System.Messaging.Message.InfiniteTimeout" />
        <altmember cref="P:System.Messaging.MessageQueue.DefaultPropertiesToSend" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="AcknowledgeType">
      <MemberSignature Language="C#" Value="public System.Messaging.AcknowledgeTypes AcknowledgeType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.AcknowledgeTypes AcknowledgeType" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.AcknowledgeType" />
      <MemberSignature Language="VB.NET" Value="Public Property AcknowledgeType As AcknowledgeTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::AcknowledgeTypes AcknowledgeType { System::Messaging::AcknowledgeTypes get(); void set(System::Messaging::AcknowledgeTypes value); };" />
      <MemberSignature Language="F#" Value="member this.AcknowledgeType : System.Messaging.AcknowledgeTypes with get, set" Usage="System.Messaging.DefaultPropertiesToSend.AcknowledgeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgAcknowledgeType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.AcknowledgeTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置返回给发送应用程序的确认消息的类型。</summary>
        <value>
          <see cref="T:System.Messaging.AcknowledgeTypes" /> 枚举值之一。 此值用于确定系统在管理队列中传递的确认消息的类型以及向发送应用程序返回确认消息的时间。 默认值为 <see langword="AcknowledgeTypes.None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.DefaultPropertiesToSend.AcknowledgeType%2A>属性指定的确认消息返回到发送应用程序的类型。 例如，设置<xref:System.Messaging.DefaultPropertiesToSend.AcknowledgeType%2A>属性设置为请求通知时消息到达其目标中，检索它时，或是否超时已经阻止消息到达或从目标队列中检索。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.AdministrationQueue" />
        <altmember cref="P:System.Messaging.Message.AcknowledgeType" />
        <altmember cref="T:System.Messaging.AcknowledgeTypes" />
      </Docs>
    </Member>
    <Member MemberName="AdministrationQueue">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueue AdministrationQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.MessageQueue AdministrationQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.AdministrationQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property AdministrationQueue As MessageQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueue ^ AdministrationQueue { System::Messaging::MessageQueue ^ get(); void set(System::Messaging::MessageQueue ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AdministrationQueue : System.Messaging.MessageQueue with get, set" Usage="System.Messaging.DefaultPropertiesToSend.AdministrationQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgAdministrationQueue")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置队列，该队列接收由消息队列生成的确认消息。</summary>
        <value>
          <see cref="T:System.Messaging.MessageQueue" />，指定用于系统生成的确认消息的管理队列。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 中指定的队列<xref:System.Messaging.DefaultPropertiesToSend.AdministrationQueue%2A>属性可以是任何非事务性队列。 发送到管理队列的确认消息可以指示原始消息到达其目标队列，以及已从队列中已删除。  
  
 当<xref:System.Messaging.DefaultPropertiesToSend.AcknowledgeType%2A>属性以外的任何值`None`，发送应用程序必须指定要用作管理队列的队列。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.AcknowledgeType" />
        <altmember cref="P:System.Messaging.Message.AdministrationQueue" />
      </Docs>
    </Member>
    <Member MemberName="AppSpecific">
      <MemberSignature Language="C#" Value="public int AppSpecific { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AppSpecific" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.AppSpecific" />
      <MemberSignature Language="VB.NET" Value="Public Property AppSpecific As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AppSpecific { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.AppSpecific : int with get, set" Usage="System.Messaging.DefaultPropertiesToSend.AppSpecific" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgAppSpecific")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置应用程序特定的附加信息。</summary>
        <value>应用程序特定的信息。 默认值为 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.DefaultPropertiesToSend.AppSpecific%2A>属性包含其他的应用程序特定的信息可用来组织不同类型的消息，例如，使用应用程序特定的索引。 要解释的应用程序负责<xref:System.Messaging.DefaultPropertiesToSend.AppSpecific%2A>信息。  
  
 如果可能，应在消息而不是在正文中包含消息数据<xref:System.Messaging.DefaultPropertiesToSend.AppSpecific%2A>属性。  
  
 在使用外部队列，使用<xref:System.Messaging.DefaultPropertiesToSend.Extension%2A>属性来指定非消息队列消息属性。 与<xref:System.Messaging.DefaultPropertiesToSend.AppSpecific%2A>，要了解的内容的应用程序负责<xref:System.Messaging.DefaultPropertiesToSend.Extension%2A>属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.Extension" />
        <altmember cref="P:System.Messaging.Message.AppSpecific" />
      </Docs>
    </Member>
    <Member MemberName="AttachSenderId">
      <MemberSignature Language="C#" Value="public bool AttachSenderId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AttachSenderId" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.AttachSenderId" />
      <MemberSignature Language="VB.NET" Value="Public Property AttachSenderId As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AttachSenderId { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AttachSenderId : bool with get, set" Usage="System.Messaging.DefaultPropertiesToSend.AttachSenderId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgAttachSenderId")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示发送方 ID 是否应附在消息中。</summary>
        <value>如果发送方 ID 应附在消息中，则为 <see langword="true" />，否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 发件人 ID 是表示发送用户的标识符的字节数组。 发件人 ID 由消息队列设置，并且用于通过接收队列管理器来验证发件人是否有权访问队列。 发件人 ID 才是受信任，如果消息已验证时它已达到目标队列的。  
  
 发件人 ID 未附加到消息，请发送应用程序指示，消息队列，应验证一个消息的发件人，这是当消息发送到目标队列。 如果目标队列仅接受经过身份验证的消息，并且<xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A>或<xref:System.Messaging.DefaultPropertiesToSend.AttachSenderId%2A>是`false`，在到达队列时，消息将被拒绝。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.UseAuthentication" />
        <altmember cref="P:System.Messaging.MessageQueue.Authenticate" />
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.HashAlgorithm" />
        <altmember cref="P:System.Messaging.Message.AttachSenderId" />
        <altmember cref="P:System.Messaging.Message.SenderId" />
      </Docs>
    </Member>
    <Member MemberName="EncryptionAlgorithm">
      <MemberSignature Language="C#" Value="public System.Messaging.EncryptionAlgorithm EncryptionAlgorithm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.EncryptionAlgorithm EncryptionAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.EncryptionAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Property EncryptionAlgorithm As EncryptionAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::EncryptionAlgorithm EncryptionAlgorithm { System::Messaging::EncryptionAlgorithm get(); void set(System::Messaging::EncryptionAlgorithm value); };" />
      <MemberSignature Language="F#" Value="member this.EncryptionAlgorithm : System.Messaging.EncryptionAlgorithm with get, set" Usage="System.Messaging.DefaultPropertiesToSend.EncryptionAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgEncryptionAlgorithm")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.EncryptionAlgorithm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于加密私有消息体的加密算法。</summary>
        <value>
          <see cref="T:System.Messaging.EncryptionAlgorithm" /> 枚举值之一。 默认值为 <see langword="RC2" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果消息是私有的它被加密之前它发送和接收时解密。 <xref:System.Messaging.DefaultPropertiesToSend.EncryptionAlgorithm%2A>属性指定用于加密私有消息的消息正文的算法。  
  
 队列可以要求该传入消息进行加密。 如果非加密 （非专用） 消息发送到仅接受私有消息的队列中或私有消息发送到仅接受非私有消息的队列中，消息被拒绝由队列。 发送应用程序可以请求否定确认消息返回到发送应用程序如果消息被拒绝。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.UseEncryption" />
        <altmember cref="P:System.Messaging.MessageQueue.EncryptionRequired" />
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.AcknowledgeType" />
        <altmember cref="P:System.Messaging.Message.EncryptionAlgorithm" />
        <altmember cref="T:System.Messaging.EncryptionAlgorithm" />
      </Docs>
    </Member>
    <Member MemberName="Extension">
      <MemberSignature Language="C#" Value="public byte[] Extension { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Extension" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.Extension" />
      <MemberSignature Language="VB.NET" Value="Public Property Extension As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Extension { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Extension : byte[] with get, set" Usage="System.Messaging.DefaultPropertiesToSend.Extension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.ArrayEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgExtension")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与消息关联的附加信息。</summary>
        <value>字节数组，提供与消息关联的、应用程序定义的附加信息。 默认值为零长度的数组。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.DefaultPropertiesToSend.Extension%2A>属性提供有关与消息，例如大型二进制对象关联的应用程序定义的其他信息。 它负责接收应用程序可以解释的内容<xref:System.Messaging.DefaultPropertiesToSend.Extension%2A>。  
  
 如果可能，应在消息的正文中，而不是扩展中包含消息数据。  
  
 在使用外部队列，使用<xref:System.Messaging.DefaultPropertiesToSend.Extension%2A>属性来指定非消息队列消息属性。  
  
 非 Microsoft 消息队列的队列系统中不存在外队列。 Microsoft 消息队列与此类通过连接器应用程序的队列进行通信。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.AppSpecific" />
        <altmember cref="P:System.Messaging.Message.Extension" />
      </Docs>
    </Member>
    <Member MemberName="HashAlgorithm">
      <MemberSignature Language="C#" Value="public System.Messaging.HashAlgorithm HashAlgorithm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.HashAlgorithm HashAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.HashAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Property HashAlgorithm As HashAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::HashAlgorithm HashAlgorithm { System::Messaging::HashAlgorithm get(); void set(System::Messaging::HashAlgorithm value); };" />
      <MemberSignature Language="F#" Value="member this.HashAlgorithm : System.Messaging.HashAlgorithm with get, set" Usage="System.Messaging.DefaultPropertiesToSend.HashAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgHashAlgorithm")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.HashAlgorithm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在验证消息或为消息创建数字签名时使用的哈希算法。</summary>
        <value>
          <see cref="T:System.Messaging.HashAlgorithm" /> 枚举值之一。 默认值为 <see langword="MD5" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.DefaultPropertiesToSend.HashAlgorithm%2A>属性标识消息队列进行身份验证消息时或创建一条消息的数字签名时使用的哈希算法。  
  
 创建一条消息的数字签名时，源计算机上的消息队列将使用的哈希算法。 目标队列管理器然后使用相同的哈希算法时将会收到该消息进行身份验证。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.UseAuthentication" />
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.AttachSenderId" />
        <altmember cref="P:System.Messaging.MessageQueue.Authenticate" />
        <altmember cref="P:System.Messaging.Message.HashAlgorithm" />
        <altmember cref="T:System.Messaging.HashAlgorithm" />
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public string Label { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Label" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.Label" />
      <MemberSignature Language="VB.NET" Value="Public Property Label As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Label { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Label : string with get, set" Usage="System.Messaging.DefaultPropertiesToSend.Label" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgLabel")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置应用程序定义的、描述消息的字符串。</summary>
        <value>消息的标签。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 消息标签可以用于显示目的，例如，或根据标签值有选择地处理消息。 消息标签的最大长度是 249 个 Unicode 字符。 标签不必是唯一的消息范围内。  
  
 消息队列和消息标签表示一个应用程序定义的值，可以帮助标识在用户可读术语中的队列或消息。 它负责解释标签的内容; 的应用程序它们具有任何实质意义到消息队列应用程序。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.Message.Label" />
        <altmember cref="P:System.Messaging.MessageQueue.Label" />
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public System.Messaging.MessagePriority Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.MessagePriority Priority" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Property Priority As MessagePriority" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessagePriority Priority { System::Messaging::MessagePriority get(); void set(System::Messaging::MessagePriority value); };" />
      <MemberSignature Language="F#" Value="member this.Priority : System.Messaging.MessagePriority with get, set" Usage="System.Messaging.DefaultPropertiesToSend.Priority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgPriority")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessagePriority</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置消息优先级，用于确定消息在队列中的位置。</summary>
        <value>表示非事务性消息优先级的 <see cref="T:System.Messaging.MessagePriority" /> 枚举值之一。 默认值为 <see langword="Normal" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.DefaultPropertiesToSend.Priority%2A>属性会影响虽然很途中，消息队列处理消息的方式以及位置在到达其目标时，该消息会放在队列中。 优先级高的消息是在路由过程中提供首选项，并且插入到队列的队。 而具有相同优先级的消息则会按照到达的先后时间插入到队列中。  
  
 仅可以为非事务性消息有意义的方式设置消息优先级。 事务性消息的优先级自动设置为`Lowest`，这将导致产生事务性消息优先级被忽略。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.MessageQueue.BasePriority" />
        <altmember cref="P:System.Messaging.Message.Priority" />
        <altmember cref="T:System.Messaging.MessagePriority" />
      </Docs>
    </Member>
    <Member MemberName="Recoverable">
      <MemberSignature Language="C#" Value="public bool Recoverable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Recoverable" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.Recoverable" />
      <MemberSignature Language="VB.NET" Value="Public Property Recoverable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Recoverable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Recoverable : bool with get, set" Usage="System.Messaging.DefaultPropertiesToSend.Recoverable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgRecoverable")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示在出现计算机故障或网络问题时是否保证传递消息。</summary>
        <value>如果通过在消息传递过程中将消息保存到磁盘上来保证消息的传递，则为 <see langword="true" />；如果不能保证传递，则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.DefaultPropertiesToSend.Recoverable%2A>属性指示是否保证消息的传递方式，即使消息启用路由到目标队列的过程中出现计算机故障。  
  
 如果保证消息的传递，消息是本地存储的路由的每一个步骤直到消息成功转发到下一台计算机。 设置<xref:System.Messaging.DefaultPropertiesToSend.Recoverable%2A>到`true`上<xref:System.Messaging.DefaultPropertiesToSend>可能会影响吞吐量。  
  
 如果消息是事务性的消息队列会自动将消息视为可恢复，而不管是否<xref:System.Messaging.DefaultPropertiesToSend.Recoverable%2A>设置为`true`。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.UseTracing" />
        <altmember cref="P:System.Messaging.Message.Recoverable" />
      </Docs>
    </Member>
    <Member MemberName="ResponseQueue">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueue ResponseQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.MessageQueue ResponseQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.ResponseQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property ResponseQueue As MessageQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueue ^ ResponseQueue { System::Messaging::MessageQueue ^ get(); void set(System::Messaging::MessageQueue ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ResponseQueue : System.Messaging.MessageQueue with get, set" Usage="System.Messaging.DefaultPropertiesToSend.ResponseQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgResponseQueue")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置接收应用程序生成的响应消息的队列。</summary>
        <value>应用程序生成的响应消息所返回到的 <see cref="T:System.Messaging.MessageQueue" />。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.DefaultPropertiesToSend.ResponseQueue%2A>属性标识接收应用程序生成的响应消息返回给发送应用程序接收应用程序的队列。 当应用程序发送其消息时由发送应用程序指定响应队列。 任何可用队列均可指定为响应队列。  
  
 返回到响应队列的消息是应用程序特定的。 应用程序必须定义中的消息以及什么是收到一条消息时执行的操作。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.Message.ResponseQueue" />
      </Docs>
    </Member>
    <Member MemberName="TimeToBeReceived">
      <MemberSignature Language="C#" Value="public TimeSpan TimeToBeReceived { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeToBeReceived" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.TimeToBeReceived" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeToBeReceived As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeToBeReceived { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.TimeToBeReceived : TimeSpan with get, set" Usage="System.Messaging.DefaultPropertiesToSend.TimeToBeReceived" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Messaging.TimeoutConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgTimeToBeReceived")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置从目标队列中检索消息的时间限制。</summary>
        <value>从目标队列中接收已发送消息的总时间（以秒计）。 默认值为 <see cref="F:System.Messaging.Message.InfiniteTimeout" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.DefaultPropertiesToSend.TimeToBeReceived%2A>属性指定以秒为单位发送消息要想从目标队列接收的总时间。 此时间限制包括到达目标队列所用的时间以及花费在队列中的等待的时间之前应用程序检索消息。  
  
> [!CAUTION]
>  使用从属客户端计算机时，同步客户端计算机上的时钟与运行消息队列的服务器上的时钟。 如果两个时钟不同步，则可能出现不可预知的行为时发送消息时<xref:System.Messaging.DefaultPropertiesToSend.TimeToBeReceived%2A>不<xref:System.Messaging.Message.InfiniteTimeout>。  
  
 如果<xref:System.Messaging.DefaultPropertiesToSend.TimeToBeReceived%2A>时间间隔到期之前从队列中删除消息，消息队列应用程序将放弃该消息。 消息或者被发送到死信队列中，如果消息的<xref:System.Messaging.DefaultPropertiesToSend.UseDeadLetterQueue%2A>属性设置为`true`，或将其忽略，如果<xref:System.Messaging.DefaultPropertiesToSend.UseDeadLetterQueue%2A>是`false`。 如果<xref:System.Messaging.DefaultPropertiesToSend.TimeToBeReceived%2A>是小于<xref:System.Messaging.DefaultPropertiesToSend.TimeToReachQueue%2A>，<xref:System.Messaging.DefaultPropertiesToSend.TimeToBeReceived%2A>优先。  
  
 消息的<xref:System.Messaging.DefaultPropertiesToSend.AcknowledgeType%2A>可以将属性设置为请求，消息队列将发送否定确认消息返回到发送应用程序如果计时器过期之前未检索到的消息。  
  
> [!CAUTION]
>  如果您已指定接收<xref:System.Messaging.DefaultPropertiesToSend.TimeToReachQueue%2A>否定确认，则不会收到它们时的值<xref:System.Messaging.DefaultPropertiesToSend.TimeToBeReceived%2A>小于的值<xref:System.Messaging.DefaultPropertiesToSend.TimeToReachQueue%2A>。  
  
 当在事务中发送多条消息时，消息队列使用的第一条消息的值<xref:System.Messaging.DefaultPropertiesToSend.TimeToBeReceived%2A>属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.TimeToReachQueue" />
        <altmember cref="F:System.Messaging.Message.InfiniteTimeout" />
        <altmember cref="P:System.Messaging.Message.TimeToBeReceived" />
      </Docs>
    </Member>
    <Member MemberName="TimeToReachQueue">
      <MemberSignature Language="C#" Value="public TimeSpan TimeToReachQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeToReachQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.TimeToReachQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeToReachQueue As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeToReachQueue { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.TimeToReachQueue : TimeSpan with get, set" Usage="System.Messaging.DefaultPropertiesToSend.TimeToReachQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Messaging.TimeoutConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgTimeToReachQueue")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置消息到达队列的时间限制。</summary>
        <value>从发送消息的时间算起，消息到达目标队列的时间限制（以秒计）。 默认值为 <see cref="F:System.Messaging.Message.InfiniteTimeout" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Messaging.DefaultPropertiesToSend.TimeToReachQueue%2A>间隔期满在消息到达其目标之前，消息队列应用程序将放弃该消息。 消息或者被发送到死信队列中，如果消息的<xref:System.Messaging.DefaultPropertiesToSend.UseDeadLetterQueue%2A>属性设置为`true`，或将其忽略，如果<xref:System.Messaging.DefaultPropertiesToSend.UseDeadLetterQueue%2A>是`false`。 如果<xref:System.Messaging.DefaultPropertiesToSend.TimeToReachQueue%2A>大于<xref:System.Messaging.DefaultPropertiesToSend.TimeToBeReceived%2A>，<xref:System.Messaging.DefaultPropertiesToSend.TimeToBeReceived%2A>优先。  
  
 消息的<xref:System.Messaging.DefaultPropertiesToSend.AcknowledgeType%2A>可以将属性设置为请求，消息队列将发送否定确认消息返回到发送应用程序如果消息没有到达之前在计时器过期。  
  
 如果<xref:System.Messaging.DefaultPropertiesToSend.TimeToReachQueue%2A>为 0 秒，消息队列一次尝试将消息发送到其目标，如果队列等待消息。 如果本地队列，消息总是到达队列。  
  
 当在事务中发送多条消息时，消息队列使用的第一条消息的值<xref:System.Messaging.DefaultPropertiesToSend.TimeToReachQueue%2A>属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.TimeToBeReceived" />
        <altmember cref="F:System.Messaging.Message.InfiniteTimeout" />
        <altmember cref="P:System.Messaging.Message.TimeToReachQueue" />
      </Docs>
    </Member>
    <Member MemberName="TransactionStatusQueue">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueue TransactionStatusQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.MessageQueue TransactionStatusQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.TransactionStatusQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property TransactionStatusQueue As MessageQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueue ^ TransactionStatusQueue { System::Messaging::MessageQueue ^ get(); void set(System::Messaging::MessageQueue ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransactionStatusQueue : System.Messaging.MessageQueue with get, set" Usage="System.Messaging.DefaultPropertiesToSend.TransactionStatusQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgTransactionStatusQueue")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取源计算机中的事务状态队列。</summary>
        <value>源计算机中的事务状态队列，用于将确认消息发回发送应用程序。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.DefaultPropertiesToSend.TransactionStatusQueue%2A>属性标识源计算机上的事务状态队列。 该属性由消息队列，设置和检索发送到外部队列的事务性消息时，连接器应用程序使用。  
  
 非 Microsoft 消息队列的队列系统中不存在外队列。 Microsoft 消息队列与此类通过连接器应用程序的队列进行通信。  
  
 连接器应用程序可以使用的事务状态队列发送确认消息返回到发送应用程序。 即使发送应用程序不会请求其他确认的事务状态队列应接收这些确认。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
        <altmember cref="T:System.Messaging.AcknowledgeTypes" />
        <altmember cref="P:System.Messaging.Message.TransactionStatusQueue" />
      </Docs>
    </Member>
    <Member MemberName="UseAuthentication">
      <MemberSignature Language="C#" Value="public bool UseAuthentication { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseAuthentication" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.UseAuthentication" />
      <MemberSignature Language="VB.NET" Value="Public Property UseAuthentication As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseAuthentication { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseAuthentication : bool with get, set" Usage="System.Messaging.DefaultPropertiesToSend.UseAuthentication" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgUseAuthentication")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示发送前是否必须验证消息。</summary>
        <value>如果发送应用程序请求对消息进行验证，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A>属性指定是否需要进行身份验证消息。 如果发送应用程序请求身份验证，消息队列创建数字签名，并使用它来发送时对消息进行签名和时将会收到该消息进行身份验证。  
  
 如果一条消息发送到仅接受经过身份验证的消息的队列中，如果到达队列时，将被拒绝消息<xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A>设置为`false`。  
  
 不能查看的消息属性，并确定消息是否未通过身份验证。 身份验证失败的消息被丢弃并不会传递到队列。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.MessageQueue.Authenticate" />
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.AcknowledgeType" />
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.AttachSenderId" />
        <altmember cref="P:System.Messaging.Message.UseAuthentication" />
      </Docs>
    </Member>
    <Member MemberName="UseDeadLetterQueue">
      <MemberSignature Language="C#" Value="public bool UseDeadLetterQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDeadLetterQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.UseDeadLetterQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property UseDeadLetterQueue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseDeadLetterQueue { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseDeadLetterQueue : bool with get, set" Usage="System.Messaging.DefaultPropertiesToSend.UseDeadLetterQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgUseDeadLetterQueue")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否将未能传递的消息的副本发送到死信队列。</summary>
        <value>如果消息传递失败应导致向死信队列发送消息的副本，则为 <see langword="true" />，否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.DefaultPropertiesToSend.UseJournalQueue%2A> 和<xref:System.Messaging.DefaultPropertiesToSend.UseDeadLetterQueue%2A>指定消息队列将如何跟踪消息。 如果<xref:System.Messaging.DefaultPropertiesToSend.UseDeadLetterQueue%2A>是`true`，则如果 （适用于非事务性消息） 的传递失败，消息发送到无法传递消息 （例如，如果邮件计时器已过期） 的计算机上的非事务性死信队列。  
  
 对于事务性消息的传送失败，消息发送到在所有负数，有疑问的情况下在源计算机上的事务性死信队列。  
  
 当你将消息存储在死信队列时，清空队列定期以删除不再需要的消息。 存储在死信队列计数针对队列所驻留的计算机的大小配额的消息。 计算机配额由管理员设置，并分配用于存储消息的计算机上，而不仅仅是在单个队列的总大小是指。  
  
 不要创建日志或死信队列。 这些是由消息队列生成两个系统队列。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.UseJournalQueue" />
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.UseTracing" />
        <altmember cref="P:System.Messaging.Message.UseDeadLetterQueue" />
      </Docs>
    </Member>
    <Member MemberName="UseEncryption">
      <MemberSignature Language="C#" Value="public bool UseEncryption { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseEncryption" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.UseEncryption" />
      <MemberSignature Language="VB.NET" Value="Public Property UseEncryption As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseEncryption { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseEncryption : bool with get, set" Usage="System.Messaging.DefaultPropertiesToSend.UseEncryption" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgUseEncryption")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否使消息成为私有的。</summary>
        <value>要求消息队列加密消息时为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果消息是私有的其正文已加密之前它发送和接收时解密。 若要发送私有消息，发送应用程序必须指定要使用加密和 （可选） 的加密算法来应用。  
  
 发送私有消息时，不需要你的应用程序执行消息加密。 消息队列可以加密消息正文为你在应用程序发送一个 Microsoft Windows 2000 的企业中的消息时对目录服务的访问的情况。 在接收时私有消息，它始终是解密消息正文接收队列管理器。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.EncryptionAlgorithm" />
        <altmember cref="P:System.Messaging.MessageQueue.EncryptionRequired" />
        <altmember cref="P:System.Messaging.Message.UseEncryption" />
      </Docs>
    </Member>
    <Member MemberName="UseJournalQueue">
      <MemberSignature Language="C#" Value="public bool UseJournalQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseJournalQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.UseJournalQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property UseJournalQueue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseJournalQueue { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseJournalQueue : bool with get, set" Usage="System.Messaging.DefaultPropertiesToSend.UseJournalQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgUseJournalQueue")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否在始发计算机的计算机日记中保留消息的副本。</summary>
        <value>要求在消息成功地从发件计算机传送到下一步后，将消息的副本保存在发件计算机的计算机日记中时为 <see langword="true" />，否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.DefaultPropertiesToSend.UseJournalQueue%2A> 和<xref:System.Messaging.DefaultPropertiesToSend.UseDeadLetterQueue%2A>指定消息队列将如何跟踪消息。 如果<xref:System.Messaging.DefaultPropertiesToSend.UseJournalQueue%2A>是`true`，然后在传输消息的每个步骤的副本保留在原始计算机上的计算机日志。  
  
 如果目标队列位于远程计算机上，发送的消息只能复制到日记队列中。 如果目标为本地计算机上，该消息被直接发送到队列，则为没有中间步骤需要日记记录。  
  
 当你将日记队列中存储消息时，清空队列定期以删除不再需要的消息。 针对队列所驻留的计算机的配额的日记队列计数中存储的消息 （由管理员设置的计算机配额）。  
  
 不要创建日志或死信队列。 这些是由消息队列生成两个系统队列。  
  
 可通过消息和队列指定日志记录。 当<xref:System.Messaging.DefaultPropertiesToSend.UseJournalQueue%2A?displayProperty=nameWithType>是`true`，发送时，消息是日志。 当<xref:System.Messaging.MessageQueue.UseJournalQueue%2A?displayProperty=nameWithType>是`true`，它收到时，消息会日志。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.UseDeadLetterQueue" />
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.UseTracing" />
        <altmember cref="P:System.Messaging.MessageQueue.UseJournalQueue" />
        <altmember cref="P:System.Messaging.MessageQueue.MaximumJournalSize" />
        <altmember cref="P:System.Messaging.Message.UseJournalQueue" />
      </Docs>
    </Member>
    <Member MemberName="UseTracing">
      <MemberSignature Language="C#" Value="public bool UseTracing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseTracing" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.UseTracing" />
      <MemberSignature Language="VB.NET" Value="Public Property UseTracing As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseTracing { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseTracing : bool with get, set" Usage="System.Messaging.DefaultPropertiesToSend.UseTracing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgUseTracing")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否在消息向目标队列移动的过程中跟踪消息。</summary>
        <value>如果在发往目标队列的过程中，由原始消息产生的每个中间步骤都生成发送给系统报告队列的报告，则为 <see langword="true" />，否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.DefaultPropertiesToSend.UseTracing%2A>属性指定是否向其目标队列移动跟踪消息的路由。 如果`true`，消息队列生成的报告消息发送到报告队列每次该消息通过消息队列的路由服务器。 源队列管理器指定的报告队列。 报告队列并不局限于消息队列生成报告消息。 你应用程序生成的消息可以发送到报告队列。  
  
 使用跟踪包括设置 Active Directory 和指定报表队列的消息队列企业。 由管理员配置这些设置。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.UseDeadLetterQueue" />
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.UseJournalQueue" />
        <altmember cref="P:System.Messaging.Message.UseTracing" />
      </Docs>
    </Member>
  </Members>
</Type>