<Type Name="MessageEnumerator" FullName="System.Messaging.MessageEnumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a914a8824c1f787c1a3c58550df7e14134e3fa46" /><Meta Name="ms.sourcegitcommit" Value="7461f9e28c2f184bd1596e6f07c25a3f34984516" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/28/2019" /><Meta Name="ms.locfileid" Value="58562298" /></Metadata><TypeSignature Language="C#" Value="public class MessageEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageEnumerator extends System.MarshalByRefObject implements class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageEnumerator&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable, IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageEnumerator : MarshalByRefObject, IDisposable, System::Collections::IEnumerator" />
  <TypeSignature Language="F#" Value="type MessageEnumerator = class&#xA;    inherit MarshalByRefObject&#xA;    interface IEnumerator&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="ea2e3-101">提供一个只进游标，以枚举通过消息队列中的消息。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-101">Provides a forward-only cursor to enumerate through messages in a message queue.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea2e3-102">使用<xref:System.Messaging.MessageEnumerator>与队列中的消息进行动态交互。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-102">Use <xref:System.Messaging.MessageEnumerator> for dynamic interaction with messages in a queue.</span></span> <span data-ttu-id="ea2e3-103">方法可通过<xref:System.Messaging.MessageQueue>类可以返回<xref:System.Messaging.MessageEnumerator>指向队列或在给定时刻的快照的队列的时包含副本的数组中的消息的动态列表指定的方法调用。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-103">Methods available through the <xref:System.Messaging.MessageQueue> class can return either a <xref:System.Messaging.MessageEnumerator> pointing to a dynamic list of messages in the queue, or an array that contains a copy at a given instant - a snapshot - of the queue at the time the specified method was called.</span></span>  
  
 <span data-ttu-id="ea2e3-104">与不同的静态快照，一个枚举器，可修改集合。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-104">Unlike a static snapshot, an enumerator allows you to modify the collection.</span></span> <span data-ttu-id="ea2e3-105">使用<xref:System.Messaging.MessageEnumerator>，可以从队列中删除消息并将更改会立即反映在队列中。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-105">Using a <xref:System.Messaging.MessageEnumerator>, you can remove messages from the queue, and the change is immediately reflected in the queue.</span></span>  
  
 <span data-ttu-id="ea2e3-106">一个枚举器不会从队列删除消息，当它查询队列时。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-106">An enumerator does not remove the messages from the queue when it queries the queue.</span></span> <span data-ttu-id="ea2e3-107">它将返回有关在当前光标位置，消息的信息，但它会将此消息在队列中。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-107">It returns information about the message at the current cursor position, but it leaves the message in the queue.</span></span>  
  
 <span data-ttu-id="ea2e3-108">一个<xref:System.Messaging.MessageEnumerator>是游标，初始化为动态列表的开头。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-108">A <xref:System.Messaging.MessageEnumerator> is a cursor, initialized to the head of a dynamic list.</span></span> <span data-ttu-id="ea2e3-109">列表顺序等同于队列中消息的顺序根据消息优先级。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-109">The list order is the same as the order of the messages in the queue, according to message priority.</span></span> <span data-ttu-id="ea2e3-110">您可以将光标移动到队列中的第一个消息通过调用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-110">You can move the cursor to the first message in the queue by calling <xref:System.Messaging.MessageEnumerator.MoveNext%2A>.</span></span> <span data-ttu-id="ea2e3-111">枚举器已初始化后，可以使用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>来单步执行其余的消息的转发。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-111">After the enumerator has been initialized, you can use <xref:System.Messaging.MessageEnumerator.MoveNext%2A> to step forward through the remaining messages.</span></span> <span data-ttu-id="ea2e3-112">您可以指定是否要等待的消息变得可用，通过将传递到超时<xref:System.Messaging.MessageEnumerator.MoveNext%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-112">You can specify whether to wait for a message to become available by passing a timeout into the <xref:System.Messaging.MessageEnumerator.MoveNext%2A> method.</span></span>  
  
 <span data-ttu-id="ea2e3-113">枚举器是动态的因为可以通过枚举器访问游标的当前位置 （例如，由于低优先级），之后追加一条消息。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-113">Because the enumerator is dynamic, a message that is appended beyond the cursor's current position (for example, due to low priority), can be accessed by the enumerator.</span></span> <span data-ttu-id="ea2e3-114">不能访问游标的当前位置之前插入一条消息。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-114">A message that is inserted before the cursor's current position cannot be accessed.</span></span> <span data-ttu-id="ea2e3-115">不能使用向后移动<xref:System.Messaging.MessageEnumerator>。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-115">It is not possible to step backward with a <xref:System.Messaging.MessageEnumerator>.</span></span> <span data-ttu-id="ea2e3-116">游标允许仅向前移动。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-116">A cursor allows forward-only movement.</span></span> <span data-ttu-id="ea2e3-117"><xref:System.Messaging.MessageEnumerator.Reset%2A>方法使你可以将光标放回队列的开头。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-117">The <xref:System.Messaging.MessageEnumerator.Reset%2A> method enables you to place the cursor back at the beginning of the queue.</span></span>  
  
 <span data-ttu-id="ea2e3-118">实例<xref:System.Messaging.MessageEnumerator>为给定队列独立工作。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-118">Instances of <xref:System.Messaging.MessageEnumerator> for a given queue work independently.</span></span> <span data-ttu-id="ea2e3-119">您可以创建两个<xref:System.Messaging.MessageEnumerator>将应用于同一个队列的实例。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-119">You can create two <xref:System.Messaging.MessageEnumerator> instances that apply to the same queue.</span></span> <span data-ttu-id="ea2e3-120">所做的更改，其中一个<xref:System.Messaging.MessageEnumerator>人员对队列中的消息将立即得到反映在第二个枚举器中第二个枚举数定位在第一个之前。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-120">The changes that one <xref:System.Messaging.MessageEnumerator> makes to the messages in the queue will be reflected immediately in a second enumerator if the second enumerator is positioned before the first.</span></span> <span data-ttu-id="ea2e3-121">但是，如果两个枚举器具有相同的位置，并且其中之一中移除该位置的消息，将引发异常如果其他枚举器尝试获取的值<xref:System.Messaging.MessageEnumerator.Current%2A>属性，现已删除消息。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-121">However, if two enumerators have the same position and one of them removes the message at that position, an exception is thrown if the other enumerator attempts to get the value of the <xref:System.Messaging.MessageEnumerator.Current%2A> property on the now-deleted message.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="ea2e3-122">如果创建的实例<xref:System.Messaging.MessageQueue>与<xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=nameWithType>设置为`true`，没有任何其他应用程序可以修改在枚举器中的消息，而具有队列的连接。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-122">If you create an instance of <xref:System.Messaging.MessageQueue> with <xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=nameWithType> set to `true`, no other application can modify the messages in your enumerator while you have the connection to the queue.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ea2e3-123">下面的示例获取队列中消息的动态列表，并与所有消息进行都计数<xref:System.Messaging.Message.Priority%2A>属性设置为<xref:System.Messaging.MessagePriority.Lowest?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-123">The following example gets a dynamic list of messages in a queue and counts all messages with the <xref:System.Messaging.Message.Priority%2A> property set to <xref:System.Messaging.MessagePriority.Lowest?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CPP/mqgetmessageenumerator.cpp#1)]
 [!code-csharp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CS/mqgetmessageenumerator.cs#1)]
 [!code-vb[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/VB/mqgetmessageenumerator.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.Message" />
    <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator2" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="messageEnumerator.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ea2e3-124">释放与枚举数关联的资源。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-124">Frees the resources associated with the enumerator.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea2e3-125">在游标的生存期内，操作系统会保留到队列的打开句柄。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-125">The operating system retains an open handle to the queue during the lifetime of the cursor.</span></span> <span data-ttu-id="ea2e3-126">完成使用枚举器后，调用<xref:System.Messaging.MessageEnumerator.Close%2A>释放与句柄关联的资源。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-126">When you have finished working with the enumerator, call <xref:System.Messaging.MessageEnumerator.Close%2A> to release the resources associated with the handle.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Messaging.Message Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.Message Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::Message ^ Current { System::Messaging::Message ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Messaging.Message" Usage="System.Messaging.MessageEnumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ea2e3-127">获取该枚举数指向的当前 <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-127">Gets the current <see cref="T:System.Messaging.Message" /> that this enumerator points to.</span></span></summary>
        <value><span data-ttu-id="ea2e3-128">当前消息。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-128">The current message.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea2e3-129">创建枚举器时，它指向该队列，在第一条消息之前的位置的开头。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-129">When the enumerator is created, it points to the head of the queue, at a location before the first message.</span></span> <span data-ttu-id="ea2e3-130">在这种情况下，<xref:System.Messaging.MessageEnumerator.Current%2A>无效，将引发异常，如果访问它。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-130">In this case, <xref:System.Messaging.MessageEnumerator.Current%2A> is not valid and will throw an exception if it is accessed.</span></span> <span data-ttu-id="ea2e3-131">必须调用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>将游标定位在队列中的第一条。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-131">You must call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> to position the cursor at the first message in the queue.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea2e3-132">您在第一次调用 <see cref="P:System.Messaging.MessageEnumerator.Current" /> 之前调用了 <see cref="M:System.Messaging.MessageEnumerator.MoveNext" />。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-132">You called <see cref="P:System.Messaging.MessageEnumerator.Current" /> before the first call to <see cref="M:System.Messaging.MessageEnumerator.MoveNext" />.</span></span> <span data-ttu-id="ea2e3-133">游标位于消息枚举的第一个元素之前。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-133">The cursor is located before the first element of the message enumeration.</span></span>  
  
<span data-ttu-id="ea2e3-134">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ea2e3-134">-or-</span></span> 
<span data-ttu-id="ea2e3-135">您在对 <see cref="P:System.Messaging.MessageEnumerator.Current" /> 的调用返回 <see langword="false" />（指示游标位于消息枚举中的最后一个元素之后）之后调用了 <see cref="M:System.Messaging.MessageEnumerator.MoveNext" />。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-135">You called <see cref="P:System.Messaging.MessageEnumerator.Current" /> after a call to <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> had returned <see langword="false" /> (indicating the cursor is located after the last element of the message enumeration.)</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="ea2e3-136">枚举数当前所指向的消息不再存在。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-136">The message the enumerator is currently pointing to no longer exists.</span></span> <span data-ttu-id="ea2e3-137">可能已将其删除。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-137">It might have been deleted.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="CursorHandle">
      <MemberSignature Language="C#" Value="public IntPtr CursorHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int CursorHandle" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.CursorHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CursorHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr CursorHandle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.CursorHandle : nativeint" Usage="System.Messaging.MessageEnumerator.CursorHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ea2e3-138">获取用于浏览队列消息的本机消息队列游标句柄。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-138">Gets the native Message Queuing cursor handle used to browse messages in the queue.</span></span></summary>
        <value><span data-ttu-id="ea2e3-139">本机游标句柄。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-139">The native cursor handle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea2e3-140">此属性包含的本机句柄的枚举。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-140">This property contains the native handle to the enumeration.</span></span> <span data-ttu-id="ea2e3-141">完成使用枚举器后，调用<xref:System.Messaging.MessageEnumerator.Close%2A>释放此资源。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-141">When you have finished working with the enumerator, call <xref:System.Messaging.MessageEnumerator.Close%2A> to release this resource.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="ea2e3-142">此句柄不存在。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-142">The handle does not exist.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ea2e3-143">释放由 <see cref="T:System.Messaging.MessageEnumerator" /> 占用的资源。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-143">Releases the resources used by the <see cref="T:System.Messaging.MessageEnumerator" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="messageEnumerator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ea2e3-144">释放由 <see cref="T:System.Messaging.MessageEnumerator" /> 使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-144">Releases all resources used by the <see cref="T:System.Messaging.MessageEnumerator" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea2e3-145">调用<xref:System.Messaging.MessageEnumerator.Dispose%2A>允许使用的资源<xref:System.Messaging.MessageEnumerator>重新分配用于其他目的。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-145">Calling <xref:System.Messaging.MessageEnumerator.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageEnumerator> to be reallocated for other purposes.</span></span> <span data-ttu-id="ea2e3-146">有关详细信息<xref:System.Messaging.MessageEnumerator.Dispose%2A>，请参阅[清理了非托管资源](~/docs/standard/garbage-collection/unmanaged.md)。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-146">For more information about <xref:System.Messaging.MessageEnumerator.Dispose%2A>, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/unmanaged.md"><span data-ttu-id="ea2e3-147">清理非托管资源</span><span class="sxs-lookup"><span data-stu-id="ea2e3-147">Cleaning Up Unmanaged Resources</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="messageEnumerator.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="ea2e3-148"><see langword="true" /> 表示释放托管资源和非托管资源；<see langword="false" /> 表示仅释放非托管资源。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-148"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="ea2e3-149">释放由 <see cref="T:System.Messaging.MessageEnumerator" /> 占用的非托管资源，还可以另外再释放托管资源。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-149">Releases the unmanaged resources used by the <see cref="T:System.Messaging.MessageEnumerator" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea2e3-150">调用此方法由公共<xref:System.Messaging.MessageEnumerator.Dispose%2A>方法和<xref:System.Object.Finalize%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-150">This method is called by the public <xref:System.Messaging.MessageEnumerator.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="ea2e3-151">`Dispose()` 调用受保护`Dispose(Boolean)`方法替换`disposing`参数设置为`true`。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-151">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="ea2e3-152"><xref:System.Object.Finalize%2A> 调用`Dispose`与`disposing`设置为`false`。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-152"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="ea2e3-153">当 `disposing` 参数为 `true` 时，此方法释放该 <xref:System.Messaging.MessageEnumerator> 引用的、由任何托管对象持有的全部资源。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-153">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageEnumerator> references.</span></span> <span data-ttu-id="ea2e3-154">此方法调用每个引用对象的 `Dispose()` 方法。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-154">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="ea2e3-155">
            <see langword="Dispose" /> 可以由其他对象多次调用。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-155">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="ea2e3-156">重写 <see langword="Dispose(Boolean)" /> 时，请注意不要引用在以前调用 <see langword="Dispose" /> 时已释放的对象。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-156">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="ea2e3-157">有关如何实现详细信息<see langword="Dispose" />，请参阅[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-157">For more information about how to implement <see langword="Dispose" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
<span data-ttu-id="ea2e3-158">有关详细信息<see langword="Dispose" />并<see langword="Finalize" />，请参阅[清理了非托管资源](~/docs/standard/garbage-collection/unmanaged.md)并[重写 Finalize 方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-158">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span></para></block>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md"><span data-ttu-id="ea2e3-159">实现 Dispose 方法</span><span class="sxs-lookup"><span data-stu-id="ea2e3-159">Implementing a Dispose method</span></span></related>
        <related type="Article" href="~/docs/standard/garbage-collection/unmanaged.md"><span data-ttu-id="ea2e3-160">清理非托管资源</span><span class="sxs-lookup"><span data-stu-id="ea2e3-160">Cleaning Up Unmanaged Resources</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageEnumerator ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="messageEnumerator.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ea2e3-161">释放枚举数控制的资源。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-161">Releases the resources held by the enumerator.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="ea2e3-162">此方法重写 <xref:System.Object.Finalize>。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-162">This method overrides <xref:System.Object.Finalize>.</span></span> <span data-ttu-id="ea2e3-163">应用程序代码不应调用此方法。对象的 Finalize 方法期间将自动调用垃圾回收，除非已禁用通过调用由垃圾回收器终止<xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>方法。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-163">Application code should not call this method; an object's Finalize method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>

<span data-ttu-id="ea2e3-164">有关详细信息，请参阅[Finalize 方法和析构函数](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v=vs.100))，[清理了非托管资源](~/docs/standard/garbage-collection/unmanaged.md)，并[重写 Finalize 方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-164">For more information, see [Finalize Methods and Destructors](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v=vs.100)), [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md), and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span>

]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveNext">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ea2e3-165">使枚举数前进到队列中的下一条消息。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-165">Advances the enumerator to the next message in the queue.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="messageEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ea2e3-166">如果当前队列中有下一条可用的消息，则使枚举数前进到该消息。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-166">Advances the enumerator to the next message in the queue, if one is currently available.</span></span></summary>
        <returns><span data-ttu-id="ea2e3-167">如果枚举器已成功推进到下一条消息，则为 <see langword="true" />；如果枚举器已传递到队列的末尾，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-167"><see langword="true" /> if the enumerator was successfully advanced to the next message; <see langword="false" /> if the enumerator has reached the end of the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea2e3-168">此重载方法立即返回队列中是否存在任何消息。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-168">This overload returns immediately if there is no message in the queue.</span></span> <span data-ttu-id="ea2e3-169">没有等待指定的另一个重载<xref:System.TimeSpan>到达的消息。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-169">There is another overload that waits a specified <xref:System.TimeSpan> for a message to arrive.</span></span>  
  
 <span data-ttu-id="ea2e3-170">如果因为队列为空或者已经移动到集合中的最后一个元素以外，一条消息不是当前可用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>返回`false`到调用方法。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-170">If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> returns `false` to the calling method.</span></span>  
  
 <span data-ttu-id="ea2e3-171">创建后，一个枚举器从概念上讲位于前面的第一个消息的队列，并在首次调用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>将显示队列的第一条消息。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-171">Upon creation, an enumerator is conceptually positioned before the first message of the queue, and the first call to <xref:System.Messaging.MessageEnumerator.MoveNext%2A> brings the first message of the queue into view.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="ea2e3-172">引发了消息队列特定的异常。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-172">An exception specific to Message Queuing was thrown.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.MoveNext : TimeSpan -&gt; bool" Usage="messageEnumerator.MoveNext timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="ea2e3-173">枚举数位于队列的末尾时，等待消息变得可用的 <see cref="T:System.TimeSpan" />。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-173">The <see cref="T:System.TimeSpan" /> to wait for a message to be available if the enumerator is positioned at the end of the queue.</span></span></param>
        <summary><span data-ttu-id="ea2e3-174">使枚举数前进到队列中的下一条消息。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-174">Advances the enumerator to the next message in the queue.</span></span> <span data-ttu-id="ea2e3-175">如果枚举数位于队列的末尾，则 <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> 将一直等到消息可用或给定 timeout 到期为止。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-175">If the enumerator is positioned at the end of the queue, <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> waits until a message is available or the given timeout expires.</span></span></summary>
        <returns><span data-ttu-id="ea2e3-176">如果枚举数成功地前进到下一条消息，为 <see langword="true" />；如果枚举数已经到达队列的末尾，并且在 <paramref name="timeout" /> 参数所指定的时间内没有消息变得可用，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-176"><see langword="true" /> if the enumerator successfully advanced to the next message; <see langword="false" /> if the enumerator has reached the end of the queue and a message does not become available within the time specified by the <paramref name="timeout" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea2e3-177">如果队列中没有任何消息或游标已到达队列的末尾，在等待此重载。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-177">This overload waits if there is no message in the queue or if the cursor has reached the end of the queue.</span></span> <span data-ttu-id="ea2e3-178">如果因为队列为空或者已经移动到集合中的最后一个元素以外，一条消息不是当前可用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>等待指定的超时时间。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-178">If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> waits the specified timeout.</span></span>  
  
 <span data-ttu-id="ea2e3-179">如果光标已在队列中，末尾<xref:System.Messaging.MessageEnumerator.MoveNext%2A>只返回`true`如果新消息到达时指定的时间间隔内，队列中当前具有较低的优先级高于所有消息，并放在队列的末尾。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-179">If the cursor is already at the end of the queue, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> only returns `true` if the new message arrives within the specified time interval, has lower priority than all messages currently in the queue and is placed at the end of the queue.</span></span> <span data-ttu-id="ea2e3-180">如果没有更多消息位于队列中不使用任何参数的重载立即返回。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-180">An overload with no parameter returns immediately if no further messages are in the queue.</span></span>  
  
 <span data-ttu-id="ea2e3-181">创建后，一个枚举器从概念上讲位于前面的枚举，并在首次调用的第一个消息<xref:System.Messaging.MessageEnumerator.MoveNext%2A>将枚举转换视图的第一个消息。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-181">Upon creation, an enumerator is conceptually positioned before the first message of the enumeration, and the first call to <xref:System.Messaging.MessageEnumerator.MoveNext%2A> brings the first message of the enumeration into view.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea2e3-182">为 timeout 参数指定的值无效。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-182">The value specified for the timeout parameter is invalid.</span></span> <span data-ttu-id="ea2e3-183">它可能表示负数。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-183">It might represent a negative number.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="ea2e3-184">引发了消息队列特定的异常。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-184">An exception specific to Message Queuing was thrown.</span></span>  
  
<span data-ttu-id="ea2e3-185">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ea2e3-185">-or-</span></span> 
<span data-ttu-id="ea2e3-186">超时已过期。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-186">The timeout has expired.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RemoveCurrent">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ea2e3-187">从队列中移除当前消息并将该消息返回给调用应用程序。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-187">Removes the current message from the queue and returns the message to the calling application.</span></span> <span data-ttu-id="ea2e3-188">移除消息即从队列中删除该消息。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-188">Removing the message deletes it from the queue.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea2e3-189">这些重载的所述的行为是适用才<xref:System.Messaging.MessageEnumerator>通过使用检索实例<xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A>。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-189">The behavior described for these overloads is applicable only if the <xref:System.Messaging.MessageEnumerator> instance is retrieved by using the <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A>.</span></span> <span data-ttu-id="ea2e3-190">不要使用<xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A>若要检索的实例<xref:System.Messaging.MessageEnumerator>按此方法已弃用。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-190">Do not use <xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A> to retrieve an instance of <xref:System.Messaging.MessageEnumerator> as this method has been deprecated.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent () As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent();" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : unit -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ea2e3-191">从事务性或非事务性队列中移除当前消息，并将该消息返回给调用应用程序。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-191">Removes the current message from a transactional or non-transactional queue and returns the message to the calling application.</span></span> <span data-ttu-id="ea2e3-192">对于消息到达队列的用时没有超时指定。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-192">There is no timeout specified for a message to arrive in the queue.</span></span></summary>
        <returns><span data-ttu-id="ea2e3-193"><see cref="T:System.Messaging.Message" />，它引用队列中可用的第一条消息。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-193">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea2e3-194"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 移除并返回的消息，以在游标的当前位置。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-194"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location.</span></span>  
  
 <span data-ttu-id="ea2e3-195">如果使用的队列日志记录，删除消息会导致副本要保留在日志队列中，就像<xref:System.Messaging.MessageQueue>类的<xref:System.Messaging.MessageQueue.Receive%2A>方法执行。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-195">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="ea2e3-196">删除当前的消息时，将光标移到下一条消息。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-196">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="ea2e3-197">无需调用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>后调用<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-197">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 <span data-ttu-id="ea2e3-198">如果你对事务性队列调用此重载，消息队列创建单个内部事务。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-198">If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : System.Messaging.MessageQueueTransaction -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent transaction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="transaction"><span data-ttu-id="ea2e3-199">指定从中移除消息的事务的 <see cref="T:System.Messaging.MessageQueueTransaction" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-199">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object that specifies the transaction in which the message will be removed.</span></span></param>
        <summary><span data-ttu-id="ea2e3-200">从事务性队列中移除当前消息，并将该消息返回给调用应用程序。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-200">Removes the current message from a transactional queue and returns the message to the calling application.</span></span> <span data-ttu-id="ea2e3-201">对于消息到达队列的用时没有超时指定。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-201">There is no timeout specified for a message to arrive in the queue.</span></span></summary>
        <returns><span data-ttu-id="ea2e3-202"><see cref="T:System.Messaging.Message" />，它引用队列中可用的第一条消息。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-202">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea2e3-203"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 移除并返回的消息，以在游标的当前位置，使用由定义的内部事务上下文`transaction`参数。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-203"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using the internal transaction context defined by the `transaction` parameter.</span></span>  
  
 <span data-ttu-id="ea2e3-204">如果使用的队列日志记录，删除消息会导致副本要保留在日志队列中，就像<xref:System.Messaging.MessageQueue>类的<xref:System.Messaging.MessageQueue.Receive%2A>方法执行。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-204">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="ea2e3-205">当使用事务性队列，事务的回滚将导致通过调用中删除任何消息<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>要返回到队列。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-205">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="ea2e3-206">在事务提交之前删除不是不可逆的。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-206">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="ea2e3-207">删除当前的消息时，将光标移到下一条消息。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-207">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="ea2e3-208">无需调用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>后调用<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-208">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ea2e3-209"><paramref name="transaction" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-209">The <paramref name="transaction" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : System.Messaging.MessageQueueTransactionType -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent transactionType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="transactionType"><span data-ttu-id="ea2e3-210"><see cref="T:System.Messaging.MessageQueueTransactionType" /> 值之一，它描述与消息关联的事务上下文的类型。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-210">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</span></span></param>
        <summary><span data-ttu-id="ea2e3-211">从队列中移除当前消息并将该消息返回给调用应用程序。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-211">Removes the current message from a queue and returns the message to the calling application.</span></span> <span data-ttu-id="ea2e3-212">对于消息到达队列的用时没有超时指定。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-212">There is no timeout specified for a message to arrive in the queue.</span></span></summary>
        <returns><span data-ttu-id="ea2e3-213"><see cref="T:System.Messaging.Message" />，它引用队列中可用的第一条消息。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-213">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea2e3-214"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 移除并返回的消息，以在游标的当前位置，使用定义的事务上下文`transactionType`参数。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-214"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using a transaction context defined by the `transactionType` parameter.</span></span>  
  
 <span data-ttu-id="ea2e3-215">指定`Automatic`为`transactionType`参数如果已经有外部事务上下文附加到你想要使用用于接收消息的线程。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-215">Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</span></span> <span data-ttu-id="ea2e3-216">指定`Single`如果想要接收的消息作为单个内部事务。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-216">Specify `Single` if you want to receive the message as a single internal transaction.</span></span> <span data-ttu-id="ea2e3-217">您可以指定`None`如果你想要接收来自事务上下文外的事务性队列的消息。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-217">You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.</span></span>  
  
 <span data-ttu-id="ea2e3-218">如果使用的队列日志记录，删除消息会导致副本要保留在日志队列中，就像<xref:System.Messaging.MessageQueue>类的<xref:System.Messaging.MessageQueue.Receive%2A>方法执行。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-218">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="ea2e3-219">当使用事务性队列，事务的回滚将导致通过调用中删除任何消息<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>要返回到队列。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-219">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="ea2e3-220">在事务提交之前删除不是不可逆的。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-220">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="ea2e3-221">删除当前的消息时，将光标移到下一条消息。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-221">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="ea2e3-222">无需调用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>后调用<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-222">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="ea2e3-223"><paramref name="transactionType" /> 参数不是 <see cref="T:System.Messaging.MessageQueueTransactionType" /> 成员之一。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-223">The <paramref name="transactionType" /> parameter is not one of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> members.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="ea2e3-224">等待消息到达队列的时间间隔。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-224">The interval of time to wait for a message to arrive in the queue.</span></span></param>
        <summary><span data-ttu-id="ea2e3-225">从队列中移除当前消息并将该消息返回给调用应用程序。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-225">Removes the current message from the queue and returns the message to the calling application.</span></span> <span data-ttu-id="ea2e3-226">如果有要移除的消息，该方法将立即返回该消息。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-226">If there is a message to remove, the method returns it immediately.</span></span> <span data-ttu-id="ea2e3-227">否则，该方法在指定的超时内等待新消息到达。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-227">Otherwise, the method waits the specified timeout for a new message to arrive.</span></span></summary>
        <returns><span data-ttu-id="ea2e3-228"><see cref="T:System.Messaging.Message" />，它引用队列中可用的第一条消息。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-228">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea2e3-229"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 移除并返回的消息，以在游标的当前位置。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-229"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location.</span></span> <span data-ttu-id="ea2e3-230">如果光标位于队列末尾，此重载方法的等待，直到有可用消息或指定的间隔`timeout`参数已过期。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-230">If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.</span></span>  
  
 <span data-ttu-id="ea2e3-231">如果使用的队列日志记录，删除消息会导致副本要保留在日志队列中，就像<xref:System.Messaging.MessageQueue>类的<xref:System.Messaging.MessageQueue.Receive%2A>方法执行。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-231">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="ea2e3-232">删除当前的消息时，将光标移到下一条消息。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-232">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="ea2e3-233">无需调用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>后调用<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-233">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 <span data-ttu-id="ea2e3-234">如果你对事务性队列调用此重载，消息队列创建单个内部事务。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-234">If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea2e3-235">为 <paramref name="timeout" /> 参数指定的值无效。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-235">The value specified for the <paramref name="timeout" /> parameter is invalid.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="ea2e3-236">超时已过期。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-236">The timeout has expired.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout, class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan, transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout, System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan * System.Messaging.MessageQueueTransaction -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent (timeout, transaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="ea2e3-237">等待消息被移除的时间间隔。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-237">The interval of time to wait for the message to be removed.</span></span></param>
        <param name="transaction"><span data-ttu-id="ea2e3-238">为消息指定事务上下文的 <see cref="T:System.Messaging.MessageQueueTransaction" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-238">The <see cref="T:System.Messaging.MessageQueueTransaction" /> object that specifies the transaction context for the message.</span></span></param>
        <summary><span data-ttu-id="ea2e3-239">从事务性队列中移除当前消息，并将该消息返回给调用应用程序。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-239">Removes the current message from a transactional queue and returns the message to the calling application.</span></span> <span data-ttu-id="ea2e3-240">如果有要移除的消息，该方法将立即返回该消息。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-240">If there is a message to remove, the method returns it immediately.</span></span> <span data-ttu-id="ea2e3-241">否则，该方法在指定的超时内等待新消息到达。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-241">Otherwise, the method waits the specified timeout for a new message to arrive.</span></span></summary>
        <returns><span data-ttu-id="ea2e3-242"><see cref="T:System.Messaging.Message" />，它引用队列中可用的第一条消息。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-242">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea2e3-243"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 移除并返回的消息，以在游标的当前位置。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-243"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location.</span></span> <span data-ttu-id="ea2e3-244">如果光标位于队列末尾，此重载方法的等待，直到有可用消息或指定的间隔`timeout`参数已过期。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-244">If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.</span></span>  
  
 <span data-ttu-id="ea2e3-245">当使用事务性队列，事务的回滚将导致通过调用中删除任何消息<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>要返回到队列。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-245">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="ea2e3-246">在事务提交之前删除不是不可逆的。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-246">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="ea2e3-247">如果使用的队列日志记录，删除消息会导致副本要保留在日志队列中，就像<xref:System.Messaging.MessageQueue>类的<xref:System.Messaging.MessageQueue.Receive%2A>方法执行。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-247">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="ea2e3-248">删除当前的消息时，将光标移到下一条消息。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-248">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="ea2e3-249">无需调用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>后调用<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-249">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea2e3-250">为 <paramref name="timeout" /> 参数指定的值无效。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-250">The value specified for the <paramref name="timeout" /> parameter is invalid.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ea2e3-251"><paramref name="transaction" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-251">The <paramref name="transaction" /> parameter is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="ea2e3-252">超时已过期。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-252">The timeout has expired.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout, valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan, transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout, System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan * System.Messaging.MessageQueueTransactionType -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent (timeout, transactionType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="ea2e3-253">等待消息被移除的时间间隔。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-253">The interval of time to wait for the message to be removed.</span></span></param>
        <param name="transactionType"><span data-ttu-id="ea2e3-254"><see cref="T:System.Messaging.MessageQueueTransactionType" /> 值之一，它描述与消息关联的事务上下文的类型。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-254">One of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> values, describing the type of transaction context to associate with the message.</span></span></param>
        <summary><span data-ttu-id="ea2e3-255">从队列中移除当前消息并将该消息返回给调用应用程序。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-255">Removes the current message from a queue and returns the message to the calling application.</span></span> <span data-ttu-id="ea2e3-256">如果有要移除的消息，该方法将立即返回该消息。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-256">If there is a message to remove, the method returns it immediately.</span></span> <span data-ttu-id="ea2e3-257">否则，该方法在指定的超时内等待新消息到达。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-257">Otherwise, the method waits the specified timeout for a new message to arrive.</span></span></summary>
        <returns><span data-ttu-id="ea2e3-258"><see cref="T:System.Messaging.Message" />，它引用队列中可用的第一条消息。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-258">A <see cref="T:System.Messaging.Message" /> that references the first message available in the queue.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea2e3-259"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 移除并返回的消息，以在游标的当前位置，使用定义的事务上下文`transactionType`参数。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-259"><xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using a transaction context defined by the `transactionType` parameter.</span></span> <span data-ttu-id="ea2e3-260">如果光标位于队列末尾，此重载方法的等待，直到有可用消息或指定的间隔`timeout`参数已过期。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-260">If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.</span></span>  
  
 <span data-ttu-id="ea2e3-261">指定`Automatic`为`transactionType`参数如果已经有外部事务上下文附加到你想要使用用于接收消息的线程。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-261">Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.</span></span> <span data-ttu-id="ea2e3-262">指定`Single`如果想要接收的消息作为单个内部事务。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-262">Specify `Single` if you want to receive the message as a single internal transaction.</span></span> <span data-ttu-id="ea2e3-263">您可以指定`None`如果你想要接收来自事务上下文外的事务性队列的消息。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-263">You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.</span></span>  
  
 <span data-ttu-id="ea2e3-264">如果使用的队列日志记录，删除消息会导致副本要保留在日志队列中，就像<xref:System.Messaging.MessageQueue>类的<xref:System.Messaging.MessageQueue.Receive%2A>方法执行。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-264">If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.</span></span>  
  
 <span data-ttu-id="ea2e3-265">当使用事务性队列，事务的回滚将导致通过调用中删除任何消息<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>要返回到队列。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-265">When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue.</span></span> <span data-ttu-id="ea2e3-266">在事务提交之前删除不是不可逆的。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-266">The removal is not irreversible until the transaction is committed.</span></span>  
  
 <span data-ttu-id="ea2e3-267">删除当前的消息时，将光标移到下一条消息。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-267">When you remove the current message, the cursor is moved to the next message.</span></span> <span data-ttu-id="ea2e3-268">无需调用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>后调用<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-268">You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ea2e3-269">为 <paramref name="timeout" /> 参数指定的值无效。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-269">The value specified for the <paramref name="timeout" /> parameter is invalid.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="ea2e3-270">超时已过期。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-270">The timeout has expired.</span></span></exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="ea2e3-271"><paramref name="transactionType" /> 参数不是 <see cref="T:System.Messaging.MessageQueueTransactionType" /> 成员之一。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-271">The <paramref name="transactionType" /> parameter is not one of the <see cref="T:System.Messaging.MessageQueueTransactionType" /> members.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="messageEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ea2e3-272">重置当前枚举数，使其指向队列开头。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-272">Resets the current enumerator so it points to the head of the queue.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ea2e3-273">一个枚举器只能向前移动。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-273">An enumerator can only move in a forward direction.</span></span> <span data-ttu-id="ea2e3-274">使用此方法以在队列的开头重新开始。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-274">Use this method to start over at the beginning of the queue.</span></span>  
  
 <span data-ttu-id="ea2e3-275">在调用<xref:System.Messaging.MessageEnumerator.Reset%2A>，游标将指向第一条消息。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-275">After calling <xref:System.Messaging.MessageEnumerator.Reset%2A>, the cursor points to the first message.</span></span> <span data-ttu-id="ea2e3-276">不需要调用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>后调用<xref:System.Messaging.MessageEnumerator.Reset%2A>使光标向前移动到队列中的第一个消息。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-276">You do not need to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.Reset%2A> to move the cursor forward to the first message in the queue.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ea2e3-277">返回引用当前游标位置的消息的 <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-277">Returns a <see cref="T:System.Messaging.Message" /> that references the message at the current cursor position.</span></span></summary>
        <value><span data-ttu-id="ea2e3-278">引用当前游标位置的消息的 <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-278">A <see cref="T:System.Messaging.Message" /> that references the message at the current cursor position.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ea2e3-279">您在第一次调用 <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> 之前访问了此属性。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-279">You accessed this property before the first call to <see cref="M:System.Messaging.MessageEnumerator.MoveNext" />.</span></span> <span data-ttu-id="ea2e3-280">游标位于消息枚举的第一个元素之前。- 或 - 你在对 <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> 的调用返回 false（指示游标位于消息枚举中的最后一个元素之后）之后访问了此属性。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-280">The cursor is located before the first element of the message enumeration.-or- You accessed this property after a call to <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> had returned false (indicating the cursor is located after the last element of the message enumeration.)</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="ea2e3-281">枚举数当前所指向的消息不再存在。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-281">The message the enumerator is currently pointing to no longer exists.</span></span> <span data-ttu-id="ea2e3-282">可能已将其删除。</span><span class="sxs-lookup"><span data-stu-id="ea2e3-282">It might have been deleted.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>