<Type Name="MessageEnumerator" FullName="System.Messaging.MessageEnumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a914a8824c1f787c1a3c58550df7e14134e3fa46" /><Meta Name="ms.sourcegitcommit" Value="7461f9e28c2f184bd1596e6f07c25a3f34984516" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/28/2019" /><Meta Name="ms.locfileid" Value="58562298" /></Metadata><TypeSignature Language="C#" Value="public class MessageEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageEnumerator extends System.MarshalByRefObject implements class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageEnumerator&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable, IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageEnumerator : MarshalByRefObject, IDisposable, System::Collections::IEnumerator" />
  <TypeSignature Language="F#" Value="type MessageEnumerator = class&#xA;    inherit MarshalByRefObject&#xA;    interface IEnumerator&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>提供一个只进游标，以枚举通过消息队列中的消息。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Messaging.MessageEnumerator>与队列中的消息进行动态交互。 方法可通过<xref:System.Messaging.MessageQueue>类可以返回<xref:System.Messaging.MessageEnumerator>指向队列或在给定时刻的快照的队列的时包含副本的数组中的消息的动态列表指定的方法调用。  
  
 与不同的静态快照，一个枚举器，可修改集合。 使用<xref:System.Messaging.MessageEnumerator>，可以从队列中删除消息并将更改会立即反映在队列中。  
  
 一个枚举器不会从队列删除消息，当它查询队列时。 它将返回有关在当前光标位置，消息的信息，但它会将此消息在队列中。  
  
 一个<xref:System.Messaging.MessageEnumerator>是游标，初始化为动态列表的开头。 列表顺序等同于队列中消息的顺序根据消息优先级。 您可以将光标移动到队列中的第一个消息通过调用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>。 枚举器已初始化后，可以使用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>来单步执行其余的消息的转发。 您可以指定是否要等待的消息变得可用，通过将传递到超时<xref:System.Messaging.MessageEnumerator.MoveNext%2A>方法。  
  
 枚举器是动态的因为可以通过枚举器访问游标的当前位置 （例如，由于低优先级），之后追加一条消息。 不能访问游标的当前位置之前插入一条消息。 不能使用向后移动<xref:System.Messaging.MessageEnumerator>。 游标允许仅向前移动。 <xref:System.Messaging.MessageEnumerator.Reset%2A>方法使你可以将光标放回队列的开头。  
  
 实例<xref:System.Messaging.MessageEnumerator>为给定队列独立工作。 您可以创建两个<xref:System.Messaging.MessageEnumerator>将应用于同一个队列的实例。 所做的更改，其中一个<xref:System.Messaging.MessageEnumerator>人员对队列中的消息将立即得到反映在第二个枚举器中第二个枚举数定位在第一个之前。 但是，如果两个枚举器具有相同的位置，并且其中之一中移除该位置的消息，将引发异常如果其他枚举器尝试获取的值<xref:System.Messaging.MessageEnumerator.Current%2A>属性，现已删除消息。  
  
> [!NOTE]
>  如果创建的实例<xref:System.Messaging.MessageQueue>与<xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=nameWithType>设置为`true`，没有任何其他应用程序可以修改在枚举器中的消息，而具有队列的连接。  
  
   
  
## Examples  
 下面的示例获取队列中消息的动态列表，并与所有消息进行都计数<xref:System.Messaging.Message.Priority%2A>属性设置为<xref:System.Messaging.MessagePriority.Lowest?displayProperty=nameWithType>。  
  
 [!code-cpp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CPP/mqgetmessageenumerator.cpp#1)]
 [!code-csharp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CS/mqgetmessageenumerator.cs#1)]
 [!code-vb[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/VB/mqgetmessageenumerator.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.Message" />
    <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator2" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="messageEnumerator.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放与枚举数关联的资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在游标的生存期内，操作系统会保留到队列的打开句柄。 完成使用枚举器后，调用<xref:System.Messaging.MessageEnumerator.Close%2A>释放与句柄关联的资源。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Messaging.Message Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.Message Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::Message ^ Current { System::Messaging::Message ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Messaging.Message" Usage="System.Messaging.MessageEnumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取该枚举数指向的当前 <see cref="T:System.Messaging.Message" />。</summary>
        <value>当前消息。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 创建枚举器时，它指向该队列，在第一条消息之前的位置的开头。 在这种情况下，<xref:System.Messaging.MessageEnumerator.Current%2A>无效，将引发异常，如果访问它。 必须调用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>将游标定位在队列中的第一条。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">您在第一次调用 <see cref="P:System.Messaging.MessageEnumerator.Current" /> 之前调用了 <see cref="M:System.Messaging.MessageEnumerator.MoveNext" />。 游标位于消息枚举的第一个元素之前。  
  
- 或 - 
您在对 <see cref="P:System.Messaging.MessageEnumerator.Current" /> 的调用返回 <see langword="false" />（指示游标位于消息枚举中的最后一个元素之后）之后调用了 <see cref="M:System.Messaging.MessageEnumerator.MoveNext" />。</exception>
        <exception cref="T:System.Messaging.MessageQueueException">枚举数当前所指向的消息不再存在。 可能已将其删除。</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="CursorHandle">
      <MemberSignature Language="C#" Value="public IntPtr CursorHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int CursorHandle" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.CursorHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CursorHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr CursorHandle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.CursorHandle : nativeint" Usage="System.Messaging.MessageEnumerator.CursorHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于浏览队列消息的本机消息队列游标句柄。</summary>
        <value>本机游标句柄。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性包含的本机句柄的枚举。 完成使用枚举器后，调用<xref:System.Messaging.MessageEnumerator.Close%2A>释放此资源。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException">此句柄不存在。</exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>释放由 <see cref="T:System.Messaging.MessageEnumerator" /> 占用的资源。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="messageEnumerator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放由 <see cref="T:System.Messaging.MessageEnumerator" /> 使用的所有资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用<xref:System.Messaging.MessageEnumerator.Dispose%2A>允许使用的资源<xref:System.Messaging.MessageEnumerator>重新分配用于其他目的。 有关详细信息<xref:System.Messaging.MessageEnumerator.Dispose%2A>，请参阅[清理了非托管资源](~/docs/standard/garbage-collection/unmanaged.md)。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/unmanaged.md">清理非托管资源</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="messageEnumerator.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" /> 表示释放托管资源和非托管资源；<see langword="false" /> 表示仅释放非托管资源。</param>
        <summary>释放由 <see cref="T:System.Messaging.MessageEnumerator" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法由公共<xref:System.Messaging.MessageEnumerator.Dispose%2A>方法和<xref:System.Object.Finalize%2A>方法。 `Dispose()` 调用受保护`Dispose(Boolean)`方法替换`disposing`参数设置为`true`。 <xref:System.Object.Finalize%2A> 调用`Dispose`与`disposing`设置为`false`。  
  
 当 `disposing` 参数为 `true` 时，此方法释放该 <xref:System.Messaging.MessageEnumerator> 引用的、由任何托管对象持有的全部资源。 此方法调用每个引用对象的 `Dispose()` 方法。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see langword="Dispose" /> 可以由其他对象多次调用。 重写 <see langword="Dispose(Boolean)" /> 时，请注意不要引用在以前调用 <see langword="Dispose" /> 时已释放的对象。 有关如何实现详细信息<see langword="Dispose" />，请参阅[实现 Dispose 方法](~/docs/standard/garbage-collection/implementing-dispose.md)。  
  
有关详细信息<see langword="Dispose" />并<see langword="Finalize" />，请参阅[清理了非托管资源](~/docs/standard/garbage-collection/unmanaged.md)并[重写 Finalize 方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))。</para></block>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md">实现 Dispose 方法</related>
        <related type="Article" href="~/docs/standard/garbage-collection/unmanaged.md">清理非托管资源</related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageEnumerator ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="messageEnumerator.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放枚举数控制的资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
此方法重写 <xref:System.Object.Finalize>。 应用程序代码不应调用此方法。对象的 Finalize 方法期间将自动调用垃圾回收，除非已禁用通过调用由垃圾回收器终止<xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType>方法。

有关详细信息，请参阅[Finalize 方法和析构函数](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v=vs.100))，[清理了非托管资源](~/docs/standard/garbage-collection/unmanaged.md)，并[重写 Finalize 方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))。

]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveNext">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使枚举数前进到队列中的下一条消息。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="messageEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>如果当前队列中有下一条可用的消息，则使枚举数前进到该消息。</summary>
        <returns>如果枚举器已成功推进到下一条消息，则为 <see langword="true" />；如果枚举器已传递到队列的末尾，则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此重载方法立即返回队列中是否存在任何消息。 没有等待指定的另一个重载<xref:System.TimeSpan>到达的消息。  
  
 如果因为队列为空或者已经移动到集合中的最后一个元素以外，一条消息不是当前可用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>返回`false`到调用方法。  
  
 创建后，一个枚举器从概念上讲位于前面的第一个消息的队列，并在首次调用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>将显示队列的第一条消息。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException">引发了消息队列特定的异常。</exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.MoveNext : TimeSpan -&gt; bool" Usage="messageEnumerator.MoveNext timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">枚举数位于队列的末尾时，等待消息变得可用的 <see cref="T:System.TimeSpan" />。</param>
        <summary>使枚举数前进到队列中的下一条消息。 如果枚举数位于队列的末尾，则 <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> 将一直等到消息可用或给定 timeout 到期为止。</summary>
        <returns>如果枚举数成功地前进到下一条消息，为 <see langword="true" />；如果枚举数已经到达队列的末尾，并且在 <paramref name="timeout" /> 参数所指定的时间内没有消息变得可用，则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果队列中没有任何消息或游标已到达队列的末尾，在等待此重载。 如果因为队列为空或者已经移动到集合中的最后一个元素以外，一条消息不是当前可用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>等待指定的超时时间。  
  
 如果光标已在队列中，末尾<xref:System.Messaging.MessageEnumerator.MoveNext%2A>只返回`true`如果新消息到达时指定的时间间隔内，队列中当前具有较低的优先级高于所有消息，并放在队列的末尾。 如果没有更多消息位于队列中不使用任何参数的重载立即返回。  
  
 创建后，一个枚举器从概念上讲位于前面的枚举，并在首次调用的第一个消息<xref:System.Messaging.MessageEnumerator.MoveNext%2A>将枚举转换视图的第一个消息。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">为 timeout 参数指定的值无效。 它可能表示负数。</exception>
        <exception cref="T:System.Messaging.MessageQueueException">引发了消息队列特定的异常。  
  
- 或 - 
超时已过期。</exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RemoveCurrent">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>从队列中移除当前消息并将该消息返回给调用应用程序。 移除消息即从队列中删除该消息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这些重载的所述的行为是适用才<xref:System.Messaging.MessageEnumerator>通过使用检索实例<xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A>。 不要使用<xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A>若要检索的实例<xref:System.Messaging.MessageEnumerator>按此方法已弃用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent () As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent();" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : unit -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从事务性或非事务性队列中移除当前消息，并将该消息返回给调用应用程序。 对于消息到达队列的用时没有超时指定。</summary>
        <returns><see cref="T:System.Messaging.Message" />，它引用队列中可用的第一条消息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 移除并返回的消息，以在游标的当前位置。  
  
 如果使用的队列日志记录，删除消息会导致副本要保留在日志队列中，就像<xref:System.Messaging.MessageQueue>类的<xref:System.Messaging.MessageQueue.Receive%2A>方法执行。  
  
 删除当前的消息时，将光标移到下一条消息。 无需调用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>后调用<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>。  
  
 如果你对事务性队列调用此重载，消息队列创建单个内部事务。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : System.Messaging.MessageQueueTransaction -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent transaction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="transaction">指定从中移除消息的事务的 <see cref="T:System.Messaging.MessageQueueTransaction" /> 对象。</param>
        <summary>从事务性队列中移除当前消息，并将该消息返回给调用应用程序。 对于消息到达队列的用时没有超时指定。</summary>
        <returns><see cref="T:System.Messaging.Message" />，它引用队列中可用的第一条消息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 移除并返回的消息，以在游标的当前位置，使用由定义的内部事务上下文`transaction`参数。  
  
 如果使用的队列日志记录，删除消息会导致副本要保留在日志队列中，就像<xref:System.Messaging.MessageQueue>类的<xref:System.Messaging.MessageQueue.Receive%2A>方法执行。  
  
 当使用事务性队列，事务的回滚将导致通过调用中删除任何消息<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>要返回到队列。 在事务提交之前删除不是不可逆的。  
  
 删除当前的消息时，将光标移到下一条消息。 无需调用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>后调用<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="transaction" /> 参数为 <see langword="null" />。</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : System.Messaging.MessageQueueTransactionType -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent transactionType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="transactionType"><see cref="T:System.Messaging.MessageQueueTransactionType" /> 值之一，它描述与消息关联的事务上下文的类型。</param>
        <summary>从队列中移除当前消息并将该消息返回给调用应用程序。 对于消息到达队列的用时没有超时指定。</summary>
        <returns><see cref="T:System.Messaging.Message" />，它引用队列中可用的第一条消息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 移除并返回的消息，以在游标的当前位置，使用定义的事务上下文`transactionType`参数。  
  
 指定`Automatic`为`transactionType`参数如果已经有外部事务上下文附加到你想要使用用于接收消息的线程。 指定`Single`如果想要接收的消息作为单个内部事务。 您可以指定`None`如果你想要接收来自事务上下文外的事务性队列的消息。  
  
 如果使用的队列日志记录，删除消息会导致副本要保留在日志队列中，就像<xref:System.Messaging.MessageQueue>类的<xref:System.Messaging.MessageQueue.Receive%2A>方法执行。  
  
 当使用事务性队列，事务的回滚将导致通过调用中删除任何消息<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>要返回到队列。 在事务提交之前删除不是不可逆的。  
  
 删除当前的消息时，将光标移到下一条消息。 无需调用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>后调用<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="transactionType" /> 参数不是 <see cref="T:System.Messaging.MessageQueueTransactionType" /> 成员之一。</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">等待消息到达队列的时间间隔。</param>
        <summary>从队列中移除当前消息并将该消息返回给调用应用程序。 如果有要移除的消息，该方法将立即返回该消息。 否则，该方法在指定的超时内等待新消息到达。</summary>
        <returns><see cref="T:System.Messaging.Message" />，它引用队列中可用的第一条消息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 移除并返回的消息，以在游标的当前位置。 如果光标位于队列末尾，此重载方法的等待，直到有可用消息或指定的间隔`timeout`参数已过期。  
  
 如果使用的队列日志记录，删除消息会导致副本要保留在日志队列中，就像<xref:System.Messaging.MessageQueue>类的<xref:System.Messaging.MessageQueue.Receive%2A>方法执行。  
  
 删除当前的消息时，将光标移到下一条消息。 无需调用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>后调用<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>。  
  
 如果你对事务性队列调用此重载，消息队列创建单个内部事务。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效。</exception>
        <exception cref="T:System.Messaging.MessageQueueException">超时已过期。</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout, class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan, transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout, System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan * System.Messaging.MessageQueueTransaction -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent (timeout, transaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="timeout">等待消息被移除的时间间隔。</param>
        <param name="transaction">为消息指定事务上下文的 <see cref="T:System.Messaging.MessageQueueTransaction" /> 对象。</param>
        <summary>从事务性队列中移除当前消息，并将该消息返回给调用应用程序。 如果有要移除的消息，该方法将立即返回该消息。 否则，该方法在指定的超时内等待新消息到达。</summary>
        <returns><see cref="T:System.Messaging.Message" />，它引用队列中可用的第一条消息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 移除并返回的消息，以在游标的当前位置。 如果光标位于队列末尾，此重载方法的等待，直到有可用消息或指定的间隔`timeout`参数已过期。  
  
 当使用事务性队列，事务的回滚将导致通过调用中删除任何消息<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>要返回到队列。 在事务提交之前删除不是不可逆的。  
  
 如果使用的队列日志记录，删除消息会导致副本要保留在日志队列中，就像<xref:System.Messaging.MessageQueue>类的<xref:System.Messaging.MessageQueue.Receive%2A>方法执行。  
  
 删除当前的消息时，将光标移到下一条消息。 无需调用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>后调用<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="transaction" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Messaging.MessageQueueException">超时已过期。</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout, valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan, transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout, System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan * System.Messaging.MessageQueueTransactionType -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent (timeout, transactionType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="timeout">等待消息被移除的时间间隔。</param>
        <param name="transactionType"><see cref="T:System.Messaging.MessageQueueTransactionType" /> 值之一，它描述与消息关联的事务上下文的类型。</param>
        <summary>从队列中移除当前消息并将该消息返回给调用应用程序。 如果有要移除的消息，该方法将立即返回该消息。 否则，该方法在指定的超时内等待新消息到达。</summary>
        <returns><see cref="T:System.Messaging.Message" />，它引用队列中可用的第一条消息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 移除并返回的消息，以在游标的当前位置，使用定义的事务上下文`transactionType`参数。 如果光标位于队列末尾，此重载方法的等待，直到有可用消息或指定的间隔`timeout`参数已过期。  
  
 指定`Automatic`为`transactionType`参数如果已经有外部事务上下文附加到你想要使用用于接收消息的线程。 指定`Single`如果想要接收的消息作为单个内部事务。 您可以指定`None`如果你想要接收来自事务上下文外的事务性队列的消息。  
  
 如果使用的队列日志记录，删除消息会导致副本要保留在日志队列中，就像<xref:System.Messaging.MessageQueue>类的<xref:System.Messaging.MessageQueue.Receive%2A>方法执行。  
  
 当使用事务性队列，事务的回滚将导致通过调用中删除任何消息<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>要返回到队列。 在事务提交之前删除不是不可逆的。  
  
 删除当前的消息时，将光标移到下一条消息。 无需调用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>后调用<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效。</exception>
        <exception cref="T:System.Messaging.MessageQueueException">超时已过期。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="transactionType" /> 参数不是 <see cref="T:System.Messaging.MessageQueueTransactionType" /> 成员之一。</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="messageEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>重置当前枚举数，使其指向队列开头。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一个枚举器只能向前移动。 使用此方法以在队列的开头重新开始。  
  
 在调用<xref:System.Messaging.MessageEnumerator.Reset%2A>，游标将指向第一条消息。 不需要调用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>后调用<xref:System.Messaging.MessageEnumerator.Reset%2A>使光标向前移动到队列中的第一个消息。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回引用当前游标位置的消息的 <see cref="T:System.Messaging.Message" />。</summary>
        <value>引用当前游标位置的消息的 <see cref="T:System.Messaging.Message" />。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">您在第一次调用 <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> 之前访问了此属性。 游标位于消息枚举的第一个元素之前。- 或 - 你在对 <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> 的调用返回 false（指示游标位于消息枚举中的最后一个元素之后）之后访问了此属性。</exception>
        <exception cref="T:System.Messaging.MessageQueueException">枚举数当前所指向的消息不再存在。 可能已将其删除。</exception>
      </Docs>
    </Member>
  </Members>
</Type>