<Type Name="XmlMessageFormatter" FullName="System.Messaging.XmlMessageFormatter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6a9a1931c75db76f56c20e9b7b0a8567e6d17609" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48590747" /></Metadata><TypeSignature Language="C#" Value="public class XmlMessageFormatter : ICloneable, System.Messaging.IMessageFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlMessageFormatter extends System.Object implements class System.ICloneable, class System.Messaging.IMessageFormatter" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.XmlMessageFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlMessageFormatter&#xA;Implements ICloneable, IMessageFormatter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlMessageFormatter : ICloneable, System::Messaging::IMessageFormatter" />
  <TypeSignature Language="F#" Value="type XmlMessageFormatter = class&#xA;    interface IMessageFormatter&#xA;    interface ICloneable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Messaging.IMessageFormatter</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>使用基于 XSD 架构定义的 XML 格式，将对象序列化和反序列化为消息体或从消息体序列化和反序列化对象。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.XmlMessageFormatter>是默认的格式化程序的实例<xref:System.Messaging.MessageQueue>用于序列化消息写入队列。 创建的实例时<xref:System.Messaging.MessageQueue>，实例<xref:System.Messaging.XmlMessageFormatter>是为您创建并关联与<xref:System.Messaging.MessageQueue>。 可以通过在代码中创建它并将其分配给指定不同的格式化程序<xref:System.Messaging.MessageQueue.Formatter%2A>属性在<xref:System.Messaging.MessageQueue>。  
  
 队列的默认<xref:System.Messaging.XmlMessageFormatter>实例可用于写入队列，但它不能用于从队列中读取之前，设置<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>或<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>该格式化程序上的属性。 可以设置一个或两个这些值的默认格式化程序实例上，也可以创建格式化程序的新实例并设置值会自动将它们作为参数传递到相应<xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>构造函数。  
  
 指定时<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>而非<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>，编译时间而不是读取的时间，减少发生错误的可能性，在检查的类型是否存在。 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 要求每个项都必须是完全限定，指定其程序集名称。 此外，在使用多个并发的版本，必须也为目标类型名称追加的版本号。  
  
 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>属性告知格式化程序尝试在反序列化消息时要匹配的架构。 这允许格式化程序来解释消息正文。  
  
 消息正文中序列化的实例必须符合其中一个类型数组中表示架构。 当您阅读消息使用<xref:System.Messaging.MessageQueue.Receive%2A>方法，该方法创建的对应于标识的架构和消息正文读取到其中的类型的对象。  
  
 两个属性只有一个需要时从队列中读取设置，但您可以同时设置。 类型集是从两个属性的组合的集。 要使用的属性的决策是特定于应用程序。 如果消息正文包含其架构不匹配任何任一属性数组中的类型的类型，在读取消息时，将引发异常。  
  
 <xref:System.Messaging.XmlMessageFormatter>的松散耦合的基于 XML 的消息传送的关键组件。 XSD.exe 实用工具使用 XML 格式用于生成 XML 架构，例如在使用该实用程序来序列化应用程序所使用的类。 此类必须具有默认的构造函数。  
  
 使用的格式重新以相反的过程时该实用工具将生成基于架构的类将分发用于描述类数据。 使用该实用程序和它将生成的 XML 架构，可避免重新分发.dll 文件，每次您的类的实现已更改后重新编译一个类。 只要架构不会更改客户端或服务器上，任何一侧上的其他更改不影响其他。  
  
   
  
## Examples  
 下面的代码示例包含三个代码片段： 服务器组件、 order 类和客户端代码。 Order 类可以由 XSD.exe 实用工具，用于生成服务器认识到传入消息中的架构。 架构是一个 XML 格式化的文件，描述类的"形状"。 此架构可以随后可用于在客户端以生成特定于客户端的顺序类共享相同的架构的服务器类。  
  
 下面的代码示例表示接收订单通过消息队列的服务器组件。 消息的正文应是一个订单对象，其架构与以下 Order.cs 类相匹配。 服务器进程或应用程序反序列化顺序。  
  
 [!code-cpp[Classic XmlMessageFormatter Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlMessageFormatter Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CS/source.cs#1)]
 [!code-vb[Classic XmlMessageFormatter Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/VB/source.vb#1)]  
  
 下面的代码示例表示在服务器上的应用程序接收和反序列化的订单对象提供的架构的顺序类。  
  
 [!code-cpp[Classic XmlMessageFormatter Example#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic XmlMessageFormatter Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CS/source2.cs#2)]
 [!code-vb[Classic XmlMessageFormatter Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/VB/source2.vb#2)]  
  
 任何客户端应用程序交互的服务器上为应用程序必须通过在本地定义的顺序类到消息正文的序列化信息向服务器发送消息。 本地定义的顺序类必须具有到该服务器上的应用程序将尝试反序列化消息正文的服务器定义顺序类相同的架构。 XSD.exe 实用工具，管理器的服务器上的应用程序创建和分发客户端必须使用序列化流到服务器的消息的架构。  
  
 当客户端应用程序管理器收到 order 类的架构时，将再次使用 XSD.exe 实用工具从架构生成特定于客户端的 order 类。 它是客户端代码以下示例中，不在服务器的 order 类中使用此类 （XSD.exe 实用工具会导致架构生成的类具有与原始类相同的名称）。 此新 order 类用于序列化到消息正文的顺序。  
  
 下面的代码示例是在客户端处理，用来序列化订单并发送到队列的顺序与关联的信息。 该代码将为 Order.cs 类由 XSD.exe 实用工具生成的架构的元素与关联项、 数量和地址信息。 订单发送到本地计算机上的订单队列。  
  
 [!code-cpp[Classic XmlMessageFormatter Example#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CPP/source3.cpp#3)]
 [!code-csharp[Classic XmlMessageFormatter Example#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CS/source3.cs#3)]
 [!code-vb[Classic XmlMessageFormatter Example#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/VB/source3.vb#3)]  
  
 从 order 类在服务器上生成架构后，可以修改类。 除非在架构更改，您不需要重新分发该架构。 在分发了架构并生成客户端的 order 类后，该客户端类还可以修改独立于服务器的 order 类，只要不修改架构本身。 两个类成为松散耦合。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.MessageQueue" />
    <altmember cref="T:System.Messaging.ActiveXMessageFormatter" />
    <altmember cref="T:System.Messaging.BinaryMessageFormatter" />
    <altmember cref="T:System.Messaging.IMessageFormatter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Messaging.XmlMessageFormatter" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlMessageFormatter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlMessageFormatter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Messaging.XmlMessageFormatter" /> 类的新实例但不设置目标类型。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 构造函数的此重载最常写入时使用到队列，因为在编写时，可能不是必需的目标类型。  
  
 若要使用的实例从队列读取消息<xref:System.Messaging.XmlMessageFormatter>使用此构造函数创建的则必须设置<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>或<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>属性使格式化程序知道要尝试反序列化的类型。  
  
 当您创建一个新<xref:System.Messaging.MessageQueue>，默认值<xref:System.Messaging.XmlMessageFormatter>创建实例，而无需设置目标类型。 使用此构造函数创建的格式化程序，必须设置为该格式化程序实例的目标类型，如果你想要从队列中读取。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlMessageFormatter (string[] targetTypeNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] targetTypeNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetTypeNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlMessageFormatter(cli::array &lt;System::String ^&gt; ^ targetTypeNames);" />
      <MemberSignature Language="F#" Value="new System.Messaging.XmlMessageFormatter : string[] -&gt; System.Messaging.XmlMessageFormatter" Usage="new System.Messaging.XmlMessageFormatter targetTypeNames" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetTypeNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="targetTypeNames"><see cref="T:System.String" /> 类型的数组，指定可能的类型集，这些类型将由格式化程序从提供的消息进行反序列化。 这些值必须是完全限定的，例如“MyNamespace.MyOrders, MyOrdersAssemblyName”。</param>
        <summary>初始化 <see cref="T:System.Messaging.XmlMessageFormatter" /> 类的新实例，并将传入的目标类型设置为（完全限定）字符串值数组。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 从队列中读取时，最经常使用与目标类型参数的构造函数。 在编写时，不需要指定目标类型。  
  
 此重载<xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>构造函数设置<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>属性中传递的数组值`targetTypeNames`参数。 设置此属性可使<xref:System.Messaging.MessageQueue>使用此<xref:System.Messaging.XmlMessageFormatter>实例读取消息包含对象的给定类型。  
  
 同时<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>属性告知格式化程序尝试在反序列化消息时要匹配的架构。 这允许格式化程序来解释消息正文。  
  
 消息正文中序列化的实例必须符合其中一个类型数组中表示架构。 当您阅读消息使用<xref:System.Messaging.MessageQueue.Receive%2A>方法，该方法创建的对应于标识的架构和消息正文读取到其中的类型的对象。  
  
 两个属性只有一个需要时从队列中读取设置，但您可以同时设置。 类型集是从两个属性的组合的集。 这些决定使用一个是特定于应用程序。 如果消息正文包含其架构不匹配任何任一属性数组中的类型的类型，则将在读取时引发异常。  
  
   
  
## Examples  
 [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]
 [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]
 [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetTypeNames" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlMessageFormatter (Type[] targetTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type[] targetTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlMessageFormatter(cli::array &lt;Type ^&gt; ^ targetTypes);" />
      <MemberSignature Language="F#" Value="new System.Messaging.XmlMessageFormatter : Type[] -&gt; System.Messaging.XmlMessageFormatter" Usage="new System.Messaging.XmlMessageFormatter targetTypes" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="targetTypes"><see cref="T:System.Type" /> 类型的数组，指定可能的类型集，这些类型将由格式化程序从提供的消息进行反序列化。</param>
        <summary>初始化 <see cref="T:System.Messaging.XmlMessageFormatter" /> 类的新实例，并将传入的目标类型设置为对象类型的数组。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 从队列中读取时，最经常使用与目标类型参数的构造函数。 在编写时，不需要指定目标类型。  
  
 此重载<xref:System.Messaging.XmlMessageFormatter.%23ctor%2A>构造函数设置<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>属性中传递的数组值`targetTypes`参数。 设置此属性可使<xref:System.Messaging.MessageQueue>使用此<xref:System.Messaging.XmlMessageFormatter>实例来读取包含给定类型的对象的消息。  
  
 同时<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>属性告知格式化程序尝试在反序列化消息时要匹配的架构。 这允许格式化程序来解释消息正文。  
  
 消息正文中序列化的实例必须符合其中一个类型数组中表示架构。 当您阅读消息使用<xref:System.Messaging.MessageQueue.Receive%2A>方法，该方法创建的对应于标识的架构和消息正文读取到其中的类型的对象。  
  
 两个属性只有一个需要时从队列中读取设置，但您可以同时设置。 类型集是从两个属性的组合的集。 这些决定使用一个是特定于应用程序。 如果消息正文包含其架构不匹配任何任一属性数组中的类型的类型，则将在读取时引发异常。  
  
 指定时<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>而非<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>，编译时间而不是读取的时间，减少发生错误的可能性，在检查的类型是否存在。 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 要求每个项都必须是完全限定，指定其程序集名称。 此外，在使用多个并发的版本，必须也为目标类型名称追加的版本号。  
  
 使用时<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>，可以添加每个对象 (例如， `MyClass`) 到下面的 C# 代码所示的方法中的列表。  
  
```  
TargetTypes = new Type[]{typeof(MyClass)}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetTypes" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public bool CanRead (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanRead(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanRead(System::Messaging::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member CanRead : System.Messaging.Message -&gt; bool&#xA;override this.CanRead : System.Messaging.Message -&gt; bool" Usage="xmlMessageFormatter.CanRead message" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.CanRead(System.Messaging.Message)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message">要检查的 <see cref="T:System.Messaging.Message" />。</param>
        <summary>确定格式化程序是否可以反序列化消息。</summary>
        <returns>如果 XML 格式化程序可以反序列化该消息，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当<xref:System.Messaging.XmlMessageFormatter.CanRead%2A>调用时，格式化程序尝试以确定消息的内容是否可以反序列化的内容。 格式化程序可以仅反序列化消息如果消息正文中的类型由数组中具有相同的架构类型之一<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>属性。 <xref:System.Messaging.XmlMessageFormatter.CanRead%2A> 返回`false`下列两种情况下：  
  
-   不使用格式化消息<xref:System.Messaging.XmlMessageFormatter>。  
  
-   消息正文的架构不在所列出的任一<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>或<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>属性。  
  
 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>属性告知格式化程序，它必须能够反序列化的哪些类型的对象。 如果任何类型缺少从列表中，但消息中，找到<xref:System.Messaging.XmlMessageFormatter.CanRead%2A>返回`false`。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> 和 <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> 属性都未设置。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="message" /> 参数为 <see langword="null" />。</exception>
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
        <altmember cref="T:System.Messaging.BinaryMessageFormatter" />
        <altmember cref="T:System.Messaging.ActiveXMessageFormatter" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="xmlMessageFormatter.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.Messaging.XmlMessageFormatter" /> 类的实例，此实例的读/写属性（目标类型集）与当前 <see cref="T:System.Messaging.XmlMessageFormatter" /> 实例相同。</summary>
        <returns>一个对象，其属性与此 <see cref="T:System.Messaging.XmlMessageFormatter" /> 实例的属性相同，但其元数据并不将此实例指定为格式化程序类实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法创建格式化程序的副本并初始化所有其属性设置为此值<xref:System.Messaging.XmlMessageFormatter>对象。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.IMessageFormatter" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public object Read (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Read(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Read(System::Messaging::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Read : System.Messaging.Message -&gt; obj&#xA;override this.Read : System.Messaging.Message -&gt; obj" Usage="xmlMessageFormatter.Read message" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.Read(System.Messaging.Message)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message">要反序列化的 <see cref="T:System.Messaging.Message" />（XML 格式）。</param>
        <summary>从给定的消息中读取内容，并创建包含反序列化消息的对象。</summary>
        <returns>反序列化的消息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 同时<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>属性告知格式化程序尝试在反序列化消息时要匹配的架构。 消息可以反序列化之前，必须设置这些属性之一。  
  
 消息正文中序列化的实例必须符合其中一个类型数组中表示架构。 当您阅读消息使用<xref:System.Messaging.MessageQueue.Receive%2A>方法，该方法创建的对应于标识的架构和消息正文读取到其中的类型的对象。  
  
 目标类型无需指定，才能写入队列。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> 和 <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> 属性都未设置。  
  
- 或 - 
消息体中序列化的实例与 <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> 和 <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> 属性中的类型所表示的任何架构都不相符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="message" /> 参数为 <see langword="null" />。</exception>
        <altmember cref="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)" />
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="TargetTypeNames">
      <MemberSignature Language="C#" Value="public string[] TargetTypeNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] TargetTypeNames" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetTypeNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ TargetTypeNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetTypeNames : string[] with get, set" Usage="System.Messaging.XmlMessageFormatter.TargetTypeNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("XmlMsgTargetTypeNames")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定可能的类型集，这些类型将由格式化程序从提供的消息进行反序列化。</summary>
        <value><see cref="T:System.String" /> 类型的数组，指定当读取消息时从消息体反序列化的对象的类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 同时<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>属性告知格式化程序尝试在反序列化消息时要匹配的架构。 这允许格式化程序来解释消息正文。  
  
 消息正文中序列化的实例必须符合其中一个类型数组中表示架构。 当您阅读消息使用<xref:System.Messaging.MessageQueue.Receive%2A>方法，该方法创建的对应于标识的架构和消息正文读取到其中的类型的对象。  
  
 两个属性只有一个需要时从队列中读取设置，但您可以同时设置。 类型集是从两个属性的组合的集。 要使用的属性的决策是特定于应用程序。 如果消息正文包含其架构不匹配任何任一属性数组中的类型的类型，在读取消息时，将引发异常。  
  
 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 要求每个项都必须是完全限定，指定其程序集名称。 此外，在使用多个并发的版本，必须也为目标类型名称追加的版本号。  
  
 目标类型是仅在从队列中读取时所需。 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>属性不需要设置要写入到队列。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> 属性为 <see langword="null" />。</exception>
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="TargetTypes">
      <MemberSignature Language="C#" Value="public Type[] TargetTypes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type[] TargetTypes" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetTypes As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;Type ^&gt; ^ TargetTypes { cli::array &lt;Type ^&gt; ^ get(); void set(cli::array &lt;Type ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetTypes : Type[] with get, set" Usage="System.Messaging.XmlMessageFormatter.TargetTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Messaging.MessagingDescription("XmlMsgTargetTypes")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定可能的类型集，这些类型将由格式化程序从提供的消息进行反序列化。</summary>
        <value><see cref="T:System.Type" /> 类型的数组，指定当读取消息时从消息体反序列化的对象的类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 同时<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>属性告知格式化程序尝试在反序列化消息时要匹配的架构。 这允许格式化程序来解释消息正文。  
  
 消息正文中序列化的实例必须符合其中一个类型数组中表示架构。 当您阅读消息使用<xref:System.Messaging.MessageQueue.Receive%2A>方法，该方法创建的对应于标识的架构和消息正文读取到其中的类型的对象。  
  
 两个属性只有一个需要时从队列中读取设置，但您可以同时设置。 类型集是从两个属性的组合的集。 要使用的属性的决策是特定于应用程序。 如果消息正文包含其架构不匹配任何任一属性数组中的类型的类型，在读取消息时，将引发异常。  
  
 目标类型是仅在从队列中读取时所需。 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>属性不需要设置要写入到队列。  
  
 指定时<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>而非<xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>，编译时间而不是读取的时间，减少发生错误的可能性，在检查的类型是否存在。  
  
 使用时<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>，可以添加每个对象 (例如， `MyClass`) 到 C# 代码所示的方式列表`TargetTypes = new Type[]{typeof(MyClass), typeof (MyOtherClass)};`。  
  
   
  
## Examples  
 下面的代码示例发送和接收包含订单到和从队列的消息。  
  
 [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]
 [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]
 [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> 属性为 <see langword="null" />。</exception>
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.Messaging.Message message, object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.Messaging.Message message, object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::Messaging::Message ^ message, System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member Write : System.Messaging.Message * obj -&gt; unit&#xA;override this.Write : System.Messaging.Message * obj -&gt; unit" Usage="xmlMessageFormatter.Write (message, obj)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.Write(System.Messaging.Message,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message"><see cref="T:System.Messaging.Message" />，其 <see cref="P:System.Messaging.Message.Body" /> 属性将包含序列化的对象。</param>
        <param name="obj">要序列化为消息体的 <see cref="T:System.Object" />。</param>
        <summary>将对象序列化为消息体。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 目标类型无需指定要写入到队列，因为它们必须读取时。 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>或<xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A>属性由格式化程序仅在反序列化消息。  
  
 <xref:System.Messaging.XmlMessageFormatter>利用<xref:System.Xml.Serialization.XmlSerializer>类，该类定义可序列化内容。 仅公共字段和公共属性可序列化。 结构、 具有数组和结构的数组的结构是所有可序列化，只要它们不使用 SOAP 协议使用的编码的样式。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="message" /> 参数为 <see langword="null" />。  
  
- 或 - 
<paramref name="obj" /> 参数为 <see langword="null" />。</exception>
        <altmember cref="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)" />
      </Docs>
    </Member>
  </Members>
</Type>