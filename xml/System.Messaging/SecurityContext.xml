<Type Name="SecurityContext" FullName="System.Messaging.SecurityContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cbe952ec1491fedd917992bf3d66dc1f76373f08" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36553183" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SecurityContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SecurityContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.SecurityContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SecurityContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecurityContext sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SecurityContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>表示队列消息的安全上下文。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 安全上下文包含如内部证书，相应的私钥，用户的 SID，将证书和发件人标识符附加到一条消息，请求身份验证时所需的缓存的安全信息。  
  
 如果一个客户端，如 ASP.NET 应用程序，模拟用户向队列发送一条消息，用户的标识用于访问队列。 如果队列是远程的这些凭据缓存，并且用于随后发送到队列的消息。 因此，后续消息中的 SID 将消息发送到队列的第一个用户的缓存的标识。 向队列发送消息的第一个用户的缓存的标识将用于后续用户。  
  
 若要解决此问题，请设置安全上下文使用<xref:System.Messaging.Message.SecurityContext%2A>之前将消息发送到远程的队列，以确保当前用户的凭据用于获取到队列的访问权限。 但是，推荐的最佳做法是：  
  
1.  使队列身份验证的队列。  
  
2.  域标识运行 ASP.NET 应用程序，并授权该应用程序可以写入队列。  
  
3.  使用队列时，不能模拟用户。 相反，获得调用方的标识，然后执行授权检查在 ASP.NET 应用程序中或作为消息的一部分包括调用方的标识并执行授权检查在接收方应用程序。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.SecurityContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="securityContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放由 <see cref="T:System.Messaging.SecurityContext" /> 使用的所有资源。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>