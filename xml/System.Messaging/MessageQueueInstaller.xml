<Type Name="MessageQueueInstaller" FullName="System.Messaging.MessageQueueInstaller">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fc87874d380b94cda9d24cf45f80842dec7b4c24" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36476873" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MessageQueueInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageQueueInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageQueueInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageQueueInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageQueueInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type MessageQueueInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Allows you to install and configure a queue that your application needs in order to run. This class is called by the installation utility, for example, InstallUtil.exe, when installing a <see cref="T:System.Messaging.MessageQueue" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueInstaller>安装实用程序用于写入与队列相关联的注册表值。 有关安装实用工具的详细信息，请参阅[Installutil.exe （安装程序工具）](~/docs/framework/tools/installutil-exe-installer-tool.md)。  
  
 若要安装队列，创建继承自项目安装程序类<xref:System.Configuration.Install.Installer>，并设置<xref:System.ComponentModel.RunInstallerAttribute>到类`true`。 在项目中，创建<xref:System.Messaging.MessageQueueInstaller>实例中安装每个队列，并将实例添加到你的项目安装程序类。  
  
 在创建时<xref:System.Messaging.MessageQueueInstaller>实例，你可以根据需要传递现有<xref:System.Messaging.MessageQueue>（例如，从测试服务器） 到<xref:System.Messaging.MessageQueueInstaller.%23ctor%2A>构造函数。 此方法自动提供通过镜像传入队列的设置的新队列的配置设置。 或者，你可以手动设置中的属性<xref:System.Messaging.MessageQueueInstaller>给你想并调用默认构造函数的状态的实例。  
  
 当调用安装实用工具时，它会查找<xref:System.ComponentModel.RunInstallerAttribute>。 如果它是`true`，则此实用工具安装中的所有队列<xref:System.Configuration.Install.Installer.Installers%2A>项目安装程序与关联的集合。 如果<xref:System.ComponentModel.RunInstallerAttribute>是`false`，该实用程序将忽略项目安装程序。  
  
 修改的其他属性<xref:System.Messaging.MessageQueueInstaller>实例之前或之后添加到的实例<xref:System.Configuration.Install.Installer.Installers%2A>项目安装程序的集合。 例如，队列的<xref:System.Messaging.MessageQueue.Path%2A>安装实用工具执行之前必须设置。  
  
 通常情况下，不调用的方法<xref:System.Messaging.MessageQueueInstaller>从在代码中; 它们是通常只能由调用 installutil.exe 安装实用程序。 该实用工具将自动调用<xref:System.Messaging.MessageQueueInstaller.Install%2A>期间的安装过程和调用的方法<xref:System.Messaging.MessageQueueInstaller.Commit%2A>如果安装未引发异常。 如有必要，它退出故障，通过调用<xref:System.Messaging.MessageQueueInstaller.Rollback%2A>生成异常的对象。  
  
 应用程序的安装例程使用项目安装程序的<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>来自动维护有关已安装的组件的信息。 此状态信息将持续更新以及每个<xref:System.Messaging.MessageQueueInstaller>由实用工具安装实例。 它通常没有必要为你的代码来显式修改状态信息。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Messaging.MessageQueueInstaller" /> class.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueueInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueueInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Messaging.MessageQueueInstaller" /> class. Does not set any instance properties.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueueInstaller (System.Messaging.MessageQueue componentToCopy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Messaging.MessageQueue componentToCopy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.#ctor(System.Messaging.MessageQueue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (componentToCopy As MessageQueue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueueInstaller(System::Messaging::MessageQueue ^ componentToCopy);" />
      <MemberSignature Language="F#" Value="new System.Messaging.MessageQueueInstaller : System.Messaging.MessageQueue -&gt; System.Messaging.MessageQueueInstaller" Usage="new System.Messaging.MessageQueueInstaller componentToCopy" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="componentToCopy" Type="System.Messaging.MessageQueue" />
      </Parameters>
      <Docs>
        <param name="componentToCopy">The <see cref="T:System.Messaging.MessageQueue" /> component whose settings determine the property settings of the new queue installed.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Messaging.MessageQueueInstaller" /> class, initializing the installation settings to those of an existing <see cref="T:System.Messaging.MessageQueue" /> instance.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Authenticate">
      <MemberSignature Language="C#" Value="public bool Authenticate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Authenticate" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Authenticate" />
      <MemberSignature Language="VB.NET" Value="Public Property Authenticate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Authenticate { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Authenticate : bool with get, set" Usage="System.Messaging.MessageQueueInstaller.Authenticate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the queue to be installed accepts only authenticated messages.</summary>
        <value>
          <see langword="true" /> 如果队列只接受经过身份验证的消息;否则为<see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当未经身份验证的消息发送到一个队列，只接受经过身份验证的消息时，消息被拒绝。 发送应用程序可以通过设置请求消息遭到拒绝的通知<xref:System.Messaging.Message.AcknowledgeType%2A>消息。 否则，并不表示，该消息被拒绝，因此，除非将其发送到死信队列，消息可能会丢失。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BasePriority">
      <MemberSignature Language="C#" Value="public short BasePriority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 BasePriority" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.BasePriority" />
      <MemberSignature Language="VB.NET" Value="Public Property BasePriority As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property short BasePriority { short get(); void set(short value); };" />
      <MemberSignature Language="F#" Value="member this.BasePriority : int16 with get, set" Usage="System.Messaging.MessageQueueInstaller.BasePriority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the base priority that is used to route a public queue's messages over the network.</summary>
        <value>发送到公用队列的所有消息的单个基本优先级。 默认值为零 (0)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueInstaller.BasePriority%2A>用于通过网络路由队列的消息。 使用<xref:System.Messaging.MessageQueueInstaller.BasePriority%2A>以便发送到更高的队列或优先级低于，对于发送到其他队列的消息的消息。 当设置队列的基本优先级时，发送给它的所有消息都提供优先级高于，发送到具有较低的基本优先级队列的消息。 队列的基本优先级的消息顺序无效，队列中或在从队列读取消息的方式。  
  
 <xref:System.Messaging.MessageQueueInstaller.BasePriority%2A>适用通过域控制器访问的仅为公共队列 （换而言之，使用公用格式名）。 专用队列的和的直接访问公用队列的基本优先级值始终为零。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Category">
      <MemberSignature Language="C#" Value="public Guid Category { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid Category" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Category" />
      <MemberSignature Language="VB.NET" Value="Public Property Category As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid Category { Guid get(); void set(Guid value); };" />
      <MemberSignature Language="F#" Value="member this.Category : Guid with get, set" Usage="System.Messaging.MessageQueueInstaller.Category" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.GuidConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an implementation-specific queue type.</summary>
        <value>A<see cref="T:System.Guid" />表示队列类别 （或消息队列类型标识符），这样，应用程序如何使用它们根据其队列进行分类。 默认值为 <see langword="Guid.empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 队列类别可让应用程序对其进行分类相关联的队列，根据它们的使用的方式。 <xref:System.Messaging.MessageQueue.Category%2A>可以是 null 引用。 你还可以定义新类别。  
  
 <xref:System.Messaging.MessageQueue.Category%2A>属性提供访问消息队列类型标识符属性，这是与特定队列相关联，并且为读/写权限。 你可以使用<xref:System.Guid.NewGuid%2A>方法来创建一个类别值，保证可以跨所有唯一<xref:System.Guid>值。 但是，它是只需将使其有别于其他类别，不是从所有其他的类别值<xref:System.Guid>值。 例如，你可以设置<xref:System.Messaging.MessageQueue.Category%2A>的队列的一个组{00000000-0000-0000-0000-000000000001}和<xref:System.Messaging.MessageQueue.Category%2A>到另一个组{00000000-0000-0000-0000-000000000002}。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public override void Commit (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Commit(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.Commit(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Commit (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Commit(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Commit : System.Collections.IDictionary -&gt; unit" Usage="messageQueueInstaller.Commit savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">A <see cref="T:System.Collections.IDictionary" /> that contains the post-installation state of the computer.</param>
        <summary>Completes the installation process by committing the <see cref="T:System.Messaging.MessageQueue" /> installation information that the <see cref="M:System.Messaging.MessageQueueInstaller.Install(System.Collections.IDictionary)" /> method wrote to the registry. This method is meant to be used by installation tools, which automatically call the appropriate methods.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常情况下，不调用的方法<xref:System.Messaging.MessageQueueInstaller>从在代码中; 它们是通常只能由调用 installutil.exe 安装实用程序。 该实用工具将自动调用<xref:System.Messaging.MessageQueueInstaller.Install%2A>在安装过程中的方法。 安装是事务性的因此如果在安装过程中的任何安装项目组件故障，则所有以前安装的组件将回滚到其安装前的状态。 这通过调用每个组件实现<xref:System.Messaging.MessageQueueInstaller.Rollback%2A>方法。  
  
 与安装项目相关联的所有组件成功安装后发生，安装实用工具提交该安装。 <xref:System.Messaging.MessageQueueInstaller.Commit%2A> 完成的安装<xref:System.Messaging.MessageQueue>通过将队列设置为适当的初始状态。 如果指定的队列<xref:System.Messaging.MessageQueueInstaller.Path%2A>属性已存在，并且包含消息，<xref:System.Messaging.MessageQueueInstaller.Commit%2A>清除这些消息。 <xref:System.Messaging.MessageQueueInstaller.Commit%2A>而不是<xref:System.Messaging.MessageQueueInstaller.Install%2A>，清除这些消息，因为无法回滚的清除消息的行为。  
  
 应用程序的安装例程使用项目安装程序的<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>来自动维护有关已安装的组件的信息。 传递到此状态信息<xref:System.Messaging.MessageQueueInstaller.Commit%2A>作为`savedState`随着此实用工具提交每个参数，将持续更新<xref:System.Messaging.MessageQueueInstaller>实例。 通常情况下，不需要为你的代码来显式修改此状态信息。 清除队列后，<xref:System.Messaging.MessageQueueInstaller.Commit%2A>发送到日志条目`savedState`安装与该键相关联。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="messageQueueInstaller.CopyFromComponent component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">A <see cref="T:System.ComponentModel.IComponent" /> to use as a template for the <see cref="T:System.Messaging.MessageQueueInstaller" />.</param>
        <summary>Copies the property values of a <see cref="T:System.Messaging.MessageQueue" /> component that are required at install time for a message queue.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常情况下，不调用的方法<xref:System.Messaging.MessageQueueInstaller>从在代码中; 它们是通常只能由调用 installutil.exe 安装实用程序。 <xref:System.Messaging.MessageQueueInstaller.CopyFromComponent%2A> 安装实用程序用于设置的属性值<xref:System.Messaging.MessageQueueInstaller>为的现有值<xref:System.Messaging.MessageQueue>。  
  
 如果<xref:System.Messaging.MessageQueue.Path%2A>的<xref:System.Messaging.MessageQueue>，它是在传递为空字符串 ("")，必须设置<xref:System.Messaging.MessageQueue.Path%2A>属性之前在安装程序执行的非空值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The component associated with this <see cref="T:System.Messaging.MessageQueueInstaller" /> is not a <see cref="T:System.Messaging.MessageQueue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="EncryptionRequired">
      <MemberSignature Language="C#" Value="public System.Messaging.EncryptionRequired EncryptionRequired { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.EncryptionRequired EncryptionRequired" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.EncryptionRequired" />
      <MemberSignature Language="VB.NET" Value="Public Property EncryptionRequired As EncryptionRequired" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::EncryptionRequired EncryptionRequired { System::Messaging::EncryptionRequired get(); void set(System::Messaging::EncryptionRequired value); };" />
      <MemberSignature Language="F#" Value="member this.EncryptionRequired : System.Messaging.EncryptionRequired with get, set" Usage="System.Messaging.MessageQueueInstaller.EncryptionRequired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.EncryptionRequired</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the queue accepts only private, or encrypted, messages.</summary>
        <value>之一<see cref="T:System.Messaging.EncryptionRequired" />值，该值指示级别的消息发送到队列所需的加密。 默认值为 <see langword="Optional" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定加密时，仅<xref:System.Messaging.Message.Body%2A>的一条消息进行加密。 其他属性，如<xref:System.Messaging.Message.Label%2A>，未加密。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="messageQueueInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver">A <see cref="T:System.Collections.IDictionary" /> used to save information needed to perform a commit, rollback, or uninstall operation.</param>
        <summary>Performs the installation and writes message queue information to the registry. This method is meant to be used by installation tools, which automatically call the appropriate methods.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueInstaller.Install%2A>方法将消息队列信息写入注册表中，并将关联<xref:System.Messaging.MessageQueue>位于指定的路径的队列的实例<xref:System.Messaging.MessageQueueInstaller.Path%2A>属性。 如果队列不存在，<xref:System.Messaging.MessageQueueInstaller.Install%2A>创建一个事务性队列。 <xref:System.Messaging.MessageQueueInstaller.Install%2A> 将新的或现有的队列属性设置为您在中指定的那些<xref:System.Messaging.MessageQueueInstaller>。 如果队列已存在，将其属性重置为的<xref:System.Messaging.MessageQueueInstaller>。 如果现有的队列不是事务性的它则删除，然后重新创建为事务性队列。  
  
> [!CAUTION]
>  如果有必要重新创建队列，队列中的消息将丢失。  
  
 通常情况下，不调用的方法<xref:System.Messaging.MessageQueueInstaller>从在代码中; 它们是通常只能由调用 installutil.exe 安装实用程序。 该实用工具将自动调用<xref:System.Messaging.MessageQueueInstaller.Install%2A>在安装过程中，以写入都与正在安装消息队列相关联的注册表信息的方法。 安装是事务性的因此如果在安装过程中的任何安装项目组件故障，则所有以前安装的组件将回滚到其安装前的状态。 这通过调用每个组件实现<xref:System.Messaging.MessageQueueInstaller.Rollback%2A>方法。  
  
 与安装项目相关联的所有组件成功安装后发生，安装实用工具提交该安装。 <xref:System.Messaging.MessageQueueInstaller.Commit%2A> 完成的安装<xref:System.Messaging.MessageQueue>通过将队列设置为适当的初始状态。 如果指定的队列<xref:System.Messaging.MessageQueueInstaller.Path%2A>属性已存在，并且包含消息，<xref:System.Messaging.MessageQueueInstaller.Commit%2A>清除这些消息。 <xref:System.Messaging.MessageQueueInstaller.Commit%2A>而不是<xref:System.Messaging.MessageQueueInstaller.Install%2A>，清除这些消息，因为无法回滚的清除消息的行为。  
  
 应用程序的安装例程使用项目安装程序的<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>来自动维护有关已安装的组件的信息。 传递到此状态信息<xref:System.Messaging.MessageQueueInstaller.Install%2A>作为`stateSaver`实用工具安装每个参数，将持续更新<xref:System.Messaging.MessageQueueInstaller>实例。 通常情况下，不需要为你的代码来显式修改此状态信息。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberSignature Language="F#" Value="override this.IsEquivalentInstaller : System.Configuration.Install.ComponentInstaller -&gt; bool" Usage="messageQueueInstaller.IsEquivalentInstaller otherInstaller" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller">The installer to compare.</param>
        <summary>Determines whether the specified installer can handle the same kind of installation as this installer.</summary>
        <returns>
          <see langword="true" /> if this installer and the installer specified by the <paramref name="otherInstaller" /> parameter can handle the same kind of installation; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常情况下，<xref:System.Configuration.Install.ComponentInstaller.IsEquivalentInstaller%2A>返回`true`仅当此安装程序和安装由指定`otherInstaller`参数均为相同的类型。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public string Label { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Label" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Label" />
      <MemberSignature Language="VB.NET" Value="Public Property Label As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Label { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Label : string with get, set" Usage="System.Messaging.MessageQueueInstaller.Label" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a description of the queue.</summary>
        <value>描述消息队列的标签。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueue.Label%2A>属性不需要在队列是唯一的。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="P:System.Messaging.MessageQueueInstaller.Label" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="MaximumJournalSize">
      <MemberSignature Language="C#" Value="public long MaximumJournalSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaximumJournalSize" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.MaximumJournalSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumJournalSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaximumJournalSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaximumJournalSize : int64 with get, set" Usage="System.Messaging.MessageQueueInstaller.MaximumJournalSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the maximum size of the journal that is associated with the queue.</summary>
        <value>最大的大小，以千字节为单位的日记队列中，这记录从队列中删除的消息。 消息队列的默认值为没有限制。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 创建队列时，消息队列在自动创建队列日志与新的队列相同的位置。 队列日志用于跟踪从队列中删除的消息。  
  
 两种类型的消息不跟踪： 会被移除从队列中，因为其接收时间计时器已过期，以及从队列中清除。  
  
 应用程序不能将消息发送到日记队列。 但是，你必须定期清除要删除不再需要的消息的队列。 存储在日志队列计入队列所在的计算机的配额的消息。 （计算机配额设置管理员。）  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumQueueSize">
      <MemberSignature Language="C#" Value="public long MaximumQueueSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaximumQueueSize" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.MaximumQueueSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumQueueSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaximumQueueSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaximumQueueSize : int64 with get, set" Usage="System.Messaging.MessageQueueInstaller.MaximumQueueSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the maximum size of the queue.</summary>
        <value>最大的大小，以千字节为单位的队列。 消息队列的默认值为没有限制。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 虽然可以更高版本，则重置，通常是在队列创建时设置的最大队列大小。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MulticastAddress">
      <MemberSignature Language="C#" Value="public string MulticastAddress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MulticastAddress" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.MulticastAddress" />
      <MemberSignature Language="VB.NET" Value="Public Property MulticastAddress As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MulticastAddress { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MulticastAddress : string with get, set" Usage="System.Messaging.MessageQueueInstaller.MulticastAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Introduced in MSMQ 3.0. Gets or sets the multicast address associated with the queue.</summary>
        <value>A<see cref="T:System.String" />包含 （中如下所示的形式） 的有效多播的地址或<see langword="null" />，指示队列不是多播地址相关联。  
  
```  
&lt;地址&gt;:&lt;端口&gt;  
```</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException">MSMQ 3.0 is not installed.</exception>
        <altmember cref="P:System.Messaging.MessageQueue.MulticastAddress" />
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Path : string with get, set" Usage="System.Messaging.MessageQueueInstaller.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Messaging.Design.QueuePathEditor", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the location of the queue that is referenced by this object.</summary>
        <value>表示网络中队列的位置的路径。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 语法<xref:System.Messaging.MessageQueue.Path%2A>属性依赖它的引用的队列的类型。 下表显示了应该用于为各种类型的队列的语法。  
  
|队列类型|语法|  
|----------------|------------|  
|公用队列|`machineName`\\`queueName`|  
|专用队列|`machineName`\\`Private$`\\`queueName`|  
|日记队列|`machineName`\\`queueName`\\`Journal$`|  
|计算机日记队列|`machineName`\\`Journal$`|  
|机死信队列|`machineName`\\`Deadletter$`|  
|计算机事务性死信队列|`machineName`\\`XactDeadletter$`|  
  
 使用"。"本地计算机。  
  
 你还可以使用<xref:System.Messaging.MessageQueue.FormatName%2A>或<xref:System.Messaging.MessageQueue.Label%2A>消息队列的应用程序对象来描述队列路径。 下表显示每种类型的引用的正确语法。  
  
|参考|语法|  
|---------------|------------|  
|格式名称|通过 FormatName: [*格式名*]|  
|Label|标签: [*标签*]|  
  
 如果正在脱机工作，必须使用的格式名来定义队列<xref:System.Messaging.MessageQueue.Path%2A>。 如果不这样做，应用程序将引发异常，因为该域的主域控制器不可用，若要解决<xref:System.Messaging.MessageQueue.Path%2A>到<xref:System.Messaging.MessageQueue.FormatName%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <see cref="P:System.Messaging.MessageQueueInstaller.Path" /> was set to an invalid value, possibly because the syntax is not valid.  -or-  The <see cref="P:System.Messaging.MessageQueueInstaller.Path" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Permissions">
      <MemberSignature Language="C#" Value="public System.Messaging.AccessControlList Permissions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.AccessControlList Permissions" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Permissions" />
      <MemberSignature Language="VB.NET" Value="Public Property Permissions As AccessControlList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::AccessControlList ^ Permissions { System::Messaging::AccessControlList ^ get(); void set(System::Messaging::AccessControlList ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Permissions : System.Messaging.AccessControlList with get, set" Usage="System.Messaging.MessageQueueInstaller.Permissions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.AccessControlList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets permissions associated with the queue.</summary>
        <value>A <see cref="T:System.Messaging.AccessControlList" /> ，包含一个或多个指定的受信者和权限授予队列的访问控制项。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，公用或专用队列的创建者具有完全控制和域组的每个人都获取队列属性，获取权限，并向队列中写入的权限。 消息队列反过来访问每个权限列表条目，直到它找到一个适用于当前用户和当前尝试的操作。 根据使用操作系统的权限，特别地拒绝授予用户的权限优先于允许。  
  
 构造时<xref:System.Messaging.MessageQueueInstaller.Permissions%2A>属性，添加<xref:System.Messaging.AccessControlEntry>实例到你<xref:System.Messaging.AccessControlList>集合。 在构造每个访问控制项时，你可以指定泛型或标准访问权限。 对队列的权限可以是以下任意组合：  
  
-   删除  
  
-   读取安全设置  
  
-   编写安全  
  
-   同步  
  
-   修改所有者  
  
-   读取  
  
-   Write  
  
-   执行  
  
-   必需  
  
-   全部  
  
-   无  
  
 这些权限是一组你可以组合使用的按位或的位标志：  
  
-   完全控制  
  
-   删除消息  
  
-   接收消息  
  
-   扫视消息  
  
-   接收日志消息  
  
-   获取队列属性  
  
-   设置队列属性  
  
-   获取权限  
  
-   设置权限  
  
-   获取队列所属权  
  
-   写入消息  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueue.SetPermissions(System.String,System.Messaging.MessageQueueAccessRights)" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="messageQueueInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">A <see cref="T:System.Collections.IDictionary" /> that contains the pre-installation state of the computer.</param>
        <summary>Restores the computer to the state it was in before the installation, by rolling back the queue information that the installation procedure wrote to the registry. This method is meant to be used by installation tools, which automatically call the appropriate methods.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueInstaller.Rollback%2A>方法撤消的效果<xref:System.Messaging.MessageQueueInstaller.Install%2A>方法。 <xref:System.Messaging.MessageQueueInstaller.Rollback%2A> 如果安装项目中的任何组件的安装失败时进行调用。 <xref:System.Messaging.MessageQueueInstaller.Install%2A>方法创建或设置队列的属性。 <xref:System.Messaging.MessageQueueInstaller.Rollback%2A> 删除队列，或者将预先存在的队列的属性重置为其安装前的值。  
  
 通常情况下，不调用的方法<xref:System.Messaging.MessageQueueInstaller>从在代码中; 它们是通常只能由调用 InstallUtil.exe 安装实用程序。 该实用工具将自动调用<xref:System.Messaging.MessageQueueInstaller.Rollback%2A>方法安装故障若要撤消任何更改之后安装过程中已进行。  
  
 应用程序的安装例程使用项目安装程序的<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>来自动维护有关已安装的组件的信息。 传递到此状态信息<xref:System.Messaging.MessageQueueInstaller.Rollback%2A>作为`savedState`在实用工具回滚，将持续更新参数，每个<xref:System.Messaging.MessageQueueInstaller>实例。 通常情况下，不需要为你的代码来显式修改此状态信息。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="Transactional">
      <MemberSignature Language="C#" Value="public bool Transactional { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Transactional" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Transactional" />
      <MemberSignature Language="VB.NET" Value="Public Property Transactional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Transactional { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Transactional : bool with get, set" Usage="System.Messaging.MessageQueueInstaller.Transactional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether the queue accepts only messages sent as part of a transaction.</summary>
        <value>
          <see langword="true" /> 如果队列仅接受作为事务; 的一部分发送的消息否则为<see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以从使用或不使用事务的本地事务队列检索消息。 如果未指定事务上下文，消息队列会为你创建单个内部事务。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Uninstall : System.Collections.IDictionary -&gt; unit" Usage="messageQueueInstaller.Uninstall savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">A <see cref="T:System.Collections.IDictionary" /> that contains the post-installation state of the computer.</param>
        <summary>Removes an installation by removing queue information from the registry. This method is meant to be used by uninstallation tools, which automatically call the appropriate methods.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Messaging.MessageQueueInstaller.UninstallAction%2A>是`Remove`，<xref:System.Messaging.MessageQueueInstaller.Uninstall%2A>还会删除与关联的队列<xref:System.Messaging.MessageQueue>。  
  
 通常情况下，不调用的方法<xref:System.Messaging.MessageQueueInstaller>从在代码中; 它们是通常只能由调用 InstallUtil.exe 安装实用程序 （在卸载模式）。 该实用工具将自动调用<xref:System.Messaging.MessageQueueInstaller.Uninstall%2A>方法使受其安装前的状态，安装的系统部件还原。 这包括删除都与正在卸载 MessageQueue 相关联的注册表信息。  
  
 应用程序的卸载例程使用项目安装程序的<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>来自动维护有关已卸载的组件的信息。 传递到此状态信息<xref:System.Messaging.MessageQueueInstaller.Uninstall%2A>作为`savedState`实用程序卸载每个参数，将持续更新<xref:System.Messaging.MessageQueueInstaller>实例。 通常情况下，不需要为你的代码来显式修改此状态信息。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="UninstallAction">
      <MemberSignature Language="C#" Value="public System.Configuration.Install.UninstallAction UninstallAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Configuration.Install.UninstallAction UninstallAction" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.UninstallAction" />
      <MemberSignature Language="VB.NET" Value="Public Property UninstallAction As UninstallAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Configuration::Install::UninstallAction UninstallAction { System::Configuration::Install::UninstallAction get(); void set(System::Configuration::Install::UninstallAction value); };" />
      <MemberSignature Language="F#" Value="member this.UninstallAction : System.Configuration.Install.UninstallAction with get, set" Usage="System.Messaging.MessageQueueInstaller.UninstallAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.Install.UninstallAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates what the installer does with the queue at uninstall time: remove it, restore it to its pre-installation state, or leave it in its current installed state.</summary>
        <value>之一<see cref="T:System.Configuration.Install.UninstallAction" />值，该值指示用于队列保留在时的状态<see cref="T:System.Messaging.MessageQueue" />卸载。 默认值为 <see langword="Remove" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在安装队列时，你可以选择使用现有队列。 如果这样做，你必须决定是否应返回到其安装前的状态，或保留在其当前的安装后的状态队列。 如果你选择将队列返回为其安装前的状态，则在安装时，从队列中删除的消息不会还原。 你可以重置仅与关联的队列属性<xref:System.Messaging.MessageQueueInstaller>到其安装前的值。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Configuration.Install.UninstallAction" />
      </Docs>
    </Member>
    <Member MemberName="UseJournalQueue">
      <MemberSignature Language="C#" Value="public bool UseJournalQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseJournalQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.UseJournalQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property UseJournalQueue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseJournalQueue { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseJournalQueue : bool with get, set" Usage="System.Messaging.MessageQueueInstaller.UseJournalQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that indicates whether messages that are retrieved from the queue are also copied to the associated journal queue.</summary>
        <value>
          <see langword="true" /> 要复制到日记队列中; 从队列检索的消息否则为<see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 日记队列中，可以保留跟踪的消息，即使已经从队列中检索它们。 但是，两种类型的消息保持未跟踪： 当其接收时间计时器到期时，从队列中移除和从队列中清除。  
  
 应定期清除日记队列，以删除不再需要的消息。 存储在日志队列计入该日志所在的计算机的配额的消息。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>