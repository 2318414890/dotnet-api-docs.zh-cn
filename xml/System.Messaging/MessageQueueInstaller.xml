<Type Name="MessageQueueInstaller" FullName="System.Messaging.MessageQueueInstaller">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2169da977692b3e7ae0fe99175aa7991d83a31df" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30460831" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MessageQueueInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageQueueInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageQueueInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageQueueInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageQueueInstaller : System::Configuration::Install::ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>允许安装并配置应用程序运行所需的队列。 安装实用工具（例如 InstallUtil.exe）在安装 <see cref="T:System.Messaging.MessageQueue" /> 时调用此类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueInstaller>安装实用程序用于写入与队列相关联的注册表值。 有关安装实用工具的详细信息，请参阅[Installutil.exe （安装程序工具）](~/docs/framework/tools/installutil-exe-installer-tool.md)。  
  
 若要安装队列，创建继承自项目安装程序类<xref:System.Configuration.Install.Installer>，并设置<xref:System.ComponentModel.RunInstallerAttribute>到类`true`。 在项目中，创建<xref:System.Messaging.MessageQueueInstaller>实例中安装每个队列，并将实例添加到你的项目安装程序类。  
  
 在创建时<xref:System.Messaging.MessageQueueInstaller>实例，你可以根据需要传递现有<xref:System.Messaging.MessageQueue>（例如，从测试服务器） 到<xref:System.Messaging.MessageQueueInstaller.%23ctor%2A>构造函数。 此方法自动提供通过镜像传入队列的设置的新队列的配置设置。 或者，你可以手动设置中的属性<xref:System.Messaging.MessageQueueInstaller>给你想并调用默认构造函数的状态的实例。  
  
 当调用安装实用工具时，它会查找<xref:System.ComponentModel.RunInstallerAttribute>。 如果它是`true`，则此实用工具安装中的所有队列<xref:System.Configuration.Install.Installer.Installers%2A>项目安装程序与关联的集合。 如果<xref:System.ComponentModel.RunInstallerAttribute>是`false`，该实用程序将忽略项目安装程序。  
  
 修改的其他属性<xref:System.Messaging.MessageQueueInstaller>实例之前或之后添加到的实例<xref:System.Configuration.Install.Installer.Installers%2A>项目安装程序的集合。 例如，队列的<xref:System.Messaging.MessageQueue.Path%2A>安装实用工具执行之前必须设置。  
  
 通常情况下，不调用的方法<xref:System.Messaging.MessageQueueInstaller>从在代码中; 它们是通常只能由调用 installutil.exe 安装实用程序。 该实用工具将自动调用<xref:System.Messaging.MessageQueueInstaller.Install%2A>期间的安装过程和调用的方法<xref:System.Messaging.MessageQueueInstaller.Commit%2A>如果安装未引发异常。 如有必要，它退出故障，通过调用<xref:System.Messaging.MessageQueueInstaller.Rollback%2A>生成异常的对象。  
  
 应用程序的安装例程使用项目安装程序的<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>来自动维护有关已安装的组件的信息。 此状态信息将持续更新以及每个<xref:System.Messaging.MessageQueueInstaller>由实用工具安装实例。 它通常没有必要为你的代码来显式修改状态信息。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Messaging.MessageQueueInstaller" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueueInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueueInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Messaging.MessageQueueInstaller" /> 类的新实例。 不设置任何实例属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueueInstaller (System.Messaging.MessageQueue componentToCopy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Messaging.MessageQueue componentToCopy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.#ctor(System.Messaging.MessageQueue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (componentToCopy As MessageQueue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueueInstaller(System::Messaging::MessageQueue ^ componentToCopy);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="componentToCopy" Type="System.Messaging.MessageQueue" />
      </Parameters>
      <Docs>
        <param name="componentToCopy">
          <see cref="T:System.Messaging.MessageQueue" /> 组件，其设置确定安装的新队列的属性设置。</param>
        <summary>初始化 <see cref="T:System.Messaging.MessageQueueInstaller" /> 类的新实例，将安装设置初始化为现有 <see cref="T:System.Messaging.MessageQueue" /> 实例的安装设置。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Authenticate">
      <MemberSignature Language="C#" Value="public bool Authenticate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Authenticate" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Authenticate" />
      <MemberSignature Language="VB.NET" Value="Public Property Authenticate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Authenticate { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示要安装的队列是否只接受已经过身份验证的消息。</summary>
        <value>
          如果队列仅接受已经过身份验证的消息，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当未经身份验证的消息发送到一个队列，只接受经过身份验证的消息时，消息被拒绝。 发送应用程序可以通过设置请求消息遭到拒绝的通知<xref:System.Messaging.Message.AcknowledgeType%2A>消息。 否则，并不表示，该消息被拒绝，因此，除非将其发送到死信队列，消息可能会丢失。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BasePriority">
      <MemberSignature Language="C#" Value="public short BasePriority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 BasePriority" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.BasePriority" />
      <MemberSignature Language="VB.NET" Value="Public Property BasePriority As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property short BasePriority { short get(); void set(short value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于在网络上路由公共队列消息的基本优先级。</summary>
        <value>发送到公共队列的所有消息的单个基本优先级。 默认值为零 (0)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueInstaller.BasePriority%2A>用于通过网络路由队列的消息。 使用<xref:System.Messaging.MessageQueueInstaller.BasePriority%2A>以便发送到更高的队列或优先级低于，对于发送到其他队列的消息的消息。 当设置队列的基本优先级时，发送给它的所有消息都提供优先级高于，发送到具有较低的基本优先级队列的消息。 队列的基本优先级的消息顺序无效，队列中或在从队列读取消息的方式。  
  
 <xref:System.Messaging.MessageQueueInstaller.BasePriority%2A>适用通过域控制器访问的仅为公共队列 （换而言之，使用公用格式名）。 专用队列的和的直接访问公用队列的基本优先级值始终为零。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Category">
      <MemberSignature Language="C#" Value="public Guid Category { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid Category" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Category" />
      <MemberSignature Language="VB.NET" Value="Public Property Category As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid Category { Guid get(); void set(Guid value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.GuidConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置实现特定的队列类型。</summary>
        <value>
          <see cref="T:System.Guid" />，表示队列类别（或“消息队列”类型标识符），允许应用程序按照其队列的使用方式对这些队列进行分类。 默认值为 <see langword="Guid.empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 队列类别可让应用程序对其进行分类相关联的队列，根据它们的使用的方式。 <xref:System.Messaging.MessageQueue.Category%2A>可以是 null 引用。 你还可以定义新类别。  
  
 <xref:System.Messaging.MessageQueue.Category%2A>属性提供访问消息队列类型标识符属性，这是与特定队列相关联，并且为读/写权限。 你可以使用<xref:System.Guid.NewGuid%2A>方法来创建一个类别值，保证可以跨所有唯一<xref:System.Guid>值。 但是，它是只需将使其有别于其他类别，不是从所有其他的类别值<xref:System.Guid>值。 例如，你可以设置<xref:System.Messaging.MessageQueue.Category%2A>队列为 {00000000-0000-0000-0000-000000000001} 的一个组与<xref:System.Messaging.MessageQueue.Category%2A>为 {00000000-0000-0000-0000-000000000002} 的另一个组。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public override void Commit (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Commit(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.Commit(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Commit (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Commit(System::Collections::IDictionary ^ savedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">一个 <see cref="T:System.Collections.IDictionary" />，它包含计算机的安装后状态。</param>
        <summary>通过提交 <see cref="T:System.Messaging.MessageQueue" /> 方法写入注册表的 <see cref="M:System.Messaging.MessageQueueInstaller.Install(System.Collections.IDictionary)" /> 安装信息来完成安装过程。 此方法应该由安装工具使用，安装工具将自动调用相应的方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常情况下，不调用的方法<xref:System.Messaging.MessageQueueInstaller>从在代码中; 它们是通常只能由调用 installutil.exe 安装实用程序。 该实用工具将自动调用<xref:System.Messaging.MessageQueueInstaller.Install%2A>在安装过程中的方法。 安装是事务性的因此如果在安装过程中的任何安装项目组件故障，则所有以前安装的组件将回滚到其安装前的状态。 这通过调用每个组件实现<xref:System.Messaging.MessageQueueInstaller.Rollback%2A>方法。  
  
 与安装项目相关联的所有组件成功安装后发生，安装实用工具提交该安装。 <xref:System.Messaging.MessageQueueInstaller.Commit%2A> 完成的安装<xref:System.Messaging.MessageQueue>通过将队列设置为适当的初始状态。 如果指定的队列<xref:System.Messaging.MessageQueueInstaller.Path%2A>属性已存在，并且包含消息，<xref:System.Messaging.MessageQueueInstaller.Commit%2A>清除这些消息。 <xref:System.Messaging.MessageQueueInstaller.Commit%2A>而不是<xref:System.Messaging.MessageQueueInstaller.Install%2A>，清除这些消息，因为无法回滚的清除消息的行为。  
  
 应用程序的安装例程使用项目安装程序的<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>来自动维护有关已安装的组件的信息。 传递到此状态信息<xref:System.Messaging.MessageQueueInstaller.Commit%2A>作为`savedState`随着此实用工具提交每个参数，将持续更新<xref:System.Messaging.MessageQueueInstaller>实例。 通常情况下，不需要为你的代码来显式修改此状态信息。 清除队列后，<xref:System.Messaging.MessageQueueInstaller.Commit%2A>发送到日志条目`savedState`安装与该键相关联。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">用作 <see cref="T:System.ComponentModel.IComponent" /> 的模板的 <see cref="T:System.Messaging.MessageQueueInstaller" />。</param>
        <summary>复制在安装时消息队列所需的 <see cref="T:System.Messaging.MessageQueue" /> 组件的属性值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常情况下，不调用的方法<xref:System.Messaging.MessageQueueInstaller>从在代码中; 它们是通常只能由调用 installutil.exe 安装实用程序。 <xref:System.Messaging.MessageQueueInstaller.CopyFromComponent%2A> 安装实用程序用于设置的属性值<xref:System.Messaging.MessageQueueInstaller>为的现有值<xref:System.Messaging.MessageQueue>。  
  
 如果<xref:System.Messaging.MessageQueue.Path%2A>的<xref:System.Messaging.MessageQueue>，它是在传递为空字符串 ("")，必须设置<xref:System.Messaging.MessageQueue.Path%2A>属性之前在安装程序执行的非空值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">与此 <see cref="T:System.Messaging.MessageQueueInstaller" /> 关联的组件不是 <see cref="T:System.Messaging.MessageQueue" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="EncryptionRequired">
      <MemberSignature Language="C#" Value="public System.Messaging.EncryptionRequired EncryptionRequired { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.EncryptionRequired EncryptionRequired" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.EncryptionRequired" />
      <MemberSignature Language="VB.NET" Value="Public Property EncryptionRequired As EncryptionRequired" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::EncryptionRequired EncryptionRequired { System::Messaging::EncryptionRequired get(); void set(System::Messaging::EncryptionRequired value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.EncryptionRequired</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示队列是否仅接受私有（或加密）消息。</summary>
        <value>
          <see cref="T:System.Messaging.EncryptionRequired" /> 值之一，指示发送到队列的消息所需的加密级别。 默认值为 <see langword="Optional" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定加密时，仅<xref:System.Messaging.Message.Body%2A>的一条消息进行加密。 其他属性，如<xref:System.Messaging.Message.Label%2A>，未加密。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver">
          <see cref="T:System.Collections.IDictionary" />，用于保存执行提交、回滚或卸载操作所需的信息。</param>
        <summary>执行安装并将消息队列信息写入注册表。 此方法应该由安装工具使用，安装工具将自动调用相应的方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueInstaller.Install%2A>方法将消息队列信息写入注册表中，并将关联<xref:System.Messaging.MessageQueue>位于指定的路径的队列的实例<xref:System.Messaging.MessageQueueInstaller.Path%2A>属性。 如果队列不存在，<xref:System.Messaging.MessageQueueInstaller.Install%2A>创建一个事务性队列。 <xref:System.Messaging.MessageQueueInstaller.Install%2A> 将新的或现有的队列属性设置为您在中指定的那些<xref:System.Messaging.MessageQueueInstaller>。 如果队列已存在，将其属性重置为的<xref:System.Messaging.MessageQueueInstaller>。 如果现有的队列不是事务性的它则删除，然后重新创建为事务性队列。  
  
> [!CAUTION]
>  如果有必要重新创建队列，队列中的消息将丢失。  
  
 通常情况下，不调用的方法<xref:System.Messaging.MessageQueueInstaller>从在代码中; 它们是通常只能由调用 installutil.exe 安装实用程序。 该实用工具将自动调用<xref:System.Messaging.MessageQueueInstaller.Install%2A>在安装过程中，以写入都与正在安装消息队列相关联的注册表信息的方法。 安装是事务性的因此如果在安装过程中的任何安装项目组件故障，则所有以前安装的组件将回滚到其安装前的状态。 这通过调用每个组件实现<xref:System.Messaging.MessageQueueInstaller.Rollback%2A>方法。  
  
 与安装项目相关联的所有组件成功安装后发生，安装实用工具提交该安装。 <xref:System.Messaging.MessageQueueInstaller.Commit%2A> 完成的安装<xref:System.Messaging.MessageQueue>通过将队列设置为适当的初始状态。 如果指定的队列<xref:System.Messaging.MessageQueueInstaller.Path%2A>属性已存在，并且包含消息，<xref:System.Messaging.MessageQueueInstaller.Commit%2A>清除这些消息。 <xref:System.Messaging.MessageQueueInstaller.Commit%2A>而不是<xref:System.Messaging.MessageQueueInstaller.Install%2A>，清除这些消息，因为无法回滚的清除消息的行为。  
  
 应用程序的安装例程使用项目安装程序的<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>来自动维护有关已安装的组件的信息。 传递到此状态信息<xref:System.Messaging.MessageQueueInstaller.Install%2A>作为`stateSaver`实用工具安装每个参数，将持续更新<xref:System.Messaging.MessageQueueInstaller>实例。 通常情况下，不需要为你的代码来显式修改此状态信息。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller">要比较的安装程序。</param>
        <summary>确定指定的安装程序能否处理与此安装程序相同的安装类型。</summary>
        <returns>
          如果此安装程序和 <paramref name="otherInstaller" /> 参数指定的安装程序可以处理相同的安装类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常情况下，<xref:System.Configuration.Install.ComponentInstaller.IsEquivalentInstaller%2A>返回`true`仅当此安装程序和安装由指定`otherInstaller`参数均为相同的类型。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public string Label { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Label" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Label" />
      <MemberSignature Language="VB.NET" Value="Public Property Label As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Label { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置队列说明。</summary>
        <value>描述消息队列的标签。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueue.Label%2A>属性不需要在队列是唯一的。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Messaging.MessageQueueInstaller.Label" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="MaximumJournalSize">
      <MemberSignature Language="C#" Value="public long MaximumJournalSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaximumJournalSize" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.MaximumJournalSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumJournalSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaximumJournalSize { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与队列关联的日记的最大大小。</summary>
        <value>日记队列的最大大小（以千字节为单位），该队列记录从队列中移除的消息。 该消息队列默认为无限制。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 创建队列时，消息队列在自动创建队列日志与新的队列相同的位置。 队列日志用于跟踪从队列中删除的消息。  
  
 两种类型的消息不跟踪： 会被移除从队列中，因为其接收时间计时器已过期，以及从队列中清除。  
  
 应用程序不能将消息发送到日记队列。 但是，你必须定期清除要删除不再需要的消息的队列。 存储在日志队列计入队列所在的计算机的配额的消息。 （计算机配额设置管理员。）  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumQueueSize">
      <MemberSignature Language="C#" Value="public long MaximumQueueSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaximumQueueSize" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.MaximumQueueSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumQueueSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaximumQueueSize { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置队列的最大大小。</summary>
        <value>队列的最大大小，以千字节为单位。 该消息队列默认为无限制。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 虽然可以更高版本，则重置，通常是在队列创建时设置的最大队列大小。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MulticastAddress">
      <MemberSignature Language="C#" Value="public string MulticastAddress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MulticastAddress" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.MulticastAddress" />
      <MemberSignature Language="VB.NET" Value="Public Property MulticastAddress As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MulticastAddress { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 MSMQ 3.0 中引入。 获取或设置与队列关联的多路广播地址。</summary>
        <value>包含有效的多路广播地址（格式如下）的 <see cref="T:System.String" />，或者为 <see langword="null" />，这表示队列与多路广播地址不关联。  
  
```  
&lt;address&gt;:&lt;port&gt;  
```</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException">未安装 MSMQ 3.0。</exception>
        <altmember cref="P:System.Messaging.MessageQueue.MulticastAddress" />
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Messaging.Design.QueuePathEditor", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置由此对象引用的队列的位置。</summary>
        <value>表示队列在网络中的位置的路径。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 语法<xref:System.Messaging.MessageQueue.Path%2A>属性依赖它的引用的队列的类型。 下表显示了应该用于为各种类型的队列的语法。  
  
|队列类型|语法|  
|----------------|------------|  
|公用队列|`machineName`\\`queueName`|  
|专用队列|`machineName`\\`Private$`\\`queueName`|  
|日记队列|`machineName`\\`queueName`\\`Journal$`|  
|计算机日记队列|`machineName`\\`Journal$`|  
|机死信队列|`machineName`\\`Deadletter$`|  
|计算机事务性死信队列|`machineName`\\`XactDeadletter$`|  
  
 使用"。"本地计算机。  
  
 你还可以使用<xref:System.Messaging.MessageQueue.FormatName%2A>或<xref:System.Messaging.MessageQueue.Label%2A>消息队列的应用程序对象来描述队列路径。 下表显示每种类型的引用的正确语法。  
  
|参考|语法|  
|---------------|------------|  
|格式名称|通过 FormatName: [*格式名*]|  
|Label|标签: [*标签*]|  
  
 如果正在脱机工作，必须使用的格式名来定义队列<xref:System.Messaging.MessageQueue.Path%2A>。 如果不这样做，应用程序将引发异常，因为该域的主域控制器不可用，若要解决<xref:System.Messaging.MessageQueue.Path%2A>到<xref:System.Messaging.MessageQueue.FormatName%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Messaging.MessageQueueInstaller.Path" /> 被设置为了无效值，可能是因为语法无效。  
  
 或  
  
 <see cref="P:System.Messaging.MessageQueueInstaller.Path" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Permissions">
      <MemberSignature Language="C#" Value="public System.Messaging.AccessControlList Permissions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.AccessControlList Permissions" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Permissions" />
      <MemberSignature Language="VB.NET" Value="Public Property Permissions As AccessControlList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::AccessControlList ^ Permissions { System::Messaging::AccessControlList ^ get(); void set(System::Messaging::AccessControlList ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.AccessControlList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与队列关联的权限。</summary>
        <value>
          <see cref="T:System.Messaging.AccessControlList" />，包含一个或多个指定受信者和为队列授予的权限的访问控制项。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，公用或专用队列的创建者具有完全控制和域组的每个人都获取队列属性，获取权限，并向队列中写入的权限。 消息队列反过来访问每个权限列表条目，直到它找到一个适用于当前用户和当前尝试的操作。 根据使用操作系统的权限，特别地拒绝授予用户的权限优先于允许。  
  
 构造时<xref:System.Messaging.MessageQueueInstaller.Permissions%2A>属性，添加<xref:System.Messaging.AccessControlEntry>实例到你<xref:System.Messaging.AccessControlList>集合。 在构造每个访问控制项时，你可以指定泛型或标准访问权限。 对队列的权限可以是以下任意组合：  
  
-   删除  
  
-   读取安全设置  
  
-   编写安全  
  
-   同步  
  
-   修改所有者  
  
-   读取  
  
-   Write  
  
-   执行  
  
-   必需  
  
-   全部  
  
-   无  
  
 这些权限是一组你可以组合使用的按位或的位标志：  
  
-   完全控制  
  
-   删除消息  
  
-   接收消息  
  
-   扫视消息  
  
-   接收日志消息  
  
-   获取队列属性  
  
-   设置队列属性  
  
-   获取权限  
  
-   设置权限  
  
-   获取队列所属权  
  
-   写入消息  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueue.SetPermissions(System.String,System.Messaging.MessageQueueAccessRights)" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">
          <see cref="T:System.Collections.IDictionary" />，包含计算机的安装前状态。</param>
        <summary>通过回滚安装过程写入注册表的队列信息，将计算机还原到安装前的状态。 此方法应该由安装工具使用，安装工具将自动调用相应的方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueInstaller.Rollback%2A>方法撤消的效果<xref:System.Messaging.MessageQueueInstaller.Install%2A>方法。 <xref:System.Messaging.MessageQueueInstaller.Rollback%2A> 如果安装项目中的任何组件的安装失败时进行调用。 <xref:System.Messaging.MessageQueueInstaller.Install%2A>方法创建或设置队列的属性。 <xref:System.Messaging.MessageQueueInstaller.Rollback%2A> 删除队列，或者将预先存在的队列的属性重置为其安装前的值。  
  
 通常情况下，不调用的方法<xref:System.Messaging.MessageQueueInstaller>从在代码中; 它们是通常只能由调用 InstallUtil.exe 安装实用程序。 该实用工具将自动调用<xref:System.Messaging.MessageQueueInstaller.Rollback%2A>方法安装故障若要撤消任何更改之后安装过程中已进行。  
  
 应用程序的安装例程使用项目安装程序的<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>来自动维护有关已安装的组件的信息。 传递到此状态信息<xref:System.Messaging.MessageQueueInstaller.Rollback%2A>作为`savedState`在实用工具回滚，将持续更新参数，每个<xref:System.Messaging.MessageQueueInstaller>实例。 通常情况下，不需要为你的代码来显式修改此状态信息。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="Transactional">
      <MemberSignature Language="C#" Value="public bool Transactional { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Transactional" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Transactional" />
      <MemberSignature Language="VB.NET" Value="Public Property Transactional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Transactional { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示队列是否仅接受作为事务的一部分发送的消息。</summary>
        <value>
          如果队列仅接受作为事务的一部分发送的消息，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以从使用或不使用事务的本地事务队列检索消息。 如果未指定事务上下文，消息队列会为你创建单个内部事务。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">一个 <see cref="T:System.Collections.IDictionary" />，它包含计算机的安装后状态。</param>
        <summary>通过从注册表中移除队列信息来移除安装。 此方法应该由卸载工具使用，卸载工具自动调用相应的方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Messaging.MessageQueueInstaller.UninstallAction%2A>是`Remove`，<xref:System.Messaging.MessageQueueInstaller.Uninstall%2A>还会删除与关联的队列<xref:System.Messaging.MessageQueue>。  
  
 通常情况下，不调用的方法<xref:System.Messaging.MessageQueueInstaller>从在代码中; 它们是通常只能由调用 InstallUtil.exe 安装实用程序 （在卸载模式）。 该实用工具将自动调用<xref:System.Messaging.MessageQueueInstaller.Uninstall%2A>方法使受其安装前的状态，安装的系统部件还原。 这包括删除都与正在卸载 MessageQueue 相关联的注册表信息。  
  
 应用程序的卸载例程使用项目安装程序的<xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>来自动维护有关已卸载的组件的信息。 传递到此状态信息<xref:System.Messaging.MessageQueueInstaller.Uninstall%2A>作为`savedState`实用程序卸载每个参数，将持续更新<xref:System.Messaging.MessageQueueInstaller>实例。 通常情况下，不需要为你的代码来显式修改此状态信息。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="UninstallAction">
      <MemberSignature Language="C#" Value="public System.Configuration.Install.UninstallAction UninstallAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Configuration.Install.UninstallAction UninstallAction" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.UninstallAction" />
      <MemberSignature Language="VB.NET" Value="Public Property UninstallAction As UninstallAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Configuration::Install::UninstallAction UninstallAction { System::Configuration::Install::UninstallAction get(); void set(System::Configuration::Install::UninstallAction value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.Install.UninstallAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示安装程序在卸载时对队列执行的操作：移除队列，将队列还原为安装前的状态，或者将队列保留为当前的已安装状态。</summary>
        <value>
          <see cref="T:System.Configuration.Install.UninstallAction" /> 值之一，指示在卸载 <see cref="T:System.Messaging.MessageQueue" /> 时队列保留在什么状态。 默认值为 <see langword="Remove" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在安装队列时，你可以选择使用现有队列。 如果这样做，你必须决定是否应返回到其安装前的状态，或保留在其当前的安装后的状态队列。 如果你选择将队列返回为其安装前的状态，则在安装时，从队列中删除的消息不会还原。 你可以重置仅与关联的队列属性<xref:System.Messaging.MessageQueueInstaller>到其安装前的值。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Configuration.Install.UninstallAction" />
      </Docs>
    </Member>
    <Member MemberName="UseJournalQueue">
      <MemberSignature Language="C#" Value="public bool UseJournalQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseJournalQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.UseJournalQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property UseJournalQueue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseJournalQueue { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示从队列中检索的消息是否也复制到关联的日记队列。</summary>
        <value>
          如果将从队列中检索的消息复制到日记队列，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 日记队列中，可以保留跟踪的消息，即使已经从队列中检索它们。 但是，两种类型的消息保持未跟踪： 当其接收时间计时器到期时，从队列中移除和从队列中清除。  
  
 应定期清除日记队列，以删除不再需要的消息。 存储在日志队列计入该日志所在的计算机的配额的消息。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>