<Type Name="BinaryMessageFormatter" FullName="System.Messaging.BinaryMessageFormatter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f9220f5130f7d9cf8c72cc71ccc34de42e5e8ede" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30460011" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class BinaryMessageFormatter : ICloneable, System.Messaging.IMessageFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BinaryMessageFormatter extends System.Object implements class System.ICloneable, class System.Messaging.IMessageFormatter" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.BinaryMessageFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Class BinaryMessageFormatter&#xA;Implements ICloneable, IMessageFormatter" />
  <TypeSignature Language="C++ CLI" Value="public ref class BinaryMessageFormatter : ICloneable, System::Messaging::IMessageFormatter" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Messaging.IMessageFormatter</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>使用二进制格式，将一个对象（或连接的对象的整个图形）序列化成“消息队列”消息体或从“消息队列”消息体反序列化一个对象。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.BinaryMessageFormatter>是非常高效，可用于序列化大多数对象。 结果是非常紧凑且快速进行分析、 但不允许的松散耦合的消息传递作为<xref:System.Messaging.XmlMessageFormatter>未。 松耦合的意味着客户端和服务器独立可以发送和接收的类型版本。  
  
 当应用程序发送一条消息到使用的实例的队列<xref:System.Messaging.MessageQueue>类，格式化程序对象序列化为流，并将它插入到消息正文。 从队列使用读取时<xref:System.Messaging.MessageQueue>，格式化程序反序列化到消息数据<xref:System.Messaging.Message.Body%2A>属性<xref:System.Messaging.Message>。  
  
 <xref:System.Messaging.BinaryMessageFormatter> 提供更快吞吐量要高于<xref:System.Messaging.XmlMessageFormatter>。 使用<xref:System.Messaging.BinaryMessageFormatter>当纯速度而不是松散耦合的消息传递需要时。  
  
   
  
## Examples  
 [!code-cpp[MessagingBinaryFormatter#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessagingBinaryFormatter/CPP/message_binaryformatter.cpp#1)]
 [!code-csharp[MessagingBinaryFormatter#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessagingBinaryFormatter/CS/message_binaryformatter.cs#1)]
 [!code-vb[MessagingBinaryFormatter#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessagingBinaryFormatter/VB/message_binaryformatter.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.XmlMessageFormatter" />
    <altmember cref="T:System.Messaging.ActiveXMessageFormatter" />
    <altmember cref="P:System.Messaging.Message.Formatter" />
    <altmember cref="P:System.Messaging.MessageQueue.Formatter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Messaging.BinaryMessageFormatter" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BinaryMessageFormatter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.BinaryMessageFormatter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BinaryMessageFormatter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Messaging.BinaryMessageFormatter" /> 类的新实例，不指定类型样式或顶级对象程序集样式。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 必须指定值<xref:System.Messaging.BinaryMessageFormatter.TopObjectFormat%2A>属性 （用于定义关系图中的根对象的布局方式） 和<xref:System.Messaging.BinaryMessageFormatter.TypeFormat%2A>属性 （用于定义对象类型描述如何布局） 之前使用的实例<xref:System.Messaging.BinaryMessageFormatter>类序列化并发送一条消息。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BinaryMessageFormatter (System.Runtime.Serialization.Formatters.FormatterAssemblyStyle topObjectFormat, System.Runtime.Serialization.Formatters.FormatterTypeStyle typeFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Runtime.Serialization.Formatters.FormatterAssemblyStyle topObjectFormat, valuetype System.Runtime.Serialization.Formatters.FormatterTypeStyle typeFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.BinaryMessageFormatter.#ctor(System.Runtime.Serialization.Formatters.FormatterAssemblyStyle,System.Runtime.Serialization.Formatters.FormatterTypeStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (topObjectFormat As FormatterAssemblyStyle, typeFormat As FormatterTypeStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BinaryMessageFormatter(System::Runtime::Serialization::Formatters::FormatterAssemblyStyle topObjectFormat, System::Runtime::Serialization::Formatters::FormatterTypeStyle typeFormat);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="topObjectFormat" Type="System.Runtime.Serialization.Formatters.FormatterAssemblyStyle" />
        <Parameter Name="typeFormat" Type="System.Runtime.Serialization.Formatters.FormatterTypeStyle" />
      </Parameters>
      <Docs>
        <param name="topObjectFormat">确定图形的顶级（根）对象在序列化流中的布局方式。</param>
        <param name="typeFormat">确定类型说明在序列化流中的布局方式。</param>
        <summary>初始化 <see cref="T:System.Messaging.BinaryMessageFormatter" /> 类的新实例，并指定根对象和类型说明的格式。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public bool CanRead (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanRead(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.BinaryMessageFormatter.CanRead(System.Messaging.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanRead(System::Messaging::Message ^ message);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.CanRead(System.Messaging.Message)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message">要检查的 <see cref="T:System.Messaging.Message" />。</param>
        <summary>确定格式化程序是否可以反序列化消息的内容。</summary>
        <returns>
          如果二进制消息格式化程序可以反序列化消息，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.BinaryMessageFormatter.CanRead%2A> 返回`false`如果消息正文不是一个二进制对象。  
  
 在接收计算机上，<xref:System.Messaging.BinaryMessageFormatter.CanRead%2A>返回`true`如果本地存在类的程序集，要反序列化。 程序集必须在全局程序集缓存中，找到或链接到应用程序 （例如，如果该对象表示的自定义类）。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="message" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.BinaryMessageFormatter.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.Messaging.BinaryMessageFormatter" /> 类的实例，其读/写属性（根对象和类型说明格式）与当前 <see cref="T:System.Messaging.BinaryMessageFormatter" /> 相同。</summary>
        <returns>一个对象，其属性与此 <see cref="T:System.Messaging.BinaryMessageFormatter" /> 的属性相同，但其元数据并不将其指定为格式化程序类实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法创建一份格式化程序，并初始化所有其属性设置为此值<xref:System.Messaging.BinaryMessageFormatter>。 用于可伸缩性，但不保证读取或写入线程安全性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.IMessageFormatter" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public object Read (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Read(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.BinaryMessageFormatter.Read(System.Messaging.Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Read(System::Messaging::Message ^ message);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.Read(System.Messaging.Message)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message">要反序列化的 <see cref="T:System.Messaging.Message" />（二进制格式）。</param>
        <summary>从给定的消息中读取内容，并创建包含反序列化消息的对象。</summary>
        <returns>反序列化的消息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  调用此方法不受信任的数据会带来安全风险。 调用此方法仅受信任的数据。 有关详细信息，请参阅[数据验证](https://www.owasp.org/index.php/Data_Validation)。  
  
 消息的正文必须采用二进制格式，并且必须使用相同的序列化程序进行反序列化形式，最初序列化的消息。 如果正文表示自定义类，该类的程序集必须位于本地。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">消息的 <see cref="P:System.Messaging.Message.BodyType" /> 属性不指示二进制对象。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="message" /> 参数为 <see langword="null" />。</exception>
        <altmember cref="M:System.Messaging.BinaryMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.BinaryMessageFormatter.Write(System.Messaging.Message,System.Object)" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="TopObjectFormat">
      <MemberSignature Language="C#" Value="public System.Runtime.Serialization.Formatters.FormatterAssemblyStyle TopObjectFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.Serialization.Formatters.FormatterAssemblyStyle TopObjectFormat" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.BinaryMessageFormatter.TopObjectFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property TopObjectFormat As FormatterAssemblyStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Serialization::Formatters::FormatterAssemblyStyle TopObjectFormat { System::Runtime::Serialization::Formatters::FormatterAssemblyStyle get(); void set(System::Runtime::Serialization::Formatters::FormatterAssemblyStyle value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgTopObjectFormat")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Serialization.Formatters.FormatterAssemblyStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值定义如何图形的顶级（根）对象如何进行与查找和加载其程序集相关的反序列化。</summary>
        <value>
          <see cref="T:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle" /> 值之一，它定义反序列化行为。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 目前，你应该接受默认值， `AssemblyStyle`。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.BinaryMessageFormatter.TypeFormat" />
      </Docs>
    </Member>
    <Member MemberName="TypeFormat">
      <MemberSignature Language="C#" Value="public System.Runtime.Serialization.Formatters.FormatterTypeStyle TypeFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.Serialization.Formatters.FormatterTypeStyle TypeFormat" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.BinaryMessageFormatter.TypeFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeFormat As FormatterTypeStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Serialization::Formatters::FormatterTypeStyle TypeFormat { System::Runtime::Serialization::Formatters::FormatterTypeStyle get(); void set(System::Runtime::Serialization::Formatters::FormatterTypeStyle value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Messaging.MessagingDescription("MsgTypeFormat")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Serialization.Formatters.FormatterTypeStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值定义类型说明在序列化流中的布局方式。</summary>
        <value>一个 <see cref="T:System.Runtime.Serialization.Formatters.FormatterTypeStyle" />，它定义类型说明格式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 目前，你应该接受默认值， `TypesWhenNeeded`。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.BinaryMessageFormatter.TopObjectFormat" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.Messaging.Message message, object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.Messaging.Message message, object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.BinaryMessageFormatter.Write(System.Messaging.Message,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::Messaging::Message ^ message, System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.Write(System.Messaging.Message,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message">
          <see cref="T:System.Messaging.Message" />，其 <see cref="P:System.Messaging.Message.Body" /> 属性将包含序列化的对象。</param>
        <param name="obj">要序列化到消息体中的对象。</param>
        <summary>将对象序列化为消息体。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 顶级对象格式和类型格式无需指定要写入队列，因为它们必须在读取时。 <xref:System.Messaging.BinaryMessageFormatter.TopObjectFormat%2A>和<xref:System.Messaging.BinaryMessageFormatter.TypeFormat%2A>仅在反序列化消息时，格式化程序使用属性。  
  
 <xref:System.Messaging.BinaryMessageFormatter>可以序列化大多数对象，但结果不松散耦合。 但是，它是 compact，因此格式化程序是有效的大型对象。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="message" /> 参数为 <see langword="null" />。</exception>
        <altmember cref="M:System.Messaging.BinaryMessageFormatter.Read(System.Messaging.Message)" />
      </Docs>
    </Member>
  </Members>
</Type>