<Type Name="HtmlForm" FullName="System.Web.UI.HtmlControls.HtmlForm">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a9269c871537e84afc2061b0e882b63e40aa2716" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30590951" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class HtmlForm : System.Web.UI.HtmlControls.HtmlContainerControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HtmlForm extends System.Web.UI.HtmlControls.HtmlContainerControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.HtmlControls.HtmlForm" />
  <TypeSignature Language="VB.NET" Value="Public Class HtmlForm&#xA;Inherits HtmlContainerControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlForm : System::Web::UI::HtmlControls::HtmlContainerControl" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.HtmlControls.HtmlContainerControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供对服务器上的 HTML <see langword="&lt;form&gt;" /> 元素的编程访问。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlControls.HtmlForm>控件是在 Web 窗体页上的服务器控件的容器。 回发到服务器的所有服务器控件必须都置于开始标记和结束标记之间<xref:System.Web.UI.HtmlControls.HtmlForm>控件。  
  
> [!NOTE]
>  ASP.NET 允许只有一个<xref:System.Web.UI.HtmlControls.HtmlForm>控件 Web 窗体页上处于活动状态。 如果存在多个活动<xref:System.Web.UI.HtmlControls.HtmlForm>控件在 Web 窗体页中，公共语言运行时将引发<xref:System.Web.HttpException?displayProperty=nameWithType>请求页时出现异常。 但是，你可以使用<xref:System.Web.UI.WebControls.MultiView>控制在何处每个<xref:System.Web.UI.WebControls.View>对象都包含一个<xref:System.Web.UI.HtmlControls.HtmlForm>管理，因为只有一个<xref:System.Web.UI.WebControls.View>任何给定时刻处于活动状态。  
  
 您可以控制的行为<xref:System.Web.UI.HtmlControls.HtmlForm>通过设置其属性的控件。 若要指定窗体的数据的编码类型，设置<xref:System.Web.UI.HtmlControls.HtmlForm.Enctype%2A>属性。 方法 (`GET`或`POST`)，浏览器使用窗体将数据发布到服务器的通过将设置指定处理<xref:System.Web.UI.HtmlControls.HtmlForm.Method%2A>属性。  
  
> [!CAUTION]
>  默认情况下，<xref:System.Web.UI.HtmlControls.HtmlForm.Method%2A> 属性设置为 `POST`。 你可以修改此属性的值`GET`，但这可能中断内置的状态和回发由 ASP.NET 页面框架提供的服务。  
  
 你可以配置这些控件可实现<xref:System.Web.UI.WebControls.IButtonControl>接口为发送到不同的目标页。 这被称为跨页发送。 有关详细信息，请参阅[跨页发布 ASP.NET Web 窗体中](http://msdn.microsoft.com/library/fedf234e-b7c4-4644-a9e8-c1c0870b043b)。  
  
 有关的实例的初始属性值的列表<xref:System.Web.UI.HtmlControls.HtmlForm>，请参阅<xref:System.Web.UI.HtmlControls.HtmlForm.%23ctor%2A>构造函数。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlControls.HtmlForm>类来创建简单的表单。  
  
 [!code-aspx-csharp[HtmlForm#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlForm/CS/htmlformcs.aspx#1)]
 [!code-aspx-vb[HtmlForm#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlForm/VB/htmlformvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.HtmlControls.HtmlContainerControl" />
    <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.Enctype" />
    <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.Method" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlForm ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlForm.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HtmlForm();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此构造函数来创建和初始化的新实例<xref:System.Web.UI.HtmlControls.HtmlForm>类。  
  
 下表显示的实例的初始属性值<xref:System.Web.UI.HtmlControls.HtmlForm>。  
  
|Property|初始值|  
|--------------|-------------------|  
|<xref:System.Web.UI.HtmlControls.HtmlControl.TagName%2A>|"窗体"文字字符串。|  
  
   
  
## Examples  
 下面的代码示例演示如何创建的新实例<xref:System.Web.UI.HtmlControls.HtmlForm>控件并将它放置在网页上。  
  
 [!code-aspx-csharp[HtmlFormCtor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlFormCtor/CS/htmlformctorcs.aspx#1)]
 [!code-aspx-vb[HtmlFormCtor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlFormCtor/VB/htmlformctorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlControl.TagName" />
      </Docs>
    </Member>
    <Member MemberName="Action">
      <MemberSignature Language="C#" Value="public string Action { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Action" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.Action" />
      <MemberSignature Language="VB.NET" Value="Public Property Action As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Action { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 HTML 表单的 action 属性。</summary>
        <value>HTML 表单的 action 属性。 默认值为 <see cref="F:System.String.Empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你使用<xref:System.Web.UI.HtmlControls.HtmlForm.Action%2A>属性时重写原始请求的 URL，但你想要保留的 HTML 窗体的操作属性的原始 URL。 设置<xref:System.Web.UI.HtmlControls.HtmlForm.Action%2A>属性设置为你想要保留的 URL 的值。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.HttpContext.RewritePath(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ClientID">
      <MemberSignature Language="C#" Value="public override string ClientID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClientID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.ClientID" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ClientID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ClientID { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] 为 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> 控件生成的控件标识符</summary>
        <value>由生成的控件标识符[!INCLUDE[vstecasp](~/includes/vstecasp-md.md)]为<see cref="T:System.Web.UI.HtmlControls.HtmlForm" />控件。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要防止命名冲突时呈现控件的多个实例，[!INCLUDE[vstecasp](~/includes/vstecasp-md.md)]自动生成一个唯一<xref:System.Web.UI.HtmlControls.HtmlForm.ClientID%2A>页上的每个控件的值。 有关更多信息，请参见 <xref:System.Web.UI.Control.ClientID%2A?displayProperty=nameWithType> 属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateControlCollection">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.ControlCollection CreateControlCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.ControlCollection CreateControlCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlForm.CreateControlCollection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateControlCollection () As ControlCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::ControlCollection ^ CreateControlCollection();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.ControlCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>为 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> 控件创建一个新的 <see cref="T:System.Web.UI.ControlCollection" /> 集合。</summary>
        <returns>包含 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> 控件的子服务器控件的 <see cref="T:System.Web.UI.ControlCollection" />。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.UI.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="DefaultButton">
      <MemberSignature Language="C#" Value="public string DefaultButton { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultButton" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.DefaultButton" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultButton As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DefaultButton { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置按 Enter 键时会引起回发的 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> 控件的子控件。</summary>
        <value>在加载 <see cref="P:System.Web.UI.Control.ID" /> 后要显示为默认按钮的按钮控件的 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" />。 默认值为空字符串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultButton%2A>属性，允许您指定用户可以通过形式 （例如文本框） 的输入控件中按 ENTER 导致回发。 你可以为默认按钮中指定派生自任何控件<xref:System.Web.UI.WebControls.IButtonControl>接口除<xref:System.Web.UI.WebControls.LinkButton>控件。 如果被引用的控件<xref:System.Web.UI.HtmlControls.HtmlForm.DefaultButton%2A>属性不是派生自<xref:System.Web.UI.WebControls.IButtonControl>、<xref:System.InvalidOperationException>引发异常。  
  
 如果你正在使用母版页并且你设置<xref:System.Web.UI.HtmlControls.HtmlForm.DefaultButton%2A>属性从内容页中，使用<xref:System.Web.UI.Control.UniqueID%2A>属性<xref:System.Web.UI.WebControls.IButtonControl>按钮。 有关为母版页的详细信息，请参阅[ASP.NET 母版页](http://msdn.microsoft.com/library/4e53eedf-8304-4e7a-aed1-691a2623b28b)。  
  
 <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultButton%2A>属性可能会不导致回发以下方案：  
  
-   当焦点位于外部表单中输入的控件，并按 enter 键。 不能保证默认回发操作触发。  
  
-   当焦点位于多行文本框内，并按 enter 键。 在多行文本框中，预期的行为是，并按 enter 键在文本框中创建一个新行。 在某些浏览器，并按 enter 键多行文本框触发器内部回发。 在这种情况下，如果你想输入以改为创建一个新行，你可以附加到的输入控件的 JavaScript 函数。 该脚本应捕获 ENTER 键，并停止回发。 例如，你可以使用<xref:System.Web.UI.WebControls.WebControl.Attributes%2A>要添加的客户端脚本的属性集合`onKeyPress`事件。  
  
-   指定<xref:System.Web.UI.WebControls.LinkButton>为默认按钮的控件。 仅<xref:System.Web.UI.WebControls.Button>和<xref:System.Web.UI.WebControls.ImageButton>控件都受支持。  
  
-   更改<xref:System.Web.UI.HtmlControls.HtmlForm.DefaultButton%2A>以编程方式在异步回发期间的属性。 可以通过添加一个或多个页面上启用异步回发<xref:System.Web.UI.UpdatePanel>到页面的控件。 有关详细信息，请参阅[UpdatePanel 控件概述](http://msdn.microsoft.com/library/29a2265d-9674-4c19-b70e-e5560ee9689a)和[局部页面呈现概述](http://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49)。  
  
   
  
## Examples  
 下面的示例演示如何设置<xref:System.Web.UI.HtmlControls.HtmlForm.DefaultButton%2A>属性来设置导致回发的默认控件。  
  
 [!code-aspx-csharp[HtmlForm.DefaultButton#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlForm.DefaultButton/CS/htmlform.defaultbuttoncs.aspx#1)]
 [!code-aspx-vb[HtmlForm.DefaultButton#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlForm.DefaultButton/VB/htmlform.defaultbuttonvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">作为默认按钮引用的控件的类型不是 <see cref="T:System.Web.UI.WebControls.IButtonControl" />。</exception>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus" />
        <altmember cref="P:System.Web.UI.Control.ID" />
        <altmember cref="M:System.Web.UI.HtmlControls.HtmlForm.RenderAttributes(System.Web.UI.HtmlTextWriter)" />
        <altmember cref="T:System.Web.UI.WebControls.IButtonControl" />
      </Docs>
    </Member>
    <Member MemberName="DefaultFocus">
      <MemberSignature Language="C#" Value="public string DefaultFocus { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultFocus" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultFocus As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DefaultFocus { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置窗体上的控件，该控件要在加载 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> 控件后显示为具有输入焦点的控件。</summary>
        <value>窗体上的控件的 <see cref="P:System.Web.UI.Control.ClientID" />，该控件要在加载 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> 后显示为具有输入焦点的控件。 默认值为空字符串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus%2A>属性来访问要显示为具有输入控件的窗体上的控件时焦点<xref:System.Web.UI.HtmlControls.HtmlForm>加载控件。 可以选择的控件显示时带有一个视觉提示，该值指示它们具有焦点。 例如，<xref:System.Web.UI.WebControls.TextBox>具有焦点的控件均显示有定位在其内部的插入点。  
  
 此外可以使用设置具有焦点的控件<xref:System.Web.UI.Control.Focus%2A>或<xref:System.Web.UI.Page.SetFocus%2A>方法。 这些方法通过具有优先级<xref:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus%2A>属性。 如果在调用这些方法之一来设置与控件的焦点的值<xref:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus%2A>忽略属性。  
  
   
  
## Examples  
 下面的代码示例演示如何设置<xref:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus%2A>属性指定的控件在窗体上显示为具有输入焦点的控件，在窗体加载时。 当`Form1`呈现，请注意，插入点位于中`TextBox1`，以指示，`TextBox1`是具有焦点的控件。  
  
 [!code-aspx-csharp[HtmlForm.DefaultButton#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlForm.DefaultButton/CS/htmlform.defaultbuttoncs.aspx#1)]
 [!code-aspx-vb[HtmlForm.DefaultButton#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlForm.DefaultButton/VB/htmlform.defaultbuttonvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.DefaultButton" />
        <altmember cref="P:System.Web.UI.Control.ID" />
        <altmember cref="M:System.Web.UI.Control.Focus" />
        <altmember cref="M:System.Web.UI.Page.SetFocus(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="Enctype">
      <MemberSignature Language="C#" Value="public string Enctype { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Enctype" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.Enctype" />
      <MemberSignature Language="VB.NET" Value="Public Property Enctype As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Enctype { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置将窗体的数据发送到服务器时浏览器使用的编码类型。</summary>
        <value>字符串，它包含编码类型。 默认值为空字符串 ("")，指示使用浏览器的默认内容类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.HtmlControls.HtmlForm.Enctype%2A>属性指定的编码类型浏览器用于将数据发回服务器。  
  
 下表显示了常见的编码类型。  
  
|编码类型|描述|  
|-------------------|-----------------|  
|application/x-www-form-urlencoded|窗体数据被编码为名称/值对。 这是标准的编码格式。|  
|multipart/form-data|窗体数据被编码为页面上的每个控件的单独部分的消息。|  
|文本/无格式|窗体的数据被编码以纯文本，而无需任何控件或格式字符。|  
  
 编码类型的详细信息，请参阅[World Wide Web Consortium (W3C 网站](http://go.microsoft.com/fwlink/?linkid=37125)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlControls.HtmlForm.Enctype%2A>属性指定的编码类型浏览器用于将数据发送回服务器。  
  
 [!code-aspx-csharp[HtmlForm#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlForm/CS/htmlformcs.aspx#1)]
 [!code-aspx-vb[HtmlForm#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlForm/VB/htmlformvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.Method" />
      </Docs>
    </Member>
    <Member MemberName="Method">
      <MemberSignature Language="C#" Value="public string Method { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Method" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.Method" />
      <MemberSignature Language="VB.NET" Value="Public Property Method As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Method { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示浏览器将窗体数据发送到服务器进行处理的方式。</summary>
        <value>字符串，它指示浏览器向服务器发送窗体数据的方式。 默认值为 <see langword="POST" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性用于指定如何浏览器将窗体数据发送到服务器进行处理。 所有浏览器支持两个常见方法是`GET`和`POST`。  
  
> [!CAUTION]
>  你可以重写此属性和使用的默认值`GET`方法而不是`POST`。 但是，因为`GET`请求是有限的数据量中它们可以包括，使用`GET`方法可能在某些情况下，会导致由 ASP.NET 页面框架提供的回发和状态管理功能失败。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlControls.HtmlForm.Method%2A>属性指定，将窗体数据发回服务器。  
  
 [!code-aspx-csharp[HtmlForm#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlForm/CS/htmlformcs.aspx#1)]
 [!code-aspx-vb[HtmlForm#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlForm/VB/htmlformvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.Enctype" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> 控件的标识符名称。</summary>
        <value>包含 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> 的标识符名称的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.HtmlControls.HtmlForm.Name%2A>属性来确定的唯一标识符名称<xref:System.Web.UI.HtmlControls.HtmlForm>控件。 在此实现中，获取此属性返回的值<xref:System.Web.UI.HtmlControls.HtmlForm.UniqueID%2A>属性。 但是，将属性设置不会分配一个值的属性。 将属性设置不会分配一个值给此属性因为<xref:System.Web.UI.HtmlControls.HtmlForm.Name%2A>属性必须具有相同的值<xref:System.Web.UI.HtmlControls.HtmlForm.UniqueID%2A>属性。  
  
> [!NOTE]
>  `name`属性不是一个符合 XHTML 的属性且不会将其呈现而不考虑 asp.net`xhtmlConformance`设置。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.UniqueID" />
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlForm.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>为 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> 控件引发 <see cref="E:System.Web.UI.Control.Init" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当收到通知时<xref:System.Web.UI.HtmlControls.HtmlForm.OnInit%2A>方法，Web 服务器控件必须执行任何所需创建并设置实例的初始化步骤。 在此阶段的服务器控件的生命周期中，控件的视图状态尚未填充。 此外，当调用此方法时，无论是否的子级或父级到该控件不能访问其他服务器控件。 不保证其他服务器控件都可创建并准备好进行访问。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Web.UI.WebControls.GridView.OnInit%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 <xref:System.Web.UI.HtmlControls.HtmlForm.OnInit%2A>主要由控件开发人员扩展功能的使用方法<xref:System.Web.UI.HtmlControls.HtmlForm>控件。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Web.UI.HtmlControls.HtmlForm.OnInit(System.EventArgs)" />方法在派生类中，一定要调用基类的<see cref="M:System.Web.UI.HtmlControls.HtmlForm.OnInit(System.EventArgs)" />方法，以便已注册的委托对事件进行接收。 此外，调用基类的<see cref="M:System.Web.UI.HtmlControls.HtmlForm.OnInit(System.EventArgs)" />方法可确保<see cref="T:System.Web.UI.HtmlControls.HtmlForm" />控件正确设置为网页窗体和页面的视图状态保持不变。</para>
        </block>
        <altmember cref="M:System.Web.UI.Page.RegisterViewStateHandler" />
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected internal override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlForm.OnPreRender(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnPreRender (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnPreRender(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
        <summary>为 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> 控件引发 <see cref="E:System.Web.UI.Control.PreRender" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlControls.HtmlForm.OnPreRender%2A>正好在呈现之前调用方法<xref:System.Web.UI.HtmlControls.HtmlForm>控件。 如果<xref:System.Web.UI.Page.SmartNavigation%2A?displayProperty=nameWithType>属性设置为`true`、<xref:System.Web.UI.HtmlControls.HtmlForm.OnPreRender%2A>方法注册智能导航脚本文件引用，以使其获取呈现。  
  
> [!NOTE]
>  <xref:System.Web.UI.Page.SmartNavigation%2A?displayProperty=nameWithType>属性已弃用 ASP.NET 2.0 版中。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Page.SmartNavigation" />
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected internal override void Render (System.Web.UI.HtmlTextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlForm.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub Render (output As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void Render(System::Web::UI::HtmlTextWriter ^ output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="output">接收呈现内容的 <see cref="T:System.Web.UI.HtmlTextWriter" />。</param>
        <summary>将 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> 控件呈现给指定的 <see cref="T:System.Web.UI.HtmlTextWriter" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlControls.HtmlForm.Render%2A>方法上呈现 HTML`<iframe>`元素如果<xref:System.Web.UI.Page.SmartNavigation%2A>属性设置为`true`。 <xref:System.Web.UI.HtmlControls.HtmlForm.Render%2A>方法调用了基<xref:System.Web.UI.Control.Render%2A>方法。  
  
 <xref:System.Web.UI.HtmlControls.HtmlForm.Render%2A>主要由控件开发人员扩展功能的使用方法<xref:System.Web.UI.HtmlControls.HtmlForm>控件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">只在引用 <see cref="T:System.Web.UI.Page" /> 实例的情况下才呈现 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> 控件。</exception>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Web.UI.HtmlControls.HtmlForm.Render(System.Web.UI.HtmlTextWriter)" />方法在派生类中，一定要调用基类的<see cref="M:System.Web.UI.HtmlControls.HtmlForm.Render(System.Web.UI.HtmlTextWriter)" />方法，以便<see cref="T:System.Web.UI.HtmlControls.HtmlForm" />正确呈现控件的子控件。</para>
        </block>
        <altmember cref="T:System.Web.HttpException" />
        <altmember cref="P:System.Web.UI.Page.SmartNavigation" />
        <altmember cref="M:System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)" />
      </Docs>
    </Member>
    <Member MemberName="RenderAttributes">
      <MemberSignature Language="C#" Value="protected override void RenderAttributes (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RenderAttributes(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlForm.RenderAttributes(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RenderAttributes (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RenderAttributes(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">接收呈现内容的 <see cref="T:System.Web.UI.HtmlTextWriter" />。</param>
        <summary>将 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> 控件的属性呈现到指定的 <see cref="T:System.Web.UI.HtmlTextWriter" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlControls.HtmlForm.RenderAttributes%2A>方法使用<xref:System.Web.UI.HtmlTextWriter.IsValidFormAttribute%2A>方法来检查<xref:System.Web.UI.HtmlControls.HtmlForm>控件的属性，以确保它们可以开始标记中呈现`<form>`HTML 元素。  
  
 此外，<xref:System.Web.UI.HtmlControls.HtmlForm.RenderAttributes%2A>方法呈现`method`， `action`，和`onsubmit`属性<xref:System.Web.UI.HtmlControls.HtmlForm>控件。 如果在中设置的控件 ID<xref:System.Web.UI.HtmlControls.HtmlForm.DefaultButton%2A>属性不实现<xref:System.Web.UI.WebControls.IButtonControl>接口，<xref:System.InvalidOperationException>引发异常。  
  
 <xref:System.Web.UI.HtmlControls.HtmlForm.RenderAttributes%2A>主要由控件开发人员扩展功能的使用方法<xref:System.Web.UI.HtmlControls.HtmlForm>控件。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在 <see cref="P:System.Web.UI.HtmlControls.HtmlForm.DefaultButton" /> 属性中设置的控件 ID 类型不是 <see cref="T:System.Web.UI.WebControls.IButtonControl" />。</exception>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Web.UI.HtmlControls.HtmlForm.RenderAttributes(System.Web.UI.HtmlTextWriter)" />方法在派生类中，一定要调用基类的<see cref="M:System.Web.UI.HtmlControls.HtmlForm.RenderAttributes(System.Web.UI.HtmlTextWriter)" />方法，以便<see cref="T:System.Web.UI.HtmlControls.HtmlForm" />正确呈现控件的属性。</para>
        </block>
        <altmember cref="M:System.Web.UI.HtmlControls.HtmlControl.RenderAttributes(System.Web.UI.HtmlTextWriter)" />
        <altmember cref="M:System.Web.UI.HtmlTextWriter.IsValidFormAttribute(System.String)" />
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.DefaultButton" />
        <altmember cref="T:System.Web.UI.WebControls.IButtonControl" />
        <altmember cref="T:System.InvalidOperationException" />
      </Docs>
    </Member>
    <Member MemberName="RenderChildren">
      <MemberSignature Language="C#" Value="protected internal override void RenderChildren (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void RenderChildren(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlForm.RenderChildren(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub RenderChildren (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void RenderChildren(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">接收呈现内容的 <see cref="T:System.Web.UI.HtmlTextWriter" />。</param>
        <summary>呈现 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> 控件的子控件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlControls.HtmlForm.RenderChildren%2A>方法呈现客户端脚本，以确保浏览器焦点设置到中指定的控件<xref:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus%2A>属性。  
  
> [!NOTE]
>  指定控件<xref:System.Web.UI.Page.SetFocus%2A?displayProperty=nameWithType>属性优先于指定控件<xref:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus%2A>属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">网页有多个服务器端 <see langword="&lt;form&gt;" /> 标记。</exception>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Web.UI.HtmlControls.HtmlForm.RenderChildren(System.Web.UI.HtmlTextWriter)" />方法在派生类中，一定要调用基类的<see cref="M:System.Web.UI.HtmlControls.HtmlForm.RenderChildren(System.Web.UI.HtmlTextWriter)" />方法，以便<see cref="T:System.Web.UI.HtmlControls.HtmlForm" />正确呈现控件的子控件。</para>
        </block>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.DefaultFocus" />
        <altmember cref="M:System.Web.UI.Page.SetFocus(System.Web.UI.Control)" />
        <altmember cref="M:System.Web.UI.Control.Focus" />
      </Docs>
    </Member>
    <Member MemberName="RenderControl">
      <MemberSignature Language="C#" Value="public override void RenderControl (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RenderControl(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlForm.RenderControl(System.Web.UI.HtmlTextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub RenderControl (writer As HtmlTextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void RenderControl(System::Web::UI::HtmlTextWriter ^ writer);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">接收窗体控件内容的 <see cref="T:System.Web.UI.HtmlTextWriter" />。</param>
        <summary>将 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> 控件呈现给指定的 <see cref="T:System.Web.UI.HtmlTextWriter" /> 对象。</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Web.UI.HtmlControls.HtmlForm.RenderControl(System.Web.UI.HtmlTextWriter)" />方法在派生类中，一定要调用基类的<see cref="M:System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter)" />方法，以便<see cref="T:System.Web.UI.HtmlControls.HtmlForm" />正确呈现控件。</para>
        </block>
        <altmember cref="P:System.Web.UI.Control.DesignMode" />
        <altmember cref="T:System.Web.UI.HtmlTextWriter" />
      </Docs>
    </Member>
    <Member MemberName="SubmitDisabledControls">
      <MemberSignature Language="C#" Value="public virtual bool SubmitDisabledControls { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SubmitDisabledControls" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.SubmitDisabledControls" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SubmitDisabledControls As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool SubmitDisabledControls { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个布尔值，指示是否强制客户端上被禁用的控件提交它们的值，以在页回发到服务器后允许这些控件保留它们的值。</summary>
        <value>
          如果强制客户端上被禁用的控件提交它们的值，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.HtmlControls.HtmlForm.SubmitDisabledControls%2A>属性指定是否强制客户端在页回发时提交它们的值上被禁用的控件。 这样，被禁用的控件在页发回发到服务器后保留它们的值。 当<xref:System.Web.UI.HtmlControls.HtmlForm.SubmitDisabledControls%2A>属性设置为`false`，使用客户端脚本已禁用表单上的控件将不会提交到服务器下次在页回发。 因此，存储由已禁用控件的任何值都将丢失。 若要允许被禁用的控件在页发回发到服务器后保留它们的值，设置<xref:System.Web.UI.HtmlControls.HtmlForm.SubmitDisabledControls%2A>属性`true`。  
  
   
  
## Examples  
 下面的代码示例演示如何设置<xref:System.Web.UI.HtmlControls.HtmlForm.SubmitDisabledControls%2A>到窗体上的属性`true`导致禁用了客户端脚本可以在页发回发到服务器后会保留其值的控件。 在此示例中，如果你设置<xref:System.Web.UI.HtmlControls.HtmlForm.SubmitDisabledControls%2A>属性`false`，然后单击**发送回**按钮，在 HTML 文本框中的文本将丢失，并且无法再选择 HTML 复选框。  
  
 [!code-aspx-csharp[HtmlForm.SubmitDisabledControls#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlForm.SubmitDisabledControls/CS/htmlform.submitdisabledcontrolscs.aspx#1)]
 [!code-aspx-vb[HtmlForm.SubmitDisabledControls#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlForm.SubmitDisabledControls/VB/htmlform.submitdisabledcontrolsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public string Target { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Target" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.Target" />
      <MemberSignature Language="VB.NET" Value="Public Property Target As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Target { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置框架或窗口以呈现发送到服务器的信息结果。</summary>
        <value>显示发送到服务器的信息结果的浏览器窗口或框架。 默认值为空字符串 ("")，这会刷新具有焦点的窗口或框架。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.HtmlControls.HtmlForm.Target%2A>属性指定的目标窗口或框架，显示发布的信息的结果到服务器。 重定向的发布到服务器的结果是信息的一项高级的任务。 不建议使用此属性只是为了回发。  
  
> [!NOTE]
>  <xref:System.Web.UI.HtmlControls.HtmlForm.Target%2A>属性呈现为`target`属性。 `target`属性`form`XHTML 1.1 中不允许的元素。 因此，如果呈现的标记必须符合 XHTML 标准，或者必须符合辅助功能标准，则不要设置<xref:System.Web.UI.HtmlControls.HtmlForm.Target%2A>属性。 有关详细信息，请参阅[在 Visual Studio 和 ASP.NET 的 XHTML 标准](http://msdn.microsoft.com/library/1b78d416-66bb-43a5-ac77-c703aab55b97)和[Visual Studio 和 ASP.NET 中的辅助功能](http://msdn.microsoft.com/library/7e3ce9c4-6b7d-4fb1-94b5-72cf2a44fe13)。  
  
 <xref:System.Web.UI.HtmlControls.HtmlForm.Target%2A>值必须以字母 a 到 Z （区分大小写），除了下列特殊值，其中以下划线开头范围的开头。  
  
|目标值|描述|  
|------------------|-----------------|  
|`_blank`|将内容呈现在一个没有框架的新窗口中。|  
|`_parent`|将内容呈现在上一个框架集父级中。|  
|`_search`|在搜索窗格中呈现内容。|  
|`_self`|将内容呈现在含焦点的框架中。|  
|`_top`|将内容呈现在没有框架的全窗口中。|  
  
> [!NOTE]
>  请查看浏览器文档，确定是否支持 `_search` 值。  例如，Microsoft Internet Explorer 5.0 及更高版本支持 `_search` 目标值。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlControls.HtmlForm.Target%2A>属性指定在新的未划分框架的窗口中显示的信息的结果回发到服务器。  
  
 [!code-aspx-csharp[HtmlFormTarget#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlFormTarget/CS/htmlformtargetcs.aspx#1)]
 [!code-aspx-vb[HtmlFormTarget#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlFormTarget/VB/htmlformtargetvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UniqueID">
      <MemberSignature Language="C#" Value="public override string UniqueID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UniqueID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlForm.UniqueID" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property UniqueID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ UniqueID { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取分配给 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> 控件的唯一编程标识符。</summary>
        <value>分配给 <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> 控件的唯一编程标识符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Web.UI.HtmlControls.HtmlForm.UniqueID%2A>属性来获取分配给的唯一编程标识符<xref:System.Web.UI.HtmlControls.HtmlForm>控件。 此属性重写基实现来返回一个常量值时控件包含在<xref:System.Web.UI.INamingContainer>-实现除页，如自定义服务器控件的对象。 如果命名的容器是一个页，的值<xref:System.Web.UI.HtmlControls.HtmlForm>控件的<xref:System.Web.UI.Control.ID%2A>返回属性。  
  
 <xref:System.Web.UI.HtmlControls.HtmlForm.UniqueID%2A>属性和<xref:System.Web.UI.HtmlControls.HtmlForm.Name%2A>属性始终返回相同的值。 这非常有用<xref:System.Web.UI.HtmlControls.HtmlForm>控件是否呈现在浏览器需要<xref:System.Web.UI.HtmlControls.HtmlForm>控件的<xref:System.Web.UI.HtmlControls.HtmlForm.UniqueID%2A>和<xref:System.Web.UI.HtmlControls.HtmlForm.Name%2A>属性相同。 若要保持同步，这些属性<xref:System.Web.UI.HtmlControls.HtmlForm.Name%2A>属性始终返回的值<xref:System.Web.UI.HtmlControls.HtmlForm.UniqueID%2A>属性。  
  
> [!NOTE]
>  `name`属性不是符合 XHTML 的属性，默认情况下不会呈现 asp.net。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Web.UI.HtmlControls.HtmlForm.UniqueID%2A>要检索的唯一标识符属性<xref:System.Web.UI.HtmlControls.HtmlForm>控件。  
  
 [!code-aspx-csharp[HtmlForm.UniqueID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlForm.UniqueID/CS/htmlform.uniqueidcs.aspx#1)]
 [!code-aspx-vb[HtmlForm.UniqueID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlForm.UniqueID/VB/htmlform.uniqueidvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.HtmlControls.HtmlForm.Name" />
      </Docs>
    </Member>
  </Members>
</Type>