<Type Name="EventHandlerService" FullName="System.Windows.Forms.Design.EventHandlerService">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f6f3d74a53f6d95724b1bcdb80e4c00dfb59d7fa" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30627771" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class EventHandlerService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EventHandlerService extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Design.EventHandlerService" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EventHandlerService" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventHandlerService sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="64e87-101">为当前文档提供管理事件处理程序的系统方法。</span>
      <span class="sxs-lookup">
        <span data-stu-id="64e87-101">Provides a systematic way to manage event handlers for the current document.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64e87-102">开发人员可能想要能够在处理事件的特定类型的一个位置中编写代码。</span><span class="sxs-lookup"><span data-stu-id="64e87-102">Developers may want to be able to write code in one place that handles events of a certain type.</span></span>  
  
 <span data-ttu-id="64e87-103">此外，开发人员可能需要全局更改特定事件或类型的可能分布在设计器组件的事件处理程序的行为。</span><span class="sxs-lookup"><span data-stu-id="64e87-103">Also, developers may need to globally change the behavior of the handlers for specific events or types of events, which may be distributed among designer components.</span></span>  
  
 <span data-ttu-id="64e87-104">典型的项目的设计器是许多不同的对象，因此它可用于列出并存储对这些事件中的一个常见位置引用。</span><span class="sxs-lookup"><span data-stu-id="64e87-104">The designers for a typical project are many different objects so it can be useful to list and store reference to these events from a common place.</span></span>  
  
 <span data-ttu-id="64e87-105">此服务实现"事件堆栈"包含的事件处理程序当前集。</span><span class="sxs-lookup"><span data-stu-id="64e87-105">This service implements an "event stack" that contains the current set of event handlers.</span></span> <span data-ttu-id="64e87-106">堆栈可能会带来各种不同类型的处理程序堆栈。</span><span class="sxs-lookup"><span data-stu-id="64e87-106">The stack may have a variety of different types of handlers on the stack.</span></span>  
  
 <span data-ttu-id="64e87-107">例如，设计器可能推送，或添加、 键盘处理程序和到堆栈上的鼠标处理。</span><span class="sxs-lookup"><span data-stu-id="64e87-107">For example, a designer might push, or add, a keyboard handler and a mouse handler onto the stack.</span></span> <span data-ttu-id="64e87-108">当设计器请求事件处理程序时，则服务将您请求的类匹配的堆栈上找到的最顶层的处理程序。</span><span class="sxs-lookup"><span data-stu-id="64e87-108">When a designer requests an event handler, the service will find the topmost handler on the stack that matches the class you requested.</span></span>  
  
 <span data-ttu-id="64e87-109">服务可以扩展到任何事件处理方案，这种方式，它还允许特定类型的事件处理程序要替换。</span><span class="sxs-lookup"><span data-stu-id="64e87-109">This way the service can be extended to any eventing scheme, and it also allows specific types of event handlers to be replaced.</span></span> <span data-ttu-id="64e87-110">例如，你可以替换鼠标事件处理程序，而不会影响菜单事件处理程序或键盘事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="64e87-110">For example, you can replace mouse event handlers without affecting menu event handlers or keyboard event handlers.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventHandlerService (System.Windows.Forms.Control focusWnd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.Control focusWnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.EventHandlerService.#ctor(System.Windows.Forms.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (focusWnd As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventHandlerService(System::Windows::Forms::Control ^ focusWnd);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="focusWnd" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="focusWnd">
          <span data-ttu-id="64e87-111">正在设计的 <see cref="T:System.Windows.Forms.Control" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="64e87-111">The <see cref="T:System.Windows.Forms.Control" /> which is being designed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="64e87-112">初始化 <see cref="T:System.Windows.Forms.Design.EventHandlerService" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="64e87-112">Initializes a new instance of the <see cref="T:System.Windows.Forms.Design.EventHandlerService" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventHandlerChanged">
      <MemberSignature Language="C#" Value="public event EventHandler EventHandlerChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler EventHandlerChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Design.EventHandlerService.EventHandlerChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event EventHandlerChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ EventHandlerChanged;" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Windows.Forms.Design.IEventHandlerService.EventHandlerChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="64e87-113">触发 OnEventHandlerChanged 事件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="64e87-113">Fires an OnEventHandlerChanged event.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusWindow">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control FocusWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control FocusWindow" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Design.EventHandlerService.FocusWindow" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FocusWindow As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ FocusWindow { System::Windows::Forms::Control ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.Design.IEventHandlerService.FocusWindow</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="64e87-114">获取附加了事件处理程序的控件。</span>
          <span class="sxs-lookup">
            <span data-stu-id="64e87-114">Gets the control to which event handlers are attached.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="64e87-115">通过构造函数附加的 <see cref="T:System.Windows.Forms.Control" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="64e87-115">The <see cref="T:System.Windows.Forms.Control" /> which was attached through the constructor.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHandler">
      <MemberSignature Language="C#" Value="public object GetHandler (Type handlerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetHandler(class System.Type handlerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.EventHandlerService.GetHandler(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHandler (handlerType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetHandler(Type ^ handlerType);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.Design.IEventHandlerService.GetHandler(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handlerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="handlerType">
          <span data-ttu-id="64e87-116">要获取的处理程序的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="64e87-116">The type of the handler to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="64e87-117">获取具有指定类型的当前活动事件处理程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="64e87-117">Gets the currently active event handler of the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="64e87-118">处理程序的实例，或者 <see langword="null" />（如果没有请求类型的处理程序）。</span>
          <span class="sxs-lookup">
            <span data-stu-id="64e87-118">An instance of the handler, or <see langword="null" /> if there is no handler of the requested type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64e87-119">因为其他组件可以自由地对其进行更改，你应该永远不会缓存此值。</span><span class="sxs-lookup"><span data-stu-id="64e87-119">You should never cache this value because other components are free to change it.</span></span> <span data-ttu-id="64e87-120">此调用速度相当快，但是，尤其是对于情况下当则始终要求为相同类型的处理程序。</span><span class="sxs-lookup"><span data-stu-id="64e87-120">This call is fairly quick, however, especially for cases when you are always asking for the same type of handler.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PopHandler">
      <MemberSignature Language="C#" Value="public void PopHandler (object handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PopHandler(object handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.EventHandlerService.PopHandler(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PopHandler (handler As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void PopHandler(System::Object ^ handler);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.Design.IEventHandlerService.PopHandler(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="handler">
          <span data-ttu-id="64e87-121">要从堆栈移除的处理程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="64e87-121">The handler to remove from the stack.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="64e87-122">从堆栈中弹出给定处理程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="64e87-122">Pops the given handler off of the stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64e87-123">如果处理程序不是堆栈上的最顶层组件，这将会弹出所有达的处理程序和包括的处理程序。</span><span class="sxs-lookup"><span data-stu-id="64e87-123">If the handler is not the topmost component on the stack, this will pop all handlers up to and including handler.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PushHandler">
      <MemberSignature Language="C#" Value="public void PushHandler (object handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PushHandler(object handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.EventHandlerService.PushHandler(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PushHandler (handler As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void PushHandler(System::Object ^ handler);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.Design.IEventHandlerService.PushHandler(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="handler">
          <span data-ttu-id="64e87-124">要添加到堆栈的处理程序。</span>
          <span class="sxs-lookup">
            <span data-stu-id="64e87-124">The handler to add to the stack.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="64e87-125">将一个新的事件处理程序推入堆栈。</span>
          <span class="sxs-lookup">
            <span data-stu-id="64e87-125">Pushes a new event handler on the stack.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64e87-126">此处理程序将可供请求兼容的处理程序类型的所有组件。</span><span class="sxs-lookup"><span data-stu-id="64e87-126">This handler will be used by all components that request a compatible handler type.</span></span> <span data-ttu-id="64e87-127">如果此处理程序不支持所请求的类型，将使用在堆栈上的下一步处理程序。</span><span class="sxs-lookup"><span data-stu-id="64e87-127">If this handler does not support the requested type, the next handler on the stack will be used.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>