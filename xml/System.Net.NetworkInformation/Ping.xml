<Type Name="Ping" FullName="System.Net.NetworkInformation.Ping">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9cc2d3585a2bec0e0b422897dae63082edcb0ba2" /><Meta Name="ms.sourcegitcommit" Value="b0551d7828f015124aca601dbb64bd913cc5067d" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="12/13/2018" /><Meta Name="ms.locfileid" Value="53334010" /></Metadata><TypeSignature Language="C#" Value="public class Ping : System.ComponentModel.Component, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Ping extends System.ComponentModel.Component implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.NetworkInformation.Ping" />
  <TypeSignature Language="VB.NET" Value="Public Class Ping&#xA;Inherits Component&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Ping : System::ComponentModel::Component, IDisposable" />
  <TypeSignature Language="F#" Value="type Ping = class&#xA;    inherit Component&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Ping</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.MonoTODO("IPv6 support is missing")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>允许应用程序确定是否可通过网络访问远程计算机。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 应用程序使用<xref:System.Net.NetworkInformation.Ping>类来检测是否可访问远程计算机。  
  
 网络拓扑可确定是否<xref:System.Net.NetworkInformation.Ping>可以成功地联系远程主机。 状态显示和配置的代理服务器、 网络地址转换 (NAT) 设备或防火墙可能会阻止<xref:System.Net.NetworkInformation.Ping>无法成功。 成功<xref:System.Net.NetworkInformation.Ping>仅指示远程主机可访问网络上; 不能保证更高的级别服务 （例如 Web 服务器上） 在远程主机上是否存在。  
  
 此类提供类似于 Ping.exe 命令行工具的功能。 <xref:System.Net.NetworkInformation.Ping.Send%2A>和<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法从该计算机将 Internet 控制消息协议 (ICMP) 回送请求消息发送到远程计算机并等待 ICMP 回送答复消息。 ICMP 消息的详细说明，请参阅 RFC 792 网址[ https://www.ietf.org ](https://www.ietf.org/)。  
  
 与使用以下类型<xref:System.Net.NetworkInformation.Ping>类，并在下方提供详细信息中所述。  
  
|**类型名称**|**说明**|  
|-------------------|---------------------|  
|<xref:System.Net.NetworkInformation.IPStatus>|定义状态代码，描述 ICMP 回送请求消息的结果。|  
|<xref:System.Net.NetworkInformation.PingOptions>|允许您配置，或控制请求数据包的次数的设置，才能被转发的检索 (<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>)，以及是否可能存在碎片 (<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> )。|  
|<xref:System.Net.NetworkInformation.PingReply>|包含 ICMP 回送请求结果。|  
|<xref:System.Net.NetworkInformation.PingException>|不可恢复的错误发生时引发。|  
|<xref:System.Net.NetworkInformation.PingCompletedEventArgs>|包含与关联的数据<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件，这并时引发<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用完成或被取消。|  
|<xref:System.Net.NetworkInformation.PingCompletedEventHandler>|提供回调方法的委托时调用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用完成或被取消。|  
  
 <xref:System.Net.NetworkInformation.Ping.Send%2A>并<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法返回在答复<xref:System.Net.NetworkInformation.PingReply>对象。 <xref:System.Net.NetworkInformation.PingReply.Status%2A?displayProperty=nameWithType>属性返回<xref:System.Net.NetworkInformation.IPStatus>值，以指示请求的结果。  
  
 在发送请求时，必须指定远程计算机。 您可以执行此操作通过提供主机名称字符串，字符串格式的 IP 地址或<xref:System.Net.IPAddress>对象。  
  
 此外可以指定任何以下类型的信息：  
  
-   若要与请求一起发送的数据。 指定`buffer`使你能够了解特定大小的数据包传送到和从远程主机和网络路径的最大传输单位所需的时间量。 (请参阅<xref:System.Net.NetworkInformation.Ping.Send%2A>或<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>重载采用`buffer`参数。)  
  
-   是否在传输过程中可能存在碎片 ICMP Echo 数据包。 (请参阅<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性和<xref:System.Net.NetworkInformation.Ping.Send%2A>或<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>重载采用`options`参数。)  
  
-   多少次如路由器或网关，在到达目标计算机或将被丢弃之前，可以转发数据包的路由节点。 (请参阅<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>并<xref:System.Net.NetworkInformation.Ping.Send%2A>或<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>重载采用`options`参数。)  
  
-   在必须在其中接收答复的时间限制。 (请参阅<xref:System.Net.NetworkInformation.Ping.Send%2A>或<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>重载采用`timeout`参数。  
  
 <xref:System.Net.NetworkInformation.Ping>类提供了用于发送请求的同步和异步方法。 如果你的应用程序应阻止等待回复时，请使用<xref:System.Net.NetworkInformation.Ping.Send%2A>方法; 这些方法是同步的。 如果你的应用程序不应阻止，则使用异步<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法。 调用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>在它自己从线程池自动分配的线程中执行。 异步操作完成后，它会发出<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 应用程序使用<xref:System.Net.NetworkInformation.PingCompletedEventHandler>指定为调用的方法的委托<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 必须添加<xref:System.Net.NetworkInformation.PingCompletedEventHandler>之前调用事件的委托<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>。 委托的方法接收<xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象，其中包含<xref:System.Net.NetworkInformation.PingReply>对象的结果进行说明的<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。  
  
 不能使用同一个实例<xref:System.Net.NetworkInformation.Ping>类生成多个同时进行的 ICMP 回送请求。 调用<xref:System.Net.NetworkInformation.Ping.Send%2A>虽然<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>正在进行或正在调用的呼叫<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>多次所有以前的调用已完成的原因之前<xref:System.InvalidOperationException>。  
  
   
  
## Examples  
 下面的代码示例演示了如何使用<xref:System.Net.NetworkInformation.Ping>类以同步方式。  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 下面的代码示例演示了如何使用<xref:System.Net.NetworkInformation.Ping>类以异步方式。  
  
 [!code-cpp[NCLPingASync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#1)]
 [!code-csharp[NCLPingASync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/network-programming/how-to-ping-a-host.md">如何：Ping 主机</related>
    <related type="Article" href="~/docs/framework/network-programming/index.md">.NET Framework 中的网络编程</related>
    <related type="Article" href="~/docs/framework/network-programming/network-programming-samples.md">网络编程示例</related>
    <related type="Article" href="~/docs/framework/network-programming/networkinformation.md">NetworkInformation</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Ping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Ping();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Net.NetworkInformation.Ping" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何创建<xref:System.Net.NetworkInformation.Ping>实例。 中提供了完整的示例<xref:System.Net.NetworkInformation.Ping>类概述。  
  
 [!code-cpp[NCLPingAsync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#2)]
 [!code-csharp[NCLPingAsync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="ping.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="ping.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">如果释放托管资源和非托管资源，则为 <see langword="true" />；如果仅释放非托管资源，则为 <see langword="false" />。</param>
        <summary>释放由 <see cref="T:System.Net.NetworkInformation.Ping" /> 对象使用的非托管资源，并可根据需要释放托管资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法由公共`Dispose()`方法和<xref:System.ComponentModel.Component.Finalize%2A>方法。 公众`Dispose()`方法调用受保护<xref:System.Net.NetworkInformation.Ping.Dispose%2A>方法替换`disposing`参数设置为`true`。 <xref:System.ComponentModel.Component.Finalize%2A> 调用`Dispose`与`disposing`设置为`false`。  
  
 当`disposing`参数是`true`，此方法释放任何托管对象所持有的所有资源，此<xref:System.Net.NetworkInformation.Ping>对象引用。 此方法调用每个引用对象的 `Dispose()` 方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPingCompleted">
      <MemberSignature Language="C#" Value="protected void OnPingCompleted (System.Net.NetworkInformation.PingCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnPingCompleted(class System.Net.NetworkInformation.PingCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnPingCompleted (e As PingCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnPingCompleted(System::Net::NetworkInformation::PingCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnPingCompleted : System.Net.NetworkInformation.PingCompletedEventArgs -&gt; unit" Usage="ping.OnPingCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.NetworkInformation.PingCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">包含事件数据的 <see cref="T:System.Net.NetworkInformation.PingCompletedEventArgs" /> 对象。</param>
        <summary>引发 <see cref="E:System.Net.NetworkInformation.Ping.PingCompleted" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 继承的类<xref:System.Net.NetworkInformation.Ping>类可以重写此方法以执行其他任务，例如日志记录中包含的数据`e`参数。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Net.NetworkInformation.Ping.OnPingCompleted%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>重写时<see cref="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" />在派生类中，请务必调用基类的<see cref="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" />方法，以便已注册的委托接收事件。</para></block>
      </Docs>
    </Member>
    <Member MemberName="PingCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.NetworkInformation.PingCompletedEventHandler PingCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.NetworkInformation.PingCompletedEventHandler PingCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.NetworkInformation.Ping.PingCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PingCompleted As PingCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::NetworkInformation::PingCompletedEventHandler ^ PingCompleted;" />
      <MemberSignature Language="F#" Value="member this.PingCompleted : System.Net.NetworkInformation.PingCompletedEventHandler " Usage="member this.PingCompleted : System.Net.NetworkInformation.PingCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当发送 Internet 控制消息协议 (ICMP) 回送消息并接收相应 ICMP 回送答复消息的异步操作完成或被取消时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 应用程序使用<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件，以获取信息的完成状态和数据收集的调用之一<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法。 <xref:System.Net.NetworkInformation.PingCompletedEventHandler>委托提供了在调用后的方法时调用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>引发此事件。  
  
   
  
## Examples  
 下面的代码示例演示如何指定回调方法，以<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 中提供了完整的示例<xref:System.Net.NetworkInformation.Ping>类概述。  
  
 [!code-cpp[NCLPingAsync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#2)]
 [!code-csharp[NCLPingAsync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>尝试将 Internet 控制消息协议 (ICMP) 回送消息发送到远程计算机并接收来自远程计算机的相应 ICMP 回送答复消息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 任何返回的 IP 地址<xref:System.Net.NetworkInformation.Ping.Send%2A>重载可以来源于恶意的远程计算机。 不要连接到远程计算机使用此。 使用 DNS 来确定你想要连接的计算机的 IP 地址。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="address">标识 ICMP 回送消息目标计算机的 <see cref="T:System.Net.IPAddress" />。</param>
        <summary>尝试将 Internet 控制消息协议 (ICMP) 回送消息发送到具有指定 <see cref="T:System.Net.IPAddress" /> 的计算机，并接收来自该计算机的相应 ICMP 回送答复消息。</summary>
        <returns><see cref="T:System.Net.NetworkInformation.PingReply" /> 对象。如果收到 ICMP 回送答复消息，此对象提供有关该消息的信息；如果没有收到 ICMP 回送答复消息，此对象将提供失败的原因。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将发送到指定的主机`address`32<xref:System.Byte>与 ICMP 回送消息的数据缓冲区。 该方法将等待五秒 ICMP 回送答复消息。 如果它不会在该时间内收到答复，该方法将返回与<xref:System.Net.NetworkInformation.PingReply.Status%2A>属性设置为<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
 此重载使用数据包分段和数据包转发的默认设置。 包含 ICMP 回送消息数据包可能存在碎片在传输过程中如果数据包总大小超过可以传输的最大数据包大小的本地和远程计算机之间的路由节点之一。 若要防止碎片，请使用之一<xref:System.Net.NetworkInformation.Ping.Send%2A>方法采用`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性设置为`true`。 当<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`和数据包总大小超过了可通过在本地和远程计算机之间的路由节点之一传播的最大数据包大小，ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。 数据包或数据包片段 （如果含有碎片） 可以转发由路由节点 128 次时被放弃。 若要更改此设置，请使用<xref:System.Net.NetworkInformation.Ping.Send%2A>采用重载`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>属性设置为所需的值。 如果数据包不会转发指定的次数后达到其目标，将丢弃数据包，ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 下面的代码示例演示如何调用此方法。  
  
 [!code-cpp[NCLPingSampler#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#3)]
 [!code-csharp[NCLPingSampler#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">对 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 的调用正在进行中。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> 是一个 IPv6 地址，并且本地计算机运行的操作系统的版本低于 Windows 2000。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。 请参见内部异常，以确切地了解所引发的异常。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放此对象。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要发送的 ICMP 回送消息。  
  
关联的枚举： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress);" />
      <MemberSignature Language="F#" Value="member this.Send : string -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send hostNameOrAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">一个 <see cref="T:System.String" />，它标识作为 ICMP 回送消息目标的计算机。 为此参数指定的值可以是主机名，也可以是以字符串形式表示的 IP 地址。</param>
        <summary>尝试向指定的计算机发送 Internet 控制消息协议 (ICMP) 回送消息，并从该计算机接收相应的 ICMP 回送答复消息。</summary>
        <returns>一个 <see cref="T:System.Net.NetworkInformation.PingReply" /> 对象。如果已收到 ICMP 回送应答消息，此对象将提供有关该消息的信息；如果没有收到 ICMP 回送应答消息，此对象将提供失败的原因。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将发送 32<xref:System.Byte>与 ICMP 回送消息的数据缓冲区。 该方法将等待五秒 ICMP 回送答复消息。 如果它不会在该时间内收到答复，该方法将返回与<xref:System.Net.NetworkInformation.PingReply.Status%2A>属性设置为<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
 此重载使用数据包分段和数据包转发的默认设置。 包含 ICMP 回送消息数据包可能存在碎片在传输过程中如果数据包总大小超过可以传输的最大数据包大小的本地和远程计算机之间的路由节点之一。 若要防止碎片，请使用之一<xref:System.Net.NetworkInformation.Ping.Send%2A>方法采用`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性设置为`true`。 当<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`和数据包总大小超过了可通过在本地和远程计算机之间的路由节点之一传播的最大数据包大小，ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。 数据包或数据包片段 （如果含有碎片） 可以转发由路由节点 128 次时被放弃。 若要更改此设置，请使用<xref:System.Net.NetworkInformation.Ping.Send%2A>采用重载`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>属性设置为所需的值。 如果数据包不会转发指定的次数后达到其目标，将丢弃数据包，ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 下面的代码示例演示如何调用此方法。  
  
 [!code-cpp[NCLPingSampler#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#2)]
 [!code-csharp[NCLPingSampler#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> 为 <see langword="null" /> 或是一个空字符串 ("")。</exception>
        <exception cref="T:System.InvalidOperationException">对 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 的调用正在进行中。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> 是一个 IPv6 地址，并且本地计算机运行的操作系统的版本低于 Windows 2000。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。 请参见内部异常，以确切地了解所引发的异常。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放此对象。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要发送的 ICMP 回送消息。 关联的枚举： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address">标识 ICMP 回送消息目标计算机的 <see cref="T:System.Net.IPAddress" />。</param>
        <param name="timeout">一个 <see cref="T:System.Int32" /> 值，指定（发送回送消息后）等待 ICMP 回送答复消息的最大毫秒数。</param>
        <summary>尝试将包含指定数据缓冲区的 Internet 控制消息协议 (ICMP) 回送消息发送到具有指定的 <see cref="T:System.Net.IPAddress" /> 的计算机，并接收来自该计算机的相应 ICMP 回送应答消息。 使用此方法可以为操作指定一个超时值。</summary>
        <returns>一个 <see cref="T:System.Net.NetworkInformation.PingReply" /> 对象，如果收到了 ICMP 回显回复消息，则该对象提供相应消息的相关信息；如果未收到消息，则该对象提供失败原因。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在指定的时间内未收到 ICMP 回送答复消息`timeout`参数，ICMP 回送失败，并<xref:System.Net.NetworkInformation.PingReply.Status%2A>属性设置为<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定对于非常小的数字时`timeout`，可以收到 Ping 回复即使`timeout`毫秒已过去。  
  
 此重载使用数据包分段和数据包转发的默认设置。 包含 ICMP 回送消息数据包可能存在碎片在传输过程中如果数据包总大小超过可以传输的最大数据包大小的本地和远程计算机之间的路由节点之一。 若要防止碎片，请使用之一<xref:System.Net.NetworkInformation.Ping.Send%2A>方法采用`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性设置为`true`。 当<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`和数据包总大小超过了可通过在本地和远程计算机之间的路由节点之一传播的最大数据包大小，ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。  
  
 数据包或数据包片段可以转发由路由节点 128 次时被放弃。 若要更改此设置，请使用<xref:System.Net.NetworkInformation.Ping.Send%2A>采用重载`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>属性设置为所需的值。 如果数据包不会转发指定的次数后达到其目标，将丢弃数据包，ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 有关示例，演示如何调用<xref:System.Net.NetworkInformation.Ping.Send%2A>方法，请参阅<xref:System.Net.NetworkInformation.Ping>类概述。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> 小于零。</exception>
        <exception cref="T:System.InvalidOperationException">对 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 的调用正在进行中。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> 是一个 IPv6 地址，并且本地计算机运行的操作系统的版本低于 Windows 2000。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。 请参见内部异常，以确切地了解所引发的异常。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放此对象。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要发送的 ICMP 回送消息。  
  
关联的枚举： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">一个 <see cref="T:System.String" />，它标识作为 ICMP 回送消息目标的计算机。 为此参数指定的值可以是主机名，也可以是以字符串形式表示的 IP 地址。</param>
        <param name="timeout">一个 <see cref="T:System.Int32" /> 值，指定（发送回送消息后）等待 ICMP 回送答复消息的最大毫秒数。</param>
        <summary>尝试向指定的计算机发送 Internet 控制消息协议 (ICMP) 回送消息，并从该计算机接收相应的 ICMP 回送答复消息。 使用此方法可以为操作指定一个超时值。</summary>
        <returns>一个 <see cref="T:System.Net.NetworkInformation.PingReply" /> 对象，如果收到了 ICMP 回显回复消息，则该对象提供相应消息的相关信息；如果未收到消息，则该对象提供失败原因。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在指定的时间内未收到 ICMP 回送答复消息`timeout`参数，ICMP 回送失败，并<xref:System.Net.NetworkInformation.PingReply.Status%2A>属性设置为<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定对于非常小的数字时`timeout`，可以收到 Ping 回复即使`timeout`毫秒已过去。  
  
 此重载使用数据包分段和数据包转发的默认设置。 包含 ICMP 回送消息数据包可能存在碎片在传输过程中如果数据包总大小超过可以传输的最大数据包大小的本地和远程计算机之间的路由节点之一。 若要防止碎片，请使用之一<xref:System.Net.NetworkInformation.Ping.Send%2A>方法采用`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性设置为`true`。 当<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`和数据包总大小超过了可通过在本地和远程计算机之间的路由节点之一传播的最大数据包大小，ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。 数据包或数据包片段 （如果含有碎片） 可以转发由路由节点 128 次时被放弃。 若要更改此设置，请使用<xref:System.Net.NetworkInformation.Ping.Send%2A>采用重载`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>属性设置为所需的值。 如果数据包不会转发指定的次数后达到其目标，将丢弃数据包，ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 有关示例，演示如何调用<xref:System.Net.NetworkInformation.Ping.Send%2A>方法，请参阅<xref:System.Net.NetworkInformation.Ping>类概述。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> 为 <see langword="null" /> 或是一个空字符串 ("")。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> 小于零。</exception>
        <exception cref="T:System.InvalidOperationException">对 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 的调用正在进行中。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。 请参见内部异常，以确切地了解所引发的异常。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放此对象。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要发送的 ICMP 回送消息。  
  
关联的枚举： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer, buffer As Byte()) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int * byte[] -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">标识 ICMP 回送消息目标计算机的 <see cref="T:System.Net.IPAddress" />。</param>
        <param name="timeout">一个 <see cref="T:System.Int32" /> 值，指定（发送回送消息后）等待 ICMP 回送答复消息的最大毫秒数。</param>
        <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，它包含要与 ICMP 回送消息一起发送并在 ICMP 回送应答消息中返回的数据。 该数组包含的字节数不能超过 65,500 个字节。</param>
        <summary>尝试将包含指定数据缓冲区的 Internet 控制消息协议 (ICMP) 回送消息发送到具有指定的 <see cref="T:System.Net.IPAddress" /> 的计算机，并接收来自该计算机的相应 ICMP 回送应答消息。 此重载使您可以为操作指定一个超时值。</summary>
        <returns>一个 <see cref="T:System.Net.NetworkInformation.PingReply" /> 对象。如果已收到 ICMP 回送应答消息，此对象将提供有关该消息的信息；如果没有收到 ICMP 回送应答消息，此对象将提供失败的原因。 如果数据包的大小超过最大传输单元 (MTU)，该方法将返回 <see cref="F:System.Net.NetworkInformation.IPStatus.PacketTooBig" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在指定的时间内未收到 ICMP 回送答复消息`timeout`参数，ICMP 回送失败，并<xref:System.Net.NetworkInformation.PingReply.Status%2A>属性设置为<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定对于非常小的数字时`timeout`，可以收到 Ping 回复即使`timeout`毫秒已过去。  
  
 此重载使用数据包分段和数据包转发的默认设置。 包含 ICMP 回送消息数据包可能存在碎片在传输过程中如果数据包总大小超过可以传输的最大数据包大小的本地和远程计算机之间的路由节点之一。 若要防止碎片，请使用之一<xref:System.Net.NetworkInformation.Ping.Send%2A>方法采用`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性设置为`true`。 当<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`和数据包总大小超过了可通过在本地和远程计算机之间的路由节点之一传播的最大数据包大小，ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。  
  
 数据包或数据包片段可以转发由路由节点 128 次时被放弃。 若要更改此设置，请使用<xref:System.Net.NetworkInformation.Ping.Send%2A>采用重载`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>属性设置为所需的值。 如果数据包不会转发指定的次数后达到其目标，将丢弃数据包，ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 下面的代码示例演示如何调用此方法。  
  
 [!code-cpp[NCLPingSampler#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#6)]
 [!code-csharp[NCLPingSampler#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="buffer" /> 的大小超过 65500 字节。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="buffer" /> 为 <see langword="null" />，或 <paramref name="buffer" /> 大小大于 65500 字节。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> 小于零。</exception>
        <exception cref="T:System.InvalidOperationException">对 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 的调用正在进行中。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> 是一个 IPv6 地址，并且本地计算机运行的操作系统的版本低于 Windows 2000。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。 请参见内部异常，以确切地了解所引发的异常。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放此对象。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要发送的 ICMP 回送消息。  
  
关联的枚举： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer, buffer As Byte()) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int * byte[] -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">一个 <see cref="T:System.String" />，它标识作为 ICMP 回送消息目标的计算机。 为此参数指定的值可以是主机名，也可以是以字符串形式表示的 IP 地址。</param>
        <param name="timeout">一个 <see cref="T:System.Int32" /> 值，指定（发送回送消息后）等待 ICMP 回送答复消息的最大毫秒数。</param>
        <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，它包含要与 ICMP 回送消息一起发送并在 ICMP 回送应答消息中返回的数据。 该数组包含的字节数不能超过 65,500 个字节。</param>
        <summary>尝试用指定的数据缓冲区将 Internet 控制消息协议 (ICMP) 回显消息发送到指定计算机，然后从该计算机接收对应的 ICMP 回显回复消息。 此重载使您可以为操作指定一个超时值。</summary>
        <returns>一个 <see cref="T:System.Net.NetworkInformation.PingReply" /> 对象，如果收到了 ICMP 回显回复消息，则该对象提供相应消息的相关信息；如果未收到消息，则该对象提供失败原因。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在指定的时间内未收到 ICMP 回送答复消息`timeout`参数，ICMP 回送失败，并<xref:System.Net.NetworkInformation.PingReply.Status%2A>属性设置为<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定对于非常小的数字时`timeout`，可以收到 Ping 回复即使`timeout`毫秒已过去。  
  
 此重载使用数据包分段和数据包转发的默认设置。 包含 ICMP 回送消息数据包可能存在碎片在传输过程中如果数据包总大小超过可以传输的最大数据包大小的本地和远程计算机之间的路由节点之一。 若要防止碎片，请使用之一<xref:System.Net.NetworkInformation.Ping.Send%2A>方法采用`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性设置为`true`。 当<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`和数据包总大小超过了可通过在本地和远程计算机之间的路由节点之一传播的最大数据包大小，ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。  
  
 数据包或数据包片段可以转发由路由节点 128 次时被放弃。 若要更改此设置，请使用<xref:System.Net.NetworkInformation.Ping.Send%2A>采用重载`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>属性设置为所需的值。 如果数据包不会转发指定的次数后达到其目标，将丢弃数据包，ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 有关示例，演示如何调用<xref:System.Net.NetworkInformation.Ping.Send%2A>重载，请参阅<xref:System.Net.NetworkInformation.Ping>类概述。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="buffer" /> 的大小超过 65500 字节。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> 为 <see langword="null" /> 或是一个空字符串 ("")。  
  
或 
 <paramref name="buffer" /> 为 <see langword="null" />，或 <paramref name="buffer" /> 大小大于 65500 字节。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> 小于零。</exception>
        <exception cref="T:System.InvalidOperationException">对 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 的调用正在进行中。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。 请参见内部异常，以确切地了解所引发的异常。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放此对象。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要发送的 ICMP 回送消息。  
  
关联的枚举： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
      </Parameters>
      <Docs>
        <param name="address">标识 ICMP 回送消息目标计算机的 <see cref="T:System.Net.IPAddress" />。</param>
        <param name="timeout">一个 <see cref="T:System.Int32" /> 值，指定（发送回送消息后）等待 ICMP 回送答复消息的最大毫秒数。</param>
        <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，它包含要与 ICMP 回送消息一起发送并在 ICMP 回送应答消息中返回的数据。 该数组包含的字节数不能超过 65,500 个字节。</param>
        <param name="options">一个 <see cref="T:System.Net.NetworkInformation.PingOptions" /> 对象，用于控制 ICMP 回显消息数据包的碎片和生存时间值。</param>
        <summary>尝试将包含指定数据缓冲区的 Internet 控制消息协议 (ICMP) 回送消息发送到具有指定 <see cref="T:System.Net.IPAddress" /> 的计算机，并接收来自该计算机的相应 ICMP 回送答复消息。 此重载允许您指定操作的超时值，并控制 ICMP 回显消息数据包的碎片和生存时间值。</summary>
        <returns>一个 <see cref="T:System.Net.NetworkInformation.PingReply" /> 对象。如果已收到 ICMP 回送应答消息，此对象将提供有关该消息的信息；如果没有收到 ICMP 回送应答消息，此对象将提供失败的原因。 如果数据包的大小超过最大传输单元 (MTU)，该方法将返回 <see cref="F:System.Net.NetworkInformation.IPStatus.PacketTooBig" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在指定时间内未收到 ICMP 回送答复消息`timeout`参数，ICMP 回送失败，并<xref:System.Net.NetworkInformation.PingReply.Status%2A>属性设置为<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定对于非常小的数字时`timeout`，可以收到 Ping 回复即使`timeout`毫秒已过去。  
  
 如果<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性是`true`和数据包总大小超过了可通过在本地和远程计算机之间的路由节点之一传播的最大数据包大小，ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。  
  
 使用<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>属性来指定最多的 ICMP 回送消息才能到达其目标之前转发的次数。 如果数据包不会转发指定的次数后达到其目标，将丢弃数据包，ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 下面的代码示例演示如何调用此方法。  
  
 [!code-cpp[NCLPingSampler#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#5)]
 [!code-csharp[NCLPingSampler#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="buffer" /> 的大小超过 65500 字节。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="buffer" /> 为 <see langword="null" />，或 <paramref name="buffer" /> 大小大于 65500 字节。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> 小于零。</exception>
        <exception cref="T:System.InvalidOperationException">对 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 的调用正在进行中。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> 是一个 IPv6 地址，并且本地计算机运行的操作系统的版本低于 Windows 2000。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。 请参见内部异常，以确切地了解所引发的异常。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放此对象。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要发送的 ICMP 回送消息。  
  
关联的枚举： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">一个 <see cref="T:System.String" />，它标识作为 ICMP 回送消息目标的计算机。 为此参数指定的值可以是主机名，也可以是以字符串形式表示的 IP 地址。</param>
        <param name="timeout">一个 <see cref="T:System.Int32" /> 值，指定（发送回送消息后）等待 ICMP 回送答复消息的最大毫秒数。</param>
        <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，它包含要与 ICMP 回送消息一起发送并在 ICMP 回送应答消息中返回的数据。 该数组包含的字节数不能超过 65,500 个字节。</param>
        <param name="options">一个 <see cref="T:System.Net.NetworkInformation.PingOptions" /> 对象，用于控制 ICMP 回显消息数据包的碎片和生存时间值。</param>
        <summary>尝试用指定的数据缓冲区将 Internet 控制消息协议 (ICMP) 回显消息发送到指定计算机，然后从该计算机接收对应的 ICMP 回显回复消息。 此重载允许您指定操作的超时值，并控制 ICMP 数据包的碎片和生存时间值。</summary>
        <returns>一个 <see cref="T:System.Net.NetworkInformation.PingReply" /> 对象，如果收到了 ICMP 回显回复消息，则该对象提供相应消息的相关信息；如果未收到消息，则该对象提供失败原因。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在指定时间内未收到 ICMP 回送答复消息`timeout`参数，ICMP 回送失败，并<xref:System.Net.NetworkInformation.PingReply.Status%2A>属性设置为<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定对于非常小的数字时`timeout`，可以收到 Ping 回复即使`timeout`毫秒已过去。  
  
 如果<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性是`true`和数据包总大小超过了可通过在本地和远程计算机之间的路由节点之一传播的最大数据包大小，ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。  
  
 使用<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>属性来指定最多的 ICMP 回送消息才能到达其目标之前转发的次数。 如果数据包不会转发指定的次数后达到其目标，将丢弃数据包，ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 下面的代码示例演示如何调用此方法。  
  
 [!code-cpp[NCLPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NCLPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="buffer" /> 的大小超过 65500 字节。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> 为 <see langword="null" /> 或为零长度字符串。  
  
或 
 <paramref name="buffer" /> 为 <see langword="null" />，或 <paramref name="buffer" /> 大小大于 65500 字节。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> 小于零。</exception>
        <exception cref="T:System.InvalidOperationException">对 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 的调用正在进行中。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> 是一个 IPv6 地址，并且本地计算机运行的操作系统的版本低于 Windows 2000。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。 请参见内部异常，以确切地了解所引发的异常。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放此对象。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要发送的 ICMP 回送消息。  
  
关联的枚举： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>尝试以异步方式将 Internet 控制消息协议 (ICMP) 回送消息发送到指定的计算机，并接收来自该计算机的相应 ICMP 回送答复消息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这些方法不会导致应用程序的主线程阻塞。 如果你想要阻止等待 ICMP 回送答复消息时，使用<xref:System.Net.NetworkInformation.Ping.Send%2A>方法。  
  
> [!NOTE]
>  任何返回的 IP 地址<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法可能来自恶意的远程计算机。 不要连接到远程计算机使用此。 使用 DNS 来确定你想要连接的计算机的 IP 地址。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * obj -&gt; unit" Usage="ping.SendAsync (address, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">标识 ICMP 回送消息目标计算机的 <see cref="T:System.Net.IPAddress" />。</param>
        <param name="userToken">一个对象，此对象将被传递给异步操作完成后所调用的方法。</param>
        <summary>尝试以异步方式向指定 <see cref="T:System.Net.IPAddress" /> 的计算机发送 Internet 控制消息协议 (ICMP) 回送消息，并从该计算机接收相应的 ICMP 回送答复消息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法将异步发送回送消息，并且在操作完成 （成功或失败） 时将状态返回到你的应用程序。 调用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法时应不会阻止你的应用程序。 在从线程池自动分配一个单独的线程中执行每次调用此方法。 异步操作完成后，它会发出<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 若要指定时，将调用的方法<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>引发事件，必须添加<xref:System.Net.NetworkInformation.PingCompletedEventHandler>委托之前调用事件<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>。 委托的方法接收<xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象，其中包含<xref:System.Net.NetworkInformation.PingReply>对象的结果进行说明的<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象将继承<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>属性。 此属性包含`userToken`对象传递到<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。  
  
> [!NOTE]
>  如果你的应用程序应阻止等待回复时，请使用一个<xref:System.Net.NetworkInformation.Ping.Send%2A>方法; 这些方法是同步的。  
  
 此方法将发送 32<xref:System.Byte>与 ICMP 回送消息的数据缓冲区。 该方法将等待五秒 ICMP 回送答复消息。 如果它不会在该时间内收到答复，该方法将返回与<xref:System.Net.NetworkInformation.PingReply.Status%2A>属性设置为<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
 此重载使用数据包分段和数据包转发的默认设置。 包含 ICMP 回送消息数据包可能存在碎片在传输过程中如果数据包总大小超过可以传输的最大数据包大小的本地和远程计算机之间的路由节点之一。 若要防止碎片，请使用之一<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法采用`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性设置为`true`。 当<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`和数据包总大小超过了可通过在本地和远程计算机之间的路由节点之一传播的最大数据包大小，ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。  
  
 数据包或数据包片段可以转发由路由节点 128 次时被放弃。 若要更改此设置，请使用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>采用重载`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>属性设置为所需的值。 如果数据包不会转发指定的次数后达到其目标，将丢弃数据包，ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 有关演示如何调用的代码示例<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法，请参阅<xref:System.Net.NetworkInformation.Ping>类概述。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">对 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 方法的调用正在进行中。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> 是一个 IPv6 地址，并且本地计算机运行的操作系统的版本低于 Windows 2000。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。 请参见内部异常，以确切地了解所引发的异常。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> 不是有效的 IP 地址。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放此对象。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要发送的 ICMP 回送消息。  
  
关联的枚举： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">一个 <see cref="T:System.String" />，它标识作为 ICMP 回送消息目标的计算机。 为此参数指定的值可以是主机名，也可以是以字符串形式表示的 IP 地址。</param>
        <param name="userToken">一个对象，此对象将被传递给异步操作完成后所调用的方法。</param>
        <summary>尝试以异步方式向指定的计算机发送 Internet 控制消息协议 (ICMP) 回送消息，并从该计算机接收相应的 ICMP 回送答复消息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法将异步发送回送消息，并且在操作完成 （成功或失败） 时将状态返回到你的应用程序。 调用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法时应不会阻止你的应用程序。 在从线程池自动分配一个单独的线程中执行每次调用此方法。 异步操作完成后，它会发出<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 若要指定时，将调用的方法<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>引发事件，必须添加<xref:System.Net.NetworkInformation.PingCompletedEventHandler>委托之前调用事件<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>。 委托的方法接收<xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象，其中包含<xref:System.Net.NetworkInformation.PingReply>对象的结果进行说明的<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象将继承<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>属性。 此属性包含`userToken`对象传递到<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。  
  
> [!NOTE]
>  如果你的应用程序应阻止等待回复时，请使用<xref:System.Net.NetworkInformation.Ping.Send%2A>方法; 这些方法是同步的。  
  
 此方法将发送 32<xref:System.Byte>与 ICMP 回送消息的数据缓冲区。 该方法将等待五秒 ICMP 回送答复消息。 如果不在该时间内收到回复该方法返回与<xref:System.Net.NetworkInformation.PingReply.Status%2A>属性设置为<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
 此重载使用数据包分段和数据包转发的默认设置。 包含 ICMP 回送消息数据包可能存在碎片在传输过程中如果数据包总大小超过可以传输的最大数据包大小的本地和远程计算机之间的路由节点之一。 若要防止碎片，请使用之一<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法采用`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性设置为`true`。 当<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`和数据包总大小超过了可通过在本地和远程计算机之间的路由节点之一传播的最大数据包大小，ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。  
  
 数据包或数据包片段可以转发由路由节点 128 次时被放弃。 若要更改此设置，请使用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>采用重载`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>属性设置为所需的值。 如果数据包不会转发指定的次数后达到其目标，将丢弃数据包，ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 有关演示如何调用的代码示例<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法，请参阅<xref:System.Net.NetworkInformation.Ping>类概述。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> 为 <see langword="null" /> 或是一个空字符串 ("")。</exception>
        <exception cref="T:System.InvalidOperationException">对 <see cref="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)" /> 方法的调用正在进行中。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> 是一个 IPv6 地址，并且本地计算机运行的操作系统的版本低于 Windows 2000。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。 请参见内部异常，以确切地了解所引发的异常。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="hostNameOrAddress" /> 未能解析为有效的 IP 地址。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放此对象。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要发送的 ICMP 回送消息。  
  
关联的枚举： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">标识 ICMP 回送消息目标计算机的 <see cref="T:System.Net.IPAddress" />。</param>
        <param name="timeout">一个 <see cref="T:System.Int32" /> 值，指定（发送回送消息后）等待 ICMP 回送答复消息的最大毫秒数。</param>
        <param name="userToken">一个对象，此对象将被传递给异步操作完成后所调用的方法。</param>
        <summary>尝试以异步方式向指定 <see cref="T:System.Net.IPAddress" /> 的计算机发送 Internet 控制消息协议 (ICMP) 回送消息，并从该计算机接收相应的 ICMP 回送答复消息。 此重载使您可以为操作指定一个超时值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法将异步发送回送消息，并且在操作完成 （成功或失败） 时将状态返回到你的应用程序。 调用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法时应不会阻止你的应用程序。 在从线程池自动分配一个单独的线程中执行的每个调用。 异步操作完成后，它会发出<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 应用程序使用<xref:System.Net.NetworkInformation.PingCompletedEventHandler>委托来指定时，将调用该方法<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>引发事件。 必须添加<xref:System.Net.NetworkInformation.PingCompletedEventHandler>之前调用事件的委托<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>。 委托的方法接收<xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象，其中包含<xref:System.Net.NetworkInformation.PingReply>对象的结果进行说明的<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象将继承<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>属性。 此属性包含`userToken`对象传递到<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。  
  
 如果你的应用程序应阻止等待回复时，请使用<xref:System.Net.NetworkInformation.Ping.Send%2A>方法; 这些方法是同步的。  
  
 如果在指定时间内未收到 ICMP 回送答复消息`timeout`参数，ICMP 回送失败，并<xref:System.Net.NetworkInformation.PingReply.Status%2A>属性设置为<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定对于非常小的数字时`timeout`，可以收到 Ping 回复即使`timeout`毫秒已过去。  
  
 此重载使用数据包分段和数据包转发的默认设置。 包含 ICMP 回送消息数据包可能存在碎片在传输过程中如果数据包总大小超过可以传输的最大数据包大小的本地和远程计算机之间的路由节点之一。 若要防止碎片，请使用之一<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法采用`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性设置为`true`。 当<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`和数据包总大小超过了可通过在本地和远程计算机之间的路由节点之一传播的最大数据包大小，ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。 数据包或数据包片段 （如果含有碎片） 可以转发由路由节点 128 次时被放弃。 若要更改此设置，请使用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>采用重载`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>属性设置为所需的值。 如果数据包不会转发指定的次数后达到其目标，将丢弃数据包，ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 有关演示如何调用的代码示例<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>重载，请参阅<xref:System.Net.NetworkInformation.Ping>类概述。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> 小于零。</exception>
        <exception cref="T:System.InvalidOperationException">对 <see cref="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)" /> 方法的调用正在进行中。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> 是一个 IPv6 地址，并且本地计算机运行的操作系统的版本低于 Windows 2000。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。 请参见内部异常，以确切地了解所引发的异常。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> 不是有效的 IP 地址。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放此对象。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要发送的 ICMP 回送消息。  
  
关联的枚举： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">一个 <see cref="T:System.String" />，它标识作为 ICMP 回送消息目标的计算机。 为此参数指定的值可以是主机名，也可以是以字符串形式表示的 IP 地址。</param>
        <param name="timeout">一个 <see cref="T:System.Int32" /> 值，指定（发送回送消息后）等待 ICMP 回送答复消息的最大毫秒数。</param>
        <param name="userToken">一个对象，此对象将被传递给异步操作完成后所调用的方法。</param>
        <summary>尝试以异步方式向指定的计算机发送 Internet 控制消息协议 (ICMP) 回送消息，并从该计算机接收相应的 ICMP 回送答复消息。 此重载使您可以为操作指定一个超时值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法将异步发送回送消息，并且在操作完成 （成功或失败） 时将状态返回到你的应用程序。 调用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法时应不会阻止你的应用程序。 在从线程池自动分配一个单独的线程中执行的每个调用。 异步操作完成后，它会发出<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 应用程序使用<xref:System.Net.NetworkInformation.PingCompletedEventHandler>委托来指定时，将调用该方法<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>引发事件。 必须添加<xref:System.Net.NetworkInformation.PingCompletedEventHandler>之前调用事件的委托<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>。 委托的方法接收<xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象，其中包含<xref:System.Net.NetworkInformation.PingReply>对象的结果进行说明的<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象将继承<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>属性。 此属性包含`userToken`对象传递到<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。  
  
 如果你的应用程序应阻止等待回复时，请使用<xref:System.Net.NetworkInformation.Ping.Send%2A>方法; 这些方法是同步的。  
  
 如果在指定时间内未收到 ICMP 回送答复消息`timeout`参数，ICMP 回送失败，并<xref:System.Net.NetworkInformation.PingReply.Status%2A>属性设置为<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定对于非常小的数字时`timeout`，可以收到 Ping 回复即使`timeout`毫秒已过去。  
  
 此重载使用数据包分段和数据包转发的默认设置。 包含 ICMP 回送消息数据包可能存在碎片在传输过程中如果数据包总大小超过可以传输的最大数据包大小的本地和远程计算机之间的路由节点之一。 若要防止碎片，请使用之一<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法采用`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性设置为`true`。 当<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`和数据包总大小超过了可通过在本地和远程计算机之间的路由节点之一传播的最大数据包大小，ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。 数据包或数据包片段 （如果含有碎片） 可以转发由路由节点 128 次时被放弃。 若要更改此设置，请使用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>采用重载`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>属性设置为所需的值。 如果数据包不会转发指定的次数后达到其目标，将丢弃数据包，ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 有关演示如何调用的代码示例<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法，请参阅<xref:System.Net.NetworkInformation.Ping>类概述。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> 为 <see langword="null" /> 或是一个空字符串 ("")。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> 小于零。</exception>
        <exception cref="T:System.InvalidOperationException">对 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 的调用正在进行中。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="hostNameOrAddress" /> 是一个 IPv6 地址，并且本地计算机运行的操作系统的版本低于 Windows 2000。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。 请参见内部异常，以确切地了解所引发的异常。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="hostNameOrAddress" /> 未能解析为有效的 IP 地址。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放此对象。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要发送的 ICMP 回送消息。  
  
关联的枚举： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, byte[] buffer, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, buffer As Byte(), userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * byte[] * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, buffer, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">标识 ICMP 回送消息目标计算机的 <see cref="T:System.Net.IPAddress" />。</param>
        <param name="timeout">一个 <see cref="T:System.Int32" /> 值，指定（发送回送消息后）等待 ICMP 回送答复消息的最大毫秒数。</param>
        <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，它包含要与 ICMP 回送消息一起发送并在 ICMP 回送应答消息中返回的数据。 该数组包含的字节数不能超过 65,500 个字节。</param>
        <param name="userToken">一个对象，此对象将被传递给异步操作完成后所调用的方法。</param>
        <summary>尝试用指定的数据缓冲区以异步方式将 Internet 控制消息协议 (ICMP) 回显消息发送到具有指定的 <see cref="T:System.Net.IPAddress" /> 的计算机，并从该计算机接收对应的 ICMP 回显回复消息。 此重载使您可以为操作指定一个超时值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将异步发送回送消息，并在操作完成 （成功或失败），返回到应用程序的状态。 调用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法时应不会阻止你的应用程序。 在从线程池自动分配一个单独的线程中执行的每个调用。 异步操作完成后，它会发出<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 若要指定时，将调用的方法<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>引发事件，必须添加<xref:System.Net.NetworkInformation.PingCompletedEventHandler>委托之前调用事件<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>。 委托的方法接收<xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象，其中包含<xref:System.Net.NetworkInformation.PingReply>对象的结果进行说明的<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象将继承<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>属性。 此属性包含`userToken`对象传递到<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。  
  
> [!NOTE]
>  如果你的应用程序阻止等待回复时，使用<xref:System.Net.NetworkInformation.Ping.Send%2A>方法; 这些方法是同步的。  
  
 如果在指定时间内未收到 ICMP 回送答复消息`timeout`参数，ICMP 回送失败，并<xref:System.Net.NetworkInformation.PingReply.Status%2A>属性设置为<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定对于非常小的数字时`timeout`，可以收到 Ping 回复即使`timeout`毫秒已过去。  
  
 此重载使用数据包分段和数据包转发的默认设置。 包含 ICMP 回送消息数据包可能存在碎片在传输过程中如果数据包总大小超过可以传输的最大数据包大小的本地和远程计算机之间的路由节点之一。 若要防止碎片，请使用之一<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法采用`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性设置为`true`。 当<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`和数据包总大小超过了可通过在本地和远程计算机之间的路由节点之一传播的最大数据包大小，ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。 数据包或数据包片段 （如果含有碎片） 可以转发由路由节点 128 次时被放弃。 若要更改此设置，请使用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>采用重载`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>属性设置为所需的值。 如果数据包不会转发指定的次数后达到其目标，将丢弃数据包，ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 有关演示如何调用的代码示例<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>重载，请参阅<xref:System.Net.NetworkInformation.Ping>类概述。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> 为 <see langword="null" />。  
  
或 
 <paramref name="buffer" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> 小于零。</exception>
        <exception cref="T:System.InvalidOperationException">对 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 的调用正在进行中。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> 是一个 IPv6 地址，并且本地计算机运行的操作系统的版本低于 Windows 2000。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。 请参见内部异常，以确切地了解所引发的异常。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> 不是有效的 IP 地址。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放此对象。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="buffer" /> 的大小超过 65500 字节。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要发送的 ICMP 回送消息。  
  
关联的枚举： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, byte[] buffer, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * byte[] * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, buffer, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">一个 <see cref="T:System.String" />，它标识作为 ICMP 回送消息目标的计算机。 为此参数指定的值可以是主机名，也可以是以字符串形式表示的 IP 地址。</param>
        <param name="timeout">一个 <see cref="T:System.Int32" /> 值，指定（发送回送消息后）等待 ICMP 回送答复消息的最大毫秒数。</param>
        <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，它包含要与 ICMP 回送消息一起发送并在 ICMP 回送应答消息中返回的数据。 该数组包含的字节数不能超过 65,500 个字节。</param>
        <param name="userToken">一个对象，此对象将被传递给异步操作完成后所调用的方法。</param>
        <summary>尝试用指定的数据缓冲区以异步方式将 Internet 控制消息协议 (ICMP) 回显消息发送到指定计算机，并从该计算机接收对应的 ICMP 回显回复消息。 此重载使您可以为操作指定一个超时值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法将异步发送回送消息，并且在操作完成 （成功或失败） 时将状态返回到你的应用程序。 调用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法时应不会阻止你的应用程序。 在从线程池自动分配一个单独的线程中执行的每个调用。 异步操作完成后，它会发出<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 应用程序使用<xref:System.Net.NetworkInformation.PingCompletedEventHandler>委托来指定时，将调用该方法<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>引发事件。 必须添加<xref:System.Net.NetworkInformation.PingCompletedEventHandler>之前调用事件的委托<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>。 委托的方法接收<xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象，其中包含<xref:System.Net.NetworkInformation.PingReply>对象的结果进行说明的<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象将继承<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>属性。 此属性包含`userToken`对象传递到<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。  
  
 如果你的应用程序应阻止等待回复时，请使用<xref:System.Net.NetworkInformation.Ping.Send%2A>方法; 这些方法是同步的。  
  
 如果在指定时间内未收到 ICMP 回送答复消息`timeout`参数，ICMP 回送失败，并<xref:System.Net.NetworkInformation.PingReply.Status%2A>属性设置为<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定对于非常小的数字时`timeout`，可以收到 Ping 回复即使`timeout`毫秒已过去。  
  
 此重载使用数据包分段和数据包转发的默认设置。 包含 ICMP 回送消息数据包可能存在碎片在传输过程中如果数据包总大小超过可以传输的最大数据包大小的本地和远程计算机之间的路由节点之一。 若要防止碎片，请使用之一<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法采用`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性设置为`true`。 当<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`和数据包总大小超过了可通过在本地和远程计算机之间的路由节点之一传播的最大数据包大小，ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。 数据包或数据包片段 （如果含有碎片） 可以转发由路由节点 128 次时被放弃。 若要更改此设置，请使用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>采用重载`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>属性设置为所需的值。 如果数据包不会转发指定的次数后达到其目标，将丢弃数据包，ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 下面的代码示例演示如何调用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>重载，请参阅<xref:System.Net.NetworkInformation.Ping>类概述。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> 为 <see langword="null" /> 或是一个空字符串 ("")。  
  
- 或 - 
 <paramref name="buffer" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> 小于零。</exception>
        <exception cref="T:System.InvalidOperationException">对 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 的调用正在进行中。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="hostNameOrAddress" /> 是一个 IPv6 地址，并且本地计算机运行的操作系统的版本低于 Windows 2000。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。 请参见内部异常，以确切地了解所引发的异常。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="hostNameOrAddress" /> 未能解析为有效的 IP 地址。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放此对象。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="buffer" /> 的大小超过 65500 字节。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要发送的 ICMP 回送消息。  
  
关联的枚举： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, buffer, options, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">标识 ICMP 回送消息目标计算机的 <see cref="T:System.Net.IPAddress" />。</param>
        <param name="timeout">一个 <see cref="T:System.Int32" /> 值，指定（发送回送消息后）等待 ICMP 回送答复消息的最大毫秒数。</param>
        <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，它包含要与 ICMP 回送消息一起发送并在 ICMP 回送应答消息中返回的数据。 该数组包含的字节数不能超过 65,500 个字节。</param>
        <param name="options">一个 <see cref="T:System.Net.NetworkInformation.PingOptions" /> 对象，用于控制 ICMP 回显消息数据包的碎片和生存时间值。</param>
        <param name="userToken">一个对象，此对象将被传递给异步操作完成后所调用的方法。</param>
        <summary>尝试用指定的数据缓冲区以异步方式将 Internet 控制消息协议 (ICMP) 回显消息发送到具有指定的 <see cref="T:System.Net.IPAddress" /> 的计算机，并从该计算机接收对应的 ICMP 回显回复消息。 此重载允许您指定操作的超时值，并控制 ICMP 回显消息数据包的碎片和生存时间值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法将异步发送回送消息，并且在操作完成 （成功或失败） 时将状态返回到你的应用程序。 调用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法时不能阻止你的应用程序。 在从线程池自动分配一个单独的线程中执行的每个调用。 异步操作完成后，它会发出<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 应用程序使用<xref:System.Net.NetworkInformation.PingCompletedEventHandler>委托来指定时，将调用该方法<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>引发事件。 必须添加<xref:System.Net.NetworkInformation.PingCompletedEventHandler>之前调用事件的委托<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>。 委托的方法接收<xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象，其中包含<xref:System.Net.NetworkInformation.PingReply>对象的结果进行说明的<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象将继承<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>属性。 此属性包含`userToken`对象传递到<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。  
  
 如果你的应用程序阻止等待回复时，使用<xref:System.Net.NetworkInformation.Ping.Send%2A>方法; 这些方法是同步的。  
  
 如果在指定时间内未收到 ICMP 回送答复消息`timeout`参数，ICMP 回送失败，并<xref:System.Net.NetworkInformation.PingReply.Status%2A>属性设置为<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定对于非常小的数字时`timeout`，可以收到 Ping 回复即使`timeout`毫秒已过去。  
  
 如果<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性是`true`和数据包总大小超过了可通过在本地和远程计算机之间的路由节点之一传播的最大数据包大小，ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。  
  
 使用<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>属性来指定最多的 ICMP 回送消息才能到达其目标之前转发的次数。 如果数据包不会转发指定的次数后达到其目标，将丢弃数据包，ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 下面的代码示例演示如何调用此方法。 回调方法的实现，请参阅<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法重载的示例部分。  
  
 下面的代码示例需要以下命名空间：  
  
 [!code-cpp[NCLPingSampler#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#0)]
 [!code-csharp[NCLPingSampler#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#0)]  
  
 下面的代码示例将以异步方式发送的 ICMP 回送消息。  
  
 [!code-cpp[NCLPingSampler#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#7)]
 [!code-csharp[NCLPingSampler#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> 为 <see langword="null" />。  
  
或 
 <paramref name="buffer" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> 小于零。</exception>
        <exception cref="T:System.InvalidOperationException">对 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 的调用正在进行中。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> 是一个 IPv6 地址，并且本地计算机运行的操作系统的版本低于 Windows 2000。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。 请参见内部异常，以确切地了解所引发的异常。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> 不是有效的 IP 地址。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放此对象。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="buffer" /> 的大小超过 65500 字节。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要发送的 ICMP 回送消息。  
  
关联的枚举： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * byte[] * System.Net.NetworkInformation.PingOptions * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, buffer, options, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">一个 <see cref="T:System.String" />，它标识作为 ICMP 回送消息目标的计算机。 为此参数指定的值可以是主机名，也可以是以字符串形式表示的 IP 地址。</param>
        <param name="timeout">一个 <see cref="T:System.Byte" /> 数组，它包含要与 ICMP 回送消息一起发送并在 ICMP 回送应答消息中返回的数据。 该数组包含的字节数不能超过 65,500 个字节。</param>
        <param name="buffer">一个 <see cref="T:System.Int32" /> 值，指定（发送回送消息后）等待 ICMP 回送答复消息的最大毫秒数。</param>
        <param name="options">一个 <see cref="T:System.Net.NetworkInformation.PingOptions" /> 对象，用于控制 ICMP 回显消息数据包的碎片和生存时间值。</param>
        <param name="userToken">一个对象，此对象将被传递给异步操作完成后所调用的方法。</param>
        <summary>尝试用指定的数据缓冲区以异步方式将 Internet 控制消息协议 (ICMP) 回显消息发送到指定计算机，并从该计算机接收对应的 ICMP 回显回复消息。 此重载允许您指定操作的超时值，并控制 ICMP 数据包的碎片和生存时间值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法将异步发送回送消息，并且在操作完成 （成功或失败） 时将状态返回到你的应用程序。 调用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法时不能阻止你的应用程序。 在从线程池自动分配一个单独的线程中执行的每个调用。 异步操作完成后，它会发出<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 应用程序使用<xref:System.Net.NetworkInformation.PingCompletedEventHandler>委托来指定时，将调用该方法<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>引发事件。 必须添加<xref:System.Net.NetworkInformation.PingCompletedEventHandler>之前调用事件的委托<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>。 委托的方法接收<xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象，其中包含<xref:System.Net.NetworkInformation.PingReply>对象的结果进行说明的<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象将继承<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>属性。 此属性包含`userToken`对象传递到<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。  
  
 如果你的应用程序应阻止等待回复时，请使用<xref:System.Net.NetworkInformation.Ping.Send%2A>方法; 这些方法是同步的。  
  
 如果在指定时间内未收到 ICMP 回送答复消息`timeout`参数，ICMP 回送失败，并<xref:System.Net.NetworkInformation.PingReply.Status%2A>属性设置为<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定对于非常小的数字时`timeout`，可以收到 Ping 回复即使`timeout`毫秒已过去。  
  
 如果<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性是`true`和数据包总大小超过了可通过在本地和远程计算机之间的路由节点之一传播的最大数据包大小，ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。  
  
 使用<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>属性来指定最多的 ICMP 回送消息才能到达其目标之前转发的次数。 如果数据包不会转发指定的次数后达到其目标，将丢弃数据包，ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 下面的代码示例演示如何调用此方法。  
  
 [!code-cpp[NCLPingAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#1)]
 [!code-csharp[NCLPingAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hostNameOrAddress" /> 为 <see langword="null" /> 或是一个空字符串 ("")。  
  
或 
 <paramref name="buffer" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> 小于零。</exception>
        <exception cref="T:System.InvalidOperationException">对 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 的调用正在进行中。</exception>
        <exception cref="T:System.NotSupportedException"><paramref name="address" /> 是一个 IPv6 地址，并且本地计算机运行的操作系统的版本低于 Windows 2000。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。 请参见内部异常，以确切地了解所引发的异常。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="hostNameOrAddress" /> 未能解析为有效的 IP 地址。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放此对象。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="buffer" /> 的大小超过 65500 字节。</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要发送的 ICMP 回送消息。  
  
关联的枚举： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsyncCancel">
      <MemberSignature Language="C#" Value="public void SendAsyncCancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsyncCancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsyncCancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsyncCancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsyncCancel();" />
      <MemberSignature Language="F#" Value="member this.SendAsyncCancel : unit -&gt; unit" Usage="ping.SendAsyncCancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取消所有挂起的发送 Internet 控制消息协议 (ICMP) 回送消息并接收相应 ICMP 回送答复消息的异步请求。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法来终止对任何调用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>的未完成。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendPingAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将 Internet 控制消息协议 (ICMP) 回送消息发送到指定的计算机，并从该计算机接收对应的 ICMP 回送答复消息以作为异步操作。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="address">一个 IP 地址，它标识作为 ICMP 回送消息目标的计算机。</param>
        <summary>使用指定的数据缓冲区将 Internet 控制消息协议 (ICMP) 回送消息发送到具有指定的 <see cref="T:System.Net.IPAddress" /> 的计算机，并从该计算机接收对应的 ICMP 回送答复消息以作为异步操作。</summary>
        <returns>表示异步操作的任务对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>> 已发送的 ICMP 数据包，并收到响应后，将完成对象。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">对 <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" /> 的调用正在进行中。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。 请参见内部异常，以确切地了解所引发的异常。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> 不是有效的 IP 地址。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放此对象。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync hostNameOrAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">作为 ICMP 回送消息的目标的计算机。 为此参数指定的值可以是主机名，也可以是以字符串形式表示的 IP 地址。</param>
        <summary>使用指定的数据缓冲区将 Internet 控制消息协议 (ICMP) 回送消息发送到指定计算机，并从该计算机接收对应的 ICMP 回送答复消息以作为异步操作。</summary>
        <returns>表示异步操作的任务对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>> 已发送的 ICMP 数据包，并收到响应后，将完成对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address">一个 IP 地址，它标识作为 ICMP 回送消息目标的计算机。</param>
        <param name="timeout">（发送回送消息后）等待 ICMP 回送答复消息的最大毫秒数。</param>
        <summary>使用指定的数据缓冲区将 Internet 控制消息协议 (ICMP) 回送消息发送到具有指定的 <see cref="T:System.Net.IPAddress" /> 的计算机，并从该计算机接收对应的 ICMP 回送答复消息以作为异步操作。 此重载使您可以为操作指定一个超时值。</summary>
        <returns>表示异步操作的任务对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>> 已发送的 ICMP 数据包，并收到响应后，将完成对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">作为 ICMP 回送消息的目标的计算机。 为此参数指定的值可以是主机名，也可以是以字符串形式表示的 IP 地址。</param>
        <param name="timeout">（发送回送消息后）等待 ICMP 回送答复消息的最大毫秒数。</param>
        <summary>使用指定的数据缓冲区将 Internet 控制消息协议 (ICMP) 回送消息发送到指定计算机，并从该计算机接收对应的 ICMP 回送答复消息以作为异步操作。 此重载使您可以为操作指定一个超时值。</summary>
        <returns>表示异步操作的任务对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>> 已发送的 ICMP 数据包，并收到响应后，将完成对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer, buffer As Byte()) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int * byte[] -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">一个 IP 地址，它标识作为 ICMP 回送消息目标的计算机。</param>
        <param name="timeout">（发送回送消息后）等待 ICMP 回送答复消息的最大毫秒数。</param>
        <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，它包含要与 ICMP 回送消息一起发送并在 ICMP 回送应答消息中返回的数据。 该数组包含的字节数不能超过 65,500 个字节。</param>
        <summary>使用指定的数据缓冲区将 Internet 控制消息协议 (ICMP) 回送消息发送到具有指定的 <see cref="T:System.Net.IPAddress" /> 的计算机，并从该计算机接收对应的 ICMP 回送答复消息以作为异步操作。 此重载将允许您为操作指定超时值并指定用于发送和接收的缓冲区。</summary>
        <returns>表示异步操作的任务对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>> 已发送的 ICMP 数据包，并收到响应后，将完成对象。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="buffer" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> 小于零。</exception>
        <exception cref="T:System.InvalidOperationException">对 <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" /> 的调用正在进行中。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。 请参见内部异常，以确切地了解所引发的异常。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> 不是有效的 IP 地址。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放此对象。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="buffer" /> 的大小超过 65,500 字节。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte()) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int * byte[] -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">作为 ICMP 回送消息的目标的计算机。 为此参数指定的值可以是主机名，也可以是以字符串形式表示的 IP 地址。</param>
        <param name="timeout">（发送回送消息后）等待 ICMP 回送答复消息的最大毫秒数。</param>
        <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，它包含要与 ICMP 回送消息一起发送并在 ICMP 回送应答消息中返回的数据。 该数组包含的字节数不能超过 65,500 个字节。</param>
        <summary>使用指定的数据缓冲区将 Internet 控制消息协议 (ICMP) 回送消息发送到指定计算机，并从该计算机接收对应的 ICMP 回送答复消息以作为异步操作。 此重载将允许您为操作指定超时值并指定用于发送和接收的缓冲区。</summary>
        <returns>表示异步操作的任务对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>> 已发送的 ICMP 数据包，并收到响应后，将完成对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
      </Parameters>
      <Docs>
        <param name="address">一个 IP 地址，它标识作为 ICMP 回送消息目标的计算机。</param>
        <param name="timeout">（发送回送消息后）等待 ICMP 回送答复消息的最大毫秒数。</param>
        <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，它包含要与 ICMP 回送消息一起发送并在 ICMP 回送应答消息中返回的数据。 该数组包含的字节数不能超过 65,500 个字节。</param>
        <param name="options">一个 <see cref="T:System.Net.NetworkInformation.PingOptions" /> 对象，用于控制 ICMP 回显消息数据包的碎片和生存时间值。</param>
        <summary>使用指定的数据缓冲区将 Internet 控制消息协议 (ICMP) 回送消息发送到具有指定的 <see cref="T:System.Net.IPAddress" /> 的计算机，并从该计算机接收对应的 ICMP 回送答复消息以作为异步操作。 利用此重载，您可以指定操作的超时值和用于进行发送和接收的缓冲区，并可以控制 ICMP 回送消息数据包的碎片和生存时间值。</summary>
        <returns>表示异步操作的任务对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>> 已发送的 ICMP 数据包，并收到响应后，将完成对象。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="address" /> 为 <see langword="null" />。  
  
或 
 <paramref name="buffer" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="timeout" /> 小于零。</exception>
        <exception cref="T:System.InvalidOperationException">对 <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" /> 的调用正在进行中。</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">发送或接收 ICMP 消息时引发异常。 请参见内部异常，以确切地了解所引发的异常。</exception>
        <exception cref="T:System.Net.Sockets.SocketException"><paramref name="address" /> 不是有效的 IP 地址。</exception>
        <exception cref="T:System.ObjectDisposedException">已释放此对象。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="buffer" /> 的大小超过 65,500 字节。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">作为 ICMP 回送消息的目标的计算机。 为此参数指定的值可以是主机名，也可以是以字符串形式表示的 IP 地址。</param>
        <param name="timeout">（发送回送消息后）等待 ICMP 回送答复消息的最大毫秒数。</param>
        <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，它包含要与 ICMP 回送消息一起发送并在 ICMP 回送应答消息中返回的数据。 该数组包含的字节数不能超过 65,500 个字节。</param>
        <param name="options">一个 <see cref="T:System.Net.NetworkInformation.PingOptions" /> 对象，用于控制 ICMP 回显消息数据包的碎片和生存时间值。</param>
        <summary>使用指定的数据缓冲区将 Internet 控制消息协议 (ICMP) 回送消息发送到指定计算机，并从该计算机接收对应的 ICMP 回送答复消息以作为异步操作。 利用此重载，您可以指定操作的超时值和用于进行发送和接收的缓冲区，并可以控制 ICMP 回送消息数据包的碎片和生存时间值。</summary>
        <returns>表示异步操作的任务对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>> 已发送的 ICMP 数据包，并收到响应后，将完成对象。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放由 <see cref="T:System.Net.NetworkInformation.Ping" /> 类的实例使用的所有资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
如果在调用任何方法<xref:System.Net.NetworkInformation.Ping>已被释放的对象，你收到<xref:System.ObjectDisposedException>。

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>