<Type Name="Ping" FullName="System.Net.NetworkInformation.Ping">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cc00d57ce6356a2a133f00722352bceb41134894" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36552340" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Ping : System.ComponentModel.Component, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Ping extends System.ComponentModel.Component implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.NetworkInformation.Ping" />
  <TypeSignature Language="VB.NET" Value="Public Class Ping&#xA;Inherits Component&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Ping : System::ComponentModel::Component, IDisposable" />
  <TypeSignature Language="F#" Value="type Ping = class&#xA;    inherit Component&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Ping</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.MonoTODO("IPv6 support is missing")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Allows an application to determine whether a remote computer is accessible over the network.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 应用程序使用<xref:System.Net.NetworkInformation.Ping>类以检测是否可访问远程计算机。  
  
 网络拓扑可确定是否<xref:System.Net.NetworkInformation.Ping>成功联系远程主机。 状态和配置代理服务器、 网络地址转换 (NAT) 设备或防火墙可能会阻止<xref:System.Net.NetworkInformation.Ping>无法成功。 成功<xref:System.Net.NetworkInformation.Ping>只是指示远程主机可访问网络上; 不能保证更高的级别服务 （例如 Web 服务器上） 在远程主机上是否存在。  
  
 此类提供类似于 Ping.exe 命令行工具的功能。 <xref:System.Net.NetworkInformation.Ping.Send%2A>和<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法从该计算机将 Internet 控制消息协议 (ICMP) 回显请求消息发送到远程计算机并等待 ICMP 回显回复消息。 ICMP 消息的详细说明，请参阅 RFC 792，可用在[ https://www.ietf.org ](https://www.ietf.org/)。  
  
 与使用以下类型<xref:System.Net.NetworkInformation.Ping>类，下面将详细说明。  
  
|**类型名称**|**说明**|  
|-------------------|---------------------|  
|<xref:System.Net.NetworkInformation.IPStatus>|定义描述结果的 ICMP 回送请求消息的状态代码。|  
|<xref:System.Net.NetworkInformation.PingOptions>|允许你配置或检索控制请求数据包的次数的设置，可以将其转发 (<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>)，以及是否可以分片 (<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A> )。|  
|<xref:System.Net.NetworkInformation.PingReply>|包含 ICMP 回送请求的结果。|  
|<xref:System.Net.NetworkInformation.PingException>|不可恢复的错误发生时引发。|  
|<xref:System.Net.NetworkInformation.PingCompletedEventArgs>|包含与关联的数据<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件，这并时引发<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用完成或被取消。|  
|<xref:System.Net.NetworkInformation.PingCompletedEventHandler>|提供的回调方法的委托时调用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用完成或被取消。|  
  
 <xref:System.Net.NetworkInformation.Ping.Send%2A>和<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法返回在答复<xref:System.Net.NetworkInformation.PingReply>对象。 <xref:System.Net.NetworkInformation.PingReply.Status%2A?displayProperty=nameWithType>属性返回<xref:System.Net.NetworkInformation.IPStatus>值以指示请求的结果。  
  
 在发送请求，你必须指定远程计算机。 你可以执行此操作通过提供名称字符串，字符串格式的 IP 地址的主机或<xref:System.Net.IPAddress>对象。  
  
 你还可以指定任何以下类型的信息：  
  
-   若要与请求一起发送的数据。 指定`buffer`，可了解特定大小的数据包传送到和从远程主机和网络路径的最大传输单元所需的时间量。 (请参阅<xref:System.Net.NetworkInformation.Ping.Send%2A>或<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>重载采用`buffer`参数。)  
  
-   是否可能在传输过程中存在碎片 ICMP 回送数据包。 (请参阅<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性和<xref:System.Net.NetworkInformation.Ping.Send%2A>或<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>重载采用`options`参数。)  
  
-   多少次如路由器或网关，在它到达目标计算机或将被丢弃之前，可以转发数据包的路由的节点。 (请参阅<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>和<xref:System.Net.NetworkInformation.Ping.Send%2A>或<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>重载采用`options`参数。)  
  
-   时间限制，必须间隔内收到答复。 (请参阅<xref:System.Net.NetworkInformation.Ping.Send%2A>或<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>重载采用`timeout`参数。  
  
 <xref:System.Net.NetworkInformation.Ping>类提供了用于发送请求的同步和异步方法。 如果你的应用程序应阻止等待答复时，请使用<xref:System.Net.NetworkInformation.Ping.Send%2A>方法; 这些方法是同步。 如果你的应用程序不应阻塞，则使用异步<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法。 调用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>在它自己从线程池自动分配的线程中执行。 异步操作完成后，它会发出<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 应用程序使用<xref:System.Net.NetworkInformation.PingCompletedEventHandler>委托来指定将为调用的方法<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 你必须添加<xref:System.Net.NetworkInformation.PingCompletedEventHandler>到之前调用的事件的委托<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>。 该委托的方法接收<xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象，其中包含<xref:System.Net.NetworkInformation.PingReply>介绍的结果的对象<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。  
  
 不能使用的同一个实例<xref:System.Net.NetworkInformation.Ping>类以生成多个同时进行的 ICMP 回送请求。 调用<xref:System.Net.NetworkInformation.Ping.Send%2A>时<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用正在进行中或调用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>多次所有以前的调用已完成原因之前<xref:System.InvalidOperationException>。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Net.NetworkInformation.Ping>类同步。  
  
 [!code-cpp[NCLPingSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingSync/CPP/syncping.cpp#1)]
 [!code-csharp[NCLPingSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingSync/CS/syncping.cs#1)]  
  
 下面的代码示例演示如何使用<xref:System.Net.NetworkInformation.Ping>类以异步方式。  
  
 [!code-cpp[NCLPingASync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#1)]
 [!code-csharp[NCLPingASync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Ping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Ping();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.Ping" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的代码示例演示如何创建<xref:System.Net.NetworkInformation.Ping>实例。 完整示例位于<xref:System.Net.NetworkInformation.Ping>类概述。  
  
 [!code-cpp[NCLPingAsync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#2)]
 [!code-csharp[NCLPingAsync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="ping.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="ping.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to releases only unmanaged resources.</param>
        <summary>Releases the unmanaged resources used by the <see cref="T:System.Net.NetworkInformation.Ping" /> object, and optionally disposes of the managed resources.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法称为由公共`Dispose()`方法和<xref:System.ComponentModel.Component.Finalize%2A>方法。 公共`Dispose()`方法调用受保护<xref:System.Net.NetworkInformation.Ping.Dispose%2A>方法替换`disposing`参数设置为`true`。 <xref:System.ComponentModel.Component.Finalize%2A> 调用`Dispose`与`disposing`设置为`false`。  
  
 当`disposing`参数是`true`，此方法释放由任何托管对象持有的全部资源此<xref:System.Net.NetworkInformation.Ping>对象引用。 此方法调用每个引用对象的 `Dispose()` 方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPingCompleted">
      <MemberSignature Language="C#" Value="protected void OnPingCompleted (System.Net.NetworkInformation.PingCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnPingCompleted(class System.Net.NetworkInformation.PingCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnPingCompleted (e As PingCompletedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnPingCompleted(System::Net::NetworkInformation::PingCompletedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnPingCompleted : System.Net.NetworkInformation.PingCompletedEventArgs -&gt; unit" Usage="ping.OnPingCompleted e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.NetworkInformation.PingCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Net.NetworkInformation.PingCompletedEventArgs" /> object that contains event data.</param>
        <summary>Raises the <see cref="E:System.Net.NetworkInformation.Ping.PingCompleted" /> event.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 继承自的类<xref:System.Net.NetworkInformation.Ping>类可以重写此方法以执行其他任务，例如日志记录中包含的数据`e`参数。  
  
 引发事件时，将通过委托调用事件处理程序。 有关详细信息，请参阅[处理和引发事件](~/docs/standard/events/index.md)。  
  
 <xref:System.Net.NetworkInformation.Ping.OnPingCompleted%2A> 方法还允许派生类对事件进行处理而不必附加委托。 这是在派生类中处理事件的首选技术。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>在重写<see cref="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" />在派生类中，一定要调用基类的<see cref="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)" />方法，以便已注册的委托对事件进行接收。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PingCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.NetworkInformation.PingCompletedEventHandler PingCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.NetworkInformation.PingCompletedEventHandler PingCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.NetworkInformation.Ping.PingCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PingCompleted As PingCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Net::NetworkInformation::PingCompletedEventHandler ^ PingCompleted;" />
      <MemberSignature Language="F#" Value="member this.PingCompleted : System.Net.NetworkInformation.PingCompletedEventHandler " Usage="member this.PingCompleted : System.Net.NetworkInformation.PingCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when an asynchronous operation to send an Internet Control Message Protocol (ICMP) echo message and receive the corresponding ICMP echo reply message completes or is canceled.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 应用程序使用<xref:System.Net.NetworkInformation.Ping.PingCompleted>通过之一调用的事件，以获取有关的完成状态和数据的信息收集<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法。 <xref:System.Net.NetworkInformation.PingCompletedEventHandler>提供委托的调用时调用回调方法<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>引发此事件。  
  
   
  
## Examples  
 下面的代码示例演示指定回调方法以<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 完整示例位于<xref:System.Net.NetworkInformation.Ping>类概述。  
  
 [!code-cpp[NCLPingAsync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#2)]
 [!code-csharp[NCLPingAsync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Attempts to send an Internet Control Message Protocol (ICMP) echo message to a remote computer and receive a corresponding ICMP echo reply message from the remote computer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 按任何返回的 IP 地址<xref:System.Net.NetworkInformation.Ping.Send%2A>重载可以是来自恶意的远程计算机。 不到远程计算机使用此连接。 使用 DNS 来确定你想要连接的计算机的 IP 地址。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="address">An <see cref="T:System.Net.IPAddress" /> that identifies the computer that is the destination for the ICMP echo message.</param>
        <summary>Attempts to send an Internet Control Message Protocol (ICMP) echo message to the computer that has the specified <see cref="T:System.Net.IPAddress" />, and receive a corresponding ICMP echo reply message from that computer.</summary>
        <returns>A <see cref="T:System.Net.NetworkInformation.PingReply" /> object that provides information about the ICMP echo reply message, if one was received, or describes the reason for the failure if no message was received.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将发送到指定主机`address`32 <xref:System.Byte> ICMP 回送消息具有的数据缓冲区。 方法等待用于 ICMP 回显回复消息 5 秒。 如果在该时间内未收到答复，该方法返回与<xref:System.Net.NetworkInformation.PingReply.Status%2A>属性设置为<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
 此重载使用的数据包分段和数据包转发的默认设置。 包含 ICMP 回送消息数据包可以分段在传输过程中如果数据包总大小超过可以传输的最大的数据包大小通过本地和远程计算机之间的路由节点之一。 若要防止有碎片，使用之一<xref:System.Net.NetworkInformation.Ping.Send%2A>采用的方法`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性`true`。 当<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`和数据包总大小超过在本地和远程计算机之间的路由节点之一可以传输的最大的数据包大小，ICMP 回显请求将失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。 数据包或数据包片段 （如果含有碎片） 可以由路由节点 128 时间之前转发被丢弃。 若要更改此设置，请使用<xref:System.Net.NetworkInformation.Ping.Send%2A>采用重载`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>属性设置为所需的值。 如果数据包不会转发指定的次数后访问其目标，则会丢弃该数据包，并且 ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 下面的代码示例演示如何调用此方法。  
  
 [!code-cpp[NCLPingSampler#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#3)]
 [!code-csharp[NCLPingSampler#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> is in progress.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要发送 ICMP 回显消息。  关联的枚举： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress);" />
      <MemberSignature Language="F#" Value="member this.Send : string -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send hostNameOrAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">A <see cref="T:System.String" /> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
        <summary>Attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer.</summary>
        <returns>A <see cref="T:System.Net.NetworkInformation.PingReply" /> object that provides information about the ICMP echo reply message, if one was received, or provides the reason for the failure, if no message was received.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法可发送 32 <xref:System.Byte> ICMP 回送消息具有的数据缓冲区。 方法等待用于 ICMP 回显回复消息 5 秒。 如果在该时间内未收到答复，该方法返回与<xref:System.Net.NetworkInformation.PingReply.Status%2A>属性设置为<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
 此重载使用的数据包分段和数据包转发的默认设置。 包含 ICMP 回送消息数据包可以分段在传输过程中如果数据包总大小超过可以传输的最大的数据包大小通过本地和远程计算机之间的路由节点之一。 若要防止有碎片，使用之一<xref:System.Net.NetworkInformation.Ping.Send%2A>采用的方法`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性`true`。 当<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`和数据包总大小超过在本地和远程计算机之间的路由节点之一可以传输的最大的数据包大小，ICMP 回显请求将失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。 数据包或数据包片段 （如果含有碎片） 可以由路由节点 128 时间之前转发被丢弃。 若要更改此设置，请使用<xref:System.Net.NetworkInformation.Ping.Send%2A>采用重载`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>属性设置为所需的值。 如果数据包不会转发指定的次数后访问其目标，则会丢弃该数据包，并且 ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 下面的代码示例演示如何调用此方法。  
  
 [!code-cpp[NCLPingSampler#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#2)]
 [!code-csharp[NCLPingSampler#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> is <see langword="null" /> or is an empty string ("").</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> is in progress.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要发送 ICMP 回显消息。 关联的枚举： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address">An <see cref="T:System.Net.IPAddress" /> that identifies the computer that is the destination for the ICMP echo message.</param>
        <param name="timeout">An <see cref="T:System.Int32" /> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <summary>Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <see cref="T:System.Net.IPAddress" />, and receive a corresponding ICMP echo reply message from that computer. This method allows you to specify a time-out value for the operation.</summary>
        <returns>A <see cref="T:System.Net.NetworkInformation.PingReply" /> object that provides information about the ICMP echo reply message if one was received, or provides the reason for the failure if no message was received.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在指定的时间内未收到 ICMP 回显回复消息`timeout`参数，则 ICMP 回送失败，和<xref:System.Net.NetworkInformation.PingReply.Status%2A>属性设置为<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定用于非常小的数字时`timeout`，可以收到 Ping 答复即使`timeout`所经历毫秒。  
  
 此重载使用的数据包分段和数据包转发的默认设置。 包含 ICMP 回送消息数据包可以分段在传输过程中如果数据包总大小超过可以传输的最大的数据包大小通过本地和远程计算机之间的路由节点之一。 若要防止有碎片，使用之一<xref:System.Net.NetworkInformation.Ping.Send%2A>采用的方法`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性`true`。 当<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`和数据包总大小超过在本地和远程计算机之间的路由节点之一可以传输的最大的数据包大小，ICMP 回显请求将失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。  
  
 数据包或数据包片段可以由路由节点 128 时间之前转发被丢弃。 若要更改此设置，请使用<xref:System.Net.NetworkInformation.Ping.Send%2A>采用重载`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>属性设置为所需的值。 如果数据包不会转发指定的次数后访问其目标，则会丢弃该数据包，并且 ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 有关示例，演示如何调用<xref:System.Net.NetworkInformation.Ping.Send%2A>方法，请参阅<xref:System.Net.NetworkInformation.Ping>类概述。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> is in progress.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要发送 ICMP 回显消息。  关联的枚举： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">A <see cref="T:System.String" /> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
        <param name="timeout">An <see cref="T:System.Int32" /> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <summary>Attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This method allows you to specify a time-out value for the operation.</summary>
        <returns>A <see cref="T:System.Net.NetworkInformation.PingReply" /> object that provides information about the ICMP echo reply message if one was received, or provides the reason for the failure if no message was received.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在指定的时间内未收到 ICMP 回显回复消息`timeout`参数，则 ICMP 回送失败，和<xref:System.Net.NetworkInformation.PingReply.Status%2A>属性设置为<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定用于非常小的数字时`timeout`，可以收到 Ping 答复即使`timeout`所经历毫秒。  
  
 此重载使用的数据包分段和数据包转发的默认设置。 包含 ICMP 回送消息数据包可以分段在传输过程中如果数据包总大小超过可以传输的最大的数据包大小通过本地和远程计算机之间的路由节点之一。 若要防止有碎片，使用之一<xref:System.Net.NetworkInformation.Ping.Send%2A>采用的方法`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性`true`。 当<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`和数据包总大小超过在本地和远程计算机之间的路由节点之一可以传输的最大的数据包大小，ICMP 回显请求将失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。 数据包或数据包片段 （如果含有碎片） 可以由路由节点 128 时间之前转发被丢弃。 若要更改此设置，请使用<xref:System.Net.NetworkInformation.Ping.Send%2A>采用重载`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>属性设置为所需的值。 如果数据包不会转发指定的次数后访问其目标，则会丢弃该数据包，并且 ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 有关示例，演示如何调用<xref:System.Net.NetworkInformation.Ping.Send%2A>方法，请参阅<xref:System.Net.NetworkInformation.Ping>类概述。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> is <see langword="null" /> or is an empty string ("").</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> is in progress.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要发送 ICMP 回显消息。  关联的枚举： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer, buffer As Byte()) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int * byte[] -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">An <see cref="T:System.Net.IPAddress" /> that identifies the computer that is the destination for the ICMP echo message.</param>
        <param name="timeout">An <see cref="T:System.Int32" /> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
        <summary>Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <see cref="T:System.Net.IPAddress" />, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.</summary>
        <returns>A <see cref="T:System.Net.NetworkInformation.PingReply" /> object that provides information about the ICMP echo reply message, if one was received, or provides the reason for the failure, if no message was received. The method will return <see cref="F:System.Net.NetworkInformation.IPStatus.PacketTooBig" /> if the packet exceeds the Maximum Transmission Unit (MTU).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在指定的时间内未收到 ICMP 回显回复消息`timeout`参数，则 ICMP 回送失败，和<xref:System.Net.NetworkInformation.PingReply.Status%2A>属性设置为<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定用于非常小的数字时`timeout`，可以收到 Ping 答复即使`timeout`所经历毫秒。  
  
 此重载使用的数据包分段和数据包转发的默认设置。 包含 ICMP 回送消息数据包可以分段在传输过程中如果数据包总大小超过可以传输的最大的数据包大小通过本地和远程计算机之间的路由节点之一。 若要防止有碎片，使用之一<xref:System.Net.NetworkInformation.Ping.Send%2A>采用的方法`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性`true`。 当<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`和数据包总大小超过在本地和远程计算机之间的路由节点之一可以传输的最大的数据包大小，ICMP 回显请求将失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。  
  
 数据包或数据包片段可以由路由节点 128 时间之前转发被丢弃。 若要更改此设置，请使用<xref:System.Net.NetworkInformation.Ping.Send%2A>采用重载`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>属性设置为所需的值。 如果数据包不会转发指定的次数后访问其目标，则会丢弃该数据包，并且 ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 下面的代码示例演示如何调用此方法。  
  
 [!code-cpp[NCLPingSampler#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#6)]
 [!code-csharp[NCLPingSampler#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The size of <paramref name="buffer" /> exceeds 65500 bytes.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <see langword="null" />.  -or-  <paramref name="buffer" /> is <see langword="null" />, or the <paramref name="buffer" /> size is greater than 65500 bytes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> is in progress.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要发送 ICMP 回显消息。  关联的枚举： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer, buffer As Byte()) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int * byte[] -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">A <see cref="T:System.String" /> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
        <param name="timeout">An <see cref="T:System.Int32" /> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
        <summary>Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.</summary>
        <returns>A <see cref="T:System.Net.NetworkInformation.PingReply" /> object that provides information about the ICMP echo reply message if one was received, or provides the reason for the failure if no message was received.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在指定的时间内未收到 ICMP 回显回复消息`timeout`参数，则 ICMP 回送失败，和<xref:System.Net.NetworkInformation.PingReply.Status%2A>属性设置为<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定用于非常小的数字时`timeout`，可以收到 Ping 答复即使`timeout`所经历毫秒。  
  
 此重载使用的数据包分段和数据包转发的默认设置。 包含 ICMP 回送消息数据包可以分段在传输过程中如果数据包总大小超过可以传输的最大的数据包大小通过本地和远程计算机之间的路由节点之一。 若要防止有碎片，使用之一<xref:System.Net.NetworkInformation.Ping.Send%2A>采用的方法`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性`true`。 当<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`和数据包总大小超过在本地和远程计算机之间的路由节点之一可以传输的最大的数据包大小，ICMP 回显请求将失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。  
  
 数据包或数据包片段可以由路由节点 128 时间之前转发被丢弃。 若要更改此设置，请使用<xref:System.Net.NetworkInformation.Ping.Send%2A>采用重载`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>属性设置为所需的值。 如果数据包不会转发指定的次数后访问其目标，则会丢弃该数据包，并且 ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 有关示例，演示如何调用<xref:System.Net.NetworkInformation.Ping.Send%2A>重载中，请参阅<xref:System.Net.NetworkInformation.Ping>类概述。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The size of <paramref name="buffer" /> exceeds 65500 bytes.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> is <see langword="null" /> or is an empty string ("").  -or-  <paramref name="buffer" /> is <see langword="null" />, or the <paramref name="buffer" /> size is greater than 65500 bytes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> is in progress.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要发送 ICMP 回显消息。  关联的枚举： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (address, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
      </Parameters>
      <Docs>
        <param name="address">An <see cref="T:System.Net.IPAddress" /> that identifies the computer that is the destination for the ICMP echo message.</param>
        <param name="timeout">An <see cref="T:System.Int32" /> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
        <param name="options">A <see cref="T:System.Net.NetworkInformation.PingOptions" /> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.</param>
        <summary>Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <see cref="T:System.Net.IPAddress" /> and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP echo message packet.</summary>
        <returns>A <see cref="T:System.Net.NetworkInformation.PingReply" /> object that provides information about the ICMP echo reply message, if one was received, or provides the reason for the failure, if no message was received. The method will return <see cref="F:System.Net.NetworkInformation.IPStatus.PacketTooBig" /> if the packet exceeds the Maximum Transmission Unit (MTU).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在指定的时间内未收到 ICMP 回显回复消息`timeout`参数，则 ICMP 回送失败，和<xref:System.Net.NetworkInformation.PingReply.Status%2A>属性设置为<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定用于非常小的数字时`timeout`，可以收到 Ping 答复即使`timeout`所经历毫秒。  
  
 如果<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性是`true`和数据包总大小超过在本地和远程计算机之间的路由节点之一可以传输的最大的数据包大小，ICMP 回显请求将失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。  
  
 使用<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>属性指定在到达其目标之前，可以将其转发 ICMP 回送消息的最大次数。 如果数据包不会转发指定的次数后访问其目标，则会丢弃该数据包，并且 ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 下面的代码示例演示如何调用此方法。  
  
 [!code-cpp[NCLPingSampler#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#5)]
 [!code-csharp[NCLPingSampler#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The size of <paramref name="buffer" /> exceeds 65500 bytes.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <see langword="null" />.  -or-  <paramref name="buffer" /> is <see langword="null" />, or the <paramref name="buffer" /> size is greater than 65500 bytes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> is in progress.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要发送 ICMP 回显消息。  关联的枚举： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public System.Net.NetworkInformation.PingReply Send (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.NetworkInformation.PingReply Send(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function Send (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions) As PingReply" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::NetworkInformation::PingReply ^ Send(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.Send : string * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Net.NetworkInformation.PingReply" Usage="ping.Send (hostNameOrAddress, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PingReply</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">A <see cref="T:System.String" /> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
        <param name="timeout">An <see cref="T:System.Int32" /> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
        <param name="options">A <see cref="T:System.Net.NetworkInformation.PingOptions" /> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.</param>
        <summary>Attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP packet.</summary>
        <returns>A <see cref="T:System.Net.NetworkInformation.PingReply" /> object that provides information about the ICMP echo reply message if one was received, or provides the reason for the failure if no message was received.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在指定的时间内未收到 ICMP 回显回复消息`timeout`参数，则 ICMP 回送失败，和<xref:System.Net.NetworkInformation.PingReply.Status%2A>属性设置为<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定用于非常小的数字时`timeout`，可以收到 Ping 答复即使`timeout`所经历毫秒。  
  
 如果<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性是`true`和数据包总大小超过在本地和远程计算机之间的路由节点之一可以传输的最大的数据包大小，ICMP 回显请求将失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。  
  
 使用<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>属性指定在到达其目标之前，可以将其转发 ICMP 回送消息的最大次数。 如果数据包不会转发指定的次数后访问其目标，则会丢弃该数据包，并且 ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 下面的代码示例演示如何调用此方法。  
  
 [!code-cpp[NCLPingSampler#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#4)]
 [!code-csharp[NCLPingSampler#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The size of <paramref name="buffer" /> exceeds 65500 bytes.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> is <see langword="null" /> or is a zero length string.  -or-  <paramref name="buffer" /> is <see langword="null" />, or the <paramref name="buffer" /> size is greater than 65500 bytes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> is in progress.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要发送 ICMP 回显消息。  关联的枚举： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendAsync">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to a computer, and receive a corresponding ICMP echo reply message from that computer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这些方法不会导致应用程序的主线程阻塞。 如果你想要阻止等待 ICMP 回送答复消息时，使用<xref:System.Net.NetworkInformation.Ping.Send%2A>方法。  
  
> [!NOTE]
>  按任何返回的 IP 地址<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法可以是来自恶意的远程计算机。 不到远程计算机使用此连接。 使用 DNS 来确定你想要连接的计算机的 IP 地址。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * obj -&gt; unit" Usage="ping.SendAsync (address, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">An <see cref="T:System.Net.IPAddress" /> that identifies the computer that is the destination for the ICMP echo message.</param>
        <param name="userToken">An object that is passed to the method invoked when the asynchronous operation completes.</param>
        <summary>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the computer that has the specified <see cref="T:System.Net.IPAddress" />, and receive a corresponding ICMP echo reply message from that computer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法将异步发送回送消息，并完成操作后 （成功或失败），返回到你的应用程序的状态。 调用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法时不应阻止你的应用程序。 每次调用此方法在线程池中自动分配一个单独的线程中执行。 异步操作完成后，它会发出<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 若要指定时，将调用的方法<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>引发事件，必须添加<xref:System.Net.NetworkInformation.PingCompletedEventHandler>到之前调用的事件的委托<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>。 该委托的方法接收<xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象，其中包含<xref:System.Net.NetworkInformation.PingReply>介绍的结果的对象<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象继承<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>属性。 此属性包含`userToken`对象传递给<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。  
  
> [!NOTE]
>  如果你的应用程序应阻止等待答复时，请使用其中一个<xref:System.Net.NetworkInformation.Ping.Send%2A>方法; 这些方法是同步。  
  
 此方法可发送 32 <xref:System.Byte> ICMP 回送消息具有的数据缓冲区。 方法等待用于 ICMP 回显回复消息 5 秒。 如果在该时间内未收到答复，该方法返回与<xref:System.Net.NetworkInformation.PingReply.Status%2A>属性设置为<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
 此重载使用的数据包分段和数据包转发的默认设置。 包含 ICMP 回送消息数据包可以分段在传输过程中如果数据包总大小超过可以传输的最大的数据包大小通过本地和远程计算机之间的路由节点之一。 若要防止有碎片，使用之一<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>采用的方法`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性`true`。 当<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`和数据包总大小超过在本地和远程计算机之间的路由节点之一可以传输的最大的数据包大小，ICMP 回显请求将失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。  
  
 数据包或数据包片段可以由路由节点 128 时间之前转发被丢弃。 若要更改此设置，请使用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>采用重载`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>属性设置为所需的值。 如果数据包不会转发指定的次数后访问其目标，则会丢弃该数据包，并且 ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 有关演示如何调用的代码示例<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法，请参阅<xref:System.Net.NetworkInformation.Ping>类概述。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">A call to the <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> method is in progress.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> is not a valid IP address.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要发送 ICMP 回显消息。  关联的枚举： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">A <see cref="T:System.String" /> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
        <param name="userToken">An object that is passed to the method invoked when the asynchronous operation completes.</param>
        <summary>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法将异步发送回送消息，并完成操作后 （成功或失败），返回到你的应用程序的状态。 调用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法时不应阻止你的应用程序。 每次调用此方法在线程池中自动分配一个单独的线程中执行。 异步操作完成后，它会发出<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 若要指定时，将调用的方法<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>引发事件，必须添加<xref:System.Net.NetworkInformation.PingCompletedEventHandler>到之前调用的事件的委托<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>。 该委托的方法接收<xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象，其中包含<xref:System.Net.NetworkInformation.PingReply>介绍的结果的对象<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象继承<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>属性。 此属性包含`userToken`对象传递给<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。  
  
> [!NOTE]
>  如果你的应用程序应阻止等待答复时，请使用<xref:System.Net.NetworkInformation.Ping.Send%2A>方法; 这些方法是同步。  
  
 此方法可发送 32 <xref:System.Byte> ICMP 回送消息具有的数据缓冲区。 方法等待用于 ICMP 回显回复消息 5 秒。 如果在该时间内未收到答复此方法返回与<xref:System.Net.NetworkInformation.PingReply.Status%2A>属性设置为<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
 此重载使用的数据包分段和数据包转发的默认设置。 包含 ICMP 回送消息数据包可以分段在传输过程中如果数据包总大小超过可以传输的最大的数据包大小通过本地和远程计算机之间的路由节点之一。 若要防止有碎片，使用之一<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>采用的方法`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性`true`。 当<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`和数据包总大小超过在本地和远程计算机之间的路由节点之一可以传输的最大的数据包大小，ICMP 回显请求将失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。  
  
 数据包或数据包片段可以由路由节点 128 时间之前转发被丢弃。 若要更改此设置，请使用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>采用重载`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>属性设置为所需的值。 如果数据包不会转发指定的次数后访问其目标，则会丢弃该数据包，并且 ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 有关演示如何调用的代码示例<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法，请参阅<xref:System.Net.NetworkInformation.Ping>类概述。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> is <see langword="null" /> or is an empty string ("").</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)" /> method is in progress.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="hostNameOrAddress" /> could not be resolved to a valid IP address.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要发送 ICMP 回显消息。  关联的枚举： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">An <see cref="T:System.Net.IPAddress" /> that identifies the computer that is the destination for the ICMP echo message.</param>
        <param name="timeout">An <see cref="T:System.Int32" /> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <param name="userToken">An object that is passed to the method invoked when the asynchronous operation completes.</param>
        <summary>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the computer that has the specified <see cref="T:System.Net.IPAddress" />, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法将异步发送回送消息，并完成操作后 （成功或失败），返回到你的应用程序的状态。 调用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法时不应阻止你的应用程序。 在线程池中自动分配一个单独的线程中执行每个调用。 异步操作完成后，它会发出<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 应用程序使用<xref:System.Net.NetworkInformation.PingCompletedEventHandler>委托来指定时，将调用该方法<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>引发事件。 你必须添加<xref:System.Net.NetworkInformation.PingCompletedEventHandler>到之前调用的事件的委托<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>。 该委托的方法接收<xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象，其中包含<xref:System.Net.NetworkInformation.PingReply>介绍的结果的对象<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象继承<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>属性。 此属性包含`userToken`对象传递给<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。  
  
 如果你的应用程序应阻止等待答复时，请使用<xref:System.Net.NetworkInformation.Ping.Send%2A>方法; 这些方法是同步。  
  
 如果在指定的时间内未收到 ICMP 回显回复消息`timeout`参数，则 ICMP 回送失败，和<xref:System.Net.NetworkInformation.PingReply.Status%2A>属性设置为<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定用于非常小的数字时`timeout`，可以收到 Ping 答复即使`timeout`所经历毫秒。  
  
 此重载使用的数据包分段和数据包转发的默认设置。 包含 ICMP 回送消息数据包可以分段在传输过程中如果数据包总大小超过可以传输的最大的数据包大小通过本地和远程计算机之间的路由节点之一。 若要防止有碎片，使用之一<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>采用的方法`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性`true`。 当<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`和数据包总大小超过在本地和远程计算机之间的路由节点之一可以传输的最大的数据包大小，ICMP 回显请求将失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。 数据包或数据包片段 （如果含有碎片） 可以由路由节点 128 时间之前转发被丢弃。 若要更改此设置，请使用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>采用重载`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>属性设置为所需的值。 如果数据包不会转发指定的次数后访问其目标，则会丢弃该数据包，并且 ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 有关演示如何调用的代码示例<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>重载中，请参阅<xref:System.Net.NetworkInformation.Ping>类概述。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)" /> method is in progress.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> is not a valid IP address.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要发送 ICMP 回显消息。  关联的枚举： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">A <see cref="T:System.String" /> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
        <param name="timeout">An <see cref="T:System.Int32" /> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <param name="userToken">An object that is passed to the method invoked when the asynchronous operation completes.</param>
        <summary>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法将异步发送回送消息，并完成操作后 （成功或失败），返回到你的应用程序的状态。 调用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法时不应阻止你的应用程序。 在线程池中自动分配一个单独的线程中执行每个调用。 异步操作完成后，它会发出<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 应用程序使用<xref:System.Net.NetworkInformation.PingCompletedEventHandler>委托来指定时，将调用该方法<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>引发事件。 你必须添加<xref:System.Net.NetworkInformation.PingCompletedEventHandler>到之前调用的事件的委托<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>。 该委托的方法接收<xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象，其中包含<xref:System.Net.NetworkInformation.PingReply>介绍的结果的对象<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象继承<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>属性。 此属性包含`userToken`对象传递给<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。  
  
 如果你的应用程序应阻止等待答复时，请使用<xref:System.Net.NetworkInformation.Ping.Send%2A>方法; 这些方法是同步。  
  
 如果在指定的时间内未收到 ICMP 回显回复消息`timeout`参数，则 ICMP 回送失败，和<xref:System.Net.NetworkInformation.PingReply.Status%2A>属性设置为<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定用于非常小的数字时`timeout`，可以收到 Ping 答复即使`timeout`所经历毫秒。  
  
 此重载使用的数据包分段和数据包转发的默认设置。 包含 ICMP 回送消息数据包可以分段在传输过程中如果数据包总大小超过可以传输的最大的数据包大小通过本地和远程计算机之间的路由节点之一。 若要防止有碎片，使用之一<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>采用的方法`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性`true`。 当<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`和数据包总大小超过在本地和远程计算机之间的路由节点之一可以传输的最大的数据包大小，ICMP 回显请求将失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。 数据包或数据包片段 （如果含有碎片） 可以由路由节点 128 时间之前转发被丢弃。 若要更改此设置，请使用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>采用重载`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>属性设置为所需的值。 如果数据包不会转发指定的次数后访问其目标，则会丢弃该数据包，并且 ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 有关演示如何调用的代码示例<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法，请参阅<xref:System.Net.NetworkInformation.Ping>类概述。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> is <see langword="null" /> or is an empty string ("").</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> is in progress.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="hostNameOrAddress" /> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="hostNameOrAddress" /> could not be resolved to a valid IP address.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要发送 ICMP 回显消息。  关联的枚举： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, byte[] buffer, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, buffer As Byte(), userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * byte[] * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, buffer, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">An <see cref="T:System.Net.IPAddress" /> that identifies the computer that is the destination for the ICMP echo message.</param>
        <param name="timeout">An <see cref="T:System.Int32" /> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
        <param name="userToken">An object that is passed to the method invoked when the asynchronous operation completes.</param>
        <summary>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <see cref="T:System.Net.IPAddress" />, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将异步发送回送消息，并完成操作后 （成功或失败），返回到你的应用程序的状态。 调用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法时不应阻止你的应用程序。 在线程池中自动分配一个单独的线程中执行每个调用。 异步操作完成后，它会发出<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 若要指定时，将调用的方法<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>引发事件，必须添加<xref:System.Net.NetworkInformation.PingCompletedEventHandler>到之前调用的事件的委托<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>。 该委托的方法接收<xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象，其中包含<xref:System.Net.NetworkInformation.PingReply>介绍的结果的对象<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象继承<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>属性。 此属性包含`userToken`对象传递给<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。  
  
> [!NOTE]
>  如果你的应用程序阻止等待答复时，使用<xref:System.Net.NetworkInformation.Ping.Send%2A>方法; 这些方法是同步。  
  
 如果在指定的时间内未收到 ICMP 回显回复消息`timeout`参数，则 ICMP 回送失败，和<xref:System.Net.NetworkInformation.PingReply.Status%2A>属性设置为<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定用于非常小的数字时`timeout`，可以收到 Ping 答复即使`timeout`所经历毫秒。  
  
 此重载使用的数据包分段和数据包转发的默认设置。 包含 ICMP 回送消息数据包可以分段在传输过程中如果数据包总大小超过可以传输的最大的数据包大小通过本地和远程计算机之间的路由节点之一。 若要防止有碎片，使用之一<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>采用的方法`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性`true`。 当<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`和数据包总大小超过在本地和远程计算机之间的路由节点之一可以传输的最大的数据包大小，ICMP 回显请求将失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。 数据包或数据包片段 （如果含有碎片） 可以由路由节点 128 时间之前转发被丢弃。 若要更改此设置，请使用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>采用重载`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>属性设置为所需的值。 如果数据包不会转发指定的次数后访问其目标，则会丢弃该数据包，并且 ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 有关演示如何调用的代码示例<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>重载中，请参阅<xref:System.Net.NetworkInformation.Ping>类概述。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <see langword="null" />.  -or-  <paramref name="buffer" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> is in progress.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> is not a valid IP address.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <exception cref="T:System.ArgumentException">The size of <paramref name="buffer" /> exceeds 65500 bytes.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要发送 ICMP 回显消息。  关联的枚举： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, byte[] buffer, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * byte[] * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, buffer, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">A <see cref="T:System.String" /> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
        <param name="timeout">An <see cref="T:System.Int32" /> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
        <param name="userToken">An object that is passed to the method invoked when the asynchronous operation completes.</param>
        <summary>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法将异步发送回送消息，并完成操作后 （成功或失败），返回到你的应用程序的状态。 调用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法时不应阻止你的应用程序。 在线程池中自动分配一个单独的线程中执行每个调用。 异步操作完成后，它会发出<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 应用程序使用<xref:System.Net.NetworkInformation.PingCompletedEventHandler>委托来指定时，将调用该方法<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>引发事件。 你必须添加<xref:System.Net.NetworkInformation.PingCompletedEventHandler>到之前调用的事件的委托<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>。 该委托的方法接收<xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象，其中包含<xref:System.Net.NetworkInformation.PingReply>介绍的结果的对象<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象继承<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>属性。 此属性包含`userToken`对象传递给<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。  
  
 如果你的应用程序应阻止等待答复时，请使用<xref:System.Net.NetworkInformation.Ping.Send%2A>方法; 这些方法是同步。  
  
 如果在指定的时间内未收到 ICMP 回显回复消息`timeout`参数，则 ICMP 回送失败，和<xref:System.Net.NetworkInformation.PingReply.Status%2A>属性设置为<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定用于非常小的数字时`timeout`，可以收到 Ping 答复即使`timeout`所经历毫秒。  
  
 此重载使用的数据包分段和数据包转发的默认设置。 包含 ICMP 回送消息数据包可以分段在传输过程中如果数据包总大小超过可以传输的最大的数据包大小通过本地和远程计算机之间的路由节点之一。 若要防止有碎片，使用之一<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>采用的方法`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性`true`。 当<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>是`true`和数据包总大小超过在本地和远程计算机之间的路由节点之一可以传输的最大的数据包大小，ICMP 回显请求将失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。 数据包或数据包片段 （如果含有碎片） 可以由路由节点 128 时间之前转发被丢弃。 若要更改此设置，请使用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>采用重载`options`参数，并设置<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>属性设置为所需的值。 如果数据包不会转发指定的次数后访问其目标，则会丢弃该数据包，并且 ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 下面的代码示例演示如何调用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>重载中，请参阅<xref:System.Net.NetworkInformation.Ping>类概述。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> is <see langword="null" /> or is an empty string ("").  -or-  <paramref name="buffer" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> is in progress.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="hostNameOrAddress" /> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="hostNameOrAddress" /> could not be resolved to a valid IP address.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <exception cref="T:System.ArgumentException">The size of <paramref name="buffer" /> exceeds 65500 bytes.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要发送 ICMP 回显消息。  关联的枚举： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions * obj -&gt; unit" Usage="ping.SendAsync (address, timeout, buffer, options, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">An <see cref="T:System.Net.IPAddress" /> that identifies the computer that is the destination for the ICMP echo message.</param>
        <param name="timeout">An <see cref="T:System.Int32" /> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
        <param name="options">A <see cref="T:System.Net.NetworkInformation.PingOptions" /> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.</param>
        <param name="userToken">An object that is passed to the method invoked when the asynchronous operation completes.</param>
        <summary>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <see cref="T:System.Net.IPAddress" />, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP echo message packet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法将异步发送回送消息，并完成操作后 （成功或失败），返回到你的应用程序的状态。 调用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法时不能阻止你的应用程序。 在线程池中自动分配一个单独的线程中执行每个调用。 异步操作完成后，它会发出<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 应用程序使用<xref:System.Net.NetworkInformation.PingCompletedEventHandler>委托来指定时，将调用该方法<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>引发事件。 你必须添加<xref:System.Net.NetworkInformation.PingCompletedEventHandler>到之前调用的事件的委托<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>。 该委托的方法接收<xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象，其中包含<xref:System.Net.NetworkInformation.PingReply>介绍的结果的对象<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象继承<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>属性。 此属性包含`userToken`对象传递给<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。  
  
 如果你的应用程序阻止等待答复时，使用<xref:System.Net.NetworkInformation.Ping.Send%2A>方法; 这些方法是同步。  
  
 如果在指定的时间内未收到 ICMP 回显回复消息`timeout`参数，则 ICMP 回送失败，和<xref:System.Net.NetworkInformation.PingReply.Status%2A>属性设置为<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定用于非常小的数字时`timeout`，可以收到 Ping 答复即使`timeout`所经历毫秒。  
  
 如果<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性是`true`和数据包总大小超过在本地和远程计算机之间的路由节点之一可以传输的最大的数据包大小，ICMP 回显请求将失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。  
  
 使用<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>属性指定在到达其目标之前，可以将其转发 ICMP 回送消息的最大次数。 如果数据包不会转发指定的次数后访问其目标，则会丢弃该数据包，并且 ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 下面的代码示例演示如何调用此方法。 回调方法的实现，请参阅<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法重载示例部分。  
  
 下面的代码示例需要以下命名空间：  
  
 [!code-cpp[NCLPingSampler#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#0)]
 [!code-csharp[NCLPingSampler#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#0)]  
  
 下面的代码示例将以异步方式发送 ICMP 回显消息。  
  
 [!code-cpp[NCLPingSampler#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPingSampler/CPP/pingtest.cpp#7)]
 [!code-csharp[NCLPingSampler#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPingSampler/CS/pingtest.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <see langword="null" />.  -or-  <paramref name="buffer" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> is in progress.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> is not a valid IP address.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <exception cref="T:System.ArgumentException">The size of <paramref name="buffer" /> exceeds 65500 bytes.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要发送 ICMP 回显消息。  关联的枚举： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions, userToken As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options, System::Object ^ userToken);" />
      <MemberSignature Language="F#" Value="member this.SendAsync : string * int * byte[] * System.Net.NetworkInformation.PingOptions * obj -&gt; unit" Usage="ping.SendAsync (hostNameOrAddress, timeout, buffer, options, userToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">A <see cref="T:System.String" /> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
        <param name="timeout">A <see cref="T:System.Byte" /> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
        <param name="buffer">An <see cref="T:System.Int32" /> value that specifies the maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <param name="options">A <see cref="T:System.Net.NetworkInformation.PingOptions" /> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.</param>
        <param name="userToken">An object that is passed to the method invoked when the asynchronous operation completes.</param>
        <summary>Asynchronously attempts to send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer. This overload allows you to specify a time-out value for the operation and control fragmentation and Time-to-Live values for the ICMP packet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法将异步发送回送消息，并完成操作后 （成功或失败），返回到你的应用程序的状态。 调用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>方法时不能阻止你的应用程序。 在线程池中自动分配一个单独的线程中执行每个调用。 异步操作完成后，它会发出<xref:System.Net.NetworkInformation.Ping.PingCompleted>事件。 应用程序使用<xref:System.Net.NetworkInformation.PingCompletedEventHandler>委托来指定时，将调用该方法<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>引发事件。 你必须添加<xref:System.Net.NetworkInformation.PingCompletedEventHandler>到之前调用的事件的委托<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>。 该委托的方法接收<xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象，其中包含<xref:System.Net.NetworkInformation.PingReply>介绍的结果的对象<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。 <xref:System.Net.NetworkInformation.PingCompletedEventArgs>对象继承<xref:System.ComponentModel.AsyncCompletedEventArgs.UserState%2A>属性。 此属性包含`userToken`对象传递给<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>调用。  
  
 如果你的应用程序应阻止等待答复时，请使用<xref:System.Net.NetworkInformation.Ping.Send%2A>方法; 这些方法是同步。  
  
 如果在指定的时间内未收到 ICMP 回显回复消息`timeout`参数，则 ICMP 回送失败，和<xref:System.Net.NetworkInformation.PingReply.Status%2A>属性设置为<xref:System.Net.NetworkInformation.IPStatus.TimedOut>。  
  
> [!NOTE]
>  指定用于非常小的数字时`timeout`，可以收到 Ping 答复即使`timeout`所经历毫秒。  
  
 如果<xref:System.Net.NetworkInformation.PingOptions.DontFragment%2A>属性是`true`和数据包总大小超过在本地和远程计算机之间的路由节点之一可以传输的最大的数据包大小，ICMP 回显请求将失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.PacketTooBig>。  
  
 使用<xref:System.Net.NetworkInformation.PingOptions.Ttl%2A>属性指定在到达其目标之前，可以将其转发 ICMP 回送消息的最大次数。 如果数据包不会转发指定的次数后访问其目标，则会丢弃该数据包，并且 ICMP 回送请求失败。 在此情况下，<xref:System.Net.NetworkInformation.PingReply.Status%2A>设置为<xref:System.Net.NetworkInformation.IPStatus.TtlExpired>。  
  
   
  
## Examples  
 下面的代码示例演示如何调用此方法。  
  
 [!code-cpp[NCLPingAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclPingAsync/CPP/asyncping.cpp#1)]
 [!code-csharp[NCLPingAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclPingAsync/CS/asyncping.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="hostNameOrAddress" /> is <see langword="null" /> or is an empty string ("").  -or-  <paramref name="buffer" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> is in progress.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="address" /> is an IPv6 address and the local computer is running an operating system earlier than Windows 2000.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="hostNameOrAddress" /> could not be resolved to a valid IP address.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <exception cref="T:System.ArgumentException">The size of <paramref name="buffer" /> exceeds 65500 bytes.</exception>
        <permission cref="T:System.Net.NetworkInformation.NetworkInformationPermission">若要发送 ICMP 回显消息。  关联的枚举： <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsyncCancel">
      <MemberSignature Language="C#" Value="public void SendAsyncCancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsyncCancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendAsyncCancel" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendAsyncCancel ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendAsyncCancel();" />
      <MemberSignature Language="F#" Value="member this.SendAsyncCancel : unit -&gt; unit" Usage="ping.SendAsyncCancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancels all pending asynchronous requests to send an Internet Control Message Protocol (ICMP) echo message and receives a corresponding ICMP echo reply message.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法来终止到任何调用<xref:System.Net.NetworkInformation.Ping.SendAsync%2A>未完成。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SendPingAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Sends an Internet Control Message Protocol (ICMP) echo message to a computer, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
      </Parameters>
      <Docs>
        <param name="address">An IP address that identifies the computer that is the destination for the ICMP echo message.</param>
        <summary>Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <see cref="T:System.Net.IPAddress" />, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation.</summary>
        <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.  The task object representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>> 对象已发送 ICMP 数据包，并收到响应后将完成。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" /> is in progress.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> is not a valid IP address.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync hostNameOrAddress" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
        <summary>Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation.</summary>
        <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.  The task object representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>> 对象已发送 ICMP 数据包，并收到响应后将完成。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address">An IP address that identifies the computer that is the destination for the ICMP echo message.</param>
        <param name="timeout">The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <summary>Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <see cref="T:System.Net.IPAddress" />, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation.</summary>
        <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.  The task object representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>> 对象已发送 ICMP 数据包，并收到响应后将完成。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
        <param name="timeout">The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <summary>Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation.</summary>
        <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.  The task object representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>> 对象已发送 ICMP 数据包，并收到响应后将完成。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer, buffer As Byte()) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int * byte[] -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">An IP address that identifies the computer that is the destination for the ICMP echo message.</param>
        <param name="timeout">The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
        <summary>Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <see cref="T:System.Net.IPAddress" />, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation and a buffer to use for send and receive.</summary>
        <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.  The task object representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>> 对象已发送 ICMP 数据包，并收到响应后将完成。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <see langword="null" />.  -or-  <paramref name="buffer" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" /> is in progress.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> is not a valid IP address.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <exception cref="T:System.ArgumentException">The size of <paramref name="buffer" /> exceeds 65,500 bytes.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout, byte[] buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte()) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int * byte[] -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout, buffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
        <param name="timeout">The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
        <summary>Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation and a buffer to use for send and receive.</summary>
        <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.  The task object representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>> 对象已发送 ICMP 数据包，并收到响应后将完成。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (System.Net.IPAddress address, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(class System.Net.IPAddress address, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::Net::IPAddress ^ address, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : System.Net.IPAddress * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (address, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
      </Parameters>
      <Docs>
        <param name="address">An IP address that identifies the computer that is the destination for the ICMP echo message.</param>
        <param name="timeout">The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
        <param name="options">A <see cref="T:System.Net.NetworkInformation.PingOptions" /> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.</param>
        <summary>Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <see cref="T:System.Net.IPAddress" />, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation, a buffer to use for send and receive, and control fragmentation and Time-to-Live values for the ICMP echo message packet.</summary>
        <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.  The task object representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>> 对象已发送 ICMP 数据包，并收到响应后将完成。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="address" /> is <see langword="null" />.  -or-  <paramref name="buffer" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> is less than zero.</exception>
        <exception cref="T:System.InvalidOperationException">A call to <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" /> is in progress.</exception>
        <exception cref="T:System.Net.NetworkInformation.PingException">An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">
          <paramref name="address" /> is not a valid IP address.</exception>
        <exception cref="T:System.ObjectDisposedException">This object has been disposed.</exception>
        <exception cref="T:System.ArgumentException">The size of <paramref name="buffer" /> exceeds 65,500 bytes.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendPingAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt; SendPingAsync (string hostNameOrAddress, int timeout, byte[] buffer, System.Net.NetworkInformation.PingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.NetworkInformation.PingReply&gt; SendPingAsync(string hostNameOrAddress, int32 timeout, unsigned int8[] buffer, class System.Net.NetworkInformation.PingOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function SendPingAsync (hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions) As Task(Of PingReply)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::NetworkInformation::PingReply ^&gt; ^ SendPingAsync(System::String ^ hostNameOrAddress, int timeout, cli::array &lt;System::Byte&gt; ^ buffer, System::Net::NetworkInformation::PingOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.SendPingAsync : string * int * byte[] * System.Net.NetworkInformation.PingOptions -&gt; System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;" Usage="ping.SendPingAsync (hostNameOrAddress, timeout, buffer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Ping</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.NetworkInformation.PingReply&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostNameOrAddress" Type="System.String" />
        <Parameter Name="timeout" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Net.NetworkInformation.PingOptions" />
      </Parameters>
      <Docs>
        <param name="hostNameOrAddress">The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
        <param name="timeout">The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</param>
        <param name="buffer">A <see cref="T:System.Byte" /> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</param>
        <param name="options">A <see cref="T:System.Net.NetworkInformation.PingOptions" /> object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.</param>
        <summary>Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation, a buffer to use for send and receive, and control fragmentation and Time-to-Live values for the ICMP echo message packet.</summary>
        <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />.  The task object representing the asynchronous operation.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>> 对象已发送 ICMP 数据包，并收到响应后将完成。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.Ping.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>