<Type Name="PeerNameRegistration" FullName="System.Net.PeerToPeer.PeerNameRegistration">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7cd8457b2e09ced1cfe602c70df106251aec2f71" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30460901" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class PeerNameRegistration : IDisposable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable PeerNameRegistration extends System.Object implements class System.IDisposable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Net.PeerToPeer.PeerNameRegistration" />
  <TypeSignature Language="VB.NET" Value="Public Class PeerNameRegistration&#xA;Implements IDisposable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class PeerNameRegistration : IDisposable, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Net</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>在一个 <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.PeerName" /> 或一组群中注册 <see cref="T:System.Net.PeerToPeer.Cloud" />。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 注册创建 （或更新） 与关联的所有信息<xref:System.Net.PeerToPeer.PeerName>中对等云或云。  
  
 可以有多个<xref:System.Net.PeerToPeer.PeerNameRegistration>具有相同的对等名称的对象。 在这种情况下，如果安全的对等机名称，每个实例表示<xref:System.Net.PeerToPeer.PeerNameRegistration>中另一个云。 但是，如果未保护的对等名称，则可以注册在相同的云多次，提供每个注册将来自不同的进程。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PeerNameRegistration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.PeerToPeer.PeerNameRegistration.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PeerNameRegistration();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> 类的新默认实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回类型的新默认实例<xref:System.Net.PeerToPeer.PeerNameRegistration>。 它不在构造过程中执行对等名称注册。  
  
 实例化后使用此构造函数的对象，调用方应填充之前调用的实例中的相应字段<xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>或<xref:System.Net.PeerToPeer.PeerNameRegistration.Stop%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PeerNameRegistration (System.Net.PeerToPeer.PeerName name, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.PeerToPeer.PeerName name, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Net.PeerToPeer.PeerName,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As PeerName, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PeerNameRegistration(System::Net::PeerToPeer::PeerName ^ name, int port);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.Net.PeerToPeer.PeerName" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="name">要注册的 <see cref="T:System.Net.PeerToPeer.PeerName" /> 对象。</param>
        <param name="port">指定要注册的端口号的整数值。</param>
        <summary>使用指定的名称和端口号初始化 <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此构造函数创建一个实例，它将用于注册所有源地址 (包括 ipv6 和 IPv4) 和对等当前参与的所有云提供的端口。  如果在成功时，请构造对象指定<xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A>和<xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A>进行填充。  
  
 如果对等机名称进行保护，在以前注册<xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>当前参与对等方，<xref:System.Net.PeerToPeer.PeerToPeerException>引发。  
  
 此构造函数只创建<xref:System.Net.PeerToPeer.PeerNameRegistration>实例; 不执行注册。 在实例化此构造函数的注册对象和填充其字段之后, 应用程序必须调用<xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>来执行实际的注册。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> 参数不能为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">指定的端口号小于零。  端口号必须大于或等于零且小于 65,535 (0xFFFF)。</exception>
        <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">-   已从此主机注册指定的 <see cref="T:System.Net.PeerToPeer.PeerName" />。  
  
-   远程对等方不具有提供的 <see cref="T:System.Net.PeerToPeer.PeerName" /> 对象的 <see cref="P:System.Net.PeerToPeer.PeerName.Authority" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PeerNameRegistration (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PeerNameRegistration(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">对象的引用，该对象保存反序列化此实例时所需的数据。</param>
        <param name="context">提供反序列化数据的方式的上下文。 也称为序列化数据的源。</param>
        <summary>初始化一个新的可序列化 <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> 对象。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="N:System.Runtime.Serialization" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="P:System.Net.PeerToPeer.PeerNameRegistration.PeerName" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PeerNameRegistration (System.Net.PeerToPeer.PeerName name, int port, System.Net.PeerToPeer.Cloud cloud);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.PeerToPeer.PeerName name, int32 port, class System.Net.PeerToPeer.Cloud cloud) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.PeerToPeer.PeerNameRegistration.#ctor(System.Net.PeerToPeer.PeerName,System.Int32,System.Net.PeerToPeer.Cloud)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PeerNameRegistration(System::Net::PeerToPeer::PeerName ^ name, int port, System::Net::PeerToPeer::Cloud ^ cloud);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.Net.PeerToPeer.PeerName" />
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="cloud" Type="System.Net.PeerToPeer.Cloud" />
      </Parameters>
      <Docs>
        <param name="name">要注册的 <see cref="T:System.Net.PeerToPeer.PeerName" /> 对象。</param>
        <param name="port">指定要注册的端口号的整数值。</param>
        <param name="cloud">
          要在其中注册对等名称的 <see cref="T:System.Net.PeerToPeer.Cloud" />。</param>
        <summary>使用指定的对等名称、端口号和 <see cref="T:System.Net.PeerToPeer.Cloud" /> 初始化 <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此构造函数创建一个实例，它将用于注册所有源地址 （IPv6 和 IPv4）、 提供的端口和指定<xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>。  如果成功构造对象时，填充其属性与指定<xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A>，<xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A>和<xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>。  
  
 如果云参数是`null`，该名称注册使用<xref:System.Net.PeerToPeer.Cloud.Available>快捷方式，初始化默认值<xref:System.Net.PeerToPeer.Cloud.Name%2A>， <xref:System.Net.PeerToPeer.Cloud.Scope%2A>，和<xref:System.Net.PeerToPeer.Cloud.ScopeId%2A>。  
  
 实例化之后,<xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>必须调用方法来注册<xref:System.Net.PeerToPeer.PeerName>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> 参数不能为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">指定的端口号小于零。  端口号必须大于或等于零且小于 65,535 (0xFFFF)。</exception>
        <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">-   已从此主机注册指定的 <see cref="T:System.Net.PeerToPeer.PeerName" />。  
  
-   远程对等方不具有提供的 <see cref="T:System.Net.PeerToPeer.PeerName" /> 对象的 <see cref="P:System.Net.PeerToPeer.PeerName.Authority" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Cloud">
      <MemberSignature Language="C#" Value="public System.Net.PeerToPeer.Cloud Cloud { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.PeerToPeer.Cloud Cloud" />
      <MemberSignature Language="DocId" Value="P:System.Net.PeerToPeer.PeerNameRegistration.Cloud" />
      <MemberSignature Language="VB.NET" Value="Public Property Cloud As Cloud" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::PeerToPeer::Cloud ^ Cloud { System::Net::PeerToPeer::Cloud ^ get(); void set(System::Net::PeerToPeer::Cloud ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.PeerToPeer.Cloud</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要在其中注册此对此 <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.Cloud" /> 对象的 <see cref="P:System.Net.PeerToPeer.PeerNameRecord.PeerName" /> 中的信息。</summary>
        <value>一个 <see cref="T:System.Net.PeerToPeer.Cloud" /> 类型的对象，它指定为其定义此注册的对等群。 默认情况下，此属性设置为 <see langword="null" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Comment">
      <MemberSignature Language="C#" Value="public string Comment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Comment" />
      <MemberSignature Language="DocId" Value="P:System.Net.PeerToPeer.PeerNameRegistration.Comment" />
      <MemberSignature Language="VB.NET" Value="Public Property Comment As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Comment { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置将要在 <see cref="T:System.Net.PeerToPeer.PeerName" /> 中注册的 <see cref="T:System.Net.PeerToPeer.Cloud" /> 对象的其他信息。</summary>
        <value>包含要与 <see cref="T:System.Net.PeerToPeer.PeerName" /> 关联的 <see cref="T:System.Net.PeerToPeer.Cloud" /> 的其他信息的注释。 默认情况下，此属性设置为 <see langword="null" />。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">指定的字符串值大于 39 个 Unicode 字符。</exception>
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public byte[] Data { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Data" />
      <MemberSignature Language="DocId" Value="P:System.Net.PeerToPeer.PeerNameRegistration.Data" />
      <MemberSignature Language="VB.NET" Value="Public Property Data As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Data { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> 对象的应用程序定义的二进制数据。</summary>
        <value>包含与此项关联的二进制数据的字节数组。 默认情况下，此属性设置为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 最大量<xref:System.Net.PeerToPeer.PeerNameRegistration.Data%2A>可提供为 4,096 个字节。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定的 <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.Data" /> 大于 4096 字节。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>释放由 <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> 对象使用的资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当对等节点离开<xref:System.Net.PeerToPeer.Cloud>，因此云不再要求<xref:System.Net.PeerToPeer.PeerNameRegistration>与对等方关联的对象。  注册对象已停止或释放是否是依赖于云是否将重复使用要注册此对等方或其他对等方的对象。 如果在对等主机进行通信而进行缺少注册对象内的任何其他终结点，注册云内的这些终结点必须出现在停止或释放此对象之前。  
  
 如果希望注册多个对等方，云<xref:System.Net.PeerToPeer.PeerNameRegistration.Stop%2A>推荐使用方法; 当云中不再需要的内存，它应返回到通过操作系统<xref:System.Net.PeerToPeer.PeerNameRegistration.Dispose%2A>方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.PeerToPeer.PeerNameRegistration.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放由 <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> 对象使用的所有资源。</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="usage">
          <para>lways 销毁之前调用的 Dispose 方法<see cref="T:System.Net.PeerToPeer.PeerNameRegistration" />对象。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.PeerToPeer.PeerNameRegistration.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          若要释放托管资源和非托管资源，则为 <see langword="True" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
        <summary>释放非托管资源，并（可选）释放由 <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> 对象占用的托管资源。</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="usage">
          <para>始终在发布到的最后一个引用之前调用的 Dispose 方法<see cref="T:System.Net.PeerToPeer.PeerNameRegistration" />对象。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndPointCollection">
      <MemberSignature Language="C#" Value="public System.Net.IPEndPointCollection EndPointCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.IPEndPointCollection EndPointCollection" />
      <MemberSignature Language="DocId" Value="P:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndPointCollection As IPEndPointCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::IPEndPointCollection ^ EndPointCollection { System::Net::IPEndPointCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IPEndPointCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取为其注册关联对等名称的网络终结点的集合。</summary>
        <value>一个 <see cref="P:System.Net.PeerToPeer.PeerNameRecord.EndPointCollection" /> 对象，其中包含为其注册关联对等名称的网络终结点。 除非显式指定，否则对于引用类型，所有属性的默认值均为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在<xref:System.Net>命名空间，<xref:System.Net.IPEndPoint>网络终结点表示为 IP 地址和端口号。  对于 PNRP，必须为每个终结点提供的 IP 地址和端口值。  可以提供的终结点的最大数为 10。 此参数时，将使用自动地址选择`null`。  
  
 如果注册方法使用自动选择要注册的地址，没有方法来确定的要为其注册的对等名称。  也就是说，<xref:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection%2A>属性将不会更新以反映所选择的地址。  
  
 对于多个节点，注册对等机名称时每个<xref:System.Net.PeerToPeer.PeerNameRegistration>不同和<xref:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection%2A>在每个注册实例上定义的属性将不同。 此外，当<xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A>注册到多个<xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>、 每个注册将截然不同和终结点的集合通常将为每个实例不同。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>此对等方将与之通信的终结点的列表不是以不同的方式存储终结点来识别此对等机名称，列表相同。</para>
        </block>
        <altmember cref="T:System.Net.IPEndPointCollection" />
        <altmember cref="P:System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="protected virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.PeerToPeer.PeerNameRegistration.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">保存与 <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> 对象关联的序列化数据。</param>
        <param name="context">包含与 <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> 对象关联的序列化流的目标。</param>
        <summary>使用序列化 <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> 实例所需的数据填充序列化信息对象。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRegistered">
      <MemberSignature Language="C#" Value="public bool IsRegistered ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsRegistered() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.PeerToPeer.PeerNameRegistration.IsRegistered" />
      <MemberSignature Language="VB.NET" Value="Public Function IsRegistered () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsRegistered();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取或设置在 <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.PeerName" /> 属性中指定的对等名称是否向主机上的特定 <see cref="T:System.Net.PeerToPeer.Cloud" /> 进行了注册。</summary>
        <returns>如果为 <see langword="true" />，则说明对等名称向对等主机的 <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.Cloud" /> 进行了注册。 如果为 <see langword="false" />，则说明可以使用 <see cref="M:System.Net.PeerToPeer.PeerNameRegistration.Start" /> 启动注册过程。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">不能注册已经释放的对象。</exception>
        <altmember cref="T:System.Net.PeerToPeer.PeerNameResolver" />
      </Docs>
    </Member>
    <Member MemberName="PeerName">
      <MemberSignature Language="C#" Value="public System.Net.PeerToPeer.PeerName PeerName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.PeerToPeer.PeerName PeerName" />
      <MemberSignature Language="DocId" Value="P:System.Net.PeerToPeer.PeerNameRegistration.PeerName" />
      <MemberSignature Language="VB.NET" Value="Public Property PeerName As PeerName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::PeerToPeer::PeerName ^ PeerName { System::Net::PeerToPeer::PeerName ^ get(); void set(System::Net::PeerToPeer::PeerName ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.PeerToPeer.PeerName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要向对等群注册的对等名称。</summary>
        <value>一个 <see cref="T:System.Net.PeerToPeer.PeerName" /> 类型的对象，其中包含与此 <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> 对象关联的值。 除非显式指定，否则对于引用类型，所有属性的默认值均为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以为多个节点; 注册对等机名称每个<xref:System.Net.PeerToPeer.PeerNameRegistration>实例是不同。 <xref:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection%2A>与每个相应关联属性<xref:System.Net.PeerToPeer.PeerName>实例是不同。 此外，就可以注册多个节点都连接到; 的云的对等名称这些注册的每个都不相同。 对等机名称<xref:System.Net.IPEndPointCollection>在其中每个实例会有所不同。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.PeerToPeer.PeerName.CreateFromPeerHostName(System.String)" />
        <altmember cref="M:System.Net.PeerToPeer.PeerName.CreateRelativePeerName(System.Net.PeerToPeer.PeerName,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Port">
      <MemberSignature Language="C#" Value="public int Port { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Port" />
      <MemberSignature Language="DocId" Value="P:System.Net.PeerToPeer.PeerNameRegistration.Port" />
      <MemberSignature Language="VB.NET" Value="Public Property Port As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Port { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置正在 <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> 对象中注册的对等方使用的 [TCP/IP](http://go.microsoft.com/fwlink?LinkID=98458) 端口号。</summary>
        <value>一个整数值，指示 <see cref="T:System.Net.IPEndPoint" /> 的 TCP 端口号。 除非显式指定，否则此属性的默认值设置为零 (0)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用默认端口<xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>方法仅在未不指定任何终结点时。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定的端口值小于零。  端口号必须大于或等于零且小于 65,535 (0xFFFF)。</exception>
        <altmember cref="M:System.Net.PeerToPeer.PeerName.CreateRelativePeerName(System.Net.PeerToPeer.PeerName,System.String)" />
        <altmember cref="P:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.PeerToPeer.PeerNameRegistration.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将 <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.PeerName" /> 注册到 <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.Cloud" />。 如果未指定 <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection" />，则将自动地址选择和由 <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.Port" /> 属性指定的端口值结合使用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 方法注册中指定的对等名称<xref:System.Net.PeerToPeer.PeerNameRegistration.PeerName%2A>所有源地址的属性和<xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A>构造函数中指定。 仅当未不指定任何终结点时，此方法使用的默认端口。  
  
 如果<xref:System.Net.PeerToPeer.PeerNameRegistration.Cloud%2A>属性是`null`，此方法注册中指定的对等名称<xref:System.Net.PeerToPeer.PeerNameRecord.PeerName%2A>属性使用<xref:System.Net.PeerToPeer.Cloud.Available>字段，这将初始化为默认值<xref:System.Net.PeerToPeer.Cloud.Name%2A>， <xref:System.Net.PeerToPeer.Cloud.Scope%2A>，和<xref:System.Net.PeerToPeer.Cloud.ScopeId%2A>.  
  
 后<xref:System.Net.PeerToPeer.PeerNameRegistration>对象已启动，<xref:System.Net.PeerToPeer.PeerNameRegistration.Stop%2A>方法用于将其停止。  
  
 更新注册，<xref:System.Net.PeerToPeer.PeerNameRegistration.Update%2A>必须使用方法。  
  
   
  
## Examples  
 下面的代码示例创建<xref:System.Net.PeerToPeer.PeerName>并将其注册以及指定的元数据。  
  
 [!code-csharp[NCLPNRPRegisterPeerName#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPNRPRegisterPeerName/CS/RegisterPeerName.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.PeerName" /> 属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象此前让 Dispose() 对其进行调用。</exception>
        <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">-   指定的 <see cref="T:System.Net.PeerToPeer.PeerName" /> 已注册。 <see cref="M:System.Net.PeerToPeer.PeerNameRegistration.Update" /> 方法必须用于更新注册。  
  
-   远程对等方不具有指定 <see cref="T:System.Net.PeerToPeer.PeerName" /> 的 <see cref="P:System.Net.PeerToPeer.PeerName.Authority" />。  
  
-   未指定 <see cref="T:System.Net.PeerToPeer.PeerName" /> 或 <see cref="P:System.Net.PeerToPeer.PeerNameRecord.Data" />；必须提供其中一个。  
  
-   消息或数据元素均无效。 或者，未设置 <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection" /> 或未指定任何数据 blob 或 <see cref="T:System.Net.IPEndPoint" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.PeerToPeer.PeerNameRegistration.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从对等名称注册的所有云中注销 <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.PeerName" /> 属性中指定的对等名称。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 注册过程已停止后，注册对象的状态后等于状态直接正在构造的默认构造函数。 在此状态下，所有其属性假定没有值。 <xref:System.Net.PeerToPeer.PeerNameRegistration.Start%2A>方法可用于重新启动它。  
  
 很可能有相同的对等名称的多个注册对象。  在这种情况下，如果安全的对等机名称，每个实例将表示不同的 PNRP 群中注册。  但是，如果未保护的对等名称，则可以注册在相同的云多次。  
  
 如果此实例已停止，调用此方法无效。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">尚未注册 <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.PeerName" /> 属性。 使用空构造函数构造 <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> 对象时会出现此种情况。 调用 <see cref="M:System.Net.PeerToPeer.PeerNameRegistration.Start" /> 前必须在此实例中填充 <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.PeerName" /> 属性。</exception>
        <exception cref="T:System.ObjectDisposedException">此对象此前让 Dispose() 对其进行调用。</exception>
        <altmember cref="M:System.Net.PeerToPeer.PeerNameRegistration.Update" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.PeerToPeer.PeerNameRegistration.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">保存与 <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> 实例关联的序列化数据。</param>
        <param name="context">包含与 <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> 实例关联的序列化流的目标。</param>
        <summary>实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并返回序列化 <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" /> 实例所需的数据。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public void Update ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Update() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.PeerToPeer.PeerNameRegistration.Update" />
      <MemberSignature Language="VB.NET" Value="Public Sub Update ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Update();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>为在特定 <see cref="T:System.Net.PeerToPeer.Cloud" /> 中注册的节点更新 <see cref="T:System.Net.PeerToPeer.PeerNameRegistration" />。 使用属性中指定的信息执行更新。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所有信息群中都注册此<xref:System.Net.PeerToPeer.PeerName>完全放弃调用之前。  新的数据不会合并到现有注册。  若要更新<xref:System.Net.PeerToPeer.PeerNameRegistration>，第一次更新此实例上的属性，然后调用此方法。  
  
 后<xref:System.Net.PeerToPeer.PeerNameRecord>注册时， <xref:System.Net.PeerToPeer.PeerNameRecord.PeerName%2A> ，无法更新属性。  可能更新记录中的所有其他字段。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.PeerName" /> 属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.ObjectDisposedException">-   尚未注册 <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.PeerName" /> 属性。 <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.PeerName" /> 属性中指定的对等名在一个或多个云中注册之前，无法调用 <see cref="M:System.Net.PeerToPeer.PeerNameRegistration.Update" /> 方法。  
  
-   在注册相应的 <see cref="T:System.Net.PeerToPeer.PeerNameRecord" /> 后，<see cref="P:System.Net.PeerToPeer.PeerNameRegistration.PeerName" /> 属性中指定的对等名会更改。</exception>
        <exception cref="T:System.Net.PeerToPeer.PeerToPeerException">无法注册已处理的对象。</exception>
        <exception cref="T:System.ArgumentNullException">将 <see cref="T:System.Net.PeerToPeer.PeerNameRecord" /> 属性设置为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="UseAutoEndPointSelection">
      <MemberSignature Language="C#" Value="public bool UseAutoEndPointSelection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseAutoEndPointSelection" />
      <MemberSignature Language="DocId" Value="P:System.Net.PeerToPeer.PeerNameRegistration.UseAutoEndPointSelection" />
      <MemberSignature Language="VB.NET" Value="Public Property UseAutoEndPointSelection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseAutoEndPointSelection { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指定当遍历对等网格或 <see cref="P:System.Net.PeerToPeer.PeerNameRegistration.Cloud" /> 时是否使用自动终结点选择。</summary>
        <value>
          如果使用自动终结点选择，则为 <see langword="True" />；如果使用其他某个方法来确定终结点，则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当使用自动终结点选择 (此属性设置为`true`) 在开始之前指定任何终结点信息<xref:System.Net.PeerToPeer.PeerNameRegistration>，系统选择各个终结点，并将其与关联的对等名称发布到所有可用云。  如果未指定端口，将自动选择选择零作为<xref:System.Net.PeerToPeer.PeerNameRegistration.Port%2A>。  
  
 当设置为`false`，则不会执行自动选择上文所述。  这使发布以及数据 blob 的对等名称的注册过程 (所指定的<xref:System.Net.PeerToPeer.PeerNameRecord.Data%2A>属性)。 没有任何终结点都具有名称相关联。  
  
 如果注册方法使用自动选择要注册的地址，没有方法来确定什么样的地址为其<xref:System.Net.PeerToPeer.PeerName>对象已注册。  也就是说，<xref:System.Net.PeerToPeer.PeerNameRegistration.EndPointCollection%2A>属性将不会更新以反映所选择的地址。  
  
 启动对等名称注册后更新此属性不起作用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>