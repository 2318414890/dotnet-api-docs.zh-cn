<Type Name="CollectionAdapters" FullName="System.AddIn.Pipeline.CollectionAdapters">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cda5b936b22052f7b99b2c7e5bd552235a459181" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30359861" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class CollectionAdapters" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit CollectionAdapters extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Pipeline.CollectionAdapters" />
  <TypeSignature Language="VB.NET" Value="Public Class CollectionAdapters" />
  <TypeSignature Language="C++ CLI" Value="public ref class CollectionAdapters abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.AddIn</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="c32db-101">能够实现在外接程序与其宿主应用程序之间传递集合。</span>
      <span class="sxs-lookup">
        <span data-stu-id="c32db-101">Enables collections to be passed between an add-in and its host application.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c32db-102">此类提供方法，以便能够<xref:System.Collections.Generic.IList%601>集合转换为<xref:System.AddIn.Contract.IListContract%601>集合。</span><span class="sxs-lookup"><span data-stu-id="c32db-102">This class provides methods that enable an <xref:System.Collections.Generic.IList%601> collection to be converted to a <xref:System.AddIn.Contract.IListContract%601> collection.</span></span> <span data-ttu-id="c32db-103"><xref:System.AddIn.Contract.IListContract%601>跨隔离边界传递集合并将其转换回<xref:System.Collections.Generic.IList%601>外接程序或主机应用程序可以使用的集合。</span><span class="sxs-lookup"><span data-stu-id="c32db-103">The <xref:System.AddIn.Contract.IListContract%601> collection is passed across the isolation boundary and converted back to an <xref:System.Collections.Generic.IList%601> collection that the add-in or the host application can use.</span></span>  
  
 <span data-ttu-id="c32db-104">集合中的对象必须是可远程处理。</span><span class="sxs-lookup"><span data-stu-id="c32db-104">Objects in collections must be remotable.</span></span> <span data-ttu-id="c32db-105">有关你可以将传递的对象类型的详细信息，请参阅[协定、 视图和适配器](http://msdn.microsoft.com/library/a6460173-9507-4b87-8c07-d4ee245d715c)。</span><span class="sxs-lookup"><span data-stu-id="c32db-105">For more information about the object types that you can pass, see [Contracts, Views, and Adapters](http://msdn.microsoft.com/library/a6460173-9507-4b87-8c07-d4ee245d715c).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ToIList&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;T&gt; ToIList&lt;T&gt; (System.AddIn.Contract.IListContract&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IList`1&lt;!!T&gt; ToIList&lt;T&gt;(class System.AddIn.Contract.IListContract`1&lt;!!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToIList(Of T) (collection As IListContract(Of T)) As IList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::Generic::IList&lt;T&gt; ^ ToIList(System::AddIn::Contract::IListContract&lt;T&gt; ^ collection);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.AddIn.Contract.IListContract&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="c32db-106">列表中所含对象的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c32db-106">The type of objects that are contained in the list.</span>
          </span>
          <span data-ttu-id="c32db-107">
            <c>T</c>必须可序列化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c32db-107">
              <c>T</c> must be serializable.</span>
          </span>
        </typeparam>
        <param name="collection">
          <span data-ttu-id="c32db-108">管线另一端中的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c32db-108">The collection from the other side of the pipeline.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c32db-109">将指定的 <see cref="T:System.AddIn.Contract.IListContract`1" /> 集合转换为 <see cref="T:System.Collections.Generic.IList`1" /> 集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c32db-109">Converts the specified <see cref="T:System.AddIn.Contract.IListContract`1" /> collection to an <see cref="T:System.Collections.Generic.IList`1" /> collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c32db-110">已转换的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c32db-110">The converted collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c32db-111">主机应用程序或外接程序可以使用返回<xref:System.Collections.Generic.IList%601>集合。</span><span class="sxs-lookup"><span data-stu-id="c32db-111">The host application or add-in can use the returned <xref:System.Collections.Generic.IList%601> collection.</span></span> <span data-ttu-id="c32db-112"><xref:System.Collections.Generic.IList%601>集合将有远程的生存期令牌<xref:System.AddIn.Contract.IListContract%601>集合。</span><span class="sxs-lookup"><span data-stu-id="c32db-112">The <xref:System.Collections.Generic.IList%601> collection will have a lifetime token for the remote <xref:System.AddIn.Contract.IListContract%601> collection.</span></span>  
  
 <span data-ttu-id="c32db-113">应使用此方法重载时，才的内容<xref:System.AddIn.Contract.IListContract%601>是可以被直接传递到外接程序和主机 （而不是必须改编到视图类型） 的可序列化类型。</span><span class="sxs-lookup"><span data-stu-id="c32db-113">You should use this method overload only when the contents of the <xref:System.AddIn.Contract.IListContract%601> are serializable types that can be passed directly to the add-in and host (rather than types that must be adapted into views).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c32db-114">下面的示例所述实现主机端适配器管道段[演练： 将集合传递之间主机和外接程序](http://msdn.microsoft.com/library/b532c604-548e-4fab-b11c-377257dd0ee5)。此示例改编自定义`ProcessBooks`方法采用<xref:System.AddIn.Contract.IListContract%601>集合传递从外接程序，并将其转换为<xref:System.Collections.Generic.IList%601>集合，然后可以使用主机应用程序。</span><span class="sxs-lookup"><span data-stu-id="c32db-114">The following example implements a host-side adapter pipeline segment as described [Walkthrough: Passing Collections Between Hosts and Add-Ins](http://msdn.microsoft.com/library/b532c604-548e-4fab-b11c-377257dd0ee5). The example adapts the custom `ProcessBooks` method by taking the <xref:System.AddIn.Contract.IListContract%601> collection passed from the add-in and converting it to an <xref:System.Collections.Generic.IList%601> collection, which the host application can then use.</span></span>  
  
 [!code-csharp[AddInCollectionPipelineAddInSideAdapter#3](~/samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineAddInSideAdapter/cs/LibraryManagerViewToContractAddInAdapter.cs#3)]
 [!code-vb[AddInCollectionPipelineAddInSideAdapter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AddInCollectionPipelineAddInSideAdapter/vb/LibraryManagerViewToContractAddInAdapter.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToIList&lt;TContract,TView&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;TView&gt; ToIList&lt;TContract,TView&gt; (System.AddIn.Contract.IListContract&lt;TContract&gt; collection, Converter&lt;TContract,TView&gt; contractViewAdapter, Converter&lt;TView,TContract&gt; viewContractAdapter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IList`1&lt;!!TView&gt; ToIList&lt;TContract, TView&gt;(class System.AddIn.Contract.IListContract`1&lt;!!TContract&gt; collection, class System.Converter`2&lt;!!TContract, !!TView&gt; contractViewAdapter, class System.Converter`2&lt;!!TView, !!TContract&gt; viewContractAdapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToIList(Of TContract, TView) (collection As IListContract(Of TContract), contractViewAdapter As Converter(Of TContract, TView), viewContractAdapter As Converter(Of TView, TContract)) As IList(Of TView)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TContract, typename TView&gt;&#xA; static System::Collections::Generic::IList&lt;TView&gt; ^ ToIList(System::AddIn::Contract::IListContract&lt;TContract&gt; ^ collection, Converter&lt;TContract, TView&gt; ^ contractViewAdapter, Converter&lt;TView, TContract&gt; ^ viewContractAdapter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;TView&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TContract" />
        <TypeParameter Name="TView" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.AddIn.Contract.IListContract&lt;TContract&gt;" />
        <Parameter Name="contractViewAdapter" Type="System.Converter&lt;TContract,TView&gt;" />
        <Parameter Name="viewContractAdapter" Type="System.Converter&lt;TView,TContract&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TContract">
          <span data-ttu-id="c32db-115">定义传递对象的类型的协定的类型<c>TView</c>跨隔离边界。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c32db-115">The type that defines the contract for passing objects of type <c>TView</c> across the isolation boundary.</span>
          </span>
        </typeparam>
        <typeparam name="TView">
          <span data-ttu-id="c32db-116">定义列表中各个对象的视图的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c32db-116">The type that defines the view of the objects in the list.</span>
          </span>
        </typeparam>
        <param name="collection">
          <span data-ttu-id="c32db-117">传递到管线另一端的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c32db-117">The collection to pass to the other side of the pipeline.</span>
          </span>
        </param>
        <param name="contractViewAdapter">
          <span data-ttu-id="c32db-118">一个将数据从协定中定义的类型改编为视图中的预期类型的转换器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c32db-118">A converter that adapts the data from the type defined in the contract to the type expected in the view.</span>
          </span>
        </param>
        <param name="viewContractAdapter">
          <span data-ttu-id="c32db-119">一个将数据从视图中定义的类型改编为协定预期的类型的转换器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c32db-119">A converter that adapts the data from the type defined in the view to the type expected by the contract.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c32db-120">通过使用转换器适配器将指定的 <see cref="T:System.AddIn.Contract.IListContract`1" /> 集合转换为 <see cref="T:System.Collections.Generic.IList`1" /> 集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c32db-120">Converts a specified <see cref="T:System.AddIn.Contract.IListContract`1" /> collection to an <see cref="T:System.Collections.Generic.IList`1" /> collection by using converter adapters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c32db-121">已转换的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c32db-121">The converted collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c32db-122">使用此方法重载的<xref:System.AddIn.Contract.IListContract%601>包含之前可以将它们传递到外接程序或主机 （而不是简单的可序列化类型，可直接传递） 必须进行适配化的类型的集合。</span><span class="sxs-lookup"><span data-stu-id="c32db-122">Use this method overload for <xref:System.AddIn.Contract.IListContract%601> collections that contain types that must be adapted before they can be passed to the add-in or host (rather than simple serializable types that can be passed directly).</span></span> <span data-ttu-id="c32db-123">主机应用程序或外接程序可以使用返回<xref:System.Collections.Generic.IList%601>集合。</span><span class="sxs-lookup"><span data-stu-id="c32db-123">The host application or add-in can use the returned <xref:System.Collections.Generic.IList%601> collection.</span></span> <span data-ttu-id="c32db-124">它将具有远程的生存期令牌<xref:System.AddIn.Contract.IListContract%601>。</span><span class="sxs-lookup"><span data-stu-id="c32db-124">It will have a lifetime token for the remote <xref:System.AddIn.Contract.IListContract%601>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToIListContract&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.AddIn.Contract.IListContract&lt;T&gt; ToIListContract&lt;T&gt; (System.Collections.Generic.IList&lt;T&gt; collection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AddIn.Contract.IListContract`1&lt;!!T&gt; ToIListContract&lt;T&gt;(class System.Collections.Generic.IList`1&lt;!!T&gt; collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToIListContract(Of T) (collection As IList(Of T)) As IListContract(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::AddIn::Contract::IListContract&lt;T&gt; ^ ToIListContract(System::Collections::Generic::IList&lt;T&gt; ^ collection);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AddIn.Contract.IListContract&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IList&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="c32db-125">列表中所含对象的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c32db-125">The type of objects that are contained in the list.</span>
          </span>
          <span data-ttu-id="c32db-126">
            <c>T</c>必须可序列化。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c32db-126">
              <c>T</c> must be serializable.</span>
          </span>
        </typeparam>
        <param name="collection">
          <span data-ttu-id="c32db-127">要转换的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c32db-127">The collection to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c32db-128">将指定的 <see cref="T:System.Collections.Generic.IList`1" /> 集合转换为 <see cref="T:System.AddIn.Contract.IListContract`1" /> 集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c32db-128">Converts a specified <see cref="T:System.Collections.Generic.IList`1" /> collection to an <see cref="T:System.AddIn.Contract.IListContract`1" /> collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c32db-129">已转换的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c32db-129">The converted collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c32db-130"><xref:System.AddIn.Contract.IListContract%601>集合可以跨外接程序与其主机应用程序之间的隔离边界进行封送。</span><span class="sxs-lookup"><span data-stu-id="c32db-130">The <xref:System.AddIn.Contract.IListContract%601> collection can be marshaled across the isolation boundary between the add-in and its host application.</span></span>  
  
 <span data-ttu-id="c32db-131">应使用此方法重载时，才的内容<xref:System.Collections.Generic.IList%601>集合是可以被直接传递到协定 （而不是必须改编到协定类型） 的可序列化类型。</span><span class="sxs-lookup"><span data-stu-id="c32db-131">You should use this method overload only when the contents of the <xref:System.Collections.Generic.IList%601> collection are serializable types that can be passed directly to the contract (rather than types that must be adapted into contracts).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c32db-132">下面的示例实现的类的定义一个外接程序端适配器管道段。</span><span class="sxs-lookup"><span data-stu-id="c32db-132">The following example implements the class that defines an add-in side adapter pipeline segment.</span></span> <span data-ttu-id="c32db-133">它采用自定义`ProcessBooks`方法采用<xref:System.Collections.Generic.IList%601>集合传递从外接程序视图段，并将其转换为<xref:System.AddIn.Contract.IListContract%601>可以跨到主机的隔离边界封送的集合。</span><span class="sxs-lookup"><span data-stu-id="c32db-133">It adapts the custom `ProcessBooks` method by taking the <xref:System.Collections.Generic.IList%601> collection passed from the add-in view segment and converting it to an <xref:System.AddIn.Contract.IListContract%601> collection that can be marshaled across the isolation boundary to the host.</span></span>  
  
 [!code-csharp[AddInCollectionPipelineHostSideAdapter#4](~/samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineHostSideAdapter/cs/LibraryManagerContractToViewHostAdapter.cs#4)]
 [!code-vb[AddInCollectionPipelineHostSideAdapter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/AddInCollectionPipelineHostSideAdapter/vb/LibraryManagerContractToViewHostAdapter.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToIListContract&lt;TView,TContract&gt;">
      <MemberSignature Language="C#" Value="public static System.AddIn.Contract.IListContract&lt;TContract&gt; ToIListContract&lt;TView,TContract&gt; (System.Collections.Generic.IList&lt;TView&gt; collection, Converter&lt;TView,TContract&gt; viewContractAdapter, Converter&lt;TContract,TView&gt; contractViewAdapter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.AddIn.Contract.IListContract`1&lt;!!TContract&gt; ToIListContract&lt;TView, TContract&gt;(class System.Collections.Generic.IList`1&lt;!!TView&gt; collection, class System.Converter`2&lt;!!TView, !!TContract&gt; viewContractAdapter, class System.Converter`2&lt;!!TContract, !!TView&gt; contractViewAdapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToIListContract(Of TView, TContract) (collection As IList(Of TView), viewContractAdapter As Converter(Of TView, TContract), contractViewAdapter As Converter(Of TContract, TView)) As IListContract(Of TContract)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TView, typename TContract&gt;&#xA; static System::AddIn::Contract::IListContract&lt;TContract&gt; ^ ToIListContract(System::Collections::Generic::IList&lt;TView&gt; ^ collection, Converter&lt;TView, TContract&gt; ^ viewContractAdapter, Converter&lt;TContract, TView&gt; ^ contractViewAdapter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AddIn.Contract.IListContract&lt;TContract&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TView" />
        <TypeParameter Name="TContract" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="collection" Type="System.Collections.Generic.IList&lt;TView&gt;" />
        <Parameter Name="viewContractAdapter" Type="System.Converter&lt;TView,TContract&gt;" />
        <Parameter Name="contractViewAdapter" Type="System.Converter&lt;TContract,TView&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TView">
          <span data-ttu-id="c32db-134">定义列表中各个对象的视图的类型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c32db-134">The type that defines the view of the objects in the list.</span>
          </span>
        </typeparam>
        <typeparam name="TContract">
          <span data-ttu-id="c32db-135">定义传递对象的类型的协定的类型<c>TView</c>跨隔离边界。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c32db-135">The type that defines the contract for passing objects of type <c>TView</c> across the isolation boundary.</span>
          </span>
        </typeparam>
        <param name="collection">
          <span data-ttu-id="c32db-136">要转换的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c32db-136">The collection to convert.</span>
          </span>
        </param>
        <param name="viewContractAdapter">
          <span data-ttu-id="c32db-137">一个将数据从视图中定义的类型改编为协定预期的类型的转换器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c32db-137">A converter that adapts the data from the type defined in the view to the type expected by the contract.</span>
          </span>
        </param>
        <param name="contractViewAdapter">
          <span data-ttu-id="c32db-138">一个将数据从协定中定义的类型改编为视图中的预期类型的转换器。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c32db-138">A converter that adapts the data from the type defined in the contract to the type expected in the view.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c32db-139">通过使用转换器适配器将指定的 <see cref="T:System.Collections.Generic.IList`1" /> 集合转换为 <see cref="T:System.AddIn.Contract.IListContract`1" /> 集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c32db-139">Converts a specified <see cref="T:System.Collections.Generic.IList`1" /> collection to an <see cref="T:System.AddIn.Contract.IListContract`1" /> collection by using converter adapters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c32db-140">已转换的集合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c32db-140">The converted collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c32db-141">使用此方法重载的<xref:System.Collections.Generic.IList%601>包含之前将它们传递给协定 （而不是简单的可序列化类型，可直接传递） 必须改编到协定的类型的集合。</span><span class="sxs-lookup"><span data-stu-id="c32db-141">Use this method overload for <xref:System.Collections.Generic.IList%601> collections that contain types that must be adapted into contracts before they can be passed to the contract (rather than simple serializable types that can be passed directly).</span></span> <span data-ttu-id="c32db-142"><xref:System.AddIn.Contract.IListContract%601>集合可以跨外接程序与其主机应用程序之间的隔离边界进行封送。</span><span class="sxs-lookup"><span data-stu-id="c32db-142">The <xref:System.AddIn.Contract.IListContract%601> collection can be marshaled across the isolation boundary between an add-in and its host application.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>