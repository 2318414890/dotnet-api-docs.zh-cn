<Type Name="BitVector32" FullName="System.Collections.Specialized.BitVector32">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0187e3d43f8844200daecae41659cd7baaa0b83e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30369931" />
  </Metadata>
  <TypeSignature Language="C#" Value="public struct BitVector32" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit BitVector32 extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Specialized.BitVector32" />
  <TypeSignature Language="VB.NET" Value="Public Structure BitVector32" />
  <TypeSignature Language="C++ CLI" Value="public value class BitVector32" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Specialized</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供一个简单结构，该结构以 32 位内存存储布尔值和小整数。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Specialized.BitVector32> 比效率更高<xref:System.Collections.BitArray>的布尔值和小整数内部使用。 A<xref:System.Collections.BitArray>可以根据需要无限期地增长，但它具有的类实例需要的内存和性能开销。 与此相反，<xref:System.Collections.Specialized.BitVector32>只使用 32 位。  
  
 A<xref:System.Collections.Specialized.BitVector32>可以设置结构，以包含小整数的各节或位标志的布尔值，但不是能同时。 A<xref:System.Collections.Specialized.BitVector32.Section>是一个窗口，到<xref:System.Collections.Specialized.BitVector32>并由组成最少数量的可以包含在指定的最大值的连续位<xref:System.Collections.Specialized.BitVector32.CreateSection%2A>。 例如，包含的最大值为 1 的部分由组成仅一位，而包含的最大值为 5 的部分组成的三个位数。 你可以创建<xref:System.Collections.Specialized.BitVector32.Section>最大值为 1，以充当一个布尔值，从而使您能够将整数和布尔值存储在相同<xref:System.Collections.Specialized.BitVector32>。  
  
 可以使用某些成员<xref:System.Collections.Specialized.BitVector32>设置为节，尽管其他成员可以使用一个设置为位标志。 例如，<xref:System.Collections.Specialized.BitVector32.Item%2A?displayProperty=nameWithType>属性是索引器<xref:System.Collections.Specialized.BitVector32>作为部分中，设置和<xref:System.Collections.Specialized.BitVector32.Item%2A?displayProperty=nameWithType>属性是索引器<xref:System.Collections.Specialized.BitVector32>为位标志设置。 <xref:System.Collections.Specialized.BitVector32.CreateMask%2A> 创建一系列可以用于访问中的单个位掩码<xref:System.Collections.Specialized.BitVector32>为位标志设置。  
  
 在使用掩码<xref:System.Collections.Specialized.BitVector32>设置为部分可能会导致意外的结果。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Collections.Specialized.BitVector32>作为位标志的集合。  
  
 [!code-cpp[System.Collections.Specialized.BitVector32_BitFlags#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32_BitFlags/CPP/bitvector32_bitflags.cpp#1)]
 [!code-csharp[System.Collections.Specialized.BitVector32_BitFlags#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32_BitFlags/CS/bitvector32_bitflags.cs#1)]
 [!code-vb[System.Collections.Specialized.BitVector32_BitFlags#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32_BitFlags/VB/bitvector32_bitflags.vb#1)]  
  
 下面的代码示例使用<xref:System.Collections.Specialized.BitVector32>作为章节的集合。  
  
 [!code-cpp[System.Collections.Specialized.BitVector32_Sections#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32_Sections/CPP/bitvector32_sections.cpp#1)]
 [!code-csharp[System.Collections.Specialized.BitVector32_Sections#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32_Sections/CS/bitvector32_sections.cs#1)]
 [!code-vb[System.Collections.Specialized.BitVector32_Sections#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32_Sections/VB/bitvector32_sections.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.BitArray" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Collections.Specialized.BitVector32" /> 结构的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BitVector32 (System.Collections.Specialized.BitVector32 value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Collections.Specialized.BitVector32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.BitVector32.#ctor(System.Collections.Specialized.BitVector32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As BitVector32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BitVector32(System::Collections::Specialized::BitVector32 value);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Collections.Specialized.BitVector32" />
      </Parameters>
      <Docs>
        <param name="value">一个 <see cref="T:System.Collections.Specialized.BitVector32" /> 结构，它包含要复制的数据。</param>
        <summary>初始化 <see cref="T:System.Collections.Specialized.BitVector32" /> 结构的新实例，该实例包含现有 <see cref="T:System.Collections.Specialized.BitVector32" /> 结构中表示的数据。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数是 o （1） 操作。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BitVector32 (int data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.BitVector32.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (data As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BitVector32(int data);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="data" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="data">一个整数，它表示新 <see cref="T:System.Collections.Specialized.BitVector32" /> 的数据。</param>
        <summary>初始化 <see cref="T:System.Collections.Specialized.BitVector32" /> 结构的新实例，该实例包含以整数表示的数据。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数是 o （1） 操作。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateMask">
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>创建一系列屏蔽，这些屏蔽可以用于检索作为位标志设置的 <see cref="T:System.Collections.Specialized.BitVector32" /> 中的单个位。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateMask">
      <MemberSignature Language="C#" Value="public static int CreateMask ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CreateMask() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.BitVector32.CreateMask" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateMask () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int CreateMask();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建一系列屏蔽中的第一个屏蔽，该系列屏蔽可以用于检索作为位标志设置的 <see cref="T:System.Collections.Specialized.BitVector32" /> 中的单个位。</summary>
        <returns>一个屏蔽，它隔离 <see cref="T:System.Collections.Specialized.BitVector32" /> 中的第一个位标志。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用`CreateMask()`在一系列中创建的第一个掩码和`CreateMask(int)`后面的所有屏蔽。  
  
 可以创建多个屏蔽来引用相同的位标志。  
  
 生成的掩码隔离中的唯一一位标志<xref:System.Collections.Specialized.BitVector32>。 你可以组合使用按位或运算创建隔离中的多个位标志的掩码的掩码<xref:System.Collections.Specialized.BitVector32>。  
  
 在使用掩码<xref:System.Collections.Specialized.BitVector32>设置为部分可能会导致意外的结果。  
  
 此方法为 o （1） 运算。  
  
   
  
## Examples  
 下面的代码示例演示如何创建和使用掩码。  
  
 [!code-cpp[System.Collections.Specialized.BitVector32.CreateMasks#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32.CreateMasks/CPP/bitvector32_createmasks.cpp#1)]
 [!code-csharp[System.Collections.Specialized.BitVector32.CreateMasks#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32.CreateMasks/CS/bitvector32_createmasks.cs#1)]
 [!code-vb[System.Collections.Specialized.BitVector32.CreateMasks#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32.CreateMasks/VB/bitvector32_createmasks.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMask">
      <MemberSignature Language="C#" Value="public static int CreateMask (int previous);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 CreateMask(int32 previous) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.BitVector32.CreateMask(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateMask (previous As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int CreateMask(int previous);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="previous" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="previous">指示前一个位标志的屏蔽。</param>
        <summary>在一系列屏蔽中的指定屏蔽后面再创建一个屏蔽，该系列屏蔽可以用于检索作为位标志设置的 <see cref="T:System.Collections.Specialized.BitVector32" /> 中的单个位。</summary>
        <returns>一个屏蔽，它隔离 <see cref="T:System.Collections.Specialized.BitVector32" /> 中 <paramref name="previous" /> 所指向的位标志后面的位标志。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用`CreateMask()`在一系列中创建的第一个掩码和`CreateMask(int)`后面的所有屏蔽。  
  
 可以创建多个屏蔽来引用相同的位标志。  
  
 生成的掩码隔离中的唯一一位标志<xref:System.Collections.Specialized.BitVector32>。 你可以组合使用按位或运算创建隔离中的多个位标志的掩码的掩码<xref:System.Collections.Specialized.BitVector32>。  
  
 在使用掩码<xref:System.Collections.Specialized.BitVector32>设置为部分可能会导致意外的结果。  
  
 此方法为 o （1） 运算。  
  
   
  
## Examples  
 下面的代码示例演示如何创建和使用掩码。  
  
 [!code-cpp[System.Collections.Specialized.BitVector32.CreateMasks#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32.CreateMasks/CPP/bitvector32_createmasks.cpp#1)]
 [!code-csharp[System.Collections.Specialized.BitVector32.CreateMasks#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32.CreateMasks/CS/bitvector32_createmasks.cs#1)]
 [!code-vb[System.Collections.Specialized.BitVector32.CreateMasks#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32.CreateMasks/VB/bitvector32_createmasks.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="previous" /> 指示 <see cref="T:System.Collections.Specialized.BitVector32" /> 中的最后一个位标志。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateSection">
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>创建包含小整数的一系列节。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateSection">
      <MemberSignature Language="C#" Value="public static System.Collections.Specialized.BitVector32.Section CreateSection (short maxValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Specialized.BitVector32/Section CreateSection(int16 maxValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateSection (maxValue As Short) As BitVector32.Section" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Specialized::BitVector32::Section CreateSection(short maxValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.BitVector32+Section</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxValue" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="maxValue">一个 16 位有符号整数，它为新 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 指定最大值。</param>
        <summary>创建一系列包含小整数的节中的第一个 <see cref="T:System.Collections.Specialized.BitVector32.Section" />。</summary>
        <returns>一个 <see cref="T:System.Collections.Specialized.BitVector32.Section" />，它可以保存从零到 <paramref name="maxValue" /> 的数字。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Collections.Specialized.BitVector32.Section>是一个窗口，到<xref:System.Collections.Specialized.BitVector32>并由组成最少数量的可以包含在指定的最大值的连续位<xref:System.Collections.Specialized.BitVector32.CreateSection%2A>。 例如，包含的最大值为 1 的部分由组成仅一位，而包含的最大值为 5 的部分组成的三个位数。 你可以创建<xref:System.Collections.Specialized.BitVector32.Section>最大值为 1，以充当一个布尔值，从而使您能够将整数和布尔值存储在相同<xref:System.Collections.Specialized.BitVector32>。  
  
 如果部分中已存在<xref:System.Collections.Specialized.BitVector32>，那些章节将仍可访问; 但是，重叠部分可能会导致意外的结果。  
  
 此方法为 o （1） 运算。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Collections.Specialized.BitVector32>作为章节的集合。  
  
 [!code-cpp[System.Collections.Specialized.BitVector32_Sections#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32_Sections/CPP/bitvector32_sections.cpp#1)]
 [!code-csharp[System.Collections.Specialized.BitVector32_Sections#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32_Sections/CS/bitvector32_sections.cs#1)]
 [!code-vb[System.Collections.Specialized.BitVector32_Sections#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32_Sections/VB/bitvector32_sections.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="maxValue" /> 小于 1。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateSection">
      <MemberSignature Language="C#" Value="public static System.Collections.Specialized.BitVector32.Section CreateSection (short maxValue, System.Collections.Specialized.BitVector32.Section previous);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Specialized.BitVector32/Section CreateSection(int16 maxValue, valuetype System.Collections.Specialized.BitVector32/Section previous) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateSection (maxValue As Short, previous As BitVector32.Section) As BitVector32.Section" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Specialized::BitVector32::Section CreateSection(short maxValue, System::Collections::Specialized::BitVector32::Section previous);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.BitVector32+Section</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxValue" Type="System.Int16" />
        <Parameter Name="previous" Type="System.Collections.Specialized.BitVector32+Section" />
      </Parameters>
      <Docs>
        <param name="maxValue">一个 16 位有符号整数，它为新 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 指定最大值。</param>
        <param name="previous">
          <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 中的前一个 <see cref="T:System.Collections.Specialized.BitVector32" />。</param>
        <summary>在一系列包含小整数的节中，在指定的 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 后面创建新的 <see cref="T:System.Collections.Specialized.BitVector32.Section" />。</summary>
        <returns>一个 <see cref="T:System.Collections.Specialized.BitVector32.Section" />，它可以保存从零到 <paramref name="maxValue" /> 的数字。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Collections.Specialized.BitVector32.Section>是一个窗口，到<xref:System.Collections.Specialized.BitVector32>并由组成最少数量的可以包含在指定的最大值的连续位<xref:System.Collections.Specialized.BitVector32.CreateSection%2A>。 例如，包含的最大值为 1 的部分由组成仅一位，而包含的最大值为 5 的部分组成的三个位数。 你可以创建<xref:System.Collections.Specialized.BitVector32.Section>最大值为 1，以充当一个布尔值，从而使您能够将整数和布尔值存储在相同<xref:System.Collections.Specialized.BitVector32>。  
  
 如果部分已存在后`previous`中<xref:System.Collections.Specialized.BitVector32>，那些章节将仍可访问; 但是，重叠部分可能会导致意外的结果。  
  
 此方法为 o （1） 运算。  
  
   
  
## Examples  
 下面的代码示例使用<xref:System.Collections.Specialized.BitVector32>作为章节的集合。  
  
 [!code-cpp[System.Collections.Specialized.BitVector32_Sections#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32_Sections/CPP/bitvector32_sections.cpp#1)]
 [!code-csharp[System.Collections.Specialized.BitVector32_Sections#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32_Sections/CS/bitvector32_sections.cs#1)]
 [!code-vb[System.Collections.Specialized.BitVector32_Sections#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32_Sections/VB/bitvector32_sections.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="maxValue" /> 小于 1。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="previous" /> 包括 <see cref="T:System.Collections.Specialized.BitVector32" /> 中的最后一位。  
  
 或  
  
 <paramref name="maxValue" /> 大于 <paramref name="previous" /> 之后的位数可以表示的最大值。</exception>
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public int Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Data" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.BitVector32.Data" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Data As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Data { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获得作为整数的 <see cref="T:System.Collections.Specialized.BitVector32" /> 的值。</summary>
        <value>作为整数的 <see cref="T:System.Collections.Specialized.BitVector32" /> 的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要访问的各个部分的值或位标志，请使用<xref:System.Collections.Specialized.BitVector32.Item%2A>属性。  
  
 检索此属性的值的运算复杂度为 O(1)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.Specialized.BitVector32.Item(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.BitVector32.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">将与当前 <see cref="T:System.Collections.Specialized.BitVector32" /> 进行比较的对象。</param>
        <summary>确定指定对象是否等于 <see cref="T:System.Collections.Specialized.BitVector32" />。</summary>
        <returns>
          如果指定对象等效于该 <see cref="T:System.Collections.Specialized.BitVector32" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对象`o`被视为等于<xref:System.Collections.Specialized.BitVector32>如果的一种`o`与兼容<xref:System.Collections.Specialized.BitVector32>类型如果的值`o`等于的值<xref:System.Collections.Specialized.BitVector32.Data%2A>。  
  
 此方法为 o （1） 运算。  
  
   
  
## Examples  
 下面的代码示例进行比较<xref:System.Collections.Specialized.BitVector32>与另一个<xref:System.Collections.Specialized.BitVector32>与<xref:System.Int32>。  
  
 [!code-cpp[System.Collections.Specialized.BitVector32.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32.Equals/CPP/bitvector32_equals.cpp#1)]
 [!code-csharp[System.Collections.Specialized.BitVector32.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32.Equals/CS/bitvector32_equals.cs#1)]
 [!code-vb[System.Collections.Specialized.BitVector32.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Collections.Specialized.BitVector32.Equals/VB/bitvector32_equals.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.BitVector32.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>作为 <see cref="T:System.Collections.Specialized.BitVector32" /> 的哈希函数。</summary>
        <returns>
          <see cref="T:System.Collections.Specialized.BitVector32" /> 的哈希代码。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 哈希代码<xref:System.Collections.Specialized.BitVector32>基于值的<xref:System.Collections.Specialized.BitVector32.Data%2A>。 两个实例<xref:System.Collections.Specialized.BitVector32>相同的值与<xref:System.Collections.Specialized.BitVector32.Data%2A>还将生成相同的哈希代码。  
  
 此方法为 o （1） 运算。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取或设置指定节或位标志的值。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public int this[System.Collections.Specialized.BitVector32.Section section] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Item(valuetype System.Collections.Specialized.BitVector32/Section)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(section As BitVector32.Section) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int default[System::Collections::Specialized::BitVector32::Section] { int get(System::Collections::Specialized::BitVector32::Section section); void set(System::Collections::Specialized::BitVector32::Section section, int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="section" Type="System.Collections.Specialized.BitVector32+Section" />
      </Parameters>
      <Docs>
        <param name="section">一个 <see cref="T:System.Collections.Specialized.BitVector32.Section" />，它包含要获取或设置的值。</param>
        <summary>获取或设置存储在指定 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 中的值。</summary>
        <value>存储在指定 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 中的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Specialized.BitVector32.Item%2A> [节] 属性是索引器<xref:System.Collections.Specialized.BitVector32>作为部分中，设置和<xref:System.Collections.Specialized.BitVector32.Item%2A>[int] 属性是索引器<xref:System.Collections.Specialized.BitVector32>为位标志设置。  
  
 A<xref:System.Collections.Specialized.BitVector32.Section>是一个窗口，到<xref:System.Collections.Specialized.BitVector32>并由组成最少数量的可以包含在指定的最大值的连续位<xref:System.Collections.Specialized.BitVector32.CreateSection%2A>。 例如，包含的最大值为 1 的部分由组成仅一位，而包含的最大值为 5 的部分组成的三个位数。 你可以创建<xref:System.Collections.Specialized.BitVector32.Section>最大值为 1，以充当一个布尔值，从而使您能够将整数和布尔值存储在相同<xref:System.Collections.Specialized.BitVector32>。  
  
 C# 语言使用关键字进行定义而不是实现索引器<xref:System.Collections.Specialized.BitVector32.Item%2A>属性。 Visual Basic 将 <xref:System.Collections.Specialized.BitVector32.Item%2A> 实现为默认属性，该属性提供相同的索引功能。  
  
 检索此属性的值的运算 o （1）;设置属性也是 o （1） 运算。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16)" />
        <altmember cref="T:System.Collections.Specialized.BitVector32.Section" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public bool this[int bit] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Specialized.BitVector32.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(bit As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool default[int] { bool get(int bit); void set(int bit, bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bit" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bit">一个屏蔽，它指示要获取或设置的位。</param>
        <summary>获取或设置由指定屏蔽指示的位标志的状态。</summary>
        <value>
          如果指定位标志是“开”(1)，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Specialized.BitVector32.Item%2A> [节] 属性是索引器<xref:System.Collections.Specialized.BitVector32>作为部分中，设置和<xref:System.Collections.Specialized.BitVector32.Item%2A>[int] 属性是索引器<xref:System.Collections.Specialized.BitVector32>为位标志设置。  
  
 使用此属性上<xref:System.Collections.Specialized.BitVector32>设置为部分可能会导致意外的结果。  
  
 C# 语言使用关键字进行定义而不是实现索引器<xref:System.Collections.Specialized.BitVector32.Item%2A>属性。 Visual Basic 将 <xref:System.Collections.Specialized.BitVector32.Item%2A> 实现为默认属性，该属性提供相同的索引功能。  
  
 检索此属性的值的运算 o （1）;设置属性也是 o （1） 运算。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.Specialized.BitVector32.CreateMask" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回表示 <see cref="T:System.Collections.Specialized.BitVector32" /> 的字符串。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.BitVector32.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回表示当前 <see cref="T:System.Collections.Specialized.BitVector32" /> 的字符串。</summary>
        <returns>表示当前 <see cref="T:System.Collections.Specialized.BitVector32" /> 的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法重写 <xref:System.Object.ToString%2A?displayProperty=nameWithType>。  
  
 此方法为 o （1） 运算。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (System.Collections.Specialized.BitVector32 value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(valuetype System.Collections.Specialized.BitVector32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Specialized.BitVector32.ToString(System.Collections.Specialized.BitVector32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToString (value As BitVector32) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ToString(System::Collections::Specialized::BitVector32 value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Specialized</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Collections.Specialized.BitVector32" />
      </Parameters>
      <Docs>
        <param name="value">要表示的 <see cref="T:System.Collections.Specialized.BitVector32" />。</param>
        <summary>返回表示指定的 <see cref="T:System.Collections.Specialized.BitVector32" /> 的字符串。</summary>
        <returns>表示指定的 <see cref="T:System.Collections.Specialized.BitVector32" /> 的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法为 o （1） 运算。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
  </Members>
</Type>