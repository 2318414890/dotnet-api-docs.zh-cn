<Type Name="ValidationRule" FullName="System.Windows.Controls.ValidationRule">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="059c36959d769279d4c087a19217e26ab58b5f57" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30628291" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ValidationRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ValidationRule extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.ValidationRule" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValidationRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValidationRule abstract" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供创建自定义规则的一个方式，旨在检查用户输入的有效性。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当你使用[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]数据绑定模型，你可以将相关联<xref:System.Windows.Data.Binding.ValidationRules%2A>与绑定对象。 若要创建自定义规则，请类，实现此子类<xref:System.Windows.Controls.ValidationRule.Validate%2A>方法。 （可选） 使用内置<xref:System.Windows.Controls.ExceptionValidationRule>，这将捕获在源更新过程中引发的异常或<xref:System.Windows.Controls.DataErrorValidationRule>，引起错误的检查<xref:System.ComponentModel.IDataErrorInfo>源对象的实现。  
  
 绑定引擎将检查每个<xref:System.Windows.Controls.ValidationRule>每次传输一个输入的值，其是到绑定源属性绑定目标属性值，即与绑定相关联。  
  
 有关数据验证的详细信息，请参阅[数据绑定概述](~/docs/framework/wpf/data/data-binding-overview.md)。  
  
 有关如何验证在对话框中的用户提供数据的信息，请参阅[对话框概述](~/docs/framework/wpf/app-development/dialog-boxes-overview.md)。  
  
   
  
## Examples  
 下面的示例演示如何实现验证规则。 如果它包含非数字字符或超出了下限和上限，输入的值无效。 如果返回的值<xref:System.Windows.Controls.ValidationResult>是无效的<xref:System.Windows.Controls.ValidationResult.ErrorContent%2A>属性设置为相应的错误消息和<xref:System.Windows.Controls.ValidationResult.IsValid%2A>属性设置为`false`。  
  
 有关完整示例，请参阅[如何： 实现绑定验证](~/docs/framework/wpf/data/how-to-implement-binding-validation.md)。  
  
 [!code-csharp[BindValidation#3](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/AgeRangeRule.cs#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Controls.DataErrorValidationRule" />
    <altmember cref="T:System.Windows.Controls.ExceptionValidationRule" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Controls.ValidationRule" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValidationRule ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationRule.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValidationRule();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Controls.ValidationRule" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValidationRule (System.Windows.Controls.ValidationStep validationStep, bool validatesOnTargetUpdated);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Controls.ValidationStep validationStep, bool validatesOnTargetUpdated) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationRule.#ctor(System.Windows.Controls.ValidationStep,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValidationRule(System::Windows::Controls::ValidationStep validationStep, bool validatesOnTargetUpdated);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="validationStep" Type="System.Windows.Controls.ValidationStep" />
        <Parameter Name="validatesOnTargetUpdated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="validationStep">枚举值之一，指定验证规则的运行时间。</param>
        <param name="validatesOnTargetUpdated">
          如果为 <see langword="true" />，则使验证规则在 <see cref="T:System.Windows.Data.Binding" /> 的目标更新时运行；否则为 <see langword="false" />。</param>
        <summary>使用指定验证步骤以及指示在目标更新时是否运行验证规则的值来初始化 <see cref="T:System.Windows.Controls.ValidationRule" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Validate">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>对值执行验证检查。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public abstract System.Windows.Controls.ValidationResult Validate (object value, System.Globalization.CultureInfo cultureInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Controls.ValidationResult Validate(object value, class System.Globalization.CultureInfo cultureInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationRule.Validate(System.Object,System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Windows::Controls::ValidationResult ^ Validate(System::Object ^ value, System::Globalization::CultureInfo ^ cultureInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ValidationResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="cultureInfo" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="value">要检查的来自绑定目标的值。</param>
        <param name="cultureInfo">要在此规则中使用的区域性。</param>
        <summary>在派生类中重写时，对值执行验证检查。</summary>
        <returns>
          <see cref="T:System.Windows.Controls.ValidationResult" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当你创建的一个子类时，必须实现此方法<xref:System.Windows.Controls.ValidationRule>类使用，以便创建自定义验证规则。  
  
 每次数据绑定引擎传输到绑定源属性 （基础数据） 的绑定目标属性 （从用户输入） 从一个值，它会检查是否有任何<xref:System.Windows.Data.Binding.ValidationRules%2A>为绑定的定义。 如果<xref:System.Windows.Data.Binding.ValidationRules%2A>定义绑定，则引擎将调用<xref:System.Windows.Controls.ValidationRule.Validate%2A>上每个方法<xref:System.Windows.Controls.ValidationRule>直到其中一个发现错误或全部规则都通过。  
  
 有关数据验证的详细信息，请参阅[数据绑定概述](~/docs/framework/wpf/data/data-binding-overview.md)。  
  
   
  
## Examples  
 下面的示例演示如何实现验证规则。 在下面的示例中，输入的值是无效的这是如果它包含非数字字符或超出了下限和上限。 如果输入的值无效，<xref:System.Windows.Controls.ValidationResult.ErrorContent%2A>属性设置为相应的错误消息和<xref:System.Windows.Controls.ValidationResult.IsValid%2A>属性设置为`false`。  
  
 有关完整示例，请参阅[如何： 实现绑定验证](~/docs/framework/wpf/data/how-to-implement-binding-validation.md)。  
  
 [!code-csharp[BindValidation#3](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/AgeRangeRule.cs#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.DataErrorValidationRule" />
        <altmember cref="T:System.Windows.Controls.ExceptionValidationRule" />
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Controls.ValidationResult Validate (object value, System.Globalization.CultureInfo cultureInfo, System.Windows.Data.BindingExpressionBase owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Controls.ValidationResult Validate(object value, class System.Globalization.CultureInfo cultureInfo, class System.Windows.Data.BindingExpressionBase owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationRule.Validate(System.Object,System.Globalization.CultureInfo,System.Windows.Data.BindingExpressionBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Controls::ValidationResult ^ Validate(System::Object ^ value, System::Globalization::CultureInfo ^ cultureInfo, System::Windows::Data::BindingExpressionBase ^ owner);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ValidationResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="cultureInfo" Type="System.Globalization.CultureInfo" />
        <Parameter Name="owner" Type="System.Windows.Data.BindingExpressionBase" />
      </Parameters>
      <Docs>
        <param name="value">要检查的来自绑定目标的值。</param>
        <param name="cultureInfo">要在此规则中使用的区域性。</param>
        <param name="owner">使用测试规则的绑定表达式。</param>
        <summary>对值执行验证检查。</summary>
        <returns>
          <see cref="T:System.Windows.Controls.ValidationResult" /> 对象。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Controls.ValidationResult Validate (object value, System.Globalization.CultureInfo cultureInfo, System.Windows.Data.BindingGroup owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Controls.ValidationResult Validate(object value, class System.Globalization.CultureInfo cultureInfo, class System.Windows.Data.BindingGroup owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationRule.Validate(System.Object,System.Globalization.CultureInfo,System.Windows.Data.BindingGroup)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Controls::ValidationResult ^ Validate(System::Object ^ value, System::Globalization::CultureInfo ^ cultureInfo, System::Windows::Data::BindingGroup ^ owner);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ValidationResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="cultureInfo" Type="System.Globalization.CultureInfo" />
        <Parameter Name="owner" Type="System.Windows.Data.BindingGroup" />
      </Parameters>
      <Docs>
        <param name="value">要检查的来自绑定目标的值。</param>
        <param name="cultureInfo">要在此规则中使用的区域性。</param>
        <param name="owner">使用测试规则的绑定组。</param>
        <summary>对值执行验证检查。</summary>
        <returns>
          <see cref="T:System.Windows.Controls.ValidationResult" /> 对象。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidatesOnTargetUpdated">
      <MemberSignature Language="C#" Value="public bool ValidatesOnTargetUpdated { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidatesOnTargetUpdated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ValidationRule.ValidatesOnTargetUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidatesOnTargetUpdated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidatesOnTargetUpdated { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示当 <see cref="T:System.Windows.Data.Binding" /> 的目标更新时是否运行验证规则。</summary>
        <value>
          如果在 <see cref="T:System.Windows.Data.Binding" /> 的目标更新时运行验证规则，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例检查是否<xref:System.Windows.Controls.TextBox>为空。 <xref:System.Windows.Controls.ValidationRule>， `ValueIsNotNull`，具有<xref:System.Windows.Controls.ValidationRule.ValidatesOnTargetUpdated%2A>设置为`true`，以便当应用程序启动时，<xref:System.Windows.Controls.ValidationRule>运行并显示一条消息，如果<xref:System.Windows.Controls.TextBox>为空。  
  
 [!code-xaml[BindingGroupSnippets#ValidatesOnTargetUpdated](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#validatesontargetupdated)]  
  
 下面的示例演示<xref:System.Windows.Controls.ValidationRule>，在前面的示例以及事件处理程序使用<xref:System.Windows.Controls.Validation.Error>事件。  
  
 [!code-csharp[BindingGroupSnippets#ValueIsNotNull](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#valueisnotnull)]
 [!code-vb[BindingGroupSnippets#ValueIsNotNull](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#valueisnotnull)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationStep">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ValidationStep ValidationStep { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.ValidationStep ValidationStep" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ValidationRule.ValidationStep" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidationStep As ValidationStep" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::ValidationStep ValidationStep { System::Windows::Controls::ValidationStep get(); void set(System::Windows::Controls::ValidationStep value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ValidationStep</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置验证规则的运行时间。</summary>
        <value>枚举值之一。  默认值为 <see cref="F:System.Windows.Controls.ValidationStep.RawProposedValue" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例设置<xref:System.Windows.Controls.ValidationRule.ValidationStep%2A>到<xref:System.Windows.Controls.ValidationStep.ConvertedProposedValue>上<xref:System.Windows.Controls.ValidationRule>调用`ValidateDateAndPrice`以便运行时，<xref:System.Windows.Controls.ValidationRule.Validate%2A>方法有权访问的源属性的类型的值。 当规则`PriceIsAPositiveNumber`和`FutureDateRule`运行，在每个值<xref:System.Windows.Controls.ValidationRule.Validate%2A>方法都是字符串，因为规则运行之前这些值将转换为其各自的类型。  
  
 [!code-xaml[BindingGroupSnippets#WindowLayout](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window1.xaml#windowlayout)]  
  
 下面的示例演示<xref:System.Windows.Controls.ValidationRule> `ValidateDateAndPrice`。 在`Validate`方法重写时，`Price`属性属于类型<xref:System.Double>和`OfferExpires`属性属于类型<xref:System.DateTime>因为按时间已转换为其各自的类型的字符串<xref:System.Windows.Controls.ValidationRule>运行。  
  
 [!code-csharp[BindingGroupSnippets#ValidateObject](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Data.cs#validateobject)]
 [!code-vb[BindingGroupSnippets#ValidateObject](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/data.vb#validateobject)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>