<Type Name="HeaderedItemsControl" FullName="System.Windows.Controls.HeaderedItemsControl">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c24a3b5360d795b607770e39576b8d487e12782a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30619731" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class HeaderedItemsControl : System.Windows.Controls.ItemsControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HeaderedItemsControl extends System.Windows.Controls.ItemsControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.HeaderedItemsControl" />
  <TypeSignature Language="VB.NET" Value="Public Class HeaderedItemsControl&#xA;Inherits ItemsControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class HeaderedItemsControl : System::Windows::Controls::ItemsControl" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.ItemsControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Header")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Menu)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示包含多个项并且具有标题的控件。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此类用于创建控件包含标题 （或标题） 和多个项。 <xref:System.Windows.Controls.HeaderedItemsControl.Header%2A?displayProperty=nameWithType>属性可以是任何类型。 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 附带继承的三个控件<xref:System.Windows.Controls.HeaderedItemsControl>:  
  
-   <xref:System.Windows.Controls.MenuItem>  
  
-   <xref:System.Windows.Controls.ToolBar>  
  
-   <xref:System.Windows.Controls.TreeViewItem>  
  
 A<xref:System.Windows.Controls.HeaderedItemsControl>具有有限的默认样式。 若要创建<xref:System.Windows.Controls.HeaderedItemsControl>具有自定义外观，创建一个新<xref:System.Windows.Controls.ControlTemplate>。  
  
 设置<xref:System.Windows.Controls.HeaderedItemsControl.Header%2A>属性指定的标签<xref:System.Windows.Controls.HeaderedItemsControl>。  <xref:System.Windows.Controls.HeaderedItemsControl.Header%2A> 可以是对象的任何类型。  设置<xref:System.Windows.Controls.HeaderedItemsControl.HeaderTemplate%2A>属性<xref:System.Windows.DataTemplate>以自定义标头。  有关数据模板的详细信息，请参阅[数据模板化概述](~/docs/framework/wpf/data/data-templating-overview.md)。  
  
 对于此控件的依赖项属性可能由控件的默认样式设置。  如果属性设置的默认样式，该属性可能会更改从其默认值，如果控件出现在应用程序中。 桌面主题用应用程序运行时确定的默认样式。  有关详细信息，请参阅[默认 WPF 主题](http://go.microsoft.com/fwlink/?LinkID=158252)。  
  
   
  
## Examples  
 下面的示例创建<xref:System.Windows.Controls.TreeViewItem>。 <xref:System.Windows.Controls.TreeView>控件包含一个<xref:System.Windows.Controls.TreeViewItem>，标记`TreeViewItem 1`，并且具有以下各项：  
  
-   一个字符串。  
  
-   <xref:System.DateTime> 对象。  
  
-   A<xref:System.Windows.Controls.TreeViewItem>对象，其中包含<xref:System.Windows.Shapes.Rectangle>中其<xref:System.Windows.Controls.HeaderedItemsControl.Header%2A>。  
  
-   A<xref:System.Windows.Controls.TreeViewItem>对象，其<xref:System.Windows.Controls.HeaderedItemsControl.Header%2A>属性设置为<xref:System.Windows.Controls.StackPanel>，其中包含两个对象。  
  
> [!NOTE]
>  此示例显式创建<xref:System.Windows.Controls.TreeViewItem>对象最后两个项因为<xref:System.Windows.Shapes.Rectangle>和<xref:System.Windows.Controls.StackPanel>继承<xref:System.Windows.Media.Visual>类。 默认样式<xref:System.Windows.Controls.TreeViewItem>设置<xref:System.Windows.Controls.Control.Foreground%2A>属性。 子对象继承的属性值明确创建<xref:System.Windows.Controls.TreeViewItem>，这通常是所需的行为。  
  
 [!code-xaml[ControlContentOverviewSnippets#17](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlContentOverviewSnippets/CSharp/Window1.xaml#17)]  
  
 下面的示例创建<xref:System.Windows.Controls.ControlTemplate>为<xref:System.Windows.Controls.HeaderedItemsControl>。  
  
 [!code-xaml[HeaderedItemsControl#HeaderedItemsControl_Style](~/samples/snippets/csharp/VS_Snippets_Wpf/HeaderedItemsControl/CSharp/Page1.xaml#headereditemscontrol_style)]  
[!code-xaml[HeaderedItemsControl#HeaderedItemsControl](~/samples/snippets/csharp/VS_Snippets_Wpf/HeaderedItemsControl/CSharp/Page1.xaml#headereditemscontrol)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HeaderedItemsControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.HeaderedItemsControl.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HeaderedItemsControl();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Controls.HeaderedItemsControl" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasHeader">
      <MemberSignature Language="C#" Value="public bool HasHeader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasHeader" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.HeaderedItemsControl.HasHeader" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasHeader As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasHeader { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示此 <see cref="T:System.Windows.Controls.HeaderedItemsControl" /> 是否具有标题。</summary>
        <value>
          如果该控件具有标题，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Controls.HeaderedItemsControl.Header%2A>属性是`null`，此属性返回`false`。  
  
<a name="dependencyPropertyInfo_HasHeader"></a>   
## <a name="dependency-property-information"></a>依赖项属性信息  
  
|||  
|-|-|  
|标识符字段|<xref:System.Windows.Controls.HeaderedItemsControl.HasHeaderProperty>|  
|元数据属性设置为 `true`|无|  
  
   
  
## Examples  
 下面的示例演示如何使用此属性来确定控件是否有一个标头。  
  
 [!code-csharp[HeaderedItemsControl#HeaderedItemsControl_HasHeader](~/samples/snippets/csharp/VS_Snippets_Wpf/HeaderedItemsControl/CSharp/Page1.xaml.cs#headereditemscontrol_hasheader)]
 [!code-vb[HeaderedItemsControl#HeaderedItemsControl_HasHeader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HeaderedItemsControl/visualbasic/page1.xaml.vb#headereditemscontrol_hasheader)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasHeaderProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HasHeaderProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HasHeaderProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.HeaderedItemsControl.HasHeaderProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HasHeaderProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HasHeaderProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.Controls.HeaderedItemsControl.HasHeader" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Header">
      <MemberSignature Language="C#" Value="public object Header { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Header" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.HeaderedItemsControl.Header" />
      <MemberSignature Language="VB.NET" Value="Public Property Header As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Header { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置标记控件的项。</summary>
        <value>标记 <see cref="T:System.Windows.Controls.HeaderedItemsControl" /> 的对象。 默认值为 <see langword="null" />。 标题可以是一个字符串或 <see cref="T:System.Windows.UIElement" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 因为<xref:System.Windows.Controls.HeaderedItemsControl.Header%2A>属性属于类型<xref:System.Object>，没有任何限制上你可以将置于<xref:System.Windows.Controls.HeaderedItemsControl.Header%2A>。 <xref:System.Windows.Controls.HeaderedItemsControl.Header%2A>显示<xref:System.Windows.Controls.ContentPresenter>，后者位于<xref:System.Windows.Controls.HeaderedItemsControl.HeaderTemplate%2A>的<xref:System.Windows.Controls.HeaderedItemsControl>。 有关详细信息，如何<xref:System.Windows.Controls.ContentPresenter>显示<xref:System.Windows.Controls.HeaderedItemsControl.Header%2A>，请参阅<xref:System.Windows.Controls.ContentPresenter>。  
  
<a name="xamlAttributeUsage_Header"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性用法  
  
```  
<object Header="headerString"/>  
```  
  
<a name="xamlPropertyElementUsage_Header"></a>   
## <a name="xaml-property-element-usage"></a>XAML 属性元素用法  
  
```  
<object>  
  <object.Header>  
    <UIElement />  
  </object.Header>  
</object>  
  
```  
  
<a name="xamlValues_Header"></a>   
## <a name="xaml-values"></a>XAML 值  
 *headerString*  
 要用作标题的字符串。  
  
<a name="dependencyPropertyInfo_Header"></a>   
## <a name="dependency-property-information"></a>依赖项属性信息  
  
|||  
|-|-|  
|标识符字段|<xref:System.Windows.Controls.HeaderedItemsControl.HeaderProperty>|  
|元数据属性设置为 `true`|无|  
  
   
  
## Examples  
 下面的示例演示如何创建和使用的标头模板来指定的标头的外观。  
  
 [!code-xaml[HeaderedItemsControl#HeaderedItemsControl_Style](~/samples/snippets/csharp/VS_Snippets_Wpf/HeaderedItemsControl/CSharp/Page1.xaml#headereditemscontrol_style)]  
[!code-xaml[HeaderedItemsControl#HeaderedItemsControl_Template1](~/samples/snippets/csharp/VS_Snippets_Wpf/HeaderedItemsControl/CSharp/Page1.xaml#headereditemscontrol_template1)]  
[!code-xaml[HeaderedItemsControl#HeaderedItemsControl_Template2](~/samples/snippets/csharp/VS_Snippets_Wpf/HeaderedItemsControl/CSharp/Page1.xaml#headereditemscontrol_template2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HeaderProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HeaderProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.HeaderedItemsControl.HeaderProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HeaderProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HeaderProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.Controls.HeaderedItemsControl.Header" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderStringFormat">
      <MemberSignature Language="C#" Value="public string HeaderStringFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HeaderStringFormat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.HeaderedItemsControl.HeaderStringFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property HeaderStringFormat As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HeaderStringFormat { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个撰写字符串，该字符串指定如果 <see cref="P:System.Windows.Controls.HeaderedItemsControl.Header" /> 属性显示为字符串，应如何设置该属性的格式。</summary>
        <value>一个撰写字符串，指定如果 <see cref="P:System.Windows.Controls.HeaderedItemsControl.Header" /> 属性显示为字符串，应如何设置该属性的格式。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderStringFormatProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HeaderStringFormatProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HeaderStringFormatProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.HeaderedItemsControl.HeaderStringFormatProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HeaderStringFormatProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HeaderStringFormatProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.Controls.HeaderedItemsControl.HeaderStringFormat" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderTemplate">
      <MemberSignature Language="C#" Value="public System.Windows.DataTemplate HeaderTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DataTemplate HeaderTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.HeaderedItemsControl.HeaderTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Property HeaderTemplate As DataTemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DataTemplate ^ HeaderTemplate { System::Windows::DataTemplate ^ get(); void set(System::Windows::DataTemplate ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DataTemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于显示控件标题的内容的模板。</summary>
        <value>用于显示控件标题的数据模板。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要自定义的标题<xref:System.Windows.Controls.HeaderedItemsControl>，将此属性设置为<xref:System.Windows.DataTemplate>。 数据模板的详细信息，请参阅[数据模板化概述](~/docs/framework/wpf/data/data-templating-overview.md)。  
  
<a name="xamlAttributeUsage_HeaderTemplate"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性用法  
  
```  
<object HeaderTemplate="{ResourceExtension TemplateResourceKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_HeaderTemplate"></a>   
## <a name="xaml-property-element-usage"></a>XAML 属性元素用法  
  
<a name="xamlValues_HeaderTemplate"></a>   
## <a name="xaml-values"></a>XAML 值  
 *ResourceExtension*  
 以下项之一： `StaticResource`，或`DynamicResource`。 请参阅[XAML 资源](~/docs/framework/wpf/advanced/xaml-resources.md)。  
  
 *TemplateResourceKey*  
 标识所请求的模板的键。 该键引用中的现有资源<xref:System.Windows.ResourceDictionary>。  
  
> [!NOTE]
>  属性元素语法是从技术上讲是可行的但不是建议这样做。 请参阅[内联样式和模板](~/docs/framework/wpf/advanced/inline-styles-and-templates.md)。 绑定引用使用，或也是可行的但不常见。  
  
<a name="dependencyPropertyInfo_HeaderTemplate"></a>   
## <a name="dependency-property-information"></a>依赖项属性信息  
  
|||  
|-|-|  
|标识符字段|<xref:System.Windows.Controls.HeaderedItemsControl.HeaderTemplateProperty>|  
|元数据属性设置为 `true`|无|  
  
   
  
## Examples  
 下面的示例演示如何创建和使用的标头模板来指定的标头的外观。  
  
 [!code-xaml[HeaderedItemsControl#HeaderedItemsControl_Style](~/samples/snippets/csharp/VS_Snippets_Wpf/HeaderedItemsControl/CSharp/Page1.xaml#headereditemscontrol_style)]  
[!code-xaml[HeaderedItemsControl#HeaderedItemsControl_Template1](~/samples/snippets/csharp/VS_Snippets_Wpf/HeaderedItemsControl/CSharp/Page1.xaml#headereditemscontrol_template1)]  
[!code-xaml[HeaderedItemsControl#HeaderedItemsControl_Template2](~/samples/snippets/csharp/VS_Snippets_Wpf/HeaderedItemsControl/CSharp/Page1.xaml#headereditemscontrol_template2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.HierarchicalDataTemplate" />
      </Docs>
    </Member>
    <Member MemberName="HeaderTemplateProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HeaderTemplateProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HeaderTemplateProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.HeaderedItemsControl.HeaderTemplateProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HeaderTemplateProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HeaderTemplateProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.Controls.HeaderedItemsControl.HeaderTemplate" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderTemplateSelector">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.DataTemplateSelector HeaderTemplateSelector { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.DataTemplateSelector HeaderTemplateSelector" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.HeaderedItemsControl.HeaderTemplateSelector" />
      <MemberSignature Language="VB.NET" Value="Public Property HeaderTemplateSelector As DataTemplateSelector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::DataTemplateSelector ^ HeaderTemplateSelector { System::Windows::Controls::DataTemplateSelector ^ get(); void set(System::Windows::Controls::DataTemplateSelector ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.DataTemplateSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个对象，该对象为用来显示每个项的标题的模板提供自定义选择逻辑。</summary>
        <value>数据模板选择器。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常，你创建<xref:System.Windows.Controls.DataTemplateSelector>时有多个<xref:System.Windows.DataTemplate>为同一类型的对象，并且您想要提供您自己逻辑来选择<xref:System.Windows.DataTemplate>将基于每个数据对象的属性。 请注意，如果有不同的对象类型，你可以设置<xref:System.Windows.DataTemplate.DataType%2A>属性<xref:System.Windows.DataTemplate>。 如果你做，则无需创建<xref:System.Windows.Controls.DataTemplateSelector>。 此外，如果你有相同类型的但具有不同的属性的对象，还可以考虑使用<xref:System.Windows.DataTrigger>或数据转换器。 有关详细信息，请参阅 [数据模板化概述](~/docs/framework/wpf/data/data-templating-overview.md)。  
  
 若要创建一个模板选择器，创建一个类继承自<xref:System.Windows.Controls.DataTemplateSelector>，并重写<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>方法。 定义类后，你可以将类的实例分配给您的元素的模板选择器属性。  
  
 如果这两个<xref:System.Windows.Controls.HeaderedItemsControl.HeaderTemplateSelector%2A>和<xref:System.Windows.Controls.HeaderedItemsControl.HeaderTemplate%2A>属性被设置，将忽略模板选择器属性。  
  
<a name="xamlAttributeUsage_HeaderTemplateSelector"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性用法  
  
```  
<object HeaderTemplateSelector="{ResourceExtension DataTemplateSelectorClassKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_HeaderTemplateSelector"></a>   
## <a name="xaml-property-element-usage"></a>XAML 属性元素用法  
  
```  
<object>  
  <object.HeaderTemplateSelector>  
    <MyDataTemplateSelectorImplementation .../>  
  </object.HeaderTemplateSelector>  
</object>  
```  
  
<a name="xamlValues_HeaderTemplateSelector"></a>   
## <a name="xaml-values"></a>XAML 值  
 *MyDataTemplateSelectorImplementation*  
 从派生的类<xref:System.Windows.Controls.DataTemplateSelector>实现实用的<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>重写。 有关如何映射自定义类的信息，请参阅[XAML 命名空间和 Namespace 映射为 WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)。  
  
 *ResourceExtension*  
 以下项之一： `StaticResource`，或`DynamicResource`。 请参阅[XAML 资源](~/docs/framework/wpf/advanced/xaml-resources.md)。  
  
 *DataTemplateSelectorClassKey*  
 标识所请求的选择器实现的键。 键指实现实用的派生类<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>重写。 有关如何映射自定义类的信息，请参阅[XAML 命名空间和 Namespace 映射为 WPF XAML](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)。 你可以以编程方式添加的实例你<xref:System.Windows.Controls.DataTemplateSelector>作为资源的资源字典的类。  
  
<a name="dependencyPropertyInfo_HeaderTemplateSelector"></a>   
## <a name="dependency-property-information"></a>依赖项属性信息  
  
|||  
|-|-|  
|标识符字段|<xref:System.Windows.Controls.HeaderedItemsControl.HeaderTemplateSelectorProperty>|  
|元数据属性设置为 `true`|无|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderTemplateSelectorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HeaderTemplateSelectorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HeaderTemplateSelectorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.HeaderedItemsControl.HeaderTemplateSelectorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HeaderTemplateSelectorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HeaderTemplateSelectorProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.Controls.HeaderedItemsControl.HeaderTemplateSelector" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected internal override System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.HeaderedItemsControl.LogicalChildren" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides ReadOnly Property LogicalChildren As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property System::Collections::IEnumerator ^ LogicalChildren { System::Collections::IEnumerator ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.Controls.HeaderedItemsControl" /> 的逻辑子元素的枚举器。</summary>
        <value>枚举器。 默认值为 <see langword="null" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHeaderChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnHeaderChanged (object oldHeader, object newHeader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHeaderChanged(object oldHeader, object newHeader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.HeaderedItemsControl.OnHeaderChanged(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHeaderChanged (oldHeader As Object, newHeader As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHeaderChanged(System::Object ^ oldHeader, System::Object ^ newHeader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldHeader" Type="System.Object" />
        <Parameter Name="newHeader" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="oldHeader">
          <see cref="P:System.Windows.Controls.HeaderedItemsControl.Header" /> 属性的旧值。</param>
        <param name="newHeader">
          <see cref="P:System.Windows.Controls.HeaderedItemsControl.Header" /> 属性的新值。</param>
        <summary>在 <see cref="P:System.Windows.Controls.HeaderedItemsControl.Header" /> 的 <see cref="T:System.Windows.Controls.HeaderedItemsControl" /> 属性更改时调用。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHeaderStringFormatChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnHeaderStringFormatChanged (string oldHeaderStringFormat, string newHeaderStringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHeaderStringFormatChanged(string oldHeaderStringFormat, string newHeaderStringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.HeaderedItemsControl.OnHeaderStringFormatChanged(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHeaderStringFormatChanged (oldHeaderStringFormat As String, newHeaderStringFormat As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHeaderStringFormatChanged(System::String ^ oldHeaderStringFormat, System::String ^ newHeaderStringFormat);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldHeaderStringFormat" Type="System.String" />
        <Parameter Name="newHeaderStringFormat" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="oldHeaderStringFormat">
          <see cref="P:System.Windows.Controls.HeaderedItemsControl.HeaderStringFormat" /> 属性的旧值。</param>
        <param name="newHeaderStringFormat">
          <see cref="P:System.Windows.Controls.HeaderedItemsControl.HeaderStringFormat" /> 属性的新值。</param>
        <summary>当 <see cref="P:System.Windows.Controls.HeaderedItemsControl.HeaderStringFormat" /> 属性更改时发生。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHeaderTemplateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnHeaderTemplateChanged (System.Windows.DataTemplate oldHeaderTemplate, System.Windows.DataTemplate newHeaderTemplate);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHeaderTemplateChanged(class System.Windows.DataTemplate oldHeaderTemplate, class System.Windows.DataTemplate newHeaderTemplate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.HeaderedItemsControl.OnHeaderTemplateChanged(System.Windows.DataTemplate,System.Windows.DataTemplate)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHeaderTemplateChanged (oldHeaderTemplate As DataTemplate, newHeaderTemplate As DataTemplate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHeaderTemplateChanged(System::Windows::DataTemplate ^ oldHeaderTemplate, System::Windows::DataTemplate ^ newHeaderTemplate);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldHeaderTemplate" Type="System.Windows.DataTemplate" />
        <Parameter Name="newHeaderTemplate" Type="System.Windows.DataTemplate" />
      </Parameters>
      <Docs>
        <param name="oldHeaderTemplate">
          <see cref="P:System.Windows.Controls.HeaderedItemsControl.HeaderTemplate" /> 属性的旧值。</param>
        <param name="newHeaderTemplate">
          <see cref="P:System.Windows.Controls.HeaderedItemsControl.HeaderTemplate" /> 属性的新值。</param>
        <summary>当 <see cref="P:System.Windows.Controls.HeaderedItemsControl.HeaderTemplate" /> 属性更改时调用。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHeaderTemplateSelectorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnHeaderTemplateSelectorChanged (System.Windows.Controls.DataTemplateSelector oldHeaderTemplateSelector, System.Windows.Controls.DataTemplateSelector newHeaderTemplateSelector);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHeaderTemplateSelectorChanged(class System.Windows.Controls.DataTemplateSelector oldHeaderTemplateSelector, class System.Windows.Controls.DataTemplateSelector newHeaderTemplateSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.HeaderedItemsControl.OnHeaderTemplateSelectorChanged(System.Windows.Controls.DataTemplateSelector,System.Windows.Controls.DataTemplateSelector)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHeaderTemplateSelectorChanged (oldHeaderTemplateSelector As DataTemplateSelector, newHeaderTemplateSelector As DataTemplateSelector)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHeaderTemplateSelectorChanged(System::Windows::Controls::DataTemplateSelector ^ oldHeaderTemplateSelector, System::Windows::Controls::DataTemplateSelector ^ newHeaderTemplateSelector);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldHeaderTemplateSelector" Type="System.Windows.Controls.DataTemplateSelector" />
        <Parameter Name="newHeaderTemplateSelector" Type="System.Windows.Controls.DataTemplateSelector" />
      </Parameters>
      <Docs>
        <param name="oldHeaderTemplateSelector">
          <see cref="P:System.Windows.Controls.HeaderedItemsControl.HeaderTemplateSelector" /> 属性的旧值。</param>
        <param name="newHeaderTemplateSelector">
          <see cref="P:System.Windows.Controls.HeaderedItemsControl.HeaderTemplateSelector" /> 属性的新值。</param>
        <summary>当 <see cref="P:System.Windows.Controls.HeaderedItemsControl.HeaderTemplateSelector" /> 属性更改时调用。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.HeaderedItemsControl.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回 <see cref="T:System.Windows.Controls.HeaderedItemsControl" /> 对象的字符串表示形式。</summary>
        <returns>表示此对象的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法返回一个字符串，包含有关标头属性和中的项的数目信息<xref:System.Windows.Controls.ItemsControl.Items%2A>属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>