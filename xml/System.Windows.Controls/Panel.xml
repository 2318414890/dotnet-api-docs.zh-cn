<Type Name="Panel" FullName="System.Windows.Controls.Panel">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="802c2f2d1393863b291868f39e1fc99a1707a99e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30619851" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Panel : System.Windows.FrameworkElement, System.Windows.Markup.IAddChild" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Panel extends System.Windows.FrameworkElement implements class System.Windows.Markup.IAddChild" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.Panel" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Panel&#xA;Inherits FrameworkElement&#xA;Implements IAddChild" />
  <TypeSignature Language="C++ CLI" Value="public ref class Panel abstract : System::Windows::FrameworkElement, System::Windows::Markup::IAddChild" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.FrameworkElement</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Markup.IAddChild</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Ignore)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Children")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>为所有 <see cref="T:System.Windows.Controls.Panel" /> 元素提供基类。 使用 <see cref="T:System.Windows.Controls.Panel" /> 元素放置和排列 Windows Presentation Foundation (WPF) 应用程序中的子对象。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Windows.Controls.Panel>包含一套<xref:System.Windows.UIElement>对象，后者是在<xref:System.Windows.Controls.Panel.Children%2A>属性。 添加<xref:System.Windows.UIElement>子级到<xref:System.Windows.Controls.Panel>隐式将其添加到<xref:System.Windows.Controls.UIElementCollection>为<xref:System.Windows.Controls.Panel>元素。  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 提供一套综合的派生<xref:System.Windows.Controls.Panel>实现中，启用许多复杂的布局。 如果你想要实现新布局容器，使用<xref:System.Windows.FrameworkElement.MeasureOverride%2A>和<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>方法。 有关如何使用这些方法的演示，请参阅[创建自定义内容换行面板示例](http://go.microsoft.com/fwlink/?LinkID=159979)。  
  
 <xref:System.Windows.Controls.Panel> 如果元素不接收鼠标或触笔事件<xref:System.Windows.Controls.Panel.Background%2A>未定义。 如果你需要处理鼠标或触笔事件，但不是希望的背景你<xref:System.Windows.Controls.Panel>，使用<xref:System.Windows.Media.Brushes.Transparent%2A>。  
  
 默认情况下，面板元素不接收焦点。 若要强制要接收焦点的面板元素，将设置<xref:System.Windows.UIElement.Focusable%2A>属性`true`。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Windows.Controls.Panel.Children%2A>属性来添加两个<xref:System.Windows.Controls.Button>对象添加到<xref:System.Windows.Controls.StackPanel>。  
  
 [!code-xaml[StackPanel_snip#StackPanelExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/StackPanel_snip/CS/StackPanelExample.xaml#stackpanelexamplewholepage)] 
 [!code-csharp[Stackpanel_Procedural_snip#StackPanelExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/Stackpanel_Procedural_snip/CSharp/StackpanelExample.cs#stackpanelexamplewholepage)] 
 [!code-vb[Stackpanel_Procedural_snip#StackPanelExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Stackpanel_Procedural_snip/visualbasic/stackpanelexample.vb#stackpanelexamplewholepage)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Panel ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Panel.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Panel();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Controls.Panel" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Background">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush Background { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush Background" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Panel.Background" />
      <MemberSignature Language="VB.NET" Value="Public Property Background As Brush" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Brush ^ Background { System::Windows::Media::Brush ^ get(); void set(System::Windows::Media::Brush ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于填充 <see cref="T:System.Windows.Media.Brush" /> 的边框之间的区域的 <see cref="T:System.Windows.Controls.Panel" />。</summary>
        <value>
          <see cref="T:System.Windows.Media.Brush" />。 此默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.Panel> 如果元素不接收鼠标或触笔事件<xref:System.Windows.Controls.Panel.Background%2A>未定义。 如果你需要处理鼠标或触笔事件，但不是希望的背景你<xref:System.Windows.Controls.Panel>，使用<xref:System.Windows.Media.Brushes.Transparent%2A>。  
  
<a name="dependencyPropertyInfo_Background"></a>   
## <a name="dependency-property-information"></a>依赖项属性信息  
  
|||  
|-|-|  
|标识符字段|<xref:System.Windows.Controls.Panel.BackgroundProperty>|  
|元数据属性设置为 `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>, <xref:System.Windows.FrameworkPropertyMetadata.SubPropertiesDoNotAffectRender%2A>|  
  
   
  
## Examples  
 下面的示例设置<xref:System.Windows.Controls.Panel.Background%2A>的<xref:System.Windows.Controls.Grid>到<xref:System.Windows.Media.RadialGradientBrush>。  
  
 [!code-xaml[PanelBackground#1](~/samples/snippets/csharp/VS_Snippets_Wpf/panelbackground/CS/mainwindow.xaml#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Media.Brush" />
      </Docs>
    </Member>
    <Member MemberName="BackgroundProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BackgroundProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BackgroundProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Panel.BackgroundProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BackgroundProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BackgroundProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.Controls.Panel.Background" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Controls.Panel.Background" />
      </Docs>
    </Member>
    <Member MemberName="Children">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.UIElementCollection Children { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.UIElementCollection Children" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Panel.Children" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Children As UIElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::UIElementCollection ^ Children { System::Windows::Controls::UIElementCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.UIElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此 <see cref="T:System.Windows.Controls.UIElementCollection" /> 的子元素的 <see cref="T:System.Windows.Controls.Panel" />。</summary>
        <value>
          <see cref="T:System.Windows.Controls.UIElementCollection" />。 默认值为空 <see cref="T:System.Windows.Controls.UIElementCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.Panel.Children%2A>集合<xref:System.Windows.Controls.Panel>元素只能包含<xref:System.Windows.UIElement>对象。 添加<xref:System.Windows.UIElement>子级到<xref:System.Windows.Controls.Panel>隐式将其添加到<xref:System.Windows.Controls.UIElementCollection>为<xref:System.Windows.Controls.Panel>元素。  
  
 不使用此集合用于派生<xref:System.Windows.Controls.Panel>类; 请改用<xref:System.Windows.Controls.Panel.InternalChildren%2A>集合相反。  
  
 此属性返回`null`如果<xref:System.Windows.Controls.Panel>被数据绑定。  
  
   
  
## Examples  
 下面的代码示例演示如何使用<xref:System.Windows.Controls.Panel.Children%2A>属性来添加<xref:System.Windows.UIElement>子级到<xref:System.Windows.Controls.Panel>元素。  
  
 [!code-csharp[framesnips#FrameNavigateSetup](~/samples/snippets/csharp/VS_Snippets_Wpf/FrameSnips/CSharp/Window1.xaml.cs#framenavigatesetup)]
 [!code-vb[framesnips#FrameNavigateSetup](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FrameSnips/visualbasic/window1.xaml.vb#framenavigatesetup)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.UIElement" />
      </Docs>
    </Member>
    <Member MemberName="CreateUIElementCollection">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Controls.UIElementCollection CreateUIElementCollection (System.Windows.FrameworkElement logicalParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Controls.UIElementCollection CreateUIElementCollection(class System.Windows.FrameworkElement logicalParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Panel.CreateUIElementCollection(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateUIElementCollection (logicalParent As FrameworkElement) As UIElementCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Controls::UIElementCollection ^ CreateUIElementCollection(System::Windows::FrameworkElement ^ logicalParent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.UIElementCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logicalParent" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="logicalParent">要创建的集合的逻辑父元素。</param>
        <summary>创建一个新的 <see cref="T:System.Windows.Controls.UIElementCollection" />。</summary>
        <returns>具有指定逻辑父项的元素的有序集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用生成<xref:System.Windows.Controls.UIElementCollection>到有关子元素，或执行增量布局更新的缓存信息。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVisualChild">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.Visual GetVisualChild (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.Visual GetVisualChild(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Panel.GetVisualChild(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetVisualChild (index As Integer) As Visual" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::Visual ^ GetVisualChild(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Visual</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <see cref="T:System.Windows.Media.Visual" /> 子级的索引位置。</param>
        <summary>获取指定索引位置处的此 <see cref="T:System.Windows.Media.Visual" /> 的 <see cref="T:System.Windows.Controls.Panel" /> 子级。</summary>
        <returns>父元素 <see cref="T:System.Windows.Media.Visual" /> 的一个 <see cref="T:System.Windows.Controls.Panel" /> 子项。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Media.Visual" />
      </Docs>
    </Member>
    <Member MemberName="GetZIndex">
      <MemberSignature Language="C#" Value="public static int GetZIndex (System.Windows.UIElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetZIndex(class System.Windows.UIElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Panel.GetZIndex(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetZIndex (element As UIElement) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetZIndex(System::Windows::UIElement ^ element);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="element">要为其检索 <see cref="P:System.Windows.Controls.Panel.ZIndex" /> 值的元素。</param>
        <summary>获取给定元素的 <see cref="P:System.Windows.Controls.Panel.ZIndex" /> 属性的值。</summary>
        <returns>元素的 <see cref="P:System.Windows.Controls.Panel.ZIndex" /> 位置。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">此元素为 <see langword="null" />。</exception>
        <altmember cref="P:System.Windows.Controls.Panel.ZIndex" />
      </Docs>
    </Member>
    <Member MemberName="HasLogicalOrientation">
      <MemberSignature Language="C#" Value="protected internal virtual bool HasLogicalOrientation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasLogicalOrientation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Panel.HasLogicalOrientation" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property HasLogicalOrientation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool HasLogicalOrientation { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示此 <see cref="T:System.Windows.Controls.Panel" /> 是否在单个维度中排列其子代。</summary>
        <value>
          如果 <see cref="T:System.Windows.Controls.Panel" /> 的方向是在一个维度上，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在预定义的面板，仅限元素<xref:System.Windows.Controls.StackPanel>返回`true`，因为其方向是在单个维度。  子类<xref:System.Windows.Controls.Panel>可以重写此属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.Orientation" />
      </Docs>
    </Member>
    <Member MemberName="HasLogicalOrientationPublic">
      <MemberSignature Language="C#" Value="public bool HasLogicalOrientationPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasLogicalOrientationPublic" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Panel.HasLogicalOrientationPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasLogicalOrientationPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasLogicalOrientationPublic { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示此 <see cref="T:System.Windows.Controls.Panel" /> 是否在单个维度中排列其子代。</summary>
        <value>
          如果 <see cref="T:System.Windows.Controls.Panel" /> 的方向是在一个维度上，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在预定义的面板，仅限元素<xref:System.Windows.Controls.StackPanel>返回`true`，因为其方向是在单个维度。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InternalChildren">
      <MemberSignature Language="C#" Value="protected internal System.Windows.Controls.UIElementCollection InternalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.UIElementCollection InternalChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Panel.InternalChildren" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property InternalChildren As UIElementCollection" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Windows::Controls::UIElementCollection ^ InternalChildren { System::Windows::Controls::UIElementCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.UIElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取子元素的 <see cref="T:System.Windows.Controls.UIElementCollection" />。</summary>
        <value>
          <see cref="T:System.Windows.UIElement" /> 对象的有序集合。 此属性没有默认值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的集合包括直接在代码中，添加的项以及生成的数据绑定的项。  
  
 派生自的类<xref:System.Windows.Controls.Panel>应使用此属性，而不是<xref:System.Windows.Controls.Panel.Children%2A>属性，内部重写，如<xref:System.Windows.UIElement.MeasureCore%2A>和<xref:System.Windows.UIElement.ArrangeCore%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsItemsHost">
      <MemberSignature Language="C#" Value="public bool IsItemsHost { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsItemsHost" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Panel.IsItemsHost" />
      <MemberSignature Language="VB.NET" Value="Public Property IsItemsHost As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsItemsHost { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示此 <see cref="T:System.Windows.Controls.Panel" /> 是由 <see cref="T:System.Windows.Controls.ItemsControl" /> 生成的 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 项的容器。</summary>
        <value>
          如果此 <see cref="T:System.Windows.Controls.Panel" /> 实例是项宿主，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 无法将数据绑定到此属性。  
  
<a name="dependencyPropertyInfo_IsItemsHost"></a>   
## <a name="dependency-property-information"></a>依赖项属性信息  
  
|||  
|-|-|  
|标识符字段|<xref:System.Windows.Controls.Panel.IsItemsHostProperty>|  
|元数据属性设置为 `true`|<xref:System.Windows.FrameworkPropertyMetadata.IsNotDataBindable%2A>|  
  
   
  
## Examples  
 下面的示例使用<xref:System.Windows.Controls.ControlTemplate>创建水平<xref:System.Windows.Controls.ListBox>。 水平<xref:System.Windows.Controls.StackPanel>内指定<xref:System.Windows.Controls.ControlTemplate>。 <xref:System.Windows.Controls.Panel.IsItemsHost%2A>属性设置为`true`上<xref:System.Windows.Controls.StackPanel>，指示应将生成的项放在面板中。 当这种方式，指定<xref:System.Windows.Controls.ItemsControl.ItemsPanel%2A>无法由该控件的用户不使用的情况下替换<xref:System.Windows.Controls.ControlTemplate>。 因此，执行此操作仅当你知道你不希望替换而不使用模板的面板。  
  
 [!code-xaml[StylingIntroSnippet#ListBoxCT](~/samples/snippets/csharp/VS_Snippets_Wpf/StylingIntroSnippet/CS/window1.xaml#listboxct)]   
  
 或者，您可以设置<xref:System.Windows.Controls.ItemsControl.ItemsPanel%2A?displayProperty=nameWithType>属性。 下面的示例设置<xref:System.Windows.Controls.ItemsControl.ItemsPanel%2A>中<xref:System.Windows.Style>的<xref:System.Windows.Controls.ListBox>。  
  
 [!code-xaml[listboxhorizontal#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ListBoxHorizontal/CS/window1.xaml#1)]   
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ItemsControl" />
      </Docs>
    </Member>
    <Member MemberName="IsItemsHostProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsItemsHostProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsItemsHostProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Panel.IsItemsHostProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsItemsHostProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsItemsHostProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.Controls.Panel.IsItemsHost" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Controls.Panel.IsItemsHost" />
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected internal override System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Panel.LogicalChildren" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides ReadOnly Property LogicalChildren As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property System::Collections::IEnumerator ^ LogicalChildren { System::Collections::IEnumerator ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个枚举器，它可以循环访问此 <see cref="T:System.Windows.Controls.Panel" /> 元素的各个逻辑子元素。</summary>
        <value>一个 <see cref="T:System.Collections.IEnumerator" />。 此属性没有默认值。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="LogicalOrientation">
      <MemberSignature Language="C#" Value="protected internal virtual System.Windows.Controls.Orientation LogicalOrientation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.Orientation LogicalOrientation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Panel.LogicalOrientation" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property LogicalOrientation As Orientation" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property System::Windows::Controls::Orientation LogicalOrientation { System::Windows::Controls::Orientation get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.Orientation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>如果面板支持只有一个维度的布局，则为面板的 <see cref="T:System.Windows.Controls.Orientation" />。</summary>
        <value>面板的 <see cref="T:System.Windows.Controls.Orientation" />。 此属性没有默认值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 子类<xref:System.Windows.Controls.Panel>可以重写此属性。 如果<xref:System.Windows.Controls.Panel.HasLogicalOrientation%2A>是`false`，应忽略此属性的值。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.Orientation" />
      </Docs>
    </Member>
    <Member MemberName="LogicalOrientationPublic">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.Orientation LogicalOrientationPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.Orientation LogicalOrientationPublic" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Panel.LogicalOrientationPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LogicalOrientationPublic As Orientation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::Orientation LogicalOrientationPublic { System::Windows::Controls::Orientation get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.Orientation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>如果面板支持只有一个维度的布局，则为面板的 <see cref="T:System.Windows.Controls.Orientation" />。</summary>
        <value>面板的 <see cref="T:System.Windows.Controls.Orientation" />。 此属性没有默认值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果<xref:System.Windows.Controls.Panel.HasLogicalOrientation%2A>是`false`，应忽略此属性的值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsItemsHostChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsItemsHostChanged (bool oldIsItemsHost, bool newIsItemsHost);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsItemsHostChanged(bool oldIsItemsHost, bool newIsItemsHost) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Panel.OnIsItemsHostChanged(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsItemsHostChanged (oldIsItemsHost As Boolean, newIsItemsHost As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsItemsHostChanged(bool oldIsItemsHost, bool newIsItemsHost);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldIsItemsHost" Type="System.Boolean" />
        <Parameter Name="newIsItemsHost" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="oldIsItemsHost">旧的属性值。</param>
        <param name="newIsItemsHost">新的属性值。</param>
        <summary>指示 <see cref="P:System.Windows.Controls.Panel.IsItemsHost" /> 属性值已更改。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Controls.Panel.IsItemsHost" />
      </Docs>
    </Member>
    <Member MemberName="OnRender">
      <MemberSignature Language="C#" Value="protected override void OnRender (System.Windows.Media.DrawingContext dc);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnRender(class System.Windows.Media.DrawingContext dc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Panel.OnRender(System.Windows.Media.DrawingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnRender (dc As DrawingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnRender(System::Windows::Media::DrawingContext ^ dc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dc" Type="System.Windows.Media.DrawingContext" />
      </Parameters>
      <Docs>
        <param name="dc">要绘制的 <see cref="T:System.Windows.Media.DrawingContext" /> 对象。</param>
        <summary>在 <see cref="T:System.Windows.Media.DrawingContext" /> 元素的呈现处理过程中，绘制 <see cref="T:System.Windows.Controls.Panel" /> 对象的内容。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualChildrenChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualChildrenChanged (System.Windows.DependencyObject visualAdded, System.Windows.DependencyObject visualRemoved);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualChildrenChanged(class System.Windows.DependencyObject visualAdded, class System.Windows.DependencyObject visualRemoved) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Panel.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualChildrenChanged (visualAdded As DependencyObject, visualRemoved As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualChildrenChanged(System::Windows::DependencyObject ^ visualAdded, System::Windows::DependencyObject ^ visualRemoved);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visualAdded" Type="System.Windows.DependencyObject" />
        <Parameter Name="visualRemoved" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="visualAdded">已添加到集合中的 <see cref="T:System.Windows.Media.Visual" />。</param>
        <param name="visualRemoved">从集合中移除的 <see cref="T:System.Windows.Media.Visual" />。</param>
        <summary>当修改可见对象的 <see cref="T:System.Windows.Media.VisualCollection" /> 时调用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.Panel.ZIndex%2A> 子元素添加到或从集合中移除时，会自动重新计算值。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Media.Visual" />
        <altmember cref="M:System.Windows.Media.Visual.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)" />
      </Docs>
    </Member>
    <Member MemberName="SetZIndex">
      <MemberSignature Language="C#" Value="public static void SetZIndex (System.Windows.UIElement element, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetZIndex(class System.Windows.UIElement element, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Panel.SetZIndex(System.Windows.UIElement,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetZIndex (element As UIElement, value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetZIndex(System::Windows::UIElement ^ element, int value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.UIElement" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="element">要在其上应用属性值的元素。</param>
        <param name="value">此元素在 z 平面上出现的顺序。</param>
        <summary>设置给定元素的 <see cref="P:System.Windows.Controls.Panel.ZIndex" /> 附加属性的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 较大的一个`value`的给定`element`、 越有可能`element`要显示在前台。 同样，如果`element`具有相对较低`value`、`element`可能会在后台中。 例如，`element`具有`value`的 5 将出现上面`element`具有`value`(4)，这反过来将出现上面`element`，其值为 3，依次类推。 允许使用负值，并将不断此优先顺序模式。  
  
 成员<xref:System.Windows.Controls.Panel.Children%2A>集合中具有相等<xref:System.Windows.Controls.Panel.ZIndex%2A>值呈现可视化树中出现的顺序。 你可以确定通过循环访问的成员的子级的索引位置<xref:System.Windows.Controls.Panel.Children%2A>集合。  
  
   
  
## Examples  
 下面的示例演示在代码中如何设置的值<xref:System.Windows.Controls.Panel.ZIndex%2A>属性 (通过使用<xref:System.Windows.Controls.Panel.SetZIndex%2A>方法)。  
  
 [!code-cpp[canvasz-order#2](~/samples/snippets/cpp/VS_Snippets_Wpf/CanvasZ-Order/CPP/CanvasZ-Order.cpp#2)]
 [!code-csharp[canvasz-order#2](~/samples/snippets/csharp/VS_Snippets_Wpf/CanvasZ-Order/Csharp/CanvasZ-Order.cs#2)]
 [!code-vb[canvasz-order#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CanvasZ-Order/VisualBasic/CanvasZ-Order.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">此元素为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeChildren">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeChildren ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeChildren() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Panel.ShouldSerializeChildren" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeChildren () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeChildren();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>确定是否应对面板的 <see cref="P:System.Windows.Controls.Panel.Children" /> 集合进行序列化。</summary>
        <returns>
          如果应序列化 <see cref="P:System.Windows.Controls.Panel.Children" /> 集合，则为 <see langword="true" />；否则为 <see langword="false" />。 仅在 <see cref="P:System.Windows.Controls.Panel.Children" /> 集合不为空且不为 <see langword="null" /> 时，才对其进行序列化。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddChild">
      <MemberSignature Language="C#" Value="void IAddChild.AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Panel.System#Windows#Markup#IAddChild#AddChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub AddChild (value As Object) Implements IAddChild.AddChild" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddChild(System::Object ^ value) = System::Windows::Markup::IAddChild::AddChild;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddChild(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要作为子级添加的对象。</param>
        <summary>此类型或成员支持 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 基础结构，但不可直接在代码中使用。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddText">
      <MemberSignature Language="C#" Value="void IAddChild.AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Panel.System#Windows#Markup#IAddChild#AddText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub AddText (text As String) Implements IAddChild.AddText" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddText(System::String ^ text) = System::Windows::Markup::IAddChild::AddText;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddText(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">要添加到该对象的字符串。</param>
        <summary>此类型或成员支持 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 基础结构，但不可直接在代码中使用。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualChildrenCount">
      <MemberSignature Language="C#" Value="protected override int VisualChildrenCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VisualChildrenCount" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Panel.VisualChildrenCount" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property VisualChildrenCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property int VisualChildrenCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此 <see cref="T:System.Windows.Media.Visual" /> 实例中的子 <see cref="T:System.Windows.Controls.Panel" /> 对象数。</summary>
        <value>子 <see cref="T:System.Windows.Media.Visual" /> 对象的数目。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZIndex">
      <MemberSignature Language="C#" Value="see GetZIndex, and SetZIndex" />
      <MemberSignature Language="ILAsm" Value="see GetZIndex, and SetZIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Panel.ZIndex" />
      <MemberSignature Language="VB.NET" Value="see GetZIndex, and SetZIndex" />
      <MemberType>AttachedProperty</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZIndexProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ZIndexProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ZIndexProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Panel.ZIndexProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ZIndexProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ZIndexProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.Controls.Panel.ZIndex" /> 附加属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>