<Type Name="Label" FullName="System.Windows.Controls.Label">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8e2c2703d49f4ce15e4bbc5a90c2dc8ca5b87073" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30618691" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Label : System.Windows.Controls.ContentControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Label extends System.Windows.Controls.ContentControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.Label" />
  <TypeSignature Language="VB.NET" Value="Public Class Label&#xA;Inherits ContentControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class Label : System::Windows::Controls::ContentControl" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.ContentControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Label)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示控件的文本标签，并提供访问密钥支持。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此类提供了访问密钥 （也称为助记键） 的功能和视觉支持。 它经常用于启用对控件进行快速的键盘访问，例如<xref:System.Windows.Controls.TextBox>。 若要将分配<xref:System.Windows.Controls.Label>到<xref:System.Windows.Controls.Control>，将其设置<xref:System.Windows.Controls.Label.Target%2A>到应在用户按下访问键时获得焦点的控件的属性。 设置目标还原因[!INCLUDE[TLA#tla_uiautomation](~/includes/tlasharptla-uiautomation-md.md)]要用作目标控件的名称的标签的文本。 有关详细信息，请参阅[可访问性](~/docs/framework/ui-automation/index.md)。  
  
 若要设置的访问密钥，前面添加下划线应访问密钥的字符。 如果内容中有多个下划线字符，只有第一个将转换为访问键;其他下划线显示为普通文本。 如果你想转换的访问密钥为下划线不是第一个下划线，使用两个连续的下划线的任何下划线之前你想要转换的一个。 例如，下面的代码包含访问密钥，并将显示为 _Hello**W**orld:  
  
```  
<Label>__Hello_World</Label>   
```  
  
 由于之前 H 下划线是双精度，W 键将注册为访问密钥。  
  
 标签不可获得焦点，并且它不是一个制表位。 有关详细信息，请参阅[焦点概述](~/docs/framework/wpf/advanced/focus-overview.md)。  
  
 A<xref:System.Windows.Controls.Label>是<xref:System.Windows.Controls.ContentControl>，这意味着，它可以包含任何类型 （如字符串、 一个映像或一个面板） 的单个对象。 有关更多信息，请参见 <xref:System.Windows.Controls.ContentControl> 类。  
  
## <a name="customizing-the-label-control"></a>自定义标签控件  
 若要将相同的属性设置应用于多个<xref:System.Windows.Controls.Label>控件，使用<xref:System.Windows.FrameworkElement.Style%2A>属性。 你可以修改默认<xref:System.Windows.Controls.ControlTemplate>提供独特外观的控件。 有关创建<xref:System.Windows.Controls.ControlTemplate>，请参阅[通过创建 ControlTemplate 自定义现有的控件的外观](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)。  若要查看的部件和特定于状态<xref:System.Windows.Controls.Label>，请参阅[标签样式和模板](~/docs/framework/wpf/controls/label-styles-and-templates.md)。  
  
 对于此控件的依赖项属性可能由控件的默认样式设置。  如果属性设置的默认样式，该属性可能会更改从其默认值，如果控件出现在应用程序中。 桌面主题用应用程序运行时确定的默认样式。  有关详细信息，请参阅[默认 WPF 主题](http://go.microsoft.com/fwlink/?LinkID=158252)。  
  
> [!NOTE]
>  设置 visual 属性会仅造成影响该属性是否都存在于<xref:System.Windows.Controls.Label>控件的默认模板，并通过设置。 可以在的"更改 Visual 结构的控件"一节中找到的可视属性列表[通过创建 ControlTemplate 自定义现有的控件的外观](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)。  
  
   
  
## Examples  
 下面的示例演示如何创建<xref:System.Windows.Controls.Label>，使用绑定进行设置目标。  
  
 [!code-xaml[LabelSnippet#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LabelSnippet/CS/Pane1.xaml#1)]   
  
 下面的示例演示如何创建<xref:System.Windows.Controls.Label>，它具有访问键，并支持文本换行。  
  
 [!code-xaml[LabelSnippet#4](~/samples/snippets/csharp/VS_Snippets_Wpf/LabelSnippet/CS/Pane1.xaml#4)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Label ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Label.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Label();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Controls.Label" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.Label.OnCreateAutomationPeer" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnCreateAutomationPeer () As AutomationPeer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Automation::Peers::AutomationPeer ^ OnCreateAutomationPeer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>作为 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 基础结构的一部分，为此控件提供相应的 <see cref="T:System.Windows.Automation.Peers.LabelAutomationPeer" /> 实现。</summary>
        <returns>特定于类型的 <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> 实现。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public System.Windows.UIElement Target { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.UIElement Target" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.Label.Target" />
      <MemberSignature Language="VB.NET" Value="Public Property Target As UIElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::UIElement ^ Target { System::Windows::UIElement ^ get(); void set(System::Windows::UIElement ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.NameReferenceConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.UIElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当用户按下标签的访问键时获得焦点的元素。</summary>
        <value>当用户按下访问键时获得焦点的 <see cref="T:System.Windows.UIElement" />。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以提供不支持向提供的访问键的元素的键盘快捷方式<xref:System.Windows.Controls.Label>访问密钥和设置此属性。 通过将以下划线字符，它就像访问密钥之前立即放到标签分配访问键。 可以在指定的访问密钥<xref:System.Windows.Controls.ContentControl.Content%2A>属性或通过设置<xref:System.Windows.Controls.ContentControl.Content%2A>到<xref:System.Windows.Controls.AccessText>对象。  
  
 无法使用此属性来定义<xref:System.Windows.UIElement>。 例如，以下将编译，但不能正常工作： `<object.Target><UIElement../></object.Target>`。 此属性提供对已在你的应用程序中定义的元素的引用。  
  
<a name="dependencyPropertyInfo_Target"></a>   
## <a name="dependency-property-information"></a>依赖项属性信息  
  
|||  
|-|-|  
|标识符字段|<xref:System.Windows.Controls.Label.TargetProperty>|  
|元数据属性设置为 `true`|无|  
  
<a name="xamlAttributeUsage_Target"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性用法  
  
```  
<Label Target=" nameOfExistingElement"/>  
  
```  
  
<a name="xamlPropertyElementUsage_Target"></a>   
## <a name="xaml-property-element-usage"></a>XAML 属性元素用法  
  
<a name="xamlValues_Target"></a>   
## <a name="xaml-values"></a>XAML 值  
 `nameOfExistingElement`  
 名称<xref:System.Windows.UIElement>接收焦点时按下访问键。  
  
   
  
## Examples  
 以下示例演示如何设置 <xref:System.Windows.Controls.Label.Target%2A> 的 <xref:System.Windows.Controls.Label> 属性。  
  
 [!code-xaml[LabelSnippet#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LabelSnippet/CS/Pane1.xaml#1)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TargetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TargetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.Label.TargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TargetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TargetProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.Controls.Label.Target" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>