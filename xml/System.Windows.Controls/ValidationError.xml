<Type Name="ValidationError" FullName="System.Windows.Controls.ValidationError">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="10190f52dac807890af4f359bfa4b90943f21e77" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30627231" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ValidationError" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ValidationError extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.ValidationError" />
  <TypeSignature Language="VB.NET" Value="Public Class ValidationError" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValidationError" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示一个验证错误，该错误在 <see cref="T:System.Windows.Controls.ValidationRule" /> 报告验证错误时由绑定引擎创建，或者通过 <see cref="M:System.Windows.Controls.Validation.MarkInvalid(System.Windows.Data.BindingExpressionBase,System.Windows.Controls.ValidationError)" /> 方法显式创建。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]数据绑定模型使您可以将关联的验证规则你<xref:System.Windows.Data.Binding>对象。 在调用转换器之前，验证将发生在目标到源值传输过程。 下面描述的验证过程。  
  
1.  当一个值从目标属性传输到源属性时，数据绑定引擎首先移除任何<xref:System.Windows.Controls.ValidationError>可能已添加到<xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType>附加属性的绑定元素。 然后，检查是否对该定义的任何自定义验证规则<xref:System.Windows.Data.Binding>，在这种情况下它将调用<xref:System.Windows.Controls.ValidationRule.Validate%2A>上每个方法<xref:System.Windows.Controls.ValidationRule>直到其中一个失败或直至将所有这些通过。  
  
2.  绑定引擎后不能通过自定义规则，请创建<xref:System.Windows.Controls.ValidationError>对象，并将其添加到<xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType>绑定元素的集合。 当<xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType>不为空，<xref:System.Windows.Controls.Validation.HasError%2A?displayProperty=nameWithType>附加的属性的元素设置为`true`。 此外，如果<xref:System.Windows.Data.Binding.NotifyOnValidationError%2A>属性<xref:System.Windows.Data.Binding>设置为`true`，然后绑定引擎将引发<xref:System.Windows.Controls.Validation.Error?displayProperty=nameWithType>附加元素上的事件。  
  
3.  如果所有规则均都通过，则绑定引擎然后调用转换器，如果存在。  
  
4.  如果将通过转换器，绑定引擎将调用源属性的 setter。  
  
5.  如果绑定具有<xref:System.Windows.Controls.ExceptionValidationRule>与之关联并在步骤 3 或 4 引发异常，则绑定引擎将检查以查看是否有<xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A>。 你可以使用<xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A>回调提供自定义处理程序处理异常。 如果<xref:System.Windows.Data.Binding.UpdateSourceExceptionFilter%2A>上未指定<xref:System.Windows.Data.Binding>，该绑定引擎创建<xref:System.Windows.Controls.ValidationError>出现异常并将其添加到<xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType>绑定元素的集合。  
  
 在任一方向 （从目标到源或目标的源） 的有效的值传输将清除<xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType>附加属性。  
  
   
  
## Examples  
 下面的示例演示创建样式触发器<xref:System.Windows.Controls.ToolTip>报告验证错误消息。 <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType>附加的属性返回的集合<xref:System.Windows.Controls.ValidationError>绑定元素上的对象。  
  
 [!code-xaml[DataBindingLab#14](~/samples/snippets/csharp/VS_Snippets_Wpf/DataBindingLab/CSharp/DataBindingLabApp.xaml#14)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Controls.DataErrorValidationRule" />
    <altmember cref="T:System.Windows.Controls.ValidationRule" />
    <altmember cref="M:System.Windows.Controls.Validation.MarkInvalid(System.Windows.Data.BindingExpressionBase,System.Windows.Controls.ValidationError)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Controls.ValidationError" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ValidationError (System.Windows.Controls.ValidationRule ruleInError, object bindingInError);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Controls.ValidationRule ruleInError, object bindingInError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationError.#ctor(System.Windows.Controls.ValidationRule,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ruleInError As ValidationRule, bindingInError As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ValidationError(System::Windows::Controls::ValidationRule ^ ruleInError, System::Object ^ bindingInError);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ruleInError" Type="System.Windows.Controls.ValidationRule" />
        <Parameter Name="bindingInError" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ruleInError">检测到验证错误的规则。</param>
        <param name="bindingInError">具有验证错误的 <see cref="T:System.Windows.Data.BindingExpression" /> 或 <see cref="T:System.Windows.Data.MultiBindingExpression" /> 对象。</param>
        <summary>使用指定的参数初始化 <see cref="T:System.Windows.Controls.ValidationError" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ValidationError (System.Windows.Controls.ValidationRule ruleInError, object bindingInError, object errorContent, Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Controls.ValidationRule ruleInError, object bindingInError, object errorContent, class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationError.#ctor(System.Windows.Controls.ValidationRule,System.Object,System.Object,System.Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ValidationError(System::Windows::Controls::ValidationRule ^ ruleInError, System::Object ^ bindingInError, System::Object ^ errorContent, Exception ^ exception);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ruleInError" Type="System.Windows.Controls.ValidationRule" />
        <Parameter Name="bindingInError" Type="System.Object" />
        <Parameter Name="errorContent" Type="System.Object" />
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="ruleInError">检测到验证错误的规则。</param>
        <param name="bindingInError">具有验证错误的 <see cref="T:System.Windows.Data.BindingExpression" /> 或 <see cref="T:System.Windows.Data.MultiBindingExpression" /> 对象。</param>
        <param name="errorContent">有关错误的信息。</param>
        <param name="exception">导致验证失败的异常。 此参数是可选的，可以设置为 <see langword="null" />。</param>
        <summary>使用指定的参数初始化 <see cref="T:System.Windows.Controls.ValidationError" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingInError">
      <MemberSignature Language="C#" Value="public object BindingInError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object BindingInError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ValidationError.BindingInError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BindingInError As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ BindingInError { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此 <see cref="T:System.Windows.Data.BindingExpression" /> 的 <see cref="T:System.Windows.Data.MultiBindingExpression" /> 或 <see cref="T:System.Windows.Controls.ValidationError" />对象。 该对象或者被显式标记为无效，或者具有失败的验证规则。</summary>
        <value>此 <see cref="T:System.Windows.Data.BindingExpression" /> 的 <see cref="T:System.Windows.Data.MultiBindingExpression" /> 或 <see cref="T:System.Windows.Controls.ValidationError" /> 对象。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorContent">
      <MemberSignature Language="C#" Value="public object ErrorContent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ErrorContent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ValidationError.ErrorContent" />
      <MemberSignature Language="VB.NET" Value="Public Property ErrorContent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ErrorContent { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个对象，该对象为此 <see cref="T:System.Windows.Controls.ValidationError" /> 提供其他上下文，如描述错误的字符串。</summary>
        <value>一个对象，它提供此 <see cref="T:System.Windows.Controls.ValidationError" /> 的其他上下文。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlTextUsage_ErrorContent"></a>   
## <a name="xaml-text-usage"></a>XAML 文本用法  
 请参阅有关示例示例部分。  
  
   
  
## Examples  
 下面的示例演示创建样式触发器<xref:System.Windows.Controls.ToolTip>报告验证错误消息。 <xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=nameWithType>附加的属性返回的集合<xref:System.Windows.Controls.ValidationError>绑定元素上的对象。  
  
 [!code-xaml[DataBindingLab#14](~/samples/snippets/csharp/VS_Snippets_Wpf/DataBindingLab/CSharp/DataBindingLabApp.xaml#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ValidationError.Exception" />
      <MemberSignature Language="VB.NET" Value="Public Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); void set(Exception ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置导致此 <see cref="T:System.Exception" /> 的 <see cref="T:System.Windows.Controls.ValidationError" /> 对象（如果此错误是异常造成的）。</summary>
        <value>
          <see cref="T:System.Exception" /> 对象（如果此错误是异常造成的）。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RuleInError">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ValidationRule RuleInError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.ValidationRule RuleInError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ValidationError.RuleInError" />
      <MemberSignature Language="VB.NET" Value="Public Property RuleInError As ValidationRule" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::ValidationRule ^ RuleInError { System::Windows::Controls::ValidationRule ^ get(); void set(System::Windows::Controls::ValidationRule ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ValidationRule</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置导致此 <see cref="T:System.Windows.Controls.ValidationRule" /> 的 <see cref="T:System.Windows.Controls.ValidationError" /> 对象（如果此错误是验证规则造成的）。</summary>
        <value>
          <see cref="T:System.Windows.Controls.ValidationRule" /> 对象（如果此错误是验证规则造成的）。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>