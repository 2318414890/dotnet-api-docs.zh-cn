<Type Name="WebBrowser" FullName="System.Windows.Controls.WebBrowser">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ab8f3e4b437b002e115fc924d1385621e19af2ca" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30630161" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WebBrowser : System.Windows.Interop.ActiveXHost" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WebBrowser extends System.Windows.Interop.ActiveXHost" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.WebBrowser" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WebBrowser&#xA;Inherits ActiveXHost" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebBrowser sealed : System::Windows::Interop::ActiveXHost" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Interop.ActiveXHost</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>承载 HTML 文档并在其之间导航。 启用 WPF 托管代码和 HTML 脚本之间的互操作性。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.WebBrowser>控件提供以下功能：  
  
 **导航**： <xref:System.Windows.Controls.WebBrowser.Source%2A>、 <xref:System.Windows.Controls.WebBrowser.Navigate%2A>、 <xref:System.Windows.Controls.WebBrowser.NavigateToStream%2A>、 <xref:System.Windows.Controls.WebBrowser.NavigateToString%2A>和 <xref:System.Windows.Controls.WebBrowser.Refresh%2A>。  
  
 **导航生存期**: <xref:System.Windows.Controls.WebBrowser.Navigating>， <xref:System.Windows.Controls.WebBrowser.Navigated>，和<xref:System.Windows.Controls.WebBrowser.LoadCompleted>。  
  
 **导航日记**: <xref:System.Windows.Controls.WebBrowser.CanGoBack%2A>， <xref:System.Windows.Controls.WebBrowser.GoBack%2A>， <xref:System.Windows.Controls.WebBrowser.CanGoForward%2A>，和<xref:System.Windows.Controls.WebBrowser.GoForward%2A>。  
  
 **WPF/HTML 互操作性**:<xref:System.Windows.Controls.WebBrowser.InvokeScript%2A>和<xref:System.Windows.Controls.WebBrowser.ObjectForScripting%2A>，和<xref:System.Windows.Controls.WebBrowser.Document%2A>。  
  
 <xref:System.Windows.Controls.WebBrowser> 绑定的安全约束的[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]承载的应用程序<xref:System.Windows.Controls.WebBrowser>:  
  
-   当<xref:System.Windows.Controls.WebBrowser>都由完全信任[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]应用程序 （独立应用程序，例如），<xref:System.Windows.Controls.WebBrowser>可以承载[!INCLUDE[TLA2#tla_html](~/includes/tla2sharptla-html-md.md)]从任何位置的文档。  
  
-   当<xref:System.Windows.Controls.WebBrowser>都由部分信任[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]应用程序 ( [!INCLUDE[TLA2#tla_xbap](~/includes/tla2sharptla-xbap-md.md)]，例如)，<xref:System.Windows.Controls.WebBrowser>只能承载文档，则**源站点**应用程序数据文件。 有关详细信息，请参阅 [WPF 应用程序资源、内容和数据文件](~/docs/framework/wpf/app-development/wpf-application-resource-content-and-data-files.md)。  
  
> [!CAUTION]
>  <xref:System.Windows.Controls.WebBrowser>控件内部实例化本机 WebBrowser ActiveX 控件。 WPF 通过将功能控制应用于的 WebBrowser ActiveX 控件中启用安全功能。 应用的功能控件不同于 Xbap 和独立应用程序。 某些应用程序应该应用附加功能控制以防止运行恶意内容。 有关详细信息，请参阅中的"web 浏览器控件和功能控件"一节[安全性 (WPF)](~/docs/framework/wpf/security-wpf.md)和[WebBrowser 控件概述和教程](http://go.microsoft.com/fwlink/?LinkId=179388)。  
  
   
  
## Examples  
 下面的示例演示如何配置<xref:System.Windows.Controls.WebBrowser>以导航到[!INCLUDE[TLA2#tla_html](~/includes/tla2sharptla-html-md.md)]只使用标记的文档。  
  
```xaml  
<!-- Web Browser Control that hosts a web page. -->  
<WebBrowser x:Name="webBrowser" Source="http://msdn.com"   
  Width="600" Height="600"  />  
```  
  
 下面的示例演示如何配置<xref:System.Windows.Controls.WebBrowser>以使用标记和代码隐藏导航到文档。  
  
```xaml  
<StackPanel>  
    <StackPanel Orientation="Horizontal">  
        <TextBox x:Name="addressTextBox" Width="200" />  
        <Button Click="goNavigateButton_Click">Go</Button>  
    </StackPanel>  
    <WebBrowser x:Name="myWebBrowser" />  
</StackPanel>  
```  
  
```csharp  
private void goNavigateButton_Click(object sender, RoutedEventArgs e)  
{  
    // Get URI to navigate to  
    Uri uri = new Uri(this.addressTextBox.Text, UriKind.RelativeOrAbsolute);  
  
    // Only absolute URIs can be navigated to  
    if (!uri.IsAbsoluteUri)  
    {  
        MessageBox.Show("The Address URI must be absolute eg 'http://www.microsoft.com'");  
        return;  
    }  
  
    // Navigate to the desired URL by calling the .Navigate method  
    this.myWebBrowser.Navigate(uri);  
}  
```  
  
 下面的示例演示如何处理`NewWindow2`事件和使用的类似事件<xref:System.Windows.Controls.WebBrowser>控件。 此示例需要引用**SHDocVw.dll**、`using System.Runtime.InteropServices;`语句，和一个<xref:System.Windows.Controls.WebBrowser>控件名为`webBrowser1`。  
  
```csharp  
public MainWindow()  
{  
    InitializeComponent();  
  
    var serviceProvider = (IServiceProvider)webBrowser1.Document;  
    if (serviceProvider != null)  
    {  
        Guid serviceGuid = new Guid("0002DF05-0000-0000-C000-000000000046");  
        Guid iid = typeof(SHDocVw.WebBrowser).GUID;  
        var webBrowserPtr = (SHDocVw.WebBrowser)serviceProvider  
            .QueryService(ref serviceGuid, ref iid);  
        if (webBrowserPtr != null)  
        {  
            webBrowserPtr.NewWindow2 += webBrowser1_NewWindow2;  
        }  
    }  
}  
  
private void webBrowser1_NewWindow2(ref object ppDisp, ref bool Cancel)  
{  
    // Handle the event.  
}  
  
[ComImport, InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]  
[Guid("6d5140c1-7436-11ce-8034-00aa006009fa")]  
internal interface IServiceProvider  
{  
    [return: MarshalAs(UnmanagedType.IUnknown)]  
    object QueryService(ref Guid guidService, ref Guid riid);  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebBrowser ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.WebBrowser.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebBrowser();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Controls.WebBrowser" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.WebBrowserPermission">若要调用此方法。 关联的枚举： <see cref="F:System.Security.Permissions.WebBrowserPermissionLevel.Safe" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CanGoBack">
      <MemberSignature Language="C#" Value="public bool CanGoBack { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanGoBack" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.WebBrowser.CanGoBack" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanGoBack As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanGoBack { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取指示是否存在要向后定位到的文档。</summary>
        <value>一个 <see cref="T:System.Boolean" /> 值，指示是否存在要向后定位到的文档。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何通过调用导航回上一个文档<xref:System.Windows.Controls.WebBrowser.GoBack%2A>。 该示例首先检查是否存在要向后定位到通过检查文档<xref:System.Windows.Controls.WebBrowser.CanGoBack%2A>。  
  
```csharp  
private void backButton_Click(object sender, RoutedEventArgs e)  
{  
  // Navigate to the previous HTML document, if there is one  
  if (this.webBrowser.CanGoBack)  
  {  
    this.webBrowser.GoBack();  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Controls.WebBrowser.GoBack" />
        <altmember cref="P:System.Windows.Controls.WebBrowser.CanGoForward" />
      </Docs>
    </Member>
    <Member MemberName="CanGoForward">
      <MemberSignature Language="C#" Value="public bool CanGoForward { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanGoForward" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.WebBrowser.CanGoForward" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanGoForward As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanGoForward { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取指示是否存在要向前定位到的文档。</summary>
        <value>一个 <see cref="T:System.Boolean" /> 值，指示是否存在要向前定位到的文档。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示如何向前定位到下一步[!INCLUDE[TLA2#tla_html](~/includes/tla2sharptla-html-md.md)]通过调用文档<xref:System.Windows.Controls.WebBrowser.GoForward%2A>。 该示例首先检查是否存在要通过检查向前定位到的文档<xref:System.Windows.Controls.WebBrowser.CanGoForward%2A>。  
  
```csharp  
private void forwardButton_Click(object sender, RoutedEventArgs e)  
{  
  // Navigate to the next HTML document, if there is one  
  if (this.webBrowser.CanGoForward)  
  {  
    this.webBrowser.GoForward();  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Controls.WebBrowser.GoForward" />
        <altmember cref="P:System.Windows.Controls.WebBrowser.CanGoBack" />
      </Docs>
    </Member>
    <Member MemberName="Document">
      <MemberSignature Language="C#" Value="public object Document { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Document" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.WebBrowser.Document" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Document As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Document { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表示所承载的 [!INCLUDE[TLA2#tla_html](~/includes/tla2sharptla-html-md.md)] 页的文档对象。</summary>
        <value>一个文档对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 强制转换为你期望出现 COM 接口所需要的文档对象。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Windows.Controls.WebBrowser" /> 实例不再有效。</exception>
        <exception cref="T:System.InvalidOperationException">未能检索到对基础本机 <c>WebBrowser</c> 的引用。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">若要调用此属性。 关联的枚举： <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GoBack">
      <MemberSignature Language="C#" Value="public void GoBack ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GoBack() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.WebBrowser.GoBack" />
      <MemberSignature Language="VB.NET" Value="Public Sub GoBack ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GoBack();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>向后定位到前一文档（如果存在）。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果调用<xref:System.Windows.Controls.WebBrowser.GoBack%2A>并且没有任何文档，以向后定位到，<xref:System.Windows.Controls.WebBrowser>不执行导航和引发异常。 如果需要你可以检查的值<xref:System.Windows.Controls.WebBrowser.CanGoBack%2A>属性来确定是否存在要向后定位到的文档。  
  
   
  
## Examples  
 下面的示例演示如何导航回之前[!INCLUDE[TLA2#tla_html](~/includes/tla2sharptla-html-md.md)]通过调用文档<xref:System.Windows.Controls.WebBrowser.GoBack%2A>。 该示例首先检查是否存在[!INCLUDE[TLA2#tla_html](~/includes/tla2sharptla-html-md.md)]文档导航回通过检查<xref:System.Windows.Controls.WebBrowser.CanGoBack%2A>。  
  
```csharp  
private void backButton_Click(object sender, RoutedEventArgs e)  
{  
  // Navigate to the previous HTML document, if there is one  
  if (this.webBrowser.CanGoBack)  
  {  
    this.webBrowser.GoBack();  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Windows.Controls.WebBrowser" /> 实例不再有效。</exception>
        <exception cref="T:System.InvalidOperationException">未能检索到对基础本机 <c>WebBrowser</c> 的引用。</exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">没有要向后定位到的文档。</exception>
        <altmember cref="P:System.Windows.Controls.WebBrowser.CanGoBack" />
        <altmember cref="M:System.Windows.Controls.WebBrowser.GoForward" />
      </Docs>
    </Member>
    <Member MemberName="GoForward">
      <MemberSignature Language="C#" Value="public void GoForward ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GoForward() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.WebBrowser.GoForward" />
      <MemberSignature Language="VB.NET" Value="Public Sub GoForward ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GoForward();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>向前定位到下一 [!INCLUDE[TLA2#tla_html](~/includes/tla2sharptla-html-md.md)] 文档（如果存在）。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果调用<xref:System.Windows.Controls.WebBrowser.GoForward%2A>和不存在要向前定位到，任何文档<xref:System.Windows.Controls.WebBrowser>不执行导航和引发异常。 如果需要你可以检查的值<xref:System.Windows.Controls.WebBrowser.CanGoForward%2A>属性来确定是否存在要向前定位到的文档。  
  
   
  
## Examples  
 下面的示例演示如何通过调用向前定位到下一个文档<xref:System.Windows.Controls.WebBrowser.GoForward%2A>。 该示例首先检查是否存在要通过检查向前定位到的文档<xref:System.Windows.Controls.WebBrowser.CanGoForward%2A>。  
  
```csharp  
private void forwardButton_Click(object sender, RoutedEventArgs e)  
{  
  // Navigate to the next HTML document, if there is one  
  if (this.webBrowser.CanGoForward)  
  {  
    this.webBrowser.GoForward();  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Windows.Controls.WebBrowser" /> 实例不再有效。</exception>
        <exception cref="T:System.InvalidOperationException">未能检索到对基础本机 <c>WebBrowser</c> 的引用。</exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">没有要向前定位到的文档。</exception>
        <altmember cref="P:System.Windows.Controls.WebBrowser.CanGoForward" />
        <altmember cref="M:System.Windows.Controls.WebBrowser.GoBack" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeScript">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>执行在当前加载的文档中定义的脚本函数。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeScript">
      <MemberSignature Language="C#" Value="public object InvokeScript (string scriptName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object InvokeScript(string scriptName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.WebBrowser.InvokeScript(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeScript (scriptName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeScript(System::String ^ scriptName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="scriptName">要执行的脚本函数的名称。</param>
        <summary>执行当前加载的文档所实现的脚本函数。</summary>
        <returns>活动脚本调用所返回的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.WebBrowser.InvokeScript%28System.String%29> 不应该调用之前将其实现的文档加载完毕。 你可以检测文档通过处理完成加载后<xref:System.Windows.Controls.WebBrowser.LoadCompleted>事件。  
  
   
  
## Examples  
 下面的示例演示如何从文档中调用的脚本函数[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]应用程序使用<xref:System.Windows.Controls.WebBrowser.InvokeScript%28System.String%29>。 在此示例中，脚本函数没有任何参数。  
  
 以下是[!INCLUDE[TLA2#tla_html](~/includes/tla2sharptla-html-md.md)]实现将从调用的脚本函数的文档[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]。  
  
```html  
<html>  
    <head>  
        <script type="text/javascript">  
            // Function Without Parameters  
            function JavaScriptFunctionWithoutParameters()    
            {  
              outputID.innerHTML = "JavaScript function called!";  
            }  
        </script>  
    </head>  
    <body>  
    <div id="outputID" style="color:Red; font-size:16">  
        Hello from HTML document with script!  
    </div>  
    </body>  
</html>  
```  
  
 如下所示[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]实现调用该脚本函数[!INCLUDE[TLA2#tla_html](~/includes/tla2sharptla-html-md.md)]文档。  
  
```csharp  
private void callScriptFunctionNoParamButton_Click(object sender, RoutedEventArgs e)  
{  
  // Make sure the HTML document has loaded before attempting to  
  // invoke script of the document page. You could set loadCompleted  
  // to true when the LoadCompleted event on the WebBrowser fires.  
  if (this.loadCompleted)  
  {  
    try  
    {  
      this.webBrowser.InvokeScript("JavaScriptFunctionWithoutParameters");  
    }  
    catch (Exception ex)  
    {  
      string msg = "Could not call script: " +  
                   ex.Message +  
                  "\n\nPlease click the 'Load HTML Document with Script' button to load.";  
      MessageBox.Show(msg);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Windows.Controls.WebBrowser" /> 实例不再有效。</exception>
        <exception cref="T:System.InvalidOperationException">未能检索到对基础本机 <c>WebBrowser</c> 的引用。</exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">脚本函数不存在。</exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeScript">
      <MemberSignature Language="C#" Value="public object InvokeScript (string scriptName, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object InvokeScript(string scriptName, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.WebBrowser.InvokeScript(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeScript (scriptName As String, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeScript(System::String ^ scriptName, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptName" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="scriptName">要执行的脚本函数的名称。</param>
        <param name="args">要传递到脚本函数的参数。</param>
        <summary>执行在当前加载的文档中定义的脚本函数。</summary>
        <returns>活动脚本调用所返回的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.WebBrowser.InvokeScript%28System.String%2CSystem.Object%5B%5D%29> 不应该调用之前将其实现的文档加载完毕。 你可以检测文档通过处理完成加载后<xref:System.Windows.Controls.WebBrowser.LoadCompleted>事件。  
  
 不，不要将足够多的参数值传递给所调用的脚本中，如果您不将传递到值参数将具有未定义的值。 如果您将太多的参数值传递，则忽略多余的值。  
  
   
  
## Examples  
 下面的示例演示如何通过使用，从应用程序调用脚本函数文档<xref:System.Windows.Controls.WebBrowser.InvokeScript%28System.String%2CSystem.Object%5B%5D%29>。 在此示例中，脚本函数需要参数。  
  
 以下是实现将从调用的脚本函数的文档[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]。  
  
```html  
<html>  
    <head>  
        <script type="text/javascript">  
            // Function Without Parameters  
            function JavaScriptFunctionWithoutParameters()    
            {  
              outputID.innerHTML = "JavaScript function 'called: " + message + ".";  
            }  
        </script>  
    </head>  
    <body>  
    <div id="outputID" style="color:Red; font-size:16">  
        Hello from HTML document with script!  
    </div>  
    </body>  
</html>  
```  
  
 如下所示[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]中函数的实现来调用脚本[!INCLUDE[TLA2#tla_html](~/includes/tla2sharptla-html-md.md)]文档。  
  
```csharp  
private void callScriptFunctionNoParamButton_Click(object sender, RoutedEventArgs e)  
{  
  // Make sure the HTML document has loaded before attempting to  
  // invoke script of the document page. You could set loadCompleted  
  // to true when the LoadCompleted event on the WebBrowser fires.  
  if (this.loadCompleted)  
  {  
    try  
    {  
      this.webBrowser.InvokeScript("JavaScriptFunctionWithoutParameters", this.messageTextBox.Text);  
    }  
    catch (Exception ex)  
    {  
      string msg = "Could not call script: " +  
                   ex.Message +  
                  "\n\nPlease click the 'Load HTML Document with Script' button to load.";  
      MessageBox.Show(msg);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Windows.Controls.WebBrowser" /> 实例不再有效。</exception>
        <exception cref="T:System.InvalidOperationException">未能检索到对基础本机 <c>WebBrowser</c> 的引用。</exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">脚本函数不存在。</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadCompleted">
      <MemberSignature Language="C#" Value="public event System.Windows.Navigation.LoadCompletedEventHandler LoadCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Navigation.LoadCompletedEventHandler LoadCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Controls.WebBrowser.LoadCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event LoadCompleted As LoadCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Navigation::LoadCompletedEventHandler ^ LoadCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Navigation.LoadCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要导航到的文档完成下载时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 导航的事件处理程序传递的实例<xref:System.Windows.Navigation.NavigationEventArgs>类，该类提供有关导航窗格中，包括 Web 响应的详细信息的上下文信息。  
  
 仅将对顶级导航触发此事件。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Controls.WebBrowser.Navigating" />
        <altmember cref="E:System.Windows.Controls.WebBrowser.Navigated" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Navigate">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>异步导航到位于指定 <see cref="T:System.Uri" /> 处的文档。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public void Navigate (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Navigate(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.WebBrowser.Navigate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Navigate (source As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Navigate(System::String ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">要导航到的 URL。</param>
        <summary>异步导航到位于指定 URL 处的文档。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Controls.WebBrowser.Navigate%28System.String%29>方法可导航到可能包括转义符的 URL。 使用<xref:System.Windows.Controls.WebBrowser.Navigate%28System.Uri%29>方法可导航到<xref:System.Uri>其中不包括转义符。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public void Navigate (Uri source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Navigate(class System.Uri source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.WebBrowser.Navigate(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Navigate (source As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Navigate(Uri ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="source">要导航到的 <see cref="T:System.Uri" />。</param>
        <summary>异步导航到位于指定 <see cref="T:System.Uri" /> 处的文档。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用<xref:System.Windows.Controls.WebBrowser.Navigate%28System.Uri%29>具有相同的效果与设置<xref:System.Windows.Controls.WebBrowser.Source%2A>属性。 <xref:System.Windows.Controls.WebBrowser.Source%2A> 标记由开发人员想要以声明方式指定的初始文档的<xref:System.Windows.Controls.WebBrowser>导航到时<xref:System.Windows.Controls.WebBrowser>初始化。  
  
 使用<xref:System.Windows.Controls.WebBrowser.Navigate%28System.String%29>方法可导航到可能包括转义符的 URL。 使用<xref:System.Windows.Controls.WebBrowser.Navigate%28System.Uri%29>方法可导航到<xref:System.Uri>其中不包括转义符。  
  
   
  
## Examples  
 下面的示例演示如何使用<xref:System.Windows.Controls.WebBrowser>通过导航到文档<xref:System.Windows.Controls.WebBrowser.Navigate%28System.Uri%29>方法。  
  
```xaml  
<StackPanel>  
    <StackPanel Orientation="Horizontal">  
        <TextBox x:Name="addressTextBox" Width="200" />  
        <Button Click="goNavigateButton_Click">Go</Button>  
    </StackPanel>  
    <WebBrowser x:Name="myWebBrowser" />  
</StackPanel>  
```  
  
```csharp  
private void goNavigateButton_Click(object sender, RoutedEventArgs e)  
{  
    // Get URI to navigate to  
    Uri uri = new Uri(this.addressTextBox.Text, UriKind.RelativeOrAbsolute);  
  
    // Only absolute URIs can be navigated to  
    if (!uri.IsAbsoluteUri)  
    {  
        MessageBox.Show("The Address URI must be absolute eg 'http://www.microsoft.com'");  
        return;  
    }  
  
    // Navigate to the desired URL by calling the .Navigate method  
    this.myWebBrowser.Navigate(uri);  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Windows.Controls.WebBrowser" /> 实例不再有效。</exception>
        <exception cref="T:System.InvalidOperationException">未能检索到对基础本机 <c>WebBrowser</c> 的引用。</exception>
        <exception cref="T:System.Security.SecurityException">从以不完全可信状态运行的应用程序导航到不位于源站点的 <see cref="T:System.Uri" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public void Navigate (string source, string targetFrameName, byte[] postData, string additionalHeaders);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Navigate(string source, string targetFrameName, unsigned int8[] postData, string additionalHeaders) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.WebBrowser.Navigate(System.String,System.String,System.Byte[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Navigate (source As String, targetFrameName As String, postData As Byte(), additionalHeaders As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Navigate(System::String ^ source, System::String ^ targetFrameName, cli::array &lt;System::Byte&gt; ^ postData, System::String ^ additionalHeaders);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="targetFrameName" Type="System.String" />
        <Parameter Name="postData" Type="System.Byte[]" />
        <Parameter Name="additionalHeaders" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">要导航到的 URL。</param>
        <param name="targetFrameName">要在其中显示文档内容的框架的名称。</param>
        <param name="postData">要在请求源时发送到服务器的 HTTP POST 数据。</param>
        <param name="additionalHeaders">要在请求源时发送到服务器的 HTTP 标头。</param>
        <summary>异步导航到位于指定 URL 处的文档，并指定要向其中加载文档内容的目标框架。 可将其他 HTTP POST 数据和 HTTP 标头作为导航请求的一部分发送到服务器。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Controls.WebBrowser.Navigate%28System.String%2CSystem.String%2CSystem.Byte%5B%5D%2CSystem.String%29>方法可导航到可能包括转义符的 URL。 使用<xref:System.Windows.Controls.WebBrowser.Navigate%28System.Uri%2CSystem.String%2CSystem.Byte%5B%5D%2CSystem.String%29>方法可导航到<xref:System.Uri>其中不包括转义符。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public void Navigate (Uri source, string targetFrameName, byte[] postData, string additionalHeaders);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Navigate(class System.Uri source, string targetFrameName, unsigned int8[] postData, string additionalHeaders) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.WebBrowser.Navigate(System.Uri,System.String,System.Byte[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Navigate (source As Uri, targetFrameName As String, postData As Byte(), additionalHeaders As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Navigate(Uri ^ source, System::String ^ targetFrameName, cli::array &lt;System::Byte&gt; ^ postData, System::String ^ additionalHeaders);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Uri" />
        <Parameter Name="targetFrameName" Type="System.String" />
        <Parameter Name="postData" Type="System.Byte[]" />
        <Parameter Name="additionalHeaders" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">要导航到的 <see cref="T:System.Uri" />。</param>
        <param name="targetFrameName">要在其中显示文档内容的框架的名称。</param>
        <param name="postData">要在请求源时发送到服务器的 HTTP POST 数据。</param>
        <param name="additionalHeaders">要在请求源时发送到服务器的 HTTP 标头。</param>
        <summary>异步导航到位于指定 <see cref="T:System.Uri" /> 处的文档，并指定要向其中加载文档内容的目标框架。 可将其他 HTTP POST 数据和 HTTP 标头作为导航请求的一部分发送到服务器。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Controls.WebBrowser.Navigate%28System.String%2CSystem.String%2CSystem.Byte%5B%5D%2CSystem.String%29>方法可导航到可能包括转义符的 URL。 使用<xref:System.Windows.Controls.WebBrowser.Navigate%28System.Uri%2CSystem.String%2CSystem.Byte%5B%5D%2CSystem.String%29>方法可导航到<xref:System.Uri>其中不包括转义符。  
  
   
  
## Examples  
 下面的示例演示如何导航到文档并通过指定在新的浏览器窗口中打开它"有关： 空白"目标。  
  
```xaml  
<StackPanel>  
    <StackPanel Orientation="Horizontal">  
        <TextBox x:Name="addressTextBox" Width="200" />  
        <Button Click="goNavigateButton_Click">Go</Button>  
    </StackPanel>  
    <WebBrowser x:Name="myWebBrowser" />  
</StackPanel>  
```  
  
```csharp  
private void goNavigateButton_Click(object sender, RoutedEventArgs e)  
{  
    // Get URI to navigate to  
    Uri uri = new Uri(this.addressTextBox.Text, UriKind.RelativeOrAbsolute);  
  
    // Only absolute URIs can be navigated to  
    if (!uri.IsAbsoluteUri)  
    {  
        MessageBox.Show("The Address URI must be absolute eg 'http://www.microsoft.com'");  
        return;  
    }  
  
    // Navigate to the desired URL by calling the .Navigate method  
    this.myWebBrowser.Navigate(uri, "_blank", null, null);  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Windows.Controls.WebBrowser" /> 实例不再有效。</exception>
        <exception cref="T:System.InvalidOperationException">未能检索到对基础本机 <c>WebBrowser</c> 的引用。</exception>
        <exception cref="T:System.Security.SecurityException">从以不完全可信状态运行的应用程序导航：  
  
-   导航到并非位于源站点的 <see cref="T:System.Uri" /> 或  
  
-   <paramref name="targetFrameName" /> 名称不是 <see langword="null" />，也不为空。</exception>
      </Docs>
    </Member>
    <Member MemberName="Navigated">
      <MemberSignature Language="C#" Value="public event System.Windows.Navigation.NavigatedEventHandler Navigated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Navigation.NavigatedEventHandler Navigated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Controls.WebBrowser.Navigated" />
      <MemberSignature Language="VB.NET" Value="Public Event Navigated As NavigatedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Navigation::NavigatedEventHandler ^ Navigated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Navigation.NavigatedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>定位到要导航到的文档并开始下载时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 导航的事件处理程序传递的实例<xref:System.Windows.Navigation.NavigationEventArgs>类，该类提供有关导航窗格中，包括 Web 响应的详细信息的上下文信息。  
  
 仅将对顶级导航触发此事件。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Controls.WebBrowser.Navigating" />
        <altmember cref="E:System.Windows.Controls.WebBrowser.LoadCompleted" />
      </Docs>
    </Member>
    <Member MemberName="NavigateToStream">
      <MemberSignature Language="C#" Value="public void NavigateToStream (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void NavigateToStream(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.WebBrowser.NavigateToStream(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NavigateToStream(System::IO::Stream ^ stream);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">包含文档内容的 <see cref="T:System.IO.Stream" />。</param>
        <summary>异步导航到文档内容所在的 <see cref="T:System.IO.Stream" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`stream`参数是`null`，<xref:System.Windows.Controls.WebBrowser>导航到空白文档 ("关于： 空白")。  
  
 如果流参数不在有效[!INCLUDE[TLA2#tla_html](~/includes/tla2sharptla-html-md.md)]格式，它将显示为纯文本。  
  
 在导航窗格中之后,<xref:System.Windows.Controls.WebBrowser.Source%2A>将`null`。  
  
   
  
## Examples  
 下面的示例演示如何导航到包含文档的流。  
  
```csharp  
private void goNavigateToStreamButton_Click(object sender, RoutedEventArgs e)  
{  
  // Load HTML document as a stream  
  Uri uri = new Uri(@"pack://application:,,,/HTMLDocumentWithScript.html", UriKind.Absolute);  
  Stream source = Application.GetResourceStream(uri).Stream;  
  
  // Navigate to HTML document stream  
  this.webBrowser.NavigateToStream(source);  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Windows.Controls.WebBrowser" /> 实例不再有效。</exception>
        <exception cref="T:System.InvalidOperationException">未能检索到对基础本机 <c>WebBrowser</c> 的引用。</exception>
        <altmember cref="M:System.Windows.Controls.WebBrowser.NavigateToString(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="NavigateToString">
      <MemberSignature Language="C#" Value="public void NavigateToString (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void NavigateToString(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.WebBrowser.NavigateToString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub NavigateToString (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NavigateToString(System::String ^ text);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">包含文档内容的 <see cref="T:System.String" />。</param>
        <summary>异步导航到文档内容所在的 <see cref="T:System.String" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`text`参数是`null`，<xref:System.Windows.Controls.WebBrowser>导航到空白文档 ("关于： 空白")。  
  
 如果文本参数不在有效[!INCLUDE[TLA2#tla_html](~/includes/tla2sharptla-html-md.md)]格式，它将显示为纯文本。  
  
 在导航窗格中之后,<xref:System.Windows.Controls.WebBrowser.Source%2A>将`null`。  
  
   
  
## Examples  
 下面的示例演示如何导航到包含文档的字符串。  
  
```csharp  
private void goNavigateToStringButton_Click(object sender, RoutedEventArgs e)  
{  
  // Load HTML document as a string  
  Uri uri = new Uri(@"pack://application:,,,/HTMLDocumentWithoutScript.html", UriKind.Absolute);  
  Stream stream = Application.GetResourceStream(uri).Stream;  
  using (StreamReader reader = new StreamReader(stream))  
  {  
    // Navigate to HTML document string  
    this.webBrowser.NavigateToString(reader.ReadToEnd());  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Windows.Controls.WebBrowser" /> 实例不再有效。</exception>
        <exception cref="T:System.InvalidOperationException">未能检索到对基础本机 <c>WebBrowser</c> 的引用。</exception>
        <altmember cref="M:System.Windows.Controls.WebBrowser.NavigateToStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="Navigating">
      <MemberSignature Language="C#" Value="public event System.Windows.Navigation.NavigatingCancelEventHandler Navigating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Navigation.NavigatingCancelEventHandler Navigating" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Controls.WebBrowser.Navigating" />
      <MemberSignature Language="VB.NET" Value="Public Event Navigating As NavigatingCancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Navigation::NavigatingCancelEventHandler ^ Navigating;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Navigation.NavigatingCancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>正好在导航到某个文档之前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 导航事件处理程序传递的实例<xref:System.Windows.Navigation.NavigatingCancelEventArgs>类。 你可以通过设置取消导航<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>属性<xref:System.Windows.Navigation.NavigatingCancelEventArgs>对象传递给`true`。  
  
 仅将对顶级导航触发此事件。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Controls.WebBrowser.Navigated" />
        <altmember cref="E:System.Windows.Controls.WebBrowser.LoadCompleted" />
      </Docs>
    </Member>
    <Member MemberName="ObjectForScripting">
      <MemberSignature Language="C#" Value="public object ObjectForScripting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ObjectForScripting" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.WebBrowser.ObjectForScripting" />
      <MemberSignature Language="VB.NET" Value="Public Property ObjectForScripting As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ObjectForScripting { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置公共类的一个实例，该实例由主机应用程序实现且可由寄宿文档的脚本访问。</summary>
        <value>作为 <see langword="public" /> 类的实例的 <see cref="T:System.Object" />，由主机应用程序实现且可由寄宿文档的脚本访问。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性可以设置为任何 COM 可见的对象，你希望其公共属性和方法可用于脚本代码。 你可以通过将其与标记使 COM 可见类<xref:System.Runtime.InteropServices.ComVisibleAttribute>。  
  
 为脚本被公开到当前文档的设置的对象[!INCLUDE[TLA2#tla_html](~/includes/tla2sharptla-html-md.md)]DOM 使用`window.external`属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Windows.Controls.WebBrowser.ObjectForScripting" /> 是通过不属于 <see langword="COMVisible" /> 类型的实例设置的。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Refresh">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>重载当前页。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.WebBrowser.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Refresh();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>重载当前页。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Windows.Controls.WebBrowser" /> 实例不再有效。</exception>
        <exception cref="T:System.InvalidOperationException">未能检索到对基础本机 <c>WebBrowser</c> 的引用。</exception>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh (bool noCache);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Refresh(bool noCache) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.WebBrowser.Refresh(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Refresh (noCache As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Refresh(bool noCache);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="noCache" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="noCache">指定是否刷新，而不进行缓存验证。</param>
        <summary>重载带有可选缓存验证的当前页。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果`noCache`是`true`、<xref:System.Windows.Controls.WebBrowser>通过发送控制而不进行缓存验证的刷新"Pragma:no-缓存"到服务器的标头。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Windows.Controls.WebBrowser" /> 实例不再有效。</exception>
        <exception cref="T:System.InvalidOperationException">未能检索到对基础本机 <c>WebBrowser</c> 的引用。</exception>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public Uri Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Source" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.WebBrowser.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Source { Uri ^ get(); void set(Uri ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Uri" /> 中承载的当前文档的 <see cref="T:System.Windows.Controls.WebBrowser" />。</summary>
        <value>
          <see cref="T:System.Uri" />当前[!INCLUDE[TLA2#tla_html](~/includes/tla2sharptla-html-md.md)]文档。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 设置源属性会导致<xref:System.Windows.Controls.WebBrowser>以导航到指定的文档<xref:System.Uri>。 如果<xref:System.Uri>是`null`，显示一个空白文档 ("关于： 空白")。  
  
   
  
## Examples  
 下面的示例演示如何配置<xref:System.Windows.Controls.WebBrowser>以导航到[!INCLUDE[TLA2#tla_html](~/includes/tla2sharptla-html-md.md)]只使用标记的文档。  
  
```xaml  
<!-- Web Browser Control that hosts a web page. -->  
<WebBrowser x:Name="webBrowser" Source="http://msdn.com"   
  Width="600" Height="600"  />  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Windows.Controls.WebBrowser" /> 实例不再有效。</exception>
        <exception cref="T:System.InvalidOperationException">未能检索到对基础本机 <c>WebBrowser</c> 的引用。</exception>
        <exception cref="T:System.Security.SecurityException">从以不完全可信状态运行的应用程序导航到不位于源站点的 <see cref="T:System.Uri" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="TabIntoCore">
      <MemberSignature Language="C#" Value="protected override bool TabIntoCore (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool TabIntoCore(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.WebBrowser.TabIntoCore(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TabIntoCore (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool TabIntoCore(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateAcceleratorCore">
      <MemberSignature Language="C#" Value="protected override bool TranslateAcceleratorCore (ref System.Windows.Interop.MSG msg, System.Windows.Input.ModifierKeys modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool TranslateAcceleratorCore(valuetype System.Windows.Interop.MSG&amp; msg, valuetype System.Windows.Input.ModifierKeys modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.WebBrowser.TranslateAcceleratorCore(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function TranslateAcceleratorCore (ByRef msg As MSG, modifiers As ModifierKeys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool TranslateAcceleratorCore(System::Windows::Interop::MSG % msg, System::Windows::Input::ModifierKeys modifiers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Interop.MSG&amp;" RefType="ref" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
      </Parameters>
      <Docs>
        <param name="msg">To be added.</param>
        <param name="modifiers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>