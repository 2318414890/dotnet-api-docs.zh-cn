<Type Name="DataTemplateSelector" FullName="System.Windows.Controls.DataTemplateSelector">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="13e8ecd8a23acd4ce8b9fccd80c4d34a0ae805ba" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39881898" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataTemplateSelector" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataTemplateSelector extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.DataTemplateSelector" />
  <TypeSignature Language="VB.NET" Value="Public Class DataTemplateSelector" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTemplateSelector" />
  <TypeSignature Language="F#" Value="type DataTemplateSelector = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="c51b0-101">提供一种方式来根据数据对象和数据绑定元素选择 <see cref="T:System.Windows.DataTemplate" />。</span>
      <span class="sxs-lookup">
        <span data-stu-id="c51b0-101">Provides a way to choose a <see cref="T:System.Windows.DataTemplate" /> based on the data object and the data-bound element.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c51b0-102">通常情况下，创建<xref:System.Windows.Controls.DataTemplateSelector>时有多个<xref:System.Windows.DataTemplate>为同一类型的对象，并且您想要提供您自己的逻辑来选择<xref:System.Windows.DataTemplate>应用基于每个数据对象的属性。</span><span class="sxs-lookup"><span data-stu-id="c51b0-102">Typically, you create a <xref:System.Windows.Controls.DataTemplateSelector> when you have more than one <xref:System.Windows.DataTemplate> for the same type of objects and you want to supply your own logic to choose a <xref:System.Windows.DataTemplate> to apply based on the properties of each data object.</span></span> <span data-ttu-id="c51b0-103">请注意，如果有不同的对象类型，您可以设置<xref:System.Windows.DataTemplate.DataType%2A>属性上的<xref:System.Windows.DataTemplate>。</span><span class="sxs-lookup"><span data-stu-id="c51b0-103">Note that if you have objects of different types you can set the <xref:System.Windows.DataTemplate.DataType%2A> property on the <xref:System.Windows.DataTemplate>.</span></span> <span data-ttu-id="c51b0-104">如果你这么做，则无需创建<xref:System.Windows.Controls.DataTemplateSelector>。</span><span class="sxs-lookup"><span data-stu-id="c51b0-104">If you do that then there is no need to create a <xref:System.Windows.Controls.DataTemplateSelector>.</span></span> <span data-ttu-id="c51b0-105">此外，如果对象的类型相同但具有不同的属性，还可以考虑使用<xref:System.Windows.DataTrigger>或数据转换器。</span><span class="sxs-lookup"><span data-stu-id="c51b0-105">Furthermore, if you have objects of the same type but with different properties, you can also consider using a <xref:System.Windows.DataTrigger> or a data converter.</span></span> <span data-ttu-id="c51b0-106">有关详细信息，请参阅 [数据模板化概述](~/docs/framework/wpf/data/data-templating-overview.md)。</span><span class="sxs-lookup"><span data-stu-id="c51b0-106">For more information, see [Data Templating Overview](~/docs/framework/wpf/data/data-templating-overview.md).</span></span>  
  
 <span data-ttu-id="c51b0-107">若要创建一个模板选择器，创建一个类继承自<xref:System.Windows.Controls.DataTemplateSelector>并重写<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c51b0-107">To create a template selector, create a class that inherits from <xref:System.Windows.Controls.DataTemplateSelector> and override the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method.</span></span> <span data-ttu-id="c51b0-108">一旦您的类定义可以将类的实例分配给您的元素的模板选择器属性。</span><span class="sxs-lookup"><span data-stu-id="c51b0-108">Once your class is defined you can assign an instance of the class to the template selector property of your element.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c51b0-109">在此示例中，绑定源是一系列`Task`对象。</span><span class="sxs-lookup"><span data-stu-id="c51b0-109">In this example, the binding source is a list of `Task` objects.</span></span> <span data-ttu-id="c51b0-110">属性之一`Task`对象是`Priority`。</span><span class="sxs-lookup"><span data-stu-id="c51b0-110">One of the properties of a `Task` object is `Priority`.</span></span> <span data-ttu-id="c51b0-111">有两个数据模板定义，`myTaskTemplate`和`importantTaskTemplate`。</span><span class="sxs-lookup"><span data-stu-id="c51b0-111">There are two data templates defined, `myTaskTemplate` and `importantTaskTemplate`.</span></span>  
  
 <span data-ttu-id="c51b0-112">若要提供逻辑来选择哪些<xref:System.Windows.DataTemplate>使用基于`Priority`值的数据对象中，创建一个子类<xref:System.Windows.Controls.DataTemplateSelector>并重写<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c51b0-112">To supply logic to choose which <xref:System.Windows.DataTemplate> to use based on the `Priority` value of the data object, create a subclass of <xref:System.Windows.Controls.DataTemplateSelector> and override the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method.</span></span> <span data-ttu-id="c51b0-113">在以下示例中，<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>方法提供逻辑以返回相应的模板值的基础`Priority`属性。</span><span class="sxs-lookup"><span data-stu-id="c51b0-113">In the following example, the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method provides logic to return the appropriate template based on the value of the `Priority` property.</span></span> <span data-ttu-id="c51b0-114">封装的资源中找到要返回的模板<xref:System.Windows.Window>元素。</span><span class="sxs-lookup"><span data-stu-id="c51b0-114">The template to return is found in the resources of the enveloping <xref:System.Windows.Window> element.</span></span>  
  
 [!code-csharp[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/TaskListDataTemplateSelector.cs#dtsclass)]
 [!code-vb[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DataTemplatingIntro_snip/visualbasic/tasklistdatatemplateselector.vb#dtsclass)]  
  
 <span data-ttu-id="c51b0-115">然后，我们可以将 `TaskListDataTemplateSelector` 声明为资源：</span><span class="sxs-lookup"><span data-stu-id="c51b0-115">We can then declare the `TaskListDataTemplateSelector` as a resource:</span></span>  
  
 [!code-xaml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xaml[DataTemplatingIntro_snip#DTS](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#dts)]  
[!code-xaml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 <span data-ttu-id="c51b0-116">若要使用的模板选择器资源，将其分配给<xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A>属性的<xref:System.Windows.Controls.ListBox>。</span><span class="sxs-lookup"><span data-stu-id="c51b0-116">To use the template selector resource, assign it to the <xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A> property of the <xref:System.Windows.Controls.ListBox>.</span></span> <span data-ttu-id="c51b0-117"><xref:System.Windows.Controls.ListBox>调用<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>方法的`TaskListDataTemplateSelector`为每个基础集合中的项。</span><span class="sxs-lookup"><span data-stu-id="c51b0-117">The <xref:System.Windows.Controls.ListBox> calls the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method of the `TaskListDataTemplateSelector` for each of the items in the underlying collection.</span></span> <span data-ttu-id="c51b0-118">该调用会将数据对象作为项参数传递。</span><span class="sxs-lookup"><span data-stu-id="c51b0-118">The call passes the data object as the item parameter.</span></span> <span data-ttu-id="c51b0-119"><xref:System.Windows.DataTemplate>返回该方法然后应用于该数据对象。</span><span class="sxs-lookup"><span data-stu-id="c51b0-119">The <xref:System.Windows.DataTemplate> that is returned by the method is then applied to that data object.</span></span>  
  
 [!code-xaml[DataTemplatingIntro_snip#ItemTemplateSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#itemtemplateselector)]  
  
 <span data-ttu-id="c51b0-120">有关完整示例，请参阅[数据模板化示例简介](http://go.microsoft.com/fwlink/?LinkID=160009)。</span><span class="sxs-lookup"><span data-stu-id="c51b0-120">For the complete sample, see [Introduction to Data Templating Sample](http://go.microsoft.com/fwlink/?LinkID=160009).</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTemplateSelector ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.DataTemplateSelector.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTemplateSelector();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="c51b0-121">初始化 <see cref="T:System.Windows.Controls.DataTemplateSelector" /> 类的新实例。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c51b0-121">Initializes a new instance of the <see cref="T:System.Windows.Controls.DataTemplateSelector" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DataTemplate SelectTemplate (object item, System.Windows.DependencyObject container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DataTemplate SelectTemplate(object item, class System.Windows.DependencyObject container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.DataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SelectTemplate (item As Object, container As DependencyObject) As DataTemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DataTemplate ^ SelectTemplate(System::Object ^ item, System::Windows::DependencyObject ^ container);" />
      <MemberSignature Language="F#" Value="abstract member SelectTemplate : obj * System.Windows.DependencyObject -&gt; System.Windows.DataTemplate&#xA;override this.SelectTemplate : obj * System.Windows.DependencyObject -&gt; System.Windows.DataTemplate" Usage="dataTemplateSelector.SelectTemplate (item, container)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DataTemplate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="container" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="item">
          <span data-ttu-id="c51b0-122">要为其选择模板的数据对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c51b0-122">The data object for which to select the template.</span>
          </span>
        </param>
        <param name="container">
          <span data-ttu-id="c51b0-123">数据绑定对象。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c51b0-123">The data-bound object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="c51b0-124">在派生类中重写时，基于自定义逻辑返回 <see cref="T:System.Windows.DataTemplate" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c51b0-124">When overridden in a derived class, returns a <see cref="T:System.Windows.DataTemplate" /> based on custom logic.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="c51b0-125">返回 <see cref="T:System.Windows.DataTemplate" /> 或 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c51b0-125">Returns a <see cref="T:System.Windows.DataTemplate" /> or <see langword="null" />.</span>
          </span>
          <span data-ttu-id="c51b0-126">默认值为 <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="c51b0-126">The default value is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c51b0-127">通常情况下，当有多个数据模板为相同类型的对象定义时使用的模板选择器。</span><span class="sxs-lookup"><span data-stu-id="c51b0-127">Typically, you use a template selector when you have more than one data template defined for the same type of objects.</span></span> <span data-ttu-id="c51b0-128">例如，如果绑定源是列表系列学生对象，并且您想要将特定的模板应用于非全日制学生。</span><span class="sxs-lookup"><span data-stu-id="c51b0-128">For example, if your binding source is list a list of student objects and you want to apply a particular template to the part-time students.</span></span> <span data-ttu-id="c51b0-129">您可以执行此操作通过创建继承的类<xref:System.Windows.Controls.DataTemplateSelector>并重写<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c51b0-129">You can do this by creating a class that inherits from <xref:System.Windows.Controls.DataTemplateSelector> and overriding the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method.</span></span> <span data-ttu-id="c51b0-130">一旦您的类定义可以将类的实例分配给您的元素的模板选择器属性。</span><span class="sxs-lookup"><span data-stu-id="c51b0-130">Once your class is defined you can assign an instance of the class to the template selector property of your element.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c51b0-131">在此示例中，绑定源是一系列`Task`对象。</span><span class="sxs-lookup"><span data-stu-id="c51b0-131">In this example, the binding source is a list of `Task` objects.</span></span> <span data-ttu-id="c51b0-132">属性之一`Task`对象是`Priority`。</span><span class="sxs-lookup"><span data-stu-id="c51b0-132">One of the properties of a `Task` object is `Priority`.</span></span> <span data-ttu-id="c51b0-133">有两个数据模板定义，`myTaskTemplate`和`importantTaskTemplate`。</span><span class="sxs-lookup"><span data-stu-id="c51b0-133">There are two data templates defined, `myTaskTemplate` and `importantTaskTemplate`.</span></span>  
  
 <span data-ttu-id="c51b0-134">若要提供逻辑来选择哪些<xref:System.Windows.DataTemplate>使用基于`Priority`值的数据对象中，创建一个子类<xref:System.Windows.Controls.DataTemplateSelector>并重写<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>方法。</span><span class="sxs-lookup"><span data-stu-id="c51b0-134">To supply logic to choose which <xref:System.Windows.DataTemplate> to use based on the `Priority` value of the data object, create a subclass of <xref:System.Windows.Controls.DataTemplateSelector> and override the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method.</span></span> <span data-ttu-id="c51b0-135">在以下示例中，<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>方法提供逻辑以返回相应的模板值的基础`Priority`属性。</span><span class="sxs-lookup"><span data-stu-id="c51b0-135">In the following example, the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method provides logic to return the appropriate template based on the value of the `Priority` property.</span></span> <span data-ttu-id="c51b0-136">封装的资源中找到要返回的模板<xref:System.Windows.Window>元素。</span><span class="sxs-lookup"><span data-stu-id="c51b0-136">The template to return is found in the resources of the enveloping <xref:System.Windows.Window> element.</span></span>  
  
 [!code-csharp[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/TaskListDataTemplateSelector.cs#dtsclass)]
 [!code-vb[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DataTemplatingIntro_snip/visualbasic/tasklistdatatemplateselector.vb#dtsclass)]  
  
 <span data-ttu-id="c51b0-137">然后，我们可以将 `TaskListDataTemplateSelector` 声明为资源：</span><span class="sxs-lookup"><span data-stu-id="c51b0-137">We can then declare the `TaskListDataTemplateSelector` as a resource:</span></span>  
  
 [!code-xaml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xaml[DataTemplatingIntro_snip#DTS](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#dts)]  
[!code-xaml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 <span data-ttu-id="c51b0-138">若要使用的模板选择器资源，将其分配给<xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A>属性的<xref:System.Windows.Controls.ListBox>。</span><span class="sxs-lookup"><span data-stu-id="c51b0-138">To use the template selector resource, assign it to the <xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A> property of the <xref:System.Windows.Controls.ListBox>.</span></span> <span data-ttu-id="c51b0-139"><xref:System.Windows.Controls.ListBox>调用<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>方法的`TaskListDataTemplateSelector`为每个基础集合中的项。</span><span class="sxs-lookup"><span data-stu-id="c51b0-139">The <xref:System.Windows.Controls.ListBox> calls the <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> method of the `TaskListDataTemplateSelector` for each of the items in the underlying collection.</span></span> <span data-ttu-id="c51b0-140">该调用会将数据对象作为项参数传递。</span><span class="sxs-lookup"><span data-stu-id="c51b0-140">The call passes the data object as the item parameter.</span></span> <span data-ttu-id="c51b0-141"><xref:System.Windows.DataTemplate>返回该方法然后应用于该数据对象。</span><span class="sxs-lookup"><span data-stu-id="c51b0-141">The <xref:System.Windows.DataTemplate> that is returned by the method is then applied to that data object.</span></span>  
  
 [!code-xaml[DataTemplatingIntro_snip#ItemTemplateSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#itemtemplateselector)]  
  
 <span data-ttu-id="c51b0-142">有关完整示例，请参阅[数据模板化示例简介](http://go.microsoft.com/fwlink/?LinkID=160009)。</span><span class="sxs-lookup"><span data-stu-id="c51b0-142">For the complete sample, see [Introduction to Data Templating Sample](http://go.microsoft.com/fwlink/?LinkID=160009).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>