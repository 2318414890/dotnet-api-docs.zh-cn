<Type Name="DataTemplateSelector" FullName="System.Windows.Controls.DataTemplateSelector">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="13e8ecd8a23acd4ce8b9fccd80c4d34a0ae805ba" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="zh-CN" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39881898" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataTemplateSelector" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataTemplateSelector extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.DataTemplateSelector" />
  <TypeSignature Language="VB.NET" Value="Public Class DataTemplateSelector" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTemplateSelector" />
  <TypeSignature Language="F#" Value="type DataTemplateSelector = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供一种方式来根据数据对象和数据绑定元素选择 <see cref="T:System.Windows.DataTemplate" />。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常情况下，创建<xref:System.Windows.Controls.DataTemplateSelector>时有多个<xref:System.Windows.DataTemplate>为同一类型的对象，并且您想要提供您自己的逻辑来选择<xref:System.Windows.DataTemplate>应用基于每个数据对象的属性。 请注意，如果有不同的对象类型，您可以设置<xref:System.Windows.DataTemplate.DataType%2A>属性上的<xref:System.Windows.DataTemplate>。 如果你这么做，则无需创建<xref:System.Windows.Controls.DataTemplateSelector>。 此外，如果对象的类型相同但具有不同的属性，还可以考虑使用<xref:System.Windows.DataTrigger>或数据转换器。 有关详细信息，请参阅 [数据模板化概述](~/docs/framework/wpf/data/data-templating-overview.md)。  
  
 若要创建一个模板选择器，创建一个类继承自<xref:System.Windows.Controls.DataTemplateSelector>并重写<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>方法。 一旦您的类定义可以将类的实例分配给您的元素的模板选择器属性。  
  
   
  
## Examples  
 在此示例中，绑定源是一系列`Task`对象。 属性之一`Task`对象是`Priority`。 有两个数据模板定义，`myTaskTemplate`和`importantTaskTemplate`。  
  
 若要提供逻辑来选择哪些<xref:System.Windows.DataTemplate>使用基于`Priority`值的数据对象中，创建一个子类<xref:System.Windows.Controls.DataTemplateSelector>并重写<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>方法。 在以下示例中，<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>方法提供逻辑以返回相应的模板值的基础`Priority`属性。 封装的资源中找到要返回的模板<xref:System.Windows.Window>元素。  
  
 [!code-csharp[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/TaskListDataTemplateSelector.cs#dtsclass)]
 [!code-vb[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DataTemplatingIntro_snip/visualbasic/tasklistdatatemplateselector.vb#dtsclass)]  
  
 然后，我们可以将 `TaskListDataTemplateSelector` 声明为资源：  
  
 [!code-xaml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xaml[DataTemplatingIntro_snip#DTS](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#dts)]  
[!code-xaml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 若要使用的模板选择器资源，将其分配给<xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A>属性的<xref:System.Windows.Controls.ListBox>。 <xref:System.Windows.Controls.ListBox>调用<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>方法的`TaskListDataTemplateSelector`为每个基础集合中的项。 该调用会将数据对象作为项参数传递。 <xref:System.Windows.DataTemplate>返回该方法然后应用于该数据对象。  
  
 [!code-xaml[DataTemplatingIntro_snip#ItemTemplateSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#itemtemplateselector)]  
  
 有关完整示例，请参阅[数据模板化示例简介](http://go.microsoft.com/fwlink/?LinkID=160009)。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTemplateSelector ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.DataTemplateSelector.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTemplateSelector();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Controls.DataTemplateSelector" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DataTemplate SelectTemplate (object item, System.Windows.DependencyObject container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DataTemplate SelectTemplate(object item, class System.Windows.DependencyObject container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.DataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SelectTemplate (item As Object, container As DependencyObject) As DataTemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DataTemplate ^ SelectTemplate(System::Object ^ item, System::Windows::DependencyObject ^ container);" />
      <MemberSignature Language="F#" Value="abstract member SelectTemplate : obj * System.Windows.DependencyObject -&gt; System.Windows.DataTemplate&#xA;override this.SelectTemplate : obj * System.Windows.DependencyObject -&gt; System.Windows.DataTemplate" Usage="dataTemplateSelector.SelectTemplate (item, container)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DataTemplate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="container" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="item">要为其选择模板的数据对象。</param>
        <param name="container">数据绑定对象。</param>
        <summary>在派生类中重写时，基于自定义逻辑返回 <see cref="T:System.Windows.DataTemplate" />。</summary>
        <returns>返回 <see cref="T:System.Windows.DataTemplate" /> 或 <see langword="null" />。 默认值为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常情况下，当有多个数据模板为相同类型的对象定义时使用的模板选择器。 例如，如果绑定源是列表系列学生对象，并且您想要将特定的模板应用于非全日制学生。 您可以执行此操作通过创建继承的类<xref:System.Windows.Controls.DataTemplateSelector>并重写<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>方法。 一旦您的类定义可以将类的实例分配给您的元素的模板选择器属性。  
  
   
  
## Examples  
 在此示例中，绑定源是一系列`Task`对象。 属性之一`Task`对象是`Priority`。 有两个数据模板定义，`myTaskTemplate`和`importantTaskTemplate`。  
  
 若要提供逻辑来选择哪些<xref:System.Windows.DataTemplate>使用基于`Priority`值的数据对象中，创建一个子类<xref:System.Windows.Controls.DataTemplateSelector>并重写<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>方法。 在以下示例中，<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>方法提供逻辑以返回相应的模板值的基础`Priority`属性。 封装的资源中找到要返回的模板<xref:System.Windows.Window>元素。  
  
 [!code-csharp[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/TaskListDataTemplateSelector.cs#dtsclass)]
 [!code-vb[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DataTemplatingIntro_snip/visualbasic/tasklistdatatemplateselector.vb#dtsclass)]  
  
 然后，我们可以将 `TaskListDataTemplateSelector` 声明为资源：  
  
 [!code-xaml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xaml[DataTemplatingIntro_snip#DTS](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#dts)]  
[!code-xaml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 若要使用的模板选择器资源，将其分配给<xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A>属性的<xref:System.Windows.Controls.ListBox>。 <xref:System.Windows.Controls.ListBox>调用<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>方法的`TaskListDataTemplateSelector`为每个基础集合中的项。 该调用会将数据对象作为项参数传递。 <xref:System.Windows.DataTemplate>返回该方法然后应用于该数据对象。  
  
 [!code-xaml[DataTemplatingIntro_snip#ItemTemplateSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#itemtemplateselector)]  
  
 有关完整示例，请参阅[数据模板化示例简介](http://go.microsoft.com/fwlink/?LinkID=160009)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>