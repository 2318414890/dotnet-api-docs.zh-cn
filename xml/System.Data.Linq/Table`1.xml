<Type Name="Table&lt;TEntity&gt;" FullName="System.Data.Linq.Table&lt;TEntity&gt;">
  <TypeSignature Language="C#" Value="public sealed class Table&lt;TEntity&gt; : System.Collections.Generic.IEnumerable&lt;TEntity&gt;, System.ComponentModel.IListSource, System.Data.Linq.ITable, System.Linq.IQueryable&lt;TEntity&gt;, System.Linq.IQueryProvider where TEntity : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Table`1&lt;class TEntity&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt;, class System.Collections.IEnumerable, class System.ComponentModel.IListSource, class System.Data.Linq.ITable, class System.Linq.IQueryable, class System.Linq.IQueryable`1&lt;!TEntity&gt;, class System.Linq.IQueryProvider" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.Table`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Table(Of TEntity)&#xA;Implements IEnumerable(Of TEntity), IListSource, IQueryable(Of TEntity), IQueryProvider, ITable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TEntity&gt;&#xA; where TEntity : classpublic ref class Table sealed : System::Collections::Generic::IEnumerable&lt;TEntity&gt;, System::ComponentModel::IListSource, System::Data::Linq::ITable, System::Linq::IQueryable&lt;TEntity&gt;, System::Linq::IQueryProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Data.Linq.ITable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TEntity"><span data-ttu-id="3a267-101">表中数据的类型。</span><span class="sxs-lookup"><span data-stu-id="3a267-101">The type of the data in the table.</span></span></typeparam>
    <summary><span data-ttu-id="3a267-102">表示基础数据库中的特定类型的表。</span><span class="sxs-lookup"><span data-stu-id="3a267-102">Represents a table for a particular type in the underlying database.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-103">此类，可对表进行查询和添加、 删除和附加对象。</span><span class="sxs-lookup"><span data-stu-id="3a267-103">This class enables you to query over the table and add, remove, and attach objects.</span></span>  
  
 <span data-ttu-id="3a267-104">应用程序可访问<xref:System.Data.Linq.Table%601>实例通过<xref:System.Data.Linq.DataContext.GetTable%2A>或通过使用强类型的属性的强类型化<xref:System.Data.Linq.DataContext>。</span><span class="sxs-lookup"><span data-stu-id="3a267-104">An application can access a <xref:System.Data.Linq.Table%601> instance via <xref:System.Data.Linq.DataContext.GetTable%2A> or by using a strongly typed property for the strongly typed <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="3a267-105">也就是说，当设计器生成的 DataContext 对象，它会生成属性来表示每个表。</span><span class="sxs-lookup"><span data-stu-id="3a267-105">That is, when the designer generates a DataContext object, it generates properties to represent each Table.</span></span> <span data-ttu-id="3a267-106">例如:</span><span class="sxs-lookup"><span data-stu-id="3a267-106">For example:</span></span>  
  
```  
[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SignOffTool")]  
public partial class DataClasses1DataContext : System.Data.Linq.DataContext {  
   public System.Data.Linq.Table<User> Users {  
      get {  
         return this.GetTable<User>();  
      }  
   }  
}  
```  
  
 <span data-ttu-id="3a267-107">对于此强类型的 DataContext，你可以访问要获取的用户属性`Table<User>`。</span><span class="sxs-lookup"><span data-stu-id="3a267-107">For this strongly typed DataContext, you can access the Users property to get `Table<User>`.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3a267-108">将实体附加到 <see cref="T:System.Data.Linq.DataContext" />。</span><span class="sxs-lookup"><span data-stu-id="3a267-108">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-109">使用`Attach`与已在一个中创建的实体的方法<xref:System.Data.Linq.DataContext>、 序列化到客户端，然后反序列化返回 （与执行更新或删除操作的目的）。</span><span class="sxs-lookup"><span data-stu-id="3a267-109">Use the `Attach` methods with entities that have been created in one <xref:System.Data.Linq.DataContext>, serialized to a client, and then deserialized back (with the intention to perform an update or delete operation).</span></span> <span data-ttu-id="3a267-110">有关详细信息，请参阅[数据检索和 CUD 操作在 N 层应用程序 (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)。</span><span class="sxs-lookup"><span data-stu-id="3a267-110">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="3a267-111">不要尝试对`Attach`尚未通过序列化进行分离的实体。</span><span class="sxs-lookup"><span data-stu-id="3a267-111">Do not try to `Attach` an entity that has not been detached through serialization.</span></span> <span data-ttu-id="3a267-112">不已序列化的实体仍保持与延迟加载程序可能会导致意外的结果，如果将成为第二个数据上下文中的跟踪的实体的关联。</span><span class="sxs-lookup"><span data-stu-id="3a267-112">Entities that have not been serialized still maintain associations with deferred loaders that can cause unexpected results if the entity becomes tracked by a second data context.</span></span>  
  
 <span data-ttu-id="3a267-113">附加新实体后的延迟加载程序的任何子集合 (例如，`EntitySet`从关联的表的实体集合的) 进行初始化。</span><span class="sxs-lookup"><span data-stu-id="3a267-113">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="3a267-114">当<xref:System.Data.Linq.DataContext.SubmitChanges%2A>调用时，集合放入的子成员`Unmodified`状态。</span><span class="sxs-lookup"><span data-stu-id="3a267-114">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="3a267-115">若要更新子集合的成员，必须显式调用`Attach`并指定该实体。</span><span class="sxs-lookup"><span data-stu-id="3a267-115">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="3a267-116">`Attach` 将附加所提供的对象的对象图中的所有实体。</span><span class="sxs-lookup"><span data-stu-id="3a267-116">`Attach` attaches all entities in the object graph of the provided object.</span></span> <span data-ttu-id="3a267-117">例如，下面的 C# 代码：</span><span class="sxs-lookup"><span data-stu-id="3a267-117">For example, the following C# code:</span></span>  
  
```  
using (SampleDataContext db = new SampleDataContext()) {  
    Employee employee = new Employee { employeeId = 1 };  
  
    Master master = new Master();  
    master.Employee = employee;  
  
    Child child = new Child();  
    child.Employee = employee;  
  
    db.Employees.Attach(employee);  
  
    master.Child = child;  
  
    db.Masters.InsertOnSubmit(master);  
  
    db.SubmitChanges();  
}  
  
```  
  
 <span data-ttu-id="3a267-118">是等效的 Visual Basic 代码：</span><span class="sxs-lookup"><span data-stu-id="3a267-118">The equivalent Visual Basic code is:</span></span>  
  
```  
Using db As New SampleDataContext()    Dim employee As New Employee With { .employeeId = 1 }  
  
    Dim master As New Master()  
    master.Employee = employee  
  
    Dim child As New Child()  
    child.Employee = employee  
  
    db.Employees.Attach(employee)  
  
    master.Child = child  
  
    db.Masters.InsertOnSubmit(master)  
  
    db.SubmitChanges()  
  
End Using  
```  
  
 <span data-ttu-id="3a267-119">调用`Attach`上`Employee`附加员工、 master 和子页，因为`Employee`具有与主站点和子关系。</span><span class="sxs-lookup"><span data-stu-id="3a267-119">Calling `Attach` on `Employee` attaches employee, master, and child, because the `Employee` has relationships to both master and child.</span></span> <span data-ttu-id="3a267-120">你必须明确地调用`InsertOnSubmit`若要更改状态从附加到插入。</span><span class="sxs-lookup"><span data-stu-id="3a267-120">You must explicitly call `InsertOnSubmit` to change the state from attached to inserted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="3a267-121">要附加的实体的原始值。</span><span class="sxs-lookup"><span data-stu-id="3a267-121">The original values of the entity to be attached.</span></span></param>
        <summary><span data-ttu-id="3a267-122">如果执行开放式并发检查时需要原始值，请将已断开连接或“已拆离”的实体附加到新的 <see cref="T:System.Data.Linq.DataContext" />。</span><span class="sxs-lookup"><span data-stu-id="3a267-122">Attaches a disconnected or "detached" entity to a new <see cref="T:System.Data.Linq.DataContext" /> when original values are required for optimistic concurrency checks.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-123">使用`Attach`与已在一个中创建的实体的方法<xref:System.Data.Linq.DataContext>、 序列化到客户端，然后反序列化后，若要执行更新或删除操作。</span><span class="sxs-lookup"><span data-stu-id="3a267-123">Use the `Attach` methods with entities that have been created in one <xref:System.Data.Linq.DataContext>, serialized to a client, and then deserialized back to perform an update or delete operation.</span></span> <span data-ttu-id="3a267-124">因为新<xref:System.Data.Linq.DataContext>还没有的方法的跟踪的原始值已断开连接的实体，客户端将负责提供这些值。</span><span class="sxs-lookup"><span data-stu-id="3a267-124">Because the new <xref:System.Data.Linq.DataContext> has no way of tracking what the original values were for a disconnected entity, the client is responsible for supplying those values.</span></span> <span data-ttu-id="3a267-125">在此版本的<xref:System.Data.Linq.Table%601.Attach%2A>，假定实体处于其原始值的状态。</span><span class="sxs-lookup"><span data-stu-id="3a267-125">In this version of <xref:System.Data.Linq.Table%601.Attach%2A>, the entity is assumed to be in its original value state.</span></span> <span data-ttu-id="3a267-126">调用此方法后，你可以然后更新其字段，例如从客户端发送的更多数据。</span><span class="sxs-lookup"><span data-stu-id="3a267-126">After calling this method, you can then update its fields, for example with additional data sent from the client.</span></span>  
  
 <span data-ttu-id="3a267-127">附加新实体后的延迟加载程序的任何子集合 (例如，`EntitySet`从关联的表的实体集合的) 进行初始化。</span><span class="sxs-lookup"><span data-stu-id="3a267-127">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="3a267-128">当<xref:System.Data.Linq.DataContext.SubmitChanges%2A>调用时，集合放入的子成员`Unmodified`状态。</span><span class="sxs-lookup"><span data-stu-id="3a267-128">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="3a267-129">若要更新子集合的成员，必须显式调用`Attach`并指定该实体。</span><span class="sxs-lookup"><span data-stu-id="3a267-129">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="3a267-130">有关详细信息，请参阅[数据检索和 CUD 操作在 N 层应用程序 (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)。</span><span class="sxs-lookup"><span data-stu-id="3a267-130">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="3a267-131">不要尝试对`Attach`尚未通过序列化进行分离的实体。</span><span class="sxs-lookup"><span data-stu-id="3a267-131">Do not try to `Attach` an entity that has not been detached through serialization.</span></span> <span data-ttu-id="3a267-132">不已序列化的实体仍保持与延迟加载程序可能会导致意外的结果，如果将成为第二个数据上下文中的跟踪的实体的关联。</span><span class="sxs-lookup"><span data-stu-id="3a267-132">Entities that have not been serialized still maintain associations with deferred loaders that can cause unexpected results if the entity becomes tracked by a second data context.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity, asModified As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity, bool asModified);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="3a267-133">要附加的实体。</span><span class="sxs-lookup"><span data-stu-id="3a267-133">The entity to be attached.</span></span></param>
        <param name="asModified">
          <span data-ttu-id="3a267-134">如果以修改状态附加实体，则为 <see langword="true" />；如果以未修改状态附加实体，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3a267-134"><see langword="true" /> to attach the entity as modified; <see langword="false" /> to attach the entity as unmodified.</span></span></param>
        <summary><span data-ttu-id="3a267-135">以修改或未修改状态将实体附加到 <see cref="T:System.Data.Linq.DataContext" />。</span><span class="sxs-lookup"><span data-stu-id="3a267-135">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-136">如果将连接*为已修改*，实体必须声明一个版本号，或必须参与更新冲突检查。</span><span class="sxs-lookup"><span data-stu-id="3a267-136">If attaching *as modified*, the entity must either declare a version member or must not participate in update conflict checking.</span></span> <span data-ttu-id="3a267-137">附加新实体后的延迟加载程序的任何子集合 (例如，`EntitySet`从关联的表的实体集合的) 进行初始化。</span><span class="sxs-lookup"><span data-stu-id="3a267-137">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="3a267-138">当<xref:System.Data.Linq.DataContext.SubmitChanges%2A>调用时，集合放入的子成员`Unmodified`状态。</span><span class="sxs-lookup"><span data-stu-id="3a267-138">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="3a267-139">若要更新子集合的成员，必须显式调用`Attach`并指定该实体。</span><span class="sxs-lookup"><span data-stu-id="3a267-139">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity, TEntity original);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity, !TEntity original) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity, original As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity, TEntity original);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
        <Parameter Name="original" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="3a267-140">要附加的实体。</span><span class="sxs-lookup"><span data-stu-id="3a267-140">The entity to be attached.</span></span></param>
        <param name="original"><span data-ttu-id="3a267-141">与包含原始值的数据成员具有相同实体类型的实例。</span><span class="sxs-lookup"><span data-stu-id="3a267-141">An instance of the same entity type with data members that contain the original values.</span></span></param>
        <summary><span data-ttu-id="3a267-142">通过指定实体及其原始状态，以修改或未修改状态将实体附加到 <see cref="T:System.Data.Linq.DataContext" />。</span><span class="sxs-lookup"><span data-stu-id="3a267-142">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state by specifying both the entity and its original state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-143">在下面的示例中，`Customer`已正确配置对象。</span><span class="sxs-lookup"><span data-stu-id="3a267-143">In the following example, the `Customer` object is already correctly configured.</span></span> <span data-ttu-id="3a267-144">你可以调用`Attach`而无需重播更新。</span><span class="sxs-lookup"><span data-stu-id="3a267-144">You can call `Attach` without having to replay the updates.</span></span>  
  
 <span data-ttu-id="3a267-145">附加新实体后的延迟加载程序的任何子集合 (例如，`EntitySet`从关联的表的实体集合的) 进行初始化。</span><span class="sxs-lookup"><span data-stu-id="3a267-145">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="3a267-146">当<xref:System.Data.Linq.DataContext.SubmitChanges%2A>调用时，集合放入的子成员`Unmodified`状态。</span><span class="sxs-lookup"><span data-stu-id="3a267-146">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="3a267-147">若要更新子集合的成员，必须显式调用`Attach`并指定该实体。</span><span class="sxs-lookup"><span data-stu-id="3a267-147">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
   
  
## Examples  
 [!code-csharp[DLinqNTier#4](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#4)]
 [!code-vb[DLinqNTier#4](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AttachAll&lt;TSubEntity&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3a267-148">以修改或未修改状态将集合的所有实体附加到 <see cref="T:System.Data.Linq.DataContext" />。</span><span class="sxs-lookup"><span data-stu-id="3a267-148">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-149">如果将连接为已修改，实体必须声明一个版本号，或必须参与更新冲突检查。</span><span class="sxs-lookup"><span data-stu-id="3a267-149">If attaching as modified, the entity must either declare a version member or must not participate in update conflict checking.</span></span>  
  
 <span data-ttu-id="3a267-150">附加新实体后的延迟加载程序的任何子集合 (例如，`EntitySet`从关联的表的实体集合的) 进行初始化。</span><span class="sxs-lookup"><span data-stu-id="3a267-150">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="3a267-151">当<xref:System.Data.Linq.DataContext.SubmitChanges%2A>调用时，集合放入的子成员`Unmodified`状态。</span><span class="sxs-lookup"><span data-stu-id="3a267-151">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="3a267-152">若要更新子集合的成员，必须显式调用`Attach`并指定该实体。</span><span class="sxs-lookup"><span data-stu-id="3a267-152">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="3a267-153">有关详细信息，请参阅[数据检索和 CUD 操作在 N 层应用程序 (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)。</span><span class="sxs-lookup"><span data-stu-id="3a267-153">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AttachAll&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void AttachAll&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachAll&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachAll(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void AttachAll(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity"><span data-ttu-id="3a267-154">要附加的实体的类型。</span><span class="sxs-lookup"><span data-stu-id="3a267-154">The type of entities to attach.</span></span></typeparam>
        <param name="entities"><span data-ttu-id="3a267-155">实体的集合。</span><span class="sxs-lookup"><span data-stu-id="3a267-155">The collection of entities.</span></span></param>
        <summary><span data-ttu-id="3a267-156">以修改或未修改状态将集合的所有实体附加到 <see cref="T:System.Data.Linq.DataContext" />。</span><span class="sxs-lookup"><span data-stu-id="3a267-156">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-157">此方法时将集合的所有实体都附加到新<xref:System.Data.Linq.DataContext>。</span><span class="sxs-lookup"><span data-stu-id="3a267-157">This method attaches all entities of a collection to a new <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="3a267-158">附加新实体后的延迟加载程序的任何子集合 (例如，`EntitySet`从关联的表的实体集合的) 进行初始化。</span><span class="sxs-lookup"><span data-stu-id="3a267-158">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="3a267-159">当<xref:System.Data.Linq.DataContext.SubmitChanges%2A>调用时，集合放入的子成员`Unmodified`状态。</span><span class="sxs-lookup"><span data-stu-id="3a267-159">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="3a267-160">若要更新子集合的成员，必须显式调用`Attach`并指定该实体。</span><span class="sxs-lookup"><span data-stu-id="3a267-160">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="3a267-161">有关详细信息，请参阅[数据检索和 CUD 操作在 N 层应用程序 (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)。</span><span class="sxs-lookup"><span data-stu-id="3a267-161">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachAll&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void AttachAll&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities, bool asModified) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachAll&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachAll(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity), asModified As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void AttachAll(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities, bool asModified);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity"><span data-ttu-id="3a267-162">要附加的实体的类型。</span><span class="sxs-lookup"><span data-stu-id="3a267-162">The type of entities to attach.</span></span></typeparam>
        <param name="entities"><span data-ttu-id="3a267-163">实体的集合。</span><span class="sxs-lookup"><span data-stu-id="3a267-163">The collection of entities.</span></span></param>
        <param name="asModified">
          <span data-ttu-id="3a267-164">如果对象拥有时间戳或 RowVersion 成员，则为 <see langword="true" />；如果执行开放式并发检查时需要使用原始值，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3a267-164"><see langword="true" /> if the object has a timestamp or RowVersion member; <see langword="false" /> if original values are being used for the optimistic concurrency check.</span></span></param>
        <summary><span data-ttu-id="3a267-165">以修改或未修改状态将集合的所有实体附加到 <see cref="T:System.Data.Linq.DataContext" />。</span><span class="sxs-lookup"><span data-stu-id="3a267-165">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-166">此方法时将附加到集合的所有实体<xref:System.Data.Linq.DataContext>中任意一种*修改*或*未修改*状态。</span><span class="sxs-lookup"><span data-stu-id="3a267-166">This method attaches all entities of a collection to the <xref:System.Data.Linq.DataContext> in either a *modified* or *unmodified* state.</span></span> <span data-ttu-id="3a267-167">如果将连接为已修改，实体必须声明一个版本号，或必须参与更新冲突检查。</span><span class="sxs-lookup"><span data-stu-id="3a267-167">If attaching as modified, the entity must either declare a version member or must not participate in update conflict checking.</span></span> <span data-ttu-id="3a267-168">如果将连接作为未修改，则假定该实体表示原始值。</span><span class="sxs-lookup"><span data-stu-id="3a267-168">If attaching as unmodified, the entity is assumed to represent the original value.</span></span> <span data-ttu-id="3a267-169">调用此方法后，实体的字段可以修改与从之前客户端的其他信息<xref:System.Data.Linq.DataContext.SubmitChanges%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="3a267-169">After calling this method, the entity's fields can be modified with other information from the client before <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="3a267-170">有关详细信息，请参阅[数据检索和 CUD 操作在 N 层应用程序 (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)。</span><span class="sxs-lookup"><span data-stu-id="3a267-170">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="3a267-171">附加新实体后的延迟加载程序的任何子集合 (例如，`EntitySet`从关联的表的实体集合的) 进行初始化。</span><span class="sxs-lookup"><span data-stu-id="3a267-171">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="3a267-172">当<xref:System.Data.Linq.DataContext.SubmitChanges%2A>调用时，集合放入的子成员`Unmodified`状态。</span><span class="sxs-lookup"><span data-stu-id="3a267-172">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="3a267-173">若要更新子集合的成员，必须显式调用`Attach`并指定该实体。</span><span class="sxs-lookup"><span data-stu-id="3a267-173">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3a267-174">下面的示例演示如何更新`Order`对象在其他<xref:System.Data.Linq.DataContext>实例。</span><span class="sxs-lookup"><span data-stu-id="3a267-174">The following example shows how you can update an `Order` object on a different <xref:System.Data.Linq.DataContext> instance.</span></span> <span data-ttu-id="3a267-175">该示例假定你已连接到数据库，并且所做[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]它文件 （在此情况下，Northwind 示例数据库）。</span><span class="sxs-lookup"><span data-stu-id="3a267-175">The example assumes that you have a connection to a database and have made a [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] file for it (in this case, the Northwind sample database).</span></span>  
  
 [!code-csharp[DLinqNTier#1](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#1)]
 [!code-vb[DLinqNTier#1](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#1)]  
  
 <span data-ttu-id="3a267-176">在下面的示例中，要附加的实体对象具有与另一个对象的外键关系和是存储在缓存中但未附加。</span><span class="sxs-lookup"><span data-stu-id="3a267-176">In the following example, an entity object to be attached has a foreign key relation with another object and is stored in the cache but not attached.</span></span> <span data-ttu-id="3a267-177">当调用<xref:System.Data.Linq.DataContext.SubmitChanges%2A>、`ChangeProcessor`添加`Insert`所有外键的对象的操作。</span><span class="sxs-lookup"><span data-stu-id="3a267-177">When you call <xref:System.Data.Linq.DataContext.SubmitChanges%2A>, the `ChangeProcessor` adds an `Insert` operation for all the foreign key objects.</span></span> <span data-ttu-id="3a267-178">重复使用在不同实体实例时，这是一个副作用<xref:System.Data.Linq.DataContext>实例。</span><span class="sxs-lookup"><span data-stu-id="3a267-178">This is a side-effect when an entity instance is re-used in a different <xref:System.Data.Linq.DataContext> instance.</span></span> <span data-ttu-id="3a267-179">为此，[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]不支持重复使用的对象。</span><span class="sxs-lookup"><span data-stu-id="3a267-179">For this reason, [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] does not support re-use of objects.</span></span>  
  
 [!code-csharp[DlinqNTier#7](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#7)]
 [!code-vb[DlinqNTier#7](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#7)]  
  
 <span data-ttu-id="3a267-180">下面的示例演示客户 A 已取消的所有订单和客户 B 已它们的所有权方案。</span><span class="sxs-lookup"><span data-stu-id="3a267-180">The following example shows a scenario in which Customer A has canceled all orders and Customer B has taken ownership of them.</span></span> <span data-ttu-id="3a267-181">你可以在同一时间附加的所有订单的客户 A。</span><span class="sxs-lookup"><span data-stu-id="3a267-181">You can attach all orders of Customer A at the same time.</span></span>  
  
 [!code-csharp[DlinqNTier#3](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#3)]
 [!code-vb[DlinqNTier#3](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public System.Data.Linq.DataContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Linq.DataContext Context" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.Context" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Context As DataContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Linq::DataContext ^ Context { System::Data::Linq::DataContext ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.DataContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a267-182">获取已用于检索此 <see cref="T:System.Data.Linq.Table`1" /> 的 <see cref="T:System.Data.Linq.DataContext" />。</span><span class="sxs-lookup"><span data-stu-id="3a267-182">Gets the <see cref="T:System.Data.Linq.DataContext" /> that has been used to retrieve this <see cref="T:System.Data.Linq.Table`1" />.</span></span></summary>
        <value><span data-ttu-id="3a267-183">已用于检索表的数据上下文。</span><span class="sxs-lookup"><span data-stu-id="3a267-183">The data context that has been used to retrieve this table.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAllOnSubmit&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void DeleteAllOnSubmit&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteAllOnSubmit&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.DeleteAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteAllOnSubmit(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void DeleteAllOnSubmit(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity"><span data-ttu-id="3a267-184">要删除的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="3a267-184">The type of the elements to delete.</span></span></typeparam>
        <param name="entities"><span data-ttu-id="3a267-185">要删除的实体。</span><span class="sxs-lookup"><span data-stu-id="3a267-185">The entities to delete.</span></span></param>
        <summary><span data-ttu-id="3a267-186">将集合中的所有实体置为 <see langword="pending delete" /> 状态。</span><span class="sxs-lookup"><span data-stu-id="3a267-186">Puts all entities from the collection into a <see langword="pending delete" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-187">使用此方法将置于的挂起删除状态的实体不会从查询结果之前后消失<xref:System.Data.Linq.DataContext.SubmitChanges%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="3a267-187">Entities that are put into the pending delete state with this method do not disappear from query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="3a267-188">必须连接已断开连接的实体，然后才能删除。</span><span class="sxs-lookup"><span data-stu-id="3a267-188">Disconnected entities must be attached before they can be deleted.</span></span> <span data-ttu-id="3a267-189">有关详细信息，请参阅[数据检索和 CUD 操作在 N 层应用程序 (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)。</span><span class="sxs-lookup"><span data-stu-id="3a267-189">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="3a267-190">以下 C# 代码段演示一个使用此方法：</span><span class="sxs-lookup"><span data-stu-id="3a267-190">The following C# snippet shows one use for this method:</span></span>  
  
```  
IEnumerable<Customer> customersWithoutOrders = (from c in db.Customers  
   where c.Orders.Count == 0  
   select c).ToList();  
  
db.Customers.DeleteAllOnSubmit(customersWithoutOrders);  
db.SubmitChanges();  
```  
  
 <span data-ttu-id="3a267-191">在 Visual Basic:</span><span class="sxs-lookup"><span data-stu-id="3a267-191">In Visual Basic:</span></span>  
  
```  
Dim customersWithoutOrders As IEnumerable(Of Customer) = (From c In db.Customers _   
    Where c.Orders.Count = 0 _   
    Select c).ToList()  
  
db.Customers.DeleteAllOnSubmit(customersWithoutOrders)  
db.SubmitChanges()  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteOnSubmit">
      <MemberSignature Language="C#" Value="public void DeleteOnSubmit (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteOnSubmit(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.DeleteOnSubmit(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteOnSubmit (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteOnSubmit(TEntity entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="3a267-192">要删除的实体。</span><span class="sxs-lookup"><span data-stu-id="3a267-192">The entity to be deleted.</span></span></param>
        <summary><span data-ttu-id="3a267-193">将此表中的实体置为 <see langword="pending delete" /> 状态。</span><span class="sxs-lookup"><span data-stu-id="3a267-193">Puts an entity from this table into a <see langword="pending delete" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-194">删除的实体不会从查询结果之前后进行消失<xref:System.Data.Linq.DataContext.SubmitChanges%2A>调用。</span><span class="sxs-lookup"><span data-stu-id="3a267-194">The removed entity does not disappear from the query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="3a267-195">在删除之前，必须首先连接断开连接的实体。</span><span class="sxs-lookup"><span data-stu-id="3a267-195">Disconnected entities must first be attached before they can be deleted.</span></span> <span data-ttu-id="3a267-196">有关详细信息，请参阅[数据检索和 CUD 操作在 N 层应用程序 (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)。</span><span class="sxs-lookup"><span data-stu-id="3a267-196">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
> [!NOTE]
>  [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]<span data-ttu-id="3a267-197"> 不支持且无法识别级联删除操作。</span><span class="sxs-lookup"><span data-stu-id="3a267-197"> does not support or recognize cascade-delete operations.</span></span> <span data-ttu-id="3a267-198">如果你想要删除的行有约束的表中，你必须设置`ON DELETE CASCADE`规则在数据库中的外键约束中或使用你自己的代码先删除阻止删除父对象的子对象。</span><span class="sxs-lookup"><span data-stu-id="3a267-198">If you want to delete a row in a table that has constraints against it, you must either set the `ON DELETE CASCADE` rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted.</span></span> <span data-ttu-id="3a267-199">否则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="3a267-199">Otherwise, an exception is thrown.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Table#3](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.table/cs/program.cs#3)]
 [!code-vb[System.Data.Linq.Table#3](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.table/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;TEntity&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerator`1&lt;!TEntity&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;TEntity&gt; ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a267-200">获取能够循环访问集合的枚举器。</span><span class="sxs-lookup"><span data-stu-id="3a267-200">Gets an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="3a267-201">用于循环访问集合的枚举数。</span><span class="sxs-lookup"><span data-stu-id="3a267-201">An enumerator that can be used to iterate through the collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModifiedMembers">
      <MemberSignature Language="C#" Value="public System.Data.Linq.ModifiedMemberInfo[] GetModifiedMembers (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.Linq.ModifiedMemberInfo[] GetModifiedMembers(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetModifiedMembers(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetModifiedMembers (entity As TEntity) As ModifiedMemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::Linq::ModifiedMemberInfo&gt; ^ GetModifiedMembers(TEntity entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ModifiedMemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="3a267-202">从其获取数组的实体。</span><span class="sxs-lookup"><span data-stu-id="3a267-202">The entity from which to get the array.</span></span></param>
        <summary><span data-ttu-id="3a267-203">返回包含当前值和原始值的已修改成员的数组。</span><span class="sxs-lookup"><span data-stu-id="3a267-203">Returns an array of modified members that contain their current and original values.</span></span></summary>
        <returns><span data-ttu-id="3a267-204">包含当前值和原始值的已修改成员的数组。</span><span class="sxs-lookup"><span data-stu-id="3a267-204">An array of modified members that contain their current and original values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNewBindingList">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IBindingList GetNewBindingList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.IBindingList GetNewBindingList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetNewBindingList" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNewBindingList () As IBindingList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::IBindingList ^ GetNewBindingList();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IBindingList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a267-205">创建用于绑定到数据源的新列表。</span><span class="sxs-lookup"><span data-stu-id="3a267-205">Creates a new list for binding to a data source.</span></span></summary>
        <returns><span data-ttu-id="3a267-206">用于绑定到数据源的新 <see cref="T:System.ComponentModel.IBindingList" />。</span><span class="sxs-lookup"><span data-stu-id="3a267-206">A new <see cref="T:System.ComponentModel.IBindingList" /> for binding to a data source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-207">返回的列表支持标准的操作，如添加、 删除、 插入和更新，但必须由程序员显式管理保存。</span><span class="sxs-lookup"><span data-stu-id="3a267-207">The returned list supports standard operations, such as additions, deletions, insertions, and updates, but saves must be explicitly managed by the programmer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOriginalEntityState">
      <MemberSignature Language="C#" Value="public TEntity GetOriginalEntityState (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TEntity GetOriginalEntityState(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetOriginalEntityState(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOriginalEntityState (entity As TEntity) As TEntity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TEntity GetOriginalEntityState(TEntity entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="3a267-208">要返回其原始状态的实体。</span><span class="sxs-lookup"><span data-stu-id="3a267-208">The entity whose original state is to be returned.</span></span></param>
        <summary><span data-ttu-id="3a267-209">返回包含实体原始状态的 <see cref="T:System.Data.Linq.Table`1" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="3a267-209">Returns a <see cref="T:System.Data.Linq.Table`1" /> instance that contains the original state of the entity.</span></span></summary>
        <returns><span data-ttu-id="3a267-210">一个 <see cref="T:System.Data.Linq.Table`1" /> 实例，其中包含实体的原始状态。</span><span class="sxs-lookup"><span data-stu-id="3a267-210">A <see cref="T:System.Data.Linq.Table`1" /> instance that contains the original state of the entity.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-211">此方法返回的实体的原始状态，因为它已创建，或可以附加到当前<xref:System.Data.Linq.DataContext>。</span><span class="sxs-lookup"><span data-stu-id="3a267-211">This method returns the original state of an entity since it was either created or attached to the current <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="3a267-212">必须由独立的跟踪机制和时该实体附加到新提供的已序列化和反序列化的实体的原始状态<xref:System.Data.Linq.DataContext>。</span><span class="sxs-lookup"><span data-stu-id="3a267-212">The original state of an entity that has been serialized and deserialized must be provided by an independent tracking mechanism and supplied when the entity is attached to a new <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="3a267-213">有关详细信息，请参阅[数据检索和 CUD 操作在 N 层应用程序 (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)。</span><span class="sxs-lookup"><span data-stu-id="3a267-213">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAllOnSubmit&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void InsertAllOnSubmit&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertAllOnSubmit&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.InsertAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAllOnSubmit(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void InsertAllOnSubmit(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity"><span data-ttu-id="3a267-214">要插入的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="3a267-214">The type of the elements to insert.</span></span></typeparam>
        <param name="entities"><span data-ttu-id="3a267-215">要添加的实体。</span><span class="sxs-lookup"><span data-stu-id="3a267-215">The entities to add.</span></span></param>
        <summary><span data-ttu-id="3a267-216">以 <see langword="pending insert" /> 状态将集合中的所有实体添加到 <see cref="T:System.Data.Linq.DataContext" />。</span><span class="sxs-lookup"><span data-stu-id="3a267-216">Adds all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in a <see langword="pending insert" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-217">添加的实体不会在查询结果中之前后<xref:System.Data.Linq.DataContext.SubmitChanges%2A>已调用。</span><span class="sxs-lookup"><span data-stu-id="3a267-217">The added entities will not be in query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> has been called.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertOnSubmit">
      <MemberSignature Language="C#" Value="public void InsertOnSubmit (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertOnSubmit(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.InsertOnSubmit(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertOnSubmit (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertOnSubmit(TEntity entity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="3a267-218">要添加的实体。</span><span class="sxs-lookup"><span data-stu-id="3a267-218">The entity to be added.</span></span></param>
        <summary><span data-ttu-id="3a267-219">将处于 <see langword="pending insert" /> 状态的实体添加到此 <see cref="T:System.Data.Linq.Table`1" />。</span><span class="sxs-lookup"><span data-stu-id="3a267-219">Adds an entity in a <see langword="pending insert" /> state to this <see cref="T:System.Data.Linq.Table`1" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-220">添加的实体将不会出现在查询结果中直到此表后从<xref:System.Data.Linq.DataContext.SubmitChanges%2A>已调用。</span><span class="sxs-lookup"><span data-stu-id="3a267-220">The added entity will not appear in query results from this table until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> has been called.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Table#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.table/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.Table#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.table/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.Linq.ITable.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a267-221">获取一个值，该值指示包含在此 <see cref="T:System.Data.Linq.Table`1" /> 实例中的实体类型是否具有主键。</span><span class="sxs-lookup"><span data-stu-id="3a267-221">Gets a value that indicates whether the type of the entities contained in this <see cref="T:System.Data.Linq.Table`1" /> instance has a primary key.</span></span></summary>
        <value>
          <span data-ttu-id="3a267-222">如果实体类型不具有主键，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3a267-222"><see langword="true" /> if the entity type does not have a primary key; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;TEntity&gt; IEnumerable&lt;TEntity&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!TEntity&gt; System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Collections#Generic#IEnumerable&lt;TEntity&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of TEntity) Implements IEnumerable(Of TEntity).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;TEntity&gt; ^ System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;TEntity&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a267-223">返回一个循环访问集合的枚举器。</span><span class="sxs-lookup"><span data-stu-id="3a267-223">Returns an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="3a267-224">用于循环访问集合的枚举数。</span><span class="sxs-lookup"><span data-stu-id="3a267-224">An enumerator that can be used to iterate through the collection.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a267-225">返回一个循环访问集合的枚举器。</span><span class="sxs-lookup"><span data-stu-id="3a267-225">Returns an enumerator that iterates through the collection.</span></span></summary>
        <returns><span data-ttu-id="3a267-226">用于循环访问集合的枚举数。</span><span class="sxs-lookup"><span data-stu-id="3a267-226">An enumerator that can be used to iterate through the collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-227">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="3a267-227">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3a267-228">它只能在 <xref:System.Data.Linq.Table%601> 实例强制转换为 <xref:System.Collections.Generic.IEnumerable%601> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="3a267-228">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System.ComponentModel.IListSource.ContainsListCollection { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a267-229">获取一个值，该值指示集合是否为 <see cref="T:System.Collections.IList" /> 对象的集合。</span><span class="sxs-lookup"><span data-stu-id="3a267-229">Gets a value that indicates whether the collection is a collection of <see cref="T:System.Collections.IList" /> objects.</span></span></summary>
        <value>
          <span data-ttu-id="3a267-230">如果集合是 <see cref="T:System.Collections.IList" /> 对象集合，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3a267-230"><see langword="true" /> if the collection is a collection of <see cref="T:System.Collections.IList" /> objects; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-231">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="3a267-231">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3a267-232">它只能在 <xref:System.Data.Linq.Table%601> 实例强制转换为 <xref:System.ComponentModel.IListSource> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="3a267-232">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a267-233">从不实现 <see cref="T:System.Collections.IList" /> 本身的对象返回可以绑定到数据源的 <see cref="T:System.Collections.IList" />。</span><span class="sxs-lookup"><span data-stu-id="3a267-233">Returns an <see cref="T:System.Collections.IList" /> that can be bound to a data source from an object that does not implement an <see cref="T:System.Collections.IList" /> itself.</span></span></summary>
        <returns><span data-ttu-id="3a267-234">可以绑定到数据源的 <see cref="T:System.Collections.IList" />。</span><span class="sxs-lookup"><span data-stu-id="3a267-234">An <see cref="T:System.Collections.IList" /> that can be bound to a data source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-235">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="3a267-235">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3a267-236">它只能在 <xref:System.Data.Linq.Table%601> 实例强制转换为 <xref:System.ComponentModel.IListSource> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="3a267-236">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="System.Data.Linq.ITable.Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3a267-237">允许反序列化的实体与 <see cref="T:System.Data.Linq.DataContext" /> 的新实例相关联，以便可以从数据库更新或删除这些实体。</span><span class="sxs-lookup"><span data-stu-id="3a267-237">Allows deserialized entities to be associated with a new instance of a <see cref="T:System.Data.Linq.DataContext" /> so that they can be updated or deleted from the database.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity) = System::Data::Linq::ITable::Attach;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="3a267-238">要附加的实体。</span><span class="sxs-lookup"><span data-stu-id="3a267-238">The entity to be attached.</span></span></param>
        <summary><span data-ttu-id="3a267-239">以未修改状态将实体附加到 <see cref="T:System.Data.Linq.DataContext" />。</span><span class="sxs-lookup"><span data-stu-id="3a267-239">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in an unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-240">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="3a267-240">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3a267-241">它只能在 <xref:System.Data.Linq.Table%601> 实例强制转换为 <xref:System.Data.Linq.ITable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="3a267-241">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object, asModified As Boolean) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity, bool asModified) = System::Data::Linq::ITable::Attach;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="3a267-242">要附加的实体。</span><span class="sxs-lookup"><span data-stu-id="3a267-242">The entity to be attached.</span></span></param>
        <param name="asModified">
          <span data-ttu-id="3a267-243">如果以修改状态附加实体，则为 <see langword="true" />；如果以未修改状态附加实体，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3a267-243"><see langword="true" /> to attach the entity as modified; <see langword="false" /> to attached the entity as unmodified.</span></span></param>
        <summary><span data-ttu-id="3a267-244">以修改或未修改状态将集合的所有实体附加到 <see cref="T:System.Data.Linq.DataContext" />。</span><span class="sxs-lookup"><span data-stu-id="3a267-244">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-245">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="3a267-245">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3a267-246">它只能在 <xref:System.Data.Linq.Table%601> 实例强制转换为 <xref:System.Data.Linq.ITable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="3a267-246">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity, object original);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity, object original) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object, original As Object) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity, System::Object ^ original) = System::Data::Linq::ITable::Attach;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="original" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="3a267-247">要附加的实体。</span><span class="sxs-lookup"><span data-stu-id="3a267-247">The entity to be attached.</span></span></param>
        <param name="original"><span data-ttu-id="3a267-248">与包含原始值的数据成员具有相同实体类型的实例。</span><span class="sxs-lookup"><span data-stu-id="3a267-248">An instance of the same entity type with data members that contain the original values.</span></span></param>
        <summary><span data-ttu-id="3a267-249">通过指定实体及其原始状态，以修改或未修改状态将实体附加到 <see cref="T:System.Data.Linq.DataContext" />。</span><span class="sxs-lookup"><span data-stu-id="3a267-249">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state by specifying both the entity and its original state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-250">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="3a267-250">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3a267-251">它只能在 <xref:System.Data.Linq.Table%601> 实例强制转换为 <xref:System.Data.Linq.ITable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="3a267-251">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="System.Data.Linq.ITable.AttachAll">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="3a267-252">以修改或未修改状态将集合的所有实体附加到 <see cref="T:System.Data.Linq.DataContext" />。</span><span class="sxs-lookup"><span data-stu-id="3a267-252">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.Data.Linq.ITable.AttachAll">
      <MemberSignature Language="C#" Value="void ITable.AttachAll (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.AttachAll(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub AttachAll (entities As IEnumerable) Implements ITable.AttachAll" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.AttachAll(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::AttachAll;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities"><span data-ttu-id="3a267-253">要附加的实体集合。</span><span class="sxs-lookup"><span data-stu-id="3a267-253">The collection of entities to be attached.</span></span></param>
        <summary><span data-ttu-id="3a267-254">以修改或未修改状态将集合的所有实体附加到 <see cref="T:System.Data.Linq.DataContext" />。</span><span class="sxs-lookup"><span data-stu-id="3a267-254">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-255">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="3a267-255">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3a267-256">它只能在 <xref:System.Data.Linq.Table%601> 实例强制转换为 <xref:System.Data.Linq.ITable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="3a267-256">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.AttachAll">
      <MemberSignature Language="C#" Value="void ITable.AttachAll (System.Collections.IEnumerable entities, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.AttachAll(class System.Collections.IEnumerable entities, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Sub AttachAll (entities As IEnumerable, asModified As Boolean) Implements ITable.AttachAll" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.AttachAll(System::Collections::IEnumerable ^ entities, bool asModified) = System::Data::Linq::ITable::AttachAll;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entities"><span data-ttu-id="3a267-257">要附加的实体集合。</span><span class="sxs-lookup"><span data-stu-id="3a267-257">The collection of entities to be attched.</span></span></param>
        <param name="asModified">
          <span data-ttu-id="3a267-258">如果以修改状态附加实体，则为 <see langword="true" />；如果以未修改状态附加实体，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="3a267-258"><see langword="true" /> to attach the entities as modified; <see langword="false" /> to attach the entities as unmodified.</span></span></param>
        <summary><span data-ttu-id="3a267-259">以修改或未修改状态将集合的所有实体附加到 <see cref="T:System.Data.Linq.DataContext" />。</span><span class="sxs-lookup"><span data-stu-id="3a267-259">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-260">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="3a267-260">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3a267-261">它只能在 <xref:System.Data.Linq.Table%601> 实例强制转换为 <xref:System.Data.Linq.ITable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="3a267-261">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.DeleteAllOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.DeleteAllOnSubmit (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.DeleteAllOnSubmit(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteAllOnSubmit(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub DeleteAllOnSubmit (entities As IEnumerable) Implements ITable.DeleteAllOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.DeleteAllOnSubmit(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::DeleteAllOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.DeleteAllOnSubmit(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities"><span data-ttu-id="3a267-262">要移除的实体。</span><span class="sxs-lookup"><span data-stu-id="3a267-262">The entities being removed.</span></span></param>
        <summary><span data-ttu-id="3a267-263">将集合中的所有实体置为 <see langword="pending delete" /> 状态。</span><span class="sxs-lookup"><span data-stu-id="3a267-263">Puts all entities from the collection into a <see langword="pending delete" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-264">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="3a267-264">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3a267-265">它只能在 <xref:System.Data.Linq.Table%601> 实例强制转换为 <xref:System.Data.Linq.ITable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="3a267-265">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.DeleteOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.DeleteOnSubmit (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.DeleteOnSubmit(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteOnSubmit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub DeleteOnSubmit (entity As Object) Implements ITable.DeleteOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.DeleteOnSubmit(System::Object ^ entity) = System::Data::Linq::ITable::DeleteOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.DeleteOnSubmit(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="3a267-266">要移除的实体。</span><span class="sxs-lookup"><span data-stu-id="3a267-266">The entity to be removed.</span></span></param>
        <summary><span data-ttu-id="3a267-267">将此表中的实体置为 <see langword="pending delete" /> 状态。</span><span class="sxs-lookup"><span data-stu-id="3a267-267">Puts an entity from this table into a <see langword="pending delete" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-268">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="3a267-268">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3a267-269">它只能在 <xref:System.Data.Linq.Table%601> 实例强制转换为 <xref:System.Data.Linq.ITable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="3a267-269">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
> [!NOTE]
>  [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]<span data-ttu-id="3a267-270"> 不支持且无法识别级联删除操作。</span><span class="sxs-lookup"><span data-stu-id="3a267-270"> does not support or recognize cascade-delete operations.</span></span> <span data-ttu-id="3a267-271">如果你想要删除的行有约束的表中，你必须设置`ON DELETE CASCADE`规则在数据库中的外键约束中或使用你自己的代码先删除阻止删除父对象的子对象。</span><span class="sxs-lookup"><span data-stu-id="3a267-271">If you want to delete a row in a table that has constraints against it, you must either set the `ON DELETE CASCADE` rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted.</span></span> <span data-ttu-id="3a267-272">否则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="3a267-272">Otherwise, an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.GetModifiedMembers">
      <MemberSignature Language="C#" Value="System.Data.Linq.ModifiedMemberInfo[] ITable.GetModifiedMembers (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Data.Linq.ModifiedMemberInfo[] System.Data.Linq.ITable.GetModifiedMembers(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetModifiedMembers(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetModifiedMembers (entity As Object) As ModifiedMemberInfo() Implements ITable.GetModifiedMembers" />
      <MemberSignature Language="C++ CLI" Value=" virtual cli::array &lt;System::Data::Linq::ModifiedMemberInfo&gt; ^ System.Data.Linq.ITable.GetModifiedMembers(System::Object ^ entity) = System::Data::Linq::ITable::GetModifiedMembers;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.GetModifiedMembers(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("NOT IMPLEMENTED YET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ModifiedMemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="3a267-273">要从其获取已修改成员的实体。</span><span class="sxs-lookup"><span data-stu-id="3a267-273">The entity from which to obtain the modified members.</span></span></param>
        <summary><span data-ttu-id="3a267-274">返回包含当前值和原始值的已修改成员的数组。</span><span class="sxs-lookup"><span data-stu-id="3a267-274">Returns an array of modified members that contain their current and original values.</span></span></summary>
        <returns><span data-ttu-id="3a267-275">已修改成员的数组。</span><span class="sxs-lookup"><span data-stu-id="3a267-275">An array of modified members.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-276">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="3a267-276">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3a267-277">它只能在 <xref:System.Data.Linq.Table%601> 实例强制转换为 <xref:System.Data.Linq.ITable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="3a267-277">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.GetOriginalEntityState">
      <MemberSignature Language="C#" Value="object ITable.GetOriginalEntityState (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Data.Linq.ITable.GetOriginalEntityState(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetOriginalEntityState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetOriginalEntityState (entity As Object) As Object Implements ITable.GetOriginalEntityState" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Data.Linq.ITable.GetOriginalEntityState(System::Object ^ entity) = System::Data::Linq::ITable::GetOriginalEntityState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("NOT IMPLEMENTED YET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="3a267-278">要访问其原始状态的实体。</span><span class="sxs-lookup"><span data-stu-id="3a267-278">The entity whose original state is to be accessed.</span></span></param>
        <summary><span data-ttu-id="3a267-279">检索给定实体的原始值。</span><span class="sxs-lookup"><span data-stu-id="3a267-279">Retrieves original values of a given entity.</span></span></summary>
        <returns><span data-ttu-id="3a267-280">原始实体的副本。</span><span class="sxs-lookup"><span data-stu-id="3a267-280">A copy of the original entity.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-281">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="3a267-281">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3a267-282">它只能在 <xref:System.Data.Linq.Table%601> 实例强制转换为 <xref:System.Data.Linq.ITable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="3a267-282">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.InsertAllOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.InsertAllOnSubmit (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.InsertAllOnSubmit(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertAllOnSubmit(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub InsertAllOnSubmit (entities As IEnumerable) Implements ITable.InsertAllOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.InsertAllOnSubmit(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::InsertAllOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.InsertAllOnSubmit(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities"><span data-ttu-id="3a267-283">要添加的实体集合。</span><span class="sxs-lookup"><span data-stu-id="3a267-283">The collection of entities to be added.</span></span></param>
        <summary><span data-ttu-id="3a267-284">以 <see langword="pending insert" /> 状态将集合中的所有实体添加到 <see cref="T:System.Data.Linq.DataContext" />。</span><span class="sxs-lookup"><span data-stu-id="3a267-284">Adds all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in an <see langword="pending insert" /> state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-285">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="3a267-285">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3a267-286">它只能在 <xref:System.Data.Linq.Table%601> 实例强制转换为 <xref:System.Data.Linq.ITable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="3a267-286">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.InsertOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.InsertOnSubmit (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.InsertOnSubmit(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertOnSubmit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub InsertOnSubmit (entity As Object) Implements ITable.InsertOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.InsertOnSubmit(System::Object ^ entity) = System::Data::Linq::ITable::InsertOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.InsertOnSubmit(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity"><span data-ttu-id="3a267-287">要添加的实体。</span><span class="sxs-lookup"><span data-stu-id="3a267-287">The entity to add.</span></span></param>
        <summary><span data-ttu-id="3a267-288">将处于 <see langword="pending insert" /> 状态的实体添加到此表。</span><span class="sxs-lookup"><span data-stu-id="3a267-288">Adds an entity in a <see langword="pending insert" /> state to this table.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-289">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="3a267-289">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3a267-290">它只能在 <xref:System.Data.Linq.Table%601> 实例强制转换为 <xref:System.Data.Linq.ITable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="3a267-290">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.ElementType">
      <MemberSignature Language="C#" Value="Type System.Linq.IQueryable.ElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type System.Linq.IQueryable.ElementType" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#ElementType" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ElementType As Type Implements IQueryable.ElementType" />
      <MemberSignature Language="C++ CLI" Value="property Type ^ System.Linq.IQueryable.ElementType { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a267-291">获取在执行与此对象相关联的表达式树时返回的元素类型。</span><span class="sxs-lookup"><span data-stu-id="3a267-291">Gets the type of the element(s) that are returned when the expression tree associated with this object is executed.</span></span></summary>
        <value><span data-ttu-id="3a267-292">在执行与对象的此实例关联的表达式目录树时返回的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="3a267-292">The type of the element(s) that are returned when the expression tree associated with this object is executed.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-293">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="3a267-293">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3a267-294">它只能在 <xref:System.Data.Linq.Table%601> 实例强制转换为 <xref:System.Linq.IQueryable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="3a267-294">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.Expression">
      <MemberSignature Language="C#" Value="System.Linq.Expressions.Expression System.Linq.IQueryable.Expression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression System.Linq.IQueryable.Expression" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Expression" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Expression As Expression Implements IQueryable.Expression" />
      <MemberSignature Language="C++ CLI" Value="property System::Linq::Expressions::Expression ^ System.Linq.IQueryable.Expression { System::Linq::Expressions::Expression ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a267-295">获取与 <see cref="T:System.Linq.IQueryable" /> 的此实例相关联的表达式树。</span><span class="sxs-lookup"><span data-stu-id="3a267-295">Gets the expression tree that is associated with this instance of <see cref="T:System.Linq.IQueryable" />.</span></span></summary>
        <value><span data-ttu-id="3a267-296">与 <see cref="T:System.Linq.Expressions.Expression" /> 的此实例关联的 <see cref="T:System.Linq.IQueryable" />。</span><span class="sxs-lookup"><span data-stu-id="3a267-296">The <see cref="T:System.Linq.Expressions.Expression" /> that is associated with this instance of <see cref="T:System.Linq.IQueryable" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-297">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="3a267-297">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3a267-298">它只能在 <xref:System.Data.Linq.Table%601> 实例强制转换为 <xref:System.Linq.IQueryable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="3a267-298">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.Provider">
      <MemberSignature Language="C#" Value="System.Linq.IQueryProvider System.Linq.IQueryable.Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.IQueryProvider System.Linq.IQueryable.Provider" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Provider" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Provider As IQueryProvider Implements IQueryable.Provider" />
      <MemberSignature Language="C++ CLI" Value="property System::Linq::IQueryProvider ^ System.Linq.IQueryable.Provider { System::Linq::IQueryProvider ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="3a267-299">获取与此数据源相关联的查询提供程序。</span><span class="sxs-lookup"><span data-stu-id="3a267-299">Gets the query provider that is associated with this data source.</span></span></summary>
        <value><span data-ttu-id="3a267-300">与此数据源关联的 <see cref="T:System.Linq.IQueryProvider" />。</span><span class="sxs-lookup"><span data-stu-id="3a267-300">The <see cref="T:System.Linq.IQueryProvider" /> that is associated with this data source.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-301">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="3a267-301">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3a267-302">它只能在 <xref:System.Data.Linq.Table%601> 实例强制转换为 <xref:System.Linq.IQueryable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="3a267-302">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.CreateQuery">
      <MemberSignature Language="C#" Value="System.Linq.IQueryable IQueryProvider.CreateQuery (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Linq.IQueryable System.Linq.IQueryProvider.CreateQuery(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Linq::IQueryable ^ System.Linq.IQueryProvider.CreateQuery(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::CreateQuery;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="3a267-303">从其开始执行计算的查询表达式。</span><span class="sxs-lookup"><span data-stu-id="3a267-303">The query expression from which the evaluation is performed.</span></span></param>
        <summary><span data-ttu-id="3a267-304">构造一个 <see cref="T:System.Linq.IQueryable" /> 对象，该对象可计算指定表达式树所表示的查询。</span><span class="sxs-lookup"><span data-stu-id="3a267-304">Constructs an <see cref="T:System.Linq.IQueryable" /> object that can evaluate the query represented by a specified expression tree.</span></span></summary>
        <returns><span data-ttu-id="3a267-305">一个 <see cref="T:System.Linq.IQueryable" />，它可计算指定表达式树所表示的查询。</span><span class="sxs-lookup"><span data-stu-id="3a267-305">An <see cref="T:System.Linq.IQueryable" /> that can evaluate the query represented by the specified expression tree.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-306">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="3a267-306">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3a267-307">它只能在 <xref:System.Data.Linq.Table%601> 实例强制转换为 <xref:System.Linq.IQueryProvider> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="3a267-307">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.CreateQuery&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="System.Linq.IQueryable&lt;TResult&gt; IQueryProvider.CreateQuery&lt;TResult&gt; (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;!!TResult&gt; System.Linq.IQueryProvider.CreateQuery&lt;TResult&gt;(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA; virtual System::Linq::IQueryable&lt;TResult&gt; ^ System.Linq.IQueryProvider.CreateQuery(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::CreateQuery;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="3a267-308">表中数据的类型。</span><span class="sxs-lookup"><span data-stu-id="3a267-308">The type of the data in the table.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="3a267-309">从其开始执行计算的查询表达式。</span><span class="sxs-lookup"><span data-stu-id="3a267-309">The query expression from which the evaluation is performed.</span></span></param>
        <summary><span data-ttu-id="3a267-310">构造一个 <see cref="T:System.Linq.IQueryable`1" /> 对象，该对象可计算指定表达式树所表示的查询。</span><span class="sxs-lookup"><span data-stu-id="3a267-310">Constructs an <see cref="T:System.Linq.IQueryable`1" /> object that can evaluate the query represented by a specified expression tree.</span></span></summary>
        <returns><span data-ttu-id="3a267-311">一个 <see cref="T:System.Linq.IQueryable`1" />，它可计算指定表达式树所表示的查询。</span><span class="sxs-lookup"><span data-stu-id="3a267-311">An <see cref="T:System.Linq.IQueryable`1" /> that can evaluate the query represented by the specified expression tree.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-312">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="3a267-312">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3a267-313">它只能在 <xref:System.Data.Linq.Table%601> 实例强制转换为 <xref:System.Linq.IQueryProvider> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="3a267-313">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.Execute">
      <MemberSignature Language="C#" Value="object IQueryProvider.Execute (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Linq.IQueryProvider.Execute(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Linq.IQueryProvider.Execute(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::Execute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression"><span data-ttu-id="3a267-314">要执行的查询表达式。</span><span class="sxs-lookup"><span data-stu-id="3a267-314">The query expression to execute.</span></span></param>
        <summary><span data-ttu-id="3a267-315">执行指定表达式树所表示的查询。</span><span class="sxs-lookup"><span data-stu-id="3a267-315">Executes the query represented by a specified expression tree.</span></span></summary>
        <returns><span data-ttu-id="3a267-316">执行指定查询所生成的值。</span><span class="sxs-lookup"><span data-stu-id="3a267-316">The value that results from executing the specified query.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-317">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="3a267-317">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3a267-318">它只能在 <xref:System.Data.Linq.Table%601> 实例强制转换为 <xref:System.Linq.IQueryProvider> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="3a267-318">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.Execute&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="TResult IQueryProvider.Execute&lt;TResult&gt; (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance !!TResult System.Linq.IQueryProvider.Execute&lt;TResult&gt;(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA; virtual TResult System.Linq.IQueryProvider.Execute(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::Execute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="3a267-319">表中数据的类型。</span><span class="sxs-lookup"><span data-stu-id="3a267-319">The type of the data in the table.</span></span></typeparam>
        <param name="expression"><span data-ttu-id="3a267-320">要执行的查询表达式。</span><span class="sxs-lookup"><span data-stu-id="3a267-320">The query expression to execute.</span></span></param>
        <summary><span data-ttu-id="3a267-321">执行指定表达式树所表示的强类型查询。</span><span class="sxs-lookup"><span data-stu-id="3a267-321">Executes the strongly-typed query represented by a specified expression tree.</span></span></summary>
        <returns><span data-ttu-id="3a267-322">执行指定查询所生成的值。</span><span class="sxs-lookup"><span data-stu-id="3a267-322">The value that results from executing the specified query.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3a267-323">此成员是显式的接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="3a267-323">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="3a267-324">它只能在 <xref:System.Data.Linq.Table%601> 实例强制转换为 <xref:System.Linq.IQueryProvider> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="3a267-324">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="3a267-325">返回表示表的字符串。</span><span class="sxs-lookup"><span data-stu-id="3a267-325">Returns a string that represents the table.</span></span></summary>
        <returns><span data-ttu-id="3a267-326">表的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="3a267-326">A string representation of the table.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>